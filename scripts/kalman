#!/bin/bash
# Major script to run Kalman fitting. Sensitivity matrix must be already calculated: 
# 1. create sensitivity input for the specific case (see the templete 'Default sesnitivity input'
#    under Options pull-down menu in GUI)
# 2. set KALMAN option in the EMPIRE input to 1.
# 3. run runE script as usual (this might take several hours!)
# 4. DON'T FORGET: to set KALMAN option back to 0 and rerun calculations to restore ENDF formatted file 
#    (or copy preserved version)
# 5. run this (kalman) script with the parameters listed below.
#    When running from GUI use 'Kalman options' in Options or Kalamn pull-down menus to control use of 
#    experimental data, other parameters are set up automatically.  


file=$1         # Empire input file stem (no extension) - required.
MT=$2           # MT for plotting. If not present or 0 -> plot all.
MAT=$3          # MAT of material. If not present or 0 -> use MAT in ENDF file.
# EXPDAT=$4       # 1=fit only specifed MT; 2=fit all MTs; other=fit no exp data.
PFNS=$4         # set non-zero (true) to fit PFNS data.
EINC=$5         # Incident energy for which to fit PFNS (in MeV).

if [ -z $EMPIREDIR ]; then
    echo "Please set the 'EMPIREDIR' environment variable."
    echo "See Empire v3 documentation for more information."
    exit
fi

if [ -z $file ]; then
  echo "INPUT FILE STEM NOT SPECIFIED!"
  exit
fi

if [ ! -s ${file}.endf ]; then
   echo " ENDF FILE NOT FOUND! (${file}.endf)"
   echo -n ' Hit carriage return to exit kalman script > '
   read errkey
   exit 1
fi

if [ -z $MT -o "$MT" = "0" ]; then
   MTset="1 2 3 4 11 16 17 1 22 24 45 102 103 105 105 106 107 112 207 251 456 5 851"   # MTset is used only for exp. data selection
   MT="0"                                                         # MT=0 KALMAN for all available reactions 
   EXPDAT="2"
elif [ "$MT" = "1000" ]; then                                     # MT=100 KALMAN for all reactions but ignore exp. data
   MTset="0"
   MT="0"
   EXDAT="3"
else                                                              # KALMAN and using input MT exp.data only
   MTset=$MT
   EXPDAT="1"
fi


if [ -z $MAT -o "$MAT" = "0" ]; then
   MAT=$($EMPIREDIR/util/mkendf/getmtn ${file}.endf)
fi

# if [ -z $EXPDAT ]; then
#    EXPDAT="0"
# fi

if [ -z $PFNS ]; then
   PFNS=0
fi

if [ -z $EINC ]; then
   EINC="NONE"
fi

if [ ! -s ${file}-inp.sen ]; then
   echo " PARAMETER FILE NOT FOUND! (${file}-inp.sen)"
   echo -n ' Hit carriage return to exit kalman script > '
   read errkey
   exit 1
fi

if [ $PFNS = 0 ]; then
   echo "Fitting cross sections using ${file}-mat.sen."
   if [ ! -s ${file}.xsc ]; then
     echo " CROSS SECTIONS FILE NOT FOUND! (${file}.xsc)"
     echo -n ' Hit carriage return to exit kalman script > '
     read errkey
     exit 2
   fi
   if [ ! -s ${file}-mat.sen ]; then
     echo " SENSITIVITY FILE NOT FOUND! (${file}-mat.sen)"
     echo -n ' Hit carriage return to exit kalman script > '
     read errkey
     exit 3
   fi
elif [ $PFNS = 1 ]; then
   echo "Fitting prompt fission neutron spectra using ${file}-pfns-full-mat.sen."
   if [ ! -s ${file}-pfns.out ]; then
      echo " PROMPT NEUTRON FISSION SPECTRA FILE NOT FOUND! (${file}-pfns.out)"
      echo -n ' Hit carriage return to exit kalman script > '
      read errkey
      exit 4
   fi
   if [ ! -s ${file}-pfns-full-mat.sen ]; then
     echo " PFNS SENSITIVITY FILE NOT FOUND! (${file}-pfns-full-mat.sen)"
     echo " ALLOWING TO CONTINUE TO COMPARE INCIDENT ENERGIES, EVEN THOUGH pnt2kal WILL CRASH"
     # exit 5
   fi
else
   echo "Option PFNS = $PFNS has not been implemented yet."
   echo -n ' Hit carriage return to exit kalman script > '
   read errkey
   exit 6
fi

# clean up anything left around from a previous run
rm -f fort.*  ENERGYANDINDEX.TMP *.gpd

# now loop through the kalman fitting, repeating the fit for each plotted
# MT. Note that all the data in the C4 and and XSC file are fitted for each
# pass redundantly - only the MT plot changes for each pass through the loop.


for k in $MT; do

    echo "MT= ${k}"
    echo $file ${k} $MAT $EXPDAT $PFNS $EINC > INPUT.D
    rm expxscplot*.d
    rm -f KALMAN.INP

    if [ "$PFNS" -eq 0 ]
    then
      # c4tokal reads the C4 file and writes data, unc & corr to
      # fort.10, .11 & .12. Also creates new KALMAN.INP
      echo  "Running c4tokal"
      if ! $EMPIREDIR/util/kalman/c4tokal < INPUT.D
      then
         echo " Error running c4tokal"
         echo -n ' Hit carriage return to exit kalman script > '
         read errkey
         exit 7
      fi

    else
      # pnt2kal perpares PFNS data for fitting with kalman
      # data, unc, corr written to fort.10,11,12 & makes new KALMAN.INP
      echo  "Running pnt2kal"
      if ! $EMPIREDIR/util/kalman/pnt2kal < INPUT.D
      then
         echo " Error running pnt2kal"
         echo -n ' Hit carriage return to exit kalman script > '
         read errkey
         exit 8
      fi
      if [ ! -s ENERGYANDINDEX.TMP ]; then
         echo "ERROR: pnt2kal ended abnormally!"
         echo -n ' Hit carriage return to exit kalman script > '
         read errkey
         exit
      fi
      read NE INDEX EINC < ENERGYANDINDEX.TMP
      i=1
      while [ $i -le $NE ]
      do
        printf -v l "%3d\n" $i
        grep "^.\{49,51\}$l" fort.75 >>$file-PFNS-${i}-c4.gpd
        i=$(($i + 1))
      done
    fi

    echo  "Running genkal"
    if ! $EMPIREDIR/util/kalman/genkal < INPUT.D
    then
      echo " Error running genkal"
      echo -n ' Hit carriage return to exit kalman script > '
      read errkey
      exit 9
    fi


    # EXPERIMENTAL DATA AND THEIR CORRELATIONS

    if [ "$EXPDAT" != 0 ]; then
       if [ -s $file-expXsc.kal ]; then
          echo "Existing file ${file}-expXsc.kal replacing C4 cross sections"
	       cp $file-expXsc.kal fort.10    # c4tokal produced fort.10
       else
	       cp fort.10 ${file}-expXsc.kal
       fi

       if [ -s $file-expCorr.kal ]; then
          echo "Existing file ${file}-expCorr.kal replacing C4 xsec correlations"
	       cp $file-expCorr.kal fort.12    # c4tokal produced fort.12
       else
	       cp fort.12 ${file}-expCorr.kal
       fi
    else
       echo " Experimental data not used. Removing data, err, & corr files"
       rm fort.10
       rm fort.11
       rm fort.12
    fi

    # CORRELATIONS AMONG MODEL PARAMETERS

    if [ ! -s ${file}-parCorr.kal ]; then
       cp fort.52 ${file}-parCorr.kal
    else
       cp ${file}-parCorr.kal fort.52
    fi

    echo  "Running kalman"
    if ! $EMPIREDIR/util/kalman/kalman
    then
      echo " Error running kalman"
      echo -n ' Hit carriage return to exit kalman script > '
      read errkey
      exit 10
    fi

    cat fort.16 fort.32 > fort.48
    mv KALMAN.OUT $file-out.kal
    mv fort.13 $file-xsc.kal  # Should give a different name for this file in the pfns case, but which? '-pfns.kal' is taken.
    mv fort.14 $file-cov.kal
    mv fort.12 $file-expCorr.kal
    mv fort.52 $file-parCorr.kal     # Generated input to Kalman (parameter names, values, uncertainties, & correlations) 
    mv fort.21 $file-parCorrOut.kal  # Same format as -parCorr.kal => can be used as the input to Kalamn by renameing it to -parCorr.kal and adding sensitivities from original -parCorr.kal
    rm ENERGYANDINDEX.TMP 2>/dev/null
    #rm -f fort.{1*,50,75}

    echo "Kalman run done - continue with Kalend"

    echo  "Running kalend"
    if ! $EMPIREDIR/util/kalman/kalend < INPUT.D
    then
      echo " Error running kalend"
      echo -n ' Hit carriage return to exit kalman script > '
      read errkey
      exit 12
    fi

   #  if [ $PFNS -eq 0 ]; then
   #    cp ${file}-${k}-c4.gpd expxscplot.d
   #  else
   #    cp ${file}-PFNS-${INDEX}-c4.gpd expxscplot.d
   #  fi

   #  #PLOT DATA ONLY WITH EXPERIMENTAL DATA

   #  if [ "$EXPDAT" != 0 ]; then
   #    if [ "$PFNS" -eq 0 ]
   #    then
   #      gnuplot $EMPIREDIR/util/kalman/corr.gp >/dev/null
   #    else
   #      gnuplot $EMPIREDIR/util/kalman/corr-pfns.gp >/dev/null
   #    fi
   #  fi

    # Should consider a different name for these files in the pfns case, but which? 
    #  mv corrplot.d $file-${k}-cov.gpd
    #  mv xscplot.d  $file-${k}-xsc.gpd

   #  mv KALMAN.OUT $file-out.kal
   #  mv fort.13 $file-xsc.kal  # Should give a different name for this file in the pfns case, but which? '-pfns.kal' is taken.
   #  mv fort.14 $file-cov.kal
   #  mv fort.12 $file-expCorr.kal
   #  mv fort.52 $file-parCorr.kal     # Generated input to Kalman (parameter names, values, uncertainties, & correlations) 
   #  mv fort.21 $file-parCorrOut.kal  # Same format as -parCorr.kal => can be used as the input to Kalamn by renameing it to -parCorr.kal and adding sensitivitties from tthe original -parCorr.kal
    rm INPUT.D
    rm ENERGYANDINDEX.TMP 2>/dev/null
    rm -f fort.{1*,50,75}

    echo 'COMPLETE ...'
done

exit
