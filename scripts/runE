#!/usr/bin/env python
# encoding: utf-8
"""
runE.py

modified by David Brown on 2012-01-26.
modified by Roberto Capote on 2010-10-01.
author Caleb Mattoon

script to run EMPIRE (only X-sec calculations)
ported to python, some error checking
"""

import sys
import os
import shutil
from glob import glob
# get rm(), mv(), cp(), ln() and isEmpty() functions:
#from empy.bash import *

PACKAGEDIR = os.sep.join( os.path.dirname( os.path.abspath( __file__ ) ).split( os.sep )[:-1] )

def get_version( ):
    for line in open( PACKAGEDIR + os.sep + 'version' ).readlines(): 
        if line.startswith( 'VERSIONNUMBER' ): VERSIONNUMBER = line.split( )[-1]
        if line.startswith( 'VERSIONNAME' ): VERSIONNAME = line.split( )[-1]
    return ( VERSIONNAME, VERSIONNUMBER )


def runE(proj):
    """
    run EMPIRE for project named proj
    """
    
    # set EMPIREDIR if necessary:
    if (not os.environ.has_key('EMPIREDIR')) or (os.environ['EMPIREDIR']==''):
        import time
        print ("Please set environment variable EMPIREDIR in your bashrc:\n")
        print ("export EMPIREDIR=<path to empire>\n")
        print ("Guessing at path for now")
        time.sleep(2)
        os.environ['EMPIREDIR'] = PACKAGEDIR
    
    # Preserve previous *.lst file for comparison
    if not isEmpty(proj+'.lst'):
        cp(proj+'.lst', proj+'-prev.lst')
        print ('Preserved existing *.lst file as: %s' % proj+'-prev.lst')
    
    # CLEAN ALL THE FILES WHICH MIGHT BE LEFT FROM THE PREVIOUS RUN
    # rm is a function defined below
    rm(proj+'.out', proj+'.lst', proj+'.endf', proj+'.ps')
    rm('OMP_A.DAT', 'EMPIRE.STA', 'PFNM.OUT', 'PFNS.OUT')
    rm('OUTPUT.DAT', 'LIST.DAT', 'OMPAR.RIPL', 'GAMMA.DAT', 'FUSION')
    rm('OMPAR.DIR', 'FISSION.INP', 'FISS_XS.OUT', 'FISSION.OUT')
    rm('CUMULPLOT.PS', 'ecVIB.inp', 'ecROT.inp', 'ecVIBROT.inp')
    rm('ECIS_ROT.out', 'ECIS_VIB.out', 'ECIS_VIBROT.out')
    rm('TARGET_COLL.DAT', 'TARGET_COLL.RIPL', 'warnings', 'INPUT')
    rm('XS_DOWN.DAT', 'XSECTIONS.OUT', 'XS_UP.DAT', 'SENSITIVITY.INP')
    rm('SENSITIVITY.MATRIX')
    rm( glob('fort.*') + glob('ecis06.*') + glob('*.leg') +
        glob('*.LEG') + glob('TARGET-*.tl') )
    
    
    if (not os.path.exists(proj+'.inp')):
        print("Input file : %s does not exist" % proj+'.inp')
        sys.exit(1)
    
    # COPY Input files for our project.
    # EMPIRE wants files with certain names,
    # so we must move our files around.
    cp(proj+'.inp', 'INPUT.DAT')
    
    # check if the file exists and has size > 0, if so keep it
    if not isEmpty(proj+'-s.endf'):
        cp(proj+'-s.endf', proj+'-prev.endf')
        print ('Preserved existing ENDF file as: %s' % proj+'-prev.endf')
    if not isEmpty(proj+'.lev'):
        cp(proj+'.lev', 'LEVELS')
        print ('Using existing file with levels: %s' % proj+'.lev')
    if not isEmpty(proj+'-omp.ripl'):
        cp(proj+'-omp.ripl', 'OMPAR.RIPL')
        print('Using existing file with optical model par: %s' % 
                proj+'-omp.ripl')
    if not isEmpty(proj+'-omp.dir'):
        cp(proj+'-omp.dir','OMPAR.DIR')
        print('Using existing file with optical model par: %s' % 
                proj+'-omp.dir')
    # make symlink to transmission coefficient directory:
    if os.path.isdir(proj+'-tl'):
        ln(proj+'-tl','TL')
        print('Using transmission coefficients stored in: %s' % proj+'-tl')
    else:
        try:
            shutil.rmtree('TL')
        except OSError: #directory DNE
            pass
        os.mkdir('TL')  
    if not isEmpty(proj+'-lev.col'):
        cp(proj+'-lev.col','TARGET_COLL.DAT')
        print('Using existing file with collective levels: %s' % 
                proj+'-lev.col')
    if not isEmpty(proj+'.fus'):
        cp(proj+'.fus','FUSION')
        print('Using existing file with fusion cross sections: %s' % 
                proj+'.fus')
    if not isEmpty(proj+'-inp.fis'):
        cp(proj+'-inp.fis','FISSION.INP')
        print('Using existing file with fission input: %s' % proj+'-inp.fis')
    if not isEmpty(proj+'.exf'):
        cp(proj+'.exf','EXFOR.DAT')
        print('Using existing file with EXFOR data: %s' % proj+'.exf')
    if not isEmpty(proj+'.c4'):
        cp(proj+'.c4','C4.DAT')
        print('Using existing file with C4 fit data: %s' % proj+'.c4')
    if not isEmpty(proj+'-inp.sen'):
        cp(proj+'-inp.sen','SENSITIVITY.INP')
        print('File with sensitivity input exists: %s' % proj+'-inp.sen')
    if not isEmpty(proj+'-mat.sen'):
        cp(proj+'-mat.sen','SENSITIVITY.MATRIX')
        print('File with sensitivity matrix exists: %s' % proj+'-mat.sen')
    if not isEmpty(proj+'.rng'):
        cp(proj+'.rng','R250SEED.DAT')
        print('Using existing random number generator seed')
    if not isEmpty(proj+'-cum.ps'):
        ln(proj+'-cum.ps','FITLEV.PS')
    if not isEmpty(proj+'-nubar.endf'):
        cp(proj+'-nubar.endf','NUBAR-EVAL.ENDF')
        print('Using existing ENDF-B/VII.1 NUBAR evaluation')
    
    # OK, the environment is set up, time to run EMPIRE:
    print ('\n%s  R U N N I N G  !! !  !   !    !     !' % proj)
    sys.stdout.flush() # print in correct order under 'qsub'
    cmd = os.path.join(os.environ['EMPIREDIR'],'source','empire')
    if os.name=='posix':    # not windows
        os.system('time nice "%s"' % cmd)
    else:
        os.system('"%s"' % cmd)
    print ('DONE !!!')
    #return 0    # to keep temporary files, for debugging
    
    
    #Move case-related files to the right place
    mv('OUTPUT.DAT',proj+'.out')
    mv('LIST.DAT',proj+'.lst')
    mv('LEVELS',proj+'.lev')
    mv('FISS_XS.OUT',proj+'-fiss.xsc',0) # no message if not present
    mv('FISSION.INP',proj+'-inp.fis',0)  # no message if not present
    
    
    if not (os.path.isdir(proj+'-tl')):
        mv('TL',proj+'-tl')
    if os.path.islink('TL'):
        os.unlink('TL')
    
    if not isEmpty('OMPAR.RIPL'):
        cp('OMPAR.RIPL',proj+'-omp.ripl')
    if not isEmpty('OMPAR.DIR'):
        cp('OMPAR.DIR',proj+'-omp.dir')
        
    # FISSION.INP    
    #if not isEmpty(proj+'-inp.fis'):
    #    cp('FISSION.INP',proj+'-inp.fis',0) # no message if not present

    if isEmpty(proj+'-lev.col'):
        if not isEmpty('TARGET_COLL_RIPL.DAT'):
            mv('TARGET_COLL_RIPL.DAT',proj+'-lev.col')
            tfile = open(proj+'-lev.col','a')   # append mode
            tfile.write('\n\n\n')
            tfile.write('NOTE: this line and those below will not\
                    be used by Empire. \n')
            tfile.write('      The collective levels and ground state band\
                    deformation \n')
            tfile.write('      printed below are inferred from the discrete\
                    level file   \n')
            tfile.write('      and provided for comparison with the RIPL data\
                    above.\n')
            tfile.write('\n\n')
            if not isEmpty('TARGET_COLL.DAT'):
                tfile1 = open('TARGET_COLL.DAT','r').readlines()
                # emulate 'cat >> '
                for tline in tfile1:
                    tfile.write(tline)
            tfile.close()
        else:
            if not isEmpty('TARGET_COLL.DAT'):
                mv('TARGET_COLL.DAT',proj+'-lev.col')
    
    # beware, these commands make assumptions about the system:
    if not isEmpty('CUMULPLOT.PS'):
        # no exception if ps2ps not found, just a message:
        os.system('ps2ps -r9200 CUMULPLOT.PS %s-cum.ps' % proj)
        if os.path.exists(proj+'-cum.ps'):
            # read preferences from .Xrunrc:
            prefs = open( os.path.join(os.environ['EMPIREDIR'],'.Xrunrc')
                    ,'r').readlines()
            psviewer = prefs[3].strip()
            # open ps file properly:
            if sys.platform == 'darwin':
                if '.app' in psviewer:
                    os.system('open -a %s %s' % (psviewer,proj+'-cum.ps'))
                else:
                    os.system('%s %s' % (psviewer,proj+'-cum.ps'))
            elif 'linux' in sys.platform:
                os.system('%s %s' % (psviewer,proj+'-cum.ps'))
            else:
                # probably windows...
                print ('Unknown system trying to open ps file')
    
    if not isEmpty('SYSTEMATICS.TXT'):
        mv('SYSTEMATICS.TXT',proj+'.sys')
    if not isEmpty('XSECTIONS.OUT'):
        mv('XSECTIONS.OUT',proj+'.xsc')
    if not isEmpty('SENSITIVITY.MATRIX'):
        mv('SENSITIVITY.MATRIX',proj+'-mat.sen')
    if not isEmpty('OMP_A.DAT'):
        mv('OMP_A.DAT',proj+'-aOMP.lst',0)
    if not isEmpty('NUBAR-EVAL.ENDF'):
        mv('NUBAR-EVAL.ENDF',proj+'-nubar.endf',0)
    
    # move files, no warning if files DNE:
    mv('EXFOR.DAT',proj+'.exf',0)
    mv('C4.DAT',proj+'.c4',0)
    mv('ECIS_ROT.out',proj+'-ecis-rot.out',0)
    mv('ECIS_VIB.out',proj+'-ecis-vib.out',0)
    mv('ECIS_VIBROT.out',proj+'-ecis-vibrot.out',0)
    mv('ecVIB.inp',proj+'-ecis-vib.in',0)
    mv('ecROT.inp',proj+'-ecis-rot.in',0)
    mv('ecVIBROT.inp',proj+'-ecis-vibrot.in',0)
    mv('FISSION.OUT',proj+'-fiss.out',0)
    mv('R250SEED.DAT',proj+'.rng',0)
    mv('PFNM.OUT',proj+'-pfnm.out',0)
    mv('PFNS.OUT',proj+'-pfns.out',0)
    mv('FIT.OUT',proj+'-ompfit.lst',0)
    # level-density plots:
    for LDfile in glob("LD_*.zvd"):
        mv(LDfile,proj+LDfile,0)
    # spectra for one energy run:
    for LDfile in glob("sp_*.zvd"):
        mv(LDfile,proj+LDfile,0)
    
    # Extract Warnings from the list file:
    # this is portable version of 'grep WARNING infile > outfile
    listfile = open(proj+'.lst','r').readlines()
    warnfile = open(proj+'.war','w')
    for line in listfile:
        if 'WARNING' in line:
            warnfile.write(line)
        if 'ERROR' in line:
            warnfile.write(line)
    warnfile.close()
    
    # Delete Temporary files
    
    rm('FUSION', 'fort.70', 'fort.66', 'fort.16')
    rm('ecVIB.inp', 'ecROT.inp', 'ecVIBROT.inp')
    rm('ECIS_ROT.out', 'ECIS_VIB.out', 'ECIS_VIBROT.out')
    rm('OMPAR.RIPL', 'TARGET_COLL.RIPL', 'TARGET_COLL.DAT', 'TARGET_COLL_RIPL.DAT')
    rm( glob('TARGET-*.tl') )
    rm('TARGET.LEV','OMP_A.DAT')
    rm('EXFOR.DAT')
    rm('C4SORTM.INP')    
    rm('c4sort.scr')        
    rm('C4SORT.TMP')        
    rm('INPUT')
    rm('INPUT.DAT')
    rm('FISSION.INP')
    rm('OMPAR.DIR')
    rm('OMPdata.dat')
    rm('mt_x4r.txt')
    rm('TAPE15', 'TAPE16', 'TAPE66')
    rm('file99')
    rm('DEGASRESULT')
    rm('angdis.pnt', 'angdis.cur')
    rm('ccm.CS','dwba.CS','INCIDENT.CS', 'ccm.TLJ','dwba.TLJ',
            'INCIDENT.TLJ','ccm.ANG','dwba.ANG','INCIDENT.ANG',
            'ccm.ICS','dwba.ICS','INCIDENT.ICS','ccm.LEG','dwba.LEG',
            'INCIDENT.LEG') 
    rm('ecis06.ang','ecis06.cs','ecis06.dat','ecis06.ics','ecis06.pol',
            'ecis06.tlj','ecis06.leg','ecis06.esp','ecis06.inp')
    rm('ecSPH.inp')
    rm('ECIS_SPH.out')
    rm('FITIN.DAT')
    rm('FITLEV.PS')
    rm('INPUT1.DAT')
    rm('SENSITIVITY.INP', 'XS-DOWN.DAT', 'XS-UP.DAT')
    rm('COVAR.DAT')
    rm('OPTFIT.CAL', 'OMPAR0.DIR', 'INPUT0.DAT')
    rm('OMPAR.DIR', 'LOW_ENERGY.OUT', 'ecis06.exp', 'ecis06.smat')
    rm('angdis.p92', 'ecis06.dat', 'empmf1.tmp', 'FISS_XS.ZVD')
    
    if not isEmpty(proj+'.exf'):
        if isEmpty(proj+'.c4'):
            # RUN X4TOC4 TO TRANSLATE EXFOR FILE INTO COMPUTATIONAL FORMAT
            
            cmd = os.path.join(os.environ['EMPIREDIR'],'scripts','c4')
            os.system('"%s" %s' % (cmd,proj) )
            
            # RUN c4sort TO SORT C4 DATA
            
            cmd = os.path.join(os.environ['EMPIREDIR'],'scripts','sortc4')
            os.system('"%s" %s' % (cmd,proj) )
    
    # REMOVE EMPTY FILES:
    
    if isEmpty(proj+'-omp.dir'):
        rm(proj+'-omp.dir')
    if isEmpty(proj+'-lev.col'):
        rm(proj+'-lev.col')
    if isEmpty(proj+'.war'):
        rm(proj+'.war')
    if isEmpty(proj+'-ecis.in'):
        rm(proj+'-ecis.in')
    if isEmpty(proj+'-ecis.out'):
        rm(proj+'-ecis.out')
    if isEmpty(proj+'-inp.fis'):
        rm(proj+'-inp.fis')
    if isEmpty(proj+'-pfns.out'):
        rm(proj+'-pfns.out')
    if isEmpty(proj+'-MC.par'):
        rm(proj+'-MC.par')
    if isEmpty('FISSION.OUT'):
        rm('FISSION.OUT')
    
    # Produce ZVD files from cross-section tables:
    if not isEmpty(proj+'.xsc'):
        cmd = os.path.join(os.environ['EMPIREDIR'],'scripts','cs2zvd')
        os.system('"%s" %s' % (cmd, proj))
    
    return 0



def splashscreen():
    splash = [
    ' ',\
    ' EEEEE  M    M  PPPP   I  RRRR   EEEEE      33333   11 ',\
    ' E      MM  MM  P   P  I  R   R  E             33   11 ',\
    ' EEE    M MM M  PPPP   I  RRRR   EEE    =   33333   11 ',\
    ' E      M    M  P      I  R  R   E              3   11 ',\
    ' EEEEE  M    M  P      I  R   R  EEEEE      33333 O 11 ',\
    ' ',\
    ' '.join( get_version()[0] ) + '  ( version ' + get_version()[1] +' )',\
    ' ',\
    ' Sao Jose dos Campos, Brazil, May 2011 ',\
    ' Upton, New York, USA, January 2012 ',\
    ' ']
    return '\n'.join( [ x.center(60) for x in splash ] )


#from bash.py:
def rm(*args, **kwargs):
    """
    remove file or list of files, silent on error unless verbose=True
    example:
    rm( 'foo.txt', 'bar.txt', verbose=True ) prints any errors
    rm( 'foo.txt', 'bar.txt' ) is silent on error
    """
    for f in args:
        # so we can use lists returned by glob:
        if type(f) is list:
            for el in f:
                try:
                    os.remove(el)
                except OSError, e:
                    if 'verbose' in kwargs.keys() and kwargs['verbose']:
                        print (e)
        else:
            try:
                os.remove(f)
            except OSError, e:
                if 'verbose' in kwargs.keys() and kwargs['verbose']:
                    print (e)


def mv(source, target, verbose=True):
    """
    emulate bash mv command (one file at a time)
    silent on error unless verbose=True
    """
    try:
        shutil.move(source, target)
        #os.rename(source, target)  # no work on Windows
    #except OSError, e:
    except IOError, e:
        if verbose:
            print (e)
    """
    try:
        shutil.move(source, target) # not present before v2.3
    except IOError, e:
        if verbose:
            print (e)
    """


def cp(source, target, verbose=True):
    """
    emulate bash cp command
    """
    try:
        shutil.copy(source, target)
    except IOError, e:
        if verbose:
            print (e)

def ln(source, target, verbose=True):
    """
    emulate bash ln command
    """
    try:
        os.symlink(source, target)
    except OSError, e:
        if verbose:
            print (e)
    except AttributeError:  # no symlink on windows
        mv(source, target, verbose)


def isEmpty(filename):
    """
    emulate the [ ! -s filename ] test in bash (doesn't exist or is empty)
    also 'not isEmpty()' should be equivalent to [ -s filename ]
    """
    return (not os.path.exists(filename)) or (os.path.getsize(filename)==0)
    


if __name__ == '__main__':
    
    print( splashscreen() )
    
    if len(sys.argv)>=2:
        proj = sys.argv[1]
        if os.path.exists(proj+'.inp'):
            print ("Using existing file with input: %s" % proj+'.inp' )
        else:
            print ("Input file %s does not exist" % proj+'.inp' )
            sys.exit(1)
    
    if len(sys.argv)<2:
        print ("Inputs ready to run:\n")
        for a in glob('*.inp'):
            print ("%s\n" % a)
        proj = raw_input(
                "Choose one of the above (without the .inp extension): ")
    
    runE(proj)
