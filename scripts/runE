#!/usr/bin/env python
# encoding: utf-8
"""
runE.py

modified by David Brown on 2012-01-26.
modified by Roberto Capote on 2013-04-30.
author Caleb Mattoon

script to run EMPIRE (only X-sec calculations)
ported to python, some error checking
"""

import sys
import os
import shutil
from glob import glob
# get rm(), mv(), cp(), ln() and isEmpty() functions:
#from empy.bash import *

PACKAGEDIR = os.sep.join( os.path.dirname( os.path.abspath( __file__ ) ).split( os.sep )[:-1] )

def get_version( ):
    if (not os.path.exists(PACKAGEDIR + os.sep + 'version')):
        VERSIONNUMBER = '3.1'  # setting default for the case that the version file is not found 
        VERSIONNAME = 'RIVOLI' # setting default for the case that the version file is not found 
        return ( VERSIONNAME, VERSIONNUMBER )

    for line in open( PACKAGEDIR + os.sep + 'version' ).readlines(): 
        if line.startswith( 'VERSIONNUMBER' ): VERSIONNUMBER = line.split( )[-1]
        if line.startswith( 'VERSIONNAME' ): VERSIONNAME = line.split( )[-1]
    return ( VERSIONNAME, VERSIONNUMBER )


def runE(proj):
    """
    run EMPIRE for project named proj
    """
    
    # set EMPIREDIR if necessary:
    if (not os.environ.has_key('EMPIREDIR')) or (os.environ['EMPIREDIR']==''):
        import time
        print ("Please set environment variable EMPIREDIR in your bashrc:\n")
        print ("export EMPIREDIR=<path to empire>\n")
        print ("Guessing at path for now")
        time.sleep(2)
        os.environ['EMPIREDIR'] = PACKAGEDIR
    
    # Preserve previous *inp,*.lst,*.out,*-s.endf,*-CN-lev.xsc files for comparison
    if not isEmpty(proj+'.lst'):
        cp(proj+'.inp', proj+'-prev.inp')
        print ('Preserved existing *.inp file as: %s' % proj+'-prev.inp')
        cp(proj+'.lst', proj+'-prev.lst')
        print ('Preserved existing *.lst file as: %s' % proj+'-prev.lst')
        cp(proj+'.out', proj+'-prev.out')
        print ('Preserved existing *.out file as: %s' % proj+'-prev.out')
        cp(proj+'.xsc', proj+'-prev.xsc')
        print ('Preserved existing *.xsc file as: %s' % proj+'-prev.xsc')
    if not isEmpty(proj+'-s.endf'):
        cp(proj+'-s.endf', proj+'-prev.endf')
        print ('Preserved existing ENDF file as: %s' % proj+'-prev.endf')
    if not isEmpty(proj+'-CN-lev.xsc'):
        cp(proj+'-CN-lev.xsc',proj+'-CN-lev-prev.xsc')
        print ('Preserved existing *-CN-lev.xsc file as: %s' % proj+'-CN-lev-prev.xsc')
  
    # CLEAN ALL THE FILES WHICH MIGHT BE LEFT FROM THE PREVIOUS RUN
    # rm is a function defined below
    rm(proj+'.out', proj+'.lst', proj+'.endf', proj+'.ps')
    rm('OMP_A.DAT', 'EMPIRE.STA', 'PFNM.OUT', 'PFNS.OUT', 'CN-LEV-XS.DAT')
    rm('OUTPUT.DAT', 'LIST.DAT', 'OMPAR.RIPL', 'GAMMA.DAT', 'FUSION')
    rm('OMPAR.DIR', 'FISSION.INP', 'FISS_XS.OUT', 'FISSION.OUT', 'TOTCOR.DAT')
    rm('CUMULPLOT.PS', 'ecVIB.inp', 'ecROT.inp', 'ecVIBROT.inp','OPTMAN.INP')
    rm('ECIS_ROT.out', 'ECIS_VIB.out', 'ECIS_VIBROT.out','OPTMAN.OUT','ECIS_VIB.inp')
    rm('TARGET_COLL.DAT', 'TARGET_COLL_RIPL.DAT', 'warnings', 'INPUT','ECIS_SPH.inp')
    rm('XS_DOWN.DAT', 'XSECTIONS.OUT', 'XS_UP.DAT', 'SENSITIVITY.INP','ECIS_SPH.out')
    rm('SENSITIVITY.MATRIX','NUBAR.DAT','GAMMA_INT.DAT','EL_INEL.DAT')

    rm( glob('fort.*') + glob('ecis06.*') + glob('*.leg') +
        glob('*.LEG') + glob('TARGET-*.tl') )
    
    if (not os.path.exists(proj+'.inp')):
        print("Input file : %s does not exist" % proj+'.inp')
        sys.exit(1)
    
    # COPY Input files for our project.
    # EMPIRE wants files with certain names,
    # so we must move our files around.
    #ln(proj+'.inp', 'INPUT.DAT')
    cp(proj+'.inp', 'INPUT.DAT')
    
    # check if the file exists and has size > 0, if so keep it

    # make symlink to LEVELS file:
    if not isEmpty(proj+'.lev'):
        #ln(proj+'.lev', 'LEVELS')     
        cp(proj+'.lev', 'LEVELS')     
        print ('Using existing file with levels: %s' % proj+'.lev')
    # make symlink to OMP files:
    if not isEmpty(proj+'-omp.ripl'):
        #ln(proj+'-omp.ripl', 'OMPAR.RIPL')
        cp(proj+'-omp.ripl', 'OMPAR.RIPL')
        print('Using existing file with optical model par: %s' % 
                proj+'-omp.ripl')
    if not isEmpty(proj+'-omp.dir'):
        #ln(proj+'-omp.dir','OMPAR.DIR')
        cp(proj+'-omp.dir','OMPAR.DIR')
        print('Using existing file with optical model par (inel scatt): %s' % 
                proj+'-omp.dir')
    # make symlink to transmission coefficient directory:
    if os.path.isdir(proj+'-tl'):
        ln(proj+'-tl','TL')
        print('Using transmission coefficients stored in: %s' % proj+'-tl')
    else:
        try:
            shutil.rmtree('TL')
        except OSError: #directory DNE
            pass
        os.mkdir('TL')  
    if not isEmpty(proj+'-lev.col'):
        #ln(proj+'-lev.col','TARGET_COLL.DAT')
        cp(proj+'-lev.col','TARGET_COLL.DAT')
        print('Using existing file with collective levels: %s' % 
                proj+'-lev.col')
    if not isEmpty(proj+'.fus'):
        #ln(proj+'.fus','FUSION')
        cp(proj+'.fus','FUSION')
        print('Using existing file with fusion cross sections: %s' % 
                proj+'.fus')
    if not isEmpty(proj+'-inp.fis'):
        #ln(proj+'-inp.fis','FISSION.INP')
        cp(proj+'-inp.fis','FISSION.INP')
        print('Using existing file with fission input: %s' % proj+'-inp.fis')
    if not isEmpty(proj+'.exf'):
        #ln(proj+'.exf','EXFOR.DAT')
        cp(proj+'.exf','EXFOR.DAT')
        print('Using existing file with experimental data (EXFOR): %s' % proj+'.exf')
    if not isEmpty(proj+'.c4'):
        #ln(proj+'.c4','C4.DAT')
        cp(proj+'.c4','C4.DAT')
        print('Using existing file with experimental data (C4): %s' % proj+'.c4')
    if not isEmpty(proj+'-inp.sen'):
        cp(proj+'-inp.sen','SENSITIVITY.INP')
        print('File with sensitivity input exists: %s' % proj+'-inp.sen')
    if not isEmpty(proj+'-mat.sen'):
        cp(proj+'-mat.sen','SENSITIVITY.MATRIX')
        print('File with sensitivity matrix exists: %s' % proj+'-mat.sen')
    if not isEmpty(proj+'.rng'):
        print('Using existing random number generator seed')
        cp(proj+'.rng','R250SEED.DAT')
    else:
        print('Default random number generator seed will be created if needed')
    #    open(proj+'.rng',mode='w').write( '42' ) # Nod to Douglas Adams 
    #cp(proj+'.rng','R250SEED.DAT')
    if not isEmpty(proj+'-nubar.dat'):
        #ln(proj+'-nubar.dat','NUBAR.DAT')
        cp(proj+'-nubar.dat','NUBAR.DAT')
        print('File with evaluated NUBAR exists: %s' % proj+'-nubar.dat')  
    #if not isEmpty(proj+'-cum.ps'):
        #ln(proj+'-cum.ps','FITLEV.PS')
    
    # OK, the environment is set up, time to run EMPIRE:
    print ('\n%s  R U N N I N G  !! !  !   !    !     !' % proj)
    sys.stdout.flush() # print in correct order under 'qsub'
    cmd = os.path.join(os.environ['EMPIREDIR'],'source','empire')
    if os.name=='posix':    # not windows
        os.system('time nice "%s"' % cmd)
    else:
        os.system('"%s"' % cmd)
    print ('DONE !!!')
    #return 0    # to keep temporary files, for debugging
    
    
    #Move case-related files to the right place
    mv('OUTPUT.DAT',proj+'.out')
    mv('LIST.DAT',proj+'.lst')
    # Commented to avoid overwriting the existing file (not an output file)   
    mv('LEVELS',proj+'.lev')
    if not isEmpty('GAMMA_INT.DAT'):
        mv('GAMMA_INT.DAT',proj+'-gam-tr.xsc',0)  # no message if not present    
    mv('EL_INEL.DAT',proj+'-preq.xsc',0)          # no message if not present    
    mv('XSECTIONS.OUT',proj+'.xsc',0)             # no message if not present
    mv('FISS_XS.OUT',proj+'-fiss.xsc',0)          # no message if not present
    # Commented to avoid overwriting the existing file (not an output file)   
    mv('FISSION.INP',proj+'-inp.fis',0)           # no message if not present
    mv('CUMULPLOT.PS',proj+'-cum.ps',0)           # no message if not present     

    if not (os.path.isdir(proj+'-tl')):
       mv('TL',proj+'-tl')
    #if os.path.islink('TL'):
     #   os.unlink('TL')

    # avoid overwriting, not INPUT files    
    if not isEmpty('OMPAR.RIPL'):
        cp('OMPAR.RIPL',proj+'-omp.ripl')
    if not isEmpty('OMPAR.DIR'):
        cp('OMPAR.DIR',proj+'-omp.dir')
        
    # FISSION.INP    
    #if not isEmpty(proj+'-inp.fis'):
    #    cp('FISSION.INP',proj+'-inp.fis',0) # no message if not present

    if isEmpty(proj+'-lev.col'):
        if not isEmpty('TARGET_COLL.DAT'):
            mv('TARGET_COLL.DAT',proj+'-lev.col')
            tfile = open(proj+'-lev.col','a')   # append mode
            tfile.write('\n\n\n')
            tfile.write('-------------------------------------------------------------- \n')
            tfile.write('NOTE: this line and those below will not be used by EMPIRE. \n')
            tfile.write('      The collective levels and ground state band deformation \n')
            tfile.write('      printed below are retrieved from RIPL optical model data \n')
            tfile.write('      and provided as a reference. \n')
            tfile.write('-------------------------------------------------------------- \n')
            tfile.write('\n\n')
            if not isEmpty('TARGET_COLL_RIPL.DAT'):
                tfile1 = open('TARGET_COLL_RIPL.DAT','r').readlines()
                # emulate 'cat >> '
                for tline in tfile1:
                    tfile.write(tline)
            tfile.close()
        else:
            if not isEmpty('TARGET_COLL_RIPL.DAT'):
                mv('TARGET_COLL_RIPL.DAT',proj+'-lev.col')
    
    # beware, these commands make assumptions about the system:
    if not isEmpty('CUMULPLOT.PS'):
        # no exception if ps2ps not found, just a message:
        # os.system('ps2ps -r9200 CUMULPLOT.PS %s-cum.ps' % proj)
        # os.system('mv CUMULPLOT.PS %s-cum.ps' % proj)
        mv('CUMULPLOT.PS',proj+'-cum.ps',0)         # no message if not present   
        if os.path.exists(proj+'-cum.ps'):
            # read preferences from .Xrunrc:
            prefs = open( os.path.join(os.environ['EMPIREDIR'],'.Xrunrc')
                    ,'r').readlines()
            psviewer = prefs[3].strip()
            # open ps file properly:
            if sys.platform == 'darwin':
                if '.app' in psviewer:
                    os.system('open -a %s %s' % (psviewer,proj+'-cum.ps'))
                else:
                    os.system('%s %s' % (psviewer,proj+'-cum.ps'))
            elif 'linux' in sys.platform:
                os.system('%s %s' % (psviewer,proj+'-cum.ps'))
            else:
                # probably windows...
                print ('Unknown system trying to open ps file')
    
    if not isEmpty('SYSTEMATICS.TXT'):
        mv('SYSTEMATICS.TXT',proj+'.sys')
    if not isEmpty('SENSITIVITY.MATRIX'):
        mv('SENSITIVITY.MATRIX',proj+'-mat.sen')
    
    # move files, no warning if files DNE:
    if not isEmpty('OMP_A.DAT'):
        mv('OMP_A.DAT',proj+'-aOMP.lst',0)
    if not isEmpty('COVAR-PAR.DAT'):
        mv('COVAR-PAR.DAT',proj+'-covar-par.dat',0)
    if not isEmpty('TOTCOR.DAT'):
        mv('TOTCOR.DAT',proj+'-totcor.out',0)
    if not isEmpty('CN-LEV-XS.DAT'):
        mv('CN-LEV-XS.DAT',proj+'-CN-lev.xsc',0)
    # Commented to avoid overwriting the existing file (not an output file)   
    #if not isEmpty('EXFOR.DAT'):
    #    mv('EXFOR.DAT',proj+'.exf',0)
    # Commented to avoid overwriting the existing file (not an output file)   
    #if not isEmpty('C4.DAT'):
    #    mv('C4.DAT',proj+'.c4',0)
    if not isEmpty('ECIS_SPH.inp'):
        mv('ECIS_SPH.inp',proj+'-ecis-sph.inp',0)
    if not isEmpty('ECIS_SPH.out'):
        mv('ECIS_SPH.out',proj+'-ecis-sph.out',0)
    if not isEmpty('ECIS_VIB.inp'):
        mv('ECIS_VIB.inp',proj+'-ecis-vib.inp',0)
    if not isEmpty('ECIS_VIB.out'):
        mv('ECIS_VIB.out',proj+'-ecis-vib.out',0)
    if not isEmpty('ECIS_ROT.inp'):
        mv('ECIS_ROT.inp',proj+'-ecis-rot.inp',0)
    if not isEmpty('ECIS_ROT.out'):
        mv('ECIS_ROT.out',proj+'-ecis-rot.out',0)
    if not isEmpty('ECIS_VIBROT.inp'):
        mv('ECIS_VIBROT.inp',proj+'-ecis-vibrot.inp',0)
    if not isEmpty('ECIS_VIBROT.out'):
        mv('ECIS_VIBROT.out',proj+'-ecis-vibrot.out',0)
    if not isEmpty('OPTMAN.INP'):
        mv('OPTMAN.INP',proj+'-optman.inp',0)
    if not isEmpty('OPTMAN.OUT'):
        mv('OPTMAN.OUT',proj+'-optman.out',0)
    #if isEmpty(proj+'.-default.rng'):
    #    mv('R250SEED-default.DAT',proj+'-default.rng')		
    #    print('Saving the default RNG seed')
    if not isEmpty('R250SEED.DAT'):
        mv('R250SEED.DAT',proj+'.rng')
    # fission chances and spectra for one energy run:
    if not isEmpty('FISS_XS.ZVD'):
        mv('FISS_XS.ZVD',proj+'-fiss.zvd',0)
    if not isEmpty('FISSION.OUT'):
        mv('FISSION.OUT',proj+'-fiss.out',0)
    if not isEmpty('FIT.OUT'):
        mv('FIT.OUT',proj+'-ompfit.lst',0)
    if not isEmpty('PFNS.OUT'):
        mv('PFNS.OUT',proj+'-pfns.out',0)
    if not isEmpty('PFNM.OUT'):
        mv('PFNM.OUT',proj+'-pfnm.out',0)
    if not isEmpty('ddhms.out'):
        mv('ddhms.out',proj+'-hms.lst',0)
    # Commented to avoid overwriting the existing file (not an output file)   
    #if not isEmpty('NUBAR.DAT'):
    #    mv('NUBAR.DAT',proj+'-nubar.dat',0)

    # level-density plots:
    for LDfile in glob("LD_*.zvd"):
        mv(LDfile,proj+'-'+LDfile,0)
    for LDfile in glob("NL_*.zvd"):
        mv(LDfile,proj+'-'+LDfile,0)
    # spectra for one energy run:
    for LDfile in glob("sp_*.zvd"):
        mv(LDfile,proj+'-'+LDfile,0)

    # Extract Warnings from the list file:
    # this is portable version of 'grep WARNING infile > outfile
    listfile = open(proj+'.lst','r').readlines()
    warnfile = open(proj+'.war','w')
    for line in listfile:
        if 'WARNING' in line:
            warnfile.write(line)
        if 'ERROR' in line:
            warnfile.write(line)
    warnfile.close()
    
    # Delete temporal Input files
    rm('LEVELS','FISSION.INP','C4.DAT','EXFOR.DAT','NUBAR.DAT')
    # Delete Temporary files
    rm('FUSION', 'fort.70', 'fort.66', 'fort.16','fort.34', 'fort.35', 'fort.36')
    rm('ecVIB.inp', 'ecROT.inp', 'ecVIBROT.inp','OPTMAN.INP','TAPE16','spec')
    rm('ECIS_ROT.inp', 'ECIS_VIB.inp', 'ECIS_VIBROT.inp')	
    rm('ECIS_ROT.out', 'ECIS_VIB.out', 'ECIS_VIBROT.out','OPTMAN.OUT','ddhms.out')
    rm('OMPAR.RIPL', 'TARGET_COLL.RIPL', 'TARGET_COLL.DAT', 'TARGET_COLL_RIPL.DAT','MU_BAR.LST','MU_BAR.TMP')
    rm( glob('TARGET-*.tl'), glob('ecis06.*'))
    rm('TARGET.LEV','OMP_A.DAT','angdis.p92','COVAR-PAR.DAT','ecis06_INC.LST')
    rm('TOTCOR.DAT','CN-LEV-XS.DAT')    
    rm('C4SORTM.INP')    
    rm('c4sort.scr')        
    rm('C4SORT.TMP')        
    rm('INPUT')
    rm('INPUT.DAT')
    rm('OMPdata.dat')
    rm('mt_x4r.txt')
    rm('TAPE15', 'TAPE16', 'TAPE66')
    rm('file99')
    rm('DEGASRESULT')
    rm('angdis.pnt', 'angdis.cur')
    rm('ccm.CS','dwba.CS','INCIDENT.CS', 'ccm.TLJ','dwba.TLJ',
            'INCIDENT.TLJ','ccm.ANG','dwba.ANG','INCIDENT.ANG',
            'ccm.ICS','dwba.ICS','INCIDENT.ICS','ccm.LEG','dwba.LEG',
            'INCIDENT.LEG') 
    rm('ecis06.ang','ecis06.cs','ecis06.dat','ecis06.ics','ecis06.pol',
            'ecis06.tlj','ecis06.leg','ecis06.esp','ecis06.inp')
    rm('ecSPH.inp')
    rm('ECIS_SPH.out')
    rm('FITIN.DAT')
    rm('TL')
    rm('FITLEV.PS')
    rm('INPUT1.DAT')
    rm('SENSITIVITY.INP', 'XS-DOWN.DAT', 'XS-UP.DAT')
#   rm('OPTFIT.CAL')
#    rm('OMPAR0.DIR', 'INPUT0.DAT')
    rm('OMPAR.DIR')
    rm('LOW_ENERGY.OUT', 'ecis06.exp', 'ecis06.smat')
    rm('angdis.p92', 'ecis06.dat', 'empmf1.tmp', 'FISS_XS.ZVD')
    
    if not isEmpty(proj+'.exf'):
        if isEmpty(proj+'.c4'):
            # RUN X4TOC4 TO TRANSLATE EXFOR FILE INTO COMPUTATIONAL FORMAT
            
            cmd = os.path.join(os.environ['EMPIREDIR'],'scripts','c4')
            os.system('"%s" %s' % (cmd,proj) )
            
            # RUN c4sort TO SORT C4 DATA
            
            cmd = os.path.join(os.environ['EMPIREDIR'],'scripts','sortc4')
            os.system('"%s" %s' % (cmd,proj) )
    
    # REMOVE EMPTY FILES:
    
    if isEmpty(proj+'-omp.dir'):
        rm(proj+'-omp.dir')
    if isEmpty(proj+'-lev.col'):
        rm(proj+'-lev.col')
    if isEmpty(proj+'.war'):
        rm(proj+'.war')
    if isEmpty(proj+'-ecis.in'):
        rm(proj+'-ecis.in')
    if isEmpty(proj+'-ecis.out'):
        rm(proj+'-ecis.out')
    if isEmpty(proj+'-inp.fis'):
        rm(proj+'-inp.fis')
    if isEmpty(proj+'-pfns.out'):
        rm(proj+'-pfns.out')
    if isEmpty(proj+'-MC.par'):
        rm(proj+'-MC.par')
    if isEmpty('FISSION.OUT'):
        rm('FISSION.OUT')
    
    # Produce ZVD files from cross-section tables:
    if not isEmpty(proj+'.xsc'):
        cmd = os.path.join(os.environ['EMPIREDIR'],'scripts','cs2zvd')
        os.system('"%s" %s' % (cmd, proj))

    # Produce ZVD files from fission cross-section tables:
    if not isEmpty(proj+'-fiss.xsc'):
        cmd = os.path.join(os.environ['EMPIREDIR'],'scripts','fis2zvd')
        os.system('"%s" %s' % (cmd, proj))

    # Produce ZVD files for nng 
    if not isEmpty(proj+'.c5'):
        cmd = os.path.join(os.environ['EMPIREDIR'],'scripts','c5-nng2zvd')
        os.system('"%s" %s' % (cmd, proj))

    # Produce ZVD files for nng 
    if not isEmpty(proj+'-gam-tr.xsc'):
        cmd = os.path.join(os.environ['EMPIREDIR'],'scripts','gamsort2zvd')
        os.system('"%s" %s' % (cmd, proj))
        # nng plots:
        for LDfile in glob("znng_*.zvd"):
            mv(LDfile,proj+'-'+LDfile,0)
        for LDfile in glob("z2ng_*.zvd"):
            mv(LDfile,proj+'-'+LDfile,0)
        for LDfile in glob("z3ng_*.zvd"):
            mv(LDfile,proj+'-'+LDfile,0)
        for LDfile in glob("z4ng_*.zvd"):
            mv(LDfile,proj+'-'+LDfile,0)

    # Produce ZVD files for elastic, nonelastic and preequilibrium emission 
    if not isEmpty(proj+'-preq.xsc'):
        cmd = os.path.join(os.environ['EMPIREDIR'],'scripts','preq2zvd')
        os.system('"%s" %s' % (cmd, proj))
    
    return 0

def splashscreen():
    splash = [
    ' ',\
    ' EEEEE  M    M  PPPP   I  RRRR   EEEEE      33333 ',\
    ' E      MM  MM  P   P  I  R   R  E             33 ',\
    ' EEE    M MM M  PPPP   I  RRRR   EEE    =   33333 ',\
    ' E      M    M  P      I  R  R   E              3 ',\
    ' EEEEE  M    M  P      I  R   R  EEEEE      33333 ',\
    ' ',\
    ' '.join( get_version()[0] ) + ' ( release ' + get_version()[1] +' )',\
    ' ',\
    ' Sao Jose dos Campos, Brazil, May 2011 ',\
    ' Upton, New York, USA, January 2012 ',\
    ' Vienna, Austria, April 2013 ',\
    ' ']
    return '\n'.join( [ x.center(60) for x in splash ] )


#from bash.py:
def rm(*args, **kwargs):
    """
    remove file or list of files, silent on error unless verbose=True
    example:
    rm( 'foo.txt', 'bar.txt', verbose=True ) prints any errors
    rm( 'foo.txt', 'bar.txt' ) is silent on error
    """
    for f in args:
        # so we can use lists returned by glob:
        if type(f) is list:
            for el in f:
                try:
                    os.remove(el)
                except OSError, e:
                    if 'verbose' in kwargs.keys() and kwargs['verbose']:
                        print (e)
        else:
            try:
                os.remove(f)
            except OSError, e:
                if 'verbose' in kwargs.keys() and kwargs['verbose']:
                    print (e)


def mv(source, target, verbose=True):
    """
    emulate bash mv command (one file at a time)
    silent on error unless verbose=True
    """
    try:
        shutil.move(source, target)
        #os.rename(source, target)  # no work on Windows
    #except OSError, e:
    except IOError, e:
        if verbose:
            print (e)
    """
    try:
        shutil.move(source, target) # not present before v2.3
    except IOError, e:
        if verbose:
            print (e)
    """


def cp(source, target, verbose=True):
    """
    emulate bash cp command
    """
    try:
        shutil.copy(source, target)
    except IOError, e:
        if verbose:
            print (e)

def ln(source, target, verbose=True):
    """
    emulate bash ln command
    """
    try:
        os.symlink(source, target)
    except OSError, e:
        if verbose:
            print (e)
    except AttributeError:  # no symlink on windows
        mv(source, target, verbose)


def isEmpty(filename):
    """
    emulate the [ ! -s filename ] test in bash (doesn't exist or is empty)
    also 'not isEmpty()' should be equivalent to [ -s filename ]
    """
    return (not os.path.exists(filename)) or (os.path.getsize(filename)==0)
    


if __name__ == '__main__':
    
    print( splashscreen() )
    
    if len(sys.argv)>=2:
        proj = sys.argv[1]
        if os.path.exists(proj+'.inp'):
            print ("Using existing file with input: %s" % proj+'.inp' )
        else:
            print ("Input file %s does not exist" % proj+'.inp' )
            sys.exit(1)
    
    if len(sys.argv)<2:
        print ("Inputs ready to run:\n")
        for a in glob('*.inp'):
            print ("%s\n" % a)
        proj = raw_input(
                "Choose one of the above (without the .inp extension): ")
    
    runE(proj)
