c ECIS 95 (LINUX version)                                               ecis-000
c
c Small modifications introduced by A.Koning(1997) and R.Capote(2001)
c to get printed XS, Tlj, Smatrix , Legendre coefficients and angular 
c distributions in separate files in computational format.
c These modifications are marked "koning" and "capote" in the comments 
c field respectively
c
c Bug was corrected to allow g77 compilation (Capote 03/2001)
c See sche-054, sche-055 lines
C The impact of this bug on previous calculation is unknown, but
C it will affect only scattering of identical projectile and target.
C Therefore for nucleon induced reactions previous calculations are OK,
C
      real*8 w(1000000)                                                  ecis-001
      common w                                                          ecis-002

c     To get total, reaction and elastic cross section on gs in mb
      open(unit=70,status='unknown',file='ecis95.cs')                   koning

c     To get inelastic cross section on coupled levels in mb
      open(unit=71,status='unknown',file='ecis95.ics')                  capote

c     To get transmission coefficients (lo(63)=lo(55)=T) for the gs
c     Transmission coefficient file in Capote's format
      open(unit=76,status='unknown',file='ecis95.tlj')                  capote
c     S matrix file
      open(unit=77,status='unknown',file='ecis95.smat')                 capote
c     Temporal file (needed if S matrix output is required, lo(56)=T)
      open(unit=78,status='unknown',file='ecis95.tmp')                  capote

c     To get Legendre coefficients for all open channels
c     (lo(64)=lo(65)=T
c     * WARNING: Different input file is required
c        (one additional empty line after CARD 5 must be added) 
c     * Interface subroutines ecis_CCvib,ecis_CCrot,ecis_DWBA
c       must be modified accordingly
      open(unit=73,status='unknown',file='ecis95.leg')                  capote

c     To get angular distributions for all open channels
c     (lo(64)=T)   
      open(unit=74,status='unknown',file='ecis95.ang')                  capote

      call calc(w,w,w,1000000)                                           ecis-003
      stop                                                              ecis-004
      end                                                               ecis-005
c 15/04/88  ibm and cdc version                                 ecis88  memo-000
      subroutine memo(idmt,nplace,nq,ix,lo)                             memo-001
c this subroutine gets the working space.                               memo-002
c idmt     previous space                                               memo-003
c nplace   requested space                                              memo-004
c nq       space to be updated                                          memo-005
c ix: control number ix=1     first call                                memo-006
c                    ix=2     diminution of space                       memo-007
c                    ix=3     request nplace+1000, at least nplace      memo-008
c                    ix=4     request nplace                            memo-009
c                    ix=5     absolute request                          memo-010
c lo: logical controls  if lo(74)=.true. print the size of working spacememo-011
c output variables: idmt  size of working space                         memo-012
c                   lo(216)=.true. if computation cannot continue       memo-013
c***********************************************************************memo-014
      logical lo(250)                                                   memo-015
      lo(216)=(nplace.gt.idmt).and.((ix-5)*(ix-3).eq.0)                 memo-016
      if (.not.lo(216)) return                                          memo-017
      write (6,1000) ix,idmt,nplace                                     memo-018
      return                                                            memo-019
 1000 format (33h not enough place .....   request,i2,i10,8h allowed,i10memo-020
     1,10h requested/)                                                  memo-021
      end                                                               memo-022
c 05/02/87  ibm and cdc version                                 ecis88  hora-000
      subroutine hora                                                   hora-001
c gives the time elapsed since the first call and since the last call   hora-002
c it uses an assembler machine dependent function which returns the timehora-003
c available to the jobs as an integer with unit 1second/38500           hora-004
c***********************************************************************hora-005
      data nx,m0,m2 /0,0,0/                                             hora-006
      if (nx.ne.0) go to 1                                              hora-007
      call stim(m0)                                                     hora-008
      m2=m0                                                             hora-009
      nx=1                                                              hora-010
      nt=m0/385                                                         hora-011
      write (6,1000) nt                                                 hora-012
      return                                                            hora-013
    1 call stim(m1)                                                     hora-014
      n6=m2-m1                                                          hora-015
      n7=m0-m1                                                          hora-016
      m2=m1                                                             hora-017
      n5=n6/385                                                         hora-018
      nt=n7/385                                                         hora-019
      ns=nt/100                                                         hora-020
      nt=nt-100*ns                                                      hora-021
      nm=ns/60                                                          hora-022
      ns=ns-60*nm                                                       hora-023
      nh=nm/60                                                          hora-024
      nm=nm-60*nh                                                       hora-025
      write (6,1001) nh,nm,ns,nt,n5                                     hora-026
      return                                                            hora-027
 1000 format (19h first call to hora,10x,i10,9hhund of s)               hora-028
 1001 format (19h *** total time ***,i3,1hh,i3,2hmn,i3,1hs,i3,9hhund of hora-029
     1s,10x,26hdifference since last call,i9,9hhund of s)               hora-030
      end                                                               hora-031
c 28/11/95  ibm version                                         ecis95  calc-000
      subroutine calc(w,nw,dw,idmx)                                     calc-001
c main subroutine of the program                                        calc-002
c w,nw,dw are the working space in equivalence by call,starting as      calc-003
c real*8. they are respectively real, integer and double precision.     calc-004
c idmx is the length of dw.                                             calc-005
c addresses in the working field defined here (for others, see calx)    calc-006
c in common /decou/                                                     calc-007
c 33- nt   reduced nuclear matrix elements                              calc-008
c 84- nnc  first free address after computation of potentials           calc-009
c 85- kxt  number of penetrabilities for uncoupled states               calc-010
c 86- nivq table of multipoles                                          calc-011
c 87- nifq table of form factor identifications                         calc-012
c 88- nrco strength of coulomb central potentials for corrections       calc-013
c 89- nrdo strength of coulomb transition potentials for corrections    calc-014
c 90- nvc1 real potentials                                              calc-015
c 91- nvc2 imaginary potentials                                         calc-016
c 92- ncx  first free address for computation of potentials             calc-017
c other variables of common /decou/                                     calc-018
c 93- lmax3 effective number of coulomb functions                       calc-019
c 94- ipj  number of total j-values calculated in cal1                  calc-020
c for common /poten/ see redm                                           calc-021
c in common /dblpr/  chi2:    chi-square                                calc-022
c                    chi2m:   minimum chi-square                        calc-023
c in common /ncomp/  ncoi:  address of the table for discret. of cont.  calc-024
c                    nscn:  address of the description of level density calc-025
c                    nxd:   address of weights and steps of continuum   calc-026
c                    ncolx: total number of levels without discretis.   calc-027
c                                                                       calc-028
c ******** meaning of the logical controls lo ********                  calc-029
c                                                                       calc-030
c lo(i+100)=.not.lo(i) for i=1,100                                      calc-031
c lo(230+i)=lo(50+i) for i=1,15 during search if lo(51) to lo(65) are   calc-032
c used only for complete output                                         calc-033
c the values of the first 100 lo are read in calx on two data cards     calc-034
c the first data card is for 1-50,the second for 51-100                 calc-035
c only,the values listed on the input description are used              calc-036
c *** for their meaning, see this description *****                     calc-037
c exception if lo(36)=.true. : only the first card is read, the program calc-038
c does not take them into account but continue a search saved on tape 8.calc-039
c *** meaning of lo(i) for i greater than 200 ****                      calc-040
c lo(201) is true if there is no real spin-orbit potential              calc-041
c lo(202) is true if there is no imaginary spin-orbit potential         calc-042
c lo(203) is true if there is no coulomb spin-orbit potential           calc-043
c lo(204) is true if convergence is obtained in the iteration           calc-044
c lo(205) is true if convergence is obtained for this equation          calc-045
c lo(206) is true when the iteration is not the last one permitted      calc-046
c lo(207) is true if all the couplings have to be calculated beforehand calc-047
c lo(208) is true if the diagonal coulomb corrections are needed        calc-048
c lo(209) is true for dirac potentials                                  calc-049
c lo(210) is true if derivatives are needed                             calc-050
c lo(211) is true if deformations are changed in search                 calc-051
c lo(212) is true if nuclear parameters are changed in search           calc-052
c lo(213) is true if nuclear matrix elements are changed in search      calc-053
c lo(214) is true if spin-orbit parametrisation is changed in search    calc-054
c lo(215) is true for no output                                         calc-055
c lo(216) is true for a stop,for example the working field is too small calc-056
c lo(217) is true for all the calculations except the first             calc-057
c lo(218) is true for last results                                      calc-058
c lo(219) is true for results without doing the calculation again       calc-059
c lo(220) is true for output and last calculation is the best one       calc-060
c lo(221) is true for optical model without coupling                    calc-061
c lo(222) is true if it is the first computation for this energy        calc-062
c lo(223) is true if lo(18) is .true. and no spin in the initial state  calc-063
c lo(224) is true for compound nucleus or punch of transmission coeff.  calc-064
c lo(225) is true in cal1 for a call to usual coupled equations subr.   calc-065
c lo(226) is true if there are observables in the laboratory system     calc-066
c lo(227) is true for coulomb corrections with pure regular functions   calc-067
c lo(228) is true for no copy of uncoupled functions and phase-shift    calc-068
c lo(211) to lo(220) are initialised to .false. in calx                 calc-069
c lo(215) to lo(220) are initialised to .false. in eval                 calc-070
c***********************************************************************calc-071
      double precision chi2,chi2m,cm,ck,chb,cmb,cz,ccz,xe,xm,xn,dw(1)   calc-072
      logical lo(250)                                                   calc-073
      dimension w(1),nw(1)                                              calc-074
      common /decou/ nipi,nipp,nwv,nfis,ngam,njit,nniv,niph,npar,npot,nbcalc-075
     1eta,nfm,ndonn,nrc,niw,nde,nise,ntx,ktgx,nry,nnvi,ncc,nam1,nfac,nfacalc-076
     2m,npad,nfg,nxg,nsm,nres,nxx,nixt,nt,idmt,ncoll,ncols,ncolt,njmax,icalc-077
     3term,npp,jdm,jit,nsec,lmd,h,bjm,eiter,aconv,conj,mcm(2),nlt,nva,nbcalc-078
     4et,nbt1,lmx,lmax1,aspin,ism,iqm,iqmax,inc,ms1,ms2,nct(4),kba,kab,kcalc-079
     5bc,njc,jtx,jth,ntot,nrec,ncolr,nrz,nfa,lmax2,ke,itemm,nplace,nnc,kcalc-080
     6xt,nivq,nifq,nrco,nrdo,nvc1,nvc2,ncx,lmax3,ipj                    calc-081
      common /poten/ im,nv,mv,invt,inls,invc,invd,intc,imax,itx(16),itxmcalc-082
      common /ncomp/ nsp(7),ac(2),ncons,nie,ncoi,nscn,nxd,ncolx,az(16)  calc-083
      common /dblpr/ chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn              calc-084
c without dynamical allocation of working space                         calc-085
      idmt=2*idmx                                                       calc-086
c constant computed from the atomic mass, hbar*c and alpha              calc-087
      cm=931.5017646d0                                                  calc-088
      chb=197.328604d0                                                  calc-089
      cz=137.0360411d0                                                  calc-090
      cmb=cm/chb                                                        calc-091
      ck=2.d0*cm/chb**2                                                 calc-092
      ccz=chb/cz                                                        calc-093
c main input                                                            calc-094
    1 call calx(w,nw,dw,lo)                                             calc-095
      if (lo(36)) go to 13                                              calc-096
      nnc=nixt                                                          calc-097
    2 nnc2=nnc/2+1                                                      calc-098
      call colf(ncolt,ncols,w,nw(nipi),dw(nwv),dw(nfg),dw(nxg),ism,lmax1calc-099
     1,lmax2,h,nw(nnc),dw(nnc2),nixt,nt,idmt-nnc,lmax3,nw(nniv),idmt,lo)calc-100
      kxt=nt-nixt                                                       calc-101
      if (lo(59)) call hora                                             calc-102
c computation of nuclear matrix elements and space for form factors     calc-103
    3 call redm(nw(nniv),nw(nt),w(nt),nw(nipi),ncoll,ncols,ncolt,it,nw(ncalc-104
     1beta),w(nbeta),nbt1,nw(niph),w(npar),nva,iqmax,aspin,dw(nfac),nfa,calc-105
     2npp,inc,idmt,idmt-nt,lo)                                          calc-106
      lo(221)=im.eq.0                                                   calc-107
      if (lo(59)) call hora                                             calc-108
      nivq=nt+4*it                                                      calc-109
      nifq=nivq+3*im                                                    calc-110
      nrco=nifq+7*intc                                                  calc-111
      if (lo(107).or.lo(217)) go to 6                                   calc-112
      npot=nrco                                                         calc-113
      call extp(npp,ncols,ncolt,dw(nwv),nw(nniv),nw(nt),nw(nifq),nw(nivqcalc-114
     1),nw(nipi),dw(nfac),nfa,w(npot),nw(npot),nw(npot+3),idmt-npot,idmtcalc-115
     2,lo)                                                              calc-116
      n=npot+nw(npot+2)-nt+1                                            calc-117
      n1=npot-1                                                         calc-118
      do 4 i=nt,n1                                                      calc-119
    4 nw(i+n)=nw(i)                                                     calc-120
      n2=nt-1                                                           calc-121
      do 5 i=1,n                                                        calc-122
    5 nw(n2+i)=nw(n1+i)                                                 calc-123
      npot=nt                                                           calc-124
      nt=npot+nw(npot+2)+1                                              calc-125
      nivq=nt+4*it                                                      calc-126
      nifq=nivq+3*im                                                    calc-127
      nrco=nifq+7*intc                                                  calc-128
    6 nrdo=nrco+2*npp                                                   calc-129
      if (lo(100)) nrdo=nrco+2*ncolt                                    calc-130
      nvc1=nrdo+2*invt                                                  calc-131
      nvc2=nvc1+itx(2)*ism                                              calc-132
      nnc=nvc1+itx(7)*ism                                               calc-133
      ncx=nvc1+itxm*ism                                                 calc-134
      if (lo(54)) write (6,1000) nnc                                    calc-135
      nplace=max0(nplace,ncx,nnc+((nrec+1)*(2*ntot+2+nrec)/2))          calc-136
      if (nplace.gt.idmt) call memo(idmt,nplace,n,3,lo)                 calc-137
      if (lo(216)) go to 12                                             calc-138
      call stim(k1)                                                     calc-139
c main computation                                                      calc-140
    7 call cal1(w,nw,dw,lo)                                             calc-141
      if (lo(177)) call hora                                            calc-142
      if (lo(218).or.lo(132)) go to 14                                  calc-143
c automatic search                                                      calc-144
      if (lo(216)) go to 12                                             calc-145
      call stim(k2)                                                     calc-146
      if (lo(34)) nw(niw+1)=-1+nw(niw+2)+(k1-385*nsec)/(k1-k2)          calc-147
      k1=k2                                                             calc-148
      if (nw(niw+2).gt.1.or.lo(76).or.lo(75)) go to 9                   calc-149
c change of controls if full output was requested at the first run      calc-150
      do 8 i=51,65                                                      calc-151
      lo(i+180)=lo(i)                                                   calc-152
      lo(i)=.false.                                                     calc-153
    8 lo(i+100)=.true.                                                  calc-154
      lo(215)=.true.                                                    calc-155
c identification of variables                                           calc-156
    9 call vari(1,ke,nw(nise),nrec,w(npot),nw(npot),npp,w(nbeta),nw(nbetcalc-157
     1a),nbet,w(npar),nva,w(nscn),w(nt),(nivq-nt)/4,w(nres),ntot,w(ktgx)calc-158
     2,ncolr,nw(niw),w(nrc),w(nxx),dw(nwv),w(nipp),nw(nifq),lo)         calc-159
c save the search on tape 8.                                            calc-160
      if (lo(35).and.nw(niw+2).ge.nw(niw+1)) call rest(0,nw,w,lo,idmt)  calc-161
c handling of variables                                                 calc-162
   10 call fite(ke,ntot,nrec,w(nres),w(nxx),w(nde),w(nrc),nw(nrc),nw(niwcalc-163
     1),w(nnc),chi2)                                                    calc-164
c transformation of variables into parameters                           calc-165
   11 call vari(0,ke,nw(nise),nrec,w(npot),nw(npot),npp,w(nbeta),nw(nbetcalc-166
     1a),nbet,w(npar),nva,w(nscn),w(nt),(nivq-nt)/4,w(nres),ntot,w(ktgx)calc-167
     2,ncolr,nw(niw),w(nrc),w(nxx),dw(nwv),w(nipp),nw(nifq),lo)         calc-168
      if (ke.eq.1) go to 15                                             calc-169
      if (lo(52).or.lo(61).or.lo(212)) go to 3                          calc-170
      go to 7                                                           calc-171
c the search is stopped and the best results are given if possible      calc-172
   12 write (6,1001) idmt                                               calc-173
      if (nw(niw+2).eq.0.or.(nw(niw+2).eq.1.and.lo(175).and.lo(176))) gocalc-174
     1 to 16                                                            calc-175
      nw(niw+1)=nw(niw+2)                                               calc-176
      go to 9                                                           calc-177
c continuation of a previous search                                     calc-178
   13 call rest(1,nw,w,lo,idmt)                                         calc-179
      if (lo(177)) call hora                                            calc-180
      call stim(k1)                                                     calc-181
      if ((ke.ne.1).and.(nw(niw+2).ne.1)) go to 11                      calc-182
      go to 10                                                          calc-183
   14 n=idmt-nplace                                                     calc-184
      write (6,1002) nplace,n                                           calc-185
      if (lo(35).and.lo(32).and.(ke.eq.0)) call rest(0,nw,w,lo,idmt)    calc-186
      if (lo(137)) go to 16                                             calc-187
      call eval(dw(nwv),nw(nipp),w(npot),nw(npot),npp,w(nbeta),nw(nbeta)calc-188
     1,nbet,w(npar),nva,w(nt),(nivq-nt)/4,w(nscn),w(ncoi),w(nxd),nw(ncx)calc-189
     2,w(ncx),idmt-ncx,idmt,w(nrc),nw(niw),nw(nifq),lo)                 calc-190
      ke=0                                                              calc-191
      if (lo(222)) go to 2                                              calc-192
   15 if (lo(212)) go to 3                                              calc-193
      go to 7                                                           calc-194
   16 call memo(idmt,0,n,2,lo)                                          calc-195
      go to 1                                                           calc-196
 1000 format (10x,22hrequired working field,i10)                        calc-197
 1001 format (//19h **** working field,i9,16h  too small ****//)        calc-198
 1002 format (//39h *** workspace used in this computation,i10,5h  ***,1calc-199
     10x,i10,18h memories not used)                                     calc-200
      end                                                               calc-201
c 18/12/95  ibm and cdc version                                 ecis95  inpa-000
      subroutine inpa                                                   inpa-001
      write (6,1000)                                                    inpa-002
 1000 format (1h1,8h18/12/95,64x,8hecis-000/15x,31h description of inputinpa-003
     1 of ecis95,27x,8hecis-001/15x,31h ******************************,2inpa-004
     27x,8hecis-002/73x,8hecis-003/73x,8hecis-004/73x,8hecis-005/73x,8heinpa-005
     3cis-006/30h cards read in subroutine calx,43x,8hecis-007/30h *****inpa-006
     4************************,43x,8hecis-008/73x,8hecis-009/54h card 1 inpa-007
     5                                 format (18a4),19x,8hecis-010/7h *inpa-008
     6*****,66x,8hecis-011/6x,62h title of the run which will be printedinpa-009
     7 as heading of results.,5x,8hecis-012/73x,8hecis-013/6x,58h if titinpa-010
     8le='description ' this input description is listed.,9x,8hecis-014/inpa-011
     910x,52h (29 pages correctly printed as fortran output or by,11x,8hinpa-012
     aecis-015/10x,48h 'enscript -2bhr -l58' without the first column),1inpa-013
     b5x,8hecis-016/10x,39h after this listing, go back to card 1.,24x,8inpa-014
     checis-017/73x,8hecis-018/6x,44h if title='fin ' the calculation isinpa-015
     d stopped.,23x,8hecis-019/73x,8hecis-020/11x,51h these control wordinpa-016
     es must be punched from column 1.,11x,8hecis-021/73x,8hecis-022/54hinpa-017
     f card 2                                  format (50l1),19x,8hecis-inpa-018
     g023/7h ******,66x,8hecis-024/6x,61h 50 first logical controls lo. inpa-019
     henter 't' in the corresponding,6x,8hecis-025/6x,43h column for .trinpa-020
     iue. and nothing for .false..,24x,8hecis-026)                      inpa-021
      write (6,1001)                                                    inpa-022
 1001 format (73x,8hecis-027/1x,6h model,66x,8hecis-028/7x,57h 1- lo(1) inpa-023
     1 rotational model-(inverse: vibrational model).,9x,8hecis-029/7x,6inpa-024
     25h 2- lo(2)  second order vibrational model-(inverse: first order)inpa-025
     3.,1x,8hecis-030/17x,64h or constrained asymmetric rotational modelinpa-026
     4 (band mixingecis-031/17x,49h parameters of the first two 2+ compuinpa-027
     5ted from the,7x,8hecis-032/17x,51h quadrupole 'gamma' in the davydinpa-028
     6ov-filippov model).,5x,8hecis-033/7x,62h 3- lo(3)  anharmonic vibrinpa-029
     7ational model-(inverse: harmonic) or,4x,8hecis-034/17x,50h asymmetinpa-030
     8ric rotational model-(inverse: symmetric).,6x,8hecis-035/7x,74h 4-inpa-031
     9 lo(4)  parametrised spin-orbit deformation-(inverse: standard)eciinpa-032
     as-036/7x,74h 5- lo(5)  different deformation for each potential-(iinpa-033
     bnverse: sameecis-037/17x,14h deformation).,42x,8hecis-038/7x,63h 6inpa-034
     c- lo(6)  deformation lengths read instead of deformations for,3x,8inpa-035
     dhecis-039/17x,26h woods-saxon form factors.,30x,8hecis-040/7x,65h inpa-036
     e7- lo(7)  nuclear matrix element and form factors read on cards.,1inpa-037
     fx,8hecis-041/17x,51h this is not allowed for schroedinger equivaleinpa-038
     gnt of,5x,8hecis-042/17x,49h dirac equation. with spin in some chaninpa-039
     hnel and no,7x,8hecis-043/17x,44h coulomb spin-orbit, use also lo(4inpa-040
     i6)=.true..,12x,8hecis-044)                                        inpa-041
      write (6,1002)                                                    inpa-042
 1002 format (7x,60h 8- lo(8)  relativistic kinematics (reduced mass repinpa-043
     1laced by,6x,8hecis-045/17x,45h similar formula with relativistic einpa-044
     2nergies).,11x,8hecis-046/7x,64h 9- lo(9)  symmetric woods-saxon foinpa-045
     3rm factors when the radius is,2x,8hecis-047/17x,10h negative.,46x,inpa-046
     48hecis-048/73x,8hecis-049/1x,12h interaction,60x,8hecis-050/6x,65hinpa-047
     5 11- lo(11) deformed coulomb potential. with lo(7)=.false., it is,inpa-048
     62x,8hecis-051/17x,46h set .false. by the code if no charge is readinpa-049
     7.,10x,8hecis-052/6x,63h 12- lo(12) deformed imaginary potential (vinpa-050
     8olume and surface or,4x,8hecis-053/17x,20h scalar and vector).,36xinpa-051
     9,8hecis-054/6x,62h 13- lo(13) deformed real spin-orbit or tensor pinpa-052
     aotential. with,5x,8hecis-055/17x,51h lo(7)=.false., it is set .falinpa-053
     bse. by the code if no,5x,8hecis-056/17x,49h non zero spin and no rinpa-054
     celated potential are read.,7x,8hecis-057/1h1,5x,65h 14- lo(14) definpa-055
     dormed imaginary spin-orbit or tensor potential. if,2x,8hecis-058/1inpa-056
     e7x,64h .true., lo(13) is set .true.. with lo(7)=.false., it isecisinpa-057
     f-059/17x,39h set .false. by the code as for lo(13).,17x,8hecis-060inpa-058
     g/6x,60h 15- lo(15) reduced nuclear matrix elements read from cardsinpa-059
     h.,7x,8hecis-061/17x,54h it is necessary for the anharmonic vibratiinpa-060
     ional model.,2x,8hecis-062)                                        inpa-061
      write (6,1003)                                                    inpa-062
 1003 format (6x,75h 16- lo(16) heavy-ion definition of reduced radii aninpa-063
     1d deformations.ecis-063/17x,55h when there are different masses ininpa-064
     2 different channels,,1x,8hecis-064/17x,52h the masses to be used cinpa-065
     3an be indicated by the first,4x,8hecis-065/17x,53h input, but onlyinpa-066
     4 the masses of the first level can be,3x,8hecis-066/17x,53h used finpa-067
     5or the back transformation of the results of a,3x,8hecis-067/17x,5inpa-068
     60h search or in the subroutine eval (lo(37)=.true.).,6x,8hecis-068inpa-069
     7/17x,54h if lo(6)=.true., only coulomb deformation lengths are,2x,inpa-070
     88hecis-069/17x,9h changed.,47x,8hecis-070/6x,65h 17- lo(17) foldininpa-071
     9g model. with external form factors the folding,2x,8hecis-071/17x,inpa-072
     a51h parameters are used independently of this logical.,5x,8hecis-0inpa-073
     b72/6x,64h 18- lo(18) projectile-target antisymmetrisation, valid oinpa-074
     cnly for,3x,8hecis-073/17x,54h same spin of the particle and the tainpa-075
     drget. for spin 0,,2x,8hecis-074/17x,52h the s-matrix is computed oinpa-076
     enly for even total spins.,4x,8hecis-075/17x,52h for spin non 0., tinpa-077
     fhe amplitudes are symmetrised but,4x,8hecis-076/17x,48h this do noinpa-078
     gt correct the lack of symmetry of the,8x,8hecis-077/17x,41h interainpa-079
     hction between particle and target.,15x,8hecis-078/6x,61h 19- lo(19inpa-080
     i) deformed coulomb spin-orbit potential. if .true.,,6x,8hecis-079)inpa-081
      write (6,1004)                                                    inpa-082
 1004 format (17x,52h lo(11) is set .true.. with lo(7)=.false., it is seinpa-083
     1t,4x,8hecis-080/17x,64h .false. by the code as for lo(13). (needs inpa-084
     2lo(13)=.true.ecis-081/17x,51h with a real spin-orbit potential, evinpa-085
     3en very small),5x,8hecis-082/73x,8hecis-083/2x,69h note:  in the rinpa-086
     4otational models, the optical potentials (for elastic,2x,8hecis-08inpa-087
     54/2x,67h ****  scattering) are always deformed. to avoid this, wheinpa-088
     6n lo(11),,4x,8hecis-085/8x,60h lo(12),lo(13),lo(14) or lo(19) is .inpa-089
     7false., use lo(5)=.true.,5x,8hecis-086/8x,49h and enter 0. for theinpa-090
     8 corresponding deformations.,16x,8hecis-087/73x,8hecis-088/1x,12h inpa-091
     9integration,60x,8hecis-089/6x,58h 21- lo(21) usual coupled equatioinpa-092
     ans-(inverse: iterations).,9x,8hecis-090/17x,54h not allowed with dinpa-093
     birac equation. when it is used with,2x,8hecis-091/17x,64h deformedinpa-094
     c spin-orbit, the derivative terms are not takenecis-092/17x,47h ininpa-095
     dto account and the computation is uncorrect.,9x,8hecis-093/6x,62h inpa-096
     e22- lo(22) no use of pade approximants for convergence of the,5x,8inpa-097
     fhecis-094/17x,12h iterations.,44x,8hecis-095/6x,65h 23- lo(23) no inpa-098
     guse of pade approximant results and shift to usual,2x,8hecis-096/1inpa-099
     h7x,52h coupled equations when convergence is not obtained.,4x,8hecinpa-100
     iis-097/6x,65h 24- lo(24) computation of coupling potentials at eacinpa-101
     jh iteration.,2x,8hecis-098)                                       inpa-102
      write (6,1005)                                                    inpa-103
 1005 format (17x,51h (saves space but loses time, chiefly in rotationalinpa-104
     1,5x,8hecis-099/17x,8h model).,48x,8hecis-100/6x,60h 25- lo(25) cominpa-105
     2plete calculation up to the end-(inverse: one,7x,8hecis-101/17x,55inpa-106
     3h iteration only as soon as two iterations are enought).,1x,8hecisinpa-107
     4-102/6x,64h 26- lo(26) stabilisation of integration for long rangeinpa-108
     5 constant,3x,8hecis-103/17x,64h potentials. an additional term in inpa-109
     6h**6 is introduced inecis-104/17x,54h the truncation in such a wayinpa-110
     7 that the term in h**6 of,2x,8hecis-105/17x,54h the total truncatiinpa-111
     8on error cancels out for a constant,2x,8hecis-106/17x,11h potentiainpa-112
     9l.,45x,8hecis-107/6x,59h 27- lo(27) numerov's method for single eqinpa-113
     auations-(inverse:,8x,8hecis-108/17x,52h modified numerov's method)inpa-114
     b. for single equation and,4x,8hecis-109/17x,54h constant potentialinpa-115
     c, truncation errors are of opposite,2x,8hecis-110/17x,6h sign.,50xinpa-116
     d,8hecis-111/6x,75h 28- lo(28) computation up to j-convergence-(invinpa-117
     eerse: stop when allecis-112/17x,53h the inhomogeneous terms are neinpa-118
     fgligible). for elastic,3x,8hecis-113/17x,55h scattering (only one inpa-119
     gchannel) lo(21) or lo(28) must be,1x,8hecis-114/17x,55h .true.. ininpa-120
     h this case lo(28) is set .true. by the code.,1x,8hecis-115/1h1,5x,inpa-121
     i65h 29- lo(29) no diagonal terms in second members for iterations inpa-122
     jof,2x,8hecis-116)                                                 inpa-123
      write (6,1006)                                                    inpa-124
 1006 format (17x,55h schroedinger equations. (inverse: all couplings arinpa-125
     1e in,1x,8hecis-117/17x,54h second members. the uncoupled solutionsinpa-126
     2 do not depend,2x,8hecis-118/17x,53h on the channel spin but conveinpa-127
     3rgence can be slower in,3x,8hecis-119/17x,52h some problems. no efinpa-128
     4fect in first order vibrational,4x,8hecis-120/17x,53h model, no usinpa-129
     5e in dirac equations: if lo(100)=.true.,,3x,8hecis-121/17x,24h lo(inpa-130
     629) is set >false.).,32x,8hecis-122/73x,8hecis-123/1x,7h search,65inpa-131
     7x,8hecis-124/6x,65h 31- lo(31) input of experimental data and calcinpa-132
     8ulation of a chi2.,2x,8hecis-125/17x,52h it is set .false. if no einpa-133
     9xperimental data are read.,4x,8hecis-126/6x,66h 32- lo(32) automatinpa-134
     aic search on some parameters. it is set .false.,1x,8hecis-127/17x,inpa-135
     b32h if no parameters are in search.,24x,8hecis-128/6x,58h 33- lo(3inpa-136
     c3) symmetrised chi2 for cross-sections with fixed,9x,8hecis-129/17inpa-137
     dx,46h normalisation-(inverse: usual chi2). the chi2,10x,8hecis-130inpa-138
     e/17x,43h contribution is multiplied by the ratio of,13x,8hecis-131inpa-139
     f/17x,34h experimental to calculated value.,22x,8hecis-132/6x,66h 3inpa-140
     g4- lo(34) number of evaluations in the search limited by the job,1inpa-141
     hx,8hecis-133/17x,52h card. this option can be used only if the reminpa-142
     iaining,4x,8hecis-134)                                             inpa-143
      write (6,1007)                                                    inpa-144
 1007 format (17x,52h cpu time is available to the code on your computerinpa-145
     1.,4x,8hecis-135/17x,50h a maximum running time can be used, modifyinpa-146
     2ing the,6x,8hecis-136/17x,31h subroutine stim to return '0'.,25x,8inpa-147
     3hecis-137/6x,75h 35- lo(35) search saved on tape 8 if correctly eninpa-148
     4ded or stopped byecis-138/17x,27h the number of evaluations.,29x,8inpa-149
     5hecis-139/6x,41h 36- lo(36) restart a search from tape 8.,26x,8hecinpa-150
     6is-140/6x,66h 37- lo(37) next calculation changing only energy andinpa-151
     7 some optical,1x,8hecis-141/17x,12h parameters.,44x,8hecis-142/73xinpa-152
     8,8hecis-143/1x,23h long range interaction,49x,8hecis-144/6x,75h 41inpa-153
     9- lo(41) factorisation of 1/(1-cos(theta)) in the amplitudes. itecinpa-154
     ais-145/17x,64h is needed for dirac equation or with spin-orbit couinpa-155
     blombecis-146/17x,11h potential.,45x,8hecis-147/6x,61h 42- lo(42) sinpa-156
     cchmidt's orthogonalisation of solutions in usual,6x,8hecis-148/17xinpa-157
     d,19h coupled equations.,37x,8hecis-149/6x,40h 43- lo(43) interpolainpa-158
     etion on total spin.,27x,8hecis-150/6x,75h 44- lo(44) coulomb correinpa-159
     fctions. lo(44) is set .false. if lo(11) isecis-151/17x,52h .true..inpa-160
     g outside the dirac formalism it is better to,4x,8hecis-152/17x,24hinpa-161
     h use also lo(29)=.true..,32x,8hecis-153/6x,57h 45- lo(45) limitatiinpa-162
     ion on the angular momenta for coulomb,10x,8hecis-154)             inpa-163
      write (6,1008)                                                    inpa-164
 1008 format (17x,52h corrections. default options are 3 for central terinpa-165
     1m,4x,8hecis-155/17x,46h and 2 for spin-orbit term. maximum values inpa-166
     2are,10x,8hecis-156/17x,54h respectively 4 and 2 for schroedinger einpa-167
     3quations and 4,2x,8hecis-157/17x,48h and 3 for dirac equation. expinpa-168
     4ressions have been,8x,8hecis-158/17x,50h obtained to go up to 5 foinpa-169
     5r central term and 4 for,6x,8hecis-159/17x,54h spin-orbit term butinpa-170
     6 involve many cards which has been,2x,8hecis-160/17x,48h introduceinpa-171
     7d in subroutine cora as comment cards.,8x,8hecis-161/6x,60h 46- loinpa-172
     8(46) restricted coulomb corrections. (saves storage).,7x,8hecis-16inpa-173
     92/17x,51h if lo(44)=.false. the diagonal corrections used in,5x,8hinpa-174
     aecis-163/17x,50h dirac formalism or for the coulomb spin-orbit areinpa-175
     b,6x,8hecis-164/17x,51h suppressed. if lo(44)=.true. indications foinpa-176
     cr these,5x,8hecis-165/17x,44h restrictions between channels will binpa-177
     de read.,12x,8hecis-166/73x,8hecis-167/2x,63h note:  if lo(36)=.truinpa-178
     ee. a search saved on tape 8 is restarted;,8x,8hecis-168/2x,69h ***inpa-179
     f*  no other logical control from this card is taken into account.,inpa-180
     g2x,8hecis-169/8x,60h instead of the following cards, go to 'restarinpa-181
     ht input: cards,5x,8hecis-170/8x,26h read in subroutine rest'.,39x,inpa-182
     i8hecis-171/73x,8hecis-172)                                        inpa-183
      write (6,1009)                                                    inpa-184
 1009 format (73x,8hecis-173/1h1,53hcard 3                              inpa-185
     1    format (50l1),19x,8hecis-174/7h ******,66x,8hecis-175/6x,56h linpa-186
     2ogical controls from 51 to 100 (as for previous card).,11x,8hecis-inpa-187
     3176/73x,8hecis-177/1x,28h printing in complete output,44x,8hecis-1inpa-188
     478/7x,32h 1- lo(51) output of potentials.,34x,8hecis-179/7x,53h 2-inpa-189
     5 lo(52) output of reduced nuclear matrix elements.,13x,8hecis-180/inpa-190
     67x,46h 3- lo(53) output of the number of iterations.,20x,8hecis-18inpa-191
     71/7x,58h 4- lo(54) output of the length used in the working field.inpa-192
     8,8x,8hecis-182/7x,39h 5- lo(55) output of c-matrix elements.,27x,8inpa-193
     9hecis-183/7x,62h 6- lo(56) output of s-matrix elements and of compinpa-194
     aound nucleus,4x,8hecis-184/17x,22h intermediate results.,34x,8heciinpa-195
     bs-185/7x,61h 7- lo(57) output of phase-shifts at each e.c.i.s. iteinpa-196
     cration.,5x,8hecis-186/7x,65h 8- lo(58) output of the coefficients inpa-197
     dof each form factor for all,1x,8hecis-187/17x,19h sets of equationinpa-198
     es.,37x,8hecis-188/7x,47h 9- lo(59) output of time differences in ainpa-199
     f run.,19x,8hecis-189/73x,8hecis-190/1x,37h punch and results in coinpa-200
     gmplete output,35x,8hecis-191/6x,61h 11- lo(61) reduced nuclear matinpa-201
     hrix elements punched on cards.,6x,8hecis-192/6x,40h 12- lo(62) potinpa-202
     ientials punched on cards.,27x,8hecis-193)                         inpa-203
      write (6,1010)                                                    inpa-204
 1010 format (6x,45h 13- lo(63) penetrabilities punched on cards.,22x,8hinpa-205
     1ecis-194/17x,54h with iterations, the code computes all the solutiinpa-206
     2ons.,2x,8hecis-195/6x,59h 14- lo(64) results at equidistant anglesinpa-207
     3 punched on cards.,8x,8hecis-196/6x,65h 15- lo(65) coefficients ofinpa-208
     4 the expansion in legendre polynomials,2x,8hecis-197/17x,18h punchinpa-209
     5ed on cards.,38x,8hecis-198/6x,49h 16- lo(66) no calculation at eqinpa-210
     6uidistant angles.,18x,8hecis-199/6x,41h 17- lo(67) no plot of expeinpa-211
     7rimental data.,26x,8hecis-200/6x,60h 18- lo(68) no plot of cross-sinpa-212
     8ections at equidistant angles.,7x,8hecis-201/6x,59h 19- lo(69) no inpa-213
     9plot of polarisations at equidistant angles.,8x,8hecis-202/73x,8heinpa-214
     acis-203/2x,79h note:  in a search, lo(51) to lo(66) are used for tinpa-215
     bhe complete resultsecis-204/2x,68h ****  (at the first calculationinpa-216
     c if lo(75)=.false. and at the end of,3x,8hecis-205/8x,12h the searinpa-217
     dch),53x,8hecis-206/73x,8hecis-207/1x,42h printing at the beginninginpa-218
     e and in a search,30x,8hecis-208/6x,48h 21- lo(71) detailed output inpa-219
     fof logical controls.,19x,8hecis-209/6x,62h 22- lo(72) no output ofinpa-220
     g experimental data when they are read.,5x,8hecis-210/6x,64h 23- loinpa-221
     h(73) no output of external potentials when they are read.,3x,8heciinpa-222
     is-211/6x,44h 24- lo(74) output of variations in storage.,23x,8heciinpa-223
     js-212)                                                            inpa-224
      write (6,1011)                                                    inpa-225
 1011 format (6x,60h 25- lo(75) no complete output at the first run of ainpa-226
     1 search.,7x,8hecis-213/6x,63h 26- lo(76) lo(51) to lo(65) are alwainpa-227
     2ys used-(inverse: only for,4x,8hecis-214/17x,18h complete output).inpa-228
     3,38x,8hecis-215/6x,60h 27- lo(77) no output of time differences duinpa-229
     4ring the search.,7x,8hecis-216/6x,61h 28- lo(78) no output of diffinpa-230
     5erences between experimental and,6x,8hecis-217/17x,19h calculated inpa-231
     6values.,37x,8hecis-218/73x,8hecis-219/1x,17h compound nucleus,55x,inpa-232
     78hecis-220/6x,58h 31- lo(81) hauser-feshbach corrections to cross-inpa-233
     8sections.,9x,8hecis-221/17x,54h with iterations, the code computesinpa-234
     9 all the solutions.,2x,8hecis-222/17x,54h if lo(82), lo(84), lo(85inpa-235
     a) or lo(86) is .true>, lo(81),2x,8hecis-223/17x,15h is set .true..inpa-236
     b,41x,8hecis-224/6x,63h 32- lo(82) old simplified compound nucleus inpa-237
     c(excludes uncoupled,4x,8hecis-225/17x,55h states, fission and gamminpa-238
     das; lo(84), lo(85), lo(86) are,1x,8hecis-226/17x,14h set .false.).inpa-239
     e,42x,8hecis-227/6x,66h 33- lo(83) no engelbretch-weidenmuller traninpa-240
     fsformation in compound,1x,8hecis-228/17x,9h nucleus.,47x,8hecis-22inpa-241
     g9/6x,60h 34- lo(84) uncoupled levels for compound nucleus. it is sinpa-242
     het,7x,8hecis-230/17x,26h .false. if none are read.,30x,8hecis-231/inpa-243
     i1h1,5x,62h 35- lo(85) fission transmission coefficients (to be reainpa-244
     jd from,5x,8hecis-232)                                             inpa-245
      write (6,1012)                                                    inpa-246
 1012 format (17x,55h cards) for compound nucleus. it is set .false. if inpa-247
     1none,1x,8hecis-233/17x,10h are read.,46x,8hecis-234/6x,47h 36- lo(inpa-248
     286) gamma emission in compound nucleus.,20x,8hecis-235/6x,34h 37- inpa-249
     3lo(87) no width fluctuations.,33x,8hecis-236/73x,8hecis-237/1x,14hinpa-250
     4 miscellaneous,58x,8hecis-238/6x,61h 41- lo(91) angular distributiinpa-251
     5on at equidistant angles in the,6x,8hecis-239/17x,18h laboratory sinpa-252
     6ystem,38x,8hecis-240/6x,34h 42- lo(92) pure dwba calculation.,33x,inpa-253
     78hecis-241/6x,47h 43- lo(93) no recoil correction for reactions.,2inpa-254
     80x,8hecis-242/6x,59h 44- lo(94) non standard observables at equidiinpa-255
     9stant angles.,8x,8hecis-243/6x,47h 48- lo(98) use of rest mass in inpa-256
     adirac equation.,20x,8hecis-244/6x,66h 49- lo(99) schroedinger equiinpa-257
     bvalent to dirac equation. diffusivity,1x,8hecis-245/17x,55h of couinpa-258
     clomb potentials must be 0. lo(11) and lo(19) are,1x,8hecis-246/17xinpa-259
     d,51h set .false.. no asymmetric rotational model and no,5x,8hecis-inpa-260
     e247/17x,50h second order vibrational model: the corresponding,6x,8inpa-261
     fhecis-248/17x,25h logical are set .false..,31x,8hecis-249/6x,37h 5inpa-262
     g0- lo(100) complete dirac equation.,30x,8hecis-250/73x,8hecis-251/inpa-263
     h54h card 4                                  format (14i5),19x,8hecinpa-264
     iis-252/7h ******,66x,8hecis-253)                                  inpa-265
      write (6,1013)                                                    inpa-266
 1013 format (7x,64h 1- 5   ncoll  number of nuclear states. it does notinpa-267
     1 include the,2x,8hecis-254/21x,49h number of uncoupled states for inpa-268
     2compound nucleus.,3x,8hecis-255/7x,74h 6-10   njmax  maximum numbeinpa-269
     3r of channel spin. (default option 20)ecis-256/21x,50h the maximuminpa-270
     4 value of the total angular momentum j,2x,8hecis-257/21x,60h will inpa-271
     5be njmax-1 when it is integer or njmax-.5 whenecis-258/21x,20h it inpa-272
     6is half-integer.,32x,8hecis-259/6x,66h 11-15   iterm  maximum numbinpa-273
     7er of ecis iterations. (default option,1x,8hecis-260/21x,38h 20). inpa-274
     8must be 1 for dwba calculations.,14x,8hecis-261/6x,65h 16-20   nppinpa-275
     9    number of optical potentials. (default option 1).,2x,8hecis-26inpa-276
     a2/21x,48h the first one is deformed when the form factors,4x,8heciinpa-277
     bs-263/21x,23h are not read on cards.,29x,8hecis-264/6x,63h 21-25  inpa-278
     c ncj    number of factorisations of 1/(1-cos(theta)) in,4x,8hecis-inpa-279
     d265/21x,36h the amplitudes. (default option 1).,16x,8hecis-266/6x,inpa-280
     e66h 26-30   ngr(1) number of decades in logarithmic scale in plotsinpa-281
     f of,1x,8hecis-267/21x,46h elastic cross-sections in the standard oinpa-282
     gption,6x,8hecis-268/21x,47h (default option 2). for charged particinpa-283
     hles, the,5x,8hecis-269/21x,60h cross-section divided by rutherfordinpa-284
     i's cross-sectionecis-270)                                         inpa-285
      write (6,1014)                                                    inpa-286
 1014 format (21x,12h is plotted.,40x,8hecis-271/6x,75h 31-35   ngr(2) ainpa-287
     1s ngr(1),for inelastic channels.(default option 2)ecis-272/6x,61h inpa-288
     236-40   npr(1) plot indications for elastic polarisations at,6x,8hinpa-289
     3ecis-273/21x,45h equidistant angles. if there are n different,7x,8inpa-290
     4hecis-274/21x,50h angular distributions of polarisations, npr(1) iinpa-291
     5s,2x,8hecis-275/21x,46h the sum for i=1 to n of k(i)*(2**(i-1)) whinpa-292
     6ere,6x,8hecis-276/21x,48h k(i)=1 for a plot and 0 for no plot of tinpa-293
     7he i-th,4x,8hecis-277/21x,32h distribution.(default option 1),20x,inpa-294
     88hecis-278/73x,8hecis-279/14x,44h standard options: spin 0 - no poinpa-295
     9larisation.,15x,8hecis-280/32x,32h spin 1/2 - vector polarisation.inpa-296
     a,9x,8hecis-281/32x,33h spin >1/2 - it11, t20, t21, t22.,8x,8hecis-inpa-297
     b282/73x,8hecis-283/6x,75h 41-45   npr(2) as npr(1),for inelastic cinpa-298
     channels.(default option 1)ecis-284/73x,8hecis-285/14x,44h standardinpa-299
     d options: spin 0 - no polarisation.,15x,8hecis-286/22x,59h spin 1/inpa-300
     e2 - vect. ana. power, vect. pol., spin-flipecis-287/22x,45h spin >inpa-301
     f1/2 - it11, vect. pol., t20, t21, t22.,6x,8hecis-288/73x,8hecis-28inpa-302
     g9/1h1,5x,65h 46-50   lmz    number of j values for which the radiainpa-303
     hl equations,2x,8hecis-290/21x,51h are solved when coulomb correctiinpa-304
     ions are used. this,1x,8hecis-291)                                 inpa-305
      write (6,1015)                                                    inpa-306
 1015 format (21x,45h number can be automatically decreased if the,7x,8hinpa-307
     1ecis-292/21x,50h irregular functions are too large. the asymptoticinpa-308
     2,2x,8hecis-293/21x,43h region where the phase-shifts are computed,inpa-309
     39x,8hecis-294/21x,60h analytically is above this value. the best vinpa-310
     4alue ofecis-295/21x,49h lmz is the maximum value of j needed by thinpa-311
     5e same,3x,8hecis-296/21x,49h computation without charge and withouinpa-312
     6t anomalous,3x,8hecis-297/21x,60h magnetic moment. (default optioninpa-313
     7 njmax/2, but enterecis-298/21x,44h a negative value if you want tinpa-314
     8o use njmax).,8x,8hecis-299/6x,63h 51-55   jdm    total spin aboveinpa-315
     9 which stop or reduction to one,4x,8hecis-300/21x,60h iteration cainpa-316
     an occur. (limits lo(25),lo(28)=.false.)ecis-301/6x,66h 56-60   lmlinpa-317
     b    maximum angular momentum (default option maximum).,1x,8hecis-3inpa-318
     c02/21x,49h without long range interaction, a limit is given,3x,8heinpa-319
     dcis-303/21x,45h for each level such that the regular coulomb,7x,8hinpa-320
     eecis-304/21x,51h function is larger than 1.d-30 at matching radiusinpa-321
     f.,1x,8hecis-305/6x,64h 61-65   jit    number of rates of interpolainpa-322
     gtion for total spin.,3x,8hecis-306/21x,19h (default value 1).,33x,inpa-323
     h8hecis-307/6x,65h 66-70   nsec   time needed at the end of a searcinpa-324
     ih to print final,2x,8hecis-308)                                   inpa-325
      write (6,1016)                                                    inpa-326
 1016 format (21x,60h results in hundredths of second.(default value 100inpa-327
     1)ecis-309/73x,8hecis-310/2x,66h note:  if lo(94)=.true. ngr and npinpa-328
     2r are not taken into account in,5x,8hecis-311/2x,79h ****  computainpa-329
     3tions at equidistant angles because such indications willecis-312/inpa-330
     48x,64h be read again, but ngr is always used for plots of experimeinpa-331
     5ntal,1x,8hecis-313/8x,16h cross-sections.,49x,8hecis-314/73x,8heciinpa-332
     6s-315/56h card 5                                  format (7f10.5),inpa-333
     717x,8hecis-316/7h ******,66x,8hecis-317/8x,58h 1-10   h     integrinpa-334
     8ation step size in fm. (default option,7x,8hecis-318/21x,46h min(0inpa-335
     9.5/wave number, 0.5*min(diffusenesses)),,6x,8hecis-319/21x,44h witinpa-336
     ahout the diffusenesses if lo(7)=.true.).,8x,8hecis-320/7x,74h 11-2inpa-337
     b0   rm    matching radius.(if lo(7)=.true. default option 20.ecis-inpa-338
     c321/21x,51h if lo(7)=.false., for each non zero potential, the,1x,inpa-339
     d8hecis-322/21x,51h radius where its absolute value is (aconv*ecm/winpa-340
     eave,1x,8hecis-323/21x,51h number) is computed and rm is the largesinpa-341
     ft of them.,1x,8hecis-324/21x,51h for coulomb form factors, radius+inpa-342
     g10*diffuseness is,1x,8hecis-325/21x,6h used),46x,8hecis-326/7x,65hinpa-343
     h 21-30   bjm   coefficient of the imaginary potential to be added,inpa-344
     i1x,8hecis-327/21x,46h to the uncoupled equations and removed in thinpa-345
     je,6x,8hecis-328)                                                  inpa-346
      write (6,1017)                                                    inpa-347
 1017 format (21x,44h second member to accelerate convergence for,8x,8heinpa-348
     1cis-329/21x,24h schroedinger equations.,28x,8hecis-330/7x,74h 31-4inpa-349
     20   eiter convergence criterion for s-matrix in the iterationecis-inpa-350
     3331/21x,24h (default option 1.e-5).,28x,8hecis-332/7x,61h 41-50   inpa-351
     4aconv value below which functions and potentials are,5x,8hecis-333inpa-352
     5/21x,48h neglected in iterations.(default option 1.e-5).,4x,8hecisinpa-353
     6-334/21x,47h aconv is also used in the default value of rm.,5x,8heinpa-354
     7cis-335/7x,50h 51-60   conj  convergence criterion for j values.,1inpa-355
     86x,8hecis-336/21x,24h (default option 1.e-5).,28x,8hecis-337/73x,8inpa-356
     9hecis-338/54h limitation to coulomb corrections       format (14i5inpa-357
     a),19x,8hecis-339/34h *********************************,39x,8hecis-inpa-358
     b340/2x,63h if lo(45) is .true., otherwise go to 'legendre expansioinpa-359
     cn data',8x,8hecis-341/8x,63h 1- 5   mcm(1)  maximum angular momentinpa-360
     dum for the computation of,2x,8hecis-342/23x,46h the corrections duinpa-361
     ee to the coulomb potential.,4x,8hecis-343/23x,20h (default option inpa-362
     f3).,30x,8hecis-344/8x,58h 6-10   mcm(2)  same for the spin-orbit cinpa-363
     goulomb potential.,7x,8hecis-345/23x,20h (default option 2).,30x,8hinpa-364
     hecis-346/73x,8hecis-347/1h1,68h note:  enter a negative value to uinpa-365
     ise 0. a blank or 0 is replaced by,4x,8hecis-348)                  inpa-366
      write (6,1018)                                                    inpa-367
 1018 format (2x,43h ****  the default options described above.,28x,8hecinpa-368
     1is-349/73x,8hecis-350/54h legendre expansion data                 inpa-369
     2format (14i5),19x,8hecis-351/24h ***********************,49x,8heciinpa-370
     3s-352/2x,62h if lo(65) is .true., otherwise go to 'compound nucleuinpa-371
     4s data'.,9x,8hecis-353/8x,59h 1- 5   nl(1)  power of (1-cos(theta)inpa-372
     5) for the expansion in,6x,8hecis-354/22x,49h legendre polynomials inpa-373
     6of the interference between,2x,8hecis-355/22x,49h coulomb and nuclinpa-374
     7ear elastic scattering. power of,2x,8hecis-356/22x,39h (1-cos(thetinpa-375
     8a)**2) if lo(18) is .true..,12x,8hecis-357/22x,20h (default optioninpa-376
     9 2).,31x,8hecis-358/8x,57h 6-10   nl(2)  number of legendre polynoinpa-377
     amials for elastic,8x,8hecis-359/22x,49h scattering of charged partinpa-378
     bicles. (default option,2x,8hecis-360/22x,48h 1.5 number obtained winpa-379
     cithout coulomb amplitude).,3x,8hecis-361/7x,58h 11-15   nl(3)  numinpa-380
     dber of legendre polynomials for elastic,8x,8hecis-362/22x,45h scatinpa-381
     etering of uncharged particles, inelastic,6x,8hecis-363/22x,49h scainpa-382
     fttering and compound nucleus. (default option,2x,8hecis-364/22x,17inpa-383
     gh maximum number).,34x,8hecis-365/73x,8hecis-366/60h compound nuclinpa-384
     heus data                   format (6i5,2f10.5),13x,8hecis-367/22h inpa-385
     i*********************,51x,8hecis-368)                             inpa-386
      write (6,1019)                                                    inpa-387
 1019 format (2x,57h if lo(84) or lo(85) or lo(86) is .true., otherwise inpa-388
     1go to,14x,8hecis-369/2x,31h 'interpolation on total spin'.,40x,8heinpa-389
     2cis-370/8x,61h 1- 5   nsp(1) number of uncoupled states and contininpa-390
     3ua. if is,4x,8hecis-371/22x,47h replaced by min(nsp(1),nsp(2)). ifinpa-391
     4 it is zero,,4x,8hecis-372/22x,15h lo(84)=.false.,36x,8hecis-373/8inpa-392
     5x,54h 6-10   nsp(2) number of uncoupled states with angular,11x,8hinpa-393
     6ecis-374/22x,44h distribution. they must be the first given.,7x,8hinpa-394
     7ecis-375/7x,74h 11-15   nfiss  number of fission data. if nfiss=0,inpa-395
     8 lo(85)=.false.ecis-376/7x,65h 16-20   nrd    number of gamma traninpa-396
     9smission factors. if it is 0,,1x,8hecis-377/22x,33h these coefficiinpa-397
     aents are computed.,18x,8hecis-378/7x,64h 21-25   ncont  number of inpa-398
     bcontinua. they must be the last given,,2x,8hecis-379/22x,59h no aninpa-399
     cgular distribution can be requested for them.ecis-380/7x,60h 26-30inpa-400
     d   ncoj   number of values of the spin of the residual,6x,8hecis-3inpa-401
     e81/22x,47h nucleus for the continua. (default option 30).,4x,8heciinpa-402
     fs-382/7x,64h 31-40   acn1   maximum ratio energy/step for the discinpa-403
     gretisation,2x,8hecis-383/22x,38h of the continua. (default option inpa-404
     h8.).,13x,8hecis-384/7x,63h 41-50   acn2   minimum step size for thinpa-405
     ie discretisation of the,3x,8hecis-385)                            inpa-406
      write (6,1020)                                                    inpa-407
 1020 format (22x,31h continua. (default option 8.).,20x,8hecis-386/73x,inpa-408
     18hecis-387/2x,79h note:  the last step size for the discretisationinpa-409
     2 of the continuum fromecis-388/2x,68h ****  0 to e is max(e/acn1,ainpa-410
     3cn2) or e. if the continuum is so small,3x,8hecis-389/8x,73h that inpa-411
     4this method gives only one step, this step is divided by 2.ecis-39inpa-412
     50/8x,73h calculations are done with the energy of the middle of thinpa-413
     6e step.ecis-391/73x,8hecis-392/54h interpolation on total spin    inpa-414
     7         format (14i5),19x,8hecis-393/28h ************************inpa-415
     8***,45x,8hecis-394/2x,79h if lo(43) is .true., otherwise go to  'cinpa-416
     9ards read in subroutine lect'.ecis-395/8x,26h 1- 5   ls(1) first linpa-417
     aimit.,39x,8hecis-396/8x,39h 6-10   ld(1) number of values skipped.inpa-418
     b,26x,8hecis-397/7x,28h 11-15   ls(2) second limit.,38x,8hecis-398/inpa-419
     c7x,40h 16-20   ld(2) number of values skipped.,26x,8hecis-399/3x,7inpa-420
     d8h ....................  up to ls(jit) and ld(jit)   .............inpa-421
     e......ecis-400/73x,8hecis-401/7x,64h the calculation is stopped ifinpa-422
     f values ls decrease. the values ld,2x,8hecis-402/1x,70h are changeinpa-423
     gd to be used cumulatively in the program. if lo(18)=.true.,,2x,8heinpa-424
     hcis-403/1x,80h and the spins in the ground state are both zero, thinpa-425
     ie values ld read areecis-404)                                     inpa-426
      write (6,1021)                                                    inpa-427
 1021 format (1x,17h multiplied by 2.,55x,8hecis-405/1h1,29hcards read iinpa-428
     1n subroutine lecl,43x,8hecis-406/30h *****************************inpa-429
     2,43x,8hecis-407/73x,8hecis-408/24h for each nuclear state:,49x,8heinpa-430
     3cis-409/24h ***********************,49x,8hecis-410/6x,75h beginnininpa-431
     4g with the ground-state and including uncoupled states forecis-411inpa-432
     5/6x,55h compound nucleus calculation which must be at the end.,12xinpa-433
     6,8hecis-412/6x,59h the best order is the one of decreasing couplininpa-434
     7g strength.,8x,8hecis-413/73x,8hecis-414/68h nuclear states -spinsinpa-435
     8 and masses -      format (f5.2,2i2,a1,5f10.5),5x,8hecis-415/36h *inpa-436
     9**********************************,37x,8hecis-416/7x,43h 1- 5   spinpa-437
     a(2,i)  spin of the nuclear state.,23x,8hecis-417/7x,44h 6- 7   n  inpa-438
     bfurther description of the state.,22x,8hecis-418/14x,57h in the roinpa-439
     ctational model, must be non-zero for the member,2x,8hecis-419/22x,inpa-440
     d23h of a vibrational band.,28x,8hecis-420/14x,57h in the vibrationinpa-441
     eal model, can be non-zero for the ground,2x,8hecis-421/22x,39h stainpa-442
     fte to avoid the input of next card.,12x,8hecis-422/14x,58h not useinpa-443
     gd if lo(3) = .true. (anharmonic vibrational  model,1x,8hecis-423/2inpa-444
     h2x,59h or asymmetric rotational model), if lo(7) = .true.ecis-424/inpa-445
     i22x,44h (external potentials) and uncoupled states.,7x,8hecis-425)inpa-446
      write (6,1022)                                                    inpa-447
 1022 format (7x,65h 8- 9   k optical potential. (default option, 1 for inpa-448
     1ground-state,,1x,8hecis-426/14x,37h same as last one for excited sinpa-449
     2tate).,22x,8hecis-427/9x,63h 10   spi      parity of the nuclear sinpa-450
     3tate: '+' or '-' but only,1x,8hecis-428/14x,67h '-' is necessary (inpa-451
     4'+' for a blank or any other character).ecis-429/6x,65h 11-20   eninpa-452
     5ergy of the projectile in the laboratory system in mev,2x,8hecis-4inpa-453
     630/14x,56h for the ground state. excitation energy for the others.inpa-454
     7,3x,8hecis-431/6x,41h 21-30   sp(1,i)  spin of the projectile.,26xinpa-455
     8,8hecis-432/6x,53h 31-40   wv(1,i)  mass of the projectile in a.m.inpa-456
     9u.  .,14x,8hecis-433/14x,57h if this value is not zero for an exciinpa-457
     ated state, the spin,2x,8hecis-434/14x,55h of the projectile, its minpa-458
     bass and the product of charges,4x,8hecis-435/14x,58h read on this inpa-459
     ccard are taken into account. if this mass is,1x,8hecis-436/14x,56hinpa-460
     d zero, values of sp(i,1),sp(i,2),sp(i,3) and sp(i,6) are,3x,8hecisinpa-461
     e-437/14x,32h taken from the preceding level.,27x,8hecis-438/6x,49hinpa-462
     f 41-50   wv(2,i)  mass of the target in a.m.u.  .,18x,8hecis-439/6inpa-463
     gx,65h 51-60   sp(3,i)  product of the charges of the target and ofinpa-464
     h the,2x,8hecis-440/14x,19h incident particle.,40x,8hecis-441/73x,8inpa-465
     ihecis-442/2x,64h note:  only this card is read for uncoupled stateinpa-466
     js and continua,7x,8hecis-443)                                     inpa-467
      write (6,1023)                                                    inpa-468
 1023 format (2x,45h ****  used for compound nucleus calculation.,26x,8hinpa-469
     1ecis-444/73x,8hecis-445/72h description of vibrations  (if n is noinpa-470
     2t 0 in rotational model or n is 0,1x,8hecis-446/81h **************inpa-471
     3***********  in vibrational model and lo(3)=lo(7)=.false.)ecis-447inpa-472
     4/73x,8hecis-448/54h number of phonons                       formatinpa-473
     5 (14i5),19x,8hecis-449/18h *****************,55x,8hecis-450/7x,41hinpa-474
     6 1- 5   iph(i)  description of the state.,25x,8hecis-451/14x,45h iinpa-475
     7n the vibrational model: 0 for ground state,14x,8hecis-452/22x,37hinpa-476
     8 1 or 2 for pure 1 or 2-phonons state,14x,8hecis-453/22x,43h 3 forinpa-477
     9 a mixture of 1 and 2-phonons states.,8x,8hecis-454/14x,49h in theinpa-478
     a rotational model: 0 for ground-state band,10x,8hecis-455/39x,23h inpa-479
     b1 for vibrational band,11x,8hecis-456/39x,24h 2 for a mixture of tinpa-480
     chem,10x,8hecis-457/7x,65h 6-10   rotational model: number of the vinpa-481
     dibration in the order of,1x,8hecis-458/14x,34h input. (see 'cards inpa-482
     eread in lect'),25x,8hecis-459/14x,58h vibrational model: number ofinpa-483
     f the phonon of the one-phonon,1x,8hecis-460/14x,55h state or of thinpa-484
     ge first phonon of the two-phonons state.,4x,8hecis-461/6x,62h 11-1inpa-485
     h5   vibrational model: number of the second phonon of the,5x,8heciinpa-486
     is-462/14x,19h two-phonons state.,40x,8hecis-463)                  inpa-487
      write (6,1024)                                                    inpa-488
 1024 format (1h1,5x,65h 16-20   vibrational model: number of the one-phinpa-489
     1onon component of,2x,8hecis-464/14x,15h a mixed state.,44x,8hecis-inpa-490
     2465/73x,8hecis-466/2x,67h note:  the total number of phonons will inpa-491
     3be the largest number read,4x,8hecis-467/2x,30h ****  in the columinpa-492
     4ns 6 to 20.,41x,8hecis-468/73x,8hecis-469/56h phonons mixing paraminpa-493
     5eter                format (7f10.5),17x,8hecis-470/25h ***********inpa-494
     6*************,48x,8hecis-471/2x,63h if iph is 3 (vibrational modelinpa-495
     7) or iph is 2 (rotational model),8x,8hecis-472/7x,22h 1-10   bt ininpa-496
     8 degrees.,44x,8hecis-473/6x,65h the nuclear state is:  cos(bt)*(1 inpa-497
     9phonon) + sin(bt)*(2 phonons).,2x,8hecis-474/14x,51h or:  cos(bt)*inpa-498
     a(vibr. band) + sin(bt)*(ground band).,8x,8hecis-475/73x,8hecis-476inpa-499
     b/32h for asymmetric rotational model,41x,8hecis-477/32h **********inpa-500
     c*********************,41x,8hecis-478/1x,22h if lo(1)=lo(3)=.true.,inpa-501
     d50x,8hecis-479/5x,67h there are n=sp(*,4)/2 band mixing parametersinpa-502
     e between the n+1 bands,1x,8hecis-480/2x,79h defined as atan(a(2*i)inpa-503
     f/a(2*i-2)) where a(i) is the amplitude of band iecis-481/5x,76h ifinpa-504
     g n is not 0 and the reduced matrix elements are not read on cardseinpa-505
     hcis-482/73x,8hecis-483/56h mixing parameters                      inpa-506
     i format (7f10.5),17x,8hecis-484)                                  inpa-507
      write (6,1025)                                                    inpa-508
 1025 format (18h *****************,55x,8hecis-485/7x,26h 1-10   bt(1)  inpa-509
     1in degrees.,40x,8hecis-486/6x,27h 11-20   bt(2)  in degrees.,40x,8inpa-510
     2hecis-487/6x,27h 21-30   bt(3)  in degrees.,40x,8hecis-488/6x,27h inpa-511
     331-40   bt(4)  in degrees.,40x,8hecis-489/6x,27h 41-50   bt(5)  ininpa-512
     4 degrees.,40x,8hecis-490/6x,26h 51-60   .................,41x,8hecinpa-513
     5is-491/6x,75h the nuclear state is:   cos(bt(1))*y(ai,0) + sin(bt(inpa-514
     61))*cos(bt(2))ecis-492/6x,75h *(y(ai,2)+s*y(ai,-2))*sqrt(0.5) + siinpa-515
     7n(bt(1))*sin(bt(2))*cos(bt(3))ecis-493/6x,65h *(y(ai,4)+s*y(ai,-4)inpa-516
     8)*sqrt(0.5) + ....... where s=(-)**(ai+spi).,2x,8hecis-494/73x,8heinpa-517
     9cis-495/2x,69h note:  for unnatural parity states (spi=-), bt(1) winpa-518
     aill be ignored in,2x,8hecis-496/2x,51h ****  the calculation and rinpa-519
     beplaced by 90. degrees.,20x,8hecis-497/73x,8hecis-498/8x,63h if loinpa-520
     c(15)=.true., all the nuclear parameters (quantities given,2x,8heciinpa-521
     ds-499/8x,63h in degrees) have to be read in order to avoid a changinpa-522
     ee in this,2x,8hecis-500/8x,59h part of input when shifting lo(15) inpa-523
     ffrom .false. to .true..,6x,8hecis-501/8x,43h they are not used andinpa-524
     g cannot be in search.,22x,8hecis-502/73x,8hecis-503/73x,8hecis-504inpa-525
     h/30h cards read in subroutine lect,43x,8hecis-505/30h ************inpa-526
     i*****************,43x,8hecis-506)                                 inpa-527
      write (6,1026)                                                    inpa-528
 1026 format (73x,8hecis-507/62h phonon descriptions                    inpa-529
     1 format (2i5,f10.5,i5),11x,8hecis-508/20h *******************,53x,inpa-530
     28hecis-509/26h for every phonon involved,47x,8hecis-510/7x,62h 1- inpa-531
     35   nbta(9,*) = l angular momentum used also for heavy ion,4x,8hecinpa-532
     4is-511/7x,74h 6-10   nbta(10,*) = k magnetic quantum number of theinpa-533
     5 vibration inecis-512/21x,60h rotational model. in the vibrationalinpa-534
     6 model, must beecis-513/21x,51h zero to use this phonon in l=0 secinpa-535
     7ond order terms.,1x,8hecis-514/6x,61h 11-20   beta(1,*)   phonon ainpa-536
     8mplitude for the real potential.,6x,8hecis-515/6x,62h 21-25   ik  inpa-537
     9 level of which the masses are used for heavy-ion,5x,8hecis-516/21inpa-538
     ax,36h corrections. (default option ik=1).,16x,8hecis-517/73x,8heciinpa-539
     bs-518/56h phonon amplitudes of other potentials   format (7f10.5),inpa-540
     c17x,8hecis-519/38h *************************************,35x,8heciinpa-541
     ds-520/6x,75h if deformations are not the same for all potentials (inpa-542
     elo(5)=.true.)ecis-521/1h1,6x,49h 1-10   beta(2,*) for volume imagiinpa-543
     fnary potential.,17x,8hecis-522/6x,46h 11-20   beta(3,*) for surfacinpa-544
     ge real potential.,21x,8hecis-523/6x,51h 21-30   beta(4,*) for surfinpa-545
     hace imaginary potential.,16x,8hecis-524/6x,39h 31-40   beta(5,*) finpa-546
     ior real spin-orbit.,28x,8hecis-525)                               inpa-547
      write (6,1027)                                                    inpa-548
 1027 format (6x,44h 41-50   beta(6,*) for imaginary spin-orbit.,23x,8heinpa-549
     1cis-526/6x,41h 51-60   beta(7,*) for coulomb potential.,26x,8hecisinpa-550
     2-527/6x,52h 61-70   beta(8,*) for coulomb spin-orbit potential.,15inpa-551
     3x,8hecis-528/73x,8hecis-529/2x,56h note:  if lo(5)=.false., beta(iinpa-552
     4,*)=beta(1,*) for i=2,8.,15x,8hecis-530/2x,5h ****,66x,8hecis-531/inpa-553
     573x,8hecis-532/62h deformations of rotational model        format inpa-554
     6(2i5,f10.5,i5),11x,8hecis-533/33h ********************************inpa-555
     7,40x,8hecis-534/1x,71h only if lo(1)=.true. and lo(7)=.false., othinpa-556
     8erwise go to 'optical model,1x,8hecis-535/1x,13h parameters'.,59x,inpa-557
     98hecis-536/7x,44h 1- 5   iqm    largest order of deformation.,22x,inpa-558
     a8hecis-537/7x,54h 6-10   iqmax  maximum l-value of multipole expaninpa-559
     bsion.,12x,8hecis-538/6x,63h 11-20   aspin, the k-value of the bandinpa-560
     c, used only in symmetric,4x,8hecis-539/21x,18h rotational model.,3inpa-561
     d4x,8hecis-540/6x,64h 21-25   ik     level of which the masses are inpa-562
     eused for heavy-ion,3x,8hecis-541/21x,36h corrections. (default optinpa-563
     fion ik=1).,16x,8hecis-542/73x,8hecis-543/2x,63h note:  in the asyminpa-564
     gmetric rotational model iqm is limited to 35,8x,8hecis-544/2x,33h inpa-565
     h****  and iqmax is limited to 8.,38x,8hecis-545/73x,8hecis-546/56hinpa-566
     i deformations of real volume potential   format (7f10.5),17x,8heciinpa-567
     js-547)                                                            inpa-568
      return                                                            inpa-569
      end                                                               inpa-570
c 18/12/95  ibm and cdc version                                 ecis95  inpb-000
      subroutine inpb                                                   inpb-001
      write (6,1028)                                                    inpb-002
 1028 format (38h *************************************,35x,8hecis-548/4inpb-003
     1x,49h iq = iqm/2 values for symmetric rotational model,20x,8hecis-inpb-004
     2549/4x,50h iq = iqm-1 values for asymmetric rotational model,19x,8inpb-005
     3hecis-550/7x,53h 1-10   beta(1,1)  deformation of the real potentiinpb-006
     4al.,13x,8hecis-551/6x,54h 11-20   beta(1,2)  deformation of the reinpb-007
     5al potential.,13x,8hecis-552/6x,54h 21-30   beta(1,3)  deformationinpb-008
     6 of the real potential.,13x,8hecis-553/6x,54h 31-40   beta(1,4)  dinpb-009
     7eformation of the real potential.,13x,8hecis-554/6x,54h 41-50   beinpb-010
     8ta(1,5)  deformation of the real potential.,13x,8hecis-555/32h ...inpb-011
     9............................,41x,8hecis-556/6x,50h eventually, on inpb-012
     anext card:         format (7f10.5),17x,8hecis-557/7x,53h 1-10   beinpb-013
     bta(1,8)  deformation of the real potential.,13x,8hecis-558/6x,59h inpb-014
     c11-20   beta(1,9)  deformation of the real potential. ....,8x,8hecinpb-015
     dis-559/6x,34h ..... and so on up to beta(1,iq).,33x,8hecis-560/73xinpb-016
     e,8hecis-561/56h deformations for other potentials       format (7finpb-017
     f10.5),17x,8hecis-562/34h *********************************,39x,8heinpb-018
     gcis-563/6x,75h if deformations are not the same for all potentialsinpb-019
     h (lo(5)=.true.)ecis-564/7x,64h 1-10   beta(2,i) deformation of theinpb-020
     i volume imaginary potential.,2x,8hecis-565)                       inpb-021
      write (6,1029)                                                    inpb-022
 1029 format (6x,61h 11-20   beta(3,i) deformation of the surface real pinpb-023
     1otential.,6x,8hecis-566/6x,66h 21-30   beta(4,i) deformation of thinpb-024
     2e surface imaginary potential.,1x,8hecis-567/6x,55h 31-40   beta(5inpb-025
     3,i) deformation for the real spin-orbit.,12x,8hecis-568/6x,60h 41-inpb-026
     450   beta(6,i) deformation for the imaginary spin-orbit.,7x,8hecisinpb-027
     5-569/6x,57h 51-60   beta(7,i) deformation for the coulomb potentiainpb-028
     6l.,10x,8hecis-570/6x,58h 61-70   beta(8,i) deformation for the couinpb-029
     7lomb spin-orbit.,9x,8hecis-571/1x,24h there are iq such cards,48x,inpb-030
     88hecis-572/73x,8hecis-573/2x,67h note:  if lo(5)=.false., beta(i,jinpb-031
     9)=beta(1,j) for i=2,6 and j=1,iq.,4x,8hecis-574/2x,54h ****  for sinpb-032
     aymmetric rotational model  (lo(3)=.false.),17x,8hecis-575/10x,56h inpb-033
     bthe orders of deformations are l=2, 3, 4, ...and so on.,7x,8hecis-inpb-034
     c576/10x,40h the radial dependence of potentials is:,23x,8hecis-577inpb-035
     d/14x,57h r = r0*(1 + beta(*,1)*y(2,0).+ beta(*,2)*y(4,0) + .....),inpb-036
     e2x,8hecis-578/10x,37h odd order deformations are not read.,26x,8heinpb-037
     fcis-579/1h1,6x,51h for the asymmetric rotational model (lo(3)=.truinpb-038
     ge.),15x,8hecis-580/10x,71h the order of deformations are (l,k)=(2,inpb-039
     h0), (2,2), (4,0), (4,2)ecis-581/10x,59h , (4,4), (6,0) .... and soinpb-040
     i on. there are limited to (8,8).,4x,8hecis-582)                   inpb-041
      write (6,1030)                                                    inpb-042
 1030 format (10x,40h the radial dependence of potentials is:,23x,8hecisinpb-043
     1-583/14x,67h r = r0*(1 + beta(*,1)*(cos(beta(*,2))*y(2,0)+sin(betainpb-044
     2(*,2)ecis-584/12x,69h )*(y(2,2)+y(2,-2))*sqrt(0.5)) + beta(*,3)*(cinpb-045
     3os(beta(*,4))*y(ecis-585/12x,69h 4,0)+sin(beta(*,4)*(cos(beta(*,5)inpb-046
     4)*(y(4,2)+y(4,-2))*sqrt(0.5ecis-586/12x,69h +sin(beta(*,5))*(y(4,4inpb-047
     5)+y(4,-4))*sqrt(0.5)) + ..............ecis-587/3x,69h the 'gamma' inpb-048
     6type betas as beta(*,i) for i=2,4,5,7... are in degrees.,1x,8hecisinpb-049
     7-588/3x,69h ******************************************************inpb-050
     8**************,1x,8hecis-589/73x,8hecis-590/2x,67h note:  for the inpb-051
     9asymmetric rotational model, when lo(2)=.true., the,4x,8hecis-591/inpb-052
     a2x,69h ****  band mixing coefficients are calculated from 'gamma'=inpb-053
     bbeta(*,2),2x,8hecis-592/8x,62h in the davydov-filippov model. the inpb-054
     csequence of states must be,3x,8hecis-593/8x,63h the ground state, inpb-055
     dthe first 2+, the second 2+,the other states,2x,8hecis-594/8x,63h inpb-056
     edescribed as in the general case (there can be only the ground,2x,inpb-057
     f8hecis-595/8x,62h state and the first 2+). the mixing parameter ofinpb-058
     g the first 2+,3x,8hecis-596/8x,61h state is used as 'gamma' value inpb-059
     hinstead of beta(1,2), but the,4x,8hecis-597/8x,61h differences betinpb-060
     iween beta(i,3) are kept. the mixing parameter,4x,8hecis-598)      inpb-061
      write (6,1031)                                                    inpb-062
 1031 format (8x,63h of the second 2+ state is ignored. in a search, theinpb-063
     1 index 4001,2x,8hecis-599/8x,52h should be used instead of 2002 orinpb-064
     2 3011 for 'gamma'.,13x,8hecis-600/73x,8hecis-601/45h deformations inpb-065
     3of anharmonic vibrational model,28x,8hecis-602/45h ***************inpb-066
     4*****************************,28x,8hecis-603/2x,68h note:  in thisinpb-067
     5 model, there is an unique ratio 1/sqrt(4*pi) for any,3x,8hecis-60inpb-068
     64/2x,63h ****  order of deformation. to be consistent with the harinpb-069
     7monic,8x,8hecis-605/8x,62h vibrational model, the deformations indinpb-070
     8icated below should be,3x,8hecis-606/8x,58h beta, beta**2/sqrt(4*pinpb-071
     9i) and beta**3/(4*pi) respectively.,7x,8hecis-607/73x,8hecis-608/5inpb-072
     a6h deformations                            format (7f10.5),17x,8heinpb-073
     bcis-609/13h ************,60x,8hecis-610/1x,65h only if lo(1)=.falsinpb-074
     ce. and .lo(3)=.true., lo(5) or lo(16)=.true.,,7x,8hecis-611/1x,44hinpb-075
     d otherwise go to 'optical model parameters'.,28x,8hecis-612/7x,40hinpb-076
     e 1-10   beta(1,*) for central potential.,26x,8hecis-613/6x,50h 11-inpb-077
     f20   beta(2,*) for volume imaginary potential.,17x,8hecis-614/6x,4inpb-078
     g6h 21-30   beta(3,*) for surface real potential.,21x,8hecis-615/6xinpb-079
     h,51h 31-40   beta(4,*) for surface imaginary potential.,16x,8hecisinpb-080
     i-616/6x,39h 41-50   beta(5,*) for real spin-orbit.,28x,8hecis-617)inpb-081
      write (6,1032)                                                    inpb-082
 1032 format (6x,44h 51-60   beta(6,*) for imaginary spin-orbit.,23x,8heinpb-083
     1cis-618/6x,41h 61-70   beta(7,*) for coulomb potential.,26x,8hecisinpb-084
     2-619/73x,8hecis-620/2x,54h next card:                            finpb-085
     3ormat (7f10.5),17x,8hecis-621/2x,11h **********,60x,8hecis-622/7x,inpb-086
     451h 1-10   beta(8,*) for coulomb spin-orbit potential.,15x,8hecis-inpb-087
     5623/70h there are four sets of such cards, one for each order of dinpb-088
     6eformation.,3x,8hecis-624/73x,8hecis-625/54h angular momenta      inpb-089
     7                   format (14i5),19x,8hecis-626/16h **************inpb-090
     8*,57x,8hecis-627/1x,80h only if lo(16)=.true., otherwise go to 'deinpb-091
     9formations'.(if lo(6)=.true.,ecis-628/69h heavy-ion definition do inpb-092
     anot change non coulomb deformation lengths).,4x,8hecis-629/8x,47h inpb-093
     b1- 5  for zeroth order (default 2). (not used),18x,8hecis-630/8x,3inpb-094
     c5h 6-10  for first order (default 2).,30x,8hecis-631/7x,37h 11-15 inpb-095
     d for second order (default 2).,29x,8hecis-632/7x,36h 16-20  for thinpb-096
     eird order (default 2).,30x,8hecis-633/7x,61h 21-25  ik   level of inpb-097
     fwhich the masses are used for heavy-ion,5x,8hecis-634/14x,36h corrinpb-098
     gections. (default option ik=1).,23x,8hecis-635/9x,38h enter a negainpb-099
     htive value if you want 0.,26x,8hecis-636/73x,8hecis-637/1h1,28hoptinpb-100
     iical potential parameters,44x,8hecis-638)                         inpb-101
      write (6,1033)                                                    inpb-102
 1033 format (29h ****************************,44x,8hecis-639/6x,75h nppinpb-103
     1 loops to 'equidistant angles' if lo(7)=.false., none otherwiseeciinpb-104
     2s-640/6x,66h the program searches to which nuclear state the opticinpb-105
     3al potential,1x,8hecis-641/4x,67h which will be read belongs. if ninpb-106
     4one is found, a warning is printed,2x,8hecis-642/73x,8hecis-643/56inpb-107
     5h volume or scalar real potential         format (3f10.5),17x,8hecinpb-108
     6is-644/32h *******************************,41x,8hecis-645/7x,30h 1inpb-109
     7-10   val(1)   depth in mev.,36x,8hecis-646/6x,39h 11-20   val(2) inpb-110
     8  reduced radius in fm.,28x,8hecis-647/6x,36h 21-30   val(3)   difinpb-111
     9fuseness in fm.,31x,8hecis-648/73x,8hecis-649/56h volume or scalarinpb-112
     a imaginary potential    format (3f10.5),17x,8hecis-650/37h *******inpb-113
     b*****************************,36x,8hecis-651/7x,30h 1-10   val(4) inpb-114
     c  depth in mev.,36x,8hecis-652/6x,39h 11-20   val(5)   reduced radinpb-115
     dius in fm.,28x,8hecis-653/6x,36h 21-30   val(6)   diffuseness in finpb-116
     em.,31x,8hecis-654/73x,8hecis-655/56h surface or vector real potentinpb-117
     fial        format (3f10.5),17x,8hecis-656/33h ********************inpb-118
     g************,40x,8hecis-657/7x,30h 1-10   val(7)   depth in mev.,3inpb-119
     h6x,8hecis-658/6x,39h 11-20   val(8)   reduced radius in fm.,28x,8hinpb-120
     iecis-659/6x,36h 21-30   val(9)   diffuseness in fm.,31x,8hecis-660inpb-121
     j)                                                                 inpb-122
      write (6,1034)                                                    inpb-123
 1034 format (73x,8hecis-661/56h surface or vector imaginary potential  inpb-124
     1 format (3f10.5),17x,8hecis-662/38h ******************************inpb-125
     2*******,35x,8hecis-663/1x,30h 1-10   val(10)  depth in mev.,42x,8hinpb-126
     3ecis-664/39h 11-20   val(11)  reduced radius in fm.,34x,8hecis-665inpb-127
     4/36h 21-30   val(12)  diffuseness in fm.,37x,8hecis-666/73x,8hecisinpb-128
     5-667/56h spin-orbit or tensor real potential     format (3f10.5),1inpb-129
     67x,8hecis-668/36h ***********************************,37x,8hecis-6inpb-130
     769/7x,30h 1-10   val(13)  depth in mev.,36x,8hecis-670/6x,39h 11-2inpb-131
     80   val(14)  reduced radius in fm.,28x,8hecis-671/6x,36h 21-30   vinpb-132
     9al(15)  diffuseness in fm.,31x,8hecis-672/73x,8hecis-673/56h spin-inpb-133
     aorbit/tensor imaginary potential   format (3f10.5),17x,8hecis-674/inpb-134
     b38h *************************************,35x,8hecis-675/7x,30h 1-inpb-135
     c10   val(16)  depth in mev.,36x,8hecis-676/6x,39h 11-20   val(17) inpb-136
     d reduced radius in fm.,28x,8hecis-677/6x,36h 21-30   val(18)  diffinpb-137
     euseness in fm.,31x,8hecis-678/73x,8hecis-679/2x,49h note:  the spiinpb-138
     fn-orbit operator is always 2*(l.s),22x,8hecis-680/2x,59h ****  forinpb-139
     g spin 1/2 particle, the depth is the usual value.,12x,8hecis-681/8inpb-140
     hx,63h for spin 1 particle, the depth is the half of the usual valuinpb-141
     ie.,2x,8hecis-682/73x,8hecis-683)                                  inpb-142
      write (6,1035)                                                    inpb-143
 1035 format (56h coulomb potential                       format (3f10.5inpb-144
     1),17x,8hecis-684/18h *****************,55x,8hecis-685/7x,46h 1-10 inpb-145
     2  val(20)  reduced coulomb radius in fm.,20x,8hecis-686/6x,75h 11-inpb-146
     320   val(21)  diffuseness of a woods-saxon charge distribution.eciinpb-147
     4s-687/6x,65h 21-30   val(25)  third parameter of a fermi charge diinpb-148
     5stribution.,2x,8hecis-688/73x,8hecis-689/56h spin-orbit coulomb poinpb-149
     6tential            format (3f10.5),17x,8hecis-690/29h ************inpb-150
     7****************,44x,8hecis-691/7x,63h 1-10   val(22)  anomalous minpb-151
     8agnetic moment (less half charge in,3x,8hecis-692/14x,57h dirac foinpb-152
     9rmalism) multiplied by the charge of the target.,2x,8hecis-693/6x,inpb-153
     a39h 11-20   val(23)  reduced radius in fm.,28x,8hecis-694/6x,36h 2inpb-154
     b1-30   val(24)  diffuseness in fm.,31x,8hecis-695/1h1,1x,69h note:inpb-155
     c  if val(21)=0. or val(24)=0. a homogeneous charge distribution,2xinpb-156
     d,8hecis-696/2x,62h ****  is used. the product of charges is copiedinpb-157
     e into val(19).,9x,8hecis-697/9x,72h when the diffuseness of the chinpb-158
     farge is not zero, the woods-saxonecis-698/8x,64h form factor is muinpb-159
     gltiplied by 1+val(25)*r**2. the same parameter,1x,8hecis-699/8x,56inpb-160
     hh val(25) is used for these two last potentials, if their,9x,8heciinpb-161
     is-700/8x,25h diffuseness is not zero.,40x,8hecis-701)             inpb-162
      write (6,1036)                                                    inpb-163
 1036 format (9x,60h if lo(9)=.true., enter a negative radius to use a sinpb-164
     1ymmetric,4x,8hecis-702/8x,25h woods-saxon form factor.,40x,8hecis-inpb-165
     2703/9x,62h if a diffuseness or the radius of a coulomb potential winpb-166
     3ithout,2x,8hecis-704/8x,58h diffuseness is negative, its absolute inpb-167
     4value is taken into,7x,8hecis-705/8x,50h account in subroutine rotinpb-168
     5p and a message printed.,15x,8hecis-706/73x,8hecis-707/71h *** endinpb-169
     6 of do-loop for potentials without folding (lo(17)=.false.) ***,2xinpb-170
     7,8hecis-708/73x,8hecis-709/56h folding for real potentials        inpb-171
     8     format (3f10.5),17x,8hecis-710/28h **************************inpb-172
     9*,45x,8hecis-711/1x,80h only if lo(17)=.true., otherwise go to 'eninpb-173
     ad of do-loop for potentials'.ecis-712/7x,29h 1-10   val(26) 'v' painpb-174
     brameter,37x,8hecis-713/6x,30h 11-20   val(27) 'r' parameter,37x,8hinpb-175
     cecis-714/6x,30h 21-30   val(28) 'a' parameter,37x,8hecis-715/73x,8inpb-176
     dhecis-716/56h folding for imaginary potentials        format (3f10inpb-177
     e.5),17x,8hecis-717/33h ********************************,40x,8hecisinpb-178
     f-718/7x,30h 1-10   val(29) 'v' parameter.,36x,8hecis-719/6x,31h 11inpb-179
     g-20   val(30) 'r' parameter.,36x,8hecis-720/6x,31h 21-30   val(31)inpb-180
     h 'a' parameter.,36x,8hecis-721/73x,8hecis-722/56h folding for coulinpb-181
     iomb potentials          format (3f10.5),17x,8hecis-723)           inpb-182
      write (6,1037)                                                    inpb-183
 1037 format (31h ******************************,42x,8hecis-724/7x,30h 1inpb-184
     1-10   val(32) 'v' parameter.,36x,8hecis-725/6x,31h 11-20   val(33)inpb-185
     2 'r' parameter.,36x,8hecis-726/6x,31h 21-30   val(34) 'a' parameteinpb-186
     3r.,36x,8hecis-727/73x,8hecis-728/81h explanation of folding parameinpb-187
     4ters:  the folding functions are normalisedecis-729/81h **********inpb-188
     5************************  to 1.  to fold an optical potential,ecisinpb-189
     6-730/4x,67h enter the true charge, the depth of central potential inpb-190
     7equal to the,2x,8hecis-731/4x,68h depth of the nucleon potential minpb-191
     8ultiplied by the number of nucleons,1x,8hecis-732/4x,77h in the prinpb-192
     9ojectile, and the depth of of spin-orbit potential equal toecis-73inpb-193
     a3/4x,68h the depth of the nucleon spin-orbit potential divided by inpb-194
     bthe number,1x,8hecis-734/4x,31h of nucleons in the projectile.,38xinpb-195
     c,8hecis-735/6x,21h 'v'=0    no folding.,46x,8hecis-736/6x,50h 'a'=inpb-196
     d0    gaussian form factor with the range 'r'.,17x,8hecis-737/6x,58inpb-197
     eh 'r'=0    hulthen form factor (exp(-r/'v')-exp(-r/'a'))/r.,9x,8heinpb-198
     fcis-738/15x,54h reduced to yukawa form factor exp(-r/'v')/r if 'a'inpb-199
     g=0.,4x,8hecis-739/6x,52h otherwise  saxon form factor 1/(1+exp((r-inpb-200
     h'r')/'a').,15x,8hecis-740/73x,8hecis-741/6x,64h if a folding paraminpb-201
     ieter is negative, the absolute value is taken,3x,8hecis-742)      inpb-202
      write (6,1038)                                                    inpb-203
 1038 format (4x,55h into account in subroutine fold and a message printinpb-204
     1ed.,14x,8hecis-743/6x,75h all the derivatives of potentials neededinpb-205
     2 are obtained by numericalecis-744/4x,26h derivation after foldinginpb-206
     3.,43x,8hecis-745/73x,8hecis-746/6x,45h ******  end of do-loop for inpb-207
     4potentials ******,22x,8hecis-747/73x,8hecis-748/56h equidistant aninpb-208
     5gles                      format (7f10.5),17x,8hecis-749/19h *****inpb-209
     6*************,54x,8hecis-750/1x,70h only if lo(66)=.false., otherwinpb-210
     7ise go to 'spin-orbit parametrisation'.,2x,8hecis-751/7x,29h 1-10 inpb-211
     8  theta1   first angle.,37x,8hecis-752/6x,43h 11-20   dtheta   steinpb-212
     9p. (default option 1.),24x,8hecis-753/1h1,5x,29h 21-30   theta2   inpb-213
     alast angle.,38x,8hecis-754/6x,75h 31-40   dthe     averaging angleinpb-214
     b. values listed are 1/3 of the sumecis-755/23x,37h of values at thinpb-215
     ceta and theta+/-dthe.,13x,8hecis-756/73x,8hecis-757/56h spin-orbitinpb-216
     d parametrisation              format (7f10.5),17x,8hecis-758/27h *inpb-217
     e*************************,46x,8hecis-759/1x,69h only if lo(4)=.truinpb-218
     fe., otherwise go to 'hauser-feshbach corrections'.,3x,8hecis-760/7inpb-219
     gx,12h 1-10   az1.,54x,8hecis-761/6x,54h 11-20   az2.        (theseinpb-220
     h parameters are in an array,13x,8hecis-762/6x,13h 21-30   az3.,54xinpb-221
     i,8hecis-763/6x,63h 31-40   az4.        az(16) from az(1) to az(6) inpb-222
     jfor the search),4x,8hecis-764)                                    inpb-223
      write (6,1039)                                                    inpb-224
 1039 format (6x,13h 41-50   az5.,54x,8hecis-765/6x,13h 51-60   az6.,54xinpb-225
     1,8hecis-766/73x,8hecis-767/2x,52h note: the unparametrised spin-orinpb-226
     2bit deformation is:,19x,8hecis-768/2x,39h ****   az1=az4=0.,  az2=inpb-227
     3az3=az5=az6=1.,32x,8hecis-769/8x,47h the spin-orbit deformation muinpb-228
     4ltiplied by x is:,18x,8hecis-770/10x,36h az1=az4=0., az2=1., az3=ainpb-229
     5z5=az6=x .,27x,8hecis-771/8x,43h the 'incorrect' spin-orbit deforminpb-230
     6ation is:,22x,8hecis-772/10x,34h az1=az2=az5=az6=0., az3=az4=0.5 .inpb-231
     7,29x,8hecis-773/8x,64h for the most general parametrisation of definpb-232
     8ormed spin-orbit see,1x,8hecis-774/7x,34h comment cards in subroutinpb-233
     9ine quan.,32x,8hecis-775/73x,8hecis-776/56h hauser-feshbach correcinpb-234
     ations             format (7f10.5),17x,8hecis-777/28h *************inpb-235
     b**************,45x,8hecis-778/1x,80h only if lo(81)=.true., otherwinpb-236
     cise go to 'cards read in subroutine deph'.ecis-779/6x,50h 1-10   binpb-237
     dz1.   square root of elastic enhancement.,17x,8hecis-780/20x,25h (inpb-238
     edefault option 1.4142).,28x,8hecis-781/5x,65h 11-20   bz2.   if loinpb-239
     f(82)=.true., spin cut-off parameter (default,3x,8hecis-782/20x,52hinpb-240
     g option 3.5). if lo(82)=.false., particle degrees of,1x,8hecis-783inpb-241
     h/20x,9h freedom.,44x,8hecis-784/5x,55h 21-30   bz3.   square root inpb-242
     iof level density parameter.,13x,8hecis-785)                       inpb-243
      write (6,1040)                                                    inpb-244
 1040 format (20x,23h (default option 100.).,30x,8hecis-786/73x,8hecis-7inpb-245
     187/2x,64h note:  the penetrabilities, which are probabilities of cinpb-246
     2ompound,7x,8hecis-788/2x,69h ****  nucleus formation, are related inpb-247
     3to partial cross-sections minus,2x,8hecis-789/8x,63h the reaction inpb-248
     4cross-section to the channels taken into account.,2x,8hecis-790/9xinpb-249
     5,60h if lo(82)=.true., denoting by ti and tf the penetrabilities,4inpb-250
     6x,8hecis-791/8x,62h defined above for the incoming and the outgoininpb-251
     7g channels, the,3x,8hecis-792/8x,60h hauser-feshbach correction isinpb-252
     8: ti*tf/(4*(sum on all the t)+,5x,8hecis-793/8x,73h +bz3**2*(2*j+1inpb-253
     9)*exp(-(j*j+j)/(2*bz2**2)) for inelastic channels,ecis-794/8x,42h inpb-254
     amultiplied by bz1**2 for the elastic one.,23x,8hecis-795/8x,64h foinpb-255
     br the search, these quantities are in az from az(7) to az(9).,1x,8inpb-256
     checis-796/9x,62h for lo(82)=.false.: without fluctuations (lo(87)=inpb-257
     d.true.), bz1,2x,8hecis-797/8x,73h is used and can be in search; wiinpb-258
     eth fluctuations (lo(87)=.true.),ecis-798/8x,58h moldauer formula iinpb-259
     fs used if bz2=0, the given value of bz2,7x,8hecis-799/8x,45h otherinpb-260
     gwise. only bz1 or bz2 can be in search.,20x,8hecis-800/73x,8hecis-inpb-261
     h801/57h if lo(82)=.true., go to 'cards read in subroutine deph'.,1inpb-262
     i6x,8hecis-802/73x,8hecis-803)                                     inpb-263
      write (6,1041)                                                    inpb-264
 1041 format (56h fission data                            format (7f10.5inpb-265
     1),17x,8hecis-804/13h ************,60x,8hecis-805/63h if lo(85)=.fainpb-266
     2lse., go to 'giant dipole resonance description'.,10x,8hecis-806/6inpb-267
     3x,43h 1-10   fiss(1,*)  transmission coefficient,24x,8hecis-807/5xinpb-268
     4,76h 11-20   fiss(2,*)  degrees of freedom. if <.5, it is replacedinpb-269
     5 by 0.ecis-808/73x,8hecis-809/2x,28h there are nfiss such cards.,4inpb-270
     63x,8hecis-810/73x,8hecis-811/1h1,55hgiant dipole resonance descripinpb-271
     7tion      format (7f10.5),17x,8hecis-812/35h *********************inpb-272
     8*************,38x,8hecis-813/2x,70h only if lo(86)=.true., otherwiinpb-273
     9se go to 'level density for continuum'.,1x,8hecis-814/3x,53h if nrinpb-274
     ad is not 0, go to 'gamma transmission factors'.,17x,8hecis-815/7x,inpb-275
     b74h data to compute the (neutron, gamma) cross-section when the giinpb-276
     cantecis-816/3x,68h dipole resonance model is used (see e. lynn, 'tinpb-277
     dhe theory of neutron,2x,8hecis-817/3x,62h resonance reactions', painpb-278
     eges 321/326 and a. gilbert and a.g.w.,8x,8hecis-818/3x,65h cameroninpb-279
     f, can. jour. of physics 43, 1446, 1965, pages 1475/1476).,5x,8heciinpb-280
     gs-819/6x,58h 1-10   tgo   slow s-wave neutron gamma widths/spacinginpb-281
     h for,9x,8hecis-820/19x,47h normalisation. if tgo=0, lo(86) is set inpb-282
     i.false.,7x,8hecis-821)                                            inpb-283
      write (6,1042)                                                    inpb-284
 1042 format (5x,61h 11-20   bn    neutron separation energy.(default opinpb-285
     1tion 8.).,7x,8hecis-822/5x,44h 21-30   fnug  radiative degrees of inpb-286
     2freedom.,24x,8hecis-823/19x,44h if less than 1., it is replaced byinpb-287
     3 fnug=20.,10x,8hecis-824/5x,52h 31-40   egd   energy of the giant inpb-288
     4dipole resonance.,16x,8hecis-825/19x,45h (default option 163*(n*z)inpb-289
     5**2/(n+z)**(4/3).).,9x,8hecis-826/19x,48h the strong absorption moinpb-290
     6del id used if egd < 0.,6x,8hecis-827/19x,47h (simple behaviour asinpb-291
     7 e**3 instead of resonance,7x,8hecis-828/19x,20h with a factor e**inpb-292
     84),34x,8hecis-829/5x,52h 41-50   ggd   resonance width. (default oinpb-293
     9ption 5.).,16x,8hecis-830/4x,66h for the search, these quantities inpb-294
     aare in az from az(10) to az(14).,3x,8hecis-831/73x,8hecis-832/56h inpb-295
     bgamma transmission factors              format (7f10.5),17x,8hecisinpb-296
     c-833/27h **************************,46x,8hecis-834/1x,40h only if inpb-297
     dlo(86)=.true. and nrd is not 0.,32x,8hecis-835/6x,23h 1-10   gam(1inpb-298
     e) for l=0.,44x,8hecis-836/5x,24h 11-20   gam(2) for l=1.,44x,8heciinpb-299
     fs-837/5x,24h .......................,44x,8hecis-838/5x,24h 61-70  inpb-300
     g gam(7) for l=6.,44x,8hecis-839/2x,44h up to gam(nrd), eventually inpb-301
     hon others cards.,27x,8hecis-840/73x,8hecis-841/56h level density oinpb-302
     if compound nucleus       format (7f10.5),17x,8hecis-842)          inpb-303
      write (6,1043)                                                    inpb-304
 1043 format (34h *********************************,39x,8hecis-843/3x,67inpb-305
     1h if there are gamma transmission parameters computed with the giainpb-306
     2nt,3x,8hecis-844/69h dipole resonance model (lo(86)=.true. and nrdinpb-307
     3=0 in 'compound nucleus,4x,8hecis-845/81h data'),  or continua (ncinpb-308
     4ont not 0 in 'compound nucleus data'), otherwiseecis-846/39h go toinpb-309
     5 'cards read in subroutine deph'.,34x,8hecis-847/3x,69h for the toinpb-310
     6tal residual nucleus needed for the gamma giant resonance,,1x,8hecinpb-311
     7is-848/52h followed by the residual nucleus of each continuum:,21xinpb-312
     8,8hecis-849/6x,52h 1-10   scn(i,7) z:   charge of the compound nucinpb-313
     9leus,15x,8hecis-850/5x,67h 11-20   scn(i,1) sa:  level density parinpb-314
     aameter for s-wave resonance,1x,8hecis-851/27x,45h spacing. (defaulinpb-315
     bt option (.0091*(shell corr.,1x,8hecis-852/27x,40h -.23*nd)+.143)*inpb-316
     cna where na is the total,6x,8hecis-853/27x,44h number of nucleons,inpb-317
     d nd the minimum distance,2x,8hecis-854/27x,54h to a magic number finpb-318
     eor protons or neutrons andecis-855/27x,38h shell corrections are ginpb-319
     fiven by cook).,8x,8hecis-856/5x,66h 21-30   scn(i,2) ux:  matchinginpb-320
     g energy for the two density formula,2x,8hecis-857/27x,42h shifted inpb-321
     hby pairing energy. (default value,4x,8hecis-858/27x,13h 2.5+150/nainpb-322
     i).,33x,8hecis-859/5x,59h 31-40   scn(i,3) tau: nuclear temperatureinpb-323
     j. (default option,9x,8hecis-860)                                  inpb-324
      write (6,1044)                                                    inpb-325
 1044 format (27x,27h 1/tau=sqrt(sa/ux)-1.5/ux).,19x,8hecis-861/5x,62h 4inpb-326
     11-50   scn(i,4) sg:  spin cut off parameter. (default option,6x,8hinpb-327
     2ecis-862/27x,38h formula (11) of gilbert and cameron).,8x,8hecis-8inpb-328
     363/5x,76h 51-60   scn(i,5) e0:  energy shift. (default option forminpb-329
     4ula (28) ofecis-864/27x,22h gilbert and cameron).,24x,8hecis-865/5inpb-330
     5x,62h 61-70   scn(i,6) ex:  matching energy between the two densitinpb-331
     6y,6x,8hecis-866/27x,42h formulae. (default option ux+pairing with,inpb-332
     74x,8hecis-867/27x,23h pairing given by cook),23x,8hecis-868/73x,8hinpb-333
     8ecis-869/1h1,1x,65h note:  the dimensions of the array scn are ncoinpb-334
     9ns and 8. scn(i,j),6x,8hecis-870/2x,70h ****  can be searched for inpb-335
     aj=1 to 6. if scn(i,j) is 0., it is replaced,1x,8hecis-871/8x,61h binpb-336
     by the default option computed with the scn(i,k) for k<j. if,4x,8heinpb-337
     ccis-872/8x,59h scn(i,3) is negative, it is replaced by the defaultinpb-338
     d option,6x,8hecis-873/8x,64h computed with default options for sa inpb-339
     eand ux. after replacement,,1x,8hecis-874/8x,58h density parametersinpb-340
     f used for gammas are listed at the end.,7x,8hecis-875/9x,62h for ainpb-341
     g search, take into account that data for the gamma giant,2x,8hecisinpb-342
     h-876/8x,58h dipole resonance are stored after data for the continuinpb-343
     ium.,7x,8hecis-877/73x,8hecis-878)                                 inpb-344
      write (6,1045)                                                    inpb-345
 1045 format (73x,8hecis-879/30h cards read in subroutine deph,43x,8heciinpb-346
     1s-880/30h *****************************,43x,8hecis-881/73x,8hecis-inpb-347
     2882/54h number of observables by channel        format (14i5),19x,inpb-348
     38hecis-883/33h ********************************,40x,8hecis-884/4x,inpb-349
     477h (non-standard observables) only if lo(94)=.true. and lo(66)=.finpb-350
     5alse.,ecis-885/4x,50h otherwise go to 'restricted coulomb correctiinpb-351
     6ons'.,19x,8hecis-886/7x,57h 1- 5   number of observables for the einpb-352
     7lastic scattering.,9x,8hecis-887/7x,58h 6-10   number of observablinpb-353
     8es for the first excited state.,8x,8hecis-888/6x,60h 11-15   numbeinpb-354
     9r of observables for the second excited state.,7x,8hecis-889/6x,59inpb-355
     ah 16-20   number of observables for the third excited state.,8x,8hinpb-356
     becis-890/6x,20h 21-25   ...........,47x,8hecis-891/14x,39h up to tinpb-357
     che last channel (ncoll values).,20x,8hecis-892/73x,8hecis-893/23h inpb-358
     dfor each nuclear state,50x,8hecis-894/23h **********************,5inpb-359
     e0x,8hecis-895/73x,8hecis-896/54h observable identifications       inpb-360
     f       format (14i5),19x,8hecis-897/27h **************************inpb-361
     g,46x,8hecis-898/7x,65h 1- 5   first observable which must be the cinpb-362
     hross-section (enter a,1x,8hecis-899/14x,14h blank or 0) .,45x,8hecinpb-363
     iis-900/7x,26h 6-10   second observable.,40x,8hecis-901)           inpb-364
      write (6,1046)                                                    inpb-365
 1046 format (6x,26h 11-15   third observable.,41x,8hecis-902/6x,27h 16-inpb-366
     120   fourth observable.,40x,8hecis-903/6x,26h 21-25   fifth observinpb-367
     2able.,41x,8hecis-904/6x,20h 26-30   ...........,47x,8hecis-905/14xinpb-368
     3,27h up to the last observable.,32x,8hecis-906/73x,8hecis-907/3x,4inpb-369
     41h standard description  0   cross-section.,29x,8hecis-908/3x,78h inpb-370
     5********************  1   cross-section / rutherford's cross-sectiinpb-371
     6on.ecis-909/25x,28h 2   vector analyzing power.,20x,8hecis-910/6x,inpb-372
     727h 3     vector polarisation.,40x,8hecis-911/12x,60h (note a ratiinpb-373
     8o sqrt(2.) with it11 for spin 1/2 for 2 and 3).,1x,8hecis-912/6x,1inpb-374
     92h 4     t20 .,55x,8hecis-913/6x,12h 5     t21 .,55x,8hecis-914/6xinpb-375
     a,12h 6     t22 .,55x,8hecis-915/6x,63h 7     spin-flip :  (a(0000,inpb-376
     b0000)+a(1100,1100)+a(1100,1-100))/2,4x,8hecis-916/6x,65h 8     resinpb-377
     cerved for a set of experimental data which are reaction,2x,8hecis-inpb-378
     d917/17x,52h cross-sections. see 'cards read in subroutine lecd',4xinpb-379
     e,8hecis-918/4x,66h non standard description    enter a negative vainpb-380
     flue, different for,3x,8hecis-919/4x,67h ************************  inpb-381
     g  different observables. the description,2x,8hecis-920/32x,33h wilinpb-382
     hl be read in subroutine obse.,8x,8hecis-921/10x,45h cross-sectionsinpb-383
     i must be before polarisations.,18x,8hecis-922)                    inpb-384
      write (6,1047)                                                    inpb-385
 1047 format (73x,8hecis-923/54h plot indications                       inpb-386
     1 format (14i5),19x,8hecis-924/17h ****************,56x,8hecis-925/inpb-387
     27x,74h 1- 5   number of decades in logarithmic scales for cross-seinpb-388
     3ction.ecis-926/7x,41h 6-10   indication for second observable.,25xinpb-389
     4,8hecis-927/1h1,5x,41h 11-15   indication for third observable.,26inpb-390
     5x,8hecis-928/6x,28h 16-20   ...................,39x,8hecis-929/14xinpb-391
     6,27h up to the last observable.,32x,8hecis-930/6x,75h indications inpb-392
     7for polarisations are '1' for plot and '0' for no plotecis-931/73xinpb-393
     8,8hecis-932/6x,49h ******  end of do-loop for nuclear states *****inpb-394
     9*,18x,8hecis-933/73x,8hecis-934/54h restricted coulomb correctionsinpb-395
     a          format (14i5),19x,8hecis-935/31h ***********************inpb-396
     b*******,42x,8hecis-936/4x,60h if lo(44) and lo(46)=.true., otherwiinpb-397
     cse go to 'cards read in,9x,8hecis-937/2x,43h subroutine calx'.  foinpb-398
     dr each nuclear level:,28x,8hecis-938/10x,55h 1- 5   niv(i,j,3) betinpb-399
     eween level i and level j for j=1.,8x,8hecis-939/10x,55h 6-10   nivinpb-400
     f(i,j,3) between level i and level j for j=2.,8x,8hecis-940/9x,34h inpb-401
     g11-15   .........................,30x,8hecis-941/17x,51h enter '1'inpb-402
     h for coulomb correction and '0' for none.,5x,8hecis-942/73x,8hecisinpb-403
     i-943/4x,77h only values for j smaller than or equal to i are takeninpb-404
     j into account.ecis-944)                                           inpb-405
      write (6,1048)                                                    inpb-406
 1048 format (9x,28h there are ncoll such cards.,36x,8hecis-945/73x,8hecinpb-407
     1is-946/73x,8hecis-947/30h cards read in subroutine calx,43x,8hecisinpb-408
     2-948/30h *****************************,43x,8hecis-949/1x,80h only inpb-409
     3if lo(31)=.true., otherwise go to 'cards read in subroutine obse'.inpb-410
     4ecis-950/73x,8hecis-951/60h chi2 conditions                       inpb-411
     5  format (4i5,2f10.5),13x,8hecis-952/16h ***************,57x,8heciinpb-412
     6s-953/7x,47h 1- 5   ncolr  number of angular distributions.,19x,8hinpb-413
     7ecis-954/7x,46h 6-10   nrec   number of parameters in search.,20x,inpb-414
     88hecis-955/6x,65h 11-15   nfit   number of functions kept in the sinpb-415
     9earch beyond the,2x,8hecis-956/21x,33h minimum number which is nreinpb-416
     ac+1 .,19x,8hecis-957/6x,75h 16-20   nessai maximum number of evaluinpb-417
     bations. (default option 100)ecis-958/21x,43h this value is not useinpb-418
     cd when lo(34)=.true..,9x,8hecis-959/6x,51h 21-30   ech    search sinpb-419
     dcale. (default option 20.).,16x,8hecis-960/21x,50h in the prelimininpb-420
     eary runs, variables are changed by,2x,8hecis-961/21x,51h the produinpb-421
     fct of this number with their accuracy. in,1x,8hecis-962/21x,47h thinpb-422
     ge others runs, the change of any variable is,5x,8hecis-963/21x,29hinpb-423
     h limited by twice this value.,23x,8hecis-964/6x,66h 31-40   rap   inpb-424
     i ratio of increase for the search scale after a run,1x,8hecis-965)inpb-425
      write (6,1049)                                                    inpb-426
 1049 format (21x,50h for which the chi2 decreased. (default option 1.),inpb-427
     12x,8hecis-966/21x,51h the value of ech is the product by rap of thinpb-428
     2e last,1x,8hecis-967/21x,60h maximum change of parameter which gavinpb-429
     3e a lower chi2ecis-968/21x,49h the value 1 leads safely to the mininpb-430
     4imum. a value,3x,8hecis-969/21x,50h larger than 1. leads quicker tinpb-431
     5owards the minimum.,2x,8hecis-970/21x,39h a value less than 1. is inpb-432
     6replaced by 1.,13x,8hecis-971/73x,8hecis-972/73x,8hecis-973/30h cainpb-433
     7rds read in subroutine lecd,43x,8hecis-974/30h *******************inpb-434
     8**********,43x,8hecis-975/1x,80h only if ncolr is not 0, otherwiseinpb-435
     9 go to 'cards read in subroutine obse'ecis-976/73x,8hecis-977/30h inpb-436
     afor each angular distribution,43x,8hecis-978/30h *****************inpb-437
     b************,43x,8hecis-979/73x,8hecis-980/72h identification     inpb-438
     c                     format (l1,i1,i3,2i5,5x,3f10.5),1x,8hecis-981inpb-439
     d/15h **************,58x,8hecis-982/10x,57h 1   lx logical. if lx=.inpb-440
     etrue. the experimental errors are,6x,8hecis-983/14x,49h percentageinpb-441
     fs. lx is set .false. if the observable,10x,8hecis-984/14x,30h ideninpb-442
     gtification is not 0 or 1.,29x,8hecis-985/1h1,9x,71h 2   1 if the ainpb-443
     hngles are in the laboratory system, 0 otherwise.ecis-986/7x,30h 3-inpb-444
     i 5   nt   number of angles.,36x,8hecis-987)                       inpb-445
      write (6,1050)                                                    inpb-446
 1050 format (7x,36h 6-10   number of the nuclear state.,30x,8hecis-988/inpb-447
     16x,64h 11-15   observable identification. (see comments on 'observinpb-448
     2able,3x,8hecis-989/14x,53h identification' in 'cards read in subroinpb-449
     3utine deph').,6x,8hecis-990/6x,63h 21-30   weight of this observabinpb-450
     4le in chi2. (default option 1.),4x,8hecis-991/6x,64h 31-40   experinpb-451
     5imental normalisation of data. (default option 1.),3x,8hecis-992/6inpb-452
     6x,57h 41-50   error on experimental normalisation. (if 0., the,10xinpb-453
     7,8hecis-993/14x,25h normalisation is fixed).,34x,8hecis-994/73x,8hinpb-454
     8ecis-995/16x,52h if the normalisation is not fixed, the experimentinpb-455
     9al,5x,8hecis-996/14x,43h values and their errors are divided by thinpb-456
     ae,16x,8hecis-997/14x,58h 'renormalisation parameter', the square oinpb-457
     bf the difference,1x,8hecis-998/14x,58h between the experimental noinpb-458
     crmalisation and this parameter,1x,8hecis-999/14x,67h divided by thinpb-459
     de error on normalisation is added to the chi2ecis1000/14x,57h for inpb-460
     ethis observable. the 'experimental normalisation' is,2x,8hecis1001inpb-461
     f/14x,51h the value of the 'renormalisation parameter' which,8x,8heinpb-462
     gcis1002/14x,55h minimises the chi2. experimental values and errorsinpb-463
     h are,4x,8hecis1003/14x,15h divided by it.,44x,8hecis1004/73x,8heciinpb-464
     is1005/16x,51h if for two successives angular distributions, both,6inpb-465
     jx,8hecis1006)                                                     inpb-466
      write (6,1051)                                                    inpb-467
 1051 format (14x,48h cross-sections or polarisations, the 'errors on,11inpb-468
     1x,8hecis1007/14x,56h experimental normalisations' are non-0 and thinpb-469
     2e same and,3x,8hecis1008/14x,56h the two 'experimental normalisatiinpb-470
     3on' are identical, the,3x,8hecis1009/14x,54h renormalisation paraminpb-471
     4eters are the same for these two,5x,8hecis1010/14x,57h angular disinpb-472
     5tributions and one value is added to the chi2,2x,8hecis1011/14x,14inpb-473
     6h for each one.,45x,8hecis1012/73x,8hecis1013/2x,63h note:  if nt=inpb-474
     70, the angular distribution described here is not,8x,8hecis1014/2xinpb-475
     8,65h ****  experimentally separated from the following one. it caninpb-476
     9not,6x,8hecis1015/8x,61h happen for the last angular distribution inpb-477
     aand the observables,4x,8hecis1016/8x,54h must be of the same kind inpb-478
     b(if not, the program stops).,11x,8hecis1017/8x,64h the program stoinpb-479
     cps also if the channel number is too large or if,1x,8hecis1018/8x,inpb-480
     d48h the observable identification is larger than 8.,17x,8hecis1019inpb-481
     e/73x,8hecis1020/56h data card for each angle                formatinpb-482
     f (6f10.5),17x,8hecis1021/25h ************************,48x,8hecis10inpb-483
     g22/7x,25h 1-10   angle in degrees.,41x,8hecis1023/6x,28h 11-20   einpb-484
     hxperimental value.,39x,8hecis1024/6x,28h 21-30   experimental erroinpb-485
     ir.,39x,8hecis1025/6x,66h 31-40   width of detector. (if non 0.,thrinpb-486
     jee calculations are done,1x,8hecis1026)                           inpb-487
      write (6,1052)                                                    inpb-488
 1052 format (14x,53h at the experimental angle and at plus and minus thinpb-489
     1is,6x,8hecis1027/14x,53h width, the calculated value will be the minpb-490
     2ean value).,6x,8hecis1028/6x,75h 41-50   angular error. (if non 0.inpb-491
     3 and the width of detector non 0.ecis1029/14x,57h the experimentalinpb-492
     4 error is increased to take into account,2x,8hecis1030/14x,36h theinpb-493
     5 slope of the calculated curve).,23x,8hecis1031/73x,8hecis1032/2x,inpb-494
     670h note:  if the observable identification is 8, the set of experinpb-495
     7imental,1x,8hecis1033/2x,70h ****  values are total cross-sectionsinpb-496
     8 of which the channel is read in,1x,8hecis1034/8x,63h floating valinpb-497
     9ue instead of the angle. for channel 0., it is the,2x,8hecis1035/8inpb-498
     ax,58h total reaction cross-section, not taking into account the,7xinpb-499
     b,8hecis1036/8x,53h coulomb scattering. for channel -1., it is the inpb-500
     ctotal,12x,8hecis1037/8x,63h cross-section as defined for neutrons.inpb-501
     d weight and experimental,2x,8hecis1038/8x,38h normalisation are tainpb-502
     eken into account.,27x,8hecis1039/73x,8hecis1040/73x,8hecis1041/73xinpb-503
     f,8hecis1042/73x,8hecis1043/1h1,29hcards read in subroutine calx,43inpb-504
     gx,8hecis1044/30h *****************************,43x,8hecis1045/1x,7inpb-505
     h1h only if lo(32)=.true. and neither ncolr and nrec is 0, otherwisinpb-506
     ie go to,1x,8hecis1046)                                            inpb-507
      write (6,1053)                                                    inpb-508
 1053 format (1x,33h 'cards read in subroutine obse'.,39x,8hecis1047/73xinpb-509
     1,8hecis1048/56h search accuracies                       format (7finpb-510
     210.3),17x,8hecis1049/18h *****************,55x,8hecis1050/7x,47h 1inpb-511
     3-10   search accuracy for the first variable.,19x,8hecis1051/6x,49inpb-512
     4h 11-20   search accuracy for the second variable.,18x,8hecis1052/inpb-513
     56x,48h 21-30   search accuracy for the third variable.,19x,8hecis1inpb-514
     6053/6x,29h 31-40   ....................,38x,8hecis1054/14x,19h up inpb-515
     7to nrec values.,40x,8hecis1055/73x,8hecis1056/6x,63h the search acinpb-516
     8curacies cannot be 0..there is no default option.,4x,8hecis1057/2xinpb-517
     9,79h they refer to values used in the program as real radii or definpb-518
     aormationsecis1058/2x,24h changed for heavy ions.,47x,8hecis1059/73inpb-519
     bx,8hecis1060/54h indices of variables                    format (1inpb-520
     c4i5),19x,8hecis1061/21h ********************,52x,8hecis1062/7x,36hinpb-521
     d 1- 5   index of the first variable.,30x,8hecis1063/7x,37h 6-10   inpb-522
     eindex of the second variable.,29x,8hecis1064/6x,37h 11-15   index inpb-523
     fof the third variable.,30x,8hecis1065/6x,29h 16-20   .............inpb-524
     g.......,38x,8hecis1066/14x,19h up to nrec values.,40x,8hecis1067/7inpb-525
     h3x,8hecis1068/4x,22h index specifications:,47x,8hecis1069/4x,22h *inpb-526
     i********************,47x,8hecis1070)                              inpb-527
      write (6,1054)                                                    inpb-528
 1054 format (7x,74h 1-1000   optical model and folding parameters val(iinpb-529
     1).(see, above,ecis1071/16x,52h optical potential parameters). possinpb-530
     2ible values 1 to,5x,8hecis1072/16x,65h 34*npp. parameters of exterinpb-531
     3nal form factors in the orderecis1073/16x,56h defined when they arinpb-532
     4e read. only floating values can be,1x,8hecis1074/16x,54h in searcinpb-533
     5h possible values 1 to 1000. above, add 9000.,3x,8hecis1075/16x,56inpb-534
     6h choosing search accuracies, note that reduced radii are,1x,8heciinpb-535
     7s1076/16x,25h not used but only radii.,32x,8hecis1077/4x,77h 1001-inpb-536
     82000   deformations for a given potential. possible values 1001eciinpb-537
     9s1078/16x,56h to 1008.(not the angles of asymmetric rotational modinpb-538
     ael),1x,8hecis1079/4x,77h 2001-3000   deformations for a given multinpb-539
     bipole. possible values 2001ecis1080/16x,55h to 2000+nbet where nbeinpb-540
     ct is the total number of phonons,2x,8hecis1081/16x,42h and deformainpb-541
     dtions as listed in the output.,15x,8hecis1082/4x,66h 3001-4000   iinpb-542
     endividual deformation. (the unit of the index is the,3x,8hecis1083inpb-543
     f/16x,65h potential, the tenth is the deformation). possible valueeinpb-544
     gcis1084/16x,55h 3001 to 3000 + 10*nbet with nbet defined above. vainpb-545
     hlues,2x,8hecis1085/16x,53h as 3xx9 and 3xx0 are excluded. note thainpb-546
     it deformation,4x,8hecis1086)                                      inpb-547
      write (6,1055)                                                    inpb-548
 1055 format (16x,48h lengths are used in the search if lo(6)=.true..,9xinpb-549
     1,8hecis1087/4x,63h 4001-5000   nuclear model parameters. (in the oinpb-550
     2rder of input).,6x,8hecis1088/4x,77h 5001-6000   reduced nuclear minpb-551
     3atrix elements. (order of input if theyecis1089/16x,55h are read oinpb-552
     4n cards, or order of computation as listed).,2x,8hecis1090/4x,77h inpb-553
     56001-7000   spin-orbit parametrisation, hauser-feshbach correctioninpb-554
     6s.ecis1091/16x,54h and compound nucleus parameters. possible valueinpb-555
     7s are:,3x,8hecis1092/16x,42h 6001-6006 for spin-orbit parametrisatinpb-556
     8ion,,15x,8hecis1093/16x,43h 6007-6009 for hauser-feshbach correctiinpb-557
     9ons,,14x,8hecis1094/16x,49h 6010-6014 for giant dipole resonance pinpb-558
     aarameters,,8x,8hecis1095/16x,56h 6015-6014+6*ncons for level densiinpb-559
     bty parameters in order,1x,8hecis1096/16x,23h given by scn(ncons,6)inpb-560
     c.,34x,8hecis1097/3x,69h 10001-99999  to continue 1-1000 when thereinpb-561
     d are more than 1000 values,1x,8hecis1098/16x,50h with external forinpb-562
     em factors. use the number of the,7x,8hecis1099/16x,27h listing incinpb-563
     freased by 9000.,30x,8hecis1100/73x,8hecis1101/1h1,1x,79h note:  aninpb-564
     gy negative number -k in the card above means that k variablesecis1inpb-565
     h102/2x,70h ****  will be kept proportional in the search. this valinpb-566
     iue is replaced,1x,8hecis1103)                                     inpb-567
      return                                                            inpb-568
      end                                                               inpb-569
c 18/12/95  ibm and cdc version                                 ecis95  inpc-000
      subroutine inpc                                                   inpc-001
      write (6,1056)                                                    inpc-002
 1056 format (8x,60h by -*address where k followed by k indices of paraminpc-003
     1eters is,5x,8hecis1104/8x,7h stored,58x,8hecis1105/73x,8hecis1106/inpc-004
     254h links between variables                 format (14i5),19x,8hecinpc-005
     3is1107/24h ***********************,49x,8hecis1108/4x,51h for everyinpc-006
     4 negative value -k in the preceding card:,18x,8hecis1109/7x,36h 1-inpc-007
     5 5   index of the first variable.,30x,8hecis1110/7x,37h 6-10   indinpc-008
     6ex of the second variable.,29x,8hecis1111/6x,37h 11-15   index of inpc-009
     7the third variable.,30x,8hecis1112/6x,27h 16-20   ................inpc-010
     8..,40x,8hecis1113/14x,17h up to k indices.,42x,8hecis1114/73x,8hecinpc-011
     9is1115/73x,8hecis1116/30h cards read in subroutine obse,43x,8hecisinpc-012
     a1117/30h *****************************,43x,8hecis1118/1x,71h only inpc-013
     bif there is any non standard observable (identified by a negative,inpc-014
     c1x,8hecis1119/1x,58h number), otherwise go to 'cards read in subroinpc-015
     dutine redm'.,14x,8hecis1120/73x,8hecis1121/33h for each non standainpc-016
     erd observable,40x,8hecis1122/33h ********************************,inpc-017
     f40x,8hecis1123/73x,8hecis1124/66h definition and name             inpc-018
     g        format (2l1,i1,i2,i5,5a4),7x,8hecis1125/20h **************inpc-019
     h*****,53x,8hecis1126/10x,52h 1   lt1  't' for an observable defineinpc-020
     id with an axis,11x,8hecis1127)                                    inpc-021
      write (6,1057)                                                    inpc-022
 1057 format (19x,53h perpendicular to the reaction plane. the descriptiinpc-023
     1on,1x,8hecis1128/19x,50h is changed by a rotation r(pi/2,pi/2,pi/2inpc-024
     2) to the,4x,8hecis1129/19x,53h definition with respect to the direinpc-025
     3ction of particle,1x,8hecis1130/19x,47h (helicity). use a blank foinpc-026
     4r the usual helicity,7x,8hecis1131/19x,13h description.,41x,8hecisinpc-027
     51132/10x,60h 2   lt2  't' if the observable is not completely defiinpc-028
     6ned by,3x,8hecis1133/19x,43h tensors. see note below 'quantum numbinpc-029
     7ers'.,11x,8hecis1134/10x,60h 3   blank or 0 for observable in the inpc-030
     8center of mass system.,3x,8hecis1135/14x,52h 1          for observinpc-031
     9able in the laboratory system.,7x,8hecis1136/14x,54h 2          foinpc-032
     ar observable defined with respect to the,5x,8hecis1137/30x,15h incinpc-033
     bident beam.,28x,8hecis1138/7x,62h 4- 5   kx   positive number, ideinpc-034
     cntification of the observable,4x,8hecis1139/19x,15h read with -kx.inpc-035
     d,39x,8hecis1140/7x,53h 6-10   k    number of components of the desinpc-036
     ecription.,13x,8hecis1141/6x,65h 11-30   name of the observable whiinpc-037
     fch will be used in the output.,2x,8hecis1142/73x,8hecis1143/53h quinpc-038
     gantum numbers                         format (8i5),20x,8hecis1144/inpc-039
     h16h ***************,57x,8hecis1145/7x,46h 1- 5   tensor order of tinpc-040
     ihe incoming particle.,20x,8hecis1146)                             inpc-041
      write (6,1058)                                                    inpc-042
 1058 format (7x,40h 6-10   related magnetic quantum number.,26x,8hecis1inpc-043
     1147/6x,45h 11-15   tensor order of the initial nucleus.,22x,8hecisinpc-044
     21148/6x,41h 16-20   related magnetic quantum number.,26x,8hecis114inpc-045
     39/6x,47h 21-25   tensor order of the outgoing particle.,20x,8hecisinpc-046
     41150/6x,32h 26-30   related quantum number.,35x,8hecis1151/6x,43h inpc-047
     531-35   tensor order of the final nucleus.,24x,8hecis1152/6x,32h 3inpc-048
     66-40   related quantum number.,35x,8hecis1153/4x,24h there are k sinpc-049
     7uch cards.,45x,8hecis1154/73x,8hecis1155/2x,67h note:  if lt2=.truinpc-050
     8e., some couples (tensor order, magnetic quantum,4x,8hecis1156/2x,inpc-051
     979h ****  number) can be replaced by non tensor notation (mi, mf).inpc-052
     a in thisecis1157/8x,64h case, use (mi-s-1) and (mf-s-1) where s isinpc-053
     b the spin of particle,1x,8hecis1158/8x,11h or target.,54x,8hecis11inpc-054
     c59/1h1,55hcoefficients of components              format (6f10.5),inpc-055
     d17x,8hecis1160/27h **************************,46x,8hecis1161/7x,43inpc-056
     eh 1-10   coefficient of the first component.,23x,8hecis1162/6x,45hinpc-057
     f 11-20   coefficient of the second component.,22x,8hecis1163/6x,28inpc-058
     gh 21-30   ...................,39x,8hecis1164/14x,16h up to k valueinpc-059
     hs.,43x,8hecis1165/73x,8hecis1166/56h imaginary part of coefficientinpc-060
     is          format (6f10.5),17x,8hecis1167)                        inpc-061
      write (6,1059)                                                    inpc-062
 1059 format (31h ******************************,42x,8hecis1168/1x,67h oinpc-063
     1nly if lt1=.true. or lt2=.true., otherwise go to next observable.,inpc-064
     25x,8hecis1169/7x,47h 1-10   imaginary part for the first componentinpc-065
     3.,19x,8hecis1170/6x,49h 11-20   imaginary part for the second compinpc-066
     4onent.,18x,8hecis1171/6x,29h 21-30   ....................,38x,8hecinpc-067
     5is1172/14x,16h up to k values.,43x,8hecis1173/73x,8hecis1174/2x,79inpc-068
     6h note:  the quantum numbers are checked and errors can stop the pinpc-069
     7rogramecis1175/2x,70h ****  (too large magnetic quantum numbers, ninpc-070
     8egative tensor order, odd,1x,8hecis1176/8x,64h sum of magnetic quainpc-071
     9ntum numbers for observable defined with the,1x,8hecis1177/8x,43h inpc-072
     aaxis perpendicular to the reaction plane).,22x,8hecis1178/9x,42h tinpc-073
     bhe observables can be read in any order.,22x,8hecis1179/73x,8hecisinpc-074
     c1180/73x,8hecis1181/30h cards read in subroutine redm,43x,8hecis11inpc-075
     d82/31h ******************************,42x,8hecis1183/6x,65h if lo(inpc-076
     e7)=.true. or lo(15)=.true.. otherwise go to 'cards read in,2x,8hecinpc-077
     fis1184/3x,18h subroutine eval'.,52x,8hecis1185/6x,56h in the subroinpc-078
     gutine redm, there is the following do loop:,11x,8hecis1186/10x,17hinpc-079
     h do 16 i1=1,ncoll,46x,8hecis1187/10x,18h do 15 i2=i1,ncoll,45x,8heinpc-080
     icis1188/10x,10h .........,53x,8hecis1189)                         inpc-081
      write (6,1060)                                                    inpc-082
 1060 format (7x,12h 15 continue,54x,8hecis1190/7x,12h 16 continue,54x,8inpc-083
     1hecis1191/6x,27h inside which must be read:,40x,8hecis1192/73x,8heinpc-084
     2cis1193/53h loop control and number card            format (3i5),2inpc-085
     30x,8hecis1194/29h ****************************,44x,8hecis1195/7x,7inpc-086
     44h 1- 5   j1 which must be equal to i1. (if not the run is stoppedinpc-087
     5).ecis1196/7x,74h 6-10   j2 which must be equal to i2. (if not theinpc-088
     6 run is stopped).ecis1197/6x,54h 11-15   k  number of reduced nuclinpc-089
     7ear matrix elements.,13x,8hecis1198/73x,8hecis1199/3x,15h if k is inpc-090
     8not 0:,55x,8hecis1200/60h reduced nuclear matrix elements         inpc-091
     9format (4i5,f20.12),13x,8hecis1201/32h ***************************inpc-092
     a****,41x,8hecis1202/7x,35h 1- 5   form factor identification.,31x,inpc-093
     b8hecis1203/7x,60h 6-10   multipolarity. (if triangular relation  oinpc-094
     cr parity is,6x,8hecis1204/18x,48h transgressed the run is stopped)inpc-095
     d. enter l for a,7x,8hecis1205/18x,39h magnetic multipole transitioinpc-096
     en bm(l-1).,16x,8hecis1206/6x,65h 11-15   2*s where s is the transfinpc-097
     fer of spin. s can be not 0 even,2x,8hecis1207/18x,53h if lo(7)=.fainpc-098
     glse. (if lo(7)=.true. the run is stopped,2x,8hecis1208/18x,44h wheinpc-099
     hn triangular relation is not fulfilled).,11x,8hecis1209/14x,55h ininpc-100
     idication for existence of magnetic multipole coulomb,4x,8hecis1210inpc-101
     j)                                                                 inpc-102
      write (6,1061)                                                    inpc-103
 1061 format (18x,50h form factor for the target, with s=0: enter '-1'.,inpc-104
     15x,8hecis1211/18x,44h this form factor includes no central and no,inpc-105
     211x,8hecis1212/18x,25h spin-orbit contribution.,30x,8hecis1213/6x,inpc-106
     363h 16-20   2*j where j is the transfer of total spin if the valueinpc-107
     4,4x,8hecis1214/18x,51h given for 2*s is not '0' or '-1'. in this cinpc-108
     5ase the,4x,8hecis1215/18x,52h calculation is stopped if there is ninpc-109
     6ot a triangular,3x,8hecis1216/18x,29h relation between l, s and j.inpc-110
     7,26x,8hecis1217/1h1,13x,58h indication for existence of an associainpc-111
     8ted spin-orbit form,1x,8hecis1218/18x,51h factor when 2*s is '0': inpc-112
     9enter '1' if there is one,,4x,8hecis1219/18x,33h '0' or a blank ifinpc-113
     a there is none.,22x,8hecis1220/6x,62h 21-40   value. the ratio betinpc-114
     bween a magnetic multipole coulomb,5x,8hecis1221/18x,48h excitationinpc-115
     c bm(l-1) and an electric one be(l) is,7x,8hecis1222/18x,51h sqrt(binpc-116
     dm(l-1)/be(l)) (sqrt(.01106*bm(l-1)/be(l)) if,4x,8hecis1223/18x,51hinpc-117
     e bm(l-1) is expressed in nuclear magnetons squares.,4x,8hecis1224/inpc-118
     f73x,8hecis1225/8x,24h there are k such cards.,41x,8hecis1226/73x,8inpc-119
     ghecis1227/4x,27h form factor identification,42x,8hecis1228/4x,27h inpc-120
     h**************************,42x,8hecis1229/6x,59h for anharmonic viinpc-121
     ibrational model: the order of derivative.,8x,8hecis1230)          inpc-122
      write (6,1062)                                                    inpc-123
 1062 format (13x,15h (from 0 to 3).,45x,8hecis1231/6x,32h for harmonic inpc-124
     1vibrational model:,35x,8hecis1232/13x,58h first order:  k1, numberinpc-125
     2 of the phonon is order of input.,2x,8hecis1233/13x,54h second ordinpc-126
     3er: k1+k2*(nbt1+1)  where k1 and k2 are the,6x,8hecis1234/17x,53h inpc-127
     4number of the phonons in the order of input, with k2,3x,8hecis1235inpc-128
     5/17x,53h larger than k1 and nbt1 the total number of phonons.,3x,8inpc-129
     6hecis1236/73x,8hecis1237/6x,65h for symmetric rotational model: 1+inpc-130
     7l where l is the multipolarity,2x,8hecis1238/13x,50h multiplied byinpc-131
     8 1000 plus the identification of the,10x,8hecis1239/13x,51h vibratinpc-132
     9ional band as in harmonic vibrational model.,9x,8hecis1240/13x,58hinpc-133
     a a l=0 or l=1 vibration term generate a monopole or dipole,2x,8hecinpc-134
     bis1241/13x,17h correction term.,43x,8hecis1242/6x,64h for asymmetrinpc-135
     cic rotational model: defined as 1000* the 'order of,3x,8hecis1243/inpc-136
     d13x,57h deformation'. (see 'deformations of rotational models').,3inpc-137
     ex,8hecis1244/73x,8hecis1245/6x,66h for external form factor model:inpc-138
     f if the form factor identification,1x,8hecis1246/13x,59h is blank inpc-139
     gor zero, an identification is defined in sequence,1x,8hecis1247/13inpc-140
     hx,59h a negative value indicates that there is a correction term,1inpc-141
     ix,8hecis1248/13x,68h to be added in such a way that the integral oinpc-142
     jf the sum withecis1249)                                           inpc-143
      write (6,1063)                                                    inpc-144
 1063 format (13x,59h r**(l+2) vanishes (l being the angular momentum reinpc-145
     1lated to,1x,8hecis1250/13x,68h this form factor). if the form factinpc-146
     2or identification is nonecis1251/13x,59h zero, its absolute value inpc-147
     3must be in sequence or refer to a,1x,8hecis1252/13x,48h form factoinpc-148
     4r already defined with the same sign.,12x,8hecis1253/73x,8hecis125inpc-149
     54/2x,69h note on reduced matrix elements:  the spin angular descriinpc-150
     6ption for a,2x,8hecis1255/2x,70h ******************************** inpc-151
     7 partial wave with total spin jj and,1x,8hecis1256/2x,70h with quainpc-152
     8ntum numbers l1 and j1 for the particle, i1 for the target is,1x,8inpc-153
     9hecis1257/2x,66h ((i**l1*y(l1) , s1)j1 ,i1)jj. the interaction forinpc-154
     a the transfer of,5x,8hecis1258/2x,65h angular momentum l, of spin inpc-155
     bs and of total spin j, is the scalar,6x,8hecis1259/2x,70h product inpc-156
     cof a tensor operator q(j)nuclear for the target by the tensor,1x,8inpc-157
     dhecis1260/2x,52h product of (i**l*y(l) , q(s)par)j for the particlinpc-158
     ee.,19x,8hecis1261/4x,56h (((l2,s2)j2,i2)jj|(q(l),q(s))j.q(j)|((l1,inpc-159
     fs1)j1,i1)jj) =,13x,8hecis1262/2x,62h (-)**(jj+i2+j1+(l1+l2+l)/2)) inpc-160
     g* c9j(l2,l1,l,s2,s1,s,j2,j1,j) *,9x,8hecis1263/2x,65h c6j(j2,j,j1,inpc-161
     hi1,jj,i2) * c3j(l1,l,l2,0,0,0) * sqrt((2j+1)*(2l+1)*,6x,8hecis1264inpc-162
     i/2x,69h (2s+1)(2l1+1)*(2l2+1)*(2j1+1)*(2j2+1)) /computed in subrouinpc-163
     jtine quan/,2x,8hecis1265)                                         inpc-164
      write (6,1064)                                                    inpc-165
 1064 format (2x,68h * (s2||q(s)||s1)/(2s+1) * (i2||q(j)||i1) * (4*pi)**inpc-166
     1(-1/2) /which is,3x,8hecis1266/2x,68h the reduced nuclear matrix einpc-167
     2lement read here, except for the square,3x,8hecis1267/2x,41h root inpc-168
     3which is included in form factors/.,30x,8hecis1268/4x,68h this matinpc-169
     4rix element is real and symmetric when the 'reduced nuclear,1x,8heinpc-170
     5cis1269/2x,61h matrix element' is such that  (s2,i2 || q(s) q(j) |inpc-171
     6|s1,i1) =,10x,8hecis1270/2x,70h (-)**(i2+s2-i1-s1+s+j) * (s1,i1 ||inpc-172
     7 q(s) q(j) ||s2,i2). in macroscopic,1x,8hecis1271/2x,70h models, sinpc-173
     8=0 and the phase becomes (-)**(i2-i1)*(product of parities).,1x,8hinpc-174
     9ecis1272/4x,65h a factor i**(-l) must be taken into account in theinpc-175
     a definition of,4x,8hecis1273/2x,65h q(j)nuclear and a phase i intrinpc-176
     boduced for negative parity states.,6x,8hecis1274/4x,68h when s=0, inpc-177
     c(s2|| ||s1) = sqrt(2*s1+1) is computed in subroutine quan,1x,8heciinpc-178
     ds1275/1h1,3x,68h the factor (2s+1) introduced in quan to use the sinpc-179
     eame reduced matrix,1x,8hecis1276/2x,48h element when target and painpc-180
     frticle are exchanged.,23x,8hecis1277/4x,77h for a magnetic multipoinpc-181
     gle coulomb transition bm(l-1), the form factorecis1278/2x,64h is tinpc-182
     hhe one of an electric multipole transition be(l) divided by,7x,8heinpc-183
     icis1279/2x,69h mr(m*c/hbar)**2, where m and mr and mp are atomic ainpc-184
     jnd reduced masses,2x,8hecis1280)                                  inpc-185
      write (6,1065)                                                    inpc-186
 1065 format (2x,14h respectively.,57x,8hecis1281/73x,8hecis1282/73x,8heinpc-187
     1cis1283/30h cards read in subroutine extp,43x,8hecis1284/30h *****inpc-188
     2************************,43x,8hecis1285/2x,67h if (lo(7)=.true., oinpc-189
     3therwise go to 'cards read in subroutine eval'.,4x,8hecis1286/2x,2inpc-190
     49h not allowed if lo(99)=.true.,42x,8hecis1287/73x,8hecis1288/54h inpc-191
     5identification                          format (12i5),19x,8hecis12inpc-192
     689/15h **************,58x,8hecis1290/7x,22h 1- 5   l1    level i.,inpc-193
     744x,8hecis1291/7x,23h 6-10   l2    level ip.,43x,8hecis1292/6x,65hinpc-194
     8 11-15   ml    sequence number of the form factor in the table of,inpc-195
     92x,8hecis1293/20x,52h reduced nuclear matrix elements between leveinpc-196
     al i and,1x,8hecis1294/20x,47h level ip. it must be 0 for potentialinpc-197
     bs. use the,6x,8hecis1295/20x,51h value -ml to enter the correctioninpc-198
     c term to the form,2x,8hecis1296/20x,21h factor read with ml.,32x,8inpc-199
     dhecis1297/6x,50h 16-20   ityp =  1 real volume or scalar potentialinpc-200
     e,17x,8hecis1298/22x,39h 2 imaginary volume or scalar potential,12xinpc-201
     f,8hecis1299/22x,35h 3 real surface or vector potential,16x,8hecis1inpc-202
     g300/22x,40h 4 imaginary surface or vector potential,11x,8hecis1301inpc-203
     h/22x,38h 5 real spin-orbit or tensor potential,13x,8hecis1302/22x,inpc-204
     i43h 6 imaginary spin-orbit or tensor potential,8x,8hecis1303)     inpc-205
      write (6,1066)                                                    inpc-206
 1066 format (22x,20h 7 coulomb potential,31x,8hecis1304/22x,31h 8 couloinpc-207
     1mb spin-orbit potential,20x,8hecis1305/6x,65h 21-25   l1x   non poinpc-208
     2sitive or l1 of the form factor to be copied,2x,8hecis1306/20x,18hinpc-209
     3 into the new one.,35x,8hecis1307/6x,63h 26-30   l2x   l2 of the finpc-210
     4orm factor to be copied if l1x is not,4x,8hecis1308/20x,10h positiinpc-211
     5ve.,43x,8hecis1309/6x,50h 31-35   mlx   same for ml if l1x is not inpc-212
     6positive.,17x,8hecis1310/6x,66h 36-40   itypx same for ityp if l1xinpc-213
     7 is not positive, must be equal,1x,8hecis1311/20x,9h to ityp.,44x,inpc-214
     88hecis1312/20x,51h negative number for standard form factors with inpc-215
     9non,2x,8hecis1313/20x,40h positive value of l1x in columns 21-30:,inpc-216
     a13x,8hecis1314/24x,27h -1  woods-saxon potential.,22x,8hecis1315/2inpc-217
     b4x,47h -2  first derivative of woods-saxon potential.,2x,8hecis131inpc-218
     c6/24x,48h -3  second derivative of woods-saxon potential.,1x,8heciinpc-219
     ds1317/24x,47h -4  third derivative of woods-saxon potential.,2x,8hinpc-220
     eecis1318/12x,69h (the n th derivative is always divided by fact(n)inpc-221
     f*sqrt(4*pi)ecis1319/17x,46h and multiplied by r**n only if lo(6)=.inpc-222
     gfalse.),10x,8hecis1320/24x,36h -5  deformed woods-saxon potential.inpc-223
     h,13x,8hecis1321/24x,57h -6  derivative of deformed woods-saxon potinpc-224
     ientialecis1322/24x,25h -7  laguerre polynomial.,24x,8hecis1323)   inpc-225
      write (6,1067)                                                    inpc-226
 1067 format (24x,44h -8  solution in real woods-saxon potential.,5x,8heinpc-227
     1cis1324/24x,21h -9  bessel expansion,28x,8hecis1325/20x,61h (see binpc-228
     2elow 'special meaning of l1x, l2x and mlx ..')ecis1326/6x,62h 41-4inpc-229
     35   nst   channel of which the step size is used (default,5x,8heciinpc-230
     4s1327/20x,47h value: the channel which uses it for a central,6x,8hinpc-231
     5ecis1328/20x,52h potential, 1 for a transition potential). if nst inpc-232
     6is,1x,8hecis1329/20x,61h negative for a standard form factor with inpc-233
     7itypx=-1 toecis1330/20x,47h itypx=-6, use of a reduced radius, takinpc-234
     8ing into,6x,8hecis1331/20x,48h account lo(16) (heavy-ion definitioinpc-235
     9n) and lo(6),5x,8hecis1332/20x,30h (use of deformation lengths).,2inpc-236
     a3x,8hecis1333/1h1,5x,64h 46-50   nfold 0 for no folding or addressinpc-237
     b of folding parameters,3x,8hecis1334/20x,61h in their list read beinpc-238
     clow. nfold can be different forecis1335/20x,51h a copied form factinpc-239
     dor and allows the folding with a,2x,8hecis1336/20x,47h different minpc-240
     eultipolarity. it can be used with a,6x,8hecis1337/20x,29h form facinpc-241
     ftor given by points.,24x,8hecis1338/6x,66h 51-55   nint  if not 0,inpc-242
     g the strength is the integral of this form,1x,8hecis1339/20x,61h finpc-243
     hactor with r**(l+2) where l is the relevant angularecis1340/20x,47inpc-244
     ih momentum. when nint, is a positive number, the,6x,8hecis1341)   inpc-245
      write (6,1068)                                                    inpc-246
 1068 format (20x,47h integral with r**(l+1) has to be given; with a,6x,inpc-247
     18hecis1342/20x,61h negative integer, the usual strength has to be inpc-248
     2givenecis1343/20x,46h and is replaced by this integral at its firsinpc-249
     3t,7x,8hecis1344/20x,50h calculation. for spin-orbit potentials, itinpc-250
     4 is the,3x,8hecis1345/20x,61h integral of the form factor without inpc-251
     5derivation. thisecis1346/20x,49h strength is of the same sign as tinpc-252
     6he depth of the,4x,8hecis1347/20x,51h standard description. for coinpc-253
     7ulomb potentials, this,2x,8hecis1348/20x,41h strength is the last inpc-254
     8value multiplied by,12x,8hecis1349/20x,52h (2*l+1)*r**(l+1)/1.4399inpc-255
     98 . if nst is negative for a,1x,8hecis1350/20x,61h form factor copinpc-256
     aied, input of a multiplication factorecis1351/20x,14h in next cardinpc-257
     b.,39x,8hecis1352/73x,8hecis1353/81h meaning of l1x, l2x and mlx foinpc-258
     cr negative values of itypx (columns 36-40)ecis1354/81h ***********inpc-259
     d*************************************************************ecis1inpc-260
     e355/6x,75h 21-25   l1x   -l1x is the magnetic quantum number of thinpc-261
     fe vibrationecis1356/20x,15h when itypx=-6.,38x,8hecis1357/20x,48h inpc-262
     g-l1x is the number of nodes when itypx=-7 or -8,5x,8hecis1358/20x,inpc-263
     h33h (used only when mlx=0 or mlx=1).,20x,8hecis1359/20x,52h -l1x iinpc-264
     is the order of derivation of bessel functions,1x,8hecis1360)      inpc-265
      write (6,1069)                                                    inpc-266
 1069 format (20x,15h when itypx=-9.,38x,8hecis1361/6x,58h 26-30   l2x  inpc-267
     1 number of deformations when itypx=-5 or -6.,9x,8hecis1362/20x,51hinpc-268
     2 a division factor for the steps in computing bound,2x,8hecis1363/inpc-269
     320x,42h function (default value 4) when itypx=-8.,11x,8hecis1364/2inpc-270
     40x,42h number of bessel functions when itypx=-9.,11x,8hecis1365/6xinpc-271
     5,63h 31-35   mlx   angular momentum of the vibration when itypx=-6inpc-272
     6.,4x,8hecis1366/20x,47h number of bound functions when itypx=-7 orinpc-273
     7 -8:,6x,8hecis1367/20x,61h =0 or 1 for one function with the quantinpc-274
     8um numbers ofecis1368/31x,16h the transition,,26x,8hecis1369/20x,4inpc-275
     92h =2 for two functions with the same itypx,,11x,8hecis1370/20x,51inpc-276
     ah =3 when itypx=-8 for a laguerre polynomial for the,2x,8hecis1371inpc-277
     b/31x,17h second function.,25x,8hecis1372/20x,51h l-value of besselinpc-278
     c functions when itypx=-9 (default,2x,8hecis1373/20x,51h option: aninpc-279
     dgular momentum of the form factor, enter,2x,8hecis1374/20x,28h a ninpc-280
     eegative value to use 0).,25x,8hecis1375/2x,38h errors in this cardinpc-281
     f stop the program.,33x,8hecis1376/73x,8hecis1377/2x,69h note:  if inpc-282
     gthere is no spin for the particle in all the channels, the,2x,8hecinpc-283
     his1378/2x,67h ****  spin-orbit potentials (ityp = 5 , 6 and 8) areinpc-284
     i not read, but,4x,8hecis1379)                                     inpc-285
      write (6,1070)                                                    inpc-286
 1070 format (8x,60h they are required as soon as there is at least a noinpc-287
     1n spin-0,5x,8hecis1380/8x,60h particle at least for one level. forinpc-288
     2 the transitions with a,5x,8hecis1381/8x,61h transfer of spin s whinpc-289
     3ich is not zero there are no spin-orbit,4x,8hecis1382/8x,59h poteninpc-290
     4tials (no tensor term in dirac formalism). there is a,6x,8hecis138inpc-291
     53/8x,59h coulomb potential for integral spin transfer even for l=0inpc-292
     6.,6x,8hecis1384/9x,61h volume and surface potentials are read sepainpc-293
     7rately except for,3x,8hecis1385/8x,62h itypx=-7 and -8. in the dirinpc-294
     8ac formalism itypx=-7 and itypx=-8,3x,8hecis1386/8x,59h cannot be inpc-295
     9used. for magnetic coulomb interaction, only the,6x,8hecis1387/8x,inpc-296
     a64h coulomb potential is read. the form factors with itypx=-5 to -inpc-297
     b9,1x,8hecis1388/8x,73h can be copied only if they involve the sameinpc-298
     c multipolarity. thereecis1389/8x,63h is no limitation for itypx=-7inpc-299
     d and -8 if they involve two bound,2x,8hecis1390/8x,62h functions. inpc-300
     ethe copied form factors can be folded differently.,3x,8hecis1391/1inpc-301
     fh1,48h allowed values of itypx for standard potentials,24x,8hecis1inpc-302
     g392/1x,48h ***********************************************,24x,8heinpc-303
     hcis1393/1x,18h *** ml = 0 ******,54x,8hecis1394/1x,62h itypx =    inpc-304
     i-1    -2    -3    -4    -5    -6    -7    -8    -9,10x,8hecis1395)inpc-305
      write (6,1071)                                                    inpc-306
 1071 format (1x,62h ityp = 1   yes   no    no    no    yes   no    no  inpc-307
     1  no   yes,10x,8hecis1396/1x,62h ityp = 2   yes   no    no    no  inpc-308
     2  yes   no    no    no   yes,10x,8hecis1397/1x,62h ityp = 3   yes inpc-309
     3  no    no    no    yes   no    no    no   yes,10x,8hecis1398/1x,6inpc-310
     42h ityp = 4   yes   no    no    no    yes   no    no    no   yes,1inpc-311
     50x,8hecis1399/1x,62h ityp = 5   yes   no    no    no    yes   no  inpc-312
     6  no    no   yes,10x,8hecis1400/1x,62h ityp = 6   yes   no    no  inpc-313
     7  no    yes   no    no    no   yes,10x,8hecis1401/1x,62h ityp = 7 inpc-314
     8  yes   no    no    no    yes   no    no    no   yes,10x,8hecis140inpc-315
     92/1x,62h ityp = 8   yes   no    no    no    yes   no    no    no  inpc-316
     a yes,10x,8hecis1403/73x,8hecis1404/1x,22h **** ml is not 0 ****,50inpc-317
     bx,8hecis1405/1x,62h itypx =    -1    -2    -3    -4    -5    -6   inpc-318
     c -7    -8    -9,10x,8hecis1406/1x,62h ityp = 1   yes   yes   yes  inpc-319
     d yes   yes   yes   yes   yes  yes,10x,8hecis1407/1x,62h ityp = 2  inpc-320
     e yes   yes   yes   yes   yes   yes   yes   yes  yes,10x,8hecis1408inpc-321
     f/1x,62h ityp = 3   yes   yes   yes   yes   yes   yes   no    no   inpc-322
     gyes,10x,8hecis1409/1x,62h ityp = 4   yes   yes   yes   yes   yes  inpc-323
     h yes   no    no   yes,10x,8hecis1410/1x,62h ityp = 5   yes   yes  inpc-324
     i yes   yes   yes   yes   no    no   yes,10x,8hecis1411)           inpc-325
      write (6,1072)                                                    inpc-326
 1072 format (1x,62h ityp = 6   yes   yes   yes   yes   yes   yes   no  inpc-327
     1  no   yes,10x,8hecis1412/1x,62h ityp = 7   no    yes   yes   yes inpc-328
     2  yes   yes   no    no   yes,10x,8hecis1413/1x,62h ityp = 8   no  inpc-329
     3  yes   yes   yes   yes   yes   no    no   yes,10x,8hecis1414/73x,inpc-330
     48hecis1415/1x,31h number of parameters to store:,41x,8hecis1416/12inpc-331
     5x,54h 10    10    10    10  11+l2x 13+l2x 11    22   13+l2x,7x,8heinpc-332
     6cis1417/1x,61h there is one more for coulomb potentials and itypx=inpc-333
     7-1 to -6.,11x,8hecis1418/1x,52h there are 5 more parameters for itinpc-334
     8ypx=-7 and mlx=2.,20x,8hecis1419/1x,67h there are 16 or 6 more parinpc-335
     9ameters for itypx=-8 and mlx=2 or mlx=3.,5x,8hecis1420/73x,8hecis1inpc-336
     a421/56h strength and scaling factor             format (7f10.5),17inpc-337
     bx,8hecis1422/28h ***************************,45x,8hecis1423/2x,66hinpc-338
     c if itypx is negative go to 'parameters of standard form factors'.inpc-339
     d,5x,8hecis1424/2x,58h then if l1x is positive go back to 'identifiinpc-340
     ecation' card.,13x,8hecis1425/7x,74h 1-10   multiplicative factor finpc-341
     for the strength (default value 1.).ecis1426/6x,75h 11-20   multiplinpc-342
     gicative factor for the step size (default value 1.)ecis1427/73x,8hinpc-343
     hecis1428/68h numerical values of the potentials      format (2(f10inpc-344
     i.5,f20.10),a4),5x,8hecis1429)                                     inpc-345
      write (6,1073)                                                    inpc-346
 1073 format (35h **********************************,38x,8hecis1430/7x,2inpc-347
     11h 1-10   rext  radius.,45x,8hecis1431/6x,29h 11-30   fext  value inpc-348
     2at rext.,38x,8hecis1432/6x,22h 31-40   rext  radius.,45x,8hecis143inpc-349
     33/6x,29h 41-60   fext  value at rext.,38x,8hecis1434/6x,75h 61-64 inpc-350
     4  last  control word which must be 'last' for the last pointecis14inpc-351
     535/7x,57h if this control word is not 'last' go to next such card.inpc-352
     6,9x,8hecis1436/73x,8hecis1437/2x,68h note:  the given radii must binpc-353
     7e in increasing order and their number,3x,8hecis1438/2x,70h ***** inpc-354
     8even many points are needed for coulomb potential for which the,1xinpc-355
     9,8hecis1439/8x,63h extrapolation does not work well. if its depth inpc-356
     ais given by the,2x,8hecis1440/8x,57h integral, (nint not 0), theseinpc-357
     b values describe the charge,8x,8hecis1441/8x,14h distribution.,51xinpc-358
     c,8hecis1442/9x,58h the sign of the potentials is the one of their inpc-359
     ddepth when,6x,8hecis1443/8x,73h woods-saxon form factors are used inpc-360
     efor schroedinger equations andecis1444/8x,24h for for dirac equatiinpc-361
     fon.,41x,8hecis1445/9x,60h the spin-orbit 'central' have to be giveinpc-362
     gn as 1/r d/dr(v(r)),4x,8hecis1446/8x,64h except if its strength isinpc-363
     h defined by its integral or is folded.,1x,8hecis1447/9x,63h the spinpc-364
     iin-orbit transition potentials have to be given as v(r),,1x,8hecisinpc-365
     j1448)                                                             inpc-366
      write (6,1074)                                                    inpc-367
 1074 format (8x,73h from which 1/r d/dr(v(r)) and v(r)/r**2 are internainpc-368
     1lly computed.ecis1449/1h1,55hmultiplicative factor                inpc-369
     2   format (7f10.5),17x,8hecis1450/22h *********************,51x,8hinpc-370
     3ecis1451/2x,60h if nint is not negative for a copied form factor ginpc-371
     4o back to,11x,8hecis1452/23h 'identification' card.,50x,8hecis1453inpc-372
     5/7x,64h 1-10   multiplicative factor for the strength (must not beinpc-373
     6 0.).,2x,8hecis1454/73x,8hecis1455/36h parameters of standard forminpc-374
     7 factors,37x,8hecis1456/36h ***********************************,37inpc-375
     8x,8hecis1457/1x,67h only if l1x is not positive and itypx is negatinpc-376
     9ive, otherwise go to,5x,8hecis1458/1x,28h next 'identification carinpc-377
     ad'.,44x,8hecis1459/73x,8hecis1460/19h if itypx=-1 to -6:,54x,8heciinpc-378
     bs1461/19h ******************,54x,8hecis1462/73x,8hecis1463/56h parinpc-379
     cameters of the potential             format (7f10.5),17x,8hecis146inpc-380
     d4/28h ***************************,45x,8hecis1465/7x,27h 1-10   depinpc-381
     eth of potential.,39x,8hecis1466/14x,42h product of charges for couinpc-382
     flomb potential.,17x,8hecis1467/14x,58h product of charges and defoinpc-383
     grmation for coulomb transition,1x,8hecis1468/18x,11h potential.,44inpc-384
     hx,8hecis1469/6x,36h 11-20   radius of volume potential.,31x,8hecisinpc-385
     i1470/6x,41h 21-30   diffuseness of volume potential.,26x,8hecis147inpc-386
     j1)                                                                inpc-387
      write (6,1075)                                                    inpc-388
 1075 format (6x,63h 31-40   exponentiation factor (the form factor is ainpc-389
     1t the power,4x,8hecis1472/18x,15h 1+this value).,40x,8hecis1473/6xinpc-390
     2,61h 41-50   third parameter of a fermi charge distribution for a,inpc-391
     36x,8hecis1474/14x,19h coulomb potential.,40x,8hecis1475/73x,8hecisinpc-392
     41476/56h deformations for itypx=-5 or -6         format (7f10.5),1inpc-393
     57x,8hecis1477/32h *******************************,41x,8hecis1478/7inpc-394
     6x,28h 1-10   deformation for l=1.,38x,8hecis1479/6x,29h 11-20   deinpc-395
     7formation for l=2.,38x,8hecis1480/6x,29h 21-30   deformation for linpc-396
     8=3.,38x,8hecis1481/6x,29h 31-40   deformation for l=4.,38x,8hecis1inpc-397
     9482/6x,44h 41-50   .......... and so on up to l2x ....,23x,8hecis1inpc-398
     a483/73x,8hecis1484/2x,60h note:  odd and even deformations are useinpc-399
     bd, starting by l=1.,11x,8hecis1485/2x,63h ****  the radii must be inpc-400
     cvalues already multiplied by a**(1/3).,8x,8hecis1486/8x,64h no cheinpc-401
     dck is done on product of charges when they are read or to,1x,8heciinpc-402
     es1487/8x,26h prevent a search on them.,39x,8hecis1488/73x,8hecis14inpc-403
     f89/19h if itypx=-7 or -8:,54x,8hecis1490/19h ******************,54inpc-404
     gx,8hecis1491/73x,8hecis1492/54h quantum numbers                   inpc-405
     h      format (12i5),19x,8hecis1493/16h ***************,57x,8hecis1inpc-406
     i494/70h if mlx=0 or mlx=1, the number of nodes is l2x and the quaninpc-407
     jtum numbers,3x,8hecis1495)                                        inpc-408
      write (6,1076)                                                    inpc-409
 1076 format (60h are those of the transition. in this case, go to next inpc-410
     1card.,13x,8hecis1496/19h if mlx=2 or mlx=3:,54x,8hecis1497/7x,56h inpc-411
     21- 5   np: number of nodes of the first bound function.,10x,8hecisinpc-412
     31498/7x,57h 6-10   lp: angular momentum of the first bound functioinpc-413
     4n.,9x,8hecis1499/6x,55h 11-15   sp: value of 2*s for the first bouinpc-414
     5nd function.,12x,8hecis1500/6x,55h 16-20   jp: value of 2*j for thinpc-415
     6e first bound function.,12x,8hecis1501/6x,58h 21-25   nh: number oinpc-416
     7f nodes of the second bound function.,9x,8hecis1502/6x,59h 26-30  inpc-417
     8 lh: angular momentum of the second bound function.,8x,8hecis1503/inpc-418
     96x,56h 31-35   sh: value of 2*s for the second bound function.,11xinpc-419
     a,8hecis1504/6x,56h 36-40   jh: value of 2*j for the second bound finpc-420
     bunction.,11x,8hecis1505/6x,62h 41-45   nvc not 0 to take into accoinpc-421
     cunt particle-hole coupling,5x,8hecis1506/18x,32h (used only with sinpc-422
     dp=1 and sh=1).,23x,8hecis1507/1h1,55hfor itypx=-7:                inpc-423
     e           format (7f10.5),17x,8hecis1508/14h *************,59x,8hinpc-424
     fecis1509/7x,58h 1-10   oscillator parameter for the first bound fuinpc-425
     gnction.,8x,8hecis1510/6x,60h 11-20   oscillator parameter for the inpc-426
     hsecond bound function.,7x,8hecis1511/73x,8hecis1512/81h for mlx=0 inpc-427
     ior 1 or itypx=-8 with mlx=3, only the first parameter is read.ecisinpc-428
     j1513)                                                             inpc-429
      write (6,1077)                                                    inpc-430
 1077 format (67h for mlx=2, if the second parameter is 0., the first oninpc-431
     1e is copied.,6x,8hecis1514/73x,8hecis1515/56h for itypx=-8:       inpc-432
     2                    format (7f10.5),17x,8hecis1516/14h ***********inpc-433
     3**,59x,8hecis1517/7x,74h 1-10   binding energy. if this value is ninpc-434
     4egative, the bound stateecis1518/14x,48h is replaced by a scatteriinpc-435
     5ng state normalised to,11x,8hecis1519/14x,27h sin(kr+delta) at infinpc-436
     6inity.,32x,8hecis1520/6x,20h 11-20   total mass.,47x,8hecis1521/6xinpc-437
     7,51h 21-30   mass of bound particle (default value 1.).,16x,8hecisinpc-438
     81522/6x,28h 31-40   product of charges.,39x,8hecis1523/6x,64h 41-5inpc-439
     90   real potential for unbound states or starting value for,3x,8heinpc-440
     acis1524/14x,51h the search on bound state (default values 35 mev).inpc-441
     b,8x,8hecis1525/6x,42h 51-60   reduced radius of real potential.,25inpc-442
     cx,8hecis1526/6x,39h 61-70   diffuseness of real potential.,28x,8heinpc-443
     dcis1527/73x,8hecis1528/56h on next card:                          inpc-444
     e format (7f10.5),17x,8hecis1529/14h *************,59x,8hecis1530/7inpc-445
     fx,38h 1-10   depth of spin-orbit potential.,28x,8hecis1531/6x,48h inpc-446
     g11-20   reduced radius of spin-orbit potential.,19x,8hecis1532/6x,inpc-447
     h45h 21-30   diffuseness of spin-orbit potential.,22x,8hecis1533/6xinpc-448
     i,45h 31-40   reduced radius of coulomb potential.,22x,8hecis1534) inpc-449
      write (6,1078)                                                    inpc-450
 1078 format (73x,8hecis1535/39h for mlx=2, go back to 'for itypx=-8:'.,inpc-451
     134x,8hecis1536/72h for mlx=3, go back to 'for itypx=-7:' to read oinpc-452
     2ne oscillator parameter.,1x,8hecis1537/73x,8hecis1538/2x,44h note:inpc-453
     3  reduced radii are used for itypx=-8.,27x,8hecis1539/2x,70h **** inpc-454
     4 using the product of two bound functions, their coupling to the,1inpc-455
     5x,8hecis1540/8x,64h angular momentum of the transition is computedinpc-456
     6 by the code only,1x,8hecis1541/8x,59h if their spins are both 1/2inpc-457
     7 and the nuclear matrix element,6x,8hecis1542/8x,62h should be theinpc-458
     8 strength of the interaction. for spins not 1/2,,3x,8hecis1543/8x,inpc-459
     964h this coupling should be included in the nuclear matrix elementinpc-460
     a.,1x,8hecis1544/73x,8hecis1545/13h if itypx=-9:,60x,8hecis1546/13hinpc-461
     b ************,60x,8hecis1547/73x,8hecis1548/56h strengths         inpc-462
     c                      format (7f10.5),17x,8hecis1549/10h *********inpc-463
     d,63x,8hecis1550/8x,59h 1-10  strength of the integral with r**(l+2inpc-464
     e). (for coulomb,6x,8hecis1551/18x,50h potentials and couplings, giinpc-465
     fve the description of,5x,8hecis1552/18x,51h charge density or traninpc-466
     gsition. the strength must be,4x,8hecis1553/18x,53h given. for poteinpc-467
     hntials, it is the product of charges),2x,8hecis1554/7x,60h 11-20  inpc-468
     i radial extension of bessel function. (default value,6x,8hecis1555inpc-469
     j)                                                                 inpc-470
      write (6,1079)                                                    inpc-471
 1079 format (18x,17h matching radius),38x,8hecis1556/7x,43h 21-30   strinpc-472
     1ength of first bessel function.,23x,8hecis1557/7x,44h 31-40   streinpc-473
     2ngth of second bessel function.,22x,8hecis1558/7x,43h 41-50   streinpc-474
     3ngth of third bessel function.,23x,8hecis1559/7x,44h 51-60   streninpc-475
     4gth of fourth bessel function.,22x,8hecis1560/7x,43h 61-70   streninpc-476
     5gth of fifth bessel function.,23x,8hecis1561/73x,8hecis1562/1x,55hinpc-477
     6 eventually, on next card:              format (7f10.5),17x,8hecisinpc-478
     71563/1x,26h *************************,46x,8hecis1564/8x,42h 1-10  inpc-479
     8 strength of sixth bessel function.,23x,8hecis1565/1h1,6x,45h 11-2inpc-480
     90   strength of seventh bessel function.,21x,8hecis1566/7x,44h 21-inpc-481
     a30   .......... and so on up to l2x ....,22x,8hecis1567/73x,8hecisinpc-482
     b1568/2x,64h note:  with bessel function, give the spin-orbit v(r) inpc-483
     cand never,7x,8hecis1569/2x,21h ****  1/r d/dr v(r).,50x,8hecis1570inpc-484
     d/73x,8hecis1571/3x,47h the program stops if form factors are missiinpc-485
     eng.,23x,8hecis1572/73x,8hecis1573/56h folding parameters          inpc-486
     f            format (7e10.5),17x,8hecis1574/19h ******************,inpc-487
     g54x,8hecis1575/2x,70h if the maximum positive value of 'nfold' reainpc-488
     hd in columns 46-50 of the,1x,8hecis1576/41h identification cards iinpc-489
     is n, read n times:,32x,8hecis1577)                                inpc-490
      write (6,1080)                                                    inpc-491
 1080 format (8x,29h 1-10   val(25) 'v' parameter,36x,8hecis1578/7x,30h inpc-492
     111-20   val(26) 'r' parameter,36x,8hecis1579/7x,30h 21-30   val(27inpc-493
     2) 'a' parameter,36x,8hecis1580/73x,8hecis1581/55h for explanationsinpc-494
     3, see 'cards read in subroutine lect'.,18x,8hecis1582/73x,8hecis15inpc-495
     483/73x,8hecis1584/30h cards read in subroutine eval,43x,8hecis1585inpc-496
     5/30h *****************************,43x,8hecis1586/3x,69h if lo(37)inpc-497
     6=.true., otherwise go to the beginning of another data set.,1x,8heinpc-498
     7cis1587/73x,8hecis1588/64h number of changes                      inpc-499
     8 format (l1,i4,i5,f10.5),9x,8hecis1589/18h *****************,55x,8inpc-500
     9hecis1590/10x,57h 1   lo(37)     .true. for other calls to this suinpc-501
     abroutine,6x,8hecis1591/25x,27h .false. for the last call.,21x,8hecinpc-502
     bis1592/7x,50h 3- 5   nin        number of parameters to change.,16inpc-503
     cx,8hecis1593/7x,74h 6-10   nex        indication for the use of thinpc-504
     de values to be readecis1594/27x,15h >0  increments,31x,8hecis1595/inpc-505
     e27x,15h =0  new values,31x,8hecis1596/27x,27h <0  percentage of ininpc-506
     fcrease,19x,8hecis1597/6x,58h 11-20   ech        new search scale. inpc-507
     g(default option 20.),9x,8hecis1598/73x,8hecis1599/54h identificatiinpc-508
     hons                         format (14i5),19x,8hecis1600/16h *****inpc-509
     i**********,57x,8hecis1601)                                        inpc-510
      write (6,1081)                                                    inpc-511
 1081 format (7x,33h 1- 5   index of first parameter.,33x,8hecis1602/7x,inpc-512
     134h 6-10   index of second parameter.,32x,8hecis1603/6x,33h 11-15 inpc-513
     2  ........................,34x,8hecis1604/10x,62h up to nin valuesinpc-514
     3, eventually on other cards, starting in 1-5.,1x,8hecis1605/73x,8hinpc-515
     4ecis1606/3x,45h note:  a negative value is replaced by zero.,25x,8inpc-516
     5hecis1607/3x,39h ****   index zero is the total energy.,31x,8hecisinpc-517
     61608/10x,60h the other indices are the same as the ones used for sinpc-518
     7earch,,3x,8hecis1609/9x,40h with the limitations already describedinpc-519
     8.,24x,8hecis1610/73x,8hecis1611/56h new values                    inpc-520
     9          format (7f10.5),17x,8hecis1612/11h **********,62x,8hecisinpc-521
     a1613/7x,28h 1-10   first new parameter.,38x,8hecis1614/6x,30h 11-2inpc-522
     b0   second new parameter.,37x,8hecis1615/6x,29h 21-30   ..........inpc-523
     c..........,38x,8hecis1616/2x,62h if lo(37)=.true. go again to 'carinpc-524
     dds read in subroutine eval'.,9x,8hecis1617/2x,56h if lo(37)=.falseinpc-525
     e. go to the beginning of next data set.,15x,8hecis1618/73x,8hecis1inpc-526
     f619/2x,53h note:  there are different uses of this possibility:,18inpc-527
     gx,8hecis1620/2x,66h *****  1) as a search stops usually before theinpc-528
     h minimum, it can be,5x,8hecis1621/8x,64h refined by using nex posiinpc-529
     itive and introducing an increment '0.',1x,8hecis1622)             inpc-530
      write (6,1082)                                                    inpc-531
 1082 format (8x,47h for any parameter, in search or not in search.,18x,inpc-532
     18hecis1623/1h1,8x,72h 2) when searching the minimum of the chi2 asinpc-533
     2 a function of someecis1624/8x,63h fixed parameter. the next searcinpc-534
     3h starts with the values of the,2x,8hecis1625/8x,50h parameters ininpc-535
     4 search obtained in the last search.,15x,8hecis1626/9x,61h 3) wheninpc-536
     5 some result must be obtained for different values of,3x,8hecis162inpc-537
     67/8x,16h the parameters.,49x,8hecis1628/73x,8hecis1629/73x,8hecis1inpc-538
     7630/45h restart input: cards read in subroutine rest,28x,8hecis163inpc-539
     81/45h ********************************************,28x,8hecis1632/inpc-540
     973x,8hecis1633/65h restart conditions                      format inpc-541
     a(l1,i4,i5,2f10.5),8x,8hecis1634/19h ******************,54x,8hecis1inpc-542
     b635/10x,59h 1   lo(35)  the only control which can be changed, allinpc-543
     c the,4x,8hecis1636/14x,32h others being those of last run.,27x,8heinpc-544
     dcis1637/7x,42h 2- 5   new maximum number of evaluations.,24x,8heciinpc-545
     es1638/7x,56h 6-10   new value of nsec. (default value: the old oneinpc-546
     f).,10x,8hecis1639/6x,26h 11-20   new value of ech.,41x,8hecis1640/inpc-547
     g6x,26h 11-20   new value of rap.,41x,8hecis1641/14x,54h if they arinpc-548
     he less than 1., ech or rap are not changed.,5x,8hecis1642/73x,8hecinpc-549
     iis1643/81h *******************************************************inpc-550
     j*****************ecis1644)                                        inpc-551
      write (6,1083)                                                    inpc-552
 1083 format (73x,8hecis1645/30x,20h *******************,23x,8hecis1646/inpc-553
     130x,20h *  next data set  *,23x,8hecis1647/30x,20h ***************inpc-554
     2****,23x,8hecis1648/73x,8hecis1649/6x,57h 'fin' in columns 1-3 to inpc-555
     3stop the job without diagnostic.,10x,8hecis1650/73x,8hecis1651/7x,inpc-556
     451h for any trouble, write (and even send listings) to,15x,8hecis1inpc-557
     5652/5x,57h jacques raynal/service de physique theorique/c.e.-saclainpc-558
     6y,11x,8hecis1653/15x,34h 91191 gif-sur-yvette cedex/france,24x,8heinpc-559
     7cis1654/73x,8hecis1655/5x,25h fax: (33)(1) 69.08-81-20,43x,8hecis1inpc-560
     8656/5x,35h e-mail: raynal@amoco.saclay.cea.fr,33x,8hecis1657/73x,8inpc-561
     9hecis1658)                                                        inpc-562
      return                                                            inpc-563
      end                                                               inpc-564
c 04/08/95  ibm version                                         ecis95  lecl-000
      subroutine lecl(ncolt,ncoll,npp,sp,ipi,ipp,wv,iph,npar,nva,nmax,ailecl-001
     1max,nbe,bt,x2,nci,xd,ix,lo)                                       lecl-002
c input of level descriptions.                                          lecl-003
c input variables:   ncolt:  total number of nuclear states             lecl-004
c                    ncoll:  number of coupled nuclear states           lecl-005
c                    npp:    number of optical potentials               lecl-006
c                    nmax:   address of iph in the working space        lecl-007
c                    ix:     non zero for discretisation of continuum   lecl-008
c                    lo:     logical controls                           lecl-009
c output variables:  sp,ipi,ipp,wv:  see calx                           lecl-010
c                    iph(i) for i=1,ncoll number of phonons             lecl-011
c                    for vibrational model if iph(i) is 3, the state is lecl-012
c                    mixture of 1 and 2-phonons states.                 lecl-013
c                    for rotational model, iph(i) is 1 for a vibrationallecl-014
c                    band and 2 for a mixture with the ground state bandlecl-015
c                    iph(i) for i=ncoll+1,2*ncoll contains the addresseslecl-016
c                    of the description of the phonons and mixed states.lecl-017
c                    nva:    number of nuclear parameters               lecl-018
c                    npar:   first address of nuclear parameters        lecl-019
c                    nbe:    number of different phonons                lecl-020
c                    nmax:   first free address of the working space    lecl-021
c                    aimax:  maximum sum of spins of target and particlelecl-022
c                    x2:     wave number of the ground state            lecl-023
c                    nci:    starting and final addresses for continua  lecl-024
c                    xd:     steps of discretisation of continua        lecl-025
c working space:     bt:     temporary storage of nuclear parameters    lecl-026
c for common /ncomp/  see calx                                          lecl-027
c***********************************************************************lecl-028
      double precision wv,e,chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn       lecl-029
      logical lo(250)                                                   lecl-030
      dimension sp(3,1),ipi(9,1),ipp(1),iph(1),bt(1),wv(11,1),nci(2,1),xlecl-031
     1d(3,1)                                                            lecl-032
      common /ncomp/ nsp(3),nfiss,nrd,ncont,ncoj,acn1,acn2,ncons,nie,ncolecl-033
     1i,nscn,nxd,ncolx,az(6),bz(3),tg0,bn,fnug,egd,ggd,tg1,sgsq         lecl-034
      common /dblpr/ chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn              lecl-035
      data sigm /1h-/                                                   lecl-036
c output of nuclear model                                               lecl-037
      nie=0                                                             lecl-038
      if (ix.ne.0) go to 25                                             lecl-039
      ncolx=ncolt                                                       lecl-040
      if (lo(7)) go to 3                                                lecl-041
      if (lo(1)) go to 2                                                lecl-042
      if (lo(3)) go to 1                                                lecl-043
      if (lo(102)) write (6,1000)                                       lecl-044
      if (lo(2)) write (6,1001)                                         lecl-045
      go to 4                                                           lecl-046
    1 write (6,1002)                                                    lecl-047
      if (lo(115)) go to 32                                             lecl-048
      go to 4                                                           lecl-049
    2 if (lo(103)) write (6,1003)                                       lecl-050
      if (lo(3)) write (6,1004)                                         lecl-051
      go to 4                                                           lecl-052
    3 write (6,1005)                                                    lecl-053
c input of channel description                                          lecl-054
    4 i=2*ncoll+1                                                       lecl-055
      nva=0                                                             lecl-056
      nbe=0                                                             lecl-057
      aimax=0.0                                                         lecl-058
      do 5 iv=1,npp                                                     lecl-059
    5 ipp(iv)=-1                                                        lecl-060
      do 22 iv=1,ncolt                                                  lecl-061
      read (5,1006) sp(2,iv),n,k,spi,e,sp(1,iv),wv(1,iv),wv(2,iv),sp(3,ilecl-062
     1v)                                                                lecl-063
      if (iv.ne.1) go to 8                                              lecl-064
      if (k.eq.0) k=1                                                   lecl-065
      if (lo(18).and.sp(1,1).ne.sp(2,1)) go to 35                       lecl-066
      lo(223)=lo(18).and.sp(1,1)*sp(2,1).eq.0.                          lecl-067
      amred=wv(1,iv)*wv(2,iv)/(wv(1,iv)+wv(2,iv))                       lecl-068
      if (lo(8)) go to 6                                                lecl-069
      wv(3,iv)=e*wv(2,iv)/(wv(1,iv)+wv(2,iv))                           lecl-070
      x2=dsqrt(ck*amred*wv(3,iv))                                       lecl-071
      go to 7                                                           lecl-072
c relativistic c.-m. energy ecm=sqrt((m1+m2)**2+2*m2*elab))-m1-m2       lecl-073
    6 wv(3,iv)=cm*(dsqrt((wv(1,iv)+wv(2,iv))**2+2.d0*wv(2,iv)*e/cm)-wv(1lecl-074
     1,iv)-wv(2,iv))                                                    lecl-075
      x2=dsqrt(0.125d0*ck*wv(3,iv)*(wv(3,iv)/cm+2.d0*wv(1,iv)+2.d0*wv(2,lecl-076
     1iv))*(wv(3,iv)/cm+2.d0*wv(1,iv))*(wv(3,iv)/cm+2.d0*wv(2,iv)))/(wv(lecl-077
     23,iv)/cm+wv(1,iv)+wv(2,iv))                                       lecl-078
    7 am3=wv(2,iv)**.33333333333333e0                                   lecl-079
      bm3=wv(1,iv)**.33333333333333e0                                   lecl-080
      cm3=am3/(am3+bm3)                                                 lecl-081
      write (6,1007) wv(2,iv),sp(3,iv),am3,wv(1,iv),amred,sp(1,iv),bm3  lecl-082
      write (6,1008) e,wv(3,iv)                                         lecl-083
      e=0.                                                              lecl-084
      go to 11                                                          lecl-085
    8 if (wv(1,iv).eq.0.d0) go to 9                                     lecl-086
      amred=wv(1,iv)*wv(2,iv)/(wv(1,iv)+wv(2,iv))                       lecl-087
      am3=wv(2,iv)**.33333333333333e0                                   lecl-088
      bm3=wv(1,iv)**.33333333333333e0                                   lecl-089
      write (6,1007) wv(2,iv),sp(3,iv),am3,wv(1,iv),amred,sp(1,iv),bm3  lecl-090
      go to 10                                                          lecl-091
    9 wv(1,iv)=wv(1,iv-1)                                               lecl-092
      wv(2,iv)=wv(2,iv-1)                                               lecl-093
      sp(1,iv)=sp(1,iv-1)                                               lecl-094
      sp(3,iv)=sp(3,iv-1)                                               lecl-095
   10 wv(3,iv)=wv(3,1)-e                                                lecl-096
      if((ncont+iv.le.ncolt).and.lo(8)) wv(2,iv)=wv(1,1)+wv(2,1)-wv(1,ivlecl-097
     1)+e/cm                                                            lecl-098
      if (k.eq.0) k=ipi(4,iv-1)                                         lecl-099
   11 ipi(2,iv)=2.*sp(1,iv)+1.1                                         lecl-100
      ipi(3,iv)=2.*sp(2,iv)+1.1                                         lecl-101
      write (6,1009) iv,sp(2,iv),spi,e,k                                lecl-102
      if (lo(209).and.ipi(2,iv).ne.2) go to 34                          lecl-103
      if (k.gt.npp.or.k.le.0) go to 33                                  lecl-104
      ipi(4,iv)=k                                                       lecl-105
      if (ipp(k).eq.-1) ipp(k)=iv                                       lecl-106
      aimax=amax1(aimax,sp(2,iv)+sp(1,iv))                              lecl-107
      ipi(1,iv)=0                                                       lecl-108
      if (spi.eq.sigm) ipi(1,iv)=1                                      lecl-109
      if (iv.le.ncoll) go to 14                                         lecl-110
c uncoupled states for compound nucleus                                 lecl-111
      if (ncont+iv.gt.ncolt) go to 12                                   lecl-112
      write (6,1010)                                                    lecl-113
      go to 22                                                          lecl-114
c continuum for compound nucleus                                        lecl-115
   12 ic=iv+ncont-ncolt                                                 lecl-116
      nci(1,ic)=iv+nie                                                  lecl-117
      nci(2,ic)=nci(1,ic)                                               lecl-118
      if (wv(3,iv).le.0.) go to 13                                      lecl-119
      jx=(alog(acn2/acn1)+dlog(wv(3,iv)))/(alog(acn1/(acn1-1.)))+1.     lecl-120
      if (jx.lt.0) jx=0                                                 lecl-121
      jy=wv(3,iv)*((acn1-1.)/acn1)**jx*acn2+jx+1                        lecl-122
      if (jy.eq.1) jy=2                                                 lecl-123
      write (6,1011) ic,jy                                              lecl-124
      nie=nie+jy-1                                                      lecl-125
      nci(2,ic)=iv+nie                                                  lecl-126
      go to 22                                                          lecl-127
c closed level                                                          lecl-128
   13 write (6,1012)                                                    lecl-129
      go to 22                                                          lecl-130
   14 if (lo(7)) go to 22                                               lecl-131
      if (lo(3)) go to 21                                               lecl-132
      if (lo(1).and.n.eq.0) go to 15                                    lecl-133
      if (lo(101).and.n.ne.0) go to 15                                  lecl-134
c input of phonons in harmonic vibrational or symmetric rotational modellecl-135
      read (5,1013) iph(iv),iph(i),iph(i+1),iph(i+2)                    lecl-136
      nbe=max0(nbe,iph(i),iph(i+1),iph(i+2))                            lecl-137
      iph(iv+ncoll)=i                                                   lecl-138
      n=iph(iv)+1                                                       lecl-139
      go to ( 16 , 17 , 18  , 19 ) , n                                  lecl-140
c ground state                                                          lecl-141
   15 iph(iv)=0                                                         lecl-142
   16 write (6,1014)                                                    lecl-143
      go to 22                                                          lecl-144
c 1 phonon state                                                        lecl-145
   17 if (lo(101)) write (6,1015) iph(i)                                lecl-146
      if (lo(1)) write (6,1016) iph(i)                                  lecl-147
      i=i+1                                                             lecl-148
      go to 22                                                          lecl-149
   18 if (lo(1)) go to 19                                               lecl-150
c 2 phonon state                                                        lecl-151
      write (6,1017) iph(i),iph(i+1)                                    lecl-152
      i=i+2                                                             lecl-153
      go to 22                                                          lecl-154
c mixture of 1 phonon and 2 phonon state - input of mixing parameter    lecl-155
   19 nva=nva+1                                                         lecl-156
      read (5,1018) bt(nva)                                             lecl-157
      b1=1.74532925e-02*bt(nva)                                         lecl-158
      c1=cos(b1)                                                        lecl-159
      c3=sin(b1)                                                        lecl-160
      if (lo(1)) go to 20                                               lecl-161
      write (6,1019) bt(nva),c3,iph(i),iph(i+1),c1,iph(i+2)             lecl-162
      i=i+3                                                             lecl-163
      go to 22                                                          lecl-164
   20 write (6,1020) bt(nva),c3,iph(i),c1                               lecl-165
      i=i+1                                                             lecl-166
      go to 22                                                          lecl-167
c asymmetric rotational model - input of mixing parameters              lecl-168
   21 if (lo(101)) go to 22                                             lecl-169
      k=0.5*sp(2,iv)+.1                                                 lecl-170
      iph(iv)=k                                                         lecl-171
      iph(iv+ncoll)=nva                                                 lecl-172
      if (k.eq.0) go to 22                                              lecl-173
      read (5,1018) (bt(nva+j),j=1,k)                                   lecl-174
      write (6,1021) (bt(nva+j),j=1,k)                                  lecl-175
      nva=nva+k                                                         lecl-176
   22 continue                                                          lecl-177
      nmax=nmax+i                                                       lecl-178
      npar=nmax                                                         lecl-179
      if (lo(15)) nva=0                                                 lecl-180
      if (nva.eq.0) go to 24                                            lecl-181
c the nuclear parameters which were stored in bt are copied in the wor- lecl-182
c king space from npar to nmax-1                                        lecl-183
      do 23 i=1,nva                                                     lecl-184
   23 sp(npar+i-1,1)=bt(i)                                              lecl-185
      nmax=npar+nva                                                     lecl-186
   24 if (lo(1).and.lo(3)) nmax=nmax+nva+ncoll                          lecl-187
      return                                                            lecl-188
c discretisation of continuum for compound nucleus                      lecl-189
   25 do 29 i=1,ncont                                                   lecl-190
      ki=ncont-i+1                                                      lecl-191
      kj=ncolx-i+1                                                      lecl-192
      ii=nci(1,ki)                                                      lecl-193
      ij=nci(2,ki)                                                      lecl-194
      do 28 j=ii,ij                                                     lecl-195
      do 26 k=1,3                                                       lecl-196
      sp(k,j)=sp(k,kj)                                                  lecl-197
   26 wv(k,j)=wv(k,kj)                                                  lecl-198
      do 27 k=1,4                                                       lecl-199
   27 ipi(k,j)=ipi(k,kj)                                                lecl-200
   28 continue                                                          lecl-201
   29 continue                                                          lecl-202
      do 31 i=1,ncont                                                   lecl-203
      ii=nci(1,i)                                                       lecl-204
      ij=nci(2,i)                                                       lecl-205
      e=wv(3,ii)                                                        lecl-206
      acn3=acn2                                                         lecl-207
      if (e*acn2.lt.1.) acn3=1.9/e                                      lecl-208
      do 30 j=ii,ij                                                     lecl-209
      estp=dmax1(e/acn1,1.d0/acn3)                                      lecl-210
      if (e.lt.estp) estp=e                                             lecl-211
      nie=nie+1                                                         lecl-212
      ecn=e-.5*estp                                                     lecl-213
      wv(3,j)=ecn                                                       lecl-214
      xd(2,nie)=estp                                                    lecl-215
      e=e-estp                                                          lecl-216
      if (lo(8)) wv(2,j)=wv(1,1)+wv(2,1)-wv(1,j)+ecn/cm                 lecl-217
   30 continue                                                          lecl-218
   31 continue                                                          lecl-219
      return                                                            lecl-220
   32 write (6,1022)                                                    lecl-221
      go to 36                                                          lecl-222
   33 write (6,1023) k,npp                                              lecl-223
      go to 36                                                          lecl-224
   34 write (6,1024) sp(1,iv)                                           lecl-225
      go to 36                                                          lecl-226
   35 write (6,1025)                                                    lecl-227
   36 write (6,1026)                                                    lecl-228
      stop                                                              lecl-229
 1000 format (/30h first order vibrational model/)                      lecl-230
 1001 format (/31h second order vibrational model/)                     lecl-231
 1002 format (/29h anharmonic vibrational model/)                       lecl-232
 1003 format (/27h symmetric rotational model/)                         lecl-233
 1004 format (/28h asymmetric rotational model/)                        lecl-234
 1005 format (/27h external form factor model/)                         lecl-235
 1006 format (f5.2,2i2,a1,5f10.5)                                       lecl-236
 1007 format (/7h target,14x,6hmass =,f10.5,11x,20hproduct of charges =,lecl-237
     1f6.0,11x,9hat**1/3 =,e15.6/18h incident particle,3x,6hmass =,f10.5lecl-238
     2,3x,14hreduced mass =,e15.6,3x,6hspin =,f4.1,3x,9hap**1/3 =,e15.6)lecl-239
 1008 format (10x,13henergy(lab) =,e15.6,4h mev,10x,15henergy(c. m.) =,elecl-240
     115.6,4h mev/)                                                     lecl-241
 1009 format (4h n =,i3,11h -   spin =,f4.1,a1,20h excitation energy =,flecl-242
     18.4,4h mev,10x,9hpotential,i5)                                    lecl-243
 1010 format (1h+,85x,27h***** uncoupled state *****)                   lecl-244
 1011 format (15h ***** start of,i4,18hth continuum *****,i5,22h discretlecl-245
     1isation points)                                                   lecl-246
 1012 format (40h ***** start of a closed continuum *****)              lecl-247
 1013 format (14i5)                                                     lecl-248
 1014 format (1h+,85x,17hground state band)                             lecl-249
 1015 format (1h+,85x,i2,13h phonon state)                              lecl-250
 1016 format (1h+,85x,26hvibrational band of phonon,i2)                 lecl-251
 1017 format (23x,29h2 phonons state, with phonons,i2,4h and,i2)        lecl-252
 1018 format (7f10.5)                                                   lecl-253
 1019 format (23x,36hmixing of 1 and 2 phonon states with,f9.3,8h degreelecl-254
     1s/23x,f10.5,29h2 phonons state, with phonons,i2,4h and,i2,4h  + ,flecl-255
     210.5,26h1 phonon state with phonon,i2)                            lecl-256
 1020 format (23x,43hmixing of vibrational and ground bands with,f9.3,8hlecl-257
     1 degrees/23x,f10.5,26hvibrational band of phonon,i2,4h and,f10.5,1lecl-258
     27hground state band)                                              lecl-259
 1021 format (23x,18hband mixing coeff.,5f10.5)                         lecl-260
 1022 format (63h the nuclear reduced matrix elements must be read in thlecl-261
     1is model)                                                         lecl-262
 1023 format (10h potential,i3,34h will not be read.total number is:,i3)lecl-263
 1024 format (14h particle spin,f5.1,31h not allowed for dirac equation)lecl-264
 1025 format (93h projectile-target antisymmetrisation valid only for splecl-265
     1in of particle equal to spin of target)                           lecl-266
 1026 format (/22h in lecl  ... stop ...)                               lecl-267
      end                                                               lecl-268
c 28/07/95  ibm version   cdc with 'c' to double precision      ecis95  lect-000
      subroutine lect(ncoll,nbet,sp,ipi,ipp,wv,nbta,beta,val,fiss,gam,nplect-001
     1p,nmax,rm,x2,aconv,idmt,idt,h,aspin,ism,iqm,iqmax,scn,nss,lo)     lect-002
c lect reads all input except the 5 first data cards,the levels, the    lect-003
c experimental data,the search conditions,the nuclear reduced matrix    lect-004
c elements and the form factors.                                        lect-005
c input variables:   ncoll:   number of coupled nuclear states          lect-006
c                    nbet:    number of phonons                         lect-007
c                    sp,ipi,ipp,wv:  masses,spins,..   see calx         lect-008
c                    npp:     number of optical potentials              lect-009
c                    nmax:    address of beta in the working space      lect-010
c                    rm:      matching radius                           lect-011
c                    x2:      wave number in the initial channel        lect-012
c                    aconv:   convergence parameter for potentials.     lect-013
c                    idmt:    size of working space                     lect-014
c                    idt:     length free for beta                      lect-015
c                    h:       integration step                          lect-016
c                    nns:     number of level densities                 lect-017
c                    lo:      logical controls                          lect-018
c input variable by common                                              lect-019
c /ncomp/nrd,nfiss:  number of gamma and fission transmission coeff.    lect-020
c        ncont,ncons:number of level densities                          lect-021
c output variables:  nbet:    number of different deformations          lect-022
c                    nbta(j,i) quantum numbers of deform. for j=9,10    lect-023
c                    beta(j,i) nuclear deformation for potential j=1,8  lect-024
c                    val(i,n)  (25 optical +9 folding parameters)* npp  lect-025
c                    fiss:    fission data for compound nucleus         lect-026
c                    gam:     gamma data for compound nucleus           lect-027
c                    nmax:    first free address of the working space   lect-028
c                    h:       integration step                          lect-029
c                    aspin:   k-value of the rotational band            lect-030
c                    ism:     number of integration steps               lect-031
c                    iqm:     maximum l-value of def. in rotat. model   lect-032
c                    iqmax:   maximum l-expansion in rotational model   lect-033
c                    scn:     descriptions of level densities           lect-034
c output variable by common                                             lect-035
c /titr/ theta1,theta2,dtheta,dthe: indications for equidistant angles  lect-036
c        xz:     weighted fermi**2 to millibarns ratio                  lect-037
c /ncomp/az(6):  deformed spin-orbit parameters.                        lect-038
c        bz(3):  hauser-feshbach parameters.                            lect-039
c        tg0,bn,fnug,egd,ggd:  moldauer's data for giant resonance      lect-040
c***********************************************************************lect-041
      double precision wv                                               lect-042
      dimension sp(3,1),val(34,1),ipi(9,1),ipp(1),beta(10,1),aleg(6),blelect-043
     1g(2),ro(6),gam(1),fiss(2,1),nbta(10,1),wv(11,1),scn(nss,1)        lect-044
      logical lo(250),lt(6)                                             lect-045
      common /titr/ title(18),theta1,theta2,dtheta,dthe,ncj,xz,jmm,nl(3)lect-046
      common /ncomp/ nsp(3),nfiss,nrd,ncont,ncoj,acn1,acn2,ncons,nie,ncolect-047
     1i,nscn,nxd,ncolx,az(6),bz(3),tg0,bn,fnug,egd,ggd,tg1,sgsq         lect-048
      data bleg /4hnot ,4h    /                                         lect-049
      iqm=0                                                             lect-050
      if (nbet.eq.0) go to 4                                            lect-051
c input of phonon deformations in vibrational and rotational models     lect-052
      do 3 i=1,nbet                                                     lect-053
      read (5,1000) nbta(9,i),nbta(10,i),beta(1,i),k                    lect-054
      do 1 j=2,8                                                        lect-055
    1 beta(j,i)=beta(1,i)                                               lect-056
      if (lo(5)) read (5,1001) (beta(j,i),j=2,8)                        lect-057
      write (6,1002) i,nbta(9,i),nbta(10,i),(beta(j,i),j=1,8)           lect-058
      if (lo(116)) go to 3                                              lect-059
      if (k.eq.0) k=1                                                   lect-060
      k=min0(k,ncoll)                                                   lect-061
      am3=wv(2,k)**.33333333333333e0                                    lect-062
      bm3=wv(1,k)**.33333333333333e0                                    lect-063
      cm3=am3/(am3+bm3)                                                 lect-064
      dm3=1.                                                            lect-065
      if (lo(6)) dm3=cm3                                                lect-066
      do 2 j=1,6                                                        lect-067
    2 beta(j,i)=beta(j,i)*cm3/dm3                                       lect-068
      beta(7,i)=beta(7,i)*cm3**nbta(9,i)/dm3                            lect-069
      beta(8,i)=beta(8,i)*cm3**nbta(9,i)/dm3                            lect-070
      write (6,1003) k,(beta(j,i),j=1,8)                                lect-071
    3 continue                                                          lect-072
    4 if (lo(7)) go to 18                                               lect-073
      if (lo(101)) go to 13                                             lect-074
c input of deformations for the rotational model                        lect-075
      read (5,1000) iqm,iqmax,aspin,k                                   lect-076
      iq=nbet+1                                                         lect-077
      jq=nbet+iqm/2                                                     lect-078
      if (lo(103)) go to 5                                              lect-079
      jq=nbet+iqm                                                       lect-080
      if ((iqm.gt.35).or.(iqmax.gt.8)) go to 34                         lect-081
    5 if (10*jq.gt.idt) call memo(idmt,10*jq-idt,idt,3,lo)              lect-082
      if (lo(216)) go to 35                                             lect-083
      read (5,1001) (beta(1,i),i=iq,jq)                                 lect-084
      m=0                                                               lect-085
      l=0                                                               lect-086
      do 9 i=iq,jq                                                      lect-087
      if (lo(3)) go to 6                                                lect-088
      l=2*(i-nbet)                                                      lect-089
      go to 7                                                           lect-090
    6 m=m+2                                                             lect-091
      if (m.le.l) go to 7                                               lect-092
      l=l+2                                                             lect-093
      m=0                                                               lect-094
    7 nbta(9,i)=l                                                       lect-095
      nbta(10,i)=m                                                      lect-096
      do 8 j=2,8                                                        lect-097
    8 beta(j,i)=beta(1,i)                                               lect-098
    9 continue                                                          lect-099
      if (lo(5)) read (5,1001) ((beta(j,i),j=2,8),i=iq,jq)              lect-100
      write (6,1004) iqmax,aspin                                        lect-101
      write (6,1005) (i,nbta(9,i),nbta(10,i),(beta(j,i),j=1,8),i=iq,jq) lect-102
      if (lo(116)) go to 12                                             lect-103
      if (k.eq.0) k=1                                                   lect-104
      k=min0(k,ncoll)                                                   lect-105
      am3=wv(2,k)**.33333333333333e0                                    lect-106
      bm3=wv(1,k)**.33333333333333e0                                    lect-107
      cm3=am3/(am3+bm3)                                                 lect-108
      dm3=1.                                                            lect-109
      if (lo(6)) dm3=cm3                                                lect-110
      do 11 i=iq,jq                                                     lect-111
      if (nbta(10,i).ne.0) go to 11                                     lect-112
      do 10 k=1,6                                                       lect-113
   10 beta(k,i)=beta(k,i)*cm3/dm3                                       lect-114
      beta(7,i)=beta(7,i)*cm3**nbta(9,i)/dm3                            lect-115
      beta(8,i)=beta(8,i)*cm3**nbta(9,i)/dm3                            lect-116
   11 continue                                                          lect-117
      write (6,1006) k                                                  lect-118
      write (6,1005) (i,nbta(9,i),nbta(10,i),(beta(j,i),j=1,8),i=iq,jq) lect-119
   12 nbet=jq                                                           lect-120
      go to 18                                                          lect-121
c anharmonic vibrational model with different deformations              lect-122
   13 if (lo(103)) go to 18                                             lect-123
      write (6,1007)                                                    lect-124
      do 15 i=1,4                                                       lect-125
      do 14 j=1,8                                                       lect-126
   14 beta(j,i)=1.                                                      lect-127
      nbta(9,i)=0                                                       lect-128
      nbta(10,i)=0                                                      lect-129
      if (lo(5)) read (5,1001) (beta(j,i),j=1,8)                        lect-130
   15 write (6,1008) i,nbta(9,i),(beta(j,i),j=1,8)                      lect-131
      nbet=4                                                            lect-132
      if (lo(116)) go to 18                                             lect-133
      read (5,1009) (nbta(9,j),j=1,4),k                                 lect-134
      if (k.eq.0) k=1                                                   lect-135
      k=min0(k,ncoll)                                                   lect-136
      am3=wv(2,k)**.33333333333333e0                                    lect-137
      bm3=wv(1,k)**.33333333333333e0                                    lect-138
      cm3=am3/(am3+bm3)                                                 lect-139
      dm3=1.                                                            lect-140
      if (lo(6)) dm3=cm3                                                lect-141
      write (6,1006) k                                                  lect-142
      do 17 i=2,4                                                       lect-143
      if (nbta(9,i).eq.0) nbta(9,i)=2                                   lect-144
      if (nbta(9,i).lt.0) nbta(9,i)=0                                   lect-145
      do 16 j=1,6                                                       lect-146
   16 beta(j,i)=beta(j,i)*(cm3/dm3)**(i-1)                              lect-147
      beta(7,i)=beta(7,i)*(cm3**nbta(9,i)/dm3)**(i-1)                   lect-148
      beta(8,i)=beta(8,i)*(cm3**nbta(9,i)/dm3)**(i-1)                   lect-149
   17 write (6,1010) i,nbta(9,i),(beta(j,i),j=1,8)                      lect-150
c input of optical model parameters                                     lect-151
   18 xz=ipi(2,1)*ipi(3,1)                                              lect-152
      xz=10./xz                                                         lect-153
      w2=10.e20                                                         lect-154
      lo(201)=.true.                                                    lect-155
      lo(202)=.true.                                                    lect-156
      lo(203)=.true.                                                    lect-157
      lo(208)=.false.                                                   lect-158
      lt(4)=.true.                                                      lect-159
      lt(6)=.true.                                                      lect-160
      if (lo(7)) go to 22                                               lect-161
      w1=0.0                                                            lect-162
      w3=x2/(aconv*wv(3,1))                                             lect-163
      do 21 ip=1,npp                                                    lect-164
      ij=ipp(ip)                                                        lect-165
      if (ij.ne.-1) go to 19                                            lect-166
      ipp(ip)=1                                                         lect-167
      write (6,1011) ip                                                 lect-168
      ij=1                                                              lect-169
   19 am3=wv(2,ij)**.33333333333333e0                                   lect-170
      if (lo(16)) am3=am3+wv(1,ij)**.33333333333333e0                   lect-171
      write (6,1012) ip,am3                                             lect-172
      do 20 i=1,6                                                       lect-173
      aleg(i)=bleg(2)                                                   lect-174
      read (5,1013) val(3*i-2,ip),ro(i),val(3*i,ip)                     lect-175
      val(3*i-1,ip)=am3*ro(i)                                           lect-176
      if (val(3*i-2,ip).eq.0.) go to 20                                 lect-177
      w1=amax1(w1,val(3*i-1,ip)+alog(w3*abs(val(3*i-2,ip)))*val(3*i,ip))lect-178
      w2=amin1(w2,val(3*i,ip))                                          lect-179
   20 continue                                                          lect-180
      lt(1)=sp(1,ij).eq.0.or.val(13,ip).eq.0.                           lect-181
      lt(2)=sp(1,ij).eq.0.or.val(16,ip).eq.0.                           lect-182
      lo(201)=lo(201).and.lt(1)                                         lect-183
      lo(202)=lo(202).and.lt(2)                                         lect-184
c output of optical parameters                                          lect-185
      if (lo(112)) aleg(2)=bleg(1)                                      lect-186
      if (lt(1).or.lo(113)) aleg(5)=bleg(1)                             lect-187
      if (lt(2).or.lo(114)) aleg(6)=bleg(1)                             lect-188
      aleg(4)=aleg(2)                                                   lect-189
      write (6,1014) (aleg(i),val(3*i-2,ip),val(3*i-1,ip),ro(i),val(3*i,lect-190
     1ip),i=1,6)                                                        lect-191
      read (5,1013) ro(1),val(21,ip),val(25,ip)                         lect-192
      read (5,1013) val(22,ip),ro(2),val(24,ip)                         lect-193
      if (lo(99)) val(21,ip)=0.                                         lect-194
      if (lo(99)) val(24,ip)=0.                                         lect-195
      val(19,ip)=sp(3,ij)                                               lect-196
      val(20,ip)=am3*ro(1)                                              lect-197
      lt(3)=val(19,ip).eq.0.                                            lect-198
      lt(4)=lt(3).and.lt(4)                                             lect-199
      aleg(1)=bleg(2)                                                   lect-200
      if (lt(3).or.lo(111)) aleg(1)=bleg(1)                             lect-201
      val(23,ip)=am3*ro(2)                                              lect-202
      lt(5)=val(22,ip).eq.0.or.sp(1,ij).eq.0.                           lect-203
      lo(203)=lo(203).and.lt(5)                                         lect-204
      lt(6)=lt(5).and.lt(6)                                             lect-205
      aleg(2)=bleg(2)                                                   lect-206
      if (lt(5).or.lo(119)) aleg(2)=bleg(1)                             lect-207
      write (6,1015) (aleg(i),val(3*i+16,ip),val(3*i+17,ip),ro(i),val(3*lect-208
     1i+18,ip),i=1,2),val(25,ip)                                        lect-209
      lo(208)=lo(208).or.val(22,ip).ne.0..or.(lo(209).and.val(19,ip).ne.lect-210
     10.)                                                               lect-211
      w1=amax1(w1,val(20,ip)+10.*val(21,ip),val(23,ip)+10.*val(24,ip))  lect-212
      if (val(21,ip).ne.0) w2=amin1(w2,val(21,ip))                      lect-213
      if (val(24,ip).ne.0) w2=amin1(w2,val(24,ip))                      lect-214
      if (lo(117)) go to 21                                             lect-215
c input of folding parameters                                           lect-216
      read (5,1013) (val(i,ip),i=26,34)                                 lect-217
      write (6,1016) (val(i,ip),i=26,34)                                lect-218
   21 continue                                                          lect-219
      if (lo(99)) lo(202)=.false.                                       lect-220
      go to 24                                                          lect-221
   22 do 23 ij=1,ncoll                                                  lect-222
      lt(4)=lt(4).and.sp(3,ij).eq.0.                                    lect-223
      lt(6)=lt(6).and.sp(1,ij).eq.0.                                    lect-224
   23 lo(202)=lo(202).and.sp(1,ij).eq.0.                                lect-225
      w1=20.                                                            lect-226
      lo(201)=lo(202)                                                   lect-227
      lo(203)=lo(202).or.lt(6)                                          lect-228
      lo(208)=lo(209).or.(.not.lo(203))                                 lect-229
   24 lo(201)=lo(201).and.lo(202)                                       lect-230
      lo(13)=.not.(lo(113).or.lo(201))                                  lect-231
      lo(14)=.not.(lo(114).or.lo(202))                                  lect-232
      lo(11)=.not.(lo(111).or.lt(4))                                    lect-233
      lo(19)=.not.(lo(119).or.lt(6))                                    lect-234
      if (lo(19)) lo(11)=.true.                                         lect-235
      lo(208)=lo(208).or.lo(44)                                         lect-236
      if (lo(144).and.lo(46)) lo(208)=.false.                           lect-237
c default value of matching radius: max(r*a**1/3+10*a)                  lect-238
c default value for integration step: min(min(a)/2,1/(2*k))             lect-239
      if (rm.le.0.) rm=w1                                               lect-240
      if (h.le.0.) h=amin1(w2/2.,0.5/x2)                                lect-241
      ism=rm/h+0.5                                                      lect-242
      h=ism                                                             lect-243
      h=rm/h                                                            lect-244
      rm=h*ism                                                          lect-245
      write (6,1017) h,rm                                               lect-246
      if (lo(66)) go to 25                                              lect-247
c input of limits for calculation at equidistant angles                 lect-248
      read (5,1001) theta1,dtheta,theta2,dthe                           lect-249
      if (dtheta.eq.0.) dtheta=1.                                       lect-250
      if ((theta2-theta1)*dtheta.lt.0.) dtheta=-dtheta                  lect-251
      write (6,1018) theta1,dtheta,theta2,dthe                          lect-252
c input of deformed spin-orbit parameters                               lect-253
   25 az(1)=0.                                                          lect-254
      az(2)=1.                                                          lect-255
      az(3)=1.                                                          lect-256
      az(4)=0.                                                          lect-257
      az(5)=1.                                                          lect-258
      az(6)=1.                                                          lect-259
      if (lo(104)) go to 26                                             lect-260
      read (5,1001) az                                                  lect-261
      write (6,1019) az                                                 lect-262
   26 if (lo(181)) go to 32                                             lect-263
      read (5,1001) bz                                                  lect-264
      if (bz(1).eq.0.) bz(1)=1.4142                                     lect-265
      if (lo(182)) go to 27                                             lect-266
      if (bz(2).eq.0.) bz(2)=3.5                                        lect-267
      if (bz(3).eq.0.) bz(3)=100.                                       lect-268
      write (6,1020) bz                                                 lect-269
      go to 32                                                          lect-270
   27 write (6,1021) bz(1),bz(2)                                        lect-271
      if (lo(185)) go to 29                                             lect-272
      write (6,1022) nfiss                                              lect-273
      do 28 i=1,nfiss                                                   lect-274
      read (5,1001) fiss(1,i),fiss(2,i)                                 lect-275
      if (fiss(2,i).lt.0.5) fiss(2,i)=0.                                lect-276
   28 write (6,1023) fiss(1,i),fiss(2,i)                                lect-277
   29 if (lo(186)) go to 31                                             lect-278
      write (6,1024)                                                    lect-279
      if (nrd.gt.0) go to 30                                            lect-280
      read (5,1001) tg0,bn,fnug,egd,ggd                                 lect-281
      read (5,1001) scn(ncons,7),(scn(ncons,i),i=1,6)                   lect-282
      if (bn.eq.0.) bn=8.                                               lect-283
      if (fnug.lt.1.) fnug=20.                                          lect-284
      if (tg0.eq.0.) lo(86)=.false.                                     lect-285
      lo(186)=.not.lo(86)                                               lect-286
      write (6,1025) tg0,bn,fnug,egd,ggd                                lect-287
      write (6,1026) (scn(ncons,i),i=1,7)                               lect-288
      go to 31                                                          lect-289
   30 read (5,1001) (gam(i),i=1,nrd)                                    lect-290
      write (6,1027) (gam(i),i=1,nrd)                                   lect-291
   31 if (ncont.eq.0) go to 32                                          lect-292
      read (5,1001) (scn(j,7),(scn(j,i),i=1,6),j=1,ncont)               lect-293
      write (6,1028) (j,(scn(j,i),i=1,7),j=1,ncont)                     lect-294
   32 nmax=nmax+10*nbet                                                 lect-295
      do 33 i=1,100                                                     lect-296
   33 lo(i+100)=.not.lo(i)                                              lect-297
      return                                                            lect-298
   34 write (6,1029) iqm,iqmax                                          lect-299
   35 write (6,1030)                                                    lect-300
      stop                                                              lect-301
 1000 format (2i5,f10.5,i5)                                             lect-302
 1001 format (7f10.5)                                                   lect-303
 1002 format (10x,6hphonon,i3,5x,3hl =,i3,5x,3hk =,i3,5x,6hbeta =,8f8.5)lect-304
 1003 format (12x,30hafter heavy ion correction i =,i2,8h  beta =,8f8.5)lect-305
 1004 format (/10x,33hmultipole expansion up to iqmax =,i3,20x,3hk =,f7.lect-306
     12,5h band)                                                        lect-307
 1005 format (/22h beta(i,j) for  l   k ,8x,1hv,9x,1hw,8x,2hvs,8x,2hws,7lect-308
     1x,3hvso,7x,3hwso,6x,14hcoul s.o. coul/(5x,i5,5x,i2,2x,i2,2x,8f10.5lect-309
     2))                                                                lect-310
 1006 format (/10x,30hafter heavy ion correction i =,i3/)               lect-311
 1007 format (/10x,33hratios of anharmonic deformations/25x,1hv,9x,1hw,8lect-312
     1x,2hvs,8x,2hws,7x,3hvso,7x,3hwso,6x,14hcoul s.o. coul)            lect-313
 1008 format (6h order,i3,6x,i3,2x,8f10.5)                              lect-314
 1009 format (14i5)                                                     lect-315
 1010 format (6h order,i3,6h  iq =,i3,2x,8f10.5)                        lect-316
 1011 format (/33h ***** no state for the potential,i3,28h *** we use thlect-317
     1e ground state/)                                                  lect-318
 1012 format (//23h optical potentials  **,i3,38h **     reduced radius lect-319
     1multiplied by  ,e15.6/)                                           lect-320
 1013 format (3f10.5)                                                   lect-321
 1014 format (2x,a4,38hdeformed  volume/scalar real potential/14x,5hdeptlect-322
     1h,f12.6,13h mev   radius,f9.6,21h fermi (reduced value,f9.6,16h)  lect-323
     2  diffuseness,f9.6,6h fermi//2x,a4,43hdeformed  volume/scalar imaglect-324
     3inary potential/14x,5hdepth,f12.6,13h mev   radius,f9.6,21h fermi lect-325
     4(reduced value,f9.6,16h)    diffuseness,f9.6,6h fermi//2x,a4,39hdelect-326
     5formed  surface/vector real potential/14x,5hdepth,f12.6,13h mev   lect-327
     6radius,f9.6,21h fermi (reduced value,f9.6,16h)    diffuseness,f9.6lect-328
     7,6h fermi//2x,a4,44hdeformed  surface/vector imaginary potential/1lect-329
     84x,5hdepth,f12.6,13h mev   radius,f9.6,21h fermi (reduced value,f9lect-330
     9.6,16h)    diffuseness,f9.6,6h fermi//2x,a4,42hdeformed  real spinlect-331
     a-orbit/tensor potential/14x,5hdepth,f12.6,13h mev   radius,f9.6,21lect-332
     bh fermi (reduced value,f9.6,16h)    diffuseness,f9.6,6h fermi//2x,lect-333
     ca4,47hdeformed  imaginary spin-orbit/tensor potential/14x,5hdepth,lect-334
     df12.6,13h mev   radius,f9.6,21h fermi (reduced value,f9.6,16h)    lect-335
     ediffuseness,f9.6,6h fermi)                                        lect-336
 1015 format (/2x,a4,27hdeformed  coulomb potential/19h product of charglect-337
     1es,f9.0,10x,6hradius,f9.6,21h fermi (reduced value,f9.6,16h)    dilect-338
     2ffuseness,f9.6,6h fermi//2x,a4,38hdeformed  spin-orbit coulomb potlect-339
     3ential/14x,5hdepth,f12.6,13h mev   radius,f9.6,21h fermi (reduced lect-340
     4value,f9.6,16h)    diffuseness,f9.6,6h fermi/14x,22hthird charge plect-341
     5arameter,f9.6)                                                    lect-342
 1016 format (/22h *** folding model ***/19h real part      v =,f10.4,6xlect-343
     1,3hr =,f10.4,6x,3ha =,f10.4/19h imaginary part v =,f10.4,6x,3hr =,lect-344
     2f10.4,6x,3ha =,f10.4/19h coulomb part   v =,f10.4,6x,3hr =,f10.4,6lect-345
     3x,3ha =,f10.4/)                                                   lect-346
 1017 format (/24h integration step size =,f8.5,10x,17hmatching radius =lect-347
     1,f8.3,6h fermi)                                                   lect-348
 1018 format (/23h scattering angles from,f7.3,12h in steps of,f7.3,6h ulect-349
     1p to,f8.3,28h degrees   averaged with +/-,f8.3,8h degrees/)       lect-350
 1019 format (10x,16h****** az ******,e15.8)                            lect-351
 1020 format (/42h square root of elastic enhancement factor,8x,e15.8/23lect-352
     1h spin cut-off parameter,27x,e15.8/39h square root of level densitlect-353
     2y parameter,11x,e15.8)                                            lect-354
 1021 format (/63h square root of elastic enhancement factor without flulect-355
     1ctuations,7x,e15.8/45h particle width fluctuation degree of freedolect-356
     2m,25x,e15.8/)                                                     lect-357
 1022 format (/i5,13h fission data)                                     lect-358
 1023 format (10x,2e15.8)                                               lect-359
 1024 format (/11h gamma data)                                          lect-360
 1025 format (5x,4htg0:,e13.6,6x,3hbn:,e13.6,4x,5hfnug:,e13.6,5x,4hegd:,lect-361
     1e13.6,5x,4hggd:,e13.6)                                            lect-362
 1026 format (27h density of states given by/6x,3hsa:,e13.6,6x,3hux:,e13lect-363
     1.6,5x,4htau:,e13.6,6x,3hsg:,e13.6/28x,3he0:,e13.6,6x,3hex:,e13.6,7lect-364
     2x,2hz:,f5.0)                                                      lect-365
 1027 format (8e15.8)                                                   lect-366
 1028 format (41h density of states for continuum given by/(1x,i3,5h  salect-367
     1:,e13.6,6x,3hux:,e13.6,5x,4htau:,e13.6,6x,3hsg:,e13.6/28x,3he0:,e1lect-368
     23.6,6x,3hex:,e13.6,7x,2hz:,f5.0))                                 lect-369
 1029 format (6h iqm =,i3,11h or iqmax =,i3,78h are larger than the maxilect-370
     1mum values 35 or 8 of the asymmetric rotational model)            lect-371
 1030 format (//22h in lect  ... stop ...)                              lect-372
      end                                                               lect-373
c 03/08/95  ibm version   cdc with 'c' to double precision      ecis94  deph-000
      subroutine deph(ncoll,ncols,sp,wv,ipi,mf,fm,ms1,ms2,nct,k,kab,kbc,deph-001
     1kt,np,ng,jtz,idmt,niv,njc,njx,njy,nmax,lo)                        deph-002
c helicity quantum numbers and choice of observables for the output     deph-003
c input variables: ncoll: number of coupled nuclear levels              deph-004
c                  ncols: number of levels with angular distribution    deph-005
c                  sp,wv,ipi:     see calx                              deph-006
c                  np:    indication for plots of cross-section: number deph-007
c                       of powers of 10 by 100 points                   deph-008
c                  ng:    indications for plots of polarisations:       deph-009
c                     1 first one,2 second,3 first and second ..etc.    deph-010
c          on a binary basis. the first value of np and ng is for the   deph-011
c          ground state and the second one for the excited states       deph-012
c                  idmt:  size of working field                         deph-013
c                  nmax:  maximum number of amplitudes                  deph-014
c                  lo:    logical controls                              deph-015
c output variables:mf,fm: in equivalence by call  -  table of quantum   deph-016
c                       numbers and observables                         deph-017
c                  ipi(j=5 to 8,i): beginning and end for each level in deph-018
c                       the two parts of the table mf-fm                deph-019
c                  ms1,ms2:   largest particle and target multiplicitiesdeph-020
c                  nct:   number of equations for each parity in 1 and 2deph-021
c                         number of solutions for each parity in 3 and 4deph-022
c                  k:     number of independent amplitudes              deph-023
c                  kab:   maximum number of coupled equations           deph-024
c                  kbc:   maximum number of solutions needed            deph-025
c                  kt:    length of the table mf-fm                     deph-026
c                  jtz:   maximum number of kinds of polarisation       deph-027
c                  niv(*,*,3): address of coulomb integrals             deph-028
c                  njc:    1+maximum number of observ. at equid. angles deph-029
c                  njx:    number of sets of coulomb funct. and integraldeph-030
c                  njy:    maximum label of non standard observable     deph-031
c                                                                       deph-032
c   **** table mf-fm **** first part                                    deph-033
c for each independent amplitude (with respect to parity only)          deph-034
c  mf(1,*)  helicity of the outgoing particle                           deph-035
c  mf(2,*)  helicity of the residual target                             deph-036
c  mf(3,*)  helicity of the incoming particle                           deph-037
c  mf(4,*)  helicity of the target                                      deph-038
c    these helicities are numbered from the lowest value                deph-039
c  fm(5,*)  parity related amplitudes:0 none,1 or -1 one with this sign deph-040
c  fm(6,*)  magnetic quantum number of the rotation matrix elements     deph-041
c    related to the initial state                                       deph-042
c  fm(7,*)  magnetic quantum number of the rotation matrix elements for deph-043
c    the final state; however, with absolute value .25, it indicates    deph-044
c    that the last computed matrix elements can be used with the        deph-045
c    sign of fm(7,*).  a re-ordering of the helicities has been done    deph-046
c  m(8,*)  direct address of the amplitude in an one-row matrix         deph-047
c  m(9,*)  direct address of the parity related amplitude               deph-048
c***********************************************************************deph-049
      logical lo(250)                                                   deph-050
      double precision wv                                               deph-051
      dimension sp(3,1),ipi(9,1),mf(9,1),fm(9,1),np(2),ng(2),niv(ncols,ndeph-052
     1cols,3),wv(11,1),nct(4)                                           deph-053
      njc=2                                                             deph-054
      njy=0                                                             deph-055
      jtz=0                                                             deph-056
      nct(2)=0                                                          deph-057
      nct(1)=0                                                          deph-058
      k=0                                                               deph-059
      ms1=0                                                             deph-060
      ms2=0                                                             deph-061
      ni=ipi(2,1)                                                       deph-062
      mi=ipi(3,1)                                                       deph-063
c loop on the nuclear levels                                            deph-064
      do 12 i=1,ncols                                                   deph-065
      ip=mod(ipi(1,i)+ipi(1,1),2)                                       deph-066
      ki=k+1                                                            deph-067
      ipi(5,i)=ki                                                       deph-068
      nj=ipi(2,i)                                                       deph-069
      mj=ipi(3,i)                                                       deph-070
      ms1=max0(ms1,nj)                                                  deph-071
      ms2=max0(ms2,mj)                                                  deph-072
      do 10 i1=1,nj                                                     deph-073
      j1=nj+1-i1                                                        deph-074
      do 9 i2=1,mj                                                      deph-075
      j2=mj+1-i2                                                        deph-076
      do 8 i3=1,ni                                                      deph-077
      j3=ni+1-i3                                                        deph-078
      do 7 i4=1,mi                                                      deph-079
      j4=mi+1-i4                                                        deph-080
      if (k.lt.ki) go to 3                                              deph-081
c search for parity conjugate among the amplitudes already obtained     deph-082
      do 1 j=ki,k                                                       deph-083
      if ((mf(1,j).eq.j1).and.(mf(2,j).eq.j2).and.(mf(3,j).eq.j3).and.(mdeph-084
     1f(4,j).eq.j4)) go to 2                                            deph-085
    1 continue                                                          deph-086
      go to 3                                                           deph-087
    2 fm(5,j)=1-2*mod(ip+j1+i2+j3+i4,2)                                 deph-088
      mf(9,j)=i1+nj*(i2-1+mj*(i4-1+mi*(i3-1)))                          deph-089
      go to 7                                                           deph-090
c new amplitude                                                         deph-091
    3 k=k+1                                                             deph-092
      if (9*k.ge.nmax) call memo(idmt,idmt+9,nmax,3,lo)                 deph-093
      if (lo(216)) go to 32                                             deph-094
      mf(1,k)=i1                                                        deph-095
      mf(2,k)=i2                                                        deph-096
      mf(3,k)=i3                                                        deph-097
      mf(4,k)=i4                                                        deph-098
      fm(5,k)=0.                                                        deph-099
      fm(6,k)=mf(3,k)-mf(4,k)-sp(1,1)+sp(2,1)                           deph-100
      fm(7,k)=mf(1,k)-mf(2,k)-sp(1,i)+sp(2,i)                           deph-101
      mf(8,k)=i1+nj*(i2-1+mj*(i4-1+mi*(i3-1)))                          deph-102
      if (k.le.ki) go to 7                                              deph-103
c search for related rotation matrix elements                           deph-104
      kk=k-1                                                            deph-105
      m1=abs(fm(6,k)+fm(7,k))+.1                                        deph-106
      m2=abs(fm(6,k)-fm(7,k))+.1                                        deph-107
      do 6 j=ki,kk                                                      deph-108
      if (abs(fm(7,j)).eq..25) go to 6                                  deph-109
      m3=abs(fm(6,j)+fm(7,j))+.1                                        deph-110
      m4=abs(fm(6,j)-fm(7,j))+.1                                        deph-111
      if (m1.ne.m3.or.m2.ne.m4) go to 6                                 deph-112
      m3=abs(fm(6,j)-fm(6,k)+fm(7,k)-fm(7,j))+.1                        deph-113
      fm(7,k)=1-mod(m3,4)                                               deph-114
      fm(7,k)=.25*fm(7,k)                                               deph-115
      ja=j+1                                                            deph-116
      if (ja.eq.k) go to 7                                              deph-117
c permutation of amplitudes                                             deph-118
      do 5 m1=1,9                                                       deph-119
      m2=mf(m1,k)                                                       deph-120
      do 4 m3=ja,k                                                      deph-121
      m4=k+ja-m3                                                        deph-122
    4 mf(m1,m4)=mf(m1,m4-1)                                             deph-123
    5 mf(m1,ja)=m2                                                      deph-124
      go to 7                                                           deph-125
    6 continue                                                          deph-126
    7 continue                                                          deph-127
    8 continue                                                          deph-128
    9 continue                                                          deph-129
   10 continue                                                          deph-130
      ipi(6,i)=k                                                        deph-131
c computation of the number of coupled equations                        deph-132
      l=nj*mj                                                           deph-133
      kk1=l/2                                                           deph-134
      kk2=l-kk1                                                         deph-135
      if (kk1.eq.kk2) go to 11                                          deph-136
      n=mj/2+nj/2+ipi(1,i)                                              deph-137
      if (2*(n/2).eq.n) go to 11                                        deph-138
      kk1=kk1+1                                                         deph-139
      kk2=kk1-1                                                         deph-140
   11 nct(2)=nct(2)+kk1                                                 deph-141
      nct(1)=nct(1)+kk2                                                 deph-142
      if (i.ne.1) go to 12                                              deph-143
      nct(4)=nct(2)                                                     deph-144
      nct(3)=nct(1)                                                     deph-145
   12 continue                                                          deph-146
      kab=max0(nct(1),nct(2))                                           deph-147
      kbc=max0(nct(3),nct(4))                                           deph-148
      if (nct(4).eq.0) kab=nct(1)                                       deph-149
      if (nct(3).eq.0) kab=nct(2)                                       deph-150
      write (6,1000) kbc,kab,k                                          deph-151
      kt=k                                                              deph-152
      ipi(8,ncols)=ipi(6,ncols)                                         deph-153
      if (lo(66)) go to 24                                              deph-154
c***********************************************************************deph-155
c   **** table mf-fm **** second part                                   deph-156
c  this part of the table is prolongated in lecd and will be updated    deph-157
c  by obse      - for each observable                                   deph-158
c  mf(1,*)  kind of observable                                          deph-159
c  mf(2,*)  level                                                       deph-160
c  mf(5,*)  indication for graphs                                       deph-161
c  ****standard options****                                             deph-162
c for all states : cross section                                        deph-163
c for ground state with charged particles: cross section divided by     deph-164
c       rutherford's cross-section                                      deph-165
c for spin 1/2 - ground state  polarisation                             deph-166
c for spin 1/2 excited states  vect. ana. power,polar. and spin-flip    deph-167
c for spin larger than 1/2  ground state it11,t20,t21 and t22           deph-168
c for excited states,it11,vect. polar.,t20,t21,t22                      deph-169
c  *** non-standard options ***                                         deph-170
c  no more than six observables by channel                              deph-171
c  the first one must be the cross-section                              deph-172
c any observable not described below is identified by a negative number deph-173
c  of which the positive value must be found by obse                    deph-174
c  followed by the description of the observable                        deph-175
c **** standard descriptions ****                                       deph-176
c 0  cross section                                                      deph-177
c 1  cross section divided by rutherford's cross section                deph-178
c 2  vector analysing power                                             deph-179
c 3  vector polarisation                                                deph-180
c 4  t20     5  t21     6  t22                                          deph-181
c 7  spin-flip defined as (a(0000 0000)+a(1100 1100)+a(1100 1-100))/2   deph-182
c***********************************************************************deph-183
      kx=k                                                              deph-184
      iy=1                                                              deph-185
      if (lo(194)) go to 13                                             deph-186
      read (5,1001) (ipi(8,i),i=1,ncols)                                deph-187
      write (6,1002) (i,ipi(8,i),i=1,ncols)                             deph-188
   13 do 23 i=1,ncols                                                   deph-189
      if (lo(94)) go to 18                                              deph-190
c there must be at least place to store six observables                 deph-191
      if (9*kx+54.ge.nmax) call memo(idmt,idmt+9*kx+54-nmax,nmax,3,lo)  deph-192
      if (lo(216)) go to 32                                             deph-193
      kx=kx+1                                                           deph-194
      ipi(8,i)=1                                                        deph-195
      mf(1,kx)=0                                                        deph-196
      if ((i.ne.1).or.(sp(3,1).eq.0.)) go to 14                         deph-197
      ipi(8,1)=2                                                        deph-198
      kx=kx+1                                                           deph-199
      mf(1,kx)=1                                                        deph-200
   14 mf(5,kx)=np(iy)                                                   deph-201
      if (ni.eq.1) go to 18                                             deph-202
      ipi(8,i)=ipi(8,i)+1                                               deph-203
      kx=kx+1                                                           deph-204
      mf(1,kx)=2                                                        deph-205
      ix=ng(iy)/2                                                       deph-206
      mf(5,kx)=ng(1)-2*ix                                               deph-207
      if (ni.gt.2) go to 16                                             deph-208
      if (i.eq.1) go to 18                                              deph-209
      if (ipi(2,i).gt.3) go to 15                                       deph-210
      if (ipi(2,i).eq.1) go to 18                                       deph-211
      ipi(8,i)=ipi(8,i)+1                                               deph-212
      kx=kx+1                                                           deph-213
      mf(1,kx)=3                                                        deph-214
      mf(5,kx)=mod(ix,2)                                                deph-215
      ix=ix/2                                                           deph-216
   15 kx=kx+1                                                           deph-217
      mf(1,kx)=7                                                        deph-218
      mf(5,kx)=mod(ix,2)                                                deph-219
      ipi(8,i)=ipi(8,i)+1                                               deph-220
      go to 18                                                          deph-221
   16 ipi(8,i)=ipi(8,i)+3                                               deph-222
      do 17 l=4,6                                                       deph-223
      kx=kx+1                                                           deph-224
      mf(1,kx)=l                                                        deph-225
      mf(5,kx)=mod(ix,2)                                                deph-226
   17 ix=ix/2                                                           deph-227
   18 k1=kt+1                                                           deph-228
      ipi(7,i)=k1                                                       deph-229
      kt=kt+ipi(8,i)                                                    deph-230
      ipi(8,i)=kt                                                       deph-231
      if (9*kt.ge.nmax) call memo(idmt,idmt+9*kt-nmax,nmax,3,lo)        deph-232
      if (lo(216)) go to 32                                             deph-233
      do 19 j=k1,kt                                                     deph-234
   19 mf(2,j)=i                                                         deph-235
      if (lo(194)) go to 21                                             deph-236
      read (5,1001) (mf(1,j),j=k1,kt)                                   deph-237
      if (mf(1,k1).ne.0) write (6,1003)                                 deph-238
      read (5,1001) (mf(5,j),j=k1,kt)                                   deph-239
      mf(1,k1)=0                                                        deph-240
      write (6,1004) i,(mf(1,j),j=k1,kt)                                deph-241
      write (6,1005) (mf(5,j),j=k1,kt)                                  deph-242
      do 20 j=k1,kt                                                     deph-243
      if (mf(1,j).gt.7) go to 31                                        deph-244
   20 continue                                                          deph-245
   21 jt=0                                                              deph-246
      do 22 j=k1,kt                                                     deph-247
      njy=max0(njy,-mf(1,j))                                            deph-248
      if (mf(1,j).eq.0.or.mf(1,j).eq.1) go to 22                        deph-249
      jt=jt+1                                                           deph-250
   22 continue                                                          deph-251
      jtz=max0(jtz,jt)                                                  deph-252
      njc=max0(njc,kt-k1+2)                                             deph-253
   23 iy=2                                                              deph-254
      if (lo(81)) njc=njc+2                                             deph-255
   24 iy=0                                                              deph-256
      if (lo(44)) iy=1                                                  deph-257
      if (lo(46).and.lo(44)) write (6,1006)                             deph-258
      do 27 i=1,ncoll                                                   deph-259
      if (lo(46).and.lo(44)) go to 26                                   deph-260
      do 25 j=1,ncoll                                                   deph-261
   25 niv(i,j,3)=iy                                                     deph-262
      if (lo(208)) niv(i,i,3)=1                                         deph-263
      go to 27                                                          deph-264
   26 read (5,1001) (niv(i,j,3),j=1,ncoll)                              deph-265
      write (6,1007) i,(j,niv(i,j,3),j=1,ncoll)                         deph-266
   27 continue                                                          deph-267
      nj=njx                                                            deph-268
      do 29 i=1,ncols                                                   deph-269
      do 28 j=1,i                                                       deph-270
      l=0                                                               deph-271
      if (i.le.ncoll) l=niv(i,j,3)                                      deph-272
      niv(i,j,3)=0                                                      deph-273
c no coul. corr. with diff. particle mass, charges or a closed channel  deph-274
      if (l.eq.0.or.sp(3,i).ne.sp(3,j).or.wv(1,i).ne.wv(1,j).or.wv(3,i).deph-275
     1lt.0..or.wv(3,j).lt.0.) go to 28                                  deph-276
      njx=njx+1                                                         deph-277
      niv(i,j,3)=njx                                                    deph-278
   28 niv(j,i,3)=niv(i,j,3)                                             deph-279
   29 continue                                                          deph-280
      if (nj.eq.njx) return                                             deph-281
      write (6,1008)                                                    deph-282
      do 30 i=1,ncols                                                   deph-283
   30 write (6,1009) i,(niv(i,j,3),j,j=1,ncols)                         deph-284
      return                                                            deph-285
   31 write (6,1010)                                                    deph-286
   32 write (6,1011)                                                    deph-287
      stop                                                              deph-288
 1000 format (/5x,i3,10h solutions,i10,18h coupled equations,i10,23h inddeph-289
     1ependent amplitudes/)                                             deph-290
 1001 format (14i5)                                                     deph-291
 1002 format (/26h equidistant angles output//(10x,7hchannel,i3,5x,i3,12deph-292
     1h observables))                                                   deph-293
 1003 format (56h the first observable must be the cross section: label deph-294
     10)                                                                deph-295
 1004 format (24h observables for channel,i3,4h  : ,18i5/(24x,18i5))    deph-296
 1005 format (12x,19hgraph information: ,18i5/(24x,18i5))               deph-297
 1006 format (/35h coulomb corrections ( 1=yes, 0=no))                  deph-298
 1007 format (4h i =,i2,4x,10(4h j =,i2,1h:,i1,2x)/(10x,10(4h j =,i2,1h:deph-299
     1,i1,2x)))                                                         deph-300
 1008 format (/31h storage of coulomb corrections)                      deph-301
 1009 format (4h i =,i2,2x,6(i6,8h for j =,i2)/(10x,6(i6,8h for j =,i2))deph-302
     1)                                                                 deph-303
 1010 format (//75h the standard observables are only 7  for any other gdeph-304
     1ive a negative integer)                                           deph-305
 1011 format (//22h in deph  ... stop ...)                              deph-306
      end                                                               deph-307
c 23/03/88  ibm and cdc version                                 ecis88  lecd-000
      subroutine lecd(ncoll,ncolr,ktg,mf,fm,donn,np,ntot,jtx,njz,idmt,nmlecd-001
     1ax,lo)                                                            lecd-002
c input of experimental data                                            lecd-003
c input variables: ncoll: number of nuclear levels                      lecd-004
c                  ncolr: number of angular distributions               lecd-005
c                  ktg:   starting address in table mf(9,1)=fm(9,1) for lecd-006
c          experimental angular distributions   (see deph)              lecd-007
c          from ktg to ktg+ncolr-1  description of observables          lecd-008
c          from ktg+ncolr  channel, beginning and end of data, indica-  lecd-009
c          tion c.m./lab as 0/1, weight, norm and its error; then place lecd-010
c          for calculated normalisation and chi2                        lecd-011
c                  np:    indications for plots of cross-section        lecd-012
c                  jtx:   maximum number of angles for a graph          lecd-013
c                  njz:   maximum index of non standard observable      lecd-014
c                  idmt:  length of working space                       lecd-015
c                  nmax:  maximum number of data for the working space  lecd-016
c                  lo:    logical controls. if lo(72)=.true. no output olecd-017
c                         experimental data                             lecd-018
c output variables:jtx:   maximum number of angles for a graph          lecd-019
c                  njz:   maximum index of non standard observable      lecd-020
c                  mf,fm: see above comments on ktg                     lecd-021
c                  donn:  experimental data: angle, value, error,       lecd-022
c                         angular width and place for corrected error   lecd-023
c                  ntot:  number of experimental data                   lecd-024
c      if the number of data for an observable is 0,it is summed        lecd-025
c      with the next observable which must be of the same kind          lecd-026
c***********************************************************************lecd-027
      logical lo(250),lt,lx                                             lecd-028
      dimension donn(6,1),fm(9,1),mf(9,1),np(2)                         lecd-029
      lt=.true.                                                         lecd-030
      ntot=0                                                            lecd-031
      do 4 ix=1,ncolr                                                   lecd-032
      iy=ix+ktg                                                         lecd-033
      iv=iy+ncolr                                                       lecd-034
c input of the definition of the angular distribution                   lecd-035
      lx=.false.                                                        lecd-036
      read (5,1000) lx,mf(4,iv),nt,mf(1,iv),mf(1,iy),(fm(j,iv),j=5,7)   lecd-037
      if (fm(5,iv).eq.0.) fm(5,iv)=1.                                   lecd-038
      if (fm(6,iv).eq.0.) fm(6,iv)=1.                                   lecd-039
      mf(2,iy)=mf(1,iv)                                                 lecd-040
      jtx=max0(jtx,nt)                                                  lecd-041
      njz=max0(njz,-mf(1,iy))                                           lecd-042
      mf(5,iy)=1                                                        lecd-043
      mf2=min0(2,mf(1,iv))                                              lecd-044
      if (mf(1,iy).eq.0.or.mf(1,iy).eq.1) mf(5,iy)=np(mf2)              lecd-045
      if (lo(172).and.nt.eq.0) write (6,1001) ix,nt,mf(1,iv),mf(1,iy)   lecd-046
      if (.not.lt.and.(mf(1,iy).ne.mf(1,iy-1))) go to 5                 lecd-047
      lt=nt.ne.0                                                        lecd-048
      ns=ntot+1                                                         lecd-049
      ntot=ntot+nt                                                      lecd-050
      mf(2,iv)=ns                                                       lecd-051
      mf(3,iv)=ntot                                                     lecd-052
      if (.not.lt) go to 4                                              lecd-053
      if (lo(172)) write (6,1002) ix,nt,mf(1,iv),mf(1,iy),(fm(i,iv),i=5,lecd-054
     17)                                                                lecd-055
      if (lo(172).and.(mf(1,iy).eq.8)) write (6,1003)                   lecd-056
      lx=lx.and.(mf(1,iy).eq.0.or.mf(1,iy).eq.1)                        lecd-057
      if (lo(172).and.lx) write (6,1004)                                lecd-058
      if (lo(172).and.mf(4,iv).eq.1) write (6,1005)                     lecd-059
      if (6*ntot+6.ge.nmax) call memo(idmt,idmt+6*ntot+6-nmax,nmax,3,lo)lecd-060
      if (lo(216)) go to 9                                              lecd-061
c input of the angular distribution data                                lecd-062
      do 1 i=ns,ntot                                                    lecd-063
      read (5,1006) (donn(j,i),j=1,5)                                   lecd-064
      if (lx) donn(3,i)=donn(2,i)*donn(3,i)*.01                         lecd-065
      donn(6,i)=donn(3,i)                                               lecd-066
      if (lo(172)) write (6,1007) i,(donn(j,i),j=1,5)                   lecd-067
    1 continue                                                          lecd-068
      if (mf(1,iv).gt.ncoll) go to 6                                    lecd-069
      if (mf(1,iy).gt.8) go to 7                                        lecd-070
      if (mf(1,iy).lt.8) go to 3                                        lecd-071
c check of total cross-section data                                     lecd-072
      do 2 i=ns,ntot                                                    lecd-073
      j=donn(1,i)+.1                                                    lecd-074
      if (j.lt.0.or.j.gt.ncoll) go to 8                                 lecd-075
    2 continue                                                          lecd-076
    3 if (fm(7,iv).eq.0.) go to 4                                       lecd-077
      ntot=ntot+1                                                       lecd-078
c normalisation as a data for the search                                lecd-079
      donn(2,ntot)=fm(6,iv)                                             lecd-080
      donn(3,ntot)=fm(7,iv)                                             lecd-081
      if (lo(172)) write (6,1008) ntot,donn(2,ntot),donn(3,ntot)        lecd-082
    4 continue                                                          lecd-083
      if (lt) return                                                    lecd-084
      write (6,1009)                                                    lecd-085
      go to 9                                                           lecd-086
    5 write (6,1010) mf(1,iy),mf(1,iy-1)                                lecd-087
      go to 9                                                           lecd-088
    6 write (6,1011)                                                    lecd-089
      go to 9                                                           lecd-090
    7 write (6,1012)                                                    lecd-091
      go to 9                                                           lecd-092
    8 write (6,1013) donn(1,i),i                                        lecd-093
    9 write (6,1014)                                                    lecd-094
      stop                                                              lecd-095
 1000 format (l1,i1,i3,2i5,5x,3f10.5)                                   lecd-096
 1001 format (/13h  ang. distr.,i3,i9,15h data   level =,i3,5x,6hkind =,lecd-097
     1i3,34h unresolved with the following one/)                        lecd-098
 1002 format (/13h  ang. distr.,i3,i9,15h data   level =,i3,5x,6hkind =,lecd-099
     1i3//5x,6hweight,e12.4,5x,4hnorm,e12.4,12h  with error,e12.4//23x,5lecd-100
     2hangle,14x,5hvalue,15x,5herror,12x,10hang. width,10x,10hang. errorlecd-101
     3/)                                                                lecd-102
 1003 format (36h these data are total cross-sections)                  lecd-103
 1004 format (27h input of percentage errors)                           lecd-104
 1005 format (32h angles in the laboratory system)                      lecd-105
 1006 format (6f10.5)                                                   lecd-106
 1007 format (5x,i5,5e20.6)                                             lecd-107
 1008 format (5x,i5,30h data which is a normalisation,e20.6,11h with errlecd-108
     1or,e20.6)                                                         lecd-109
 1009 format (//47h  the last angular distribution include no data)     lecd-110
 1010 format (//11h the kind =,i3,49h of this observable is not the samelecd-111
     1 as the kind =,i3,36h of the previous one which was empty)        lecd-112
 1011 format (//23h level number too large)                             lecd-113
 1012 format (//48h there are only 8 kind of programmed observables//75hlecd-114
     1  for other kinds, introduce a negative number  and,later,their delecd-115
     2scription)                                                        lecd-116
 1013 format (13h angular data,f10.5,4h for,i4,41h data not allowed for lecd-117
     1total cross-section)                                              lecd-118
 1014 format (//22h in lecd  ... stop ...)                              lecd-119
      end                                                               lecd-120
c 28/11/94  ibm version                                         ecis94  obse-000
      subroutine obse(mf,nt,ncolr,ipi,am,itx,bm,nx,jcal,jtn,idmt,lo)    obse-001
c computes for each observable all the indications for do loops and the obse-002
c geometrical coefficients needed in scat                               obse-003
c input variables: mf:     informations comming from deph and lecd      obse-004
c                  nt:     number of rows of mf                         obse-005
c                  ncolr:  number of experimental angular distributions obse-006
c                  ipi(j=2,3,i): multiplicity of particle and target    obse-007
c                  jtn:    length available in am                       obse-008
c                  idmt:   total length of working field                obse-009
c                  lo:     logical controls                             obse-010
c      the subroutine returns lo(226)=.true. if there is an observable  obse-011
c  not in the center of mass system.                                    obse-012
c output variables:am:     see description below                        obse-013
c                  jcal:   length of am                                 obse-014
c working fields:  bm(9,*) and nx(18,*) in equivalence by call          obse-015
c                  the results are stored after the working field       obse-016
c                  and copied in am before return.                      obse-017
c                  itx(7,*) to store legends, in equivalence with am    obse-018
c as input,mf(1,i)=0 to 8 for a standard observable or a negative       obse-019
c     number for non standard observable of which the description       obse-020
c     has to be read with the control number -mf(1,i)                   obse-021
c     however, mf(1,i)=8 for a set of experimental data which are cross-obse-022
c     sections. it keeps this value.                                    obse-023
c     mf(5,i)= indication for plots                                     obse-024
c as output mf(1,i)=0 for cross-section,1 for c.-s./ruth.,-2 and -3     obse-025
c     for vector analysing power and polarisation for spins not greater obse-026
c     than 1                                                            obse-027
c     mf(2,i)             indication for plots                          obse-028
c     mf(3,i) and mf(4,i) beginning and end of the description in am    obse-029
c     mf(5,i) to mf(9,i)  contains the legend                           obse-030
c***********************************************************************obse-031
c  the first part of the am table is sets of 10 d. p. indications,each  obse-032
c     of them related to a single 'a' - the 8 first are indications for obse-033
c     the 4 do loops, 9 is a set of 6 logical in a binary code and indi-obse-034
c     cation for change of frame for the particle and the target under  obse-035
c     the form n1+1000*n2, 10 is the amplitude.                         obse-036
c  the second part are tensor operator matrix elements.                 obse-037
c       indications for a do loop are 4 integer                         obse-038
c        im: lower bound                                                obse-039
c        ip: upper bound                                                obse-040
c        nm: difference of magnetic quantum numbers                     obse-041
c        il: when added to the index of the do loop,address of the      obse-042
c             matrix element from the top of table am                   obse-043
c       the 4 first logicals  are .true. if there is a tensor operator  obse-044
c        for the related do loop,.false. for identity operator.         obse-045
c        the fifth is .true. for no tensor operator at all              obse-046
c        the sixth is .true. for pure imaginary coefficient             obse-047
c       indication for change of frame are                              obse-048
c            1 for laboratory system                                    obse-049
c            2 for axis along the incident direction                    obse-050
c***********************************************************************obse-051
      logical lt1,lt2,lz(6),lo(250)                                     obse-052
      dimension iy(7,9),itx(7,1),mt(4),ipi(9,1),mf(9,1),nx(18,1),mx(8,9)obse-053
     1,nz(2)                                                            obse-054
      double precision am(1),bm(9,1),fs,cx(9),e1,e2,e3,f1,f2,f3,d1,d2,c1obse-055
     1,c2,fj                                                            obse-056
      data iy /2*1,4h  cr,4hoss-,4hsect,4hion ,4h    ,2*1,4h   c,4h. s.,obse-057
     14h/rut,4hher.,4h    ,2*2,4h  as,4hym. ,4hor i,4ht11 ,4h    ,2*3,4hobse-058
     2  ve,4hct. ,4hpola,4hr.  ,4h    ,2*4,2*4h    ,4ht20 ,2*4h    ,2*5,obse-059
     32*4h    ,4ht21 ,2*4h    ,2*6,2*4h    ,4ht22 ,2*4h    ,7,9,4h    ,4obse-060
     4hspin,4h-fli,4hp   ,4h    ,2*1,4htota,4hl cr,4hoss-,4hsect,4h.   /obse-061
      data cx /6*1.d0,3*0.5d0/                                          obse-062
      data mx /8*0,2*1,10*0,2*1,2*0,2,7*0,2,1,6*0,2*2,14*0,2*1,2*0,2*1,2obse-063
     1*0,2*1,2*0,1,-1,2*0/                                              obse-064
      if (jtn.lt.162) call memo(idmt,idmt+jtn-162,jtn,3,lo)             obse-065
      if (lo(216)) go to 90                                             obse-066
c transfer of standard descriptions                                     obse-067
      do 3 i=1,9                                                        obse-068
      do 1 j=1,8                                                        obse-069
    1 nx(j+6,i)=mx(j,i)                                                 obse-070
      do 2 j=1,7                                                        obse-071
    2 itx(j,i)=iy(j,i)                                                  obse-072
    3 bm(3,i)=cx(i)                                                     obse-073
      lo(226)=.false.                                                   obse-074
      kit=9                                                             obse-075
      knx=9                                                             obse-076
      jcal=0                                                            obse-077
      mt(1)=ipi(2,1)                                                    obse-078
      mt(2)=ipi(3,1)                                                    obse-079
c verification of indications already in mf(1,i)                        obse-080
      do 4 i=1,nt                                                       obse-081
      if (mf(1,i).le.7) go to 4                                         obse-082
      if (mf(1,i).eq.8.and.nt-i.ge.ncolr) go to 81                      obse-083
      if (mf(1,i).gt.8) go to 82                                        obse-084
    4 mf(6,i)=0                                                         obse-085
      if (lo(194).and.lo(131)) go to 55                                 obse-086
c search for non standard observables                                   obse-087
    5 do 6 l=1,nt                                                       obse-088
      if (mf(1,l).lt.0) go to 7                                         obse-089
    6 continue                                                          obse-090
      go to 55                                                          obse-091
    7 kz=kit                                                            obse-092
      kit=kit+1                                                         obse-093
c input of the description of non standard observables                  obse-094
      lt1=.false.                                                       obse-095
      lt2=.false.                                                       obse-096
      read (5,1000) lt1,lt2,lt3,kx,k,(itx(j,kit),j=3,7)                 obse-097
      k1=knx+1                                                          obse-098
      knx=knx+k                                                         obse-099
      if (18*knx.gt.jtn) call memo(idmt,idmt+18*knx-jtn,jtn,3,lo)       obse-100
      if (lo(216)) go to 90                                             obse-101
      read (5,1001) ((nx(j,i),j=7,14),i=k1,knx)                         obse-102
      read (5,1002) (bm(3,i),i=k1,knx)                                  obse-103
      if (lt1.or.lt2) read (5,1002) (bm(1,i),i=k1,knx)                  obse-104
    8 k2=k1                                                             obse-105
      write (6,1003) kx,(itx(j,kit),j=3,7),k                            obse-106
      if (lt1) write (6,1004)                                           obse-107
      if (lt3.eq.1) write (6,1005)                                      obse-108
      if (lt3.eq.2) write (6,1006)                                      obse-109
      if (.not.lt2) go to 21                                            obse-110
c output of the description not completely in tensor notation           obse-111
c if lt2=.true. , observables can be defined as matrix elements         obse-112
c (mi,mf). in this case,the values read are (mi-s-1,mf-s-1) instead of  obse-113
c the quantum numbers of tensor operator.                               obse-114
      write (6,1007)                                                    obse-115
    9 k3=min0(k2+5,knx)                                                 obse-116
      write (6,1008) ((nx(i,j),i=11,14),j=k2,k3)                        obse-117
      write (6,1009) (bm(3,i),i=k2,k3)                                  obse-118
      write (6,1010) ((nx(i,j),i=7,10),j=k2,k3)                         obse-119
      write (6,1011) (bm(1,i),i=k2,k3)                                  obse-120
      k2=k3+1                                                           obse-121
      if (k2.le.knx) go to 9                                            obse-122
      iv=mf(2,l)                                                        obse-123
      mt(3)=ipi(2,iv)                                                   obse-124
      mt(4)=ipi(3,iv)                                                   obse-125
      klt=1                                                             obse-126
c search for non tensor description - pseudo-loop for ij                obse-127
      ij=1                                                              obse-128
   10 k2=k1                                                             obse-129
      k6=knx                                                            obse-130
   11 if (k2.gt.k6) go to 13                                            obse-131
      do 12 k=k2,k6                                                     obse-132
      if (nx(2*ij+5,k).lt.0) go to 14                                   obse-133
   12 continue                                                          obse-134
   13 if (k6.ne.knx) go to 26                                           obse-135
      go to 19                                                          obse-136
c recurrence computation of (-)**(s-mf)*<s s mi -mf|l m>/sqrt(2*s+1)    obse-137
c starting with the minimum value of l                                  obse-138
   14 m1=mt(ij)+nx(2*ij+5,k)                                            obse-139
      m2=mt(ij)+nx(2*ij+6,k)                                            obse-140
      if (m1.lt.0.or.m2.lt.0) go to 83                                  obse-141
      m4=m1-m2                                                          obse-142
      m3=iabs(m4)+1                                                     obse-143
      m5=mt(ij)                                                         obse-144
      e2=0.d0                                                           obse-145
      e3=1.d0                                                           obse-146
      c1=m1+m2-mt(ij)+1                                                 obse-147
      d2=0.d0                                                           obse-148
      c2=0.d0                                                           obse-149
      do 17 m=m3,m5                                                     obse-150
      if (m.eq.m3) go to 15                                             obse-151
      e1=e2                                                             obse-152
      e2=e3                                                             obse-153
      d1=d2                                                             obse-154
      f1=((m-1)**2-m4**2)*(mt(ij)**2-(m-1)**2)                          obse-155
      f2=(2*m-1)*(2*m-3)                                                obse-156
      d2=dsqrt(f1/f2)                                                   obse-157
      e3=(c1*e2-d1*e1)/d2                                               obse-158
   15 knx=knx+1                                                         obse-159
      do 16 ji=7,14                                                     obse-160
   16 nx(ji,knx)=nx(ji,k)                                               obse-161
      nx(2*ij+5,knx)=m-1                                                obse-162
      nx(2*ij+6,knx)=m4                                                 obse-163
      c2=c2+e3*e3                                                       obse-164
   17 bm(1,knx)=e3                                                      obse-165
c normalisation and sign given by coefficient for maximum value of l    obse-166
      c2=c2*mt(ij)                                                      obse-167
      c2=1.d0/dsqrt(c2)                                                 obse-168
      if (e3.lt.0.d0) c2=-c2                                            obse-169
      if (mod(nx(2*ij+6,k),2).eq.0) c2=-c2                              obse-170
      do 18 m=m3,m5                                                     obse-171
      ji=knx+m-m5                                                       obse-172
      bm(3,ji)=bm(3,k)*bm(1,ji)*c2                                      obse-173
   18 bm(1,ji)=bm(1,k)*bm(1,ji)*c2                                      obse-174
      bm(3,k)=0.d0                                                      obse-175
      bm(1,k)=0.d0                                                      obse-176
      k2=k+1                                                            obse-177
      go to 11                                                          obse-178
   19 ij=ij+1                                                           obse-179
      if (ij.le.4) go to 10                                             obse-180
      k2=k1                                                             obse-181
      lt2=.false.                                                       obse-182
      if (lt1) go to 21                                                 obse-183
c if axis of quantification not in vertical plane, take imaginary       obse-184
c amplitude for pure imaginary tensors                                  obse-185
      do 20 k=k1,knx                                                    obse-186
      m1=nx(7,k)+nx(9,k)+nx(11,k)+nx(13,k)                              obse-187
      if (mod(m1,2).ne.0) bm(3,k)=bm(1,k)                               obse-188
   20 continue                                                          obse-189
   21 if (lt1) go to 34                                                 obse-190
c the first non zero magnetic quantum number must be positive           obse-191
      do 25 k4=k1,knx                                                   obse-192
      bm(1,k4)=0.d0                                                     obse-193
      do 22 j=8,14,2                                                    obse-194
      if (nx(j,k4)) 23 , 22 , 25                                        obse-195
   22 continue                                                          obse-196
      go to 25                                                          obse-197
   23 ik=0                                                              obse-198
      do 24 j=8,14,2                                                    obse-199
      ik=ik+nx(j-1,k4)+nx(j,k4)                                         obse-200
   24 nx(j,k4)=-nx(j,k4)                                                obse-201
      if (2*(ik/2).ne.ik) bm(3,k4)=-bm(3,k4)                            obse-202
   25 continue                                                          obse-203
      klt=2                                                             obse-204
c reduction of the description                                          obse-205
c for change into tensors if klt=1, for here if klt=2                   obse-206
c for change to axis in the reaction plane if klt=3                     obse-207
   26 if (k1.gt.knx) go to 84                                           obse-208
      do 29 k4=k1,knx                                                   obse-209
      if (dabs(bm(3,k4))+dabs(bm(1,k4)).lt..1d-6) go to 31              obse-210
      k5=k4-1                                                           obse-211
      if (k1.gt.k5) go to 29                                            obse-212
      do 28 j=k1,k5                                                     obse-213
      do 27 i=7,14                                                      obse-214
      if (nx(i,j).ne.nx(i,k4)) go to 28                                 obse-215
   27 continue                                                          obse-216
      go to 30                                                          obse-217
   28 continue                                                          obse-218
   29 continue                                                          obse-219
      go to ( 19 , 34 , 49 ),klt                                        obse-220
   30 bm(3,j)=bm(3,j)+bm(3,k4)                                          obse-221
      bm(1,j)=bm(1,j)+bm(1,k4)                                          obse-222
   31 knx=knx-1                                                         obse-223
      if (knx.lt.k4) go to 26                                           obse-224
      do 33 k=k4,knx                                                    obse-225
      do 32 j=7,14                                                      obse-226
   32 nx(j,k)=nx(j,k+1)                                                 obse-227
      bm(1,k)=bm(1,k+1)                                                 obse-228
   33 bm(3,k)=bm(3,k+1)                                                 obse-229
      go to 26                                                          obse-230
c output of the description                                             obse-231
   34 k3=min0(k2+5,knx)                                                 obse-232
      write (6,1008) ((nx(i,j),i=11,14),j=k2,k3)                        obse-233
      write (6,1012) (bm(3,i),i=k2,k3)                                  obse-234
      write (6,1010) ((nx(i,j),i=7,10),j=k2,k3)                         obse-235
      if (lt1) write (6,1011) (bm(1,i),i=k2,k3)                         obse-236
      k2=k3+1                                                           obse-237
      if (k2.le.knx) go to 34                                           obse-238
      do 36 k=k1,knx                                                    obse-239
      do 35 i=8,14,2                                                    obse-240
      if (iabs(nx(i,k)).gt.nx(i-1,k).or.nx(i-1,k).lt.0) go to 85        obse-241
   35 continue                                                          obse-242
   36 continue                                                          obse-243
      if (.not.lt1) go to 53                                            obse-244
c change from vertical axis of quantification to helicity description   obse-245
c by the rotation r(pi/2,pi/2,pi/2)                                     obse-246
      do 38 i=k1,knx                                                    obse-247
      m1=iabs(nx(8,i))+iabs(nx(10,i))+iabs(nx(12,i))+iabs(nx(14,i))     obse-248
      m2=m1/2                                                           obse-249
      if (2*m2.ne.m1) go to 86                                          obse-250
      if (2*(m2/2).eq.m2) go to 37                                      obse-251
      bm(3,i)=-bm(3,i)                                                  obse-252
      bm(1,i)=-bm(1,i)                                                  obse-253
   37 if (m1.eq.0) bm(1,i)=0.d0                                         obse-254
   38 continue                                                          obse-255
      klt=3                                                             obse-256
c pseudo-loop on ij to 49                                               obse-257
      ij=7                                                              obse-258
   39 j1=knx                                                            obse-259
      do 46 k3=k1,knx                                                   obse-260
      k=nx(ij,k3)                                                       obse-261
      n1=k+nx(ij+1,k3)+1                                                obse-262
      n=2*k+1                                                           obse-263
      e3=1.d0                                                           obse-264
      if (k.eq.0) go to 41                                              obse-265
c rotation matrix elements for pi/2                                     obse-266
      do 40 i=1,k                                                       obse-267
   40 e3=e3*.5d0                                                        obse-268
   41 c1=0.d0                                                           obse-269
      e2=0.d0                                                           obse-270
      fj=k                                                              obse-271
      fs=-fj                                                            obse-272
      do 42 i=1,n1                                                      obse-273
      if (i.eq.1) go to 42                                              obse-274
      c2=c1                                                             obse-275
      c1=(i-1)*(1+n-i)                                                  obse-276
      c1=dsqrt(c1)                                                      obse-277
      e1=e2                                                             obse-278
      e2=e3                                                             obse-279
      e3=(2.d0*fj*e2-e1*c2)/c1                                          obse-280
      fs=fs+1.d0                                                        obse-281
   42 f2=0.d0                                                           obse-282
      f3=e3                                                             obse-283
      d1=0.d0                                                           obse-284
      do 45 j=1,n                                                       obse-285
      if (j.eq.1) go to 43                                              obse-286
      d2=d1                                                             obse-287
      d1=(j-1)*(1+n-j)                                                  obse-288
      d1=dsqrt(d1)                                                      obse-289
      f1=f2                                                             obse-290
      f2=f3                                                             obse-291
      f3=(2.d0*fs*f2-f1*d2)/d1                                          obse-292
   43 j1=j1+1                                                           obse-293
      if (18*j1.gt.jtn) call memo(idmt,idmt+18*j1-jtn,jtn,3,lo)         obse-294
      if (lo(216)) go to 90                                             obse-295
      do 44 l=7,14                                                      obse-296
   44 nx(l,j1)=nx(l,k3)                                                 obse-297
      bm(3,j1)=f3*bm(3,k3)                                              obse-298
      bm(1,j1)=f3*bm(1,k3)                                              obse-299
   45 nx(ij+1,j1)=j-1-k                                                 obse-300
   46 continue                                                          obse-301
c reduction of the description                                          obse-302
      j2=k1-1                                                           obse-303
      j3=knx+1                                                          obse-304
      do 48 j4=j3,j1                                                    obse-305
      j2=j2+1                                                           obse-306
      do 47 l=7,14                                                      obse-307
   47 nx(l,j2)=nx(l,j4)                                                 obse-308
      bm(3,j2)=bm(3,j4)                                                 obse-309
   48 bm(1,j2)=bm(1,j4)                                                 obse-310
      knx=j2                                                            obse-311
      go to 26                                                          obse-312
   49 ij=ij+2                                                           obse-313
      if (ij.le.13) go to 39                                            obse-314
      do 52 j1=k1,knx                                                   obse-315
      m1=nx(7,j1)+nx(9,j1)+nx(11,j1)+nx(13,j1)                          obse-316
      m2=nx(8,j1)+nx(10,j1)+nx(12,j1)+nx(14,j1)+4*m1                    obse-317
      m3=m2/2                                                           obse-318
      if (2*(m1/2).eq.m1) go to 50                                      obse-319
      if (2*m3.ne.m2) go to 51                                          obse-320
      bm(3,j1)=bm(1,j1)                                                 obse-321
      go to 51                                                          obse-322
   50 if (2*m3.eq.m2) go to 51                                          obse-323
      bm(3,j1)=-bm(1,j1)                                                obse-324
   51 if (2*(m3/2).ne.m3) bm(3,j1)=-bm(3,j1)                            obse-325
   52 continue                                                          obse-326
      lt1=.false.                                                       obse-327
      write (6,1013)                                                    obse-328
      k=knx+1-k1                                                        obse-329
      go to 8                                                           obse-330
c storage of the description                                            obse-331
   53 l1=0                                                              obse-332
      itx(1,kit)=k1                                                     obse-333
      itx(2,kit)=knx                                                    obse-334
      do 54 i=1,nt                                                      obse-335
      if (mf(1,i).ne.-kx) go to 54                                      obse-336
      mf(1,i)=kz                                                        obse-337
      mf(6,i)=lt3                                                       obse-338
      l1=l1+1                                                           obse-339
   54 continue                                                          obse-340
      if (l1.eq.0) write (6,1014) kx                                    obse-341
      go to 5                                                           obse-342
c computation of all the indications needed for the observables         obse-343
c (beginning and end of do loops,geometrical coefficients ...)          obse-344
   55 do  56 i=1,nt                                                     obse-345
      i1=mf(1,i)+1                                                      obse-346
      mf(3,i)=itx(1,i1)                                                 obse-347
   56 mf(4,i)=itx(2,i1)                                                 obse-348
      lt1=.false.                                                       obse-349
   57 lt1=.not.lt1                                                      obse-350
c lt1=.true.  first passage: number of informations needed for do loops obse-351
c lt1=.false. second one: computation of geometrical coefficients which obse-352
c are stored after the indications for do loops                         obse-353
      ical=0                                                            obse-354
      ncal=0                                                            obse-355
      do 76 i=1,nt                                                      obse-356
      iv=mf(2,i)                                                        obse-357
      mt(3)=ipi(2,iv)                                                   obse-358
      mt(4)=ipi(3,iv)                                                   obse-359
      if (mf(1,i).le.0.or.mf(1,i).eq.8) go to 76                        obse-360
      if (mf(1,i).ne.1) go to 58                                        obse-361
      if (iv.ne.1) go to 87                                             obse-362
      go to 76                                                          obse-363
   58 if ((mf(1,i).eq.2.and.mt(1).le.3).or.(mf(1,i).eq.3.and.mt(3).le.3)obse-364
     1) go to 61                                                        obse-365
      if (i.eq.1) go to 62                                              obse-366
      i1=i-1                                                            obse-367
      do 59 j=1,i1                                                      obse-368
      if (mf(1,i).eq.mf(1,j).and.mf(2,i).eq.mf(2,j)) go to 60           obse-369
   59 continue                                                          obse-370
      go to 62                                                          obse-371
   60 mf(3,i)=mf(3,j)                                                   obse-372
      mf(4,i)=mf(4,j)                                                   obse-373
      go to 76                                                          obse-374
   61 mf(1,i)=-mf(1,i)                                                  obse-375
      if ((mf(1,i).eq.-2.and.mt(1).eq.0).or.(mf(1,i).eq.-3.and.mt(3).eq.obse-376
     10)) go to 88                                                      obse-377
      go to 76                                                          obse-378
   62 i1=mf(3,i)                                                        obse-379
      i2=mf(4,i)                                                        obse-380
      do 75 ki=i1,i2                                                    obse-381
      kt=0                                                              obse-382
      do 72 l=1,4                                                       obse-383
      k=nx(2*l+5,ki)                                                    obse-384
      nm=nx(2*l+6,ki)                                                   obse-385
      kt=kt+k                                                           obse-386
      if (k.gt.mt(l)) go to 89                                          obse-387
      if (ical.eq.0) go to 64                                           obse-388
      do 63 n=1,ical                                                    obse-389
      if (mt(l).eq.nx(15,n).and.k.eq.nx(16,n).and.nm.eq.nx(17,n)) go to obse-390
     170                                                                obse-391
   63 continue                                                          obse-392
   64 ical=ical+1                                                       obse-393
      if (18*ical.gt.jtn) call memo(idmt,idmt+18*ical-jtn,jtn,3,lo)     obse-394
      if (lo(216)) go to 90                                             obse-395
      nx(15,ical)=mt(l)                                                 obse-396
      nx(16,ical)=k                                                     obse-397
      nx(17,ical)=nm                                                    obse-398
      nx(18,ical)=jcal                                                  obse-399
      if (lt1) go to 72                                                 obse-400
      in=mt(l)                                                          obse-401
      nx(1,ical)=max0(1,1+nm)                                           obse-402
      nx(2,ical)=min0(in,in+nm)                                         obse-403
      nx(3,ical)=nm                                                     obse-404
      nx(4,ical)=jcal-nx(1,ical)+1                                      obse-405
      if (nx(16,ical).eq.0) go to 69                                    obse-406
c recurrence computation of geometrical coefficients                    obse-407
      f3=2*k+1                                                          obse-408
      f3=dsqrt(f3)                                                      obse-409
      do 65 j=1,k                                                       obse-410
      f1=in-j                                                           obse-411
      f2=in+j                                                           obse-412
   65 f3=-f3*dsqrt(f1/f2)                                               obse-413
      jnm=nm                                                            obse-414
      inm=iabs(jnm)                                                     obse-415
      if (jnm.eq.0) go to 67                                            obse-416
      if (inm.ne.jnm.and.2*(inm/2).ne.inm) f3=-f3                       obse-417
      do 66 j=1,inm                                                     obse-418
      f1=(k+j)*(k-j+1)                                                  obse-419
      f2=j*(in-j)                                                       obse-420
   66 f3=f3*dsqrt(f1/f2)                                                obse-421
   67 jcal=jcal+1                                                       obse-422
      is=nx(2,ical)-nx(1,ical)                                          obse-423
      if (2*(jcal+is).gt.jts) call memo(idmt,idmt+2*(jcal+is)-jts,jts,3,obse-424
     1lo)                                                               obse-425
      if (lo(216)) go to 90                                             obse-426
      bm(jcal,kx)=f3                                                    obse-427
      if (is.lt.1) go to 69                                             obse-428
      f2=0.d0                                                           obse-429
      d1=k*(k+1)-(in+1)*(inm-1)                                         obse-430
      c2=0.d0                                                           obse-431
      do 68 j=1,is                                                      obse-432
      c1=c2                                                             obse-433
      c2=j*(in-j)*(j+inm)*(in-j-inm)                                    obse-434
      c2=dsqrt(c2)                                                      obse-435
      d1=d1+2*(2*j-2-in+inm)                                            obse-436
      f1=f2                                                             obse-437
      f2=f3                                                             obse-438
      f3=-(d1*f2+c1*f1)/c2                                              obse-439
      jcal=jcal+1                                                       obse-440
      bm(jcal,kx)=f3                                                    obse-441
   68 continue                                                          obse-442
   69 n=ical                                                            obse-443
   70 if (lt1) go to 72                                                 obse-444
      do 71 ma=1,4                                                      obse-445
      mc=20*ncal+4*l+ma-4                                               obse-446
   71 nx(mc,kx)=nx(ma,n)                                                obse-447
      lz(l)=nx(16,n).ne.0                                               obse-448
   72 continue                                                          obse-449
      if (lt1) go to 74                                                 obse-450
      lz(5)=kt.eq.0                                                     obse-451
      lz(6)=2*(kt/2).ne.kt                                              obse-452
      nz(1)=0                                                           obse-453
      nz(2)=0                                                           obse-454
      if (lz(4)) nz(2)=mf(6,i)                                          obse-455
      if (lz(3).or.lz(4)) nz(1)=mf(6,i)                                 obse-456
      lo(226)=lo(226).or.nz(1).ne.0                                     obse-457
      ia1=0                                                             obse-458
      ia2=1                                                             obse-459
      do 73 li=1,6                                                      obse-460
      if (lz(li)) ia1=ia1+ia2                                           obse-461
   73 ia2=2*ia2                                                         obse-462
      nx(20*ncal+17,kx)=ia1                                             obse-463
      nx(20*ncal+18,kx)=nz(1)+1000*nz(2)                                obse-464
      bm(10*ncal+10,kx)=bm(3,ki)                                        obse-465
   74 ncal=ncal+1                                                       obse-466
   75 continue                                                          obse-467
      if (lt1) go to 76                                                 obse-468
      mf(4,i)=ncal                                                      obse-469
      mf(3,i)=ncal+i1-i2                                                obse-470
   76 continue                                                          obse-471
      if (.not.lt1) go to 77                                            obse-472
      kx=max0(knx,ical)+1                                               obse-473
      jcal=10*ncal                                                      obse-474
      jts=jtn-18*(kx-1)                                                 obse-475
      if (2*jcal.gt.jts) call memo(idmt,idmt+2*jcal-jts,jts,3,lo)       obse-476
      if (lo(216)) go to 90                                             obse-477
      go to 57                                                          obse-478
c storage of legends and copy of results                                obse-479
   77 do 79 i=1,nt                                                      obse-480
      i5=iabs(mf(1,i))+1                                                obse-481
      mf(2,i)=mf(5,i)                                                   obse-482
      do 78 j=3,7                                                       obse-483
   78 mf(j+2,i)=itx(j,i5)                                               obse-484
   79 continue                                                          obse-485
      do 80 i=1,jcal                                                    obse-486
   80 am(i)=bm(i,kx)                                                    obse-487
      return                                                            obse-488
   81 write (6,1015) i,mf(1,i)                                          obse-489
      go to 90                                                          obse-490
   82 write (6,1016) i,mf(1,i)                                          obse-491
      go to 90                                                          obse-492
   83 write (6,1017) nx(2*ij+5,k),nx(2*ij+6,k),mt(ij)                   obse-493
      go to 90                                                          obse-494
   84 write (6,1018)                                                    obse-495
      go to 90                                                          obse-496
   85 write (6,1019) nx(2*i-1,k1),nx(2*i,k1)                            obse-497
      go to 90                                                          obse-498
   86 write (6,1020)                                                    obse-499
      go to 90                                                          obse-500
   87 write (6,1021) mf(2,i)                                            obse-501
      go to 90                                                          obse-502
   88 write (6,1022) mf(2,i)                                            obse-503
      go to 90                                                          obse-504
   89 write (6,1023) mt(l),mf(2,i),l,k                                  obse-505
   90 write (6,1024)                                                    obse-506
      stop                                                              obse-507
 1000 format (2l1,i1,i2,i5,5a4)                                         obse-508
 1001 format (8i5)                                                      obse-509
 1002 format (6f10.5)                                                   obse-510
 1003 format (/11h observable,i3,9h labelled,5x,5a4,10x,i3,11h componentobse-511
     1s)                                                                obse-512
 1004 format (57h defined with an axis perpendicular to the reaction plaobse-513
     1ne)                                                               obse-514
 1005 format (33h defined in the laboratory system)                     obse-515
 1006 format (42h defined with respect to the incident beam)            obse-516
 1007 format (34h not completely defined by tensors)                    obse-517
 1008 format (/6(11x,4i2,2x))                                           obse-518
 1009 format (6(2h +,f8.4,2h*m,9x))                                     obse-519
 1010 format (6(11x,4i2,2x))                                            obse-520
 1011 format (16h imaginary parts/6(1x,f8.5,12x))                       obse-521
 1012 format (6(2h +,f8.4,2h*a,9x))                                     obse-522
 1013 format (//21h after transformation/)                              obse-523
 1014 format (32h the observable read with number,i4,12h is not used)   obse-524
 1015 format (4h the,i4,22h th observable,of kind,i2,30h must be for expobse-525
     1erimental data)                                                   obse-526
 1016 format (4h the,i4,22h th observable,of kind,i2,15h is not defined)obse-527
 1017 format (23h non tensor indications,i4,4h and,i4,24h incorrect for obse-528
     1(2*s+1) =,i3)                                                     obse-529
 1018 format (16h zero observable)                                      obse-530
 1019 format (/60h too large magnetic quantum number or negative multipoobse-531
     1larity,2i6)                                                       obse-532
 1020 format (61h the sum of magnetic quantum numbers is odd for one comobse-533
     1ponent)                                                           obse-534
 1021 format (67h no cross section divided by rutherford's for the inelaobse-535
     1stic channel,i3)                                                  obse-536
 1022 format (47h no polarisation for a zero spin in the channel,i3)    obse-537
 1023 format (5x,i5,31h is a too small spin in channel,i4,13h and particobse-538
     1le,i4,35h for a polarisation of tensor order,i4)                  obse-539
 1024 format (//22h in obse  ... stop ...)                              obse-540
      end                                                               obse-541
c 05/09/95  ibm version                                         ecis95  colf-000
      subroutine colf(ncolt,ncoll,sp,ipi,wv,fg,xg,ism,lmax1,lmax2,h,iexpcolf-001
     1,z,nixt,nt,lm,lmax3,niv,idmt,lo)                                  colf-002
c coulomb functions at the matching point rm=ism*h                      colf-003
c input variables: ncolt:   number of nuclear states (coupled or not)   colf-004
c                  ncoll:   number of states with angular distribution  colf-005
c                  sp(j,*): product of charges for j=3                  colf-006
c                  wv(j,*): mass of particle and target for j=1,2       colf-007
c                           center of mass energy in mev for j=3        colf-008
c                  ism:     number of points for integration            colf-009
c                  lmax1:   maximum number of coulomb functions         colf-010
c                  lmax2:   maximum number of coulomb phase shifts      colf-011
c                  h:       integration step size in fm                 colf-012
c                  nixt:    first free address for penetrabilities      colf-013
c                  lm:      length of working space as single precision colf-014
c                  niv(*,*,3): addresses of coulomb integrals           colf-015
c                  idmt:    length of the total working fields          colf-016
c                  lo:      logical controls                            colf-017
c output variables:wv(4,*): wave number in 1/fm                         colf-018
c                  wv(5,*): coulomb parameter                           colf-019
c                  wv(6,*): square root of ratios of wave numbers       colf-020
c                           (modified by step sizes)                    colf-021
c                  wv(7,*): relativistic energy                         colf-022
c                  wv(8,*): step size times ratio of wave number to     colf-023
c                                square root of non relativistic energy colf-024
c                  wv(9,*): wave number multiplies by ratio of steps    colf-025
c                  wv(10,*):square of the product of wave number by the colf-026
c                                step size                              colf-027
c                  wv(11,*):step size for the level                     colf-028
c to take into account recoil when the masses are not the same in all   colf-029
c the channels, the wv(8,*) and wv(9,*) are multiplied by a scale factorcolf-030
c x=(initial target mass)/(target mass) and wv(10,*) is multiplied by   colf-031
c its square. always wv(10,*)=(h*wv(9,*))**2.                           colf-032
c                  fg(m,i=1 to 4,iv): f,fp,g,gp for l=m-1 and iv=1,ncoltcolf-033
c                   and integrals of f*f,f*g,g*f and g*g/r**2 from rm tocolf-034
c                   infinity if lo(44)=.true. for iv greater than ncolt colf-035
c                  xg(m,iv): sigma(m-1)-sigma(0) for iv=1,ncolt         colf-036
c                   and integrals of f*f/r**2 from zero to infinity     colf-037
c                   if lo(44)=.true. for iv greater than ncolt          colf-038
c                  nt:     first free address after penetrabilities     colf-039
c                  lmax3:  effective maximum number of coulomb functionscolf-040
c                  ipi(j,i): for i=ncoll+1 to ncolt, maximum l+1 and    colf-041
c                   starting address of penetrabilities                 colf-042
c working field in fcou: iexp(i), i=1,lmax1  powers of 10 for large     colf-043
c                    values of functions (multiples of 10**30)          colf-044
c working field in cori:  z  see in cori                                colf-045
c***********************************************************************colf-046
      implicit real*8 (a-h,o-z)                                         colf-047
      logical lo(250)                                                   colf-048
      real*4 sp(3,1),h                                                  colf-049
      dimension wv(11,1),fg(lmax1,4,1),xg(lmax2,1),z(1),iexp(1),niv(ncolcolf-050
     1l,ncoll,3),ipi(9,1)                                               colf-051
      common /dblpr/ chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn              colf-052
      nt=nixt                                                           colf-053
      xm=cm*wv(1,1)*wv(2,1)/(wv(1,1)+wv(2,1))                           colf-054
      if (lo(98)) xm=cm*wv(1,1)                                         colf-055
      if (.not.lo(209)) write (6,1000)                                  colf-056
      if (lo(209)) write (6,1001) xm                                    colf-057
      xn=chb**2/(2.d0*xm)                                               colf-058
c check of the length of working field for iexp                         colf-059
      if (lm.lt.lmax1) call memo(idmt,idmt+ncoll*lmax1-lm,lm,3,lo)      colf-060
      if (lo(216)) go to 14                                             colf-061
      amrd=xm/cm                                                        colf-062
      amr=wv(3,1)/cm+wv(1,1)+wv(2,1)                                    colf-063
      lmax3=lmax1                                                       colf-064
c wave number,coulomb parameter and call to coulomb subroutines         colf-065
      do 11 i=1,ncolt                                                   colf-066
      rec=1.d0                                                          colf-067
      if (lo(193).and.wv(1,1).ne.wv(1,i)) rec=wv(2,1)/wv(2,i)           colf-068
      hrec=dble(h)*rec                                                  colf-069
      rm=ism*dble(h)                                                    colf-070
      wv(11,i)=hrec                                                     colf-071
      if (lo(8)) go to 1                                                colf-072
      amrd=wv(1,i)*wv(2,i)/(wv(1,i)+wv(2,i))                            colf-073
      wsk2=ck*wv(3,i)*amrd                                              colf-074
      go to 3                                                           colf-075
    1 amt=wv(2,i)                                                       colf-076
      if (lo(209)) go to 2                                              colf-077
c reduced mass replaced by reduced energy (h.v. geramb's suggestion)    colf-078
c for relativistic conventional schroedinger equation                   colf-079
      if (lo(44)) amt=wv(2,1)                                           colf-080
      amrd=(amr**4-(wv(1,i)**2-amt**2)**2)/(4.*amr**3)                  colf-081
    2 wsk2=0.125d0*ck*wv(3,i)*(wv(3,i)/cm+2.d0*wv(1,i)+2.d0*amt)*(wv(3,icolf-082
     1)/cm+2.d0*wv(1,i))*(wv(3,i)/cm+2.d0*amt)/amr**2                   colf-083
    3 wv(4,i)=dsqrt(dabs(wsk2))                                         colf-084
      wv(9,i)=wv(4,i)*rec                                               colf-085
      wv(6,i)=dsqrt(wv(9,i)/wv(9,1))                                    colf-086
      wv(8,i)=hrec*dsqrt(ck*amrd)                                       colf-087
      wv(10,i)=hrec*hrec*wsk2                                           colf-088
      if (lo(209)) go to 4                                              colf-089
      wv(5,i)=0.5d0*ck*ccz*amrd*sp(3,i)/wv(4,i)                         colf-090
      g=amrd*(wv(1,i)+wv(2,i))/(wv(1,i)*wv(2,i))                        colf-091
      if (i.le.ncoll) write (6,1002) i,(wv(j,i),j=4,6),g,amrd,hrec      colf-092
      go to 5                                                           colf-093
    4 hpc=chb*wv(4,i)                                                   colf-094
      wv(7,i)=dsqrt(hpc**2+xm**2)                                       colf-095
      wv(5,i)=ccz*sp(3,i)/wv(4,i)*wv(7,i)/chb**2                        colf-096
      if (i.le.ncoll) write (6,1002) i,(wv(j,i),j=4,7),hrec             colf-097
    5 rau=rm*wv(9,i)                                                    colf-098
      eta=wv(5,i)                                                       colf-099
      if (wv(3,i).gt.0.) go to 6                                        colf-100
      if (i.gt.ncoll) go to 11                                          colf-101
      call cocl(fg(1,1,i),fg(1,2,i),fg(1,3,i),fg(1,4,i),xg(1,i),eta,rau,colf-102
     1lmax1-1)                                                          colf-103
      go to 8                                                           colf-104
    6 lx=lmax1                                                          colf-105
      if (i.gt.ncoll) lx=dmin1(4+3.3*dsqrt(wv(3,i)),lmax1+.1d0)         colf-106
      call fcou(lx-1,eta,rau,fg(1,1,i),fg(1,2,i),fg(1,3,i),fg(1,4,i),iexcolf-107
     1p,xg(1,i))                                                        colf-108
      if (i.le.ncoll) go to 8                                           colf-109
      ly=0                                                              colf-110
      do 7 j=1,lx                                                       colf-111
      if (iexp(j).gt.0) go to 7                                         colf-112
      ly=j                                                              colf-113
    7 continue                                                          colf-114
      ipi(9,i)=ly-1                                                     colf-115
      ipi(6,i)=nt-nixt                                                  colf-116
      nt=nt+ly*ipi(2,i)                                                 colf-117
      go to 11                                                          colf-118
    8 ipi(9,i)=ipi(9,1)                                                 colf-119
      if (wsk2.lt.0.d0) go to 11                                        colf-120
c computation of coulomb phase-shifts                                   colf-121
      lmx1=lmax3                                                        colf-122
c correction of large value and search for maximum effective number     colf-123
c of coulomb functions                                                  colf-124
      do 9 j=1,lmx1                                                     colf-125
      if (iexp(j).eq.0) go to 9                                         colf-126
      if (lo(208).or.iexp(j).gt.15) lmax3=min0(lmax3,j)                 colf-127
      fg(j,1,i)=fg(j,1,i)*1.d-15                                        colf-128
      fg(j,2,i)=fg(j,2,i)*1.d-15                                        colf-129
      fg(j,3,i)=fg(j,3,i)*1.d15                                         colf-130
      fg(j,4,i)=fg(j,4,i)*1.d15                                         colf-131
    9 continue                                                          colf-132
      if (lmx1.ne.lmax3) write (6,1003) lmx1,lmax3                      colf-133
      if (.not.lo(208)) ipi(9,i)=min0(lmax3-1,ipi(9,1))                 colf-134
c computation of coulomb integrals                                      colf-135
      xi=xg(1,i)                                                        colf-136
      si=wv(9,i)                                                        colf-137
      do 10 j=1,i                                                       colf-138
      k=niv(i,j,3)                                                      colf-139
      if (k.eq.0) go to 10                                              colf-140
      xj=xg(1,j)                                                        colf-141
      ej=wv(5,j)                                                        colf-142
      sj=wv(9,j)                                                        colf-143
      call cori(eta,ej,si,sj,rm,xg(1,k),xi,xj,fg(1,1,i),fg(1,1,j),z,lmaxcolf-144
     11,lmax2,lm,lmax3,fg(1,1,k),idmt,lo)                               colf-145
   10 continue                                                          colf-146
   11 continue                                                          colf-147
      do 13 i=1,ncoll                                                   colf-148
      xg(1,i)=0.d0                                                      colf-149
      do 12 j=2,lmax2                                                   colf-150
      aj=j-1                                                            colf-151
   12 xg(j,i)=xg(j-1,i)+datan2(wv(5,i),aj)                              colf-152
   13 continue                                                          colf-153
      xe=wv(7,1)                                                        colf-154
      nt=2*(nt/2)+1                                                     colf-155
      return                                                            colf-156
   14 write (6,1004)                                                    colf-157
      stop                                                              colf-158
 1000 format (/111h level       wave number  coulomb parameter   sqrt(k colf-159
     1out/k in)   rel. enhanc.      reduced mass       step size)       colf-160
 1001 format (/104h level       wave number  coulomb parameter   sqrt(k colf-161
     1out/k in)   rel. energy        step size  ** mass =,f15.8,3h **)  colf-162
 1002 format (1x,i5,6f18.10)                                            colf-163
 1003 format (48h number of finite coulomb integrals reduced from,i6,3h colf-164
     1to,i6)                                                            colf-165
 1004 format (22h in colf  ... stop ...)                                colf-166
      end                                                               colf-167
c 29/05/86  ibm version                                         ecis88  cocl-000
      subroutine cocl(g,gd,f,fd,sigma,eta,rho,l)                        cocl-001
c closed channel decreasing coulomb functions                           cocl-002
c input variables: eta: coulomb parameter; eta >= 0                     cocl-003
c                  rho: |k|*r value                                     cocl-004
c                  l:    maximum l value                                cocl-005
c output variables: sigma(i)=0 for i = 1 to l+1                         cocl-006
c       f(i):  decreasing solution at (eta,rho) for i = 1 to l+1        cocl-007
c       fd(i): derivative of f(i) for i = 1 to l+1                      cocl-008
c       g(i):  increasing solution for i = 1 to l+1                     cocl-009
c       gd(i): derivative of f(i) for i = 1 to l+1                      cocl-010
c the functions are renormalised to 1 and such that  f*gd - g*fd = 1    cocl-011
c***********************************************************************cocl-012
      implicit real*8 (a-h,o-z)                                         cocl-013
      logical ifeqal                                                    cocl-014
      dimension f(1),fd(1),g(1),gd(1),sigma(1),s(7),t(3)                cocl-015
      data s /7*0.d0/                                                   cocl-016
      if (eta.lt.0.d0.or.rho.le.0.d0) go to 11                          cocl-017
      lp1=l+1                                                           cocl-018
      if (eta.lt.1.d-6) go to 6                                         cocl-019
      is=7                                                              cocl-020
      m=10.d0*rho+3.d0                                                  cocl-021
      h=m                                                               cocl-022
      h=rho/h                                                           cocl-023
      rhoa=10.d0*(eta+1.d0)                                             cocl-024
      ifeqal=rhoa.lt.rho                                                cocl-025
      m=rhoa/h+0.5d0                                                    cocl-026
      rhoa=h*m                                                          cocl-027
      if (ifeqal.or.rhoa.lt.rho+1.5d0*h) rhoa=rho+2.d0*h                cocl-028
c expansion in powers of 1/rhoa                                         cocl-029
    1 c=1.d0/rhoa                                                       cocl-030
      a=1.d0                                                            cocl-031
      b=1.d0-c*eta                                                      cocl-032
      f(1)=a                                                            cocl-033
      fd(1)=b                                                           cocl-034
      do 2 m=1,26                                                       cocl-035
      am=m                                                              cocl-036
      d=0.5d0*(eta+am-1.d0)*(eta+am)*c/am                               cocl-037
      a=-a*d                                                            cocl-038
      b=-b*d-a*c                                                        cocl-039
      f(1)=f(1)+a                                                       cocl-040
    2 fd(1)=fd(1)+b                                                     cocl-041
      if (ifeqal) go to 7                                               cocl-042
      s(is)=f(1)                                                        cocl-043
      if (is.ne.7) go to 3                                              cocl-044
      is=6                                                              cocl-045
      rhoa=rhoa+h                                                       cocl-046
      s(7)=s(7)*dexp(h-eta*dlog(1.d0-h/rhoa))                           cocl-047
      go to 1                                                           cocl-048
c backward integration                                                  cocl-049
    3 a=2.d0+1.d0/1.2d0*h*h                                             cocl-050
      b=1.d0/6.d0*h*eta                                                 cocl-051
      c=1.d0-1.d0/12.d0*h*h                                             cocl-052
      m1=rhoa/h-0.5d0                                                   cocl-053
      m2=rho/h-1.5d0                                                    cocl-054
      am=m1                                                             cocl-055
      t(2)=b/(am+1.d0)                                                  cocl-056
      t(3)=b/am                                                         cocl-057
      js=m1                                                             cocl-058
      do 5 is=m2,m1                                                     cocl-059
      do 4 i=1,6                                                        cocl-060
    4 s(i)=s(i+1)/s(7)                                                  cocl-061
      t(1)=t(2)                                                         cocl-062
      t(2)=t(3)                                                         cocl-063
      am=js-1                                                           cocl-064
      t(3)=b/am                                                         cocl-065
      s(7)=((a+10.d0*t(2))*s(6)-(c-t(1))*s(5))/(c-t(3))                 cocl-066
    5 js=js-1                                                           cocl-067
      f(1)=1.d0                                                         cocl-068
      fd(1)=(1.d0/60.d0*(s(1)-s(7))+0.15d0*(s(6)-s(2))+0.75d0*(s(3)-s(5)cocl-069
     1))/(h*s(4))                                                       cocl-070
      go to 7                                                           cocl-071
    6 f(1)=1.d0                                                         cocl-072
      fd(1)=-1.d0                                                       cocl-073
c recurrence for l > 0                                                  cocl-074
    7 c=1.d0/rho                                                        cocl-075
      if (l.le.0) go to 9                                               cocl-076
      do 8 m=1,l                                                        cocl-077
      am=l                                                              cocl-078
      a=eta/am                                                          cocl-079
      b=a+c*am                                                          cocl-080
      f(m+1)=1.d0                                                       cocl-081
    8 fd(m+1)=(a*a-1.d0)/(b-fd(m))-b                                    cocl-082
    9 do 10 m=1,lp1                                                     cocl-083
      g(m)=1.d0                                                         cocl-084
      gd(m)=1.d0+fd(m)                                                  cocl-085
   10 sigma(m)=0.d0                                                     cocl-086
      return                                                            cocl-087
   11 write (6,1000) eta,rho                                            cocl-088
      stop                                                              cocl-089
 1000 format (17h cocl  ***  eta =,1p,d13.5,8h,  rho =,d13.5,25h   argumcocl-090
     1ent out off range)                                                cocl-091
      end                                                               cocl-092
c 29/05/86  ibm version                                         ecis88  fcou-000
      subroutine fcou(l,eta,ro,f,fp,g,gp,iexp,sigma)                    fcou-001
coulomb functions for rho > 0 and -500 < eta < 500   ex - dfcoul        fcou-002
c  for the mathematical description see chr. bardin et. al. cea-n-906   fcou-003
c  or bardin et al. comp. physics comm. vol 3 (1972) pages 73-87        fcou-004
c  numerical accuracy: at least 8 significant digits, an exception is   fcou-005
c  the region -8 < eta < -6 and ro < 125/6                              fcou-006
c the calculation of phase-shifts has been suppressed except for l=0    fcou-007
      implicit real*8 (a-h,o-z)                                         fcou-008
      dimension f(1),fp(1),g(1),gp(1),iexp(1),sigma(1)                  fcou-009
      if (ro.gt.0.d0.and.dabs(eta).le.500.d0) go to 1                   fcou-010
      write (6,1000) eta,ro                                             fcou-011
      stop                                                              fcou-012
    1 call fcz0(eta,ro,f1,fp1,g1,gp1,iexp1,sigma1)                      fcou-013
      f(1)=f1                                                           fcou-014
      fp(1)=fp1                                                         fcou-015
      g(1)=g1                                                           fcou-016
      gp(1)=gp1                                                         fcou-017
      iexp(1)=iexp1                                                     fcou-018
      sigma(1)=sigma1                                                   fcou-019
      if (l.le.0) return                                                fcou-020
      linf=0                                                            fcou-021
      lin=1                                                             fcou-022
      ind=0                                                             fcou-023
      l1=l+1                                                            fcou-024
      etac=eta*eta                                                      fcou-025
      if ((eta.gt.0.d0.and.ro.lt.eta+eta.or.ro.lt.eta+dsqrt(etac+1.d0)))fcou-026
     1 go to 7                                                          fcou-027
      if (ro.ge.eta+dsqrt(etac+l*(l+1))) go to 5                        fcou-028
    2 roinf=eta+dsqrt(etac+linf*(linf+1))                               fcou-029
      if (ro.lt.roinf) go to 3                                          fcou-030
      if (linf.ge.l) go to 4                                            fcou-031
      linf=linf+1                                                       fcou-032
      go to 2                                                           fcou-033
    3 ind=1                                                             fcou-034
    4 lin=linf+1                                                        fcou-035
    5 xm=1.d0                                                           fcou-036
      if (ind.eq.0) lin=l1                                              fcou-037
      do 6 j=2,lin                                                      fcou-038
      zig=(dsqrt(etac+xm*xm))/xm                                        fcou-039
      zag=eta/xm+xm/ro                                                  fcou-040
      f(j)=(zag*f(j-1)-fp(j-1))/zig                                     fcou-041
      fp(j)=zig*f(j-1)-zag*f(j)                                         fcou-042
      g(j)=(zag*g(j-1)-gp(j-1))/zig                                     fcou-043
      gp(j)=zig*g(j-1)-zag*g(j)                                         fcou-044
      iexp(j)=iexp(1)                                                   fcou-045
    6 xm=xm+1.d0                                                        fcou-046
      if (ind.eq.0) return                                              fcou-047
    7 ftest=f(lin)                                                      fcou-048
      fptest=fp(lin)                                                    fcou-049
      lmax=linf+25+idint(5.d0*dabs(eta))                                fcou-050
      if (lmax.lt.l) lmax=l                                             fcou-051
      fi=1.d0                                                           fcou-052
      fpi=1.d0                                                          fcou-053
    8 xm=lmax+1                                                         fcou-054
      zig=(dsqrt(etac+xm*xm))/xm                                        fcou-055
      zag=eta/xm+xm/ro                                                  fcou-056
      fl=(zag*fi+fpi)/zig                                               fcou-057
      fpl=zag*fl-zig*fi                                                 fcou-058
      if (dabs(fl).lt.1.d15.and.dabs(fpl).lt.1.d15) go to 9             fcou-059
      fl=fl*1.d-15                                                      fcou-060
      fpl=fpl*1.d-15                                                    fcou-061
    9 fi=fl                                                             fcou-062
      fpi=fpl                                                           fcou-063
      if (lmax.le.l) go to 11                                           fcou-064
   10 lmax=lmax-1                                                       fcou-065
      go to 8                                                           fcou-066
   11 f(lmax+1)=fl                                                      fcou-067
      fp(lmax+1)=fpl                                                    fcou-068
      if (lmax.gt.linf) go to 10                                        fcou-069
      fact=ftest/f(lin)                                                 fcou-070
      factp=fptest/fp(lin)                                              fcou-071
      indice=iexp(1)/15                                                 fcou-072
      xm=linf                                                           fcou-073
      do 13 j=lin,l1                                                    fcou-074
      f(j)=f(j)*fact                                                    fcou-075
      fp(j)=fp(j)*factp                                                 fcou-076
      if (j.eq.1) go to 13                                              fcou-077
      zig=(dsqrt(etac+xm*xm))/xm                                        fcou-078
      zag=eta/xm+xm/ro                                                  fcou-079
      g(j)=(zag*g(j-1)-gp(j-1))/zig                                     fcou-080
      gp(j)=zig*g(j-1)-zag*g(j)                                         fcou-081
      if (dabs(g(j)).lt.1.d15.and.dabs(gp(j)).lt.1.d15) go to 12        fcou-082
      g(j)=g(j)/1.d15                                                   fcou-083
      gp(j)=gp(j)/1.d15                                                 fcou-084
      indice=indice+1                                                   fcou-085
   12 iexp(j)=indice*15                                                 fcou-086
      a=dlog10(dabs(fp(j)))+dlog10(dabs(g(j)))                          fcou-087
      b=0.d0                                                            fcou-088
      if (a.ge.0.d0) b=1.d0                                             fcou-089
      i1=b+a                                                            fcou-090
      i2=b+dlog10(dabs(gp(j)))+dlog10(dabs(f(j)))                       fcou-091
      f(j)=f(j)*1.d1**(-i2)                                             fcou-092
      fp(j)=fp(j)*1.d1**(-i1)                                           fcou-093
   13 xm=xm+1.d0                                                        fcou-094
      return                                                            fcou-095
 1000 format (19h  fcou   ***  eta =,1p,d13.5,8h,  rho =,d13.5,25h   argfcou-096
     1ument out off range)                                              fcou-097
      end                                                               fcou-098
c 29/10/85  ibm version                                         ecis88  fcz0-000
      subroutine fcz0(eta,ro,f0,fp0,g0,gp0,iexp,sigma)                  fcz0-001
c the lower limit of riccati method for positive eta has been changed   fcz0-002
c from 30. to 28. to avoid an overflow in the normalisation             fcz0-003
      implicit real*8 (a-h,o-z)                                         fcz0-004
      sigma=sigm(eta)                                                   fcz0-005
      iexp=0                                                            fcz0-006
      if (eta.le.28.d0.and.eta.ge.-8.d0) go to 1                        fcz0-007
      call yfri(eta,ro,f0,fp0,g0,gp0,iexp,sigma)                        fcz0-008
      return                                                            fcz0-009
    1 if (eta.ne.0.d0) go to 2                                          fcz0-010
      f0=dsin(ro)                                                       fcz0-011
      g0=dcos(ro)                                                       fcz0-012
      fp0=g0                                                            fcz0-013
      gp0=-f0                                                           fcz0-014
      return                                                            fcz0-015
    2 borne=1.666666666666667d0*dabs(eta)+7.5d0                         fcz0-016
      if (ro.lt.borne) go to 3                                          fcz0-017
      call yfas(eta,ro,f0,fp0,g0,gp0,sigma)                             fcz0-018
      return                                                            fcz0-019
    3 if (eta.ge.10.d0) go to 4                                         fcz0-020
      if (eta.le.0.d0) go to 5                                          fcz0-021
      if (ro-2.d0) 15 , 5 , 5                                           fcz0-022
    4 if (eta.gt.(5.d0*ro+6.d1)/7.d0) go to 15                          fcz0-023
c rs=-1 for normalisation at the origin,rs=1 a ro=end                   fcz0-024
    5 if (eta.lt.2.5) go to 6                                           fcz0-025
      rs=1.d0                                                           fcz0-026
      call yfas(eta,borne,f0,fp0,g0,gp0,sigma)                          fcz0-027
      go to 8                                                           fcz0-028
    6 rs=-1.d0                                                          fcz0-029
c          clenshaw at the origin                                       fcz0-030
      if (eta) 7,8,8                                                    fcz0-031
    7 n=-0.5d0*eta+5.d0                                                 fcz0-032
      go to 9                                                           fcz0-033
    8 n=eta/5.d0+5.d0                                                   fcz0-034
    9 n=10*(n/2+1)                                                      fcz0-035
      tm1=1.d0                                                          fcz0-036
      t=2.d0*ro/borne-1.d0                                              fcz0-037
      x=t+t                                                             fcz0-038
      do 10 i=1,n                                                       fcz0-039
      tp1=x*t-tm1                                                       fcz0-040
      tm1=t                                                             fcz0-041
   10 t=tp1                                                             fcz0-042
      t=tm1                                                             fcz0-043
      a1=1.d-30                                                         fcz0-044
      a2=0.d0                                                           fcz0-045
      b1=0.d0                                                           fcz0-046
      b2=a1                                                             fcz0-047
      s=1.d0                                                            fcz0-048
      sa=0.d0                                                           fcz0-049
      sb=0.d0                                                           fcz0-050
      z1=0.d0                                                           fcz0-051
      z1p=0.d0                                                          fcz0-052
      ap12=0.d0                                                         fcz0-053
      ap11=0.d0                                                         fcz0-054
      bp11=0.d0                                                         fcz0-055
      z2=0.d0                                                           fcz0-056
      z2p=0.d0                                                          fcz0-057
      ap22=0.d0                                                         fcz0-058
      ap21=0.d0                                                         fcz0-059
      bp21=0.d0                                                         fcz0-060
      a0=8.d0*eta/borne-1.d0                                            fcz0-061
      bd=4.d0/(borne*borne)                                             fcz0-062
      b0=bd*(n+2)                                                       fcz0-063
      b4=bd*(n-1)                                                       fcz0-064
      r4=4.d0*n                                                         fcz0-065
c          backwards recurrence                                         fcz0-066
   11 am11=a0*(a1-ap11)+ap12-b0*b1-b4*bp11                              fcz0-067
      am21=a0*(a2-ap21)+ap22-b0*b2-b4*bp21                              fcz0-068
      sa=sa+s*a1                                                        fcz0-069
      sb=sb+s*a2                                                        fcz0-070
      z1=z1+a1*t                                                        fcz0-071
      z1p=z1p+b1*t                                                      fcz0-072
      z2=z2+a2*t                                                        fcz0-073
      z2p=z2p+b2*t                                                      fcz0-074
      if (r4.eq.0.d0) go to 12                                          fcz0-075
      bm11=r4*a1+bp11                                                   fcz0-076
      ap12=ap11                                                         fcz0-077
      ap11=a1                                                           fcz0-078
      a1=am11                                                           fcz0-079
      bp11=b1                                                           fcz0-080
      b1=bm11                                                           fcz0-081
      bm21=r4*a2+bp21                                                   fcz0-082
      ap22=ap21                                                         fcz0-083
      ap21=a2                                                           fcz0-084
      a2=am21                                                           fcz0-085
      bp21=b2                                                           fcz0-086
      b2=bm21                                                           fcz0-087
      b4=b4-bd                                                          fcz0-088
      b0=b0-bd                                                          fcz0-089
      r4=r4-4.d0                                                        fcz0-090
      s=s*rs                                                            fcz0-091
      tm1=x*t-tp1                                                       fcz0-092
      tp1=t                                                             fcz0-093
      t=tm1                                                             fcz0-094
      go to 11                                                          fcz0-095
   12 a=ap21-am21                                                       fcz0-096
      b=am11-ap11                                                       fcz0-097
      sa=a*sa+b*sb                                                      fcz0-098
      a1=a*a1+b*a2                                                      fcz0-099
      b1=a*b1+b*b2                                                      fcz0-100
      z1=a*z1+b*z2                                                      fcz0-101
      z1p=a*z1p+b*z2p                                                   fcz0-102
      sa=(sa-0.5d0*a1)/t                                                fcz0-103
      z1=z1-0.5d0*a1                                                    fcz0-104
      z1p=z1p-0.5d0*b1                                                  fcz0-105
      if (rs.lt.0.d0) go to 13                                          fcz0-106
      s=f0/(borne*sa)                                                   fcz0-107
      go to 14                                                          fcz0-108
   13 pieta=3.141592653589793d0*eta                                     fcz0-109
      s=dexp(pieta)                                                     fcz0-110
      s=dexp(-pieta/2.d0)*dsqrt(2.d0*pieta/(s-1.d0/s))/sa               fcz0-111
   14 f0=s*ro*z1                                                        fcz0-112
      fp0=s*(z1+ro*z1p/borne)                                           fcz0-113
      go to 18                                                          fcz0-114
c   regular series at the origin                                        fcz0-115
   15 pi=3.141592653589793d0                                            fcz0-116
      ro2=ro*ro                                                         fcz0-117
      etap=eta+eta                                                      fcz0-118
      pieta=pi*eta                                                      fcz0-119
      b=dexp(pieta)                                                     fcz0-120
      b=dexp(0.5d0*pieta)*dsqrt((b-1.d0/b)/(2.d0*pieta))                fcz0-121
      u0=0.d0                                                           fcz0-122
      u1=ro                                                             fcz0-123
      u=u0+u1                                                           fcz0-124
      up=1.d0                                                           fcz0-125
      xn=2.d0                                                           fcz0-126
      do 16 n=2,10000                                                   fcz0-127
      xn1=xn*(xn-1.d0)                                                  fcz0-128
      u2=(etap*ro*u1-ro2*u0)/xn1                                        fcz0-129
      u=u+u2                                                            fcz0-130
      up=up+xn*u2/ro                                                    fcz0-131
      if (dabs(u1)+dabs(u2).lt.1.d-10*dabs(u)) go to 17                 fcz0-132
      u0=u1                                                             fcz0-133
      u1=u2                                                             fcz0-134
   16 xn=xn+1.d0                                                        fcz0-135
   17 f0=u/b                                                            fcz0-136
      fp0=up/b                                                          fcz0-137
   18 call yfir(eta,ro,g0,gp0,sigma)                                    fcz0-138
      return                                                            fcz0-139
      end                                                               fcz0-140
c 29/10/85  ibm version                                         ecis88  yfri-000
      subroutine yfri(eta,rau,fo,fpo,go,gpo,idiv,sigma)                 yfri-001
      implicit real*8 (a-h,o-z)                                         yfri-002
      dimension q(5),qp(5)                                              yfri-003
c        coefficients riccati                                           yfri-004
      data g61,g62,g63,g64,g65,g66,g67,g68,g69,g610,g611/ 1.159057617187yfri-005
     15d-2,3.863525390625d-2,4.6600341796875d-2,4.8583984375d-2,1.156514yfri-006
     248567708d0,5.6874755859375d0,1.323888288225445d1,1.713083224826384yfri-007
     3d1,1.269003295898436d1,5.05523681640625d0,8.42539464010415d-1/    yfri-008
      data g81,g82,g83,g84,g85,g86,g87,g88,g89,g810,g811,g812,g813,g814,yfri-009
     1g815/ 1.851092066083633d-2,8.63842964172363d-2,1.564757823944092d-yfri-010
     21,1.430139541625977d-1,1.924622058868408d-1,8.500803152720129d0,7.yfri-011
     3265429720878595d1,3.057942376817972d2,7.699689544836672d2,1.254157yfri-012
     4054424285d3,1.361719536066055d3,9.831831171035763d2,4.547869927883yfri-013
     5148d2,1.222640538215636d2,1.455524450256709d1/                    yfri-014
      data gp61,gp62,gp63,gp64,gp65,gp66/ 0.289764404296875d-1,0.2318115yfri-015
     1234375d0,0.8056640625d0,1.6015625d0,0.3046875d0,5.625d0/          yfri-016
      data gp81,gp82,gp83,gp84,gp85,gp86,gp87,gp88/ 0.647882223129272d-1yfri-017
     1,0.6910743713378906d0,0.3322952270507811d1,0.94830322265625d1,17.6yfri-018
     296533203125d0,34.787109375d0,50.203125d0,78.75d0/                 yfri-019
      data q/ 0.4959570165d-1,0.8888888889d-2,0.2455199181d-2,0.91089580yfri-020
     161d-3,0.2534684115d-3/                                            yfri-021
      data qp/ 0.1728260369d0,0.3174603174d-3,0.3581214850d-2,0.31178246yfri-022
     180d-3,0.9073966427d-3/                                            yfri-023
      etac=eta*eta                                                      yfri-024
      eta2=eta+eta                                                      yfri-025
      etaro=eta*rau                                                     yfri-026
      ind=0                                                             yfri-027
      jnd=0                                                             yfri-028
      ig=0                                                              yfri-029
      idiv=0                                                            yfri-030
      if (eta.gt.0.d0) go to 1                                          yfri-031
      if (-etaro-14.0625d0) 3 , 15 , 15                                 yfri-032
    1 if (dabs(rau-eta2).le.1.d-9) go to 14                             yfri-033
      if (rau-eta2) 6 , 14 , 2                                          yfri-034
    2 if (rau-eta2-2.d1*(eta**0.25d0)) 4 , 15 , 15                      yfri-035
    3 nn=1                                                              yfri-036
      go to 5                                                           yfri-037
    4 nn=0                                                              yfri-038
    5 call yfcl(eta,rau,fo,fpo,go,gpo,sigma,idiv,nn)                    yfri-039
      return                                                            yfri-040
    6 if (etaro.le.12.d0) go to 3                                       yfri-041
      tra=eta2-6.75d0*(eta**0.4d0)                                      yfri-042
      if (rau.le.tra) go to 7                                           yfri-043
      ind=1                                                             yfri-044
      jnd=1                                                             yfri-045
      ro=rau                                                            yfri-046
      rau=tra                                                           yfri-047
      rau0=tra                                                          yfri-048
c             riccati   1                                               yfri-049
    7 x=rau/eta2                                                        yfri-050
      u=(1.d0-x)/x                                                      yfri-051
      x2=x*x                                                            yfri-052
      ru=dsqrt(u)                                                       yfri-053
      rx=dsqrt(x)                                                       yfri-054
      tre=1.d0/(u*ru*eta2)                                              yfri-055
      trb=tre*tre                                                       yfri-056
      fi=(dsqrt((1.d0-x)*x)+datan2(rx,1.d0-rx*rx)-1.570796326794897d0)*eyfri-057
     1ta2                                                               yfri-058
      tr1=-0.25d0*dlog(u)                                               yfri-059
      tr2=-((9.d0*u+6.d0)*u+5.d0)/48.d0                                 yfri-060
      tr3=((((-3.d0*u-4.d0)*u+6.d0)*u+12.d0)*u+5.d0)/64.d0              yfri-061
      tr4=-((((((u+2.d0)*945.d0*u+1395.d0)*u+12300.d0)*u+25191.d0)*u+198yfri-062
     190.d0)*u+5525.d0)/46080.d0                                        yfri-063
      tr5=((((((((-27.d0*u-72.d0)*u-68.d0)*u+360.d0)*u+2190.d0)*u+4808.dyfri-064
     10)*u+5148.d0)*u+2712.d0)*u+565.d0)/2048.d0                        yfri-065
      tr6=-((((((((((g61*u+g62)*u+g63)*u+g64)*u+g65)*u+g66)*u+g67)*u+g68yfri-066
     1)*u+g69)*u+g610)*u+g611)                                          yfri-067
      tr7=((((((((((((-81.d0*u-324.d0)*u-486.d0)*u-404.d0)*u+4509.d0)*u+yfri-068
     152344.d0)*u+233436.d0)*u+567864.d0)*u+838521.d0)*u+775884.d0)*u+44yfri-069
     21450.d0)*u+141660.d0)*u+19675.d0)/6144.d0                         yfri-070
      tr8=(((((((((((((g81*u+g82)*u+g83)*u+g84)*u+g85)*u+g86)*u+g87)*u+gyfri-071
     188)*u+g89)*u+g810)*u+g811)*u+g812)*u+g813)*u+g814)*u+g815         yfri-072
      fi=fi+tre*(tr2+trb*(tr4+trb*(tr6+trb*tr8)))                       yfri-073
      psi=-fi                                                           yfri-074
      tra=tr1+trb*(tr3+trb*(tr5+trb*tr7))                               yfri-075
      fi=fi+tra                                                         yfri-076
      psi=psi+tra                                                       yfri-077
      fip=ru*eta2                                                       yfri-078
      tra=1.d0/(x2*u)                                                   yfri-079
      tr1=0.25d0                                                        yfri-080
      tre=tre/(x2*x2*u)                                                 yfri-081
      trb=trb/(x2*x2)                                                   yfri-082
      tr2=-(8.d0*x-3.d0)/32.d0                                          yfri-083
      tr3=((24.d0*x-12.d0)*x+3.d0)/64.d0                                yfri-084
      tr4=(((-1536.d0*x+704.d0)*x-336.d0)*x+63.d0)/2048.d0              yfri-085
      tr5=((((1920.d0*x-576.d0)*x+504.d0)*x-180.d0)*x+27.d0)/1024.d0    yfri-086
      tr6=((((-gp66*x+gp65)*x-gp64)*x+gp63)*x-gp62)*x+gp61              yfri-087
      tr7=-((((((-40320.d0*x-10560.d0)*x-13248.d0)*x+7560.d0)*x-3132.d0)yfri-088
     1*x+756.d0)*x-81.d0)/2048.d0                                       yfri-089
      tr8=-(((((((gp88*x+gp87)*x+gp86)*x-gp85)*x+gp84)*x-gp83)*x+gp82)*xyfri-090
     1-gp81)                                                            yfri-091
      fip=fip+tre*(tr2+trb*(tr4+trb*(tr6+trb*tr8)))                     yfri-092
      psip=-fip                                                         yfri-093
      tra=tra*(tr1+trb*(tr3+trb*(tr5+trb*tr7)))                         yfri-094
      fip=fip+tra                                                       yfri-095
      psip=psip+tra                                                     yfri-096
      xxx=34.588776394910686d0                                          yfri-097
      indg=idint(psi/xxx)                                               yfri-098
      idiv=15*indg                                                      yfri-099
      if (indg.eq.0) go to 8                                            yfri-100
      psi=psi-xxx*indg                                                  yfri-101
      fi=fi+xxx*indg                                                    yfri-102
    8 fo=0.5d0*dexp(fi)                                                 yfri-103
      go=dexp(psi)                                                      yfri-104
      fpo=fo*fip/eta2                                                   yfri-105
      gpo=go*psip/eta2                                                  yfri-106
      if (jnd.eq.0) return                                              yfri-107
      rau=ro                                                            yfri-108
      go=fo                                                             yfri-109
      gpo=fpo                                                           yfri-110
    9 x=rau0-ro                                                         yfri-111
      x2=x*x                                                            yfri-112
      x3=x*x2                                                           yfri-113
      unr=1.d0/rau0                                                     yfri-114
      etr0=1.d0-2.d0*eta*unr                                            yfri-115
      u0=go                                                             yfri-116
      u1=-x*gpo                                                         yfri-117
      u2=-0.5d0*etr0*x2*u0                                              yfri-118
      s=u0+u1+u2                                                        yfri-119
      v1=u1/x                                                           yfri-120
      v2=2.d0*u2/x                                                      yfri-121
      t=v1+v2                                                           yfri-122
      xn=3.d0                                                           yfri-123
      do 11 n=3,10000                                                   yfri-124
      xn1=xn-1.d0                                                       yfri-125
      xn1=xn*xn1                                                        yfri-126
      u3=x*u2*unr*(1.d0-2.d0/xn)-etr0*u1*x2/xn1+x3*u0*unr/xn1           yfri-127
      s=s+u3                                                            yfri-128
      v3=xn*u3/x                                                        yfri-129
      t=t+v3                                                            yfri-130
      if (dabs(u3).gt.1.d-10*dabs(s)) go to 10                          yfri-131
      if (dabs(v3).le.1.d-10*dabs(t)) go to 12                          yfri-132
   10 u0=u1                                                             yfri-133
      u1=u2                                                             yfri-134
      u2=u3                                                             yfri-135
   11 xn=xn+1.d0                                                        yfri-136
   12 if (ig.eq.0) go to 13                                             yfri-137
      go=s                                                              yfri-138
      gpo=-t                                                            yfri-139
      fo=ho                                                             yfri-140
      fpo=hpo                                                           yfri-141
      return                                                            yfri-142
   13 ho=s                                                              yfri-143
      hpo=-t                                                            yfri-144
   14 et0=eta**(0.1666666666666667d0)                                   yfri-145
      etad=etac*etac                                                    yfri-146
      et=eta**(0.6666666666666667d0)                                    yfri-147
      et1=et*et                                                         yfri-148
      et2=et1*et1                                                       yfri-149
      et3=et2*et                                                        yfri-150
      et4=etad*et                                                       yfri-151
      et5=et4*et                                                        yfri-152
      fo=1.d0-q(1)/et1-q(2)/etac-q(3)/et3-q(4)/etad-q(5)/et5            yfri-153
      go=1.d0+q(1)/et1-q(2)/etac+q(3)/et3-q(4)/etad+q(5)/et5            yfri-154
      fpo=1.d0+qp(1)/et+qp(2)/etac+qp(3)/et2+qp(4)/etad+qp(5)/et4       yfri-155
      gpo=1.d0-qp(1)/et+qp(2)/etac-qp(3)/et2+qp(4)/etad-qp(5)/et4       yfri-156
      fo=0.7063326373d0*et0*fo                                          yfri-157
      go=1.223404016d0*et0*go                                           yfri-158
      fpo=0.4086957323d0*fpo/et0                                        yfri-159
      gpo=-0.7078817734d0*gpo/et0                                       yfri-160
      idiv=0                                                            yfri-161
      if (ind.eq.0) return                                              yfri-162
      ig=1                                                              yfri-163
      rau0=eta2                                                         yfri-164
      go to 9                                                           yfri-165
c        riccati 2 et 3                                                 yfri-166
   15 x=eta2/rau                                                        yfri-167
      x2=x*x                                                            yfri-168
      u=1.d0-x                                                          yfri-169
      ru=dsqrt(u)                                                       yfri-170
      u3=u*u*u                                                          yfri-171
      trd=1.d0/(u3*eta2*eta2)                                           yfri-172
      trc=x2*trd                                                        yfri-173
      tre=1.d0/(u*ru*eta2)                                              yfri-174
      fi=-0.25d0*dlog(u)                                                yfri-175
      trb=trd/64.d0                                                     yfri-176
      tr3=(((3.d0*u-4.d0)*u-6.d0)*u+12.d0)*u-5.d0                       yfri-177
      tr5=((((((((-27.d0*u+72.d0)*u-68.d0)*u-360.d0)*u+2190.d0)*u-4808.dyfri-178
     10)*u+5148.d0)*u-2712.d0)*u+565.d0)/32.d0                          yfri-179
      tr7=((((((((((((81.d0*u-324.d0)*u+486.d0)*u-404.d0)*u-4509.d0)*u+5yfri-180
     12344.d0)*u-233436.d0)*u+567864.d0)*u-838521.d0)*u+775884.d0)*u-441yfri-181
     2450.d0)*u+141660.d0)*u-19675.d0)/96.d0                            yfri-182
      fi=fi+trb*(tr3+trd*(tr5+trd*tr7))                                 yfri-183
      fip=0.25d0/u                                                      yfri-184
      trb=3.d0*trc/(64.d0*u)                                            yfri-185
      tr3=(4.d0-x)*x-8.d0                                               yfri-186
      tr5=((((9.d0*x-60.d0)*x+168.d0)*x-192.d0)*x+640.d0)/16.d0         yfri-187
      tr7=((((((-27.d0*x+252.d0)*x-1044.d0)*x+2520.d0)*x-4416.d0)*x-3520yfri-188
     1.d0)*x-13440.d0)/32.d0                                            yfri-189
      fip=fip+trb*(tr3+trc*(tr5+trc*tr7))                               yfri-190
      tra=dabs((ru-1.d0)/(ru+1.d0))                                     yfri-191
      psi=(0.5d0*dlog(tra)+ru/x)*eta2+0.785398163397448d0               yfri-192
      tr2=-((9.d0*u-6.d0)*u+5.d0)/48.d0                                 yfri-193
      tr4=((((((u-2.d0)*945.d0*u+1395.d0)*u-12300.d0)*u+25191.d0)*u-1989yfri-194
     10.d0)*u+5525.d0)/46080.d0                                         yfri-195
      tr6=(((((((((-g61*u+g62)*u-g63)*u+g64)*u-g65)*u+g66)*u-g67)*u+g68)yfri-196
     1*u-g69)*u+g610)*u-g611                                            yfri-197
      tr8=(((((((((((((g81*u-g82)*u+g83)*u-g84)*u+g85)*u-g86)*u+g87)*u-gyfri-198
     188)*u+g89)*u-g810)*u+g811)*u-g812)*u+g813)*u-g814)*u+g815         yfri-199
      psi=psi+tre*(tr2+trd*(tr4+trd*(tr6+trd*tr8)))                     yfri-200
      psip=-ru*eta2/x2                                                  yfri-201
      trb=tre*x/u                                                       yfri-202
      tr2=(3.d0*x-8.d0)/32.d0                                           yfri-203
      tr4=-(((63.d0*x-336.d0)*x+704.d0)*x-1536.d0)/2048.d0              yfri-204
      tr6=((((gp61*x-gp62)*x+gp63)*x-gp64)*x+gp65)*x-gp66               yfri-205
      tr8=((((((-gp81*x+gp82)*x-gp83)*x+gp84)*x-gp85)*x+gp86)*x+gp87)*x+yfri-206
     1gp88                                                              yfri-207
      psip=psip+trb*(tr2+trc*(tr4+trc*(tr6+trc*tr8)))                   yfri-208
      tra=dexp(fi)                                                      yfri-209
      fo=tra*dsin(psi)                                                  yfri-210
      go=tra*dcos(psi)                                                  yfri-211
      if (eta.gt.0.d0) go to 16                                         yfri-212
      tra=fo                                                            yfri-213
      fo=-go                                                            yfri-214
      go=tra                                                            yfri-215
   16 tra=-eta2/(rau*rau)                                               yfri-216
      fpo=(fip*fo+psip*go)*tra                                          yfri-217
      gpo=(fip*go-psip*fo)*tra                                          yfri-218
      return                                                            yfri-219
      end                                                               yfri-220
c 29/10/85  ibm version                                         ecis88  yfcl-000
      subroutine yfcl(eta,ro,u,up,v,vp,sigma,idiv,nn)                   yfcl-001
      implicit real*8 (a-h,o-z)                                         yfcl-002
      idiv=0                                                            yfcl-003
      etap=eta+eta                                                      yfcl-004
      ro2=ro*ro                                                         yfcl-005
      if (nn.eq.1) go to 4                                              yfcl-006
c          clenshaw asymptotic                                          yfcl-007
      e2=eta*eta                                                        yfcl-008
      m=40.d0+eta/4.d0                                                  yfcl-009
      m=2*(m/2)                                                         yfcl-010
      i=1                                                               yfcl-011
      r=m                                                               yfcl-012
      d4=4.d0*r                                                         yfcl-013
      tm1=1.d0                                                          yfcl-014
      t=4.d0*eta/ro-1.d0                                                yfcl-015
      z=t+t                                                             yfcl-016
      do 1 j=1,m                                                        yfcl-017
      tp1=z*t-tm1                                                       yfcl-018
      tm1=t                                                             yfcl-019
    1 t=tp1                                                             yfcl-020
      t=tm1                                                             yfcl-021
      gr=0.d0                                                           yfcl-022
      gpr=0.d0                                                          yfcl-023
      scr=0.d0                                                          yfcl-024
      ep1r=0.d0                                                         yfcl-025
      er=0.d0                                                           yfcl-026
      dp1r=0.d0                                                         yfcl-027
      dr=1.d-25                                                         yfcl-028
      c1r=r+1.d0                                                        yfcl-029
      c0r=e2-r*(r+1.d0)                                                 yfcl-030
      gi=0.d0                                                           yfcl-031
      gpi=0.d0                                                          yfcl-032
      sci=0.d0                                                          yfcl-033
      ep1i=0.d0                                                         yfcl-034
      ei=0.d0                                                           yfcl-035
      dp1i=0.d0                                                         yfcl-036
      di=0.d0                                                           yfcl-037
      c1i=-3.d0*eta                                                     yfcl-038
      c0i=-(r+r+1.d0)*eta                                               yfcl-039
c          backwards recurrence                                         yfcl-040
    2 scz=c0r*c0r+c0i*c0i                                               yfcl-041
      c2r=c1r*dr-c1i*di+0.5d0*(dp1r+er+ep1r)-eta*dp1i                   yfcl-042
      c2i=c1r*di+c1i*dr+0.5d0*(dp1i+ei+ep1i)+eta*dp1r                   yfcl-043
      cr=(c2r*c0r+c2i*c0i)/scz                                          yfcl-044
      ci=(c0r*c2i-c0i*c2r)/scz                                          yfcl-045
      gr=gr+cr*t                                                        yfcl-046
      gpr=gpr+dr*t                                                      yfcl-047
      scr=scr+i*cr                                                      yfcl-048
      gi=gi+ci*t                                                        yfcl-049
      gpi=gpi+di*t                                                      yfcl-050
      sci=sci+i*ci                                                      yfcl-051
      if (r.eq.0.d0) go to 3                                            yfcl-052
      em1r=d4*dr+ep1r                                                   yfcl-053
      dm1r=d4*cr+dp1r                                                   yfcl-054
      ep1r=er                                                           yfcl-055
      er=em1r                                                           yfcl-056
      dp1r=dr                                                           yfcl-057
      dr=dm1r                                                           yfcl-058
      em1i=d4*di+ep1i                                                   yfcl-059
      dm1i=d4*ci+dp1i                                                   yfcl-060
      ep1i=ei                                                           yfcl-061
      ei=em1i                                                           yfcl-062
      dp1i=di                                                           yfcl-063
      di=dm1i                                                           yfcl-064
      tm1=z*t-tp1                                                       yfcl-065
      tp1=t                                                             yfcl-066
      t=tm1                                                             yfcl-067
      c0r=c0r+r+r                                                       yfcl-068
      c0i=c0i+etap                                                      yfcl-069
      c1r=c1r-1.d0                                                      yfcl-070
      i=-i                                                              yfcl-071
      d4=d4-4.d0                                                        yfcl-072
      r=r-1.d0                                                          yfcl-073
      go to 2                                                           yfcl-074
    3 scr=scr-0.5d0*cr                                                  yfcl-075
      gr=gr-0.5d0*cr                                                    yfcl-076
      gpr=gpr-0.5d0*dr                                                  yfcl-077
      sci=sci-0.5d0*ci                                                  yfcl-078
      gi=gi-0.5d0*ci                                                    yfcl-079
      gpi=gpi-0.5d0*di                                                  yfcl-080
      z=sigma+ro-eta*dlog(ro+ro)                                        yfcl-081
      scz=scr*scr+sci*sci                                               yfcl-082
      cr=dcos(z)                                                        yfcl-083
      ci=dsin(z)                                                        yfcl-084
      dr=(cr*scr+ci*sci)/scz                                            yfcl-085
      di=(ci*scr-cr*sci)/scz                                            yfcl-086
      sci=1.d0-eta/ro                                                   yfcl-087
      scr=etap/ro2                                                      yfcl-088
      cr=-gi*sci-gpr*scr                                                yfcl-089
      ci=gr*sci-gpi*scr                                                 yfcl-090
      vp=dr*cr-di*ci                                                    yfcl-091
      up=dr*ci+di*cr                                                    yfcl-092
      v=dr*gr-di*gi                                                     yfcl-093
      u=dr*gi+di*gr                                                     yfcl-094
      return                                                            yfcl-095
c          series at the origin                                         yfcl-096
    4 pi=3.141592653589793d0                                            yfcl-097
      pieta=pi*eta                                                      yfcl-098
      if (dabs(pieta).gt.36.d0) go to 5                                 yfcl-099
      p=dsqrt((dexp(2.d0*pieta)-1.d0)/(2.d0*pieta))                     yfcl-100
      go to 7                                                           yfcl-101
    5 if (pieta.gt.0.d0) go to 6                                        yfcl-102
      p=1.d0/dsqrt(-pieta-pieta)                                        yfcl-103
      go to 7                                                           yfcl-104
    6 z=34.588776394910686d0                                            yfcl-105
      idiv=pieta/z                                                      yfcl-106
      p=dexp(pieta-idiv*z)/dsqrt(pieta+pieta)                           yfcl-107
      idiv=15*idiv                                                      yfcl-108
    7 z1=etap*(psi(eta)+.6931471805599453d0)                            yfcl-109
      u0=0.d0                                                           yfcl-110
      u1=ro                                                             yfcl-111
      v0=1.d0                                                           yfcl-112
      v1=z1*ro                                                          yfcl-113
      u=u0+u1                                                           yfcl-114
      v=v0+v1                                                           yfcl-115
      up=1.d0                                                           yfcl-116
      vp=z1                                                             yfcl-117
      xn=2.d0                                                           yfcl-118
      do 9 n=2,10000                                                    yfcl-119
      xn1=xn*(xn-1.d0)                                                  yfcl-120
      u2=(etap*ro*u1-ro2*u0)/xn1                                        yfcl-121
      u=u+u2                                                            yfcl-122
      v2=(etap*ro*v1-ro2*v0-etap*(xn+xn-1.d0)*u2)/xn1                   yfcl-123
      v=v+v2                                                            yfcl-124
      up=up+xn*u2/ro                                                    yfcl-125
      vp=vp+xn*v2/ro                                                    yfcl-126
      if (dabs(u2).gt.1.d-14*dabs(u)) go to 8                           yfcl-127
      if (dabs(v2).le.1.d-14*dabs(v)) go to 10                          yfcl-128
    8 u0=u1                                                             yfcl-129
      u1=u2                                                             yfcl-130
      v0=v1                                                             yfcl-131
      v1=v2                                                             yfcl-132
    9 xn=xn+1.d0                                                        yfcl-133
   10 pp=v+etap*u*dlog(ro)                                              yfcl-134
      w=u/p                                                             yfcl-135
      wp=up/p                                                           yfcl-136
      v=p*pp                                                            yfcl-137
      vp=p*(vp+etap*(up*dlog(ro)+u/ro))                                 yfcl-138
      u=w                                                               yfcl-139
      up=wp                                                             yfcl-140
      return                                                            yfcl-141
      end                                                               yfcl-142
c 29/10/85  ibm version                                         ecis88  yfas-000
      subroutine yfas(eta,rau,fo,fpo,go,gpo,sigo)                       yfas-001
      implicit real*8 (a-h,o-z)                                         yfas-002
c          asymptotic expansions                                        yfas-003
      trb=0.d0                                                          yfas-004
      rau2=rau+rau                                                      yfas-005
      etac=eta*eta                                                      yfas-006
      n=0                                                               yfas-007
      ps=1.d0                                                           yfas-008
      gs=0.d0                                                           yfas-009
      pt=0.d0                                                           yfas-010
      gt=1.d0-eta/rau                                                   yfas-011
      sf=ps                                                             yfas-012
      sg=gs                                                             yfas-013
      spf=pt                                                            yfas-014
      spg=gt                                                            yfas-015
    1 denom=(n+1)*rau2                                                  yfas-016
      an=(n+n+1)*eta/denom                                              yfas-017
      bn=(etac-n*(n+1))/denom                                           yfas-018
      ps1=an*ps-bn*pt                                                   yfas-019
      gs1=an*gs-bn*gt-ps1/rau                                           yfas-020
      pt1=an*pt+bn*ps                                                   yfas-021
      gt1=an*gt+bn*gs-pt1/rau                                           yfas-022
      sf=sf+ps1                                                         yfas-023
      sg=sg+gs1                                                         yfas-024
      spf=spf+pt1                                                       yfas-025
      spg=spg+gt1                                                       yfas-026
      n=n+1                                                             yfas-027
      if (dabs(ps1).gt.trb) trb=dabs(ps1)                               yfas-028
      if (dabs(ps1).lt.1.d-10*trb.or.bn.lt.-1.d0) go to 2               yfas-029
      ps=ps1                                                            yfas-030
      gs=gs1                                                            yfas-031
      pt=pt1                                                            yfas-032
      gt=gt1                                                            yfas-033
      go to 1                                                           yfas-034
    2 tetao=rau-eta*dlog(rau2)+sigo                                     yfas-035
      tra=dsin(tetao)                                                   yfas-036
      trb=dcos(tetao)                                                   yfas-037
      go=sf*trb-spf*tra                                                 yfas-038
      gpo=sg*trb-spg*tra                                                yfas-039
      fo=spf*trb+sf*tra                                                 yfas-040
      fpo=spg*trb+sg*tra                                                yfas-041
      return                                                            yfas-042
      end                                                               yfas-043
c 29/10/85  ibm version                                         ecis88  yfir-000
      subroutine yfir(eta,ro,g0,gp0,sigma)                              yfir-001
c  irregular coulomb function                                           yfir-002
      implicit real*8(a-h,o-z)                                          yfir-003
      if (eta.le.0.d0) go to 9                                          yfir-004
      if ((ro.le.(54.-eta)/80.).or.(eta.le.22.d0.and.ro.le.(30.-eta)/20.yfir-005
     1).or.(eta.le.18.d0.and.ro.le.0.075*(26.-eta)).or.(eta.le.10.d0.andyfir-006
     2.ro.le..15*(18.-eta)).or.(eta.le.3.d0.and.ro.le.2.25+7.35*(3.-eta)yfir-007
     3)) go to 5                                                        yfir-008
c   taylor series starting from rau0                                    yfir-009
    1 rau0=1.666666666666667d0*dabs(eta)+7.5d0                          yfir-010
      call yfas(eta,rau0,f0,fp0,g0,gp0,sigma)                           yfir-011
      x=rau0-ro                                                         yfir-012
      x2=x*x                                                            yfir-013
      x3=x*x2                                                           yfir-014
      unr=1.d0/rau0                                                     yfir-015
      etr0=1.d0-2.d0*eta*unr                                            yfir-016
      u0=g0                                                             yfir-017
      u1=-x*gp0                                                         yfir-018
      u2=-0.5d0*etr0*x2*u0                                              yfir-019
      s=u0+u1+u2                                                        yfir-020
      v1=u1/x                                                           yfir-021
      v2=2.d0*u2/x                                                      yfir-022
      t=v1+v2                                                           yfir-023
      xn=3.d0                                                           yfir-024
      do 3 n=3,10000                                                    yfir-025
      xn1=xn-1.d0                                                       yfir-026
      xn1=xn*xn1                                                        yfir-027
      u3=x*u2*unr*(1.d0-2.d0/xn)-etr0*u1*x2/xn1+x3*u0*unr/xn1           yfir-028
      s=s+u3                                                            yfir-029
      v3=xn*u3/x                                                        yfir-030
      t=t+v3                                                            yfir-031
      if (dabs(u3).gt.1.d-11*dabs(s)) go to 2                           yfir-032
      if (dabs(v3).le.1.d-11*dabs(t)) go to 4                           yfir-033
    2 u0=u1                                                             yfir-034
      u1=u2                                                             yfir-035
      u2=u3                                                             yfir-036
    3 xn=xn+1.d0                                                        yfir-037
    4 g0=s                                                              yfir-038
      gp0=-t                                                            yfir-039
      return                                                            yfir-040
c   series at the origin                                                yfir-041
    5 pi=3.141592653589793d0                                            yfir-042
      eta2=eta*eta                                                      yfir-043
      ro2=ro*ro                                                         yfir-044
      etap=eta+eta                                                      yfir-045
      pieta=pi*eta                                                      yfir-046
      pieta2=0.5d0*pieta                                                yfir-047
      b=dexp(pieta)                                                     yfir-048
      b=dexp(pieta2)*dsqrt((b-1.d0/b)/(2.d0*pieta))                     yfir-049
      c1=etap*(psi(eta)+.6931471805599453d0)                            yfir-050
      u0=0.d0                                                           yfir-051
      u1=ro                                                             yfir-052
      v0=1.d0                                                           yfir-053
      v1=c1*ro                                                          yfir-054
      u=u0+u1                                                           yfir-055
      v=v0+v1                                                           yfir-056
      up=1.d0                                                           yfir-057
      vp=c1                                                             yfir-058
      xn=2.d0                                                           yfir-059
      do 7 n=2,10000                                                    yfir-060
      xn1=xn*(xn-1.d0)                                                  yfir-061
      u2=(etap*ro*u1-ro2*u0)/xn1                                        yfir-062
      u=u+u2                                                            yfir-063
      v2=(etap*ro*v1-ro2*v0-etap*(xn+xn-1.d0)*u2)/xn1                   yfir-064
      v=v+v2                                                            yfir-065
      up=up+xn*u2/ro                                                    yfir-066
      vp=vp+xn*v2/ro                                                    yfir-067
      if (dabs(u2).gt.1.d-14*dabs(u)) go to 6                           yfir-068
      if (dabs(v2).le.1.d-14*dabs(v)) go to 8                           yfir-069
    6 u0=u1                                                             yfir-070
      u1=u2                                                             yfir-071
      v0=v1                                                             yfir-072
      v1=v2                                                             yfir-073
    7 xn=xn+1.d0                                                        yfir-074
    8 gp=v+etap*u*dlog(ro)                                              yfir-075
      g0=b*gp                                                           yfir-076
      gp0=b*(vp+etap*(up*dlog(ro)+u/ro))                                yfir-077
      return                                                            yfir-078
    9 if (ro.le.0.5d0*eta+9.d0) go to 5                                 yfir-079
      go to 1                                                           yfir-080
      end                                                               yfir-081
c 29/10/85  ibm version                                         ecis88  sigm-000
      function sigm(eta)                                                sigm-001
c  coulomb phase shift sigma0                                           sigm-002
      implicit real*8 (a-h,o-z)                                         sigm-003
      dimension c(2,13)                                                 sigm-004
      data c1,c2,c3,c4,c5,c6,c7,c /8.333333333333333d-2,-2.7777777777777sigm-005
     178d-3,7.936507936507937d-4,-5.952380952380952d-4,8.417508417508417sigm-006
     2d-4,-1.917526917526918d-3,6.41025641025641d-3,1.d-16,1.4d-15,-5.4dsigm-007
     3-15,-2.07d-14,5.1d-13,-3.6968d-12,7.7823d-12,1.043427d-10,-1.18127sigm-008
     446d-9,5.0020075d-9,6.116095d-9,-2.056338417d-7,1.133027232d-6,-1.2sigm-009
     5504934821d-6,-2.01348547807d-5,1.280502823882d-4,-2.152416741149d-sigm-010
     64,-1.1651675918591d-3,7.218943246663d-3,-9.621971527877d-3,-4.2197sigm-011
     77345555443d-2,.1665386113822915d0,-4.20026350340952d-2,-.655878071sigm-012
     85202538d0,.5772156649015329d0,1.d0/                               sigm-013
      if (dabs(eta).gt.1.d-16) go to 1                                  sigm-014
      sigm=-c(1,13)*eta                                                 sigm-015
      go to 5                                                           sigm-016
    1 e=eta*eta                                                         sigm-017
      if (e.gt.1.d0) go to 3                                            sigm-018
      x=c(1,1)                                                          sigm-019
      y=c(2,1)                                                          sigm-020
      do 2 i=2,13                                                       sigm-021
      x=c(1,i)-e*x                                                      sigm-022
    2 y=c(2,i)-e*y                                                      sigm-023
      sigm=-datan2(eta*x,y)                                             sigm-024
      go to 5                                                           sigm-025
    3 l=1                                                               sigm-026
      if (e.lt.64.d0) l=2.d0+dsqrt(64.d0-e)                             sigm-027
      z=l                                                               sigm-028
      x=dsqrt(z*z+e)                                                    sigm-029
      y=datan2(eta,z)                                                   sigm-030
      e=1.d0/(z*z+e)                                                    sigm-031
      sigm=eta*(dlog(x)-1.d0)+(z-.5d0)*y-(c1*dsin(y)+e*(c2*dsin(3.d0*y)+sigm-032
     1e*(c3*dsin(5.d0*y)+e*(c4*dsin(7.d0*y)+e*(c5*dsin(9.d0*y)+e*(c6*dsisigm-033
     2n(11.d0*y)+e*c7*dsin(13.d0*y)))))))/x                             sigm-034
      if (l.eq.1) go to 5                                               sigm-035
      j=l-1                                                             sigm-036
      do 4 i=1,j                                                        sigm-037
      z=z-1.d0                                                          sigm-038
    4 sigm=sigm-datan2(eta,z)                                           sigm-039
    5 return                                                            sigm-040
      end                                                               sigm-041
c 29/10/85  ibm version                                         ecis88  psi -000
      function psi(eta)                                                 psi -001
c  real part of psi(1-i*eta)-psi(1)-psi(i)                              psi -002
c  with psi(z) = logarithmic derivative of the gamma function           psi -003
      double precision psi,e,eta,x,y,c,c1,c2,c3,c4,c5,c6,b(13)          psi -004
      data c/.5772156649015329d0/,c1/8.333333333333333d-2/,c2/-8.3333333psi -005
     133333333d-3/,c3/3.968253968253968d-3/,c4/-4.166666666666667d-3/,c5psi -006
     2/7.575757575757576d-3/,c6/-2.109279609279609d-2/,b/7.4507117898354psi -007
     328d-9,2.980350351465228d-8,1.192199259653110d-7,4.769329867878064dpsi -008
     4-7,1.908212716553938d-6,7.637197637899762d-6,3.058823630702049d-5,psi -009
     51.227133475784893d-4,4.941886041194665d-4,2.008392826082234d-3,8.3psi -010
     649277381922945d-3,3.692775514337036d-2,2.020569031595948d-1/      psi -011
      if (dabs(eta).gt.1.d-8) go to 1                                   psi -012
      psi=c-1.d0                                                        psi -013
      go to 5                                                           psi -014
    1 e=eta*eta                                                         psi -015
      if (e.gt..25d0) go to 3                                           psi -016
      x=b(1)                                                            psi -017
      do 2 i=2,13                                                       psi -018
    2 x=b(i)-e*x                                                        psi -019
      psi=c-1.d0/(1.d0+e)+e*x                                           psi -020
      go to 5                                                           psi -021
    3 l=1                                                               psi -022
      if (e.lt.64.d0) l=2.d0+dsqrt(64.d0-e)                             psi -023
      x=dsqrt(l*l+e)                                                    psi -024
      y=datan(eta/l)                                                    psi -025
      e=1.d0/(l*l+e)                                                    psi -026
      psi=dlog(x)-.5d0*l*e-e*(c1*dcos(2*y)+e*(c2*dcos(4*y)+e*(c3*dcos(6*psi -027
     1y)+e*(c4*dcos(8*y)+e*(c5*dcos(10*y)+e*(c6*dcos(12*y)+e*c1*dcos(14*psi -028
     2y)))))))+c+c-1.d0                                                 psi -029
      if (l.eq.1) go to 5                                               psi -030
      j=l-1                                                             psi -031
      e=eta*eta                                                         psi -032
      do 4 i=1,j                                                        psi -033
    4 psi=psi-1.d0/(i+e/i)                                              psi -034
    5 return                                                            psi -035
      end                                                               psi -036
c 14/04/89  ibm version                                         ecis89  cori-000
      subroutine cori(ei,ef,s1,s2,rr,t,ssi,ssf,fgi,fgf,z,lm1,lm2,lm3,lm,cori-001
     1w,idmt,lo)                                                        cori-002
c    computation of the integrals from rs to infinity of products of    cori-003
c regular or irregular coulomb functions of same l-value divided by r**2cori-004
c for l=0 to l=lm-1 and of regular functions of same l divided by r**2  cori-005
c l=0 to l=lm2-1.calls corz if there is no charge.                      cori-006
c input variables:  ei,ef:  coulomb parameters.                         cori-007
c                   s1,s2:  wave numbers.                               cori-008
c                   rr:     matching radius.                            cori-009
c                   ssi,ssf:coulomb phase-shifts for l=0.               cori-010
c                   fgi,fgf:regular and irregular coulomb functions.    cori-011
c                   lm1:    maximum number of integrals from rs to inf. cori-012
c                   lm2:    number of integrals from 0 to infinity      cori-013
c                   lm3:    dimension of working space(single precision)cori-014
c                   lm:     actual number of integrals from rs to inf.  cori-015
c                   idmt:   dimension of total working space.           cori-016
c                   lo:     logical controls.                           cori-017
c output:variables: t:      integrals from 0 to infinity for products ofcori-018
c                           regular functions.                          cori-019
c                   w:      integrals from rs to infinity.              cori-020
c working space:    z:      for the computation of hypergeometric f3.   cori-021
c***********************************************************************cori-022
      implicit real*8 (a-h,o-z)                                         cori-023
      logical lo(250),ll(4)                                             cori-024
      dimension w(lm1,4),x1(4),x2(4),x3(4),x4(4),fgi(lm1,2),fgf(lm1,2),zcori-025
     1(4,2),t(4),y(4,4),az(2),cc(4,4)                                   cori-026
      data pi /3.1415926535897932d0/                                    cori-027
      si=s1*rr                                                          cori-028
      sf=s2*rr                                                          cori-029
      if (ei.eq.0.) go to 36                                            cori-030
c computation of some constants                                         cori-031
      if (si.gt.2.2*sf) go to 38                                        cori-032
      rs=dsqrt(si*sf)                                                   cori-033
      fs=dsqrt(sf/si)                                                   cori-034
      fi=ei**2                                                          cori-035
      ff=ef**2                                                          cori-036
      eif=ei*ef                                                         cori-037
      ex=ef-ei                                                          cori-038
      sif=si/sf+sf/si                                                   cori-039
      cx=fi*si**2+ff*sf**2                                              cori-040
      dx=fi*si**2-ff*sf**2                                              cori-041
      if (dabs(dx).gt.1.d-10) go to 1                                   cori-042
      dt=1.d0                                                           cori-043
      dx=0.d0                                                           cori-044
      dy=eif                                                            cori-045
      go to 2                                                           cori-046
    1 dt=si**2-sf**2                                                    cori-047
      dy=(fi*si**4-ff*sf**4)/(si*sf)                                    cori-048
      if (dabs(dt).lt.1.d-10) go to 2                                   cori-049
      dx=dx/dt                                                          cori-050
      dy=dy/dt                                                          cori-051
      dt=1.d0                                                           cori-052
    2 rm=dmax1((5.d0*dabs(ei)+22.5d0)*fs,(5.d0*dabs(ef)+22.5d0)/fs,.18d0cori-053
     1*eif)/3.d0                                                        cori-054
      if (rm.lt.rs) rm=rs                                               cori-055
c computation of integrals from rs to infinity for l=0 and l=1          cori-056
      call cor0(ei,ef,ssi,ssf,zr,zi,z,lm3,idmt,rm,rs,fs,fi,ff,ex,cc,lo) cori-057
c computation of integrals from 0 to infinity for l=0 and l=1           cori-058
      a1=dsqrt(1.d0+fi)                                                 cori-059
      b1=dsqrt(1.d0+ff)                                                 cori-060
      if (ei.ne.ef.or.si.ne.sf) go to 4                                 cori-061
c when ei=ef=e   i(l,l,2)=(pi-pi*coth(pi*e)-1/e+sum on n from 0 to l of cori-062
c                2*e/(n**2+e**2))/2/(2*l+1)                             cori-063
      a2=pi*.5d0                                                        cori-064
      b2=dexp(-2.d0*pi*ei)                                              cori-065
      if (ei.ne.0.d0) a2=a2-.5d0*pi*(b2+1.d0)/(1.d0-b2)+.5d0/ei         cori-066
      b3=0.d0                                                           cori-067
      do 3 i=1,lm2                                                      cori-068
      b2=b3                                                             cori-069
      b3=b3+1.d0                                                        cori-070
      t(i)=a2/(b2+b3)                                                   cori-071
    3 a2=a2+ei/(b3**2+fi)                                               cori-072
      ll(1)=.true.                                                      cori-073
      ll(2)=.true.                                                      cori-074
      go to 11                                                          cori-075
c computation of i(0,0,1) and i(1,1,1)                                  cori-076
c  i(l,l,1) = 2*(si*sf)**(1/2)/(si+sf)**2 * exp( pi*sign(sf-si)*ex/2) * cori-077
c real part of (|sf-si|/(sf+si))**(i*ex)*gamma(-i*ex)*exp(i*(xef-xei))* cori-078
c   2f1(l+1-i*ei,l+1+i*ef;1+i*ef-i*ei;((sf-si)/(sf+si))**2)             cori-079
c  where ex=ef-ei.                                                      cori-080
    4 a2=ex**2                                                          cori-081
      b2=((si-sf)/(si+sf))**2                                           cori-082
      a3=2.d0*dexp(zr-pi*.5d0*ex)/(si+sf)**2*rs                         cori-083
      if (sf.gt.si) a3=a3*dexp(pi*ex)                                   cori-084
      a4=zi+ssf-ssi+.5d0*dlog(b2)*ex                                    cori-085
      a5=a3*dcos(a4)                                                    cori-086
      a6=a3*dsin(a4)                                                    cori-087
      a3=a5                                                             cori-088
      a4=a6                                                             cori-089
      a7=0.d0                                                           cori-090
      do 7 l=1,2                                                        cori-091
      az(l)=a3                                                          cori-092
      a8=0.d0                                                           cori-093
      do 5 n=1,500                                                      cori-094
      a8=a8+1.d0                                                        cori-095
      b3=(a7+a8)**2+eif                                                 cori-096
      b4=(a7+a8)*ex                                                     cori-097
      b7=b2/(a8*(a8**2+a2))                                             cori-098
      b5=(b3*a8+b4*ex)*b7                                               cori-099
      b6=(a8*b4-ex*b3)*b7                                               cori-100
      a9=a3*b5-a4*b6                                                    cori-101
      a4=a3*b6+a4*b5                                                    cori-102
      a3=a9                                                             cori-103
      az(l)=az(l)+a3                                                    cori-104
      if (dabs(a3)+dabs(a4).lt.dabs(az(l))*1.d-16) go to 6              cori-105
    5 continue                                                          cori-106
      li=l-1                                                            cori-107
      write (6,1000) li,li,ei,ef,az(l),a3,a4                            cori-108
    6 b3=1.d0+eif                                                       cori-109
      b5=(1.d0-b2)/dsqrt(b3*b3+ex*ex)                                   cori-110
      a7=1.d0                                                           cori-111
      a3=b5*(a5*b3-a6*ex)                                               cori-112
    7 a4=b5*(a6*b3+a5*ex)                                               cori-113
c computation of i(0,0,2) and i(1,1,2) . only the first is needed       cori-114
c   for backward recurrence                                             cori-115
c i(l,l,2) = pi/(2*sh(pi*ex)*( (y/si-1/(y*sf))/(2*l+1)+((si-sf)/(sf*si))cori-116
c  *exp(-pi*ex/2) * real part of exp(i*(xei-xef))*((si-sf)/2)**(-i*ex)  cori-117
c  *sf**(i*ef)*si**(-i*ei)*f3(-l+i*ei,-l-i*ef,l+1+i*ei,l+1-i*ef,2-i*ex; cori-118
c  (si-sf)/(2*si),(sf-si)/(2*sf))                                       cori-119
c    where  y=exp(pi*ex/2)*(si/sf)**l*|gamma(l+1+i*ef)/gamma(l+1+i*ei)| cori-120
      a2=ex/(2.d0*ef)                                                   cori-121
      a3=-a2*(si-sf)/(2.d0*sf)                                          cori-122
      a4=a2*(si-sf)/(2.d0*si)                                           cori-123
      ll(1)=lm*dabs(ex).gt.3.d0*dabs(ei+ef)                             cori-124
      ll(2)=.not.ll(1)                                                  cori-125
      b3=dexp(-zr)/ex/dsqrt(1.d0+ex**2)                                 cori-126
      b4=ssi-ssf-zi+datan(ex)-.5d0*pi+ef*dlog(sf)-ei*dlog(si)-ex*dlog(.5cori-127
     1d0*dabs(si-sf))                                                   cori-128
      if (sf.gt.si) b3=b3*dexp(ex*pi)                                   cori-129
      a5=b3*dcos(b4)                                                    cori-130
      a6=b3*dsin(b4)                                                    cori-131
      b5=a5                                                             cori-132
      b6=a6                                                             cori-133
      b2=dsqrt(ef/ei*(dexp(-2.d0*pi*ei)-1.d0)/(dexp(-2.d0*pi*ef)-1.d0)) cori-134
      a7=dexp(-.5d0*pi*ex)                                              cori-135
      a8=pi*a7**2/(1.d0-a7**4)*rs                                       cori-136
      a7=a7*(sf-si)/(sf*si)                                             cori-137
      a9=0.d0                                                           cori-138
      z(1,1)=1.d0                                                       cori-139
      z(2,1)=0.d0                                                       cori-140
      z(3,1)=1.d0                                                       cori-141
      z(4,1)=0.d0                                                       cori-142
      do 10 l=1,2                                                       cori-143
      li=l-1                                                            cori-144
      t(l)=b5                                                           cori-145
      c1=0.d0                                                           cori-146
      n=0                                                               cori-147
    8 n=n+1                                                             cori-148
      if (8*n.gt.lm3) call memo(idmt,idmt+8*n-lm3,lm3,3,lo)             cori-149
      if (lo(216)) go to 37                                             cori-150
      c1=c1+1.d0                                                        cori-151
      b3=c1+1.d0                                                        cori-152
      b4=b3**2+ex**2                                                    cori-153
      b9=(b5*b3-ex*b6)/(b4*a2)                                          cori-154
      b6=(b5*ex+b6*b3)/(b4*a2)                                          cori-155
      b5=b9                                                             cori-156
      b3=(a9+c1)*(c1-a9-1.d0)-fi                                        cori-157
      b4=ei*(2.d0*c1-1.d0)                                              cori-158
      z(1,n+1)=(z(1,n)*b3-z(2,n)*b4)*a4/c1                              cori-159
      z(2,n+1)=(z(1,n)*b4+z(2,n)*b3)*a4/c1                              cori-160
      b3=(a9+c1)*(c1-a9-1.d0)-ff                                        cori-161
      b4=-ef*(2.d0*c1-1.d0)                                             cori-162
      z(3,n+1)=(z(3,n)*b3-z(4,n)*b4)*a3/c1                              cori-163
      z(4,n+1)=(z(3,n)*b4+z(4,n)*b3)*a3/c1                              cori-164
      b7=z(1,n+1)                                                       cori-165
      b8=z(2,n+1)                                                       cori-166
      do 9 j=1,n                                                        cori-167
      m=n+2-j                                                           cori-168
      b7=b7+z(1,j)*z(3,m)-z(2,j)*z(4,m)                                 cori-169
    9 b8=b8+z(2,j)*z(3,m)+z(1,j)*z(4,m)                                 cori-170
      if (dabs(b7)+dabs(b8).gt.1.d30) go to 39                          cori-171
      b7=b7*b5-b8*b6                                                    cori-172
      t(l)=t(l)+b7                                                      cori-173
      if (dabs(b7).gt.dabs(t(l))*1.d-16) go to 8                        cori-174
      t(l)=a8*(a7*t(l)+(b2/si-1.d0/(b2*sf))/(2.d0*a9+1.d0))             cori-175
      if (ll(1)) go to 11                                               cori-176
      a9=1.d0                                                           cori-177
      b2=b2*sf/si*b1/a1                                                 cori-178
      b4=b1*a1                                                          cori-179
      b3=(1.d0+eif)/b4                                                  cori-180
      b4=-ex/b4                                                         cori-181
      b5=b3*a5-b4*a6                                                    cori-182
   10 b6=b3*a6+b4*a5                                                    cori-183
c comp. of the integrals from 0 to infinity                             cori-184
c upwards recurrences for the other integrals:  starting values         cori-185
   11 do 12 j=1,4                                                       cori-186
      w(1,j)=cc(j,3)                                                    cori-187
      w(2,j)=cc(j,4)                                                    cori-188
      x2(j)=cc(j,1)/rs                                                  cori-189
   12 x3(j)=cc(j,2)/rs                                                  cori-190
      rm=rs**2                                                          cori-191
      in=1                                                              cori-192
      lx=lm                                                             cori-193
      if (.not.ll(1)) lx=max0(lx,lm2)                                   cori-194
      ll(3)=ll(1)                                                       cori-195
      i=2                                                               cori-196
      if (ll(1)) go to 13                                               cori-197
      c4=az(1)                                                          cori-198
      c5=az(2)                                                          cori-199
   13 i=i+1                                                             cori-200
      a2=a1                                                             cori-201
      b2=b1                                                             cori-202
      a=i-1                                                             cori-203
      a1=dsqrt(a**2+fi)                                                 cori-204
      b1=dsqrt(a**2+ff)                                                 cori-205
      ll(4)=i.gt.lm                                                     cori-206
   14 a9=(a-1.d0)**2*dt+dx                                              cori-207
      a3=(2.d0*a-3.d0)*(a**2*dt+dx)*a2*b2                               cori-208
      a4=-(2.d0*a-1.d0)*(dx*cx/rm+dy*((a-1.d0)**2+a**2)+dt*(a*a-a)**2*sicori-209
     1f)                                                                cori-210
      a5=(2.d0*a+1.d0)*a9*a1*b1                                         cori-211
      c1=dt*(2.d0*a-1.d0)*(ei*si+ef*sf)*a2*b2/(a-1.d0)                  cori-212
      c2=dt*(a-.5d0)*(b2**2*((a-1.d0)*ef*sf-(a+1.d0)*ei*si)*sf/si+a2**2*cori-213
     1((a-1.d0)*ei*si-(a+1.d0)*ef*sf)*si/sf)/(a-1.d0)                   cori-214
      a6=a*a2*b2                                                        cori-215
      a7=-(2.d0*a-1.d0)*(eif+(a-1.d0)*a*sif*.5d0)                       cori-216
      a8=(a-1.d0)*a1*b1                                                 cori-217
      if (ll(4)) go to 15                                               cori-218
      b6=(a-.5d0)/(rm*rs*(a-1.d0)**2)                                   cori-219
      b3=-2.d0*rm*dx*b6*a2*b2                                           cori-220
      b4=b6*a9*sf*(2.d0*(a*a-a)*a+(a+1.d0)*ei*si-(a-1.d0)*ef*sf)*b2     cori-221
      b5=b6*a9*si*(2.d0*(a*a-a)*a+(a+1.d0)*ef*sf-(a-1.d0)*ei*si)*a2     cori-222
      b6=-b6*(a9*(2.d0*(a*a-a)**2*(2.d0*a-1.d0)+(ei*si+ef*sf)*(a-1.d0)*(cori-223
     1a+1.d0)*(2.d0*a-1.d0)+2.d0*eif*rm*a)-(a-1.d0)*(cx*dx+(a-1.d0)*((a+cori-224
     21.d0)*cx*dt-2.d0*rm*dy)))                                         cori-225
      b9=(a-.5d0)*a/rs                                                  cori-226
      b7=b9*b2/si                                                       cori-227
      b8=b9*a2/sf                                                       cori-228
      b9=b9*(-(2.d0*a-1.d0)*(a-1.d0)-(ei*si+ef*sf))/rm                  cori-229
   15 if (in.ne.1) go to 24                                             cori-230
      if (ll(3)) go to 16                                               cori-231
      t(i)=-(a3*t(i-2)+a4*t(i-1)+c1*c4+c2*c5)/a5                        cori-232
      c3=c4                                                             cori-233
      c4=c5                                                             cori-234
      c5=-(a6*c3+a7*c4)/a8                                              cori-235
   16 if (ll(4)) go to 21                                               cori-236
      do 18 j=1,4                                                       cori-237
      j1=mod(j+1,2)+i-2                                                 cori-238
      j2=(j+1)/2+i-3                                                    cori-239
      do 17 k=1,4                                                       cori-240
      k1=mod(k+1,2)*2+1                                                 cori-241
      k2=2*((k+1)/2)-1                                                  cori-242
   17 y(k,j)=fgi(j1,k1)*fgf(j2,k2)                                      cori-243
   18 continue                                                          cori-244
c recurrence for (0,2;l)                                                cori-245
      do 19 j=1,4                                                       cori-246
      x1(j)=x2(j)                                                       cori-247
      x2(j)=x3(j)                                                       cori-248
   19 w(i,j)=-(b3*y(j,1)+b4*y(j,2)+b5*y(j,3)+b6*y(j,4)+a3*w(i-2,j)+a4*w(cori-249
     1i-1,j)+c1*x1(j)+c2*x2(j))/a5                                      cori-250
      do 20 j=1,4                                                       cori-251
   20 x3(j)=-(b7*y(j,2)+b8*y(j,3)+b9*y(j,4)+a6*x1(j)+a7*x2(j))/a8       cori-252
   21 if (i.lt.lx) go to 13                                             cori-253
      ln=max0(lm,idint(rs))+50                                          cori-254
      lx=ln                                                             cori-255
      if (.not.ll(2)) lx=max0(lx,lm2+6*min0(idint((si+sf)/dabs(si-sf)),5cori-256
     100))                                                              cori-257
      ll(3)=ll(2)                                                       cori-258
      in=2                                                              cori-259
      x4(1)=1.d0                                                        cori-260
      x4(2)=0.d0                                                        cori-261
      x4(3)=0.d0                                                        cori-262
      x4(4)=0.d0                                                        cori-263
      a1=lx-1                                                           cori-264
      a2=dsqrt(a1**2+fi)                                                cori-265
      b2=dsqrt(a1**2+ff)                                                cori-266
      do 22 j=1,4                                                       cori-267
      x2(j)=0.d0                                                        cori-268
   22 x3(j)=0.d0                                                        cori-269
      x3(1)=1.d-20                                                      cori-270
      x3(2)=1.d-20                                                      cori-271
   23 lx=lx-1                                                           cori-272
      a=lx                                                              cori-273
      a1=a2                                                             cori-274
      b1=b2                                                             cori-275
      a3=lx-1                                                           cori-276
      ll(4)=lx.gt.ln                                                    cori-277
      a2=dsqrt(a3**2+fi)                                                cori-278
      b2=dsqrt(a3**2+ff)                                                cori-279
      go to 14                                                          cori-280
   24 if (ll(3)) go to 25                                               cori-281
      x4(1)=-a6/(a7+a8*x4(1))                                           cori-282
      x4(3)=x4(1)*x4(2)                                                 cori-283
      x4(2)=-(a4*x4(3)+a5*x4(4)*x4(1)+c1+c2*x4(1))/a3                   cori-284
      x4(4)=x4(3)                                                       cori-285
      if (lx.le.lm) t(lx)=x4(3)/x4(2)                                   cori-286
   25 if (ll(4)) go to 31                                               cori-287
c downward recurrence for f(ei) and f(ef)                               cori-288
      do 26 j=1,4                                                       cori-289
      x1(j)=x2(j)                                                       cori-290
   26 x2(j)=x3(j)                                                       cori-291
      x3(1)=((2.d0*a-1.d0)*(ei+(a-1.d0)*a/si)*x2(1)-(a-1.d0)*a1*x1(1))/(cori-292
     1a*a2)                                                             cori-293
      x3(2)=((2.d0*a-1.d0)*(ef+(a-1.d0)*a/sf)*x2(2)-(a-1.d0)*b1*x1(2))/(cori-294
     1a*b2)                                                             cori-295
c downwards recurrence for (1,2;l)                                      cori-296
      x3(4)=-(a7*x2(4)+a8*x1(4)+b7*x2(1)*x3(2)+b8*x3(1)*x2(2)+b9*x2(1)*xcori-297
     12(2))/a6                                                          cori-298
c downward recurrence for (0,2;l)                                       cori-299
      x3(3)=-(a4*x2(3)+a5*x1(3)+c1*x3(4)+c2*x2(4)+b3*x3(1)*x3(2)+b4*x2(1cori-300
     1)*x3(2)+b5*x3(1)*x2(2)+b6*x2(1)*x2(2))/a3                         cori-301
      i=lx-1                                                            cori-302
      if (i.le.lm) w(i,1)=x3(3)                                         cori-303
      if (dabs(x3(1)).lt.1.d10) go to 27                                cori-304
      x3(1)=x3(1)*1.d-20                                                cori-305
      x2(1)=x2(1)*1.d-20                                                cori-306
      go to 28                                                          cori-307
   27 if (dabs(x3(2)).lt.1.d10) go to 31                                cori-308
      x2(2)=x2(2)*1.d-20                                                cori-309
      x3(2)=x3(2)*1.d-20                                                cori-310
   28 do 29 j=3,4                                                       cori-311
      x3(j)=x3(j)*1.d-20                                                cori-312
   29 x2(j)=x2(j)*1.d-20                                                cori-313
      if (i.gt.lm) go to 31                                             cori-314
      do 30 j=i,lm                                                      cori-315
   30 w(j,1)=w(j,1)*1.d-20                                              cori-316
   31 if (lx.gt.2) go to 23                                             cori-317
      if (ll(2)) go to 34                                               cori-318
c computation of the mixture of the decreasing solution of homogeneous  cori-319
c equation  (s2/s1)**l * |gamma(l+1+i*e2)/gamma(l+1+i*e1)|/(2*l+1)      cori-320
c where s2 is the smaller of the two values si and sf.                  cori-321
      a1=x4(2)*az(1)                                                    cori-322
      a2=t(1)-a1                                                        cori-323
      a3=0.d0                                                           cori-324
      do 33 i=2,lm2                                                     cori-325
      a3=a3+1.d0                                                        cori-326
      a1=t(i)*a1                                                        cori-327
      a4=sf*dsqrt((a3**2+ff)/(a3**2+fi))/si                             cori-328
      if (si.gt.sf) go to 32                                            cori-329
      a2=a2/a4                                                          cori-330
      go to 33                                                          cori-331
   32 a2=a2*a4                                                          cori-332
   33 t(i)=a1+a2/(2.d0*a3+1.d0)                                         cori-333
c the values obtained are unnormalised integrals from rs to 0.          cori-334
c normalisation and transformation to integral from rs to infinity      cori-335
   34 a1=fgi(1,1)*fgf(1,1)/(x3(1)*x3(2))                                cori-336
      do 35 j=1,lm                                                      cori-337
   35 w(j,1)=a1*w(j,1)+t(j)                                             cori-338
      write (6,1001) cc(1,3),w(1,1),cc(1,4),w(2,1)                      cori-339
c upwards recurrences for the other integrals:  starting values         cori-340
      return                                                            cori-341
   36 call corz(si,sf,t,fgi,fgf,lm1,lm2,lm,w)                           cori-342
      return                                                            cori-343
   37 write (6,1002)                                                    cori-344
      return                                                            cori-345
   38 write (6,1003) ef,ei                                              cori-346
      return                                                            cori-347
   39 write (6,1004) n,li,li,ei,ef,t(l),b5,b6                           cori-348
      return                                                            cori-349
 1000 format (37h no convergence with 500 terms for i(,i1,1h,,13h,1) witcori-350
     1h ei =,f15.6,31x,8hand ef =,f15.6,5x,7hin corh/5x,7hvalue =,d15.8,cori-351
     25x,11hlast term =,2d16.8/17h ... continue ...)                    cori-352
 1001 format (80h integrals with regular functions: (l+1)       direct  cori-353
     1     backwards recurrence/37x,1h1,2d20.10/37x,1h2,2d20.10)        cori-354
 1002 format (8h in cori)                                               cori-355
 1003 format (24h too large ratio ef/ei =,f15.6,1h/,f15.6,5x,7hin cori) cori-356
 1004 format (4h the,i4,43h term is too large in the computation of i(,icori-357
     11,1h,,i1,16h,2)    with ei =,f15.6,5x,8hand ef =,f15.6,5x,7hin corcori-358
     2h/5x,7hvalue =,d15.8,5x,11hlast term =,2d16.8)                    cori-359
      end                                                               cori-360
c 14/04/89  ibm version                                         ecis94  cor0-000
      subroutine cor0(ei,ef,ssi,ssf,zr,zi,z,lm3,idmt,rm,rs,fs,fi,ff,ex,ccor0-001
     1c,lo)                                                             cor0-002
c    computation of the integrals from rs to infinity of products of    cor0-003
c regular or irregular coulomb functions of l=0 and l=1 divided by r**2 cor0-004
c input variables: ei,ef:  coulomb parameters.                          cor0-005
c                  ssi,ssf:coulomb phase-shifts for l=0.                cor0-006
c                  lm3:    dimension of working space(single precision) cor0-007
c                  lm:     actual number of integrals from rs to inf.   cor0-008
c                  idmt:   dimension of total working space.            cor0-009
c                  rm:     actual matching radius for integrals.        cor0-010
c                  rs:     needed matching radius for integrals.        cor0-011
c                  fs:     square root of ratio of wave numbers.        cor0-012
c                  fi,ff:  squares of coulomb parameters.               cor0-013
c                  ex:     difference of coulomb parameters.            cor0-014
c                  lo:     logical controls.                            cor0-015
c output variables:cc:     integrals from rs to infinity.               cor0-016
c                  zr,zi:  real, imaginary part of log(gamma(0.,ei-ef)) cor0-017
c working space:   z:      for the computation of f and g.              cor0-018
c***********************************************************************cor0-019
      implicit real*8 (a-h,o-z)                                         cor0-020
      logical lo(250)                                                   cor0-021
      dimension x1(4),x2(4),x3(4),x4(4),x5(4),z(4,2),c(2,2,2),y(4,4),ie(cor0-022
     12),absc(20),p(20),b(7),cc(4,4)                                    cor0-023
      data pi /3.1415926535897932d0/                                    cor0-024
      data b /.8333333333333333d-01,-.2777777777777778d-2,.7936507936507cor0-025
     19365d-3,-.5952380952380952d-3,.84175084175d-3,-.19175269d-2,.641d-cor0-026
     202/                                                               cor0-027
      data absc( 1),p( 1) / 0.88114514472040d-03, 0.22606385492666d-02/ cor0-028
      data absc( 2),p( 2) / 0.46368806502715d-02, 0.52491422655764d-02/ cor0-029
      data absc( 3),p( 3) / 0.11370025008113d-01, 0.82105291909539d-02/ cor0-030
      data absc( 4),p( 4) / 0.21041590393104d-01, 0.11122924597084d-01/ cor0-031
      data absc( 5),p( 5) / 0.33593595860662d-01, 0.13968503490012d-01/ cor0-032
      data absc( 6),p( 6) / 0.48950596515563d-01, 0.16730097641274d-01/ cor0-033
      data absc( 7),p( 7) / 0.67020248393870d-01, 0.19391083987236d-01/ cor0-034
      data absc( 8),p( 8) / 0.87693884583344d-01, 0.21935454092836d-01/ cor0-035
      data absc( 9),p( 9) / 0.11084717428674d+00, 0.24347903817536d-01/ cor0-036
      data absc(10),p(10) / 0.13634087240504d+00, 0.26613923491968d-01/ cor0-037
      data absc(11),p(11) / 0.16402165769291d+00, 0.28719884549696d-01/ cor0-038
      data absc(12),p(12) / 0.19372305516601d+00, 0.30653121246465d-01/ cor0-039
      data absc(13),p(13) / 0.22526643745244d+00, 0.32402006728300d-01/ cor0-040
      data absc(14),p(14) / 0.25846209915691d+00, 0.33956022907617d-01/ cor0-041
      data absc(15),p(15) / 0.29311039781420d+00, 0.35305823695643d-01/ cor0-042
      data absc(16),p(16) / 0.32900295458712d+00, 0.36443291197902d-01/ cor0-043
      data absc(17),p(17) / 0.36592390749637d+00, 0.37361584528984d-01/ cor0-044
      data absc(18),p(18) / 0.40365120964931d+00, 0.38055180950313d-01/ cor0-045
      data absc(19),p(19) / 0.44195796466237d+00, 0.38519909082124d-01/ cor0-046
      data absc(20),p(20) / 0.48061379124697d+00, 0.38752973989212d-01/ cor0-047
c computation of the integrals from rm to infinity for l=0,1 by         cor0-048
c rawitscher's method. (comp. physics comm., vol.11,183,1976)           cor0-049
c expansions of coulomb wave functions are z(n,2*m-1)+i*z(n,2*m)=g+i*f  cor0-050
c   n=1: l=0,e=ei     n=2: l=0,e=ef     n=3: l=1,e=ei     n=4: l=1,e=ef cor0-051
      a1=rm/fs                                                          cor0-052
      b1=rm*fs                                                          cor0-053
      x1(1)=a1-ei*dlog(2.d0*a1)+ssi                                     cor0-054
      x1(3)=b1-ef*dlog(2.d0*b1)+ssf                                     cor0-055
      x1(2)=x1(1)+datan(ei)-.5d0*pi                                     cor0-056
      x1(4)=x1(3)+datan(ef)-.5d0*pi                                     cor0-057
c first term of asymptotic expansion of h(+/-) for l=0,1                cor0-058
      do 1 i=1,4                                                        cor0-059
      x5(i)=0.d0                                                        cor0-060
      z(i,1)=dcos(x1(i))                                                cor0-061
    1 z(i,2)=dsin(x1(i))                                                cor0-062
      x1(1)=-a1-b1                                                      cor0-063
      x2(1)=ei+ef                                                       cor0-064
      x1(2)=b1-a1                                                       cor0-065
      x2(2)=-ex                                                         cor0-066
      if (dabs(x1(2)).lt.1.d-8) x1(2)=0.d0                              cor0-067
      if (x1(2).eq.0.d0) go to 4                                        cor0-068
c computation of log(gamma(0.,ei-ef))                                   cor0-069
      b2=-datan(ex/11.d0)                                               cor0-070
      b3=121.d0+ex**2                                                   cor0-071
      a2=.5d0*dlog(b3)                                                  cor0-072
      zr=.91893853320467274d0+10.5d0*a2+ex*b2-11.d0-dlog(dabs(ex))      cor0-073
      zi=10.5d0*b2+ex-ex*a2+0.5d0*pi                                    cor0-074
      if (ex.lt.0.d0) zi=zi-pi                                          cor0-075
      a2=11.d0/b3                                                       cor0-076
      b2=ex/b3                                                          cor0-077
      a3=a2**2-b2**2                                                    cor0-078
      b3=2.d0*a2*b2                                                     cor0-079
      do 2 i=1,7                                                        cor0-080
      zr=zr+b(i)*a2                                                     cor0-081
      zi=zi+b(i)*b2                                                     cor0-082
      c1=a2*a3-b2*b3                                                    cor0-083
      b2=a2*b3+b2*a3                                                    cor0-084
    2 a2=c1                                                             cor0-085
      do 3 i=1,10                                                       cor0-086
      a2=i                                                              cor0-087
      zr=zr-.5d0*dlog(a2**2+ex**2)                                      cor0-088
    3 zi=zi+datan(ex/a2)                                                cor0-089
    4 if (dabs(x1(2)).gt.2.d0) go to 9                                  cor0-090
c computation of the first confluent hypergeometric function            cor0-091
      if (x1(2).eq.0.d0) go to 8                                        cor0-092
      if (dabs(x2(2)).lt.1.d-3) go to 5                                 cor0-093
      a2=dexp(-dsign(0.5d0*pi,x1(2))*x2(2)+zr)                          cor0-094
      b2=dsign(zi,x2(2))+x2(2)*dlog(dabs(x1(2)))                        cor0-095
      x5(2)=a2*dcos(b2)                                                 cor0-096
      x5(4)=a2*dsin(b2)-1.d0/x2(2)                                      cor0-097
      go to 6                                                           cor0-098
c expansion for small ex                                                cor0-099
    5 a2=dlog(dabs(x1(2)))                                              cor0-100
      b2=pi*.5d0                                                        cor0-101
      if (x1(2).lt.0.d0) b2=-b2                                         cor0-102
      a3=a2*(1.d0+ex*(b2-ex*((a2**2-3.d0*b2**2)/6.d0+ex*b2*(a2**2-b2**2)cor0-103
     1/6.d0)))                                                          cor0-104
      b3=b2-ex*((a2**2-b2**2)/2.d0+ex*(b2*(3.d0*a2**2-b2**2)/6.d0-ex*(a2cor0-105
     1**4-6.d0*a2**2*b2**2+b2**4)/24.d0))                               cor0-106
      a2=.5772156649015329d0-.400685634386331d0*ex**2                   cor0-107
      b2=-ex*(.822467033424113d0-0.270580808427784d0*ex**2)             cor0-108
      a4=a2*(1.d0+ex*(b2-ex*((a2**2-3.d0*b2**2)/6.d0+ex*b2*(a2**2-b2**2)cor0-109
     1/6.d0)))                                                          cor0-110
      b4=b2-ex*((a2**2-b2**2)/2.d0+ex*(b2*(3.d0*a2**2-b2**2)/6.d0-ex*(a2cor0-111
     1**4-6.d0*a2**2*b2**2+b2**4)/24.d0))                               cor0-112
      x5(2)=-a3-a4-ex*(a3*b4+b3*a4)                                     cor0-113
      x5(4)=-b3-b4+ex*(a3*a4-b3*b4)                                     cor0-114
    6 a2=x5(2)                                                          cor0-115
      b2=x5(4)                                                          cor0-116
      a3=1.d0                                                           cor0-117
      b3=0.d0                                                           cor0-118
      do 7 j=1,1000                                                     cor0-119
      b4=j                                                              cor0-120
      c1=-x1(2)*(b4*b3-ex*a3)/(b4**2+ex**2)                             cor0-121
      b3=x1(2)*(b4*a3+ex*b3)/(b4**2+ex**2)                              cor0-122
      a3=c1                                                             cor0-123
      c2=(-x1(2)*b2+a3)/b4                                              cor0-124
      b2=(x1(2)*a2+b3)/b4                                               cor0-125
      a2=c2                                                             cor0-126
      x5(2)=x5(2)+a2                                                    cor0-127
      x5(4)=x5(4)+b2                                                    cor0-128
      if (dabs(a2)+dabs(b2).lt.1.d-12*(dabs(x5(2))+dabs(x5(4)))) go to 9cor0-129
    7 continue                                                          cor0-130
      go to 9                                                           cor0-131
    8 x5(4)=-.5d0*pi                                                    cor0-132
      x5(2)=0.d0                                                        cor0-133
    9 do 10 j=1,16                                                      cor0-134
   10 y(j,1)=0.d0                                                       cor0-135
      n=dmin1(a1+dsqrt(a1**2-fi),b1+dsqrt(b1**2-ff))+2.d0               cor0-136
      a3=0.d0                                                           cor0-137
      b3=0.d0                                                           cor0-138
c loop of the asymptotic expansion                                      cor0-139
      do 24 i=1,n                                                       cor0-140
      if (16*i.gt.lm3) call memo(idmt,idmt+16*i-lm3,lm3,3,lo)           cor0-141
      if (lo(216)) go to 33                                             cor0-142
      a4=i-2                                                            cor0-143
      if (i.eq.1) go to 16                                              cor0-144
      if (i.eq.2) go to 12                                              cor0-145
      b4=1.d0-.5d0/a4                                                   cor0-146
      x3(1)=ei*b4/a1                                                    cor0-147
      x3(2)=x3(1)                                                       cor0-148
      x3(3)=ef*b4/b1                                                    cor0-149
      x3(4)=x3(3)                                                       cor0-150
      x4(1)=(fi-a4*(a4-1.d0))/(2.d0*a4*a1)                              cor0-151
      x4(2)=(fi-(a4+1.d0)*(a4-2.d0))/(2.d0*a4*a1)                       cor0-152
      x4(3)=(ff-a4*(a4-1.d0))/(2.d0*a4*b1)                              cor0-153
      x4(4)=(ff-(a4+1.d0)*(a4-2.d0))/(2.d0*a4*b1)                       cor0-154
c new term of asymptotic expansion                                      cor0-155
      do 11 j=1,4                                                       cor0-156
      z(j,2*i-3)=z(j,2*i-5)*x3(j)-z(j,2*i-4)*x4(j)                      cor0-157
   11 z(j,2*i-2)=z(j,2*i-5)*x4(j)+z(j,2*i-4)*x3(j)                      cor0-158
   12 do 13 j=1,8                                                       cor0-159
   13 c(j,1,1)=0.d0                                                     cor0-160
c product of the asymptotic expansions in c(1,n,m)+i*c(2,n,m)           cor0-161
c  n=1: h0(+)(ei)*h0(+)(ef)     n=2: h1(+)(ei)*h1(+)(ef)                cor0-162
c  m=1: hl(+)(ei)*hl(+)(ef)     m=2: hl(+)(ei)*hl(+)(ef)*               cor0-163
      i1=i-1                                                            cor0-164
      do 15 j=1,i1                                                      cor0-165
      m=i-j                                                             cor0-166
      do 14 l=1,2                                                       cor0-167
      c(1,l,1)=c(1,l,1)+z(l,2*j-1)*z(l+2,2*m-1)-z(l,2*j)*z(l+2,2*m)     cor0-168
      c(2,l,1)=c(2,l,1)+z(l,2*j-1)*z(l+2,2*m)+z(l,2*j)*z(l+2,2*m-1)     cor0-169
      c(1,l,2)=c(1,l,2)+z(l,2*j-1)*z(l+2,2*m-1)+z(l,2*j)*z(l+2,2*m)     cor0-170
   14 c(2,l,2)=c(2,l,2)-z(l,2*j-1)*z(l+2,2*m)+z(l,2*j)*z(l+2,2*m-1)     cor0-171
   15 continue                                                          cor0-172
   16 b4=a4+2.d0                                                        cor0-173
      a5=0.d0                                                           cor0-174
      b5=0.d0                                                           cor0-175
c integration from rs to infinity                                       cor0-176
      do 23 m=1,2                                                       cor0-177
c transfer of previous integrals                                        cor0-178
      x4(m)=x5(m)*rm                                                    cor0-179
      x4(m+2)=x5(m+2)*rm                                                cor0-180
      if (dabs(x1(m)).le.2.d0.and.m.eq.2) go to 20                      cor0-181
c pade method for omega function                                        cor0-182
c instead of formula (44), we compute i*k*r*omega in terms of i*k*r     cor0-183
      a9=b4**2+(x2(m)+x1(m))**2                                         cor0-184
      a6=b4/a9                                                          cor0-185
      b6=-(x2(m)+x1(m))/a9                                              cor0-186
      a7=-b6*x1(m)                                                      cor0-187
      b7=a6*x1(m)                                                       cor0-188
      a8=a6                                                             cor0-189
      b8=b6+1.d0/x1(m)                                                  cor0-190
      b9=1.d0                                                           cor0-191
c steed's algorithm                                                     cor0-192
      do 17 j=1,1000                                                    cor0-193
      c2=b7+x1(m)/b9                                                    cor0-194
      a9=(a7**2+c2**2)*b9                                               cor0-195
      c1=a7/a9                                                          cor0-196
      c2=-c2/a9                                                         cor0-197
      c3=-(c2*x1(m)+1.d0)*a8-c1*x1(m)*b8                                cor0-198
      c4=c1*x1(m)*a8-b8*(c2*x1(m)+1.d0)                                 cor0-199
      a7=1.d0+c1*(b4+b9)-c2*x2(m)                                       cor0-200
      b7=c1*x2(m)+(b4+b9)*c2                                            cor0-201
      a9=a7**2+b7**2                                                    cor0-202
      a7=a7/a9                                                          cor0-203
      b7=-b7/a9                                                         cor0-204
      a8=(a7-1.d0)*c3-b7*c4                                             cor0-205
      b8=(a7-1.d0)*c4+b7*c3                                             cor0-206
      b9=b9+1.d0                                                        cor0-207
      if (dabs(c3)+dabs(c4)+dabs(a8)+dabs(b8).lt.1.d-12*(dabs(b6)+dabs(acor0-208
     16))) go to 18                                                     cor0-209
      a6=a6+a8+c3                                                       cor0-210
   17 b6=b6+b8+c4                                                       cor0-211
   18 x5(m)=0.d0                                                        cor0-212
      x5(m+2)=0.d0                                                      cor0-213
      j=j+1                                                             cor0-214
c direct computation of pade approximant for more precision             cor0-215
      do 19 k=1,j                                                       cor0-216
      c1=1.d0+b9*x5(m)                                                  cor0-217
      c2=b9*x5(m+2)                                                     cor0-218
      a9=c1**2+c2**2                                                    cor0-219
      b9=b9-1.d0                                                        cor0-220
      a7=((b4+b9)*c1+x2(m)*c2)/a9                                       cor0-221
      b7=x1(m)+(c1*x2(m)-c2*(b4+b9))/a9                                 cor0-222
      a9=a7**2+b7**2                                                    cor0-223
      x5(m)=a7/a9                                                       cor0-224
   19 x5(m+2)=-b7/a9                                                    cor0-225
      go to 21                                                          cor0-226
c taylor expansion of confluent hypergeometric function                 cor0-227
   20 if (i.eq.1) go to 23                                              cor0-228
      a7=1.d0+x1(m)*x5(m+2)                                             cor0-229
      b7=-x1(m)*x5(m)                                                   cor0-230
      a9=((b4-1)**2+x2(m)**2)                                           cor0-231
      x5(m)=(a7*(b4-1)+x2(m)*b7)/a9                                     cor0-232
      x5(m+2)=(b7*(b4-1)-x2(m)*a7)/a9                                   cor0-233
   21 if (i.eq.1) go to 23                                              cor0-234
c storage of integrals to a factor r in y(j,m)                          cor0-235
c  j=1 and j=2  real and imaginary parts of integral of h0(ei)*h0(ef)   cor0-236
c  j=3 and j=4  real and imaginary parts of integral of h1(ei)*h1(ef)   cor0-237
c  m=1 and m=2 for h*h   m=3 and m=4 for h*h*                           cor0-238
c  m=1 and m=3 for 1/r   m=2 and m=4 for 1/r**2                         cor0-239
      do 22 j=1,2                                                       cor0-240
      a6=c(1,j,m)*x4(m)-c(2,j,m)*x4(m+2)                                cor0-241
      b6=c(1,j,m)*x4(m+2)+c(2,j,m)*x4(m)                                cor0-242
      a5=dmax1(a5,a6**2+b6**2)                                          cor0-243
      y(2*j-1,2*m-1)=y(2*j-1,2*m-1)+a6                                  cor0-244
      y(2*j,2*m-1)=y(2*j,2*m-1)+b6                                      cor0-245
      a3=dmax1(a3,y(2*j-1,2*m-1)**2+y(2*j,2*m-1)**2)                    cor0-246
      a6=c(1,j,m)*x5(m)-c(2,j,m)*x5(m+2)                                cor0-247
      b6=c(1,j,m)*x5(m+2)+c(2,j,m)*x5(m)                                cor0-248
      b5=dmax1(b5,a6**2+b6**2)                                          cor0-249
      y(2*j-1,2*m)=y(2*j-1,2*m)+a6                                      cor0-250
      y(2*j,2*m)=y(2*j,2*m)+b6                                          cor0-251
   22 b3=dmax1(b3,y(2*j-1,2*m)**2+y(2*j,2*m)**2)                        cor0-252
   23 continue                                                          cor0-253
      if (i.ne.1.and.a5.lt.a3*1.d-30.and.b5.lt.b3*1.d-30) go to 25      cor0-254
   24 continue                                                          cor0-255
   25 a1=2.d0*rm                                                        cor0-256
c transformation from h(+/-) to f and g                                 cor0-257
      do 26 i=1,4                                                       cor0-258
      cc(1,i)=(y(2*i-1,3)-y(2*i-1,1))/a1                                cor0-259
      cc(4,i)=(y(2*i-1,3)+y(2*i-1,1))/a1                                cor0-260
      cc(3,i)=(y(2*i,1)+y(2*i,3))/a1                                    cor0-261
   26 cc(2,i)=(y(2*i,1)-y(2*i,3))/a1                                    cor0-262
      if (rm.eq.rs) go to 32                                            cor0-263
c if rm is not rs, 40 points gauss integration from rs to rm            cor0-264
c each gauss integration is for variation of r less than 20.            cor0-265
      in=1.d0+dabs(rm-rs)*.05d0                                         cor0-266
      a1=in                                                             cor0-267
      a1=(rm-rs)/a1                                                     cor0-268
      a2=rm                                                             cor0-269
      do 31 it=1,in                                                     cor0-270
      a3=a2-a1                                                          cor0-271
      do 30 ii=1,40                                                     cor0-272
      i=min0(ii,41-ii)                                                  cor0-273
      a4=absc(i)                                                        cor0-274
      if (i.ne.ii) a4=1.d0-a4                                           cor0-275
      a5=a3+a1*a4                                                       cor0-276
      call fcou(1,ei,a5/fs,y,y(1,3),y(3,1),y(3,3),ie,x1)                cor0-277
      call fcou(1,ef,a5*fs,y(1,2),y(1,4),y(3,2),y(3,4),ie,x1)           cor0-278
      do 29 m=1,2                                                       cor0-279
      do 28 j=1,2                                                       cor0-280
      do 27 l=1,2                                                       cor0-281
      a6=p(i)*y(2*j+m-2,1)*y(2*l+m-2,2)/a5*a1                           cor0-282
      cc(2*l+j-2,m)=cc(2*l+j-2,m)+a6                                    cor0-283
   27 cc(2*l+j-2,m+2)=cc(2*l+j-2,m+2)+a6/a5                             cor0-284
   28 continue                                                          cor0-285
   29 continue                                                          cor0-286
   30 continue                                                          cor0-287
   31 a2=a3                                                             cor0-288
   32 return                                                            cor0-289
   33 write (6,1000)                                                    cor0-290
      stop                                                              cor0-291
 1000 format (8h in cor0)                                               cor0-292
      end                                                               cor0-293
c 15/06/87  ibm version                                         ecis88  corz-000
      subroutine corz(xi,xf,t,fgi,fgf,lm1,lm2,lm,w)                     corz-001
c    computation of the integrals from 1 to infinity of products of     corz-002
c regular or irregular bessel functions of same l-value and argument    corz-003
c xi*r and xf*r respectively, divided by r**3 for l=1 to lm, and of     corz-004
c integrals from 0 to infinity of regular functions of these arguments  corz-005
c divided by r**3.                                                      corz-006
c    the limit of stability of the upwards recurrence has               corz-007
c     been found to be   lm2*(1-xi/xf) < 3 .                            corz-008
c input variables:                                                      corz-009
c     xi,xf   wave numbers multiplyed by the matching radius            corz-010
c     fgi,fgf regular and irregular bessel functions.                   corz-011
c     lm1     maximum number of integrals from 1 to infinity.           corz-012
c     lm2     number of integrals from 0 to infinity.                   corz-013
c     lm      actual number of integrals from 1 to infinity.            corz-014
c output variables:                                                     corz-015
c     w       integrals from 1 to infinity.                             corz-016
c     t       integrals from 0 to infinity.                             corz-017
c***********************************************************************corz-018
      implicit real*8 (a-h,o-z)                                         corz-019
      dimension w(lm1,1),fgi(lm1,1),fgf(lm1,1),t(3),b(4),c(2),d(2)      corz-020
c integrals from 0 to infinity.                                         corz-021
c the recurrence relation starts from l=0 with l*(0,3;l)=1/3 for l=0    corz-022
      t(1)=1.d0/3.d0                                                    corz-023
      if (xi.ne.xf) go to 2                                             corz-024
c when ki=kf   (0,3;l)=1/(2*l*(l+1))                                    corz-025
      a1=0.d0                                                           corz-026
      do 1 i=2,lm2                                                      corz-027
      a1=a1+1.d0                                                        corz-028
    1 t(i)=.5d0/(a1*(a1+1.d0))                                          corz-029
      go to 11                                                          corz-030
    2 x=xi/xf                                                           corz-031
      if (x.gt.1.d0) x=1.d0/x                                           corz-032
c (0,3;l) = x**l gt(1/2) gt(l+1)/2/gt(l+3/2) 2f1(l,-1/2;l+3/2;x**2)     corz-033
      if (x.ge..9d0) go to 4                                            corz-034
c direct expansion of the 2f1 function                                  corz-035
      a1=x**2                                                           corz-036
      t(2)=x/3.d0                                                       corz-037
      a2=t(2)                                                           corz-038
      a3=0.d0                                                           corz-039
      do 3 j=1,2000                                                     corz-040
      a3=a3+1.d0                                                        corz-041
      a2=a2*a1*(a3-1.5d0)/(a3+1.5d0)                                    corz-042
      t(2)=t(2)+a2                                                      corz-043
      if (dabs(a2).lt.1.d-15*dabs(t(2))) go to 6                        corz-044
    3 continue                                                          corz-045
      go to 6                                                           corz-046
c analytic continuation of the 2f1 function - erdelyi,.... 15.3.11      corz-047
    4 a1=1-x**2                                                         corz-048
      a2=x*a1**2/16.d0                                                  corz-049
      a3=dlog(a1/4.d0)+2.d0                                             corz-050
      t(2)=x*(2.d0+a1)/8.d0+a2*a3                                       corz-051
      a4=0.d0                                                           corz-052
      do 5 j=1,2000                                                     corz-053
      a4=a4+1.d0                                                        corz-054
      a3=a3-.5d0/((a4+.5d0)*a4)                                         corz-055
      a2=a2*a1*(a4+.5d0)/a4                                             corz-056
      a5=a2*a3                                                          corz-057
      t(2)=t(2)+a5                                                      corz-058
      if (dabs(a5).lt.1.d-15*dabs(t(2))) go to 6                        corz-059
    5 continue                                                          corz-060
c recurrence relation for  (0,3;l) :                                    corz-061
c  2*(l-1)*(0,3;l-1)-(2*l+1)*(x+1/x)*(0,3;l)+2*(l+2)*(0,3;l+1)=0        corz-062
c upwards recurrence                                                    corz-063
    6 a1=x+1.d0/x                                                       corz-064
      xx=lm2*(1-x)                                                      corz-065
      if (xx.gt.3.d0) go to 8                                           corz-066
      t(3)=.5d0*(a1*t(2)-t(1))                                          corz-067
      a2=0.d0                                                           corz-068
      do 7 i=4,lm2                                                      corz-069
      a2=a2+1.d0                                                        corz-070
    7 t(i)=((a2+1.5d0)*a1*t(i-1)-a2*t(i-2))/(a2+3.d0)                   corz-071
      go to 11                                                          corz-072
c downwards recurrence                                                  corz-073
    8 lk=4*lm2                                                          corz-074
      a2=lk-1                                                           corz-075
      a3=a2/(a2+2.d0)                                                   corz-076
      do 9 i=3,lk                                                       corz-077
      j=lk-i+3                                                          corz-078
      a2=a2-1.d0                                                        corz-079
      a3=a2/((a2+1.5d0)*a1-(a2+3.d0)*a3)                                corz-080
      if (j.le.lm2) t(j)=a3                                             corz-081
    9 continue                                                          corz-082
      do 10 i=3,lm2                                                     corz-083
   10 t(i)=t(i)*t(i-1)                                                  corz-084
   11 b(1)=xi+xf                                                        corz-085
      b(2)=xi-xf                                                        corz-086
c computation of the integrals from 1 to infinity of exp(i*b*r)/r**3 dr corz-087
      do 17 i=1,2                                                       corz-088
      if (b(i).lt.5.d0) go to 13                                        corz-089
c use of pade approximant                                               corz-090
      a1=0.                                                             corz-091
      a2=0.                                                             corz-092
      a3=21.d0                                                          corz-093
      do 12 j=1,20                                                      corz-094
      a3=a3-1.d0                                                        corz-095
      a2=a2-b(i)                                                        corz-096
      b1=a1**2+a2**2                                                    corz-097
      b2=a1*a3/b1+1.d0                                                  corz-098
      b3=-a2*a3/b1                                                      corz-099
      b1=b2**2+b3**2                                                    corz-100
      a1=b2*(a3+2.d0)/b1                                                corz-101
   12 a2=-b3*(a3+2.d0)/b1                                               corz-102
      a2=a2-b(i)                                                        corz-103
      b1=a1**2+a2**2                                                    corz-104
      c(i)=(dcos(b(i))*a1+dsin(b(i))*a2)/b1                             corz-105
      d(i)=(dsin(b(i))*a1-dcos(b(i))*a2)/b1                             corz-106
      go to 17                                                          corz-107
   13 if (b(i).eq.0.d0) go to 16                                        corz-108
c use of the taylor expansion                                           corz-109
      a1=dabs(b(i))                                                     corz-110
      c(i)=.5d0*(1.d0-a1**2*(.922784335098467d0-dlog(a1)))              corz-111
      d(i)=a1*(1.d0-.78539816339744831d0*a1)                            corz-112
      a2=a1**2/2.d0                                                     corz-113
      a3=0.d0                                                           corz-114
      do 14 j=2,20                                                      corz-115
      a3=a3+1.d0                                                        corz-116
      a2=a2*a1/(2.d0*a3+1.d0)                                           corz-117
      d(i)=d(i)+a2/(2.d0*a3-1.d0)                                       corz-118
      a2=-a2*a1/(2.d0*a3+2.d0)                                          corz-119
      c(i)=c(i)+a2/(2.d0*a3)                                            corz-120
      if (dabs(a2).lt.1.d-16) go to 15                                  corz-121
   14 continue                                                          corz-122
   15 if (a1.ne.b(i)) d(i)=-d(i)                                        corz-123
      go to 17                                                          corz-124
   16 c(i)=.5d0                                                         corz-125
      d(i)=0.d0                                                         corz-126
   17 continue                                                          corz-127
c storage of the two first integrals                                    corz-128
      a1=2.d0*xi*xf                                                     corz-129
      do 18 i=1,2                                                       corz-130
      w(i,1)=(c(2)-c(1))/a1                                             corz-131
      w(i,2)=(d(1)-d(2))/a1                                             corz-132
      w(i,3)=(d(1)+d(2))/a1                                             corz-133
      w(i,4)=(c(2)+c(1))/a1                                             corz-134
      if (i.eq.2) go to 18                                              corz-135
      c(1)=c(1)*b(2)**2+dcos(b(1))+b(1)*dsin(b(1))                      corz-136
      d(1)=d(1)*b(2)**2+dsin(b(1))-b(1)*dcos(b(1))                      corz-137
      c(2)=c(2)*b(1)**2+dcos(b(2))+b(2)*dsin(b(2))                      corz-138
      d(2)=d(2)*b(1)**2+dsin(b(2))-b(2)*dcos(b(2))                      corz-139
      a1=2.d0*a1**2                                                     corz-140
   18 continue                                                          corz-141
c upwards recurrence                                                    corz-142
      a1=xi/xf+xf/xi                                                    corz-143
      a2=2.d0*xi*xf                                                     corz-144
      a3=2.d0                                                           corz-145
      do 20 j=3,lm                                                      corz-146
      a3=a3+1.d0                                                        corz-147
      b(2)=(fgi(j-2,3)*fgf(j-2,1)-fgi(j,3)*fgf(j,1))/a2                 corz-148
      b(3)=(fgi(j-2,1)*fgf(j-2,3)-fgi(j,1)*fgf(j,3))/a2                 corz-149
      b(4)=(fgi(j-2,3)*fgf(j-2,3)-fgi(j,3)*fgf(j,3))/a2                 corz-150
      do 19 i=2,4                                                       corz-151
   19 w(j,i)=((a3-1.5d0)*a1*w(j-1,i)-(a3-3.d0)*w(j-2,i)-b(i))/a3        corz-152
   20 continue                                                          corz-153
      ln=max0(lm,idint(dmax1(xi,xf)))+50                                corz-154
      b2=0.d0                                                           corz-155
      b3=0.d0                                                           corz-156
      c2=0.d0                                                           corz-157
      c3=1.d-15                                                         corz-158
      d2=0.d0                                                           corz-159
      d3=1.d-15                                                         corz-160
      a3=ln                                                             corz-161
      do 24 i=2,ln                                                      corz-162
      j=ln-i+2                                                          corz-163
      a3=a3-1.d0                                                        corz-164
      b1=b2                                                             corz-165
      b2=b3                                                             corz-166
      c1=c2                                                             corz-167
      c2=c3                                                             corz-168
      d1=d2                                                             corz-169
      d2=d3                                                             corz-170
      c3=(2.d0*a3+3.d0)*c2/xi-c1                                        corz-171
      d3=(2.d0*a3+3.d0)*d2/xf-d1                                        corz-172
      b3=((a3+1.5d0)*a1*b2-(a3+3.d0)*b1-(c3*d3-c1*d1)/a2)/a3            corz-173
      if (j.le.lm) w(j,1)=b3                                            corz-174
      if (d3.lt.1.d15) go to 21                                         corz-175
      d2=d2*1.d-30                                                      corz-176
      d3=d3*1.d-30                                                      corz-177
      go to 22                                                          corz-178
   21 if (c3.lt.1.d15) go to 24                                         corz-179
      c2=c2*1.d-30                                                      corz-180
      c3=c3*1.d-30                                                      corz-181
   22 b2=b2*1.d-30                                                      corz-182
      b3=b3*1.d-30                                                      corz-183
      if (j.gt.lm) go to 24                                             corz-184
      do 23 k=j,lm                                                      corz-185
   23 w(k,1)=w(k,1)*1.d-30                                              corz-186
   24 continue                                                          corz-187
      a1=fgi(2,1)*fgf(2,1)/(c3*d3)                                      corz-188
      do 25 i=2,lm                                                      corz-189
   25 w(i,1)=w(i,1)*a1+t(i)                                             corz-190
      return                                                            corz-191
      end                                                               corz-192
c 02/03/95  ibm version   cdc with 'c' to double precision      ecis95  redm-000
      subroutine redm(niv,iq,t,ipi,ncoll,ncols,ncolt,it,nbta,beta,nbt1,iredm-001
     1ph,var,nva,iqmax,aspin,fac,nfa,npp,inc,idmt,idt,lo)               redm-002
c reduced nuclear matrix elements                                       redm-003
c input variables: ipi(i,j):parity of nuclear states for j=1            redm-004
c                          multiplicity of the part. and target for j=2,redm-005
c                  ncoll:  number of coupled states                     redm-006
c                  ncols:  number of states with angular distribution   redm-007
c                  ncolt:  total number of states with compound nucleus redm-008
c                  nbta,beta:   deformations                            redm-009
c                  nbt1:   number of phonons                            redm-010
c                  iph:    used for vibrational model    see vibm       redm-011
c                  var:    parameters for some models                   redm-012
c                  nva:    number of these parameters                   redm-013
c                  iqmax,aspin: see rotm                                redm-014
c                  fac,nfa: table of log of factorials and their number redm-015
c                  npp:    number of optical potentials                 redm-016
c                  inc:    number of central plus spin-orbit potentials redm-017
c                  idmt:   total length of working field                redm-018
c                  idt:    length available in this subroutine          redm-019
c                  lo:     logical controls                             redm-020
c output variables:niv(i1,i2,k): first i of t(4,i) for the pair of      redm-021
c             nuclear states i1,i2 for k=1 and last one for k=2         redm-022
c                  iq(4,i),t(4,i) are equivalent by call                redm-023
c             - the first 4*'it' data (for a given i) are               redm-024
c               1) reference to table of form factors                   redm-025
c               2) reference to table of angular momenta                redm-026
c               3) address of the associated spin-orbit form factor or 0redm-027
c               4) the reduced nuclear matrix element multiplied by     redm-028
c                (-)**(l/2) where l is the transferred angular momentum redm-029
c             - the next 3*'im' data are table of angular momenta       redm-030
c               1) l  transferred angular momentum                      redm-031
c               2) 2*s where s is the transfer of spin                  redm-032
c               3) 2*j where j is the transfer of total spin or 0 if s=0redm-033
c             - the following 7*'invt' are the table of form factor     redm-034
c               1) form factor control number                           redm-035
c               2) reference to the table of multipoles                 redm-036
c               3) 0 or address of the first spin-orbit form factor     redm-037
c               4) 0 or address of temporary coulomb form factor        redm-038
c               5) 0 or address of temporary coulomb spin-orbit         redm-039
c               6) 0 or address of correction term (positive for        redm-040
c                       corrected term, negative for correction term)   redm-041
c               7) angular momentum                                     redm-042
c in common /poten/im:     number of nuclear multipoles                 redm-043
c                  nv:     number of real form factors                  redm-044
c                  mv:     number of imaginary form factors             redm-045
c                  invt:   number of form factors without deformed      redm-046
c                             spin-orbit and correction terms           redm-047
c                  inls:   number of spin-orbit form factors not taking redm-048
c                             into account multiplication by 2.         redm-049
c                  invc:   number of coulomb transition form factors    redm-050
c                  invd:   idem for coulomb spin-orbit                  redm-051
c                  intc:   same as invt but including correction terms  redm-052
c                  imax:   maximum angular momentum                     redm-053
c                  itx(16):starting address of different form factors.  redm-054
c                      for schroed. equation, itx(i)+1 is the starting  redm-055
c                      address of the potential read in extp with ityp=iredm-056
c                      for dirac equations, itx(1)=0                    redm-057
c                      itx(2)+1=address off first transition form factorredm-058
c                      itx(7)=address of last transition form factor    redm-059
c                      itx(3)=address of last temporary central poten.  redm-060
c                      itx(4)=itx(7)-24,itx(5)=itx(3)-11,itx(6)=itx(2)-4redm-061
c                  itxm:   total number of form factors                 redm-062
c if lo(15)=.true. the reduced matrix elements are read at the first    redm-063
c call and the parameters 'var' are not used - in any case where 'var'  redm-064
c are not used,the subroutine is skipped.                               redm-065
c if lo(61)=.true. the matrix elements are punched at the first call    redm-066
c in this subroutine.                                                   redm-067
c***********************************************************************redm-068
      logical lo(250),lt                                                redm-069
      double precision fac                                              redm-070
      dimension iph(1),iq(4,1),t(4,1),ipi(9,1),var(1),beta(10,1),niv(ncoredm-071
     1ls,ncols,1),fac(1),nbta(10,1)                                     redm-072
      common /poten/ im,nv,mv,invt,inls,invc,invd,intc,imax,itx(16),itxmredm-073
      if (lo(220)) go to 35                                             redm-074
      if (lo(7).or.lo(15)) go to 3                                      redm-075
c standard computation of the reduced matrix elements in at(4,i)        redm-076
c with form factor identification in iq(1,i), multipole in iq(2,i)      redm-077
c and 0 or 1 in iq(3,i) if spin-orbit is not or is deformed.            redm-078
c they are called at the first run or if 'var' has been changed         redm-079
      if (lo(1)) go to 1                                                redm-080
      call vibm(niv,iq,t,ipi,ncoll,ncols,it,iph,var,nva,nbta,nbt1,fac,nfredm-081
     1a,idmt,idt,lo)                                                    redm-082
      go to 17                                                          redm-083
    1 if (lo(3)) go to 2                                                redm-084
      call rotm(niv,iq,t,ipi,ncoll,ncols,iph,nbta,var,nva,it,iqmax,aspinredm-085
     1,fac,nfa,idmt,idt,lo)                                             redm-086
      go to 17                                                          redm-087
    2 call roam(niv,iq,t,ipi,ncoll,ncols,it,beta,iph,var,var(nva+1),iqmaredm-088
     1x,fac,nfa,idmt,idt,lo)                                            redm-089
      go to 17                                                          redm-090
c input of nuclear matrix elements from cards                           redm-091
    3 if (lo(217)) go to 35                                             redm-092
      it=0                                                              redm-093
      i=0                                                               redm-094
      nps=1                                                             redm-095
      if ((lo(201).and.lo(203)).or.lo(113)) nps=0                       redm-096
      do 16 i1=1,ncoll                                                  redm-097
      do 15 i2=i1,ncoll                                                 redm-098
      niv(i1,i2,1)=it+1                                                 redm-099
      read (5,1000) j1,j2,k                                             redm-100
      write (6,1001) j1,j2,k                                            redm-101
      if ((j1.ne.i1).or.(j2.ne.i2)) go to 39                            redm-102
      if (k.eq.0) go to 15                                              redm-103
      ijl=iabs(ipi(3,i1)-ipi(3,i2))                                     redm-104
      jil=(ipi(3,i1)+ipi(3,i2))                                         redm-105
      ijs=iabs(ipi(2,i1)-ipi(2,i2))                                     redm-106
      jis=ipi(2,i1)+ipi(2,i2)                                           redm-107
      if (4*(it+k).gt.idt) call memo(idmt,idmt+4*(it+k)-idt,idt,3,lo)   redm-108
      if (lo(216)) go to 52                                             redm-109
      do 14 k1=1,k                                                      redm-110
      it=it+1                                                           redm-111
      read (5,1002) j,iq(2,it),nn,m,t(4,it)                             redm-112
      if (nn.eq.-1.and.lo(111)) go to 40                                redm-113
      n=nn                                                              redm-114
      if (nn.eq.-1) n=0                                                 redm-115
      if (mod(iq(2,it)+ipi(1,i1)+ipi(1,i2),2).ne.0) go to 41            redm-116
      if ((n.gt.jis).or.(n.lt.ijs).or.(mod(jis+n,2).ne.0)) go to 42     redm-117
      if (lo(7)) go to 7                                                redm-118
      if (lo(1)) go to 5                                                redm-119
      if (lo(3)) go to 4                                                redm-120
      iqp=j/(nbt1+1)                                                    redm-121
      ipq=mod(j,nbt1+1)                                                 redm-122
      if ((ipq.le.0).or.(max0(ipq,iqp).gt.nbt1).or.(iqp.lt.0)) go to 43 redm-123
      go to 11                                                          redm-124
    4 if (j.lt.0.or.j.gt.3) go to 44                                    redm-125
      go to 11                                                          redm-126
    5 iqp=j/1000                                                        redm-127
      if (lo(3)) go to 6                                                redm-128
      if (iqp.ne.1+iq(2,it)) go to 45                                   redm-129
      go to 11                                                          redm-130
    6 iqy=iq(2,it)/2+1                                                  redm-131
      iqz=(iqy*(iqy-1))/2                                               redm-132
      if (iqp.le.iqz.or.iqp.gt.iqz+iqy) go to 46                        redm-133
      go to 11                                                          redm-134
    7 if (j.eq.0) go to 10                                              redm-135
      if (iabs(j)-i-1) 8 , 10 , 47                                      redm-136
    8 if (it.eq.1) go to 11                                             redm-137
      do 9 ii=2,it                                                      redm-138
      if (j.eq.iq(1,ii-1)) go to 11                                     redm-139
    9 continue                                                          redm-140
      go to 48                                                          redm-141
   10 i=i+1                                                             redm-142
      if (j.eq.0) j=i                                                   redm-143
   11 iq(1,it)=j                                                        redm-144
      if (n.eq.0) go to 12                                              redm-145
      if (2*iq(2,it).lt.iabs(n-m).or.2*iq(2,it).gt.n+m.or.mod(n+m,2).ne.redm-146
     10) go to 49                                                       redm-147
      nm=m                                                              redm-148
      iq(3,it)=10*m+10000*n                                             redm-149
      go to 13                                                          redm-150
   12 if ((m.lt.0).or.(m.gt.nps)) go to 50                              redm-151
      iq(3,it)=10*m                                                     redm-152
      nm=2*iq(2,it)                                                     redm-153
   13 if (nm.lt.ijl.or.nm.gt.jil) go to 51                              redm-154
      if (nn.eq.-1) iq(3,it)=iq(3,it)+1                                 redm-155
   14 write (6,1003) iq(1,it),iq(2,it),nn,m,t(4,it)                     redm-156
   15 niv(i1,i2,2)=it                                                   redm-157
   16 continue                                                          redm-158
   17 k=niv(ncoll,ncoll,2)                                              redm-159
      do 20 i1=1,ncols                                                  redm-160
      do 19 i2=i1,ncols                                                 redm-161
      if (i2.le.ncoll) go to 18                                         redm-162
      niv(i1,i2,1)=k+1                                                  redm-163
      niv(i1,i2,2)=k                                                    redm-164
   18 niv(i2,i1,1)=niv(i1,i2,1)                                         redm-165
      niv(i2,i1,2)=niv(i1,i2,2)                                         redm-166
   19 continue                                                          redm-167
   20 continue                                                          redm-168
c check that there is enough place                                      redm-169
      if (14*it.gt.idt) call memo(idmt,idmt+14*it-idt,idt,3,lo)         redm-170
      if (lo(216)) go to 52                                             redm-171
      im=0                                                              redm-172
      invt=0                                                            redm-173
      inls=0                                                            redm-174
      invc=0                                                            redm-175
      invd=0                                                            redm-176
      intc=0                                                            redm-177
      imax=0                                                            redm-178
c table of multipoles                                                   redm-179
      if (it.eq.0) go to 33                                             redm-180
      itn=4*it                                                          redm-181
      do 24 j=1,it                                                      redm-182
      is=iq(3,j)/10000                                                  redm-183
      ij=mod(iq(3,j),1000)/10                                           redm-184
      il=mod(iq(3,j),10)                                                redm-185
      if (is.eq.0) ij=2*iq(2,j)                                         redm-186
      if (ij.eq.0) is=2*iq(2,j)                                         redm-187
      if (il.eq.1) is=-2                                                redm-188
      if (is.ne.0) iq(3,j)=0                                            redm-189
      if (im.eq.0) go to 22                                             redm-190
      do 21 k=1,im,3                                                    redm-191
      if ((iq(itn+k,1).eq.iq(2,j)).and.(iq(itn+k+1,1).eq.is).and.(iq(itnredm-192
     1+k+2,1).eq.ij)) go to 23                                          redm-193
   21 continue                                                          redm-194
   22 iq(itn+im+1,1)=iq(2,j)                                            redm-195
      iq(itn+im+2,1)=is                                                 redm-196
      iq(itn+im+3,1)=ij                                                 redm-197
      imax=max0(imax,iq(2,j))                                           redm-198
      im=im+3                                                           redm-199
      iq(2,j)=im/3                                                      redm-200
      go to 24                                                          redm-201
   23 iq(2,j)=1+k/3                                                     redm-202
   24 continue                                                          redm-203
      itm=itn+im                                                        redm-204
c table of form factors                                                 redm-205
c lt is true if the multipole order matters for form factors            redm-206
      lt=(lo(1).or.lo(11).or.lo(17).or.lo(19)).and.lo(107)              redm-207
      do 27 j=1,it                                                      redm-208
      if (invt.eq.0) go to 26                                           redm-209
      do 25 l=1,invt,7                                                  redm-210
      if (iq(itm+l,1).ne.iq(1,j)) go to 25                              redm-211
      if (lt.and.(iq(itm+l+1,1).ne.iq(2,j))) go to 25                   redm-212
      iq(1,j)=1+l/7                                                     redm-213
      iq(itm+l+2,1)=max0(iq(3,j),iq(itm+l+2,1))                         redm-214
      go to 27                                                          redm-215
   25 continue                                                          redm-216
   26 k=iq(2,j)                                                         redm-217
      k1=iq(itn+3*k-2,1)                                                redm-218
      iq(itm+invt+1,1)=iq(1,j)                                          redm-219
      iq(itm+invt+2,1)=k                                                redm-220
      iq(itm+invt+3,1)=iq(3,j)                                          redm-221
      iq(itm+invt+4,1)=0                                                redm-222
      iq(itm+invt+5,1)=0                                                redm-223
      iq(itm+invt+6,1)=0                                                redm-224
      iq(itm+invt+7,1)=k1                                               redm-225
      if ((iq(1,j).lt.0).or.((iq(1,j).gt.1000).and.(k1.le.1).and.(mod(iqredm-226
     1(1,j),1000).ne.0))) iq(itm+invt+6,1)=1                            redm-227
      if (lo(11).and.(mod(iq(itn+3*k-1,1),2).eq.0)) iq(itm+invt+4,1)=1  redm-228
      if (lo(19)) iq(itm+invt+5,1)=iq(itm+invt+3,1)                     redm-229
      invt=invt+7                                                       redm-230
      iq(1,j)=invt/7                                                    redm-231
   27 continue                                                          redm-232
c search on correction terms                                            redm-233
      intc=invt                                                         redm-234
      do 29 j=1,invt,7                                                  redm-235
      if (iq(itm+j+5,1).eq.0) go to 29                                  redm-236
      k1=itm+j-1                                                        redm-237
      do 28 l=1,7                                                       redm-238
   28 iq(itm+intc+l,1)=iq(k1+l,1)                                       redm-239
      iq(itm+intc+6,1)=-(1+j/7)                                         redm-240
      intc=intc+7                                                       redm-241
      iq(k1+6,1)=intc/7                                                 redm-242
   29 continue                                                          redm-243
      do 31 j=1,intc,7                                                  redm-244
      if (iq(itm+j+3,1).eq.0) go to 30                                  redm-245
      invc=invc+1                                                       redm-246
      iq(itm+j+3,1)=invc                                                redm-247
   30 if ((iq(itm+j+2,1).eq.0).and.(iq(itm+j+4,1).eq.0)) go to 31       redm-248
      inls=inls+1                                                       redm-249
      iq(itm+j+2,1)=inls+intc/7                                         redm-250
      if (iq(itm+j+4,1).eq.0) go to 31                                  redm-251
      invd=invd+1                                                       redm-252
      iq(itm+j+4,1)=invd                                                redm-253
   31 continue                                                          redm-254
      do 32 j=1,it                                                      redm-255
      if (iq(3,j).eq.0) go to 32                                        redm-256
      i=iq(1,j)                                                         redm-257
      iq(3,j)=iq(itm+7*i-4,1)                                           redm-258
   32 continue                                                          redm-259
      im=im/3                                                           redm-260
      invt=invt/7                                                       redm-261
      intc=intc/7                                                       redm-262
c number of real and imaginary form factors                             redm-263
   33 nv=intc                                                           redm-264
      mv=0                                                              redm-265
      if (lo(12)) mv=nv                                                 redm-266
      if (lo(13).or.lo(19)) nv=nv+2*inls                                redm-267
      if (lo(14)) mv=nv                                                 redm-268
      itx(1)=0                                                          redm-269
      if (lo(100)) go to 34                                             redm-270
      itx(5)=npp                                                        redm-271
      itx(9)=inc                                                        redm-272
      itx(13)=itx(9)+intc                                               redm-273
      itx(2)=itx(13)+2*inls                                             redm-274
      itx(6)=itx(2)+npp                                                 redm-275
      itx(10)=itx(2)+inc                                                redm-276
      itx(14)=itx(10)+intc                                              redm-277
      itx(7)=itx(14)+2*inls                                             redm-278
      if (lo(114)) itx(7)=itx(14)                                       redm-279
      if (lo(112)) itx(7)=itx(10)                                       redm-280
      itx(8)=itx(7)+npp                                                 redm-281
      itx(3)=itx(8)+npp                                                 redm-282
      itx(4)=itx(3)+npp                                                 redm-283
      itx(11)=itx(4)+npp                                                redm-284
      itx(12)=itx(11)+intc                                              redm-285
      itx(15)=itx(12)+intc                                              redm-286
      if (lo(112)) itx(15)=itx(12)                                      redm-287
      itx(16)=itx(15)+invc                                              redm-288
      itxm=itx(16)+2*invd+1                                             redm-289
      go to 35                                                          redm-290
   34 itx(2)=14*ncolt                                                   redm-291
      itx(7)=itx(2)+4*(intc+inls)                                       redm-292
      itx(3)=itx(7)+24*npp                                              redm-293
      itx(4)=itx(7)-24                                                  redm-294
      itx(5)=itx(3)-11                                                  redm-295
      itx(6)=itx(2)-4                                                   redm-296
      itxm=itx(3)+11*intc                                               redm-297
   35 if (lo(152).and.lo(161)) return                                   redm-298
c reduced matrix elements punched on cards on request                   redm-299
c output of reduced matrix elements on request                          redm-300
      it=niv(ncoll,ncoll,2)                                             redm-301
      itm=4*it-3                                                        redm-302
      itn=itm+3*im-4                                                    redm-303
      if (lo(52)) write (6,1006)                                        redm-304
      do 38 i1=1,ncoll                                                  redm-305
      do 37 i2=i1,ncoll                                                 redm-306
      k1=niv(i1,i2,1)                                                   redm-307
      k2=niv(i1,i2,2)                                                   redm-308
      if (lo(52)) write (6,1007) i1,i2,k1,k2                            redm-309
      k=k2-k1+1                                                         redm-310
      if (lo(61)) write (7,1004) i1,i2,k                                redm-311
      if (k.eq.0) go to 37                                              redm-312
      do 36 k=k1,k2                                                     redm-313
      if (lo(52)) write (6,1008) k,(iq(j,k),j=1,3),t(4,k)               redm-314
      if (lo(161)) go to 36                                             redm-315
      n=iq(1,k)                                                         redm-316
      m=iq(2,k)                                                         redm-317
      nm=iq(itn+7*n+1,1)                                                redm-318
      ns=iq(itm+3*m+2,1)                                                redm-319
      nj=iq(itm+3*m+3,1)                                                redm-320
      if (ns.le.0) nj=0                                                 redm-321
      if (ns.eq.-2) ns=-1                                               redm-322
      if (nj.eq.0.and.iq(3,k).ne.0) nj=1                                redm-323
      write (7,1005) nm,iq(itm+3*m+1,1),ns,nj,t(4,k)                    redm-324
   36 continue                                                          redm-325
   37 continue                                                          redm-326
   38 continue                                                          redm-327
      if (it.eq.0.or.lo(152)) return                                    redm-328
      write (6,1009) (i,(iq(itm+3*i+j,1),j=1,3),i=1,im)                 redm-329
      write (6,1010) (i,(iq(itn+7*i+j,1),j=1,7),i=1,intc)               redm-330
      return                                                            redm-331
   39 write (6,1011) j1,j2,i1,i2                                        redm-332
      go to 52                                                          redm-333
   40 write (6,1012) nn                                                 redm-334
      go to 52                                                          redm-335
   41 write (6,1013) iq(2,it),ipi(1,i1),ipi(1,i2)                       redm-336
      go to 52                                                          redm-337
   42 write (6,1014)                                                    redm-338
      go to 52                                                          redm-339
   43 write (6,1015)                                                    redm-340
      go to 52                                                          redm-341
   44 write (6,1016)                                                    redm-342
      go to 52                                                          redm-343
   45 write (6,1017)                                                    redm-344
      go to 52                                                          redm-345
   46 write (6,1018) n,ijs,jis                                          redm-346
      go to 52                                                          redm-347
   47 write (6,1019) i,j                                                redm-348
      go to 52                                                          redm-349
   48 write (6,1020) j                                                  redm-350
      go to 52                                                          redm-351
   49 write (6,1021) m,iq(2,it),n                                       redm-352
      go to 52                                                          redm-353
   50 write (6,1022) m,nps                                              redm-354
      go to 52                                                          redm-355
   51 write (6,1023) nm,ijl,jil                                         redm-356
      go to 52                                                          redm-357
   52 write (6,1024)                                                    redm-358
      stop                                                              redm-359
 1000 format (3i5)                                                      redm-360
 1001 format (8h for i =,i4,10h  and ip =,i4,i8,24h reduced matrix elemeredm-361
     1nts)                                                              redm-362
 1002 format (4i5,f20.12)                                               redm-363
 1003 format (10x,13hform factor =,i4,4h l =,i4,4x,5h2*s =,i4,4x,5h2*j =redm-364
     1,i4,4x,23h reduced matrix element,e20.6)                          redm-365
 1004 format (3i5)                                                      redm-366
 1005 format (4i5,f20.12)                                               redm-367
 1006 format (//32h nuclear reduced matrix elements/)                   redm-368
 1007 format (/6h state,i3,12h  with state,i3,10x,5h from,i4,3h to,i4/) redm-369
 1008 format (10x,3hn =,i3,3x,13hform factor =,i3,3x,7hmult. =,i3,3x,8hsredm-370
     1p.-o. =,i3,6x,14hmatrix element,e15.6)                            redm-371
 1009 format (//5x,29h correspondence to multipoles//(20x,3hn =,i3,5x,3hredm-372
     1l =,i3,5x,5h2*s =,i3,5x,5h2*j =,i3))                              redm-373
 1010 format (//4x,31h correspondence to form factors//(10x,3hn =,i3,4x,redm-374
     16hf.f. =,i6,4x,7hmult. =,i4,4x,8hsp.-o. =,i4,4x,6hcoul =,i4,4x,6hsredm-375
     2pco =,i4,4x,5hcor =,i4,4x,3hl =,i4))                              redm-376
 1011 format (//55h incorrect order of input for reduced matrix elementsredm-377
     1 :,2i6,11h instead of,2i6)                                        redm-378
 1012 format (//90h a magnetic coulomb interaction cannot be used if theredm-379
     1coulomb interaction is not deformed:,i3)                          redm-380
 1013 format (/16h multipole order,i4,26h not of the same parity as,2i4)redm-381
 1014 format (37h error for harmonic vibrational model)                 redm-382
 1015 format (39h error for anharmonic vibrational model)               redm-383
 1016 format (37h error for symmetric rotational model)                 redm-384
 1017 format (38h error for asymmetric rotational model)                redm-385
 1018 format (/6h 2*s =,i4,38h incorrect between channels with 2*s =,2i4redm-386
     1)                                                                 redm-387
 1019 format (/32h last form factor identification,i3,32h  new form factredm-388
     1or identification,i3,11h  too large)                              redm-389
 1020 format (/32h last form factor identification,i3,37h  was not alrearedm-390
     1dy read with this sign)                                           redm-391
 1021 format (/6h 2*j =,i4,19h incorrect with l =,i4,10h and 2*s =,i4)  redm-392
 1022 format (/10h j-value =,i4,55h  used as deformed spin-orbit controlredm-393
     1 incorrect. limit:,i2)                                            redm-394
 1023 format (/28h 2*transfer of ang. momentum,i4,12h not between,i4,4h redm-395
     1and,i4)                                                           redm-396
 1024 format (//22h in redm  ... stop ...)                              redm-397
      end                                                               redm-398
c 22/07/94  ibm version   cdc with 'c' to double precision      ecis94  vibm-000
      subroutine vibm(niv,iq,t,ipi,ncoll,ncols,it,iph,var,nva,nbta,nbt1,vibm-001
     1fac,nfa,idmt,idt,lo)                                              vibm-002
c nuclear reduced matrix elements for the harmonic vibrational model    vibm-003
c the control number for form factor is i for beta(i) and i+j*(nbt1+1)  vibm-004
c for beta(i)*beta(j) with j larger than i in the harmonic vibrational  vibm-005
c model (order of derivative in the anharmonic vibrational model)       vibm-006
c for arguments niv to it and fac to lo    see redm                     vibm-007
c input variables: iph(i): number of phonons(0,1,2 phonons or 3 for     vibm-008
c             mixture of 1 and 2 phonons states)                        vibm-009
c                  iph(ncoll+i) for i=1,ncoll: address of the descrip-  vibm-010
c             tion of two phonons and mixed states which are in the samevibm-011
c             table iph for i larger than 2*ncoll.                      vibm-012
c                  var:  1 and 2 phonons mixing coefficients            vibm-013
c                  nva:  number of 1 and 2 phonons mixing coefficients  vibm-014
c                  rbta(i,j)   angular momentum of phonons for i=9      vibm-015
c                        0 for i=10 to be used in second order monopole vibm-016
c                        correction, anything not to be used            vibm-017
c                  nbt1: number of phonons                              vibm-018
c                                                                       vibm-019
c  the deformations beta and factors 1/sqrt(4*pi) are not included in   vibm-020
c the matrix elements which are computed here. the full expressions are:vibm-021
c (0||q2||0) = sum on beta**2/(4*pi) with iq=0                          vibm-022
c (0||q1||i) = (-)**i beta(i)/sqrt(4*pi) with iq=i                      vibm-023
c (i||q1||0) same value without (-)**i                                  vibm-024
c (ip||q2||i) = (-)**i beta(i)*beta(ip)*djcg(i,ip,0,0|iq,0)/(2*pi)      vibm-025
c    plus sum on beta**2*sqrt(2*i+1)/(4*pi) with iq=0 when i=ip         vibm-026
c (0||q2||l1,l2,i) = (-)**i beta(l1)*beta(l2) djcg(l1,l2,0,0|i,0)/      vibm-027
c    (2*pi*sqrt(1+delta(l1,l2)))   with iq=i                            vibm-028
c (l1,l2,i||q2||0) same value without (-)**i                            vibm-029
c (ip||q1||l1,l2,i) = (-)**iq beta(*)*(delta(iq,l1)*delta(ip,l2)+(-)**  vibm-030
c    (ip+i+iq)*delta(iq,l2)*delta(ip,l1)) * sqrt((2*i+1)/((2*iq+1)*     vibm-031
c    (1+delta(l1,l2))*sqrt(4*pi))                                       vibm-032
c (l1,l2,i||q1||ip) same expression but with (-)**ip+i+iq  in front     vibm-033
c (l3,l4,ip||q2||l1,l2,i)  sum on beta**2*(delta(l1,l3)*delta(l2,l4)+   vibm-034
c    (-)**(l1+l2-i)*delta(l1,l4)*delta(l2,l3)) * sqrt(2*ip+1)/(4*pi*sqrtvibm-035
c    ((1+delta(l1,l2))*(1+delta(l3,l4))) with iq=0,when i=ip            vibm-036
c    plus,when two phonons are identical,sum with all the possible va-  vibm-037
c    lues for iq of beta(l5)*beta(l6)*djcg(l5,l6,0,0|iq,0)*dj6j(l6,ip,  vibm-038
c    l7,i,l5,iq) * sqrt((2*i+1)*(2*ip+1))/(2*pi*sqrt((1+delta(l1,l2)*(1+vibm-039
c    delta(l3,l4))   where  l7 is the common phonon ,l5 and l6 the othervibm-040
c    phonons in i and ip, multiplied by the phase                       vibm-041
c      *(-)**(ip-l1) if l1=l3,        *(-)**(l3) if l1=l4,              vibm-042
c      *(-)**(ip+l1-i) if l2=l3,      *(-)**(l1+l3+l4-i) if l2=l4.      vibm-043
c (j||l=iq||i) is multiplied by a phase (-)**((iq+ipi(i)-ipi(j))/2)     vibm-044
c and the factors beta/sqrt(4*pi) are shifted on the form factors       vibm-045
c***********************************************************************vibm-046
      logical lib(4),lo(250)                                            vibm-047
      double precision dj6j,djcg,fac                                    vibm-048
      dimension iph(1),iq(4,1),t(4,1),ipi(9,1),ia(6,4),b(4),aa(2,2),var(vibm-049
     11),niv(ncols,ncols,1),fac(1),nbta(10,1)                           vibm-050
      it=1                                                              vibm-051
      nsp=0                                                             vibm-052
      ivar=0                                                            vibm-053
      if (lo(13).or.lo(19)) nsp=10                                      vibm-054
      do 39 i1=1,ncoll                                                  vibm-055
      aa(1,1)=1.                                                        vibm-056
      aa(1,2)=0.                                                        vibm-057
      if (iph(i1).le.2) go to 1                                         vibm-058
      ivar=ivar+1                                                       vibm-059
      ay=1.74532925e-02*var(ivar)                                       vibm-060
      aa(1,1)=cos(ay)                                                   vibm-061
      aa(1,2)=sin(ay)                                                   vibm-062
      if (.not.lo(217)) write (6,1000) i1,var(ivar),aa(1,1),aa(1,2)     vibm-063
    1 jvar=ivar                                                         vibm-064
      aa(2,1)=aa(1,1)                                                   vibm-065
      aa(2,2)=aa(1,2)                                                   vibm-066
      do 38 i2=i1,ncoll                                                 vibm-067
      if (i1.eq.i2) go to 2                                             vibm-068
      aa(2,1)=1.                                                        vibm-069
      aa(2,2)=0.                                                        vibm-070
      if (iph(i2).le.2) go to 2                                         vibm-071
      jvar=jvar+1                                                       vibm-072
      if (jvar.gt.nva) go to 40                                         vibm-073
      ay=1.74532925e-02*var(jvar)                                       vibm-074
      aa(2,1)=cos(ay)                                                   vibm-075
      aa(2,2)=sin(ay)                                                   vibm-076
    2 niv(i1,i2,1)=it                                                   vibm-077
      l1=iph(i1)                                                        vibm-078
      ax=aa(1,1)                                                        vibm-079
      if (l1.gt.2) l1=1                                                 vibm-080
      if (abs(ax).lt.1.e-6) go to 27                                    vibm-081
    3 l2=iph(i2)                                                        vibm-082
      if (l2.gt.2) l2=1                                                 vibm-083
      ay=ax*aa(2,1)                                                     vibm-084
      if (abs(ay).lt.1.e-6) go to 26                                    vibm-085
    4 i=l1+l2+1                                                         vibm-086
      if (i.eq.3.and.l1.ne.l2) i=6                                      vibm-087
      if (l1.gt.l2) go to 5                                             vibm-088
      j1=i1                                                             vibm-089
      j2=i2                                                             vibm-090
      go to 6                                                           vibm-091
    5 j1=i2                                                             vibm-092
      j2=i1                                                             vibm-093
c  transposition                                                        vibm-094
      ay=ay*(1-mod(ipi(3,i1)+ipi(3,i2)+2*(ipi(1,i1)+ipi(1,i2)+1),4))    vibm-095
    6 go to ( 7 , 9 , 10 , 14 , 18 , 24 ) , i                           vibm-096
c  (0||q||0)                                                            vibm-097
    7 if ((ipi(3,j1).ne.1).or.(ipi(3,j2).ne.1)) go to 41                vibm-098
      if (lo(102)) go to 26                                             vibm-099
      do 8 l=1,nbt1                                                     vibm-100
      if (nbta(10,l).ne.0) go to 8                                      vibm-101
      if (4*it.gt.idt) call memo(idmt,idmt+4,idt,3,lo)                  vibm-102
      if (lo(216)) go to 42                                             vibm-103
      iq(1,it)=l*(nbt1+2)                                               vibm-104
      iq(2,it)=0                                                        vibm-105
      iq(3,it)=nsp                                                      vibm-106
      t(4,it)=ay                                                        vibm-107
      it=it+1                                                           vibm-108
    8 continue                                                          vibm-109
      go to 26                                                          vibm-110
c  (ip||q||0)  with ip=j2                                               vibm-111
    9 if (4*it.gt.idt) call memo(idmt,idmt+4,idt,3,lo)                  vibm-112
      if (lo(216)) go to 42                                             vibm-113
      n2=iph(j2+ncoll)                                                  vibm-114
      if (iph(j2).gt.2) n2=n2+2                                         vibm-115
      n2=iph(n2)                                                        vibm-116
      if ((ipi(3,j2).ne.(2*nbta(9,n2)+1)).or.(ipi(3,j1).ne.1)) go to 41 vibm-117
      iq(1,it)=n2                                                       vibm-118
      iq(2,it)=nbta(9,n2)                                               vibm-119
      iq(3,it)=nsp                                                      vibm-120
      t(4,it)=ay                                                        vibm-121
      if (mod(iabs(iq(2,it)+ipi(1,j1)-ipi(1,j2)),4).ne.0) t(4,it)=-t(4,ivibm-122
     1t)                                                                vibm-123
      go to 25                                                          vibm-124
c  (ip||q||i)                                                           vibm-125
   10 if (lo(102)) go to 26                                             vibm-126
      n1=iph(j1+ncoll)                                                  vibm-127
      if (iph(j1).gt.2) n1=n1+2                                         vibm-128
      n1=iph(n1)                                                        vibm-129
      n2=iph(j2+ncoll)                                                  vibm-130
      if (iph(j2).gt.2) n2=n2+2                                         vibm-131
      n2=iph(n2)                                                        vibm-132
      if ((ipi(3,j2).ne.(2*nbta(9,n2)+1)).or.(ipi(3,j1).ne.(2*nbta(9,n1)vibm-133
     1+1))) go to 41                                                    vibm-134
      if (n1.ne.n2) go to 12                                            vibm-135
      aq=sqrt(2.*nbta(9,n1)+1.)                                         vibm-136
      do 11 l=1,nbt1                                                    vibm-137
      if (nbta(10,l).ne.0) go to 11                                     vibm-138
      if (4*it.gt.idt) call memo(idmt,idmt+4,idt,3,lo)                  vibm-139
      if (lo(216)) go to 42                                             vibm-140
      iq(1,it)=l*(nbt1+2)                                               vibm-141
      iq(2,it)=0                                                        vibm-142
      iq(3,it)=nsp                                                      vibm-143
      t(4,it)=aq*ay                                                     vibm-144
      it=it+1                                                           vibm-145
   11 continue                                                          vibm-146
c factor 2 for non identical phonons added on the 10/03/81              vibm-147
   12 k1=iabs(nbta(9,n2)-nbta(9,n1))+1                                  vibm-148
      k2=nbta(9,n2)+nbta(9,n1)+1                                        vibm-149
      fs=2*(1-2*mod(nbta(9,n1)+iabs(ipi(1,j1)-ipi(1,j2)+k1-1)/2,2))     vibm-150
      do 13 k=k1,k2,2                                                   vibm-151
      if (4*it.gt.idt) call memo(idmt,idmt+4,idt,3,lo)                  vibm-152
      if (lo(216)) go to 42                                             vibm-153
      j=k-1                                                             vibm-154
      aq=fs*djcg(ipi(3,j1)-1,ipi(3,j2)-1,2*j,0,0,fac,nfa)               vibm-155
      iq(1,it)=max0(n1,n2)*(nbt1+1)+min0(n1,n2)                         vibm-156
      iq(2,it)=j                                                        vibm-157
      iq(3,it)=nsp                                                      vibm-158
      t(4,it)=aq*ay                                                     vibm-159
      fs=-fs                                                            vibm-160
   13 it=it+1                                                           vibm-161
      go to 26                                                          vibm-162
c  (l1,l2,ip||q||i) with i=j1 and ip=j2                                 vibm-163
   14 i=iph(j2+ncoll)                                                   vibm-164
      lb1=iph(i)                                                        vibm-165
      lb2=iph(i+1)                                                      vibm-166
      n1=iph(j1+ncoll)                                                  vibm-167
      if (iph(j1).gt.2) n1=n1+2                                         vibm-168
      n1=iph(n1)                                                        vibm-169
      if (ipi(3,j1).ne.(2*nbta(9,n1)+1)) go to 41                       vibm-170
      lib(1)=lb1.eq.n1                                                  vibm-171
      lib(2)=lb2.eq.n1                                                  vibm-172
      if (4*it.gt.idt) call memo(idmt,idmt+4,idt,3,lo)                  vibm-173
      if (lo(216)) go to 42                                             vibm-174
      if (lib(1).and.lib(2)) go to 16                                   vibm-175
      if (lib(2)) go to 15                                              vibm-176
      if (.not.lib(1)) go to 26                                         vibm-177
      iq(1,it)=lb2                                                      vibm-178
      iq(2,it)=nbta(9,lb2)                                              vibm-179
      iq(3,it)=nsp                                                      vibm-180
      t(4,it)=ay*(1-2*mod(iabs(ipi(1,j1)-ipi(1,j2)+iq(2,it))/2,2))      vibm-181
      go to 17                                                          vibm-182
   15 iq(1,it)=lb1                                                      vibm-183
      iq(2,it)=nbta(9,lb1)                                              vibm-184
      iq(3,it)=nsp                                                      vibm-185
      t(4,it)=ay*(1-mod(iabs(ipi(3,j1)+ipi(3,j2)-2+ipi(1,j1)-ipi(1,j2)-ivibm-186
     1q(2,it)),4))                                                      vibm-187
      go to 17                                                          vibm-188
   16 if (mod(ipi(3,j2),4).ne.1) go to 26                               vibm-189
      iq(1,it)=n1                                                       vibm-190
      iq(2,it)=nbta(9,n1)                                               vibm-191
      iq(3,it)=nsp                                                      vibm-192
      t(4,it)=1.4142135*ay*(1-mod(iabs(ipi(1,j1)-ipi(1,j2)+iq(2,it)),4))vibm-193
   17 t(4,it)=t(4,it)*sqrt(ipi(3,j2)/(2.*iq(2,it)+1.))                  vibm-194
      go to 25                                                          vibm-195
c  (l3,l4,ip||q||l1,l2,i)                                               vibm-196
   18 if (lo(102)) go to 26                                             vibm-197
      i=iph(i1+ncoll)                                                   vibm-198
      lb1=iph(i)                                                        vibm-199
      lb2=iph(i+1)                                                      vibm-200
      i=iph(i2+ncoll)                                                   vibm-201
      lb3=iph(i)                                                        vibm-202
      lb4=iph(i+1)                                                      vibm-203
      lib(1)=lb1.ne.lb3                                                 vibm-204
      lib(2)=lb2.ne.lb4                                                 vibm-205
      lib(3)=lb1.ne.lb4                                                 vibm-206
      lib(4)=lb2.ne.lb3                                                 vibm-207
      if (lib(1).and.lib(2).and.lib(3).and.lib(4)) go to 26             vibm-208
      ja1=(ipi(3,j1)-1)/2                                               vibm-209
      ja2=(ipi(3,j2)-1)/2                                               vibm-210
      ia(1,1)=nbta(9,lb2)                                               vibm-211
      ia(2,1)=nbta(9,lb4)                                               vibm-212
      ia(1,2)=nbta(9,lb1)                                               vibm-213
      ia(2,2)=nbta(9,lb3)                                               vibm-214
      ia(1,3)=ia(1,1)                                                   vibm-215
      ia(2,3)=ia(2,2)                                                   vibm-216
      ia(1,4)=ia(1,2)                                                   vibm-217
      ia(2,4)=ia(2,1)                                                   vibm-218
      ia(3,1)=ia(1,2)                                                   vibm-219
      ia(3,2)=ia(1,1)                                                   vibm-220
      ia(3,3)=ia(1,2)                                                   vibm-221
      ia(3,4)=ia(1,1)                                                   vibm-222
      ia(6,1)=max0(lb2,lb4)*(nbt1+1)+min0(lb2,lb4)                      vibm-223
      ia(6,2)=max0(lb1,lb3)*(nbt1+1)+min0(lb1,lb3)                      vibm-224
      ia(6,3)=max0(lb2,lb3)*(nbt1+1)+min0(lb2,lb3)                      vibm-225
      ia(6,4)=max0(lb1,lb4)*(nbt1+1)+min0(lb1,lb4)                      vibm-226
      imin=1000                                                         vibm-227
      imax=0                                                            vibm-228
      do 19 i=1,4                                                       vibm-229
      if (lib(i)) go to 19                                              vibm-230
      ia(4,i)=iabs(ia(1,i)-ia(2,i))                                     vibm-231
      ia(5,i)=ia(1,i)+ia(2,i)                                           vibm-232
      if (ia(4,i).lt.imin) imin=ia(4,i)                                 vibm-233
      if (ia(5,i).gt.imax) imax=ia(5,i)                                 vibm-234
   19 continue                                                          vibm-235
      b(1)=1-2*mod(ja2+ia(1,2),2)                                       vibm-236
      b(2)=1-2*mod(ia(1,2)+ia(2,2)+ia(2,1)+ja1,2)                       vibm-237
      b(3)=1-2*mod(ia(2,2),2)                                           vibm-238
      b(4)=1-2*mod(ja2+ja1+ia(1,2),2)                                   vibm-239
      t0=sqrt((2.*ja1+1.)*(2.*ja2+1.))*2.0                              vibm-240
      if (lb1.eq.lb2) t0=0.707107*t0                                    vibm-241
      if (lb3.eq.lb4) t0=0.707107*t0                                    vibm-242
      if (ja1.ne.ja2) go to 21                                          vibm-243
      tkq=0.                                                            vibm-244
      if ((lb1.eq.lb3).and.(lb2.eq.lb4)) tkq=1.                         vibm-245
      if ((lb1.eq.lb4).and.(lb2.eq.lb3)) tkq=tkq+(1-2*mod(ja1+ia(1,1)+iavibm-246
     1(1,2),2))                                                         vibm-247
      if (tkq.eq.0) go to 21                                            vibm-248
      if (lb1.eq.lb2) tkq=0.5*tkq                                       vibm-249
      do 20 l=1,nbt1                                                    vibm-250
      if (nbta(10,l).ne.0) go to 20                                     vibm-251
      if (4*it.gt.idt) call memo(idmt,idmt+4,idt,3,lo)                  vibm-252
      if (lo(216)) go to 42                                             vibm-253
      iq(1,it)=l*(nbt1+2)                                               vibm-254
      iq(2,it)=0                                                        vibm-255
      iq(3,it)=nsp                                                      vibm-256
      t(4,it)=tkq*sqrt(2.*ja1+1.)*ay                                    vibm-257
      it=it+1                                                           vibm-258
   20 continue                                                          vibm-259
   21 imin=max0(imin,iabs(ja1-ja2))+1                                   vibm-260
      imax=min0(imax,ja1+ja2)+1                                         vibm-261
      do 23 m=imin,imax                                                 vibm-262
      j=m-1                                                             vibm-263
      do 22 k=1,4                                                       vibm-264
      if (lib(k).or.(j.lt.ia(4,k)).or.(j.gt.ia(5,k)).or.(mod(j+ia(5,k),2vibm-265
     1).ne.0)) go to 22                                                 vibm-266
      if (4*it.gt.idt) call memo(idmt,idmt+4,idt,3,lo)                  vibm-267
      if (lo(216)) go to 42                                             vibm-268
      t3=b(k)*dj6j(2*ia(1,k),2*ia(2,k),2*j,2*ja2,2*ja1,2*ia(3,k),fac,nfavibm-269
     1)*djcg(2*ia(1,k),2*ia(2,k),2*j,0,0,fac,nfa)*(1-mod(iabs(ipi(1,j1)-vibm-270
     2ipi(1,j2)+j),4))                                                  vibm-271
      if (abs(t3).lt.1.e-6) go to 22                                    vibm-272
      iq(1,it)=ia(6,k)                                                  vibm-273
      iq(2,it)=j                                                        vibm-274
      iq(3,it)=nsp                                                      vibm-275
      t(4,it)=t3*t0*ay                                                  vibm-276
      it=it+1                                                           vibm-277
   22 continue                                                          vibm-278
   23 continue                                                          vibm-279
      go to 26                                                          vibm-280
c  (l1,l2,ip||q||0) with ip=j2                                          vibm-281
   24 if (lo(102)) go to 26                                             vibm-282
      k3=(ipi(3,j2)-1)/2                                                vibm-283
      iq(2,it)=k3                                                       vibm-284
      i=iph(j2+ncoll)                                                   vibm-285
      k1=iph(i)                                                         vibm-286
      k2=iph(i+1)                                                       vibm-287
      iq(1,it)=max0(k1,k2)*(nbt1+1)+min0(k1,k2)                         vibm-288
      iq(3,it)=nsp                                                      vibm-289
      w1=1.4142135                                                      vibm-290
      if (k1.ne.k2) w1=2.                                               vibm-291
      t(4,it)=ay*djcg(2*nbta(9,k1),2*nbta(9,k2),ipi(3,j2)-1,0,0,fac,nfa)vibm-292
     1*(1-mod(iabs(ipi(1,j1)-ipi(1,j2)+k3),4))*w1                       vibm-293
   25 it=it+1                                                           vibm-294
   26 if ((aa(2,2).eq.0.).or.(l2.eq.2)) go to 27                        vibm-295
      l2=2                                                              vibm-296
      ay=ax*aa(2,2)                                                     vibm-297
      go to 4                                                           vibm-298
   27 if ((aa(1,2).eq.0.).or.(l1.eq.2)) go to 28                        vibm-299
      l1=2                                                              vibm-300
      ax=aa(1,2)                                                        vibm-301
      go to 3                                                           vibm-302
   28 iti=niv(i1,i2,1)                                                  vibm-303
      if (iti.eq.it) go to 37                                           vibm-304
      itf=it-1                                                          vibm-305
      if (itf.eq.iti) go to 32                                          vibm-306
      it1=iti+1                                                         vibm-307
      it=iti                                                            vibm-308
      do 31 i=it1,itf                                                   vibm-309
      do 29 j=iti,it                                                    vibm-310
      if ((iq(1,i).ne.iq(1,j)).or.(iq(2,i).ne.iq(2,j)).or.(iq(3,i).ne.iqvibm-311
     1(3,j))) go to 29                                                  vibm-312
      t(4,j)=t(4,j)+t(4,i)                                              vibm-313
      go to 31                                                          vibm-314
   29 continue                                                          vibm-315
      it=it+1                                                           vibm-316
      do 30 k=1,3                                                       vibm-317
   30 iq(k,it)=iq(k,i)                                                  vibm-318
      t(4,it)=t(4,i)                                                    vibm-319
   31 continue                                                          vibm-320
      it=it+1                                                           vibm-321
   32 itf=it-1                                                          vibm-322
      do 36 i=iti,itf                                                   vibm-323
      if (it.le.i) go to 37                                             vibm-324
   33 if (abs(t(4,i)).gt.1.e-12) go to 36                               vibm-325
      it1=i+1                                                           vibm-326
      it=it-1                                                           vibm-327
      if (it1.gt.it) go to 37                                           vibm-328
      do 35 j=it1,it                                                    vibm-329
      do 34 k=1,3                                                       vibm-330
   34 iq(k,j-1)=iq(k,j)                                                 vibm-331
   35 t(4,j-1)=t(4,j)                                                   vibm-332
      go to 33                                                          vibm-333
   36 continue                                                          vibm-334
   37 niv(i1,i2,2)=it-1                                                 vibm-335
   38 continue                                                          vibm-336
   39 continue                                                          vibm-337
      it=it-1                                                           vibm-338
      return                                                            vibm-339
   40 write (6,1001) jvar,nva                                           vibm-340
      go to 42                                                          vibm-341
   41 write (6,1002) i1,i2                                              vibm-342
   42 write (6,1003)                                                    vibm-343
      stop                                                              vibm-344
 1000 format (6h state,i4,f15.5,26h degrees      amplitudes =,f15.7,14h vibm-345
     1 1 phonon and,f15.7,11h  2 phonons)                               vibm-346
 1001 format (26h number of variables used:,i5,5x,33hexceeds number of vvibm-347
     1ariables read:,i6)                                                vibm-348
 1002 format (' incorrect description of level',i3,'  or',i3)           vibm-349
 1003 format (//22h in vibm  ... stop ...)                              vibm-350
      end                                                               vibm-351
c 22/07/94  ibm version   cdc with 'c' to double precision      ecis94  rotm-000
      subroutine rotm(niv,iq,t,ipi,ncoll,ncols,iph,nbta,var,nva,it,iqmaxrotm-001
     1,aspin,fac,nfa,idmt,idt,lo)                                       rotm-002
c nuclear reduced matrix elements for the symmetric rotational model    rotm-003
c the control number for the form factor with the vibration n1 and the  rotm-004
c multipolarity l is 1000*(l+1)+n1                                      rotm-005
c for arguments niv to it and fac to lo    see redm                     rotm-006
c special input: iqmax: maximum multipole expansion                     rotm-007
c                aspin: ground state band value k                       rotm-008
c                iph:   description of levels                           rotm-009
c                nbta:  description of vibrational bands                rotm-010
c                var:   mixture coefficients of bands                   rotm-011
c                nva:   number of values of var                         rotm-012
c                                                                       rotm-013
c    (ip||q||i)   = sqrt(2*i+1) * cg(i,iq,ip,k,0,k)                     rotm-014
c   (ip+v||q||i)  = sqrt(2*i+1) * cg(i,iq,ip,k,v,k+v)                   rotm-015
c  (ip+v||q||i+v) = sqrt(2*i+1) * cg(i,iq,ip,k+v,0,k+v)                 rotm-016
c***********************************************************************rotm-017
      logical lo(250)                                                   rotm-018
      double precision djcg,fac                                         rotm-019
      dimension t(4,1),ipi(9,1),niv(ncols,ncols,1),iq(4,1),fac(1),var(1)rotm-020
     1,iph(1),nbta(10,1),aa(2,2)                                        rotm-021
      it=1                                                              rotm-022
      nsi=2.*aspin+.1                                                   rotm-023
      nsp=0                                                             rotm-024
      if (lo(13).or.lo(19)) nsp=10                                      rotm-025
      ivar=0                                                            rotm-026
      do 24 i1=1,ncoll                                                  rotm-027
      ia1=ipi(3,i1)-1                                                   rotm-028
      n1=iph(i1+ncoll)                                                  rotm-029
      aa(1,1)=1.                                                        rotm-030
      aa(1,2)=0.                                                        rotm-031
      if (iph(i1).le.1) go to 1                                         rotm-032
      ivar=ivar+1                                                       rotm-033
      ay=1.74532925e-02*var(ivar)                                       rotm-034
      aa(1,1)=cos(ay)                                                   rotm-035
      aa(1,2)=sin(ay)                                                   rotm-036
      if (.not.lo(217)) write (6,1000) i1,var(ivar),aa(1,1),aa(1,2)     rotm-037
    1 jvar=ivar                                                         rotm-038
      aa(2,1)=aa(1,1)                                                   rotm-039
      aa(2,2)=aa(1,2)                                                   rotm-040
      do 23 i2=i1,ncoll                                                 rotm-041
      ia2=ipi(3,i2)-1                                                   rotm-042
      n2=iph(i2+ncoll)                                                  rotm-043
      niv(i1,i2,1)=it                                                   rotm-044
      if (i1.eq.i2) go to 2                                             rotm-045
      aa(2,1)=1.                                                        rotm-046
      aa(2,2)=0.                                                        rotm-047
      if (iph(i2).le.1) go to 2                                         rotm-048
      jvar=jvar+1                                                       rotm-049
      if (jvar.gt.nva) go to 25                                         rotm-050
      ay=1.74532925e-02*var(jvar)                                       rotm-051
      aa(2,1)=cos(ay)                                                   rotm-052
      aa(2,2)=sin(ay)                                                   rotm-053
    2 niv(i1,i2,1)=it                                                   rotm-054
      l1=iph(i1)                                                        rotm-055
      ax=aa(1,1)                                                        rotm-056
      if (l1.gt.1) l1=0                                                 rotm-057
      if (abs(ax).lt.1.e-6) go to 12                                    rotm-058
    3 l2=iph(i2)                                                        rotm-059
      if (l2.gt.1) l2=0                                                 rotm-060
      ay=ax*aa(2,1)                                                     rotm-061
      if (abs(ay).lt.1.e-6) go to 11                                    rotm-062
    4 if (l1.ne.l2) go to 7                                             rotm-063
      nsj=nsi                                                           rotm-064
      if (l1.eq.0) go to 5                                              rotm-065
      n3=iph(n1)                                                        rotm-066
      if (n3.ne.iph(n2)) go to 11                                       rotm-067
      nsj=2*nbta(10,n3)+nsj                                             rotm-068
    5 if (ipi(1,i1).ne.ipi(1,i2)) go to 26                              rotm-069
      if ((iabs(nsj).gt.ia2).or.(iabs(nsj).gt.ia1)) go to 27            rotm-070
      iq1=min0(iqmax,(ia1+ia2)/2)                                       rotm-071
      iq2=max0(2,iabs(ia1-ia2)/2)                                       rotm-072
      if (2*(iq2/2).ne.iq2) iq2=iq2+1                                   rotm-073
      if (iq2.gt.iq1) go to 11                                          rotm-074
      do 6 iqz=iq2,iq1,2                                                rotm-075
      if (4*it.gt.idt) call memo(idmt,idmt+4*it-idt,idt,3,lo)           rotm-076
      if (lo(216)) go to 29                                             rotm-077
      iq(1,it)=1000*(iqz+1)                                             rotm-078
      iq(2,it)=iqz                                                      rotm-079
      iq(3,it)=nsp                                                      rotm-080
      t(4,it)=(1-mod(iqz,4))*sqrt(ia1+1.)*djcg(ia1,2*iqz,ia2,nsj,0,fac,nrotm-081
     1fa)*ay                                                            rotm-082
      if (abs(t(4,it)).gt.1.e-6) it=it+1                                rotm-083
    6 continue                                                          rotm-084
      go to 11                                                          rotm-085
    7 if (l1.gt.l2) go to 8                                             rotm-086
      j1=i1                                                             rotm-087
      j2=i2                                                             rotm-088
      go to 9                                                           rotm-089
    8 j1=i2                                                             rotm-090
      j2=i1                                                             rotm-091
c  transposition                                                        rotm-092
      ay=ay*(1-mod(ipi(3,i1)+ipi(3,i2)+2*(ipi(1,i1)+ipi(1,i2)+1),4))    rotm-093
c 0 phonons -1 phonon                                                   rotm-094
    9 n3=iph(n2)                                                        rotm-095
      nsj=2*nbta(10,n3)                                                 rotm-096
      if (mod(ipi(1,i1)+ipi(1,i2)+nbta(9,n3),2).ne.0) go to 28          rotm-097
      if (iabs(nsj+nsi).gt.ia2) go to 27                                rotm-098
      iq1=(ia1+ia2)/2                                                   rotm-099
      iq2=max0(iabs(nsj),iabs(ia1-ia2))/2                               rotm-100
      if (mod(iq2+nbta(9,n3),2).ne.0) iq2=iq2+1                         rotm-101
      if (iq2.gt.iq1) go to 11                                          rotm-102
      do 10 iqz=iq2,iq1,2                                               rotm-103
      if (4*it.gt.idt) call memo(idmt,idmt+4*it-idt,idt,3,lo)           rotm-104
      if (lo(216)) go to 29                                             rotm-105
      iq(1,it)=1000*(iqz+1)+n3                                          rotm-106
      iq(2,it)=iqz                                                      rotm-107
      iq(3,it)=nsp                                                      rotm-108
      t(4,it)=(1-mod(iqz+ipi(1,i1)+ipi(1,i2),4))*sqrt(ia1+1.)*djcg(ia1,2rotm-109
     1*iqz,ia2,nsi,nsj,fac,nfa)*ay                                      rotm-110
      if (abs(t(4,it)).gt.1.e-6) it=it+1                                rotm-111
   10 continue                                                          rotm-112
   11 if ((aa(2,2).eq.0.).or.(l2.eq.1)) go to 12                        rotm-113
      l2=1                                                              rotm-114
      ay=ax*aa(2,2)                                                     rotm-115
      go to 4                                                           rotm-116
   12 if ((aa(1,2).eq.0.).or.(l1.eq.1)) go to 13                        rotm-117
      l1=1                                                              rotm-118
      ax=aa(1,2)                                                        rotm-119
      go to 3                                                           rotm-120
   13 iti=niv(i1,i2,1)                                                  rotm-121
      if (iti.eq.it) go to 22                                           rotm-122
      itf=it-1                                                          rotm-123
      if (itf.eq.iti) go to 17                                          rotm-124
      it1=iti+1                                                         rotm-125
      it=iti                                                            rotm-126
      do 16 i=it1,itf                                                   rotm-127
      do 14 j=iti,it                                                    rotm-128
      if ((iq(1,i).ne.iq(1,j)).or.(iq(2,i).ne.iq(2,j)).or.(iq(3,i).ne.iqrotm-129
     1(3,j))) go to 14                                                  rotm-130
      t(4,j)=t(4,j)+t(4,i)                                              rotm-131
      go to 16                                                          rotm-132
   14 continue                                                          rotm-133
      it=it+1                                                           rotm-134
      do 15 k=1,3                                                       rotm-135
   15 iq(k,it)=iq(k,i)                                                  rotm-136
      t(4,it)=t(4,i)                                                    rotm-137
   16 continue                                                          rotm-138
      it=it+1                                                           rotm-139
   17 itf=it-1                                                          rotm-140
      do 21 i=iti,itf                                                   rotm-141
      if (it.le.i) go to 22                                             rotm-142
   18 if (abs(t(4,i)).gt.1.e-12) go to 21                               rotm-143
      it1=i+1                                                           rotm-144
      it=it-1                                                           rotm-145
      if (it1.gt.it) go to 22                                           rotm-146
      do 20 j=it1,it                                                    rotm-147
      do 19 k=1,3                                                       rotm-148
   19 iq(k,j-1)=iq(k,j)                                                 rotm-149
   20 t(4,j-1)=t(4,j)                                                   rotm-150
      go to 18                                                          rotm-151
   21 continue                                                          rotm-152
   22 niv(i1,i2,2)=it-1                                                 rotm-153
   23 continue                                                          rotm-154
   24 continue                                                          rotm-155
      it=it-1                                                           rotm-156
      return                                                            rotm-157
   25 write (6,1001) jvar,nva                                           rotm-158
      go to 29                                                          rotm-159
   26 write (6,1002) i1,i2                                              rotm-160
      go to 29                                                          rotm-161
   27 write (6,1003) i1,i2                                              rotm-162
      go to 29                                                          rotm-163
   28 write (6,1004) i1,i2,n3                                           rotm-164
      go to 29                                                          rotm-165
   29 write (6,1005)                                                    rotm-166
      stop                                                              rotm-167
 1000 format (6h state,i4,f15.5,26h degrees      amplitudes =,f15.7,22h rotm-168
     1ground state band and,f15.5,17h vibrational band)                 rotm-169
 1001 format (26h number of variables used:,i5,5x,33hexceeds number of vrotm-170
     1ariables read:,i6)                                                rotm-171
 1002 format (/19h parities of states,i4,5h  and,i4,36h  incorrect for trotm-172
     1he rotational model)                                              rotm-173
 1003 format (49h too large magnetic quantum number between levels,i4,4hrotm-174
     1 and,i4)                                                          rotm-175
 1004 format (/19h parities of states,i4,5h  and,i4,55h  incorrect for trotm-176
     1he rotational model with the vibration,i4)                        rotm-177
 1005 format (//22h in rotm  ... stop ...)                              rotm-178
      end                                                               rotm-179
c 22/07/94  ibm version   cdc with 'c' to double precision      ecis94  roam-000
      subroutine roam(niv,iq,t,ipi,ncoll,ncols,it,beta,iph,var,va,iqmax,roam-001
     1fac,nfa,idmt,idt,lo)                                              roam-002
c nuclear reduced matrix elements for the asymmetric rotational model   roam-003
c the control number for form factor (l=2,k=0) is 2,for (l=2,k=2) is 3, roam-004
c    for (l=4,k=0) is 4,for (l=4,k=2) is 2  ... and so on...            roam-005
c for arguments niv to it and fac to lo    see redm                     roam-006
c special input: beta:  deformations.the gamma parameter beta(*,2) is   roam-007
c                       related to the band mixing param. if lo(2)=.trueroam-008
c                iph(i):number of nuclear parameters for i=1,ncoll      roam-009
c                     their address for i=ncoll+1,2*ncoll               roam-010
c                var:   band mixing coefficients                        roam-011
c                va:    working space for amplitudes (permanent)        roam-012
c                iqmax: maximum order of multipole expansion            roam-013
c                                                                       roam-014
c  (ip||q(iq,kq)||i) = sqrt(2*i+1) *cg(i,iq,ip,k,kq,kp)                 roam-015
c***********************************************************************roam-016
      logical lo(250)                                                   roam-017
      double precision djcg,fac                                         roam-018
      dimension iq(4,1),t(4,1),ipi(9,1),var(1),beta(10,3),niv(ncols,ncolroam-019
     1s,1),fac(1),va(5),iph(1)                                          roam-020
      ivar=0                                                            roam-021
      i2=1                                                              roam-022
      if (lo(102)) go to 4                                              roam-023
c var(1) is the angle gamma of davydov and filippov model               roam-024
c the second level must be a the first 2+ and the third one,if present, roam-025
c the second 2+ .their mixing coefficients are computed from var(1).    roam-026
c there can be any number of levels after the third one.                roam-027
      g=var(1)-beta(1,2)                                                roam-028
      do 1 i=1,8                                                        roam-029
    1 beta(i,2)=beta(i,2)+g                                             roam-030
      g=0.0174533*var(1)                                                roam-031
      g1=sin(g)                                                         roam-032
      g2=cos(g)                                                         roam-033
      g3=sin(3.*g)                                                      roam-034
      g4=cos(3.*g)                                                      roam-035
      g=sqrt(9.-8.*g3*g3)                                               roam-036
      g5=-(g1*g3+3.*g2*g4+g)                                            roam-037
      g6=3.*g1*g4-g2*g3                                                 roam-038
      va(1)=1.                                                          roam-039
      if (ncoll.eq.1) go to 2                                           roam-040
      g=sqrt(g6*g6+g5*g5)                                               roam-041
      va(2)=g5/g                                                        roam-042
      va(3)=g6/g                                                        roam-043
      if (ncoll.eq.2) go to 2                                           roam-044
      va(4)=-va(3)                                                      roam-045
      va(5)=va(2)                                                       roam-046
    2 i2=min0(ncoll,3)                                                  roam-047
      do 3 i1=1,i2                                                      roam-048
      if (i1.eq.1.and.ipi(3,i1).ne.1) go to 14                          roam-049
      if (i1.eq.1) go to 3                                              roam-050
      if (ipi(3,i1).ne.5) go to 14                                      roam-051
      if (.not.lo(217)) write (6,1000) i1,va(2*i1-2),va(2*i1-1)         roam-052
    3 continue                                                          roam-053
      ivar=i2-1                                                         roam-054
      i2=4                                                              roam-055
      if (i2.gt.ncoll) go to 7                                          roam-056
c levels not related to the gamma deformation                           roam-057
    4 do 6 i1=i2,ncoll                                                  roam-058
      if (ipi(3,i1).eq.3) go to 16                                      roam-059
      ivar=iph(i1+ncoll)                                                roam-060
      if (mod(ipi(3,i1),4).ne.1) var(ivar+1)=90.                        roam-061
      k1=ivar+i1                                                        roam-062
      va(k1)=1.                                                         roam-063
      if (iph(i1).eq.0) go to 6                                         roam-064
      k2=k1+iph(i1)-1                                                   roam-065
      do 5 k=k1,k2                                                      roam-066
      ivar=ivar+1                                                       roam-067
      g=0.0174533*var(ivar)                                             roam-068
      va(k+1)=va(k)*sin(g)                                              roam-069
    5 va(k)=va(k)*cos(g)                                                roam-070
      if (.not.lo(217)) write (6,1000) i1,(va(k),k=k1,k2),va(k2+1)      roam-071
    6 continue                                                          roam-072
c computation of red. mat. ele. for i=/<ip at the first call            roam-073
    7 it=1                                                              roam-074
      nsp=0                                                             roam-075
      if (lo(13).or.lo(19)) nsp=10                                      roam-076
      do 13 i1=1,ncoll                                                  roam-077
      nt=iph(i1)+1                                                      roam-078
      nv=iph(i1+ncoll)+i1-1                                             roam-079
      ia1=ipi(3,i1)-1                                                   roam-080
      nx=ia1/2-2*(ia1/4)                                                roam-081
      do 12 i2=i1,ncoll                                                 roam-082
      if (ipi(1,i1).ne.ipi(1,i2)) go to 15                              roam-083
      niv(i1,i2,1)=it                                                   roam-084
      mt=iph(i2)+1                                                      roam-085
      mv=iph(i2+ncoll)+i2-1                                             roam-086
      ia2=ipi(3,i2)-1                                                   roam-087
      mx=ia2/2-2*(ia2/4)                                                roam-088
      iq1=min0(iqmax,(ia1+ia2)/2,8)                                     roam-089
      iq2=max0(2,2*((iabs(ia1-ia2)/2+1)/2))                             roam-090
      if (iq2.gt.iq1) go to 11                                          roam-091
c computation of reduced matrix elements                                roam-092
      do 10 iqz=iq2,iq1,2                                               roam-093
      fs=iqz-4*((iqz+2)/4)+1                                            roam-094
      iqy=iqz/2+1                                                       roam-095
      do 9 mqz=1,iqy                                                    roam-096
      if (4*it.gt.idt) call memo(idmt,idmt+4,idt,3,lo)                  roam-097
      if (lo(216)) go to 17                                             roam-098
      iq(1,it)=1000*((iqy*(iqy-1))/2+mqz)                               roam-099
      b=0.                                                              roam-100
      iq(2,it)=iqz                                                      roam-101
      iq(3,it)=nsp                                                      roam-102
      mq=2*mqz-2                                                        roam-103
      do 8 n1=1,nt                                                      roam-104
      if (n1-nx.eq.0) go to 8                                           roam-105
      n=2*n1-2                                                          roam-106
      lm=n-mq                                                           roam-107
      if (iabs(lm).ge.2*mt) go to 8                                     roam-108
      l1=1+iabs(lm)/2                                                   roam-109
      fq=djcg(ia1,2*iqz,ia2,2*n,-2*mq,fac,nfa)*va(nv+n1)*va(mv+l1)      roam-110
      if (lm.lt.0.and.mx.eq.1) fq=-fq                                   roam-111
      if (mq*n*lm.ne.0) fq=.7071068*fq                                  roam-112
      b=b+fq                                                            roam-113
      if (n*mq.eq.0) go to 8                                            roam-114
      lm=mq+n                                                           roam-115
      if (lm.ge.2*mt) go to 8                                           roam-116
      l1=1+lm/2                                                         roam-117
      fq=djcg(ia1,2*iqz,ia2,2*n,2*mq,fac,nfa)*va(nv+n1)*va(mv+l1)       roam-118
      if (mq*n*lm.ne.0) fq=.7071068*fq                                  roam-119
      b=b+fq                                                            roam-120
    8 continue                                                          roam-121
      if (mq.ne.0) b=.7071068*b                                         roam-122
      t(4,it)=sqrt(1.+ia1)*b*fs                                         roam-123
      if (abs(t(4,it)).gt.1.e-6) it=it+1                                roam-124
    9 continue                                                          roam-125
   10 continue                                                          roam-126
   11 niv(i1,i2,2)=it-1                                                 roam-127
   12 continue                                                          roam-128
   13 continue                                                          roam-129
      it=it-1                                                           roam-130
      return                                                            roam-131
   14 write (6,1001)                                                    roam-132
      go to 17                                                          roam-133
   15 write (6,1002) i1,i2                                              roam-134
      go to 17                                                          roam-135
   16 write (6,1003)                                                    roam-136
   17 write (6,1004)                                                    roam-137
      stop                                                              roam-138
 1000 format (/39h band mixing coefficients for the level,i4/(6e20.7))  roam-139
 1001 format (/67h level order incorrect for link between deformation anroam-140
     1d band mixing/39h use 0+-2+-2+ and then the other levels)         roam-141
 1002 format (/19h parities of states,i4,5h  and,i4,36h  incorrect for troam-142
     1he rotational model)                                              roam-143
 1003 format (/30h no spin-1 state in this model)                       roam-144
 1004 format (//22h in roam  ... stop ...)                              roam-145
      end                                                               roam-146
c 31/10/85  ibm version                                         ecis88  djcg-000
      function djcg(j1,j2,j3,m1,m2,fac,nfa)                             djcg-001
c clebsch-gordan coefficients ( j1  j2  m1  m2 | j3  m1+m2 )            djcg-002
c the arguments j1,j2,j3,m1 and m2 are integer doubled values           djcg-003
c fac is a table of logarithm of factorials and nfa its length.         djcg-004
c***********************************************************************djcg-005
      implicit real*8(a-f)                                              djcg-006
      dimension fac(1)                                                  djcg-007
      djcg=0.d0                                                         djcg-008
      m3=m1+m2                                                          djcg-009
      if (j1+j2+j3.gt.2*nfa) go to 18                                   djcg-010
      if ((j1.lt.0).or.(j2.lt.0).or.(j3.lt.0)) go to 16                 djcg-011
      iy1=j1+m1+2                                                       djcg-012
      ix1=iy1/2                                                         djcg-013
      iy2=j2+m2+2                                                       djcg-014
      ix2=iy2/2                                                         djcg-015
      iy3=j3-m3+2                                                       djcg-016
      ix3=iy3/2                                                         djcg-017
      if ((ix1.le.0).or.(ix2.le.0).or.(ix3.le.0)) return                djcg-018
      if ((2*ix1.ne.iy1).or.(2*ix2.ne.iy2).or.(2*ix3.ne.iy3)) go to 17  djcg-019
      iy1=ix1-m1                                                        djcg-020
      iy2=ix2-m2                                                        djcg-021
      iy3=ix3+m3                                                        djcg-022
      if ((iy1.le.0).or.(iy2.le.0).or.(iy3.le.0)) return                djcg-023
c at this point ix1,ix2,ix3 are twice j+m and iy1,iy2,iy3 twice j-m     djcg-024
c search for a zero argument                                            djcg-025
      if (j3.eq.0) go to 4                                              djcg-026
      if ((j1.eq.0).or.(j2.eq.0)) go to 5                               djcg-027
      if (m3.eq.0) go to 6                                              djcg-028
      if (m2.eq.0) go to 7                                              djcg-029
      if (m1.eq.0) go to 8                                              djcg-030
c general case                                                          djcg-031
    1 nx=ix1+ix2+ix3                                                    djcg-032
      iz1=nx-ix1-iy1                                                    djcg-033
      iz2=nx-ix2-iy2                                                    djcg-034
      iz3=nx-ix3-iy3                                                    djcg-035
      if ((iz1.le.0).or.(iz2.le.0).or.(iz3.le.0)) return                djcg-036
      nxy=nx-1                                                          djcg-037
      i1=ix2-iy3                                                        djcg-038
      i2=iy1-ix3                                                        djcg-039
c k1 and k2 are the limits of the sum                                   djcg-040
c m1,m2,m3,k1,k3,k4 have their factorials in the denominator            djcg-041
c nxy=j1+j2+j3+1      iz1,iz2,iz3  are j1+j2-j3                         djcg-042
      k1=max0(i1,i2,0)+1                                                djcg-043
      k2=min0(iy1,ix2,iz3)                                              djcg-044
      k3=k1-i1                                                          djcg-045
      k4=k1-i2                                                          djcg-046
      n1=iy1-k1+1                                                       djcg-047
      n2=ix2-k1+1                                                       djcg-048
      n3=iz3-k1+1                                                       djcg-049
      djcg=dexp(0.5d0*(fac(ix3+iy3)-fac(ix3+iy3-1)-fac(nxy)+fac(iz1)+facdjcg-050
     1(iz2)+fac(iz3)+fac(ix1)+fac(ix2)+fac(ix3)+fac(iy1)+fac(iy2)+fac(iydjcg-051
     23))-fac(n1)-fac(n2)-fac(n3)-fac(k1)-fac(k3)-fac(k4))              djcg-052
      if (2*(k1/2).eq.k1) djcg=-djcg                                    djcg-053
      if (k1.eq.k2) go to 3                                             djcg-054
      a4=djcg                                                           djcg-055
      k=k2-k1                                                           djcg-056
      k3=k2-i1                                                          djcg-057
      k4=k2-i2                                                          djcg-058
      n1=iy1-k2                                                         djcg-059
      n2=ix2-k2                                                         djcg-060
      n3=iz3-k2                                                         djcg-061
c k2,k3,k4,n1,n2,n3 are the arguments of the factorials in the last termdjcg-062
      do 2 i=1,k                                                        djcg-063
      a1=(k2-i)*(k3-i)*(k4-i)                                           djcg-064
      a2=(n1+i)*(n2+i)*(n3+i)                                           djcg-065
    2 djcg=a4-djcg*a2/a1                                                djcg-066
    3 return                                                            djcg-067
c j1,j2 or j3  is zero                                                  djcg-068
    4 if (j1.ne.j2) return                                              djcg-069
      a1=j1+1                                                           djcg-070
      djcg=1.d0/dsqrt(a1)                                               djcg-071
      if (mod(iy1,2).eq.0) djcg=-djcg                                   djcg-072
      return                                                            djcg-073
    5 if (j1+j2.ne.j3) return                                           djcg-074
      djcg=1.d0                                                         djcg-075
      return                                                            djcg-076
c m1,m2 or m3 is zero; if the others m are larger than 1/2,general case djcg-077
    6 if (iabs(m1)-1) 9 , 10 , 1                                        djcg-078
    7 if (iabs(m1).gt.1) go to 1                                        djcg-079
      go to 11                                                          djcg-080
    8 if (iabs(m3).gt.1) go to 1                                        djcg-081
      go to 12                                                          djcg-082
c all the m are zeros                                                   djcg-083
    9 n5=ix1+ix2+ix3-1                                                  djcg-084
      if (2*(n5/2).ne.n5) return                                        djcg-085
      n2=ix1+ix2-ix3                                                    djcg-086
      n3=ix2+ix3-ix1                                                    djcg-087
      n4=ix3+ix1-ix2                                                    djcg-088
      a1=fac(2*ix3)-fac(2*ix3-1)                                        djcg-089
      kc=1                                                              djcg-090
      go to 14                                                          djcg-091
c one m is zero and the others +-1/2  formula of dcgs                   djcg-092
   10 iq=ix3-1                                                          djcg-093
      iz1=ix1+ix2-2                                                     djcg-094
      iz2=ix1-iy2                                                       djcg-095
      lz1=j1                                                            djcg-096
      lz2=j2                                                            djcg-097
      lw2=m2                                                            djcg-098
      lw1=iy1                                                           djcg-099
      go to 13                                                          djcg-100
   11 iq=ix2-1                                                          djcg-101
      iz1=ix1+ix3-2                                                     djcg-102
      iz2=ix3-iy1                                                       djcg-103
      lz1=j1                                                            djcg-104
      lz2=j3                                                            djcg-105
      lw2=m1                                                            djcg-106
      lw1=iy3                                                           djcg-107
      go to 13                                                          djcg-108
   12 iq=ix1-1                                                          djcg-109
      iz1=ix2+ix3-2                                                     djcg-110
      iz2=ix2-iy3                                                       djcg-111
      lz1=j2                                                            djcg-112
      lz2=j3                                                            djcg-113
      lw2=-m3                                                           djcg-114
      lw1=iy2                                                           djcg-115
   13 n2=iz1-iq+1                                                       djcg-116
      n3=iq+iz2+1                                                       djcg-117
      n4=iq-iz2+1                                                       djcg-118
      if (n2.lt.1.or.n3.lt.1.or.n4.lt.1) return                         djcg-119
      n5=iz1+iq+2                                                       djcg-120
      a1=fac(j3+2)-fac(j3+1)-fac(lz1+2)+fac(lz1+1)-fac(lz2+2)+fac(lz2+1)djcg-121
      kc=2                                                              djcg-122
c simple formula                                                        djcg-123
   14 if (n5-1.gt.nfa) go to 18                                         djcg-124
      l1=(n5+1)/2                                                       djcg-125
      l2=(n2+1)/2                                                       djcg-126
      l3=(n3+1)/2                                                       djcg-127
      l4=(n4+1)/2                                                       djcg-128
      djcg=dexp(0.5d0*(a1+fac(n2)+fac(n3)+fac(n4)-fac(n5))+fac(l1)-fac(ldjcg-129
     12)-fac(l3)-fac(l4))                                               djcg-130
      if (kc.eq.2) go to 15                                             djcg-131
      if (mod(l1+ix1-ix2,2).eq.0) djcg=-djcg                            djcg-132
      return                                                            djcg-133
   15 if (lw2.gt.0) l4=l4+n5+1                                          djcg-134
      djcg=2.d0*djcg                                                    djcg-135
      if (mod(l4+lw1+ix1-iy2,2).ne.0) djcg=-djcg                        djcg-136
      return                                                            djcg-137
   16 write (6,1000)                                                    djcg-138
      return                                                            djcg-139
   17 write (6,1001)                                                    djcg-140
      return                                                            djcg-141
   18 write (6,1002)                                                    djcg-142
      return                                                            djcg-143
 1000 format (34h negative angular momentum in djcg)                    djcg-144
 1001 format (71h integer/half-integer rule between quantum numbers trandjcg-145
     1sgressed in djcg)                                                 djcg-146
 1002 format (28h factorial too large in djcg)                          djcg-147
      end                                                               djcg-148
c 28/06/94  ibm version                                         ecis94  dj6j-000
      function dj6j(j1,j2,j3,j4,j5,j6,fac,nfa)                          dj6j-001
c                       ( j1  j2  j3 )                                  dj6j-002
c 6-j coefficients      )            (                                  dj6j-003
c                       ( j4  j5  j6 )                                  dj6j-004
c the arguments j1,j2,j3,j4,j5 and j6 are integer doubled values        dj6j-005
c fac is a table of logarithm of factorials and nfa its length.         dj6j-006
c***********************************************************************dj6j-007
      implicit real*8(a-f)                                              dj6j-008
      dimension ix(6),ia(3,4),iy(4),fac(1)                              dj6j-009
      data ia /1,2,3,1,5,6,4,2,6,4,5,3/                                 dj6j-010
      dj6j=0.d0                                                         dj6j-011
      ix(1)=j1                                                          dj6j-012
      ix(2)=j2                                                          dj6j-013
      ix(3)=j3                                                          dj6j-014
      ix(4)=j4                                                          dj6j-015
      ix(5)=j5                                                          dj6j-016
      ix(6)=j6                                                          dj6j-017
c  the arguments multiplied by 2 are in the table ix                    dj6j-018
c search for a zero argument                                            dj6j-019
      do 1 i=1,6                                                        dj6j-020
      if (ix(i).lt.0) go to 14                                          dj6j-021
      if (ix(i).eq.0) go to ( 5 , 6 , 7 , 8 , 9, 10 ),i                 dj6j-022
    1 continue                                                          dj6j-023
c general case                                                          dj6j-024
c check of the triangular relations and computation of delta            dj6j-025
      do 2 k=1,4                                                        dj6j-026
      iz1=ia(1,k)                                                       dj6j-027
      iz2=ia(2,k)                                                       dj6j-028
      iz3=ia(3,k)                                                       dj6j-029
      ix1=ix(iz1)                                                       dj6j-030
      ix2=ix(iz2)                                                       dj6j-031
      ix3=ix(iz3)                                                       dj6j-032
      n=ix1+ix2+ix3+2                                                   dj6j-033
      i1=n/2                                                            dj6j-034
      if (2*i1.ne.n) go to 12                                           dj6j-035
      if (i1.gt.nfa) go to 13                                           dj6j-036
      n1=i1-ix3                                                         dj6j-037
      n2=i1-ix2                                                         dj6j-038
      n3=i1-ix1                                                         dj6j-039
      if ((i1.le.0).or.(n1.le.0).or.(n2.le.0).or.(n3.le.0)) go to 15    dj6j-040
      iy(k)=i1+1                                                        dj6j-041
    2 dj6j=dj6j+fac(n1)-fac(i1+1)+fac(n2)+fac(n3)                       dj6j-042
      n1=(ix(1)+ix(2)+ix(4)+ix(5))/2                                    dj6j-043
      n2=(ix(1)+ix(3)+ix(4)+ix(6))/2                                    dj6j-044
      n3=(ix(2)+ix(3)+ix(5)+ix(6))/2                                    dj6j-045
c k1 and k2 are the limits of the sum                                   dj6j-046
c k1,l1,l2,l3,l4,m1,m2,m3 are for the factorials of the first term      dj6j-047
      k1=max0(iy(1),iy(2),iy(3),iy(4))                                  dj6j-048
      k2=min0(n1,n2,n3)+2                                               dj6j-049
      l1=k1-iy(1)+1                                                     dj6j-050
      l2=k1-iy(2)+1                                                     dj6j-051
      l3=k1-iy(3)+1                                                     dj6j-052
      l4=k1-iy(4)+1                                                     dj6j-053
      m1=n1-k1+3                                                        dj6j-054
      m2=n2-k1+3                                                        dj6j-055
      m3=n3-k1+3                                                        dj6j-056
      dj6j=dexp(.5d0*dj6j+fac(k1)-fac(l1)-fac(l2)-fac(l3)-fac(l4)-fac(m1dj6j-057
     1)-fac(m2)-fac(m3))                                                dj6j-058
      if (2*(k1/2).ne.k1) dj6j=-dj6j                                    dj6j-059
      if (k2.eq.k1) go to 4                                             dj6j-060
      a2=dj6j                                                           dj6j-061
      k=k2-k1                                                           dj6j-062
    3 a1=(m1-k)*(m2-k)*(m3-k)                                           dj6j-063
      k=k-1                                                             dj6j-064
      a3=(l1+k)*(l2+k)*(l3+k)*(l4+k)                                    dj6j-065
      dj6j=a2-(k1+k)*a1*dj6j/a3                                         dj6j-066
      if (k.gt.0) go to 3                                               dj6j-067
    4 return                                                            dj6j-068
c one quantum number is zero;check of triangular relations              dj6j-069
    5 if (ix(2).ne.ix(3).or.ix(5).ne.ix(6)) go to 15                    dj6j-070
      ix(6)=ix(4)                                                       dj6j-071
      ix(1)=ix(2)                                                       dj6j-072
      ix(4)=ix(5)                                                       dj6j-073
      go to 11                                                          dj6j-074
    6 if (ix(1).ne.ix(3).or.ix(4).ne.ix(6)) go to 15                    dj6j-075
      ix(6)=ix(5)                                                       dj6j-076
      go to 11                                                          dj6j-077
    7 if (ix(1).ne.ix(2).or.ix(4).ne.ix(5)) go to 15                    dj6j-078
      if (ix(4).ne.ix(5)) go to 15                                      dj6j-079
      go to 11                                                          dj6j-080
    8 if (ix(2).ne.ix(6).or.ix(3).ne.ix(5)) go to 15                    dj6j-081
      ix(6)=ix(1)                                                       dj6j-082
      ix(1)=ix(5)                                                       dj6j-083
      ix(4)=ix(2)                                                       dj6j-084
      go to 11                                                          dj6j-085
    9 if (ix(1).ne.ix(6).or.ix(3).ne.ix(4)) go to 15                    dj6j-086
      ix(6)=ix(2)                                                       dj6j-087
      go to 11                                                          dj6j-088
   10 if (ix(1).ne.ix(5).or.ix(2).ne.ix(4)) go to 15                    dj6j-089
      ix(6)=ix(3)                                                       dj6j-090
c value of the 6-j coefficient with an argument zero                    dj6j-091
   11 if (min0(ix(1),ix(4),ix(6)).lt.0) go to 14                        dj6j-092
      if (ix(6).gt.ix(1)+ix(4).or.ix(6).lt.iabs(ix(1)-ix(4))) go to 15  dj6j-093
      if (max0(ix(1),ix(4)).gt.nfa) go to 13                            dj6j-094
      k=ix(1)+ix(4)+ix(6)                                               dj6j-095
      n=k/2                                                             dj6j-096
      if (2*n.ne.k) go to 12                                            dj6j-097
      dj6j=(1-2*mod(n,2))/dsqrt(dfloat((ix(1)+1)*(ix(4)+1)))            dj6j-098
      return                                                            dj6j-099
   12 write (6,1000)                                                    dj6j-100
      go to 15                                                          dj6j-101
   13 write (6,1001)                                                    dj6j-102
      go to 15                                                          dj6j-103
   14 write (6,1002)                                                    dj6j-104
   15 dj6j=0.d0                                                         dj6j-105
      return                                                            dj6j-106
 1000 format (71h integer/half-integer rule between quantum numbers trandj6j-107
     1sgressed in dj6j)                                                 dj6j-108
 1001 format (28h factorial too large in dj6j)                          dj6j-109
 1002 format (34h negative angular momentum in dj6j)                    dj6j-110
      end                                                               dj6j-111
c 26/04/95  ibm version   cdc with 'c' to double precision      ecis95  extp-000
      subroutine extp(npp,ncoll,ncolt,wv,niv,iq,ivz,ivq,ipi,fac,nfa,va,nextp-001
     1va,ll,idt,idmt,lo)                                                extp-002
c input and setup of external form factors, elastic and transitions     extp-003
c input : npp:  number of different elastic channel potentials          extp-004
c         ncoll:number of coupled nuclear states                        extp-005
c         ncolt:number of nuclear states including uncoupled ones       extp-006
c         wv:   masses of particle and target in wv(1,*) and wv(2,*)    extp-007
c         niv:  addresses in table of nuclear matrix elements (see redm)extp-008
c         iq:   table of reduced nuclear matrix elements (see redm)     extp-009
c         ivz:  table of form factors  (see redm)                       extp-010
c         ivq:  table of angular momenta (see redm)                     extp-011
c         ipi(4,*): reference to potentials                             extp-012
c         fac:  table of logarithm of factorials                        extp-013
c         nfa:  length of fac                                           extp-014
c         idt:  size of available working space                         extp-015
c         idmt: length of total working field                           extp-016
c         lo:   logical controls                                        extp-017
c in common /poten/   see redm                                          extp-018
c output: va:   for optical model parameters read here                  extp-019
c         nva:  in equivalence by call with va                          extp-020
c         ll:   addresses in va in equivalence with va(4)               extp-021
c           nva(1) first address after ll                               extp-022
c           nva(2) last address before folding parameters               extp-023
c           nva(3) last address of folding parameters                   extp-024
c           ll(1,ityp,k) first address of parameters which can be variedextp-025
c             for ityp and form factor k, 1 for form factors not used   extp-026
c           ll(2,ityp,k) last address for ityp and form factor k, -1 forextp-027
c             form factors not used                                     extp-028
c                                                                       extp-029
c ityp 1 real volume or dirac scalar potential                          extp-030
c      2 imaginary volume or dirac scalar potential                     extp-031
c      3 real surface or dirac vector potential                         extp-032
c      4 imaginary surface or dirac vector potential                    extp-033
c      5 real spin-orbit or dirac tensor potential                      extp-034
c      6 imaginary spin-orbit or dirac tensor potential                 extp-035
c      7 coulomb potential                                              extp-036
c      8 coulomb spin-orbit potential                                   extp-037
c                                                                       extp-038
c l1,l2 controls the level to potential assignment                      extp-039
c ml    is 0 for the potential or the place of the transition form      extp-040
c       factor in the sequence of reduced matrix elements.              extp-041
c       the form factors contain the deformation.                       extp-042
c l1x,l2x,mlx  form factor copied to l1,l2,ml                           extp-043
c                                                                       extp-044
c the spin-orbit transition form factor to be read is the second one    extp-045
c multiplied by r**2. (multipole of an ordinary woods-saxon potential)  extp-046
c                                                                       extp-047
c itypx  -1  woods-saxon potential                                      extp-048
c        -2  first derivative   multiplied by r/sqrt(4*pi)              extp-049
c        -3  second derivative  multiplied by r**2/(8*pi)               extp-050
c        -4  third derivative   multiplied by r**3/(48*pi**(3/2))       extp-051
c        -5  deformed woods-saxon potential                             extp-052
c        -6  derivative of deformed woods-saxon potential               extp-053
c        -7  laguerre polynomial                                        extp-054
c        -8  solution in real woods-saxon potential                     extp-055
c        -9  bessel expansion                                           extp-056
c l2x gives the number of deformations, of nodes, of bessel functions   extp-057
c mlx is number of bound functions or the l-value of bessel expansion   extp-058
c =0 or 1 for one function with the quantum numbers of the transition,  extp-059
c =2 for two functions with the same itypx,                             extp-060
c =3 when itypx=-8 for a laguerre polynomial for the second function.   extp-061
c mlx and -l1x are quantum numbers of vibrational band                  extp-062
c -l1x gives the multiplication of step in computing bound function     extp-063
c -l1x is the order of derivation of bessel functions                   extp-064
c                                                                       extp-065
c allowed values of itypx for standard potentials                       extp-066
c ***********************************************                       extp-067
c **** ml is 0 ****                                                     extp-068
c itypx =    -1    -2    -3    -4    -5    -6    -7    -8    -9         extp-069
c ityp = 1   yes   no    no    no    yes   no    no    no    yes        extp-070
c ityp = 2   yes   no    no    no    yes   no    no    no    yes        extp-071
c ityp = 3   yes   no    no    no    yes   no    no    no    yes        extp-072
c ityp = 4   yes   no    no    no    yes   no    no    no    yes        extp-073
c ityp = 5   yes   no    no    no    yes   no    no    no    yes        extp-074
c ityp = 6   yes   no    no    no    yes   no    no    no    yes        extp-075
c ityp = 7   yes   no    no    no    yes   no    no    no    yes        extp-076
c ityp = 8   yes   no    no    no    yes   no    no    no    yes        extp-077
c **** ml is not 0 ****                                                 extp-078
c ityp = 1   yes   yes   yes   yes   yes   yes   yes   yes   yes        extp-079
c ityp = 2   yes   yes   yes   yes   yes   yes   yes   yes   yes        extp-080
c ityp = 3   yes   yes   yes   yes   yes   yes   no    no    yes        extp-081
c ityp = 4   yes   yes   yes   yes   yes   yes   no    no    yes        extp-082
c ityp = 5   yes   yes   yes   yes   yes   yes   no    no    yes        extp-083
c ityp = 6   yes   yes   yes   yes   yes   yes   no    no    yes        extp-084
c ityp = 7   no    yes   yes   yes   yes   yes   no    no    yes        extp-085
c ityp = 8   no    yes   yes   yes   yes   yes   no    no    yes        extp-086
c number of parameters to store                                         extp-087
c            10    10    10    10  11+l2x 13+l2x 11    22   13+l2x      extp-088
c there is one more for coulomb potentials and itypx=-1 to -6.          extp-089
c there are 5 more parameters for itypx=-7 and mlx=2.                   extp-090
c there are 16 or 6 more parameters for itypx=-8 and mlx=2 or mlx=3.    extp-091
c***********************************************************************extp-092
      logical lo(250)                                                   extp-093
      double precision aa,fac,dcgs,wv                                   extp-094
      dimension ivz(7,1),ivq(3,1),niv(ncoll,ncoll,1),iq(4,1),ipi(9,1),faextp-095
     1c(1),va(300),nva(300),ll(2,8,1),aa(3,8),itz(9),wv(11,1)           extp-096
      common /poten/ im,nv,mv,invt,inls,invc,invd,intc,imax,itx(16),itxmextp-097
      data aa /8h      re,8hal volum,8he/scalar,8h imagina,8hry volum,8hextp-098
     1e/scalar,8h     rea,8hl surfac,8he/vector,8h  imagin,8h. surfac,8hextp-099
     2e/vector,8h  real s,8hpin-orbi,8ht/tensor,8h imag. s,8hpin-orbi,8hextp-100
     3t/tensor,8h        ,8h        ,8h coulomb,8h      sp,8hin-orbit,8hextp-101
     4 coulomb/                                                         extp-102
      data itz /5,5,5,5,6,8,5,6,8/                                      extp-103
      data ierm /4hlast/                                                extp-104
      if (lo(99)) go to 38                                              extp-105
      npx=npp+intc                                                      extp-106
      nma=4+16*npx                                                      extp-107
      nva(1)=nma                                                        extp-108
      if (nma.gt.idt) call memo(idmt,idmt+nma-idt,idt,3,lo)             extp-109
      if (lo(216)) go to 39                                             extp-110
c setting the controls of input                                         extp-111
      do 6 i=1,npx                                                      extp-112
      do 1 j=1,16                                                       extp-113
    1 ll(j,1,i)=-1                                                      extp-114
      if (i.gt.npp) go to 2                                             extp-115
      if (.not.lo(201)) go to 6                                         extp-116
      ll(1,5,i)=1                                                       extp-117
      ll(1,6,i)=1                                                       extp-118
      ll(1,8,i)=1                                                       extp-119
      go to 6                                                           extp-120
    2 k=i-npp                                                           extp-121
      l=ivz(2,k)                                                        extp-122
      if (ivq(2,l).ge.0) go to 4                                        extp-123
      do 3 l=1,6                                                        extp-124
    3 ll(1,l,i)=1                                                       extp-125
      ll(1,8,i)=1                                                       extp-126
      go to 6                                                           extp-127
    4 if (lo(112)) ll(1,2,i)=1                                          extp-128
      if (lo(112)) ll(1,4,i)=1                                          extp-129
      if (lo(100)) go to 5                                              extp-130
      if (k.gt.inls) ll(1,5,i)=1                                        extp-131
      if (lo(114).or.k.gt.inls) ll(1,6,i)=1                             extp-132
      if (k.gt.invc) ll(1,7,i)=1                                        extp-133
      if (k.gt.invd) ll(1,8,i)=1                                        extp-134
      go to 6                                                           extp-135
    5 if (ivz(3,k).eq.0) ll(1,5,i)=1                                    extp-136
      if (lo(114).or.ivz(3,k).eq.0) ll(1,6,i)=1                         extp-137
      if (ivz(4,k).eq.0) ll(1,7,i)=1                                    extp-138
      if (ivz(5,k).eq.0) ll(1,8,i)=1                                    extp-139
    6 continue                                                          extp-140
c count of form factors to be read                                      extp-141
      ntot=0                                                            extp-142
      nto=8*npx                                                         extp-143
      do 7 j=1,nto                                                      extp-144
      if (ll(1,j,1).eq.-1) ntot=ntot+1                                  extp-145
    7 continue                                                          extp-146
      nfolt=0                                                           extp-147
    8 if (ntot.le.0) go to 35                                           extp-148
c input of a form factor                                                extp-149
      read (5,1000,err= 40 ) l1,l2,ml,ityp,l1x,l2x,mlx,itypx,nst,nfold,nextp-150
     1int                                                               extp-151
      if (ityp.gt.8.or.iabs(nst).gt.ncolt.or.ityp.le.0) go to 41        extp-152
      nfolt=max0(nfolt,nfold)                                           extp-153
      if (iabs(ml).ne.0) go to 9                                        extp-154
c test for a potential                                                  extp-155
      if (l1.ne.l2.or.l1.gt.ncolt) go to 42                             extp-156
      lz=ipi(4,l1)                                                      extp-157
      if (nst.eq.0) nst=l1                                              extp-158
      if (lo(173)) write (6,1001) (aa(k,ityp),k=1,3),lz                 extp-159
      go to 12                                                          extp-160
c test for a transition                                                 extp-161
    9 if (l1.gt.ncoll.or.l2.gt.ncoll) go to 43                          extp-162
      ly=niv(l1,l2,1)+iabs(ml)-1                                        extp-163
      if (ly.gt.niv(l1,l2,2)) go to 44                                  extp-164
      lx=iq(1,ly)                                                       extp-165
      if (ml.gt.0) go to 11                                             extp-166
      lx=ivz(6,lx)                                                      extp-167
      if (lx.le.0) go to 45                                             extp-168
   11 if (lo(100)) go to 10                                             extp-169
      if ((ityp.eq.5).or.(ityp.eq.6)) lx=ivz(3,lx)-intc                 extp-170
      if (ityp.ge.7) lx=ivz(ityp-3,lx)                                  extp-171
   10 lz=lx+npp                                                         extp-172
      if (nst.eq.0) nst=1                                               extp-173
      if (lo(173)) write (6,1002) (aa(k,ityp),k=1,3),l1,l2,ml           extp-174
c test it is not already read and that there is place                   extp-175
   12 if (ll(1,ityp,lz).ne.-1) go to 46                                 extp-176
      if (nma+38.gt.idt) call memo(idmt,idmt+nma+35-idt,idt,3,lo)       extp-177
      if (lo(216)) go to 39                                             extp-178
      ntot=ntot-1                                                       extp-179
      nva(nma)=8*lz+ityp                                                extp-180
      nva(nma+2)=nfold                                                  extp-181
      if (itypx.lt.0.or.l1x.le.0) go to 19                              extp-182
      nva(nma+4)=nma                                                    extp-183
      nmd=nma+5                                                         extp-184
      ll(1,ityp,lz)=nmd                                                 extp-185
      va(nmd)=1.                                                        extp-186
      if (nint.lt.0) read (5,1006,err= 54 ) va(nmd)                     extp-187
c use of already stored form factor/test existence of copied form factorextp-188
      if (ityp.ne.itypx) go to 47                                       extp-189
      if (ml.ne.0) go to 13                                             extp-190
      if (l1x.ne.l2x.or.l1x.gt.ncolt) go to 48                          extp-191
      lzx=ipi(4,l1x)                                                    extp-192
      if (lo(173)) write (6,1003) l1x,itypx,l1                          extp-193
      go to 15                                                          extp-194
   13 if (l1x.gt.ncoll.or.l2x.gt.ncoll) go to 49                        extp-195
      lyy=niv(l1x,l2x,1)+mlx-1                                          extp-196
      if (lyy.gt.niv(l1x,l2x,2)) go to 50                               extp-197
      lxx=iq(1,lyy)                                                     extp-198
      if (lo(100)) go to 14                                             extp-199
      if ((ityp.eq.5).or.(ityp.eq.6)) lxx=ivz(3,lxx)-intc               extp-200
      if (ityp.ge.7) lxx=ivz(ityp-3,lxx)                                extp-201
   14 lzx=lxx+npp                                                       extp-202
      if (lo(173)) write (6,1004) l1x,l2x,mlx,itypx,l1,l2,ml            extp-203
   15 nmc=ll(1,ityp,lzx)                                                extp-204
      if (nmc.eq.-1) go to 51                                           extp-205
c use of already stored form factor/test possibility to copy            extp-206
      nmb=nva(nmc-1)                                                    extp-207
      itypx=-nva(nmb+1)                                                 extp-208
      if (nva(nmb+2).eq.0.and.nfold.ne.0) nva(nmb+2)=-1                 extp-209
      if (nva(nmb+2).ne.0.and.nfold.eq.0) nva(nma+2)=-1                 extp-210
      if (itypx.ne.-16) go to 16                                        extp-211
      lzx=(nva(nmb+3)-1)/8                                              extp-212
      go to 15                                                          extp-213
   16 if (itypx.gt.-5.or.ml.eq.0) go to 18                              extp-214
      if (itypx.ne.-7.and.itypx.ne.-8) go to 17                         extp-215
      ll(1,ityp+2,lz)=1                                                 extp-216
      ntot=ntot-1                                                       extp-217
      nmb=nmb+itz(-itypx)                                               extp-218
      if (nva(nmb).eq.1) go to 17                                       extp-219
      if (nva(nmb+3).ne.1.or.nva(nmb+7).ne.1) go to 18                  extp-220
      k=iq(2,ly)                                                        extp-221
      va(nmd)=dcgs(2*ivq(1,k),nva(nmb+4),nva(nmb+8),fac,nfa)*sqrt(2.*ivqextp-222
     1(1,k)+1.)/va(nmc)                                                 extp-223
      if (va(nmd).eq.0) go to 52                                        extp-224
      go to 18                                                          extp-225
   17 if (iq(2,ly).ne.iq(2,lyy)) go to 53                               extp-226
   18 nva(nma+1)=16                                                     extp-227
      nva(nma+3)=8*lzx+ityp                                             extp-228
      nmb=nma+4                                                         extp-229
      if (lo(173)) write (6,1005) nma,nmb,(nva(i),i=nma,nmb),nmd,va(nmd)extp-230
      ll(2,ityp,lz)=nmd                                                 extp-231
      nma=nmd+1                                                         extp-232
      go to 8                                                           extp-233
   19 nva(nma+3)=nint                                                   extp-234
      nva(nma+4)=nst                                                    extp-235
      if (itypx.lt.0) go to 21                                          extp-236
      nva(nma+5)=nma                                                    extp-237
      ll(1,ityp,lz)=nma+6                                               extp-238
c form factor read from cards                                           extp-239
      read (5,1006,err= 54 ) va(nma+6),va(nma+7)                        extp-240
      if (va(nma+6).eq.0.) va(nma+6)=1.                                 extp-241
      if (va(nma+7).eq.0.) va(nma+7)=1.                                 extp-242
      nm=nma+8                                                          extp-243
   20 nmb=nm+3                                                          extp-244
      if (nmb.gt.idt) call memo(idmt,idmt+nmb-idt,idt,3,lo)             extp-245
      if (lo(216)) go to 39                                             extp-246
      read (5,1007,err= 54 ) (va(i),i=nm,nmb),last                      extp-247
      nm=nmb+1                                                          extp-248
      if (last.ne.ierm) go to 20                                        extp-249
      nvn=nma+7                                                         extp-250
      nm=nvn+1                                                          extp-251
      nva(nma+1)=-(nmb-nvn)/2                                           extp-252
      if (lo(173)) write (6,1008) nma,nvn,(nva(nma+i-1),i=1,6),va(nma+6)extp-253
     1,va(nma+7),nm,nmb                                                 extp-254
      if (lo(173)) write (6,1009) (va(i),i=nm,nmb)                      extp-255
      ll(2,ityp,lz)=nmb                                                 extp-256
      nma=nmb+1                                                         extp-257
      go to 8                                                           extp-258
c standard form factors                                                 extp-259
   21 if (itypx.lt.-9) go to 55                                         extp-260
      itypy=-itypx                                                      extp-261
      if ((itypy.eq.9).and.(ml.ne.0).and.(mlx.eq.0)) mlx=ivz(7,lx)      extp-262
      if ((itypy.eq.9).and.(mlx.lt.0)) mlx=0                            extp-263
      if (itypy.eq.9) go to 22                                          extp-264
      if (((itypy-1)*(itypy-5).ne.0).and.ml.eq.0) go to 56              extp-265
      if ((itypy.eq.1).and.(ml.ne.0).and.(ityp.ge.7)) go to 57          extp-266
      if ((itypy.ge.7).and.(ityp.gt.2)) go to 58                        extp-267
   22 nmb=nma+itz(itypy)                                                extp-268
      nva(nma+1)=itypy                                                  extp-269
      if (nmb.gt.nma+5) nva(nma+5)=l2x                                  extp-270
      if (nmb.gt.nma+6) nva(nma+6)=mlx                                  extp-271
      if (nmb.gt.nma+7) nva(nma+7)=-l1x                                 extp-272
      if (itypy.eq.7.or.itypy.eq.8) go to 27                            extp-273
      nva(nmb)=nma                                                      extp-274
      ll(1,ityp,lz)=nmb+1                                               extp-275
      if (lo(173).and.itypy.eq.9) write (6,1010) nma,nmb,(nva(i),i=nma,nextp-276
     1mb)                                                               extp-277
      if (itypy.eq.9) go to 24                                          extp-278
      if (lo(173).and.itypy.eq.6) write (6,1011) nma,nmb,(nva(i),i=nma,nextp-279
     1mb)                                                               extp-280
      if (lo(173).and.itypy.eq.5) write (6,1012) nma,nmb,(nva(i),i=nma,nextp-281
     1mb)                                                               extp-282
      if (lo(173).and.itypy.lt.5) write (6,1013) nma,nmb,(nva(i),i=nma,nextp-283
     1mb)                                                               extp-284
      nma=nmb+1                                                         extp-285
      nmb=nmb+4                                                         extp-286
      if (ityp.gt.6) nmb=nmb+1                                          extp-287
      read (5,1006,err= 54 ) (va(i),i=nma,nmb)                          extp-288
      if (itypy.gt.6) go to 23                                          extp-289
      k=iabs(nst)                                                       extp-290
      if (k.eq.nst) go to 23                                            extp-291
      if (lo(173)) write (6,1014) va(nma),va(nma+1)                     extp-292
      ex=wv(2,k)**.33333333333333e0                                     extp-293
      ey=ex                                                             extp-294
      if (lo(16)) ex=ex+wv(1,k)**.33333333333333e0                      extp-295
      ey=ey/ex                                                          extp-296
      va(nma+1)=va(nma+1)*ex                                            extp-297
      if (lo(116).or.ml.eq.0) go to 23                                  extp-298
      ityz=itypy                                                        extp-299
      if (ityz.ge.5) ityz=ityz-4                                        extp-300
      ityw=1                                                            extp-301
      k=iq(2,ly)                                                        extp-302
      if (ityp.gt.6) ityw=ityw*ivq(1,k)                                 extp-303
      if (lo(6)) ityw=ityw-1                                            extp-304
      if (ityz.gt.1) va(nma)=va(nma)*ey**((ityz-1)*ityw)                extp-305
   23 if (lo(173)) write (6,1015) nma,nmb,(va(i),i=nma,nmb)             extp-306
      if (itypy.lt.5) go to 34                                          extp-307
   24 nma=nmb+1                                                         extp-308
      nmc=nma                                                           extp-309
      if (itypy.eq.9) nmc=nmc+2                                         extp-310
      nmb=nmc+l2x-1                                                     extp-311
      if (nmb.gt.idt) call memo(idmt,idmt+nmb-idt,idt,3,lo)             extp-312
      if (lo(216)) go to 39                                             extp-313
      read (5,1006,err= 54 ) (va(i),i=nma,nmb)                          extp-314
      if ((itypy.eq.9).and.(va(nma).eq.0.)) va(nma)=1.                  extp-315
      if (nst.gt.0.or.itypy.eq.9) go to 26                              extp-316
      if (lo(173)) write (6,1016) (va(i),i=nma,nmb)                     extp-317
      do 25 i=nma,nmb                                                   extp-318
      j=i-nma                                                           extp-319
      if (ityp.lt.7) j=0                                                extp-320
      if (lo(106)) j=j+1                                                extp-321
   25 va(i)=va(i)*ey**j                                                 extp-322
   26 if (lo(173).and.itypy.eq.9) write (6,1017) nma,nmb,va(nma),va(nma+extp-323
     11),l2x,(i,va(i),i=nmc,nmb)                                        extp-324
      if (lo(173).and.itypy.ne.9) write (6,1018) nma,nmb,l2x,(i,va(i),i=extp-325
     1nma,nmb)                                                          extp-326
      go to 34                                                          extp-327
   27 ll(1,ityp+2,lz)=1                                                 extp-328
      ntot=ntot-1                                                       extp-329
      if (lo(100)) go to 59                                             extp-330
      if (mlx.eq.0) mlx=1                                               extp-331
      if ((mlx.lt.0.or.mlx.gt.3).or.(mlx.eq.3.and.itypy.eq.7)) go to 60 extp-332
      nva(nmb)=mlx                                                      extp-333
      mly=mlx                                                           extp-334
      nmc=nmb-1                                                         extp-335
      if (lo(173)) write (6,1019) nma,nmc,(nva(i),i=nma,nmc)            extp-336
      nmc=nmb+5                                                         extp-337
      k=iq(2,ly)                                                        extp-338
      if (mlx.gt.1) go to 29                                            extp-339
      nva(nmb+1)=-l1x                                                   extp-340
      do 28 i=1,3                                                       extp-341
   28 nva(nmb+i+1)=ivq(i,k)                                             extp-342
      nva(nmc)=nma                                                      extp-343
      if (lo(173)) write (6,1020) nmb,nmc,(nva(i),i=nmb,nmc)            extp-344
      go to 31                                                          extp-345
   29 read (5,1000) (nva(nmb+i),i=1,8),nvc                              extp-346
      if (nva(nmb+3).eq.1.and.nvc.eq.0) nva(nmb+3)=-3                   extp-347
      nmd=nmc+4                                                         extp-348
      nva(nmd)=nma                                                      extp-349
      nmc=nmd+1                                                         extp-350
      va(nmc)=1.                                                        extp-351
      if (nva(nmb+3).ne.1.or.nva(nmb+7).ne.1.or.nvc.eq.0) go to 30      extp-352
      va(nmc)=dcgs(2*ivq(1,k),nva(nmb+4),nva(nmb+8),fac,nfa)*sqrt(2.*ivqextp-353
     1(1,k)+1.)                                                         extp-354
      if (va(nmc).eq.0) go to 52                                        extp-355
   30 if (lo(173)) write (6,1021) nmb,nmd,(nva(i),i=nmb,nmd),nmc,va(nmc)extp-356
   31 nmc=nmc+1                                                         extp-357
      ll(1,ityp,lz)=nmc-1                                               extp-358
      if (itypy.eq.8) go to 33                                          extp-359
   32 read (5,1006,err= 54 ) (va(nmc+i-1),i=1,mlx)                      extp-360
      if (mlx.eq.2.and.va(nmc+1).eq.0.) va(nmc+1)=va(nmc)               extp-361
      nmb=nmc+mlx-1                                                     extp-362
      if (lo(173)) write (6,1022) nmc,nmb,(va(i),i=nmc,nmb)             extp-363
      go to 34                                                          extp-364
   33 nmb=nmc+10                                                        extp-365
      read (5,1006,err= 54 ) (va(i),i=nmc,nmb)                          extp-366
      if (va(nmc+4).eq.0.) va(nmc+4)=35.                                extp-367
      if (lo(173)) write (6,1023) nmc,nmb,(va(i),i=nmc,nmb)             extp-368
      if (mlx.eq.1.and.mly.eq.2.and.va(nmc-10).lt.0..and.va(nmc).lt.0.) extp-369
     1go to 61                                                          extp-370
      nmc=nmb+1                                                         extp-371
      mlx=mlx-1                                                         extp-372
      if (mlx.eq.2) go to 32                                            extp-373
      if (mlx.eq.1) go to 33                                            extp-374
   34 ll(2,ityp,lz)=nmb                                                 extp-375
      nma=nmb+1                                                         extp-376
      go to 8                                                           extp-377
   35 nva(2)=nma                                                        extp-378
      if (nfolt.eq.0) go to 37                                          extp-379
      nmb=nma                                                           extp-380
      if (lo(173)) write (6,1024) nfolt                                 extp-381
      do 36 i=1,nfolt                                                   extp-382
      read (5,1006,err= 65 ) va(nma),va(nma+1),va(nma+2)                extp-383
      if (lo(173)) write (6,1025) i,va(nma),va(nma+1),va(nma+2)         extp-384
   36 nma=nma+3                                                         extp-385
   37 nva(3)=nma-1                                                      extp-386
      return                                                            extp-387
   38 write (6,1026)                                                    extp-388
      go to 66                                                          extp-389
   39 write (6,1027) nmb,idt                                            extp-390
      go to 66                                                          extp-391
   40 write (6,1028)                                                    extp-392
      go to 62                                                          extp-393
   41 write (6,1029) ityp,nst,ncolt                                     extp-394
      go to 62                                                          extp-395
   42 write (6,1030) ml,l1,l2,ncolt                                     extp-396
      go to 62                                                          extp-397
   43 write (6,1031) ml,l1,l2,ncoll                                     extp-398
      go to 62                                                          extp-399
   44 write (6,1032) ml,l1,l2                                           extp-400
      go to 62                                                          extp-401
   45 write (6,1033) l1,l2,ml                                           extp-402
      go to 62                                                          extp-403
   46 write (6,1034) l1,l2,ml,ityp                                      extp-404
      go to 62                                                          extp-405
   47 write (6,1035) l1,l2,ml,ityp,l1x,l2x,mlx,itypx                    extp-406
      go to 62                                                          extp-407
   48 write (6,1036) mlx,l1x,l2x,ncolt                                  extp-408
      go to 62                                                          extp-409
   49 write (6,1037) mlx,l1x,l2x,ncoll                                  extp-410
      go to 62                                                          extp-411
   50 write (6,1038) mlx,l1x,l2x,ncoll                                  extp-412
      go to 62                                                          extp-413
   51 write (6,1039) mlx,l1x,l2x,itypx                                  extp-414
      go to 62                                                          extp-415
   52 write (6,1040) nva(nmb+4),nva(nmb+8),k                            extp-416
      go to 62                                                          extp-417
   53 write (6,1041) itypx,iq(2,lyy),iq(2,ly)                           extp-418
      go to 62                                                          extp-419
   54 write (6,1042) ityp,lz                                            extp-420
      go to 62                                                          extp-421
   55 write (6,1043) itypx                                              extp-422
      go to 62                                                          extp-423
   56 write (6,1044) itypx,ityp                                         extp-424
      go to 62                                                          extp-425
   57 write (6,1045) itypx,ityp                                         extp-426
      go to 62                                                          extp-427
   58 write (6,1046) itypx,ityp                                         extp-428
      go to 62                                                          extp-429
   59 write (6,1047) itypx                                              extp-430
      go to 62                                                          extp-431
   60 write (6,1048) mlx,itypx                                          extp-432
      go to 62                                                          extp-433
   61 write (6,1049) va(nmc-10),va(nmc)                                 extp-434
   62 if (ntot.eq.0) go to 66                                           extp-435
      write (6,1050) ntot,npp                                           extp-436
      do 64 j=1,npx                                                     extp-437
      do 63 i=1,8                                                       extp-438
      if (ll(1,i,j).eq.-1) write (6,1051) i,j                           extp-439
   63 continue                                                          extp-440
   64 continue                                                          extp-441
      go to 66                                                          extp-442
   65 write (6,1052) i,nfolt                                            extp-443
   66 write (6,1053)                                                    extp-444
      stop                                                              extp-445
 1000 format (12i5)                                                     extp-446
 1001 format (/3a8,14h potential nr(,i2,1h))                            extp-447
 1002 format (/3a8,33h transition potential from level(,i2,11h) to levelextp-448
     1(,i2,20h) and the order ml =,i2)                                  extp-449
 1003 format (26h the elastic potential nr(,i2,6h) typ(,i1,18h) is copieextp-450
     1d to nr(,i2,1h))                                                  extp-451
 1004 format (25h transition potential l1(,i2,5h) l2(,i2,5h) ml(,i2,6h) extp-452
     1typ(,i2,18h) is copied to l1(,i2,5h) l2(,i2,5h) ml(,i2,1h))       extp-453
 1005 format (17h using parameters,i6,3h to,i6,13h for copy to:,i5,5x,7hextp-454
     1(copy):,i3,5x,6hfold =,i3,5x,5hfrom:,i5,5x,6hstart:,i5/16h using pextp-455
     2arameter,i6,26h for multiplicative factor,e15.8)                  extp-456
 1006 format (7f10.5)                                                   extp-457
 1007 format (f10.5,f20.10,f10.5,f20.10,a4)                             extp-458
 1008 format (17h using parameters,i6,3h to,i6,10h to store:,i5,5x,10hnbextp-459
     1 points:,i5,5x,5hfold:,i2,5x,5hintg:,i2,5x,5hstep:,i2,5x,6hstart:,extp-460
     2i5/20x,9hstrength:,f15.6,10x,6hscale:,f15.6/15h and parameters,i6,extp-461
     33h to,i6,10h to store:/4(6x,6hradius,7x,9hpotential,2x))          extp-462
 1009 format (4(2x,0p,f10.5,3x,1p,e15.7))                               extp-463
 1010 format (17h using parameters,i6,3h to,i6,10h to store:/i5,3x,5htypextp-464
     1e:,i2,3x,5hfold:,i2,3x,5hintg:,i2,3x,5hstep:,i2,i6,14h functions  extp-465
     2l:,i3,i4,20h derivations  start:,i5)                              extp-466
 1011 format (17h using parameters,i6,3h to,i6,10h to store:/i5,3x,5htypextp-467
     1e:,i2,3x,5hfold:,i2,3x,5hintg:,i2,3x,5hstep:,i2,i6,21h deformationextp-468
     2s   lbet:,i5,5x,5hkbet:,i5,5x,6hstart:,i5)                        extp-469
 1012 format (17h using parameters,i6,3h to,i6,10h to store:/i5,3x,5htypextp-470
     1e:,i2,3x,5hfold:,i2,3x,5hintg:,i2,3x,5hstep:,i2,i6,13h deformationextp-471
     2s,5x,6hstart:,i5)                                                 extp-472
 1013 format (17h using parameters,i6,3h to,i6,10h to store:,i4,3x,5htypextp-473
     1e:,i2,3x,5hfold:,i2,3x,5hintg:,i2,3x,5hstep:,i2,5x,6hstart:,i5)   extp-474
 1014 format (13h values read:,f12.6,3x,f9.6)                           extp-475
 1015 format (17h using parameters,i6,3h to,i6,4h for/6h depth,f12.6,12hextp-476
     1 mev  radius,f9.6,15h f  diffuseness,f9.6,20h f at the power (1.+,extp-477
     2f8.6,1h),2x,f8.6,18h (3rd coul. parm.)/)                          extp-478
 1016 format (19h deformations read:,8f10.5/(19x,8f10.5))               extp-479
 1017 format (17h using parameters,i6,3h to,i6,14h for strength:,f12.6,1extp-480
     10x,6hscale:,f12.6/13h and to store,i5,30h bessel function coefficiextp-481
     2ents:/(6(3x,i5,f10.5)))                                           extp-482
 1018 format (17h using parameters,i6,3h to,i6,4h for,i5,14h deformationextp-483
     1s:/(6(3x,i5,f10.5)))                                              extp-484
 1019 format (17h using parameters,i6,3h to,i6,10h to store:,i4,3x,5htypextp-485
     1e:,i2,3x,5hfold:,i2,3x,5hintg:,i2,3x,5hstep:,i2,5x,5hmult:,i3)    extp-486
 1020 format (17h using parameters,i6,3h to,i6,10h to store:,i2,16h funcextp-487
     1tions   n =,i2,3x,3hl =,i3,3x,5h2*s =,i2,3x,5h2*j =,i3,5x,6hstart:extp-488
     2,i5)                                                              extp-489
 1021 format (17h using parameters,i6,3h to,i6,10h to store:/i5,10h funcextp-490
     1tions,2(2x,3hn =,i2,3x,3hl =,i3,3x,5h2*s =,i2,3x,5h2*j =,i3),5x,6hextp-491
     2start:,i5/16h using parameter,i6,26h for multiplicative factor,e18extp-492
     3.8)                                                               extp-493
 1022 format (17h using parameters,i6,3h to,i6,29h for the oscillator paextp-494
     1rameter,2f10.5)                                                   extp-495
 1023 format (17h using parameters,i6,3h to,i6,10h to store:/20h **** biextp-496
     1nding energy,f12.6,9h mev ****,2x,10htotal mass,f12.6,2x,13hparticextp-497
     2le mass,f12.6,2x,18hproduct of charges,f8.2/39h search on depth ofextp-498
     3 real potential from,f12.6,20h with reduced radius,f10.6,22h fermiextp-499
     4 and diffuseness,f10.6,6h fermi/29h spin-orbit potential  depth:,fextp-500
     512.6,13h mev  radius:,f10.6,16h f  diffuseness:,f9.6,19h f  coulomextp-501
     6b radius:,f10.6,2h f/)                                            extp-502
 1024 format (/2x,i3,27h sets of folding parameters)                    extp-503
 1025 format (2x,i2,5x,4h v =,f12.6,5x,4h r =,f9.6,5x,4h a =,f9.6)      extp-504
 1026 format (81h external form factors not allowed with schroedinder eqextp-505
     1uivalent of dirac equation)                                       extp-506
 1027 format (41h storage needed for standard form factors,i4,24h largerextp-507
     1 than the storage,i4,10h available)                               extp-508
 1028 format (53h input error in the first card defining the potential) extp-509
 1029 format (/7h ityp =,i5,21h not allowed or nst =,i5,20h larger than extp-510
     1ncolt =,i3)                                                       extp-511
 1030 format (10h with ml =,i2,5h l1 =,i3,21h is not equal to l2 =,i3,26extp-512
     1h or is larger than ncolt =,i3)                                   extp-513
 1031 format (10h with ml =,i3,5h l1 =,i3,8h or l2 =,i3,23h is larger thextp-514
     1an ncoll =,i3)                                                    extp-515
 1032 format (5h ml =,i3,30h too large between levels l1 =,i3,9h and l2 extp-516
     1=,i3)                                                             extp-517
 1033 format (56h there is no correction term of the form factor for l1 extp-518
     1=,i3,6h  l2 =,i3,6h  ml =,i3)                                     extp-519
 1034 format (25h the form factor for l1 =,i3,6h  l2 =,i3,6h  ml =,i3,12extp-520
     1h  and ityp =,i2,44h is already read or does not have to be read) extp-521
 1035 format (/87h different types not allowed to copy for form factors extp-522
     1l1/l2/ml/ityp/l1x/l2x/mlx/itypx :/30x,8i5)                        extp-523
 1036 format (11h with mlx =,i2,6h l1x =,i3,22h is not equal to l2x =,i3extp-524
     1,26h or is larger than ncolt =,i3)                                extp-525
 1037 format (11h with mlx =,i3,6h l1x =,i3,9h or l2x =,i3,23h is largerextp-526
     1 than ncoll =,i3)                                                 extp-527
 1038 format (6h mlx =,i3,31h too large between levels l1x =,i3,10h and extp-528
     1l2x =,i5)                                                         extp-529
 1039 format (29h form factor defined by l1x =,i3,7h  l2x =,i3,7h  mlx =extp-530
     1,i3,9h  itypx =,i3,16h not yet defined)                           extp-531
 1040 format (38h no particle-hole coupling with 2*jp =,i3,11h and 2*jh extp-532
     1=,i3,7h to l =,i3)                                                extp-533
 1041 format (18h copy with itypx =,i3,53h not allowed between transitioextp-534
     1ns with quantum numbers,i2,4h and,i2)                             extp-535
 1042 format (32h input error for the potential (,i2,1h,,i2,1h))        extp-536
 1043 format (/8h itypx =,i5,38h not allowed for standard form factors) extp-537
 1044 format (13h itypx,ityp =,2i5,71h  not allowed: central potential cextp-538
     1annot be derivative or bound function)                            extp-539
 1045 format (13h itypx,ityp =,2i5,64h  not allowed: coulomb transition extp-540
     1form factor must be derivative)                                   extp-541
 1046 format (13h itypx,ityp =,2i5,86h  not allowed: bound state functioextp-542
     1n can be only real or imaginary transition potential)             extp-543
 1047 format (8h itypx =,i3,32h  not allowed in dirac formalism)        extp-544
 1048 format (6h l2x =,i3,26h  not allowed with itypx =,i4)             extp-545
 1049 format (50h for ityp=-8 and two functions, both are unbounded,2f12extp-546
     1.6)                                                               extp-547
 1050 format (i6,71h form factors to read, for (ityp, n  )  ( potentialsextp-548
     1 for n smaller than,i2,19h transitions after))                    extp-549
 1051 format (33x,1h(,i4,1h,,i3,1h))                                    extp-550
 1052 format (20h input error for the,i4,13hth set of the,i4,40hth sets extp-551
     1of folding parameters to be read)                                 extp-552
 1053 format (24h in extp  .... stop ....)                              extp-553
      end                                                               extp-554
c 04/08/95  ibm version                                         ecis95  cal1-000
      subroutine cal1(w,nw,dw,lo)                                       cal1-001
c this subroutine computes form factors (pote), looks for quantum       cal1-002
c numbers (quan), checks for convergence with respect to total spin,    cal1-003
c computes helicity amplitudes (sche) and computes chi2 (resu)          cal1-004
c the arguments are the working space w, in equivalence by call with nw cal1-005
c and dw and the array of logical controls lo                           cal1-006
c nplace is the maximum working space used                              cal1-007
c***********************************************************************cal1-008
      double precision dw(1)                                            cal1-009
      dimension w(1),nw(1)                                              cal1-010
      logical lo(250)                                                   cal1-011
      common /ncomp/ nsp(3),nfiss,nrd,ncont,ncoj,acn1,acn2,ncons,nie,ncocal1-012
     1i,nscn,nxd,ncolx,az(6),bz(3),tg0,bn,fnug,egd,ggd,tg1,sgsq         cal1-013
      common /decou/ nipi,nipp,nwv,nfis,ngam,njit,nniv,niph,npar,npot,nbcal1-014
     1eta,nfm,ndonn,nrc,niw,nde,nise,ntx,ktgx,nry,nnvi,ncc,nam1,nfac,nfacal1-015
     2m,npad,nfg,nxg,nsm,nres,nxx,nixt,nt,idmt,ncoll,ncols,ncolt,njmax,ical1-016
     3term,npp,jdm,jit,nsec,lmd,h,bjm,eiter,aconv,conj,mcm(2),nlt,nva,nbcal1-017
     4et,nbt1,lmx,lmax1,aspin,ism,iqm,iqmax,inc,ms1,ms2,nct(4),kba,kab,kcal1-018
     5bc,njc,jtx,jth,ntot,nrec,ncolr,nrz,nfa,lmax2,ke,itemm,nplace,nnc,kcal1-019
     6xt,nivq,nifq,nrco,nrdo,nvc1,nvc2,ncx,lmax3,ipj                    cal1-020
      common /poten/ im,nv,mv,invt,inls,invc,invd,intc,imax,itx(16),itxmcal1-021
      ajmin=0.5*mod(nw(nipi+1)+nw(nipi+2),2)                            cal1-022
      nr5=nnc                                                           cal1-023
      nww=nr5+2*kab                                                     cal1-024
      nxc=nww+4*ism*kab                                                 cal1-025
      if (lo(220).and.lo(151)) go to 2                                  cal1-026
      if (lo(219)) go to 20                                             cal1-027
      if (lo(100)) nxc=nxc+4*ism*kab                                    cal1-028
      if (lo(21)) nxc=nnc                                               cal1-029
      id1=idmt-ncx                                                      cal1-030
c computation of potentials and form factors                            cal1-031
      ncxm1=ncx-1                                                       cal1-032
      do 1 i=nrco,ncxm1                                                 cal1-033
    1 w(i)=0.                                                           cal1-034
      ncx1=ncx/2+1                                                      cal1-035
      call pote(w(nbeta),nw(nbeta),w(nvc1),nw(nivq),nw(nifq),w(ncx),nw(ncal1-036
     1cx),dw(ncx1),w(npot),nw(npot),w(nrco),w(nrdo),dw(nwv),aconv,ism,nccal1-037
     2olt,id1,nw(nipi),nw(nipp),iqm,npp,nbt1,mcm,idmt,lo)               cal1-038
    2 if (lo(220)) go to 20                                             cal1-039
      nplace=max0(nplace,nxc+id1)                                       cal1-040
      if (lo(216)) go to 22                                             cal1-041
      jpi=0                                                             cal1-042
      ip1=1                                                             cal1-043
      if (lo(223)) ip1=2                                                cal1-044
      n=nsm+2*njmax*kba-1                                               cal1-045
      do 3 i=nsm,n                                                      cal1-046
    3 dw(i)=0.d0                                                        cal1-047
      n=ntx+nrz-1                                                       cal1-048
      do 4 i=ntx,n                                                      cal1-049
    4 w(i)=0.                                                           cal1-050
      if (lo(81)) call conu(w,nw,dw,w(ngam),w(nfis),nw(nipi),dw(nwv),w(ncal1-051
     1ixt),nw(ncoi),w(nscn),w(nxd),ncons,ncx1,lo)                       cal1-052
c loop on the parities  jpi is the parity (0 or 1)                      cal1-053
    5 ipj=1                                                             cal1-054
      lo(227)=.false.                                                   cal1-055
      iterm=itemm                                                       cal1-056
      do 6 k=1,kab                                                      cal1-057
    6 nw(ncc+k-1)=0                                                     cal1-058
c loop on the values of j                                               cal1-059
c search for quantum numbers and coupling coefficients                  cal1-060
    7 lo(225)=lo(21)                                                    cal1-061
      aj=ajmin+ipj-1                                                    cal1-062
      nxc1=(nxc+1)/2                                                    cal1-063
      iterr=0                                                           cal1-064
    8 call quan(ncoll,ncols,w,dw(nwv),nw(nipi),nw(nniv),nw(nt),w(nt),invcal1-065
     1t,inls,nw(nivq),nw(nifq),nw(ncc),w(ncc),nw(nxc),w(nxc),dw(nxc1),iucal1-066
     2,nw(nnvi),kab,nc,ncj,ncin,aj,jpi,nin,inc,dw(nfac),nfa,idmt,idmt-nxcal1-067
     3c-200,lmd,lo)                                                     cal1-068
      if (ncin.eq.0) go to 15                                           cal1-069
      ipx=ipj                                                           cal1-070
      ncxn=ncin                                                         cal1-071
      if (lo(224)) ncxn=nc                                              cal1-072
      nx=(nxc+iu*lmd)/2+1                                               cal1-073
      nx1=nx                                                            cal1-074
      nwr=2*nx1+20*kab*kab-1                                            cal1-075
      if (nwr.gt.idmt)  call memo(idmt,nwr,m,3,lo)                      cal1-076
      if (lo(216)) go to 22                                             cal1-077
      call mtch(nc,nw(nnvi),ncols,kab,dw(nwv),nw(ncc),w(ncc),dw(nxg),nw(cal1-078
     1nxc),w(nxc),dw(nx1),ncxn,ism,lmax2,nw(nniv),nw(nifq),dw(nfg),lmax1cal1-079
     2,lmax3,inc,invt,inls,nw(nwr),w(nrco),w(nrdo),dw(nfam),lmd,bjm,lo) cal1-080
      if (lo(216)) go to 22                                             cal1-081
      if (lo(227)) go to 13                                             cal1-082
      if (lo(44)) nx=nx+4*kab*kab                                       cal1-083
      if (lo(59)) call hora                                             cal1-084
c  nx  first address which can be used                                  cal1-085
      if (lo(225)) go to 13                                             cal1-086
c iterations                                                            cal1-087
      nfar=nfam+8*kab                                                   cal1-088
      nfai=nfar+ncxn*kab                                                cal1-089
      if (lo(100)) go to 9                                              cal1-090
      nwr=2*nx+4*(ism+2)-1                                              cal1-091
      nr4=nwr+2*ncj*ism                                                 cal1-092
      if (lo(210)) nr4=nwr+4*ncj*ism                                    cal1-093
      n=nr4+2*ism                                                       cal1-094
      go to 10                                                          cal1-095
    9 nwr=2*(nx+2*(ism+2))-1                                            cal1-096
      nr4=nwr+4*ncj*ism                                                 cal1-097
      nin=4*nin                                                         cal1-098
c  n is the first free address and nin the number of coupling potentialscal1-099
c which can be stored                                                   cal1-100
      n=nr4+4*ism                                                       cal1-101
   10 n3=n                                                              cal1-102
      if (n.gt.idmt) call memo(idmt,n,m,3,lo)                           cal1-103
      if (lo(216)) go to 22                                             cal1-104
      lo(207)=lo(124).and.iterm.gt.1                                    cal1-105
      if (bjm.ne.0.) nin=nin+ncj                                        cal1-106
      if (lo(207)) n3=n3+nin*ism                                        cal1-107
      if (lo(54)) write (6,1000) n3,aj                                  cal1-108
      if (n3.gt.idmt) call memo(idmt,n3,m,5,lo)                         cal1-109
      if (.not.lo(216)) go to 11                                        cal1-110
      lo(216)=.false.                                                   cal1-111
      lo(207)=.false.                                                   cal1-112
      lo(124)=.false.                                                   cal1-113
      lo(24)=.true.                                                     cal1-114
      n3=n                                                              cal1-115
      write (6,1001)                                                    cal1-116
   11 nplace=max0(nplace,n3)                                            cal1-117
      if (lo(100)) go to 12                                             cal1-118
      call inti(dw(nfam),dw(nx),w(nww),w(nwr),w(nr4),dw(npad),nw(nr5),iscal1-119
     1m,kab,w(n),iterm,nc,ncj,w(nvc1),nw(nnvi),nw(ncc),w(ncc),nw(nxc),w(cal1-120
     2nxc),dw(nx1),h,aconv,eiter,ncxn,nni,iterr,lo)                     cal1-121
      if (lo(204).or.iterm.eq.1) go to 14                               cal1-122
      if (lo(123)) go to 14                                             cal1-123
      if (lo(210)) write (6,1002) aj,jpi                                cal1-124
      lo(225)=.true.                                                    cal1-125
      lo(228)=.true.                                                    cal1-126
      go to 8                                                           cal1-127
   12 call intr(dw(nfam),dw(nx),w(nww),w(nwr),w(nr4),dw(npad),nw(nr5),iscal1-128
     1m,kab,w(n),iterm,nc,ncj,w(nvc1),w(nvc2),nw(nnvi),w(ncc),nw(ncc),nwcal1-129
     2(nxc),w(nxc),dw(nx1),h,aconv,eiter,ncxn,nni,iterr,lo)             cal1-130
      go to 14                                                          cal1-131
c usual coupled channels calculation                                    cal1-132
c nwr is the first address to store potentials and nm the maximum       cal1-133
c number of points   for arguments  see inch                            cal1-134
   13 nwr=2*nx+12*kab*kab-1                                             cal1-135
      if (lo(54)) write (6,1000) nwr,aj                                 cal1-136
      nfai=nx+ncj*kab                                                   cal1-137
      nfar=nfai+3*kab*kab                                               cal1-138
      if (lo(227)) go to 14                                             cal1-139
      n=nwr+2*ncj*ncj*(ism+1)                                           cal1-140
      if (n.gt.idmt) call memo(idmt,n,m,4,lo)                           cal1-141
      nm=(idmt-nwr)/(2*ncj*ncj)-1                                       cal1-142
      if (nm.le.0) go to 21                                             cal1-143
      nm=min0(nm,ism)                                                   cal1-144
      if (lo(54).and.nm.ne.ism) write (6,1003) nm                       cal1-145
      n3=nwr+(nm+1)*ncj*ncj                                             cal1-146
      nplace=max0(nplace,2*n3-nwr)                                      cal1-147
      call inch(w(nvc1),w(nvc2),nw(ncc),w(ncc),nw(nxc),w(nxc),nw(nnvi),dcal1-148
     1w(nfam),dw(nx1),dw(nx),w(nwr),w(n3),ism,kab,nc,ncj,ncxn,nm,iterm,ncal1-149
     2pp,nw(nwr),lo)                                                    cal1-150
   14 if (lo(59)) call hora                                             cal1-151
c nfar and nfai  addresses of real and imaginary parts of s-matrix      cal1-152
      nmx=(nwr+5*(nc+kxt))/2+1                                          cal1-153
      nqx=2*(nmx+ms1*ms2*kab)-1                                         cal1-154
      n=max0(2*(nmx+4*ncj*ncj)-1,nqx+ms1+ms2)                           cal1-155
      if (n.gt.idmt) call memo(idmt,n,m,5,lo)                           cal1-156
      if (lo(216)) go to 22                                             cal1-157
      call scam(dw(nsm),njmax,nw(ncc),w(ncc),dw(nfar),dw(nfai),dw(nwv),acal1-158
     1j,jpi,ipj,w(nry),ncols,kab,kba,nc,ncj,ncin,r1,nw(nipi),w(ngam),w(ncal1-159
     2fis),w(nixt),nw(ncoi),w(nxd),dw(nmx),w(nwr),nct,lo)               cal1-160
      if (lo(59)) call hora                                             cal1-161
      if (lo(21)) go to 15                                              cal1-162
c reduction of maximum number of iterations if 2 where sufficient(iterr)cal1-163
      if (lo(125).and.(iterr.le.2).and.(ipj.gt.jdm)) iterm=1            cal1-164
c checks of convergence                                                 cal1-165
      if ((nni.eq.nc).and.(ipj.gt.jdm)) lo(227)=.true.                  cal1-166
      if (lo(128).and.nni.eq.nc.and.ipj.gt.jdm+1) go to 18              cal1-167
c increase of the total angular momentum                                cal1-168
   15 if (lo(143)) go to 17                                             cal1-169
      do 16 i=1,jit                                                     cal1-170
      if (ipj.le.nw(njit+2*i-2)) go to 17                               cal1-171
   16 ipj=ipj+nw(njit+2*i-1)*ip1                                        cal1-172
   17 ipj=ipj+ip1                                                       cal1-173
      if (ipj.gt.lmax3-lmx) lo(227)=.true.                              cal1-174
      if (.not.lo(208)) lo(227)=.false.                                 cal1-175
      if ((ipj.le.njmax).and.((r1.ge.conj).or.(ipj.le.jdm).or.(ncin.eq.0cal1-176
     1))) go to 7                                                       cal1-177
   18 aj=ajmin+ipx-1                                                    cal1-178
      if (lo(218).or.lo(222)) write (6,1004) aj,r1                      cal1-179
C     writing LMAX to file 75
C     if (lo(63)) write (75,'(A5,f6.2)') 'LMAX:',aj                     capote      
c change of parity                                                      cal1-180
      if (jpi.eq.1) go to 19                                            cal1-181
      jpi=jpi+1                                                         cal1-182
      ipy=ipx                                                           cal1-183
      go to 5                                                           cal1-184
   19 ipj=max0(ipx,ipy)                                                 cal1-185
   20 ndx=nxc                                                           cal1-186
      ndy=ndx+jth                                                       cal1-187
      ndz=ndy+jth                                                       cal1-188
      nmy=(ndz+jtx+1)/2+1                                               cal1-189
      nmx=nmy+3*njc                                                     cal1-190
      mx=2*(ipj+lmax2-njmax-3)+nlt                                      cal1-191
      nga=nmx+mx+1                                                      cal1-192
      ngb=2*(nga+4*kbc*kab)-1                                           cal1-193
      nma=(ngb+2*kbc*kab+1)/2+1                                         cal1-194
      nmc=nma+ms1*ms2*kab                                               cal1-195
      n=nmc+2*ipj                                                       cal1-196
      if (2*n.gt.idmt) call memo(idmt,2*n,m,5,lo)                       cal1-197
      if (lo(216)) go to 22                                             cal1-198
      call sche(dw(nsm),njmax,nw(nipi),ms1,ms2,nw(nfm),w(nfm),w(ntx),dw(cal1-199
     1nmc),nw(ncc),w,dw(nga),w(ngb),dw(nxg),lmax2,dw(nwv),kab,kba,ajmin,cal1-200
     2ipj,w(nry),ncoll,ncols,nct,dw(nfac),nfa,dw(nmx),mx,dw(nma),jit,nw(cal1-201
     3njit),nlt,idmt,idmt-2*nmc,lo)                                     cal1-202
      mx=ipj+lmax2+1-njmax                                              cal1-203
      nmc=nmx+mx+1                                                      cal1-204
      id1=idmt-2*nmc                                                    cal1-205
c for arguments    see calx and resu                                    cal1-206
      call resu(w,nw(nipi),w(ntx),njmax,dw(nsm),ncols,w(nfm),nw(nfm),ipjcal1-207
     1,w(ndonn),w(nres),ncolr,dw(nmc),nw(2*nam1-1),dw(nam1),dw(nmy),njc,cal1-208
     2w(ndx),w(ndy),w(ndz),id1,dw(nwv),ajmin,dw(nmx),mx,idmt,w(nry),nconcal1-209
     3t,nw(ncoi),w(nxd),nrz,lo)                                         cal1-210
      nplace=max0(nplace,2*nmc+id1)                                     cal1-211
      if (lo(59)) call hora                                             cal1-212
      lo(217)=.true.                                                    cal1-213
      lo(222)=.false.                                                   cal1-214
      return                                                            cal1-215
   21 write (6,1005) idmt                                               cal1-216
      lo(216)=.true.                                                    cal1-217
   22 return                                                            cal1-218
 1000 format (10x,22hrequired working field,i10,9h  for j =,f7.1)       cal1-219
 1001 format (/52h working field too small to store all the potentials/1cal1-220
     1x,52(1h*)//31h the 24th control is set .true.//)                  cal1-221
 1002 format (17h warning: for j =,f6.1,14h parity (-1)**,i1,35h the dercal1-222
     1ivative terms are neglected)                                      cal1-223
 1003 format (1h+,60x,28hcomputation of potentials by,i5,11h  at a time)cal1-224
 1004 format (18h maximum j-value =,f6.1,10x,41hmaximum scattering coeffcal1-225
     1icient at the end,e12.3)                                          cal1-226
 1005 format (//19h **** working field,i9,16h  too small ****//)        cal1-227
      end                                                               cal1-228
c 30/11/95  ibm version                                         ecis95  pote-000
      subroutine pote(beta,nbta,v,ivq,ivz,p,np,q,val,nval,vco,vdo,wv,acopote-001
     1nv,ism,ncoll,idt,ipi,ipp,iqm,npp,nbt1,mcm,idmt,lo)                pote-002
c computation and output of form factors                                pote-003
c input variables: beta,nbta: deformations of the target                pote-004
c                  ivq:       table of angular momenta of form factors  pote-005
c                  ivz:       definition and addresses of form factors  pote-006
c                  val,nval:  optical model and folding parameters      pote-007
c                  wv:        step size ( see calx )                    pote-008
c                  aconv:     value below which the pot. can be negl.   pote-009
c                  ism:       number of points                          pote-010
c                  ncoll:     number of nuclear states                  pote-011
c                  idt: maximum working field p  returns the place used pote-012
c                  ipi(9,*):  reference to potentials in ipi(4,*)       pote-013
c                  ipp:       cross-reference to potentials             pote-014
c                  iqm:       maximum order of deformation in rot. modelpote-015
c                  npp:       number of optical potentials              pote-016
c                  nbt1:      number of vibrations                      pote-017
c                  idmt:      size of total working field               pote-018
c                  wv:        see calx                                  pote-019
c                  mcm:       angular momentum limitation on coul. corr.pote-020
c                  lo:        logical controls                          pote-021
c common /poten/   see redm                                             pote-022
c output variables for schroedinger equations:                          pote-023
c                  v(i,j):real diagonal potential for r=i*h for j=1,npp pote-024
c                      real spin-orbit form factor for j=npp+1,2*npp    pote-025
c                      real non diagonal form factor for j=inc+k orderedpote-026
c                    k=1,intc: central form factor described by ivz(1,k)pote-027
c                    k=intc+1,intc+inls: derived spin-orbit form factor pote-028
c                    k=intc+inls+1,intc+2*inls: r**-2 sp.-o. form factorpote-029
c                   imaginary diagonal potential follows with same orderpote-030
c         the tables it(16) define the head of each kind of potential.  pote-031
c                  vco(2,i): strength of coulomb potential tails        pote-032
c                  vdo(2,i): strength of coulomb transition tails       pote-033
c output variables for dirac equations:                                 pote-034
c                  v(i,j) potential and some functions for j1 to it(2)  pote-035
c                  vco,vdo:  long range values of potentials            pote-036
c working field: p(idt) in equivalence with q, double precision and np. pote-037
c***********************************************************************pote-038
      logical lo(250)                                                   pote-039
      dimension v(ism,1),ivq(3,1),beta(10,1),val(34,1),p(1),ivz(7,1),vcopote-040
     1(2,1),vdo(2,1),bb(2),nval(1),ipi(9,1),ipp(1),nbta(10,1),np(1),ilo(pote-041
     216),mcm(2)                                                        pote-042
      double precision q(1),aa(3,8),chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xpote-043
     1n,wv(11,1),pgn(10),xgn(10),w(24),ar,ai,br,bi,cr,ci,er,ei,dd,rr,xp,pote-044
     2xq,hh                                                             pote-045
      common /poten/ im,nv,mv,invt,inls,invc,invd,intc,imax,it(16),itxm pote-046
      common /dblpr/ chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn              pote-047
      equivalence (it(1),it1),(it(2),it2),(it(3),it3),(it(4),it4),(it(5)pote-048
     1,it5),(it(6),it6),(it(7),it7),(it(8),it8),(it(9),it9),(it(10),it0)pote-049
     2,(it(11),ita),(it(12),itb),(it(13),itc),(it(14),itd),(it(15),ite),pote-050
     3(it(16),itf)                                                      pote-051
      data pgn( 1),pgn( 2) / 1.52753387130726d-01, 1.49172986472604d-01/pote-052
      data pgn( 3),pgn( 4) / 1.42096109318382d-01, 1.31688638449177d-01/pote-053
      data pgn( 5),pgn( 6) / 1.18194531961518d-01, 1.01930119817240d-01/pote-054
      data pgn( 7),pgn( 8) / 8.32767415767047d-02, 6.26720483341091d-02/pote-055
      data pgn( 9),pgn(10) / 4.06014298003869d-02, 1.76140071391521d-02/pote-056
      data xgn( 1),xgn( 2) / 7.65265211334973d-02, 2.27785851141645d-01/pote-057
      data xgn( 3),xgn( 4) / 3.73706088715420d-01, 5.10867001950827d-01/pote-058
      data xgn( 5),xgn( 6) / 6.36053680726515d-01, 7.46331906460151d-01/pote-059
      data xgn( 7),xgn( 8) / 8.39116971822219d-01, 9.12234428251326d-01/pote-060
      data xgn( 9),xgn(10) / 9.63971927277914d-01, 9.93128599185095d-01/pote-061
      data bb /4h    ,4hlast/                                           pote-062
      data aa /8h      re,8hal volum,8he/scalar,8h imagina,8hry volum,8hpote-063
     1e/scalar,8h     rea,8hl surfac,8he/vector,8h  imagin,8h. surfac,8hpote-064
     2e/vector,8h  real s,8hpin-orbi,8ht/tensor,8h imag. s,8hpin-orbi,8hpote-065
     3t/tensor,8h        ,8h        ,8h coulomb,8h      sp,8hin-orbit,8hpote-066
     4 coulomb/                                                         pote-067
      data ilo /162,162,162,162,201,202,162,203,162,112,162,112,113,114,pote-068
     1111,119/                                                          pote-069
      idy=0                                                             pote-070
      if (lo(220)) go to 41                                             pote-071
      itx=itxm                                                          pote-072
      if (lo(100)) itx=itx-it7                                          pote-073
      if (lo(7)) go to 3                                                pote-074
      invz=intc                                                         pote-075
      iny=1                                                             pote-076
      if (lo(209)) iny=3                                                pote-077
      do 2 ip=1,npp                                                     pote-078
      k=ipp(ip)                                                         pote-079
      hh=wv(11,k)                                                       pote-080
      h=hh                                                              pote-081
      invy=invz+iny                                                     pote-082
      n1=(invy+1)/2+1                                                   pote-083
      n2=n1+max0(imax,iqm)+1                                            pote-084
      id1=invy+27                                                       pote-085
      idx=10                                                            pote-086
      if (lo(3)) idx=36                                                 pote-087
      if (lo(101)) idx=1                                                pote-088
      idx=max0(2*idx*id1+20*invy+n2,10*ism)                             pote-089
      if (idx.gt.idt) call memo(idmt,idmt+idx-idt,idt,3,lo)             pote-090
      if (lo(216)) go to 59                                             pote-091
      ik=ip                                                             pote-092
      if (lo(100)) ik=it4+24*ip+1                                       pote-093
      call rotp(beta,nbta,beta(1,nbt1+1),ik,v,v(1,it3+1),ivz,np,q(n1),q(pote-094
     1n2),q(10*invy+n2),p(20*invy+2*n2-1),val(1,ip),id1,ism,hh,invz,invypote-095
     2,iqm,iny,nbt1,pgn,xgn,lo)                                         pote-096
c  to use the folding model, the spin-orbit potentials and the first    pote-097
c spin-orbit non diagonal form factors are not derived ( v(r) instead ofpote-098
c (1/r)*(d/dr)(v(r)) )  for schroedinger equations. for dirac equations pote-099
c the derivatives are computed but not used.                            pote-100
      idy=max0(idx,idy)                                                 pote-101
      if (lo(59)) call hora                                             pote-102
      if (lo(117)) go to 2                                              pote-103
c  *******  folding model  **********                                   pote-104
      ist=5+ism+int(2.*(abs(val(33,ip))+2.*abs(val(34,ip)))/h)          pote-105
      if (val(32,ip)*val(33,ip).eq.0.) ist=ism+5                        pote-106
c the working space in p is shifted from v with the origins in table it pote-107
      nnf=1+ism*itx                                                     pote-108
      idz=nnf+4*itx                                                     pote-109
      idx=idz+4*ist                                                     pote-110
      if (invz.ne.0) idx=idx+2*ist*imax                                 pote-111
      idy=max0(idy,idx)                                                 pote-112
      if (idx.gt.idt) call memo(idmt,idmt+idx-idt,idt,3,lo)             pote-113
      if (lo(216)) go to 59                                             pote-114
      do 1 j=1,nnf                                                      pote-115
    1 p(j)=0.                                                           pote-116
      call fold(v(1,ik),p,val(26,ip),3,ip,ism,ist,aconv,ivz,invz,p(idz),pote-117
     1pgn,xgn,wv,np(nnf),lo)                                            pote-118
      if (lo(59)) call hora                                             pote-119
    2 invz=0                                                            pote-120
      go to 4                                                           pote-121
    3 nnf=2*itx                                                         pote-122
      if (2*nnf.gt.idt) call memo(idmt,idmt+2*nnf-idt,idt,3,lo)         pote-123
      if (lo(216)) go to 59                                             pote-124
      idz=idt-2*nnf                                                     pote-125
      ik=1                                                              pote-126
      if (lo(100)) ik=it7+1                                             pote-127
      call stdp(v(1,ik),ivz,ism,val,nval,idz,idx,q(nnf+1),wv,idmt,pgn,xgpote-128
     1n,npp,np,p(2*nnf+1),aconv,lo)                                     pote-129
      idy=max0(idy,idx+2*nnf)                                           pote-130
      hh=wv(11,1)                                                       pote-131
    4 if (lo(162)) go to 14                                             pote-132
      ist=2*(ism/2)                                                     pote-133
      idx=2*ist                                                         pote-134
      idy=max0(idy,idx)                                                 pote-135
      if (idx.gt.idt) call memo(idmt,idmt+idx-idt,idt,3,lo)             pote-136
      if (lo(216)) go to 59                                             pote-137
c punch the form factors                                                pote-138
      do 5 i=1,ist                                                      pote-139
      p(i)=i*hh                                                         pote-140
    5 p(i+ist)=bb(1)                                                    pote-141
      p(2*ist-1)=bb(2)                                                  pote-142
      ir=0                                                              pote-143
      do 8 ip=1,npp                                                     pote-144
      do 7 ij=1,8                                                       pote-145
      il=ilo(ij)                                                        pote-146
      if (lo(il)) go to 7                                               pote-147
      ji=ip+it(ij)                                                      pote-148
      if (lo(100)) ji=it7+ij+24*(ip-1)                                  pote-149
      ir=ir+1                                                           pote-150
      write (6,1000) (aa(j,ij),j=1,3),ip,ir                             pote-151
      write (7,1000) (aa(j,ij),j=1,3),ip,ir                             pote-152
      do 6 i=1,ist,2                                                    pote-153
      write (6,1001) p(i),v(i,ji),p(i+1),v(i+1,ji),p(ist+i),ir          pote-154
    6 write (7,1002) p(i),v(i,ji),p(i+1),v(i+1,ji),p(ist+i),ir          pote-155
    7 continue                                                          pote-156
    8 continue                                                          pote-157
      if (intc.eq.0) go to 14                                           pote-158
      do 13 iq=1,intc                                                   pote-159
      do 12 ij=9,16                                                     pote-160
      il=ilo(ij)                                                        pote-161
      if (lo(il)) go to 12                                              pote-162
      ip=iq                                                             pote-163
      if (ij.eq.13.or.ij.eq.14) ip=ivz(3,iq)+inls-intc                  pote-164
      if (ij.ge.15) ip=ivz(ij-11,iq)                                    pote-165
      if (ip.le.0) go to 12                                             pote-166
      ji=ip+it(ij)                                                      pote-167
      if (lo(100)) ji=it7+24*npp+11*iq+ij-19                            pote-168
      ir=ir+1                                                           pote-169
      write (6,1003) (aa(j,ij-8),j=1,3),iq,ir                           pote-170
      write (7,1003) (aa(j,ij-8),j=1,3),iq,ir                           pote-171
      if (lo(200).and.(ij.ge.13).and.(ij.ne.15)) go to 10               pote-172
      do 9 i=1,ist,2                                                    pote-173
      write (6,1001) p(i),v(i,ji),p(i+1),v(i+1,ji),p(ist+i),ir          pote-174
    9 write (7,1002) p(i),v(i,ji),p(i+1),v(i+1,ji),p(ist+i),ir          pote-175
      go to 12                                                          pote-176
   10 if (ij.eq.16) ji=ji+invd                                          pote-177
      do 11 i=1,ist,2                                                   pote-178
      a1=v(i,ji)*p(i)**2                                                pote-179
      a2=v(i+1,ji)*p(i+1)**2                                            pote-180
      write (6,1001) p(i),a1,p(i+1),a2,p(ist+i),ir                      pote-181
   11 write (7,1002) p(i),a1,p(i+1),a2,p(ist+i),ir                      pote-182
   12 continue                                                          pote-183
   13 continue                                                          pote-184
   14 if (lo(100)) go to 19                                             pote-185
c addition of volume and surface potentials (schroedinger equation)     pote-186
      do 16 j1=1,npp                                                    pote-187
      do 15 is=1,ism                                                    pote-188
      v(is,j1)=v(is,j1)+v(is,j1+it3)                                    pote-189
   15 v(is,j1+it2)=v(is,j1+it2)+v(is,j1+it4)                            pote-190
   16 continue                                                          pote-191
      if (intc.eq.0) go to 31                                           pote-192
      do 18 j1=1,intc                                                   pote-193
      do 17 is=1,ism                                                    pote-194
      if (lo(12)) v(is,j1+it0)=v(is,j1+it0)+v(is,j1+itb)                pote-195
   17 v(is,j1+it9)=v(is,j1+it9)+v(is,j1+ita)                            pote-196
   18 continue                                                          pote-197
   19 if (intc.eq.0) go to 31                                           pote-198
c addition of correction terms of form factors                          pote-199
      do 30 k=1,invt                                                    pote-200
      if (ivz(6,k).le.0) go to 30                                       pote-201
      k1=ivz(6,k)                                                       pote-202
      l=ivz(7,k)+2                                                      pote-203
      do 29 n=1,8                                                       pote-204
      il=ilo(n+8)                                                       pote-205
      if ((il.ne.162).and.lo(il)) go to 29                              pote-206
      l1=l                                                              pote-207
      m=0                                                               pote-208
      if (lo(100)) go to 22                                             pote-209
      if (n.gt.6) go to 21                                              pote-210
      if (n.gt.2) go to 20                                              pote-211
      k2=it(n+8)+k                                                      pote-212
      k3=it(n+8)+k1                                                     pote-213
      go to 24                                                          pote-214
   20 if (n.le.4) go to 29                                              pote-215
      if (ivz(3,k).eq.0) go to 29                                       pote-216
      k2=it(n+4)+ivz(3,k)+inls                                          pote-217
      k3=it(n+4)+ivz(3,k1)+inls                                         pote-218
      l1=l1+2                                                           pote-219
      m=-inls                                                           pote-220
      go to 24                                                          pote-221
   21 if (ivz(n-3,k).eq.0) go to 29                                     pote-222
      k2=it(n+8)+ivz(n-3,k)                                             pote-223
      k3=it(n+8)+ivz(n-3,k1)                                            pote-224
      if (n.eq.8) m=invd                                                pote-225
      go to 23                                                          pote-226
   22 if ((n.gt.4).and.(n.ne.7)) m=min0(11-n,4)                         pote-227
      k2=it5+11*k+n                                                     pote-228
      k3=k2+11*(k1-k)                                                   pote-229
      if (n.le.6) go to 24                                              pote-230
   23 ci=v(ism,k3)                                                      pote-231
      cr=v(ism,k2)                                                      pote-232
      go to 26                                                          pote-233
   24 dd=0.d0                                                           pote-234
      ci=0.d0                                                           pote-235
      cr=0.d0                                                           pote-236
      do 25 is=1,ism                                                    pote-237
      dd=dd+hh                                                          pote-238
      ci=ci+v(is,k3)*dd**l1                                             pote-239
   25 cr=cr+v(is,k2)*dd**l1                                             pote-240
   26 if ((ci.eq.0.d0).or.(cr.eq.0.d0)) go to 29                        pote-241
      cr=cr/ci                                                          pote-242
      if (.not.lo(217)) write (6,1004) k,n,cr                           pote-243
   27 do 28 is=1,ism                                                    pote-244
   28 v(is,k2)=v(is,k2)-cr*v(is,k3)                                     pote-245
      if (m.eq.0) go to 29                                              pote-246
      k2=k2+m                                                           pote-247
      k3=k3+m                                                           pote-248
      m=0                                                               pote-249
      go to 27                                                          pote-250
   29 continue                                                          pote-251
   30 continue                                                          pote-252
   31 if (lo(100)) go to 45                                             pote-253
c for schroedinger equations                                            pote-254
c addition of coulomb potentials                                        pote-255
      rr=ism*wv(11,1)                                                   pote-256
      xp=.5d0*xn/xm                                                     pote-257
      do 33 j=1,npp                                                     pote-258
      do 32 is=1,ism                                                    pote-259
      if (.not.lo(203)) v(is,j+it5)=v(is,j+it5)+v(is,j+it8)*xp          pote-260
   32 v(is,j)=v(is,j)-v(is,j+it7)                                       pote-261
      if (.not.lo(203)) vco(2,j)=v(ism,j+it8)*rr**3/xm                  pote-262
      if (lo(199)) go to 33                                             pote-263
      vco(1,j)=rr*v(ism,j+it7)*xm/(xe*chb)                              pote-264
      vco(2,j)=vco(2,j)+vco(1,j)*chb/(xm+wv(7,1))                       pote-265
   33 continue                                                          pote-266
      if (invt.eq.0) go to 41                                           pote-267
      do 40 j=1,invt                                                    pote-268
      l=ivz(4,j)                                                        pote-269
      if (l.eq.0) go to 38                                              pote-270
      k=ivz(2,j)                                                        pote-271
      if (ivq(2,k).ge.0) go to 35                                       pote-272
      xq=2.*(wv(11,1)/wv(8,1))**2/chb                                   pote-273
      do 34 is=1,ism                                                    pote-274
      if (lo(12)) v(is,j+it0)=0.                                        pote-275
      v(is,l+ite)=v(is,l+ite)*xq                                        pote-276
   34 v(is,j+it9)=-v(is,l+ite)                                          pote-277
      go to 37                                                          pote-278
   35 do 36 is=1,ism                                                    pote-279
   36 v(is,j+it9)=v(is,j+it9)-v(is,l+ite)                               pote-280
   37 if (ivz(7,j).le.mcm(1)) vdo(1,j)=v(ism,l+ite)*rr**(ivz(7,j)+1)    pote-281
   38 l=ivz(5,j)                                                        pote-282
      if (l.eq.0) go to 40                                              pote-283
      k=ivz(3,j)+it9                                                    pote-284
      do 39 is=1,ism                                                    pote-285
      v(is,k)=v(is,k)+v(is,l+itf)*xp                                    pote-286
   39 v(is,k+inls)=v(is,k+inls)+v(is,l+invd+itf)*xp                     pote-287
      if (ivz(7,j).le.mcm(2)) vdo(2,j)=-v(ism,l+invd+itf)*rr**(ivz(7,j)+pote-288
     13)*xp                                                             pote-289
   40 continue                                                          pote-290
c output of potentials                                                  pote-291
   41 if (lo(151)) go to 58                                             pote-292
      if (lo(100)) go to 55                                             pote-293
      do 42 j=1,npp                                                     pote-294
      write (6,1005) j                                                  pote-295
      write (6,1006) (i,v(i,j),v(i,j+it2),i=1,ism)                      pote-296
      if (.not.(lo(201).and.lo(203))) write (6,1007) (i,v(i,j+it5),i=1,ipote-297
     1sm)                                                               pote-298
      if (.not.lo(202)) write (6,1008) (i,v(i,j+it6),i=1,ism)           pote-299
   42 continue                                                          pote-300
      if (nv.eq.0) go to 58                                             pote-301
      write (6,1009)                                                    pote-302
      nva=min0(nv,6)                                                    pote-303
      do 43 i=1,ism                                                     pote-304
      write (6,1010) i,(j,v(i,j+it9),j=1,nva)                           pote-305
      if (nva.ne.nv) write (6,1011) (j,v(i,j+it9),j=7,nv)               pote-306
   43 continue                                                          pote-307
      if (mv.eq.0) go to 58                                             pote-308
      write (6,1012)                                                    pote-309
      nva=min0(mv,6)                                                    pote-310
      do 44 i=1,ism                                                     pote-311
      write (6,1010) i,(j,v(i,j+it0),j=1,nva)                           pote-312
      if (nva.ne.mv) write (6,1011) (j,v(i,j+it0),j=7,mv)               pote-313
   44 continue                                                          pote-314
      go to 58                                                          pote-315
c dirac equations                                                       pote-316
   45 if (lo(59)) call hora                                             pote-317
c at this point:   after v(1,it7),                                      pote-318
c v(*,n,1) scalar potential v for n=1,2 vector potential w for n=3,4    pote-319
c          tensor potential t for n=5,6 coulomb potentials for n=7,8    pote-320
c          their first derivatives for n=9,16                           pote-321
c          their second derivatives for n=17,24                         pote-322
c   the first derivatives of non-coulomb potentials have a reversed signpote-323
c                                                                       pote-324
c at the end:    with a second dimension 14,                            pote-325
c v(*,i,*)  central potential for i=1,2  spin-orbit potential for i=3,4 pote-326
c        d = e+m+v-w for i=5,6   e-m-v-w for i=7,8  d**(1/2) for i=9,10 pote-327
c        d**(-1) for i=11,12  and  - d( tensor ) for i=13,14            pote-328
      xp=xn/chb                                                         pote-329
      xq=xp**2                                                          pote-330
      invz=invt                                                         pote-331
      n=0                                                               pote-332
      do 54 j=1,ncoll                                                   pote-333
      hh=wv(11,j)                                                       pote-334
      m=it4+24*ipi(4,j)                                                 pote-335
      rr=0.d0                                                           pote-336
      do 53 is=1,ism                                                    pote-337
      rr=rr+hh                                                          pote-338
      do 46 k=1,24                                                      pote-339
   46 w(k)=v(is,k+m)                                                    pote-340
      w(3)=w(3)+w(7)                                                    pote-341
      w(11)=w(11)+w(15)                                                 pote-342
      w(19)=w(19)+w(23)                                                 pote-343
      w(13)=(w(13)+w(16))/xm                                            pote-344
      w(21)=(w(21)+w(24))/xm                                            pote-345
      w(14)=w(14)/xm                                                    pote-346
      w(22)=w(22)/xm                                                    pote-347
      w(15)=xm+wv(7,j)+w(1)-w(3)                                        pote-348
      w(16)=w(2)-w(4)                                                   pote-349
      v(is,n+7)=(wv(7,j)-xm-w(1)-w(3))/chb                              pote-350
      v(is,n+8)=-(w(2)+w(4))/chb                                        pote-351
      dd=w(15)**2+w(16)**2                                              pote-352
      w(5)=w(15)/dd                                                     pote-353
      w(6)=-w(16)/dd                                                    pote-354
      dd=dsqrt(dsqrt(dd)/(xm+wv(7,j)))                                  pote-355
      ar=.5*datan2(w(16),w(15))                                         pote-356
      v(is,n+9)=dd*dcos(ar)                                             pote-357
      v(is,n+10)=dd*dsin(ar)                                            pote-358
      ar=w(11)-w(9)                                                     pote-359
      ai=w(12)-w(10)                                                    pote-360
      br=w(17)-w(19)                                                    pote-361
      bi=w(18)-w(20)                                                    pote-362
      cr=ar*w(5)-ai*w(6)+w(13)                                          pote-363
      ci=ar*w(6)+ai*w(5)+w(14)                                          pote-364
      er=br*w(5)-bi*w(6)+w(13)*(cr+cr-w(13))-w(14)*(ci+ci-w(14))-w(21)+2pote-365
     1.d0*cr/rr                                                         pote-366
      ei=br*w(6)+bi*w(5)+w(13)*(ci+ci-w(14))+w(14)*(cr+cr-w(13))-w(22)+2pote-367
     1.d0*ci/rr                                                         pote-368
      v(is,n+1)=-w(1)-w(3)*wv(7,j)/xm-(w(1)*w(1)-w(2)*w(2)-w(3)*w(3)+w(4pote-369
     1)*w(4))/(2.d0*xm)-(.75d0*(cr**2-ci**2)-.5d0*er)*xn                pote-370
      v(is,n+2)=-w(2)-w(4)*wv(7,j)/xm-(w(1)*w(2)-w(3)*w(4))/xm-(1.5d0*crpote-371
     1*ci-.5d0*ei)*xn                                                   pote-372
      v(is,n+3)=.5*cr*xn/rr                                             pote-373
      v(is,n+4)=.5*ci*xn/rr                                             pote-374
      v(is,n+5)=w(15)/chb                                               pote-375
      v(is,n+6)=w(16)/chb                                               pote-376
      v(is,n+11)=w(5)*chb                                               pote-377
      v(is,n+12)=w(6)*chb                                               pote-378
      v(is,n+13)=w(13)/chb                                              pote-379
      v(is,n+14)=w(14)/chb                                              pote-380
      if (invz.eq.0) go to 53                                           pote-381
      do 52 k=1,invz                                                    pote-382
      ik=it6+4*k                                                        pote-383
      ki=it5+11*k                                                       pote-384
      if (ivz(4,k).eq.0) go to 50                                       pote-385
      kk=ivz(2,k)                                                       pote-386
      if (ivq(2,kk).ge.0) go to 48                                      pote-387
      do 47 l=1,4                                                       pote-388
   47 v(is,ki+l)=0.                                                     pote-389
      v(is,ki+7)=v(is,ki+7)*2.*(wv(11,1)/wv(8,1))**2/chb                pote-390
      v(is,ki+3)=v(is,ki+7)                                             pote-391
      go to 49                                                          pote-392
   48 v(is,ki+3)=v(is,ki+3)+v(is,ki+7)                                  pote-393
   49 if (is.ne.ism) go to 50                                           pote-394
      if (ivz(7,k).le.mcm(1)) vdo(1,k)=v(ism,ki+7)*rr**(ivz(7,k)+1)     pote-395
   50 v(is,ik+1)=xp*(v(is,ki+3)+v(is,ki+1))                             pote-396
      v(is,ik+2)=xp*(v(is,ki+4)+v(is,ki+2))                             pote-397
      v(is,ik+3)=xp*(v(is,ki+3)-v(is,ki+1))                             pote-398
      v(is,ik+4)=xp*(v(is,ki+4)-v(is,ki+2))                             pote-399
      l=ivz(3,k)                                                        pote-400
      if (ivz(3,k).eq.0) go to 52                                       pote-401
      il=it6+4*ivz(3,k)                                                 pote-402
      if (ivz(5,k).eq.0) go to 51                                       pote-403
      v(is,ki+5)=v(is,ki+5)+v(is,ki+8)                                  pote-404
      v(is,ki+9)=v(is,ki+9)+v(is,ki+11)                                 pote-405
      if (is.ne.ism) go to 51                                           pote-406
      if (ivz(7,k).le.mcm(2)) vdo(2,k)=xp*v(ism,ki+8)*rr**(ivz(7,k)+1)  pote-407
   51 v(is,il+1)=-xq*v(is,ki+9)                                         pote-408
      v(is,il+2)=-xq*v(is,ki+10)                                        pote-409
      v(is,il+3)=xq*v(is,ki+5)/rr                                       pote-410
      v(is,il+4)=xq*v(is,ki+6)/rr                                       pote-411
   52 continue                                                          pote-412
   53 continue                                                          pote-413
      n=n+14                                                            pote-414
      vco(1,j)=w(7)*rr/chb                                              pote-415
      vco(2,j)=rr*(w(7)/(xm+wv(7,j))+w(8)/xm)                           pote-416
   54 invz=0                                                            pote-417
      if (lo(151)) go to 58                                             pote-418
   55 n=0                                                               pote-419
      do 56 l=1,ncoll                                                   pote-420
      write (6,1013) l                                                  pote-421
      write (6,1014) (i,(v(i,n+j),j=1,6),i=1,ism)                       pote-422
      write (6,1015) l                                                  pote-423
      write (6,1014) (i,(v(i,n+j),j=7,12),i=1,ism)                      pote-424
      if (.not.(lo(201).and.lo(203))) write (6,1016) l,(i,(v(i,n+j),j=13pote-425
     1,14),i=1,ism)                                                     pote-426
   56 n=n+14                                                            pote-427
      l=intc+inls                                                       pote-428
      if (l.eq.0) go to 58                                              pote-429
      n=it2                                                             pote-430
      do 57 k=1,l                                                       pote-431
      if (k.le.intc) write (6,1017) k                                   pote-432
      if (k.gt.intc) write (6,1018) k                                   pote-433
      write (6,1019) (i,(v(i,n+j),j=1,4),i=1,ism)                       pote-434
   57 n=n+4                                                             pote-435
   58 idt=idy                                                           pote-436
      return                                                            pote-437
   59 write (6,1020) idx,idt                                            pote-438
      go to 58                                                          pote-439
 1000 format (2x,3a8,14h potential ***,i2,4h ***,5x,i5)                 pote-440
 1001 format (2x,0p,f10.5,1p,e20.6,0p,f10.5,1p,e20.6,a4,i6)             pote-441
 1002 format (0p,f10.5,1p,e20.6,0p,f10.5,1p,e20.6,a4,i6)                pote-442
 1003 format (2x,3a8,25h transition potential ***,i2,4h ***,5x,i5)      pote-443
 1004 format (12h form factor,i4,11h  potential,i3,33h  ratio of correctpote-444
     1ing deformation,e15.6)                                            pote-445
 1005 format (//15h potential ****,i2,5h ****)                          pote-446
 1006 format (//18h central potential//(3(5x,i5,1p,2e14.5,2h i)))       pote-447
 1007 format (//26h real spin-orbit potential//(6(2x,i4,1p,e14.5)))     pote-448
 1008 format (//31h imaginary spin-orbit potential//(6(2x,i4,1p,e14.5)))pote-449
 1009 format (//16h real multipoles/)                                   pote-450
 1010 format (4x,i4,6(i4,1p,e14.5))                                     pote-451
 1011 format ((8x,6(i4,1p,e14.5)))                                      pote-452
 1012 format (//21h imaginary multipoles/)                              pote-453
 1013 format (//50h potentials of schroedinger's equation for channel,i3pote-454
     1/15x,7hcentral,27x,10hspin-orbit,28x,4hd(r))                      pote-455
 1014 format (2x,i3,1p,2e14.7,2h i,5x,2e14.7,2h i,5x,2e14.7,2h i)       pote-456
 1015 format (/17x,4he(r),28x,10hsqrt(d(r)),25x,10hd(r)**(-1),3x,11hfor pote-457
     1channel,i3)                                                       pote-458
 1016 format (/45x,16htensor potential,36x,11hfor channel,i3/(3(2x,i3,1ppote-459
     1,2e14.7,2h i)))                                                   pote-460
 1017 format (//29h scalar and vector multipoles,i6/)                   pote-461
 1018 format (//18h tensor multipoles,i6/)                              pote-462
 1019 format (5x,i5,1p,2e16.7,2h i,10x,2e16.7,2h i)                     pote-463
 1020 format (32h working field too small in pote/17h field requested:,ipote-464
     110,20x,17h field available:,i10)                                  pote-465
      end                                                               pote-466
c 30/05/95  ibm version                                         ecis94  rotp-000
      subroutine rotp(beta,nbta,bta,ip,v,va,ivz,iv,pp,b,p,s,val,id1,ism,rotp-001
     1h,invz,iq1,iqm,iny,nbt1,pgn,xgn,lo)                               rotp-002
c input variables:  beta,nbta: deformations, equivalent by call         rotp-003
c                   bta:       static deformations (rotational model)   rotp-004
c                   ip:        potential number (schroedinger equation) rotp-005
c                              address to temporarily storage of dirac  rotp-006
c                              potentials in v                          rotp-007
c                   ivz:       description of form factors              rotp-008
c                              (see third part of iq in redm)           rotp-009
c                   val:       optical parameters                       rotp-010
c                   id1:       first dimension of the working space p   rotp-011
c                   ism,h:     number and size of steps                 rotp-012
c                   invz:      number of transition form factors        rotp-013
c                   iq1:       iny + number of transition form factors  rotp-014
c                   iqm:       maximum multipolarity of static deform.  rotp-015
c                   iny:       1 + number of derivatives of central     rotp-016
c                              potentials ( schroedinger: 1, dirac: 2)  rotp-017
c                   nbt1:      number of vibrations                     rotp-018
c                   pgn,xgn:   weights, abscissae of legendre integral  rotp-019
c                   lo:        logical controls                         rotp-020
c in common /poten/            number and starting address of different rotp-021
c            potentials and form  factor in v for schroedinger equation rotp-022
c in common /dblpr/            hbar, coulomb parameter                  rotp-023
c output variables: v:         potentials and transition form factors   rotp-024
c                              only potentials and derivatives for diracrotp-025
c                   va:        transition form factors for dirac equ.   rotp-026
c working space:    iv:        order of derivative of the iq1 form fac. rotp-027
c                   pp:        intermediate results, weights, ....      rotp-028
c                   b:         for deformations                         rotp-029
c                   p,s:       double and single prec. in equivalence   rotp-030
c***********************************************************************rotp-031
      implicit real*8 (a-h,o-z)                                         rotp-032
      logical lo(250),lq(8,5)                                           rotp-033
      real*4 v(ism,1),va(ism,11,1),beta(10,1),bta(10,1),val(25),hh,s(1) rotp-034
      dimension ivz(7,1),iv(1),iz(8,2),p(id1,1),ep(8),pp(2),zz(2),dd(2),rotp-035
     1q(8,12,3),vr(6,10),b(10,1),nbta(10,1),pgn(10),xgn(10),ldl(8),srd(4rotp-036
     2),vs(14)                                                          rotp-037
      common /poten/ im,nv,mv,invt,inls,invc,invd,intc,imax,it(16),itxm rotp-038
      common /dblpr/ chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn              rotp-039
      equivalence (it(1),it1),(it(2),it2),(it(3),it3),(it(4),it4),(it(5)rotp-040
     1,it5),(it(6),it6),(it(7),it7),(it(8),it8),(it(9),it9),(it(10),it0)rotp-041
     2,(it(11),ita),(it(12),itb),(it(13),itc),(it(14),itd),(it(15),ite),rotp-042
     3(it(16),itf)                                                      rotp-043
      data ldl /7,112,7,112,113,114,111,119/                            rotp-044
      data srd /1.d0,1.d0,2.d0,6.d0/                                    rotp-045
c checks of diffusenesses                                               rotp-046
      hh=h                                                              rotp-047
      do 2 i=1,8                                                        rotp-048
      j=ldl(i)                                                          rotp-049
      lq(i,5)=lo(j)                                                     rotp-050
      lq(i,1)=val(3*i-2).eq.0.                                          rotp-051
      lq(i,2)=(i.le.6).or.(val(3*i-2)*val(3*i).ne.0.)                   rotp-052
      lq(i,3)=lq(i,1).or.(.not.lq(i,2))                                 rotp-053
      lq(i,2)=lq(i,2).or.lq(i,1)                                        rotp-054
      if (lq(i,1)) go to 2                                              rotp-055
      lq(i,4)=lo(109).or.(val(3*i-1).ge.0.)                             rotp-056
      if (.not.lq(i,2)) go to 1                                         rotp-057
      if (val(3*i).ge.0.02*hh) go to 1                                  rotp-058
      write (6,1000) val(3*i),i,ip                                      rotp-059
      val(3*i)=amax1(-val(3*i),0.02*hh)                                 rotp-060
    1 if (val(3*i-1).ge.hh.or.lo(9)) go to 2                            rotp-061
      write (6,1001) val(3*i-1),i,ip                                    rotp-062
      val(3*i-1)=amax1(-val(3*i-1),hh)                                  rotp-063
    2 continue                                                          rotp-064
      lq(1,2)=lq(7,2).and.lq(8,2)                                       rotp-065
      idg=0                                                             rotp-066
      inx=iny+1                                                         rotp-067
      sr=1.d0                                                           rotp-068
      do 11 i=1,iq1                                                     rotp-069
      iv(i)=i+3                                                         rotp-070
      if (i.le.iny) go to 8                                             rotp-071
      k=mod(ivz(1,i-iny),1000)                                          rotp-072
      if (k.eq.0.or.lo(3)) go to 6                                      rotp-073
      if (k.gt.nbt1) go to 4                                            rotp-074
      iv(i)=2                                                           rotp-075
      idg=max0(idg,1)                                                   rotp-076
      do 3 j=1,8                                                        rotp-077
      if (lo(106)) sr=abs(val(3*j-1))                                   rotp-078
    3 b(j,i)=0.282095*beta(j,k)*sr                                      rotp-079
      go to 10                                                          rotp-080
    4 k1=mod(k,nbt1+1)                                                  rotp-081
      k2=k/(nbt1+1)                                                     rotp-082
      idg=max0(idg,2)                                                   rotp-083
      iv(i)=3                                                           rotp-084
      do 5 j=1,8                                                        rotp-085
      if (lo(106)) sr=abs(val(3*j-1))                                   rotp-086
    5 b(j,i)=0.0397887*beta(j,k1)*beta(j,k2)*sr*sr                      rotp-087
      go to 10                                                          rotp-088
    6 iv(i)=k+1                                                         rotp-089
      idg=max0(idg,k)                                                   rotp-090
      if (lo(1)) go to 8                                                rotp-091
      do 7 j=1,8                                                        rotp-092
      if (lo(106)) sr=abs(val(3*j-1))                                   rotp-093
    7 b(j,i)=sr**k*0.282095*beta(j,k+1)/srd(k+1)                        rotp-094
      go to 10                                                          rotp-095
    8 do 9 j=1,8                                                        rotp-096
    9 b(j,i)=1.d0                                                       rotp-097
   10 b(9,i)=b(5,i)                                                     rotp-098
   11 b(10,i)=b(6,i)                                                    rotp-099
      iv(1)=1                                                           rotp-100
c set up of form factor computation                                     rotp-101
      ids=1                                                             rotp-102
      idr=1                                                             rotp-103
      if (lo(17).or.lo(99)) ids=0                                       rotp-104
      if (lo(209)) idr=0                                                rotp-105
      idt=idr+ids                                                       rotp-106
      do 12 i=1,8                                                       rotp-107
      idz=idg                                                           rotp-108
      if (lq(i,5)) idz=0                                                rotp-109
      iz(i,2)=idz+1                                                     rotp-110
      if (lq(i,3)) go to 12                                             rotp-111
      ep(i)=dexp(h/dble(val(3*i)))                                      rotp-112
      if ((i.eq.3).or.(i.eq.4)) idz=idz+idr                             rotp-113
      if ((i.eq.5).or.(i.eq.6).or.(i.eq.8)) idz=idz+ids                 rotp-114
      if (lo(209)) idz=max0(idz,2)                                      rotp-115
   12 iz(i,1)=idz                                                       rotp-116
c lq(i,1) is .true. if the form factor is not used                      rotp-117
c lq(i,2) is .true. for coulomb form factor with diffuseness            rotp-118
c lq(i,3) is .false. for any woods-saxon form factors                   rotp-119
c lq(i,4) is .false. for symmetrised woods-saxon form factors           rotp-120
c lq(i,5) is .false. for deformed form factors                          rotp-121
      call rotd(nbta,bta,ivz,iv,pp,p,q,val,id1,invz,iq1,iqm,iny,idt,lq,drotp-122
     1d,pgn,xgn,lo)                                                     rotp-123
      zz(1)=ccz*val(19)                                                 rotp-124
      zz(2)=ccz*val(22)                                                 rotp-125
      if (dd(1).ne.0.d0) zz(1)=zz(1)/dd(1)                              rotp-126
      if (dd(2).ne.0.d0) zz(2)=zz(2)/dd(2)                              rotp-127
      do 13 i=1,60                                                      rotp-128
   13 vr(i,1)=0.d0                                                      rotp-129
      r=0.d0                                                            rotp-130
      do 62 is=1,ism                                                    rotp-131
      r=r+h                                                             rotp-132
      do 15 i=1,iq1                                                     rotp-133
      do 14 j=17,27                                                     rotp-134
   14 p(j,i)=0.d0                                                       rotp-135
   15 continue                                                          rotp-136
c integration loop                                                      rotp-137
      do 52 j=1,idt                                                     rotp-138
      do 35 i=1,8                                                       rotp-139
      if (lq(i,3)) go to 35                                             rotp-140
      if (p(i,j).ne.0.d0) go to 16                                      rotp-141
      q(i,j,1)=q(i,j,1)+h                                               rotp-142
      if (q(i,j,1)+50.d0*val(3*i).gt.0.d0) p(i,j)=dexp(q(i,j,1)/val(3*i)rotp-143
     1)                                                                 rotp-144
      go to 17                                                          rotp-145
   16 if (p(i,j).lt.1.d15) p(i,j)=p(i,j)*ep(i)                          rotp-146
   17 if ((.not.lq(i,4)).and.p(i+8,j).gt.1.d-15) p(i+8,j)=p(i+8,j)/ep(i)rotp-147
      idv=iz(i,1)                                                       rotp-148
      vr(1,i)=val(3*i-2)/(1.d0+p(i,j))                                  rotp-149
      if (idv.le.0) go to 18                                            rotp-150
      ar=1.d0/(val(3*i)*(1.d0+p(i,j)))                                  rotp-151
      vr(2,i)=vr(1,i)*ar*p(i,j)                                         rotp-152
      if (idv.gt.1) vr(3,i)=vr(2,i)*ar*(p(i,j)-1.d0)                    rotp-153
      if (idv.gt.2) vr(4,i)=vr(2,i)*(p(i,j)**2-4.d0*p(i,j)+1.d0)*ar*ar  rotp-154
      if (idv.gt.3) vr(5,i)=vr(3,i)*(p(i,j)**2-10.d0*p(i,j)+1.d0)*ar*ar rotp-155
   18 if (lq(i,4)) go to 28                                             rotp-156
      vs(10)=1.d0/(1.d0+p(i+8,j))                                       rotp-157
      if (idv.le.0) go to 19                                            rotp-158
      ar=vs(10)/val(3*i)                                                rotp-159
      vs(11)=vs(10)*ar*p(i+8,j)                                         rotp-160
      if (idv.gt.1) vs(12)=vs(11)*ar*(p(i+8,j)-1.d0)                    rotp-161
      if (idv.gt.2) vs(13)=vs(11)*(p(i+8,j)**2-4.d0*p(i+8,j)+1.d0)*ar*arrotp-162
      if (idv.gt.3) vs(14)=vs(12)*(p(i+8,j)**2-10.d0*p(i+8,j)+1.d0)*ar*arotp-163
     1r                                                                 rotp-164
      if (idv.gt.3) vs(5)=vr(1,i)*vs(14)+4.d0*vr(2,i)*vs(13)+6.d0*vr(3,irotp-165
     1)*vs(12)+4.d0*vr(4,i)*vs(11)+vr(5,i)*vs(10)                       rotp-166
      if (idv.gt.2) vs(4)=vr(1,i)*vs(13)+3.d0*vr(2,i)*vs(12)+3.d0*vr(3,irotp-167
     1)*vs(11)+vr(4,i)*vs(10)                                           rotp-168
      if (idv.gt.1) vs(3)=vr(1,i)*vs(12)+2.d0*vr(2,i)*vs(11)+vr(3,i)*vs(rotp-169
     110)                                                               rotp-170
      if (idv.gt.0) vs(2)=vr(1,i)*vs(11)+vr(2,i)*vs(10)                 rotp-171
   19 vs(1)=vr(1,i)*vs(10)                                              rotp-172
      if ((i.lt.3).or.(i.ge.7).or.(idt.eq.0)) go to 25                  rotp-173
      if (idv.gt.3) vs(9)=vr(1,i)*vs(14)+2.d0*vr(2,i)*vs(13)-2.d0*vr(4,irotp-174
     1)*vs(11)-vr(5,i)*vs(10)                                           rotp-175
      if (idv.gt.2) vs(8)=vr(1,i)*vs(13)+vr(2,i)*vs(12)-vr(3,i)*vs(11)-vrotp-176
     1r(4,i)*vs(10)                                                     rotp-177
      if (idv.gt.1) vs(7)=vr(1,i)*vs(12)-vr(3,i)*vs(10)                 rotp-178
      vs(6)=vr(1,i)*vs(11)-vr(2,i)*vs(10)                               rotp-179
      if (i.gt.4) go to 21                                              rotp-180
      if (idr.eq.0) go to 25                                            rotp-181
      ar=4.d0*r*val(3*i)/val(3*i-1)                                     rotp-182
      do 20 k=1,idv                                                     rotp-183
   20 vr(k,i)=ar*vs(k+5)                                                rotp-184
      go to 35                                                          rotp-185
   21 if (ids.eq.0) go to 25                                            rotp-186
      if (lo(100)) go to 23                                             rotp-187
      do 22 k=1,idv                                                     rotp-188
      vr(k,i+4)=vs(k)/r**2                                              rotp-189
   22 vr(k,i)=-vs(k+5)/r                                                rotp-190
      go to 35                                                          rotp-191
   23 do 24 k=1,idv                                                     rotp-192
   24 vr(k,i+4)=-vs(k+5)                                                rotp-193
   25 if (.not.lo(209)) go to 26                                        rotp-194
      vr(6,i)=vr(3,i)*vs(10)-2.d0*vr(2,i)*vs(11)+vr(1,i)*vs(12)         rotp-195
      vr(5,i)=vr(2,i)*vs(10)-vr(1,i)*vs(11)                             rotp-196
   26 idz=iz(i,2)                                                       rotp-197
      do 27 k=1,idz                                                     rotp-198
   27 vr(k,i)=vs(k)                                                     rotp-199
      go to 35                                                          rotp-200
   28 if ((i.lt.3).or.(i.ge.7).or.(idt.eq.0)) go to 34                  rotp-201
      if (i.gt.4) go to 30                                              rotp-202
      if (idr.eq.0) go to 34                                            rotp-203
      do 29 k=1,idv                                                     rotp-204
   29 vr(k,i)=4.d0*vr(k+1,i)*val(3*i)                                   rotp-205
      go to 34                                                          rotp-206
   30 if (ids.eq.0) go to 34                                            rotp-207
      if (lo(100)) go to 32                                             rotp-208
      do 31 k=1,idv                                                     rotp-209
      vr(k,i+4)=vr(k,i)/r**2                                            rotp-210
   31 vr(k,i)=vr(k+1,i)/r                                               rotp-211
      go to 34                                                          rotp-212
   32 do 33 k=1,idv                                                     rotp-213
   33 vr(k,i+4)=vr(k+1,i)                                               rotp-214
   34 if (.not.lo(209)) go to 35                                        rotp-215
      vr(5,i)=vr(2,i)                                                   rotp-216
      vr(6,i)=vr(3,i)                                                   rotp-217
   35 continue                                                          rotp-218
      if (lo(199)) go to 36                                             rotp-219
      call rotz(vr,xgn,r,q,val,j,iv,b,p,id1,iq1,lo)                     rotp-220
      go to 52                                                          rotp-221
   36 do 38 l=1,iq1                                                     rotp-222
      k=iv(l)                                                           rotp-223
      do 37 m=1,10                                                      rotp-224
   37 p(m+16,l)=p(m+16,l)+vr(k,m)*p(l+27,j)*b(m,l)                      rotp-225
   38 continue                                                          rotp-226
      if (lq(1,2)) go to 52                                             rotp-227
c deformed coulomb potential                                            rotp-228
      do 51 i=7,8                                                       rotp-229
      if (lq(i,2)) go to 51                                             rotp-230
      c=p(i,j)/r                                                        rotp-231
      if (i.eq.8.and.lo(117).and.lo(200)) go to 40                      rotp-232
      if (r.lt.p(i,j)) go to 39                                         rotp-233
      p(i+16,1)=p(i+16,1)+zz(i-6)*(p(i,j)**2)*c*p(28,j)                 rotp-234
      if (lo(200)) go to 41                                             rotp-235
      p(i+16,2)=p(i+16,2)+zz(i-6)*p(i,j)*c**2*p(28,j)                   rotp-236
      p(i+16,3)=p(i+16,3)+zz(i-6)*2.*c**3*p(28,j)                       rotp-237
      go to 41                                                          rotp-238
   39 p(i+16,1)=p(i+16,1)+(0.5d0*p(i,j)*p(i,j)-r*r/6.d0)*zz(i-6)*p(28,j)rotp-239
     1*3.d0                                                             rotp-240
      if (lo(200)) go to 41                                             rotp-241
      p(i+16,2)=p(i+16,2)+r*zz(i-6)*p(28,j)                             rotp-242
      p(i+16,3)=p(i+16,3)-zz(i-6)*p(28,j)                               rotp-243
      go to 41                                                          rotp-244
   40 c1=zz(i-6)*p(28,j)                                                rotp-245
      if (r.gt.p(i,j)) c1=c1*c**3                                       rotp-246
      p(24,1)=p(24,1)+c1                                                rotp-247
   41 if (invz.eq.0) go to 51                                           rotp-248
      if (lo(8*i+55)) go to 51                                          rotp-249
      do 50 k=inx,iq1                                                   rotp-250
      if (ivz(i-3,k-iny).eq.0) go to 50                                 rotp-251
      l=ivz(7,k-iny)+1                                                  rotp-252
      d=l                                                               rotp-253
      n=iv(k)                                                           rotp-254
      if (r.lt.p(i,j)) go to 42                                         rotp-255
      c1=(p(i,j)**2)*(c**l)*3.d0/((d+2.d0)*(2.d0*d-1.d0))               rotp-256
      if (n.gt.1) c1=c1*(d+2.d0)/p(i,j)                                 rotp-257
      if (n.gt.2) c1=c1*(d+1.d0)/p(i,j)                                 rotp-258
      if (n.gt.3) c1=c1*d/p(i,j)                                        rotp-259
      go to 44                                                          rotp-260
   42 if (l.ne.3) go to 43                                              rotp-261
      if (n.eq.1) c1=r*r*(0.2d0+dlog(c))*0.6d0                          rotp-262
      if (n.ge.2) c1=0.6d0*r/c                                          rotp-263
      if (n.ge.3) c1=-c1/p(i,j)                                         rotp-264
      if (n.ge.4) c1=-2.d0*c1/p(i,j)                                    rotp-265
      go to 44                                                          rotp-266
   43 if (n.eq.1) c1=r*r*(1.d0/(d+2.d0)-1.d0/(c**(l-3)*(2.d0*d-1.d0)))*3rotp-267
     1.d0/(d-3.d0)                                                      rotp-268
      if (n.ge.2) c1=r/c**(l-2)*3.d0/(2.d0*d-1.d0)                      rotp-269
      if (n.ge.3) c1=-c1*(d-2.d0)/p(i,j)                                rotp-270
      if (n.eq.4) c1=-c1*(d-1.d0)/p(i,j)                                rotp-271
   44 if (i.eq.7.or.lo(17)) go to 49                                    rotp-272
      if (r.lt.p(i,j)) go to 45                                         rotp-273
      c2=-d*c1/r                                                        rotp-274
      go to 47                                                          rotp-275
   45 if (l.ne.3) go to 46                                              rotp-276
      if (n.eq.1) c2=-1.2d0*(0.3d0*r-dlog(c))*r                         rotp-277
      if (n.ge.2) c2=2.d0*c1/r                                          rotp-278
      go to 47                                                          rotp-279
   46 if (n.eq.1) c2=(2.d0/(d+2.d0)-(d-1.d0)/(c**(l-3)*(2.d0*d-1.d0)))*3rotp-280
     1.d0/(d-3.d0)*r                                                    rotp-281
      if (n.ne.1)  c2=(d-1.d0)*c1/r                                     rotp-282
   47 if (lo(100)) go to 48                                             rotp-283
      p(27,k)=p(27,k)-zz(2)*c1*p(k+27,j)*b(i,k)/r**2                    rotp-284
      p(24,k)=p(24,k)-zz(2)*c2*p(k+27,j)*b(i,k)/r                       rotp-285
      go to 50                                                          rotp-286
   48 p(27,k)=p(27,k)-zz(2)*c2*p(k+27,j)*b(i,k)                         rotp-287
      p(24,k)=p(24,k)+zz(2)*c1*p(k+27,j)*b(i,k)                         rotp-288
      go to 50                                                          rotp-289
   49 p(i+16,k)=p(i+16,k)+zz(i-6)*c1*p(k+27,j)*b(i,k)                   rotp-290
   50 continue                                                          rotp-291
   51 continue                                                          rotp-292
   52 continue                                                          rotp-293
c storage of form factors                                               rotp-294
      if (lo(100)) go to 56                                             rotp-295
      v(is,ip)=p(17,1)                                                  rotp-296
      v(is,ip+it2)=p(18,1)                                              rotp-297
      v(is,ip+it3)=p(19,1)                                              rotp-298
      v(is,ip+it4)=p(20,1)                                              rotp-299
      if (.not.lo(201)) v(is,ip+it5)=p(21,1)                            rotp-300
      if (.not.lo(202)) v(is,ip+it6)=p(22,1)                            rotp-301
      v(is,ip+it7)=p(23,1)                                              rotp-302
      if (.not.lo(203)) v(is,ip+it8)=p(24,1)                            rotp-303
      if (invz.le.0) go to 62                                           rotp-304
      do 55 j=1,invz                                                    rotp-305
      k=j+iny                                                           rotp-306
      v(is,j+it9)=p(17,k)                                               rotp-307
      v(is,j+ita)=p(19,k)                                               rotp-308
      if (lo(112)) go to 53                                             rotp-309
      v(is,j+it0)=p(18,k)                                               rotp-310
      v(is,j+itb)=p(20,k)                                               rotp-311
   53 ij=ivz(4,j)                                                       rotp-312
      if (ij.ne.0) v(is,ij+ite)=p(23,k)                                 rotp-313
      ij=ivz(3,j)                                                       rotp-314
      if (ij.eq.0) go to 54                                             rotp-315
      v(is,ij+it9)=p(21,k)                                              rotp-316
      v(is,ij+it9+inls)=-p(25,k)                                        rotp-317
      if (lo(114)) go to 54                                             rotp-318
      v(is,ij+it0)=p(22,k)                                              rotp-319
      v(is,ij+it0+inls)=-p(26,k)                                        rotp-320
   54 ij=ivz(5,j)                                                       rotp-321
      if (ij.eq.0) go to 55                                             rotp-322
      v(is,ij+itf)=p(24,k)                                              rotp-323
      v(is,ij+itf+invd)=p(27,k)                                         rotp-324
   55 continue                                                          rotp-325
      go to 62                                                          rotp-326
   56 k=ip                                                              rotp-327
      do 59 i=1,3                                                       rotp-328
      do 58 j=17,24                                                     rotp-329
      v(is,k)=p(j,i)                                                    rotp-330
   58 k=k+1                                                             rotp-331
   59 continue                                                          rotp-332
      if (invz.eq.0) go to 62                                           rotp-333
      do 61 k=1,invz                                                    rotp-334
      do 60 j=1,11                                                      rotp-335
   60 va(is,j,k)=p(j+16,k+3)                                            rotp-336
   61 continue                                                          rotp-337
   62 continue                                                          rotp-338
c coulomb potentials with diffuse charge distribution                   rotp-339
      if (lq(7,3).and.lq(8,3)) return                                   rotp-340
      do 68 i=7,8                                                       rotp-341
      if (lq(i,3)) go to 68                                             rotp-342
      i1=ip+it(i)                                                       rotp-343
      if (i.eq.8.and.lo(117).and.lo(200)) go to 63                      rotp-344
      if (lo(100)) i1=ip+i-1                                            rotp-345
      call copo(v(1,i1),v(1,i1),p,ism,h,0,val(3*i-2),val(25),ccz,zt,.falrotp-346
     1se.,.false.)                                                      rotp-347
      if (lo(200)) go to 64                                             rotp-348
      call deri(v(1,i1+8),v(1,i1),hh,ism,.true.)                        rotp-349
      call deri(v(1,i1+16),v(1,i1+8),hh,ism,.true.)                     rotp-350
      go to 64                                                          rotp-351
   63 call copo(s,v(1,i1),p,ism,h,0,val(3*i-2),val(25),ccz,zt,.false.,.frotp-352
     1alse.)                                                            rotp-353
      call deri(v(1,i1),s,hh,ism,.false.)                               rotp-354
   64 if (invz.eq.0.or.lo(8*i+55)) go to 68                             rotp-355
      do 67 j=1,invz                                                    rotp-356
      n=ivz(i-3,j)                                                      rotp-357
      if (n.eq.0) go to 67                                              rotp-358
      l=ivz(7,j)                                                        rotp-359
      i1=n+it(i+8)                                                      rotp-360
      if (lo(100)) i1=it5+11*j+i                                        rotp-361
      i2=i1                                                             rotp-362
      if (lo(200).and.(i.eq.8).and.lo(117)) i2=i2+invd                  rotp-363
      call copo(v(1,i2),v(1,i1),p,ism,h,l,val(3*i-2),val(25),ccz,zt,.falrotp-364
     1se.,.true.)                                                       rotp-365
      if ((i.eq.7).or.lo(17)) go to 67                                  rotp-366
      if (lo(200)) go to 65                                             rotp-367
      call deri(v(1,i1+3),v(1,i1),hh,ism,.true.)                        rotp-368
      go to 67                                                          rotp-369
   65 call deri(v(1,i1),v(1,i2),hh,ism,.false.)                         rotp-370
      rr=0.                                                             rotp-371
      do 66 is=1,ism                                                    rotp-372
      rr=rr+h                                                           rotp-373
   66 v(is,i2)=-v(is,i2)/rr**2                                          rotp-374
   67 continue                                                          rotp-375
   68 continue                                                          rotp-376
      return                                                            rotp-377
 1000 format (24h too small diffuseness =,e15.6,18h for the potential,2irotp-378
     14,33h   changed into its minimum value)                           rotp-379
 1001 format (27h too small coulomb radius =,e15.6,18h for the potentialrotp-380
     1,2i4,33h   changed into its minimum value)                        rotp-381
      end                                                               rotp-382
c 11/06/94  ibm version                                         ecis94  rotd-000
      subroutine rotd(nbta,bta,ivz,iv,pp,p,q,val,id1,invz,iq1,iqm,iny,idrotd-001
     1t,lq,dd,pgn,xgn,lo)                                               rotd-002
c       symmetric rotational model                                      rotd-003
c a 20-points gauss-legendre integration method is used, reduced to 10  rotd-004
c values by symmetry                                                    rotd-005
c                                                                       rotd-006
c       asymmetric rotational model                                     rotd-007
c 36 values of (theta,phi) have been chosen. the values of theta are    rotd-008
c n*pi/14. and for each value of 'n' there are n+1 values of phi equi-  rotd-009
c distant between 0. and pi/2.   the matrix,the elements of which are   rotd-010
c the rotation matrix elements for these angles and l given in nl,k in  rotd-011
c nk has been inverted . the coefficients of the 15 lowest (l,k) are    rotd-012
c stored in poids . the 15 reduced rotation matrix elements for the 8   rotd-013
c values of theta are in rb .                                           rotd-014
c                                                                       rotd-015
c       vibrational model                                               rotd-016
c the angular integration is reduced to one point.                      rotd-017
c input variables:  nbta:   informations on vibrations                  rotd-018
c                   bta:    static deformations                         rotd-019
c                   ivz:    informations on form factors                rotd-020
c                   iv:     order of derivative of each form factor     rotd-021
c                   val:    optical parameters                          rotd-022
c                   id1,invz,iq1,iqm,iny,lq:   see rotp                 rotd-023
c                   pgn,xgn: weight and abscissae of legendre integral  rotd-024
c                   lo:     logical controls                            rotd-025
c output variables: p(i+27,j):  weight at point j of form factor i      rotd-026
c                   q:      radii in fermis. in rotational model, q(,,2)rotd-027
c                           is first derivative/sin(theta) and q(,,3)   rotd-028
c                           2nd derivative + 1st derivative/tg(theta),  rotd-029
c                           used for schroe. equiv. of dirac equation.  rotd-030
c                   idt:    number of integration points                rotd-031
c                   dd:     charge integrals                            rotd-032
c working space:    pp:     for legendre polynomials                    rotd-033
c***********************************************************************rotd-034
      implicit real*8 (a-h,o-z)                                         rotd-035
      logical lo(250),lq(8,5)                                           rotd-036
      real*4 bta(10,1),val(24)                                          rotd-037
      dimension nl(36),nk(36),ivz(7,1),iv(1),p(id1,1),pp(2),pgn(10),xgn(rotd-038
     110),dd(2),q(8,12,3),nbta(10,1),ff(660),poids(36,15),rb(15,8)      rotd-039
      equivalence (poids(1,1),ff(1)),(rb(1,1),ff(541))                  rotd-040
      common /poten/ im,nv,mv,invt,inls,invc,invd,intc,imax,it(16),itxm rotd-041
      data ff(  1),ff(  2) / 5.12820512820513d-03, 2.43496936475441d-02/rotd-042
      data ff(  3),ff(  4) / 2.43496936475441d-02, 2.12528237972895d-02/rotd-043
      data ff(  5),ff(  6) / 5.53147440814732d-02, 2.12528237972895d-02/rotd-044
      data ff(  7),ff(  8) / 2.53452023906582d-02, 4.44873368571440d-02/rotd-045
      data ff(  9),ff( 10) / 4.44873368571440d-02, 2.53452023906582d-02/rotd-046
      data ff( 11),ff( 12) / 1.86559801758989d-02, 4.85184708058446d-02/rotd-047
      data ff( 13),ff( 14) / 4.12568870375796d-02, 4.85184708058446d-02/rotd-048
      data ff( 15),ff( 16) / 1.86559801758989d-02, 2.45925296747690d-02/rotd-049
      data ff( 17),ff( 18) / 3.46398560932081d-02, 4.17933479732147d-02/rotd-050
      data ff( 19),ff( 20) / 4.17933479732147d-02, 3.46398560932081d-02/rotd-051
      data ff( 21),ff( 22) / 2.45925296747690d-02, 1.19673178236678d-02/rotd-052
      data ff( 23),ff( 24) / 4.47278246564596d-02, 3.42917677140348d-02/rotd-053
      data ff( 25),ff( 26) / 3.69076912422490d-02, 3.42917677140348d-02/rotd-054
      data ff( 27),ff( 28) / 4.47278246564596d-02, 1.19673178236678d-02/rotd-055
      data ff( 29),ff( 30) / 1.22068028124735d-02, 1.07129429826274d-02/rotd-056
      data ff( 31),ff( 32) / 1.70796570854178d-02, 1.60746817649944d-02/rotd-057
      data ff( 33),ff( 34) / 1.60746817649944d-02, 1.70796570854178d-02/rotd-058
      data ff( 35),ff( 36) / 1.07129429826274d-02, 1.22068028124735d-02/rotd-059
      data ff( 37),ff( 38) / 1.16509780810355d-02, 5.02196040257258d-02/rotd-060
      data ff( 39),ff( 40) / 5.02196040257258d-02, 3.27291637647035d-02/rotd-061
      data ff( 41),ff( 42) / 9.18762267773519d-02, 3.27291637647035d-02/rotd-062
      data ff( 43),ff( 44) / 2.59023523875124d-02, 3.90112947467209d-02/rotd-063
      data ff( 45),ff( 46) / 3.90112947467209d-02, 2.59023523875124d-02/rotd-064
      data ff( 47),ff( 48) /-1.94110577743667d-03, 1.63152196117813d-02/rotd-065
      data ff( 49),ff( 50) / 4.25393417813309d-03, 1.63152196117813d-02/rotd-066
      data ff( 51),ff( 52) /-1.94110577743667d-03,-2.10440960549142d-03/rotd-067
      data ff( 53),ff( 54) /-2.95605747812527d-02,-1.76788269194279d-02/rotd-068
      data ff( 55),ff( 56) /-1.76788269194279d-02,-2.95605747812527d-02/rotd-069
      data ff( 57),ff( 58) /-2.10440960549142d-03,-2.76725877126884d-02/rotd-070
      data ff( 59),ff( 60) /-2.18051394343160d-02,-3.71237658735663d-02/rotd-071
      data ff( 61),ff( 62) /-3.47941600457989d-02,-3.71237658735663d-02/rotd-072
      data ff( 63),ff( 64) /-2.18051394343160d-02,-2.76725877126884d-02/rotd-073
      data ff( 65),ff( 66) /-2.37727476826438d-03,-2.57698170677382d-02/rotd-074
      data ff( 67),ff( 68) /-1.69793430277171d-02,-1.76582790639056d-02/rotd-075
      data ff( 69),ff( 70) /-1.76582790639056d-02,-1.69793430277171d-02/rotd-076
      data ff( 71),ff( 72) /-2.57698170677382d-02,-2.37727476826438d-03/rotd-077
      data ff( 73),ff( 74) /               0.d+00, 1.72605997389226d-03/rotd-078
      data ff( 75),ff( 76) /-1.72605997389226d-03, 1.25329145074895d-02/rotd-079
      data ff( 77),ff( 78) /               0.d+00,-1.25329145074895d-02/rotd-080
      data ff( 79),ff( 80) / 2.24225003695212d-02, 2.96494182999275d-02/rotd-081
      data ff( 81),ff( 82) /-2.96494182999275d-02,-2.24225003695212d-02/rotd-082
      data ff( 83),ff( 84) / 3.91319410166702d-02, 4.84852241623139d-02/rotd-083
      data ff( 85),ff( 86) /               0.d+00,-4.84852241623139d-02/rotd-084
      data ff( 87),ff( 88) /-3.91319410166702d-02, 3.97624306723559d-02/rotd-085
      data ff( 89),ff( 90) / 8.10325074410309d-02, 2.28106411006477d-02/rotd-086
      data ff( 91),ff( 92) /-2.28106411006477d-02,-8.10325074410309d-02/rotd-087
      data ff( 93),ff( 94) /-3.97624306723559d-02, 5.59851854712431d-02/rotd-088
      data ff( 95),ff( 96) / 6.92750919115029d-02, 5.27666983806334d-02/rotd-089
      data ff( 97),ff( 98) /               0.d+00,-5.27666983806334d-02/rotd-090
      data ff( 99),ff(100) /-6.92750919115029d-02,-5.59851854712431d-02/rotd-091
      data ff(101),ff(102) / 1.57386702462217d-02, 4.84030198418523d-02/rotd-092
      data ff(103),ff(104) / 2.47182393346187d-02, 9.25890190803834d-03/rotd-093
      data ff(105),ff(106) /-9.25890190803834d-03,-2.47182393346187d-02/rotd-094
      data ff(107),ff(108) /-4.84030198418523d-02,-1.57386702462217d-02/rotd-095
      data ff(109),ff(110) / 1.62578391680559d-02, 5.49097361991748d-02/rotd-096
      data ff(111),ff(112) / 5.49097361991748d-02, 8.83119316755724d-03/rotd-097
      data ff(113),ff(114) / 4.65475180836232d-02, 8.83119316755724d-03/rotd-098
      data ff(115),ff(116) /-1.52665570705068d-02,-4.45213321560779d-02/rotd-099
      data ff(117),ff(118) /-4.45213321560779d-02,-1.52665570705068d-02/rotd-100
      data ff(119),ff(120) /-3.25206220517009d-02,-5.00345998670453d-02/rotd-101
      data ff(121),ff(122) /-5.61452437357254d-02,-5.00345998670453d-02/rotd-102
      data ff(123),ff(124) /-3.25206220517009d-02,-5.34880433627418d-03/rotd-103
      data ff(125),ff(126) /-2.71365320807763d-02,-2.11168478505607d-02/rotd-104
      data ff(127),ff(128) /-2.11168478505607d-02,-2.71365320807763d-02/rotd-105
      data ff(129),ff(130) /-5.34880433627418d-03, 5.38896697941338d-03/rotd-106
      data ff(131),ff(132) / 2.71262358172909d-02, 2.30796535753636d-02/rotd-107
      data ff(133),ff(134) / 2.05455707964392d-02, 2.30796535753636d-02/rotd-108
      data ff(135),ff(136) / 2.71262358172909d-02, 5.38896697941338d-03/rotd-109
      data ff(137),ff(138) / 1.18873085059175d-02, 1.57695500564231d-02/rotd-110
      data ff(139),ff(140) / 1.69343260833909d-02, 1.84154828722142d-02/rotd-111
      data ff(141),ff(142) / 1.84154828722142d-02, 1.69343260833909d-02/rotd-112
      data ff(143),ff(144) / 1.57695500564231d-02, 1.18873085059175d-02/rotd-113
      data ff(145),ff(146) /               0.d+00, 8.48270535877333d-03/rotd-114
      data ff(147),ff(148) /-8.48270535877333d-03, 5.07879724674491d-02/rotd-115
      data ff(149),ff(150) /               0.d+00,-5.07879724674491d-02/rotd-116
      data ff(151),ff(152) / 6.07576950711252d-02, 9.00787083612551d-02/rotd-117
      data ff(153),ff(154) /-9.00787083612551d-02,-6.07576950711252d-02/rotd-118
      data ff(155),ff(156) / 6.45377024914683d-02, 6.34461864848980d-02/rotd-119
      data ff(157),ff(158) /               0.d+00,-6.34461864848980d-02/rotd-120
      data ff(159),ff(160) /-6.45377024914683d-02,-5.65537884945032d-03/rotd-121
      data ff(161),ff(162) / 4.77376504465041d-02,-6.49930325424402d-03/rotd-122
      data ff(163),ff(164) / 6.49930325424402d-03,-4.77376504465041d-02/rotd-123
      data ff(165),ff(166) / 5.65537884945032d-03, 1.24655233750459d-03/rotd-124
      data ff(167),ff(168) /-8.76714858478633d-02,-1.18181266709155d-02/rotd-125
      data ff(169),ff(170) /               0.d+00, 1.18181266709155d-02/rotd-126
      data ff(171),ff(172) / 8.76714858478633d-02,-1.24655233750459d-03/rotd-127
      data ff(173),ff(174) /-3.84487336410874d-02,-7.62058619698479d-03/rotd-128
      data ff(175),ff(176) /-3.01133238640137d-02,-1.08854252444356d-02/rotd-129
      data ff(177),ff(178) / 1.08854252444356d-02, 3.01133238640137d-02/rotd-130
      data ff(179),ff(180) / 7.62058619698479d-03, 3.84487336410874d-02/rotd-131
      data ff(181),ff(182),ff(183),ff(184)/3*0.d0, 1.36660942007569d-03/rotd-132
      data ff(185),ff(186) /-2.73321884015139d-03, 1.36660942007569d-03/rotd-133
      data ff(187),ff(188) / 1.10470452782256d-02,-1.10470452782256d-02/rotd-134
      data ff(189),ff(190) /-1.10470452782256d-02, 1.10470452782256d-02/rotd-135
      data ff(191),ff(192) / 2.19899348965421d-02, 7.44598962747265d-03/rotd-136
      data ff(193),ff(194) /-5.88718490480295d-02, 7.44598962747265d-03/rotd-137
      data ff(195),ff(196) / 2.19899348965421d-02, 4.68819219798074d-02/rotd-138
      data ff(197),ff(198) / 1.75997201070024d-02,-6.44816420868098d-02/rotd-139
      data ff(199),ff(200) /-6.44816420868098d-02, 1.75997201070024d-02/rotd-140
      data ff(201),ff(202) / 4.68819219798074d-02, 3.99738678988680d-02/rotd-141
      data ff(203),ff(204) / 7.12682217154704d-02,-6.36366236436914d-02/rotd-142
      data ff(205),ff(206) /-9.52109319412941d-02,-6.36366236436914d-02/rotd-143
      data ff(207),ff(208) / 7.12682217154704d-02, 3.99738678988680d-02/rotd-144
      data ff(209),ff(210) / 3.48854645305456d-02, 1.59406059510446d-02/rotd-145
      data ff(211),ff(212) /-3.85251092517111d-03,-4.69735595564191d-02/rotd-146
      data ff(213),ff(214) /-4.69735595564191d-02,-3.85251092517111d-03/rotd-147
      data ff(215),ff(216) / 1.59406059510446d-02, 3.48854645305456d-02/rotd-148
      data ff(217),ff(218) / 2.09351688388115d-02, 4.48693101517502d-02/rotd-149
      data ff(219),ff(220) / 4.48693101517502d-02,-2.58717911400513d-02/rotd-150
      data ff(221),ff(222) /-2.81401919724747d-02,-2.58717911400513d-02/rotd-151
      data ff(223),ff(224) /-2.67091832939234d-02,-6.48487928844068d-02/rotd-152
      data ff(225),ff(226) /-6.48487928844068d-02,-2.67091832939234d-02/rotd-153
      data ff(227),ff(228) / 7.16351218404911d-03, 1.79021864804572d-02/rotd-154
      data ff(229),ff(230) / 2.15963617795819d-02, 1.79021864804572d-02/rotd-155
      data ff(231),ff(232) / 7.16351218404911d-03, 2.39109798331374d-02/rotd-156
      data ff(233),ff(234) / 4.82363267486100d-02, 4.45971408837992d-02/rotd-157
      data ff(235),ff(236) / 4.45971408837992d-02, 4.82363267486100d-02/rotd-158
      data ff(237),ff(238) / 2.39109798331374d-02,-8.59824516528979d-04/rotd-159
      data ff(239),ff(240) /-8.77138104825350d-03,-1.02303358111611d-03/rotd-160
      data ff(241),ff(242) /-4.79305557318445d-03,-1.02303358111611d-03/rotd-161
      data ff(243),ff(244) /-8.77138104825350d-03,-8.59824516528979d-04/rotd-162
      data ff(245),ff(246) /-1.06844320272751d-02,-1.45408758222938d-02/rotd-163
      data ff(247),ff(248) /-1.99395576475419d-02,-1.82297258567795d-02/rotd-164
      data ff(249),ff(250) /-1.82297258567795d-02,-1.99395576475419d-02/rotd-165
      data ff(251),ff(252) /-1.45408758222938d-02,-1.06844320272751d-02/rotd-166
      data ff(253),ff(254) /               0.d+00, 2.01805115490348d-02/rotd-167
      data ff(255),ff(256) /-2.01805115490348d-02, 8.57318720924763d-02/rotd-168
      data ff(257),ff(258) /               0.d+00,-8.57318720924763d-02/rotd-169
      data ff(259),ff(260) / 3.23094559967599d-02, 8.19417704703203d-02/rotd-170
      data ff(261),ff(262) /-8.19417704703203d-02,-3.23094559967599d-02/rotd-171
      data ff(263),ff(264) /-1.46857629097277d-02,-6.79023750172081d-02/rotd-172
      data ff(265),ff(266) /               0.d+00, 6.79023750172081d-02/rotd-173
      data ff(267),ff(268) / 1.46857629097277d-02,-6.96933563711756d-02/rotd-174
      data ff(269),ff(270) /-4.17790846324735d-02,-3.84574445723291d-02/rotd-175
      data ff(271),ff(272) / 3.84574445723291d-02, 4.17790846324735d-02/rotd-176
      data ff(273),ff(274) / 6.96933563711756d-02, 3.99606295249026d-02/rotd-177
      data ff(275),ff(276) /-3.02669933372692d-02, 1.78196010140318d-02/rotd-178
      data ff(277),ff(278) /               0.d+00,-1.78196010140318d-02/rotd-179
      data ff(279),ff(280) / 3.02669933372692d-02,-3.99606295249026d-02/rotd-180
      data ff(281),ff(282) /-1.85102966735610d-03, 5.84883614463197d-02/rotd-181
      data ff(283),ff(284) / 2.06176299500674d-02, 5.03674288697549d-03/rotd-182
      data ff(285),ff(286) /-5.03674288697549d-03,-2.06176299500674d-02/rotd-183
      data ff(287),ff(288) /-5.84883614463197d-02, 1.85102966735610d-03/rotd-184
      data ff(289),ff(290),ff(291),ff(292)/3*0.d0, 8.75524578710006d-03/rotd-185
      data ff(293),ff(294) /-1.75104915742001d-02, 8.75524578710006d-03/rotd-186
      data ff(295),ff(296) / 5.09492763472956d-02,-5.09492763472956d-02/rotd-187
      data ff(297),ff(298) /-5.09492763472956d-02, 5.09492763472956d-02/rotd-188
      data ff(299),ff(300) / 5.07686792912787d-02, 3.43411087448840d-02/rotd-189
      data ff(301),ff(302) /-1.70219576072325d-01, 3.43411087448840d-02/rotd-190
      data ff(303),ff(304) / 5.07686792912787d-02, 5.95241999935498d-02/rotd-191
      data ff(305),ff(306) /-1.56733778150275d-02,-4.38508221785223d-02/rotd-192
      data ff(307),ff(308) /-4.38508221785223d-02,-1.56733778150275d-02/rotd-193
      data ff(309),ff(310) / 5.95241999935498d-02,-6.35546557275261d-02/rotd-194
      data ff(311),ff(312) / 5.26475282909628d-02,-1.74503883012358d-02/rotd-195
      data ff(313),ff(314) / 5.67150314755984d-02,-1.74503883012358d-02/rotd-196
      data ff(315),ff(316) / 5.26475282909628d-02,-6.35546557275261d-02/rotd-197
      data ff(317),ff(318) / 1.43084825509049d-02,-7.77375076960055d-02/rotd-198
      data ff(319),ff(320) / 2.99695551646778d-02, 3.34594699804229d-02/rotd-199
      data ff(321),ff(322) / 3.34594699804229d-02, 2.99695551646778d-02/rotd-200
      data ff(323),ff(324) /-7.77375076960055d-02, 1.43084825509049d-02/rotd-201
      data ff(325),ff(326),ff(327),ff(328),ff(329),ff(330) / 6*0.d+00 / rotd-202
      data ff(331),ff(332) / 2.45227713022227d-03,-4.90455426044453d-03/rotd-203
      data ff(333),ff(334) / 4.90455426044453d-03,-2.45227713022227d-03/rotd-204
      data ff(335),ff(336) / 1.70476858680581d-02,-2.41090685616840d-02/rotd-205
      data ff(337),ff(338) /               0.d+00, 2.41090685616840d-02/rotd-206
      data ff(339),ff(340) /-1.70476858680581d-02, 2.87679007598782d-02/rotd-207
      data ff(341),ff(342) /-6.25948031834043d-03,-7.67073502036074d-02/rotd-208
      data ff(343),ff(344) / 7.67073502036074d-02, 6.25948031834043d-03/rotd-209
      data ff(345),ff(346) /-2.87679007598782d-02, 6.77534129025308d-02/rotd-210
      data ff(347),ff(348) /-2.45662401760060d-02,-9.29568496692793d-02/rotd-211
      data ff(349),ff(350) /               0.d+00, 9.29568496692793d-02/rotd-212
      data ff(351),ff(352) / 2.45662401760060d-02,-6.77534129025308d-02/rotd-213
      data ff(353),ff(354) / 1.40653464342708d-02, 3.44626025062703d-02/rotd-214
      data ff(355),ff(356) /-6.14715612078917d-02,-3.05058349395271d-02/rotd-215
      data ff(357),ff(358) / 3.05058349395271d-02, 6.14715612078917d-02/rotd-216
      data ff(359),ff(360) /-3.44626025062703d-02,-1.40653464342708d-02/rotd-217
      data ff(361),ff(362) / 2.68196038675183d-02, 2.31031610463596d-02/rotd-218
      data ff(363),ff(364) / 2.31031610463596d-02,-4.28485793267828d-02/rotd-219
      data ff(365),ff(366) /-7.35437975772992d-02,-4.28485793267828d-02/rotd-220
      data ff(367),ff(368) / 8.24684503593131d-03, 1.06081754814925d-02/rotd-221
      data ff(369),ff(370) / 1.06081754814925d-02, 8.24684503593131d-03/rotd-222
      data ff(371),ff(372) / 2.51256208268608d-02, 4.43395667660788d-02/rotd-223
      data ff(373),ff(374) / 5.39942159127383d-02, 4.43395667660788d-02/rotd-224
      data ff(375),ff(376) / 2.51256208268608d-02,-2.19715194066651d-02/rotd-225
      data ff(377),ff(378) /-3.13725579969708d-02,-4.08834934180796d-02/rotd-226
      data ff(379),ff(380) /-4.08834934180796d-02,-3.13725579969708d-02/rotd-227
      data ff(381),ff(382) /-2.19715194066651d-02,-1.88427973024923d-03/rotd-228
      data ff(383),ff(384) /-2.16035578956301d-02,-1.17587068801884d-02/rotd-229
      data ff(385),ff(386) /-1.12062882635935d-02,-1.17587068801884d-02/rotd-230
      data ff(387),ff(388) /-2.16035578956301d-02,-1.88427973024923d-03/rotd-231
      data ff(389),ff(390) / 5.74971871310925d-03, 2.25181635560216d-02/rotd-232
      data ff(391),ff(392) / 1.76219271299887d-02, 1.69776491290416d-02/rotd-233
      data ff(393),ff(394) / 1.69776491290416d-02, 1.76219271299887d-02/rotd-234
      data ff(395),ff(396) / 2.25181635560216d-02, 5.74971871310925d-03/rotd-235
      data ff(397),ff(398) /               0.d+00, 3.55735538800802d-02/rotd-236
      data ff(399),ff(400) /-3.55735538800802d-02, 8.33786715099005d-02/rotd-237
      data ff(401),ff(402) /               0.d+00,-8.33786715099005d-02/rotd-238
      data ff(403),ff(404) /-4.89348970296868d-02,-2.91035565005004d-04/rotd-239
      data ff(405),ff(406) / 2.91035565005004d-04, 4.89348970296868d-02/rotd-240
      data ff(407),ff(408) /-2.62016346104983d-02,-8.33457375352782d-02/rotd-241
      data ff(409),ff(410) /               0.d+00, 8.33457375352782d-02/rotd-242
      data ff(411),ff(412) / 2.62016346104983d-02, 2.62738780028789d-02/rotd-243
      data ff(413),ff(414) / 8.32340348860637d-02, 3.18724837249571d-02/rotd-244
      data ff(415),ff(416) /-3.18724837249571d-02,-8.32340348860637d-02/rotd-245
      data ff(417),ff(418) /-2.62738780028789d-02, 2.62547109771934d-02/rotd-246
      data ff(419),ff(420) / 7.98302855528211d-03, 4.48364778698653d-03/rotd-247
      data ff(421),ff(422) /               0.d+00,-4.48364778698653d-03/rotd-248
      data ff(423),ff(424) /-7.98302855528211d-03,-2.62547109771934d-02/rotd-249
      data ff(425),ff(426) /-2.51077741509568d-02,-2.87429639697600d-02/rotd-250
      data ff(427),ff(428) /-1.79981066009081d-02,-7.87642513464656d-03/rotd-251
      data ff(429),ff(430) / 7.87642513464656d-03, 1.79981066009081d-02/rotd-252
      data ff(431),ff(432) / 2.87429639697600d-02, 2.51077741509568d-02/rotd-253
      data ff(433),ff(434),ff(435),ff(436)/3*0.d0, 2.38959949710526d-02/rotd-254
      data ff(437),ff(438) /-4.77919899421051d-02, 2.38959949710526d-02/rotd-255
      data ff(439),ff(440) / 7.91176151667601d-02,-7.91176151667601d-02/rotd-256
      data ff(441),ff(442) /-7.91176151667601d-02, 7.91176151667601d-02/rotd-257
      data ff(443),ff(444) /-1.24626161171327d-02, 5.33272858981795d-02/rotd-258
      data ff(445),ff(446) /-8.17293395620937d-02, 5.33272858981795d-02/rotd-259
      data ff(447),ff(448) /-1.24626161171327d-02,-1.44916866191644d-02/rotd-260
      data ff(449),ff(450) /-9.04220344262881d-02, 1.04913721045452d-01/rotd-261
      data ff(451),ff(452) / 1.04913721045452d-01,-9.04220344262881d-02/rotd-262
      data ff(453),ff(454) /-1.44916866191644d-02,-5.73533998264151d-02/rotd-263
      data ff(455),ff(456) / 7.23959359228724d-02,-1.77393445770836d-02/rotd-264
      data ff(457),ff(458) / 5.39361696125263d-03,-1.77393445770836d-02/rotd-265
      data ff(459),ff(460) / 7.23959359228724d-02,-5.73533998264151d-02/rotd-266
      data ff(461),ff(462) / 5.42648795710159d-02,-2.39248769146420d-02/rotd-267
      data ff(463),ff(464) / 7.38288973327365d-04,-3.10782916297012d-02/rotd-268
      data ff(465),ff(466) /-3.10782916297012d-02, 7.38288973327365d-04/rotd-269
      data ff(467),ff(468) /-2.39248769146420d-02, 5.42648795710159d-02/rotd-270
      data ff(469),ff(470),ff(471),ff(472),ff(473),ff(474) / 6*0.d+00 / rotd-271
      data ff(475),ff(476) / 1.58592251779111d-02,-3.17184503558222d-02/rotd-272
      data ff(477),ff(478) / 3.17184503558222d-02,-1.58592251779111d-02/rotd-273
      data ff(479),ff(480) / 6.36434740587254d-02,-9.00054641703897d-02/rotd-274
      data ff(481),ff(482) /               0.d+00, 9.00054641703897d-02/rotd-275
      data ff(483),ff(484) /-6.36434740587254d-02, 2.20893694492763d-02/rotd-276
      data ff(485),ff(486) / 2.93554190800171d-02,-1.48336186023447d-01/rotd-277
      data ff(487),ff(488) / 1.48336186023447d-01,-2.93554190800171d-02/rotd-278
      data ff(489),ff(490) /-2.20893694492763d-02, 4.17889616928183d-02/rotd-279
      data ff(491),ff(492) /-9.17122054842361d-02, 7.52722761872573d-02/rotd-280
      data ff(493),ff(494) /               0.d+00,-7.52722761872573d-02/rotd-281
      data ff(495),ff(496) / 9.17122054842361d-02,-4.17889616928183d-02/rotd-282
      data ff(497),ff(498) /-6.41790551032870d-02, 5.94260666825252d-02/rotd-283
      data ff(499),ff(500) / 7.67785691121092d-03, 2.62939467857734d-02/rotd-284
      data ff(501),ff(502) /-2.62939467857734d-02,-7.67785691121092d-03/rotd-285
      data ff(503),ff(504) /-5.94260666825252d-02, 6.41790551032870d-02/rotd-286
      data ff(505),ff(506),ff(507),ff(508),ff(509),ff(510) / 6*0.d+00 / rotd-287
      data ff(511),ff(512),ff(513),ff(514)                 / 4*0.d+00 / rotd-288
      data ff(515),ff(516) / 6.25351913613187d-03,-1.25070382722637d-02/rotd-289
      data ff(517),ff(518) / 1.25070382722637d-02,-1.25070382722637d-02/rotd-290
      data ff(519),ff(520) / 6.25351913613187d-03, 3.11758837931106d-02/rotd-291
      data ff(521),ff(522) /-5.04436396065700d-02, 1.92677558134594d-02/rotd-292
      data ff(523),ff(524) / 1.92677558134594d-02,-5.04436396065700d-02/rotd-293
      data ff(525),ff(526) / 3.11758837931106d-02, 3.58893219026970d-02/rotd-294
      data ff(527),ff(528) /-1.67264809607312d-02,-9.33778447285944d-02/rotd-295
      data ff(529),ff(530) / 1.48430007573257d-01,-9.33778447285944d-02/rotd-296
      data ff(531),ff(532) /-1.67264809607312d-02, 3.58893219026970d-02/rotd-297
      data ff(533),ff(534) / 4.68575275756458d-02,-4.50757375114331d-02/rotd-298
      data ff(535),ff(536) /-3.00076119100051d-02, 2.82258218457924d-02/rotd-299
      data ff(537),ff(538) / 2.82258218457924d-02,-3.00076119100051d-02/rotd-300
      data ff(539),ff(540) /-4.50757375114331d-02, 4.68575275756458d-02/rotd-301
      data ff(541),ff(542),ff(543),ff(544) / 2*1.d+00, 0.d+00, 1.d+00 / rotd-302
      data ff(545),ff(546),ff(547),ff(548) / 2*0.d+00, 1.d+00, 0.d+00 / rotd-303
      data ff(549),ff(550),ff(551),ff(552) / 2*0.d+00, 1.d+00, 0.d+00 / rotd-304
      data ff(553),ff(554),ff(555),ff(556) / 3*0.d+00, 1.d+00         / rotd-305
      data ff(557),ff(558) / 9.25726650926814d-01, 3.03219677861538d-02/rotd-306
      data ff(559),ff(560) / 7.63148756611001d-01, 1.10652387063757d-01/rotd-307
      data ff(561),ff(562) / 1.28207234895501d-03, 5.36257386538795d-01/rotd-308
      data ff(563),ff(564) / 2.17289580469363d-01, 8.13196358030030d-03/rotd-309
      data ff(565),ff(566) / 5.76608786636350d-05, 2.78047174877667d-01/rotd-310
      data ff(567),ff(568) / 3.29131159509191d-01, 2.49657214768430d-02/rotd-311
      data ff(569),ff(570) / 5.20868271692270d-04, 2.66389008100408d-06/rotd-312
      data ff(571),ff(572) /               1.d+00, 7.17617351394050d-01/rotd-313
      data ff(573),ff(574) / 1.15282233550037d-01, 2.13774427323495d-01/rotd-314
      data ff(575),ff(576) / 3.48423989314638d-01, 1.85320103458231d-02/rotd-315
      data ff(577),ff(578) /-2.35732455017163d-01, 4.90294315725551d-01/rotd-316
      data ff(579),ff(580) / 9.85729671840697d-02, 3.16881041332955d-03/rotd-317
      data ff(581),ff(582) /-4.09576022206791d-01, 4.20201210269288d-01/rotd-318
      data ff(583),ff(584) / 2.34245007796887d-01, 2.41313741208102d-02/rotd-319
      data ff(585),ff(586) / 5.56591156140697d-04,               1.d+00/rotd-320
      data ff(587),ff(588) / 4.16890700467236d-01, 2.38053374687832d-01/rotd-321
      data ff(589),ff(590) /-2.82554557772787d-01, 5.03833139973589d-01/rotd-322
      data ff(591),ff(592) / 7.90217156752737d-02,-3.59733444374334d-01/rotd-323
      data ff(593),ff(594) / 2.89718584757935d-01, 3.03418532856755d-01/rotd-324
      data ff(595),ff(596) / 2.79017946123459d-02, 7.08378251175649d-02/rotd-325
      data ff(597),ff(598) /-1.72370094784044d-01, 4.12885596178737d-01/rotd-326
      data ff(599),ff(600) / 1.55306184423031d-01, 1.01200845906307d-02/rotd-327
      data ff(601),ff(602) /               1.d+00, 8.31092995327642d-02/rotd-328
      data ff(603),ff(604) / 3.74319061007963d-01,-4.21630141495484d-01/rotd-329
      data ff(605),ff(606) / 4.15874017677357d-01, 1.95380697242947d-01/rotd-330
      data ff(607),ff(608) / 1.11600329703613d-01,-1.97772479536753d-01/rotd-331
      data ff(609),ff(610) / 4.29387782672098d-01, 1.08476318674788d-01/rotd-332
      data ff(611),ff(612) / 2.63594691134320d-01,-2.34078763472890d-01/rotd-333
      data ff(613),ff(614) / 7.77527093709932d-02, 3.57086142014797d-01/rotd-334
      data ff(615),ff(616) / 6.18663570444226d-02,               1.d+00/rotd-335
      data ff(617),ff(618) /-2.17617351394050d-01, 4.97090202145758d-01/rotd-336
      data ff(619),ff(620) /-1.75906698838214d-01, 1.01968005344553d-01/rotd-337
      data ff(621),ff(622) / 3.44562631700107d-01, 3.21522932835539d-01/rotd-338
      data ff(623),ff(624) /-3.16879195937032d-01, 2.47505734203973d-01/rotd-339
      data ff(625),ff(626) / 2.54047379389696d-01,-2.23915517573357d-01/rotd-340
      data ff(627),ff(628) / 2.47297362843729d-01,-3.04922989721535d-01/rotd-341
      data ff(629),ff(630) / 3.15711860946547d-01, 1.92409975848431d-01/rotd-342
      data ff(631),ff(632) /               1.d+00,-4.25726650926814d-01/rotd-343
      data ff(633),ff(634) / 5.82050467909641d-01, 2.00043214171989d-01/rotd-344
      data ff(635),ff(636) /-2.45486828370620d-01, 4.72409970427464d-01/rotd-345
      data ff(637),ff(638) /-3.40709996864496d-02, 5.77157388195865d-02/rotd-346
      data ff(639),ff(640) /-1.44294709220167d-01, 4.07841145692130d-01/rotd-347
      data ff(641),ff(642) /-9.23304365056544d-02, 7.92778608560820d-02/rotd-348
      data ff(643),ff(644) /-3.36435261948797d-02,-7.14935648162744d-02/rotd-349
      data ff(645),ff(646) / 3.61684038642514d-01,               1.d+00/rotd-350
      data ff(647),ff(648) /              -5.d-01, 6.12372435695795d-01/rotd-351
      data ff(649),ff(650) /             3.75d-01,-3.95284707521047d-01/rotd-352
      data ff(651),ff(652) / 5.22912516583797d-01,           -3.125d-01/rotd-353
      data ff(653),ff(654) / 3.20217211436237d-01,-3.50780380010057d-01/rotd-354
      data ff(655),ff(656) / 4.74958879799083d-01,         2.734375d-01/rotd-355
      data ff(657),ff(658) /-2.77316239832795d-01, 2.90851726077911d-01/rotd-356
      data ff(659),ff(660) /-3.23629924643875d-01, 4.43148525027868d-01/rotd-357
      data nl/0,2,2,4,4,4,6,6,6,6,8,8,8,8,8,10,10,10,10,10,10,12,12,12,1rotd-358
     12,12,12,12,14,14,14,14,14,14,14,14/                               rotd-359
      data nk/0,0,2,0,2,4,0,2,4,6,0,2,4,6,8,0,2,4,6,8,10,0,2,4,6,8,10,12rotd-360
     1,0,2,4,6,8,10,12,14/                                              rotd-361
      data pi/3.1415926535d0/                                           rotd-362
      dd(1)=0.d0                                                        rotd-363
      dd(2)=0.d0                                                        rotd-364
      if (lo(1)) go to 4                                                rotd-365
      idt=1                                                             rotd-366
      do 2 j=1,8                                                        rotd-367
      if (lq(j,1)) go to 2                                              rotd-368
      if (lq(j,3)) go to 1                                              rotd-369
      p(j,1)=0.d0                                                       rotd-370
      q(j,1,1)=-val(3*j-1)                                              rotd-371
      p(j+8,1)=1.d-16                                                   rotd-372
      if (lq(j,4)) go to 2                                              rotd-373
      q(j,1,1)=val(3*j-1)                                               rotd-374
      if (q(j,1,1).gt.-36.*val(3*j)) p(j+8,1)=dexp(q(j,1,1)/val(3*j))   rotd-375
      go to 2                                                           rotd-376
    1 p(j,1)=val(3*j-1)                                                 rotd-377
      dd(j-6)=p(j,1)**3                                                 rotd-378
    2 continue                                                          rotd-379
      do 3 i=1,iq1                                                      rotd-380
    3 p(i+27,1)=1.                                                      rotd-381
      return                                                            rotd-382
    4 if (lo(3)) go to 18                                               rotd-383
c *** symmetric rotational model ***************                        rotd-384
      idt=10                                                            rotd-385
      iq=iqm                                                            rotd-386
      if (invz.ne.0) iq=max0(iq,imax)                                   rotd-387
      iq2=iqm/2                                                         rotd-388
      sr=1.d0                                                           rotd-389
      do 6 j=1,8                                                        rotd-390
      if (lq(j,1)) go to 6                                              rotd-391
      if (lo(6)) sr=1.d0/val(3*j-1)                                     rotd-392
      if (.not.lq(j,4)) sr=dabs(sr)                                     rotd-393
      do 5 i=1,iq2                                                      rotd-394
      c=4*i+1                                                           rotd-395
    5 p(16+j,2*i)=sr*bta(j,i)*dsqrt(c/(4.d0*pi))                        rotd-396
    6 continue                                                          rotd-397
      do 17 i=1,10                                                      rotd-398
      pp(2)=xgn(i)                                                      rotd-399
      pp(1)=1.d0                                                        rotd-400
      do 7 j=2,iq                                                       rotd-401
      c=j                                                               rotd-402
      c=1.d0/c                                                          rotd-403
    7 pp(j+1)=(2.d0-c)*pp(2)*pp(j)+(c-1.d0)*pp(j-1)                     rotd-404
      c1=1.d0-pp(2)**2                                                  rotd-405
      do 11 j=1,8                                                       rotd-406
      if (lq(j,1)) go to 11                                             rotd-407
      p(j,i)=0.d0                                                       rotd-408
      q(j,i,2)=0.d0                                                     rotd-409
      q(j,i,3)=0.d0                                                     rotd-410
      q(j,i,1)=1.d0                                                     rotd-411
      do 8 k=2,iqm,2                                                    rotd-412
      c=k                                                               rotd-413
      q(j,i,1)=q(j,i,1)+p(16+j,k)*pp(k+1)                               rotd-414
      q(j,i,2)=q(j,i,2)-c*p(16+j,k)*(pp(2)*pp(k+1)-pp(k))/c1            rotd-415
    8 q(j,i,3)=q(j,i,3)-p(16+j,k)*pp(k+1)*c*(c+1.d0)                    rotd-416
      c2=val(3*j-1)                                                     rotd-417
      if (.not.lq(j,4)) c2=-c2                                          rotd-418
      do 9 k=1,3                                                        rotd-419
    9 q(j,i,k)=-q(j,i,k)*c2                                             rotd-420
      if (lq(j,3)) go to 10                                             rotd-421
      p(j+8,i)=1.d-16                                                   rotd-422
      if (lq(j,4)) go to 11                                             rotd-423
      if (q(j,i,1).gt.-36.*val(3*j)) p(j+8,i)=dexp(q(j,i,1)/val(3*j))   rotd-424
      go to 11                                                          rotd-425
   10 p(j,i)=-q(j,i,1)                                                  rotd-426
      dd(j-6)=dd(j-6)+pgn(i)*(p(j,i)**3)                                rotd-427
   11 continue                                                          rotd-428
      do 16 ij=1,iq1                                                    rotd-429
      k=1                                                               rotd-430
      if (ij.gt.iny) k=ivz(1,ij-iny)/1000                               rotd-431
      c=pp(k)                                                           rotd-432
      if ((iv(ij).eq.1).or.(ij.le.iny)) go to 16                        rotd-433
      kb=mod(ivz(1,ij-iny),1000)                                        rotd-434
      kl=nbta(9,kb)                                                     rotd-435
      kk=nbta(10,kb)                                                    rotd-436
      if (ivz(6,ij-iny).lt.0) kl=mod(kl,2)                              rotd-437
      if (kk.ne.0) go to 12                                             rotd-438
      c=c*pp(kl+1)*dsqrt(2.d0*kl+1.d0)                                  rotd-439
      go to 16                                                          rotd-440
c computation of y(k-1,kk) * y(kl,kk)                                   rotd-441
   12 c=sqrt(2.d0*kl+1.d0)                                              rotd-442
      do 13 kb=1,kk                                                     rotd-443
   13 c=c*c1*(2*kb-1)**2/dsqrt((kl+kb)*(k-kb)*(kl-kb+1.d0)*(k+kb-1.d0)) rotd-444
      kz=k-1-kk                                                         rotd-445
      do 15 j=1,2                                                       rotd-446
      if (kz.le.0) go to 15                                             rotd-447
      d=0.d0                                                            rotd-448
      do 14 kb=1,kz                                                     rotd-449
      c2=d                                                              rotd-450
      d=c                                                               rotd-451
   14 c=c2+(d*pp(2)-c2)*(2.d0*(kk+kb)-1.d0)/kb                          rotd-452
   15 kz=kl-kk                                                          rotd-453
   16 p(ij+27,i)=pgn(i)*c*dsqrt(2.d0*k-1.d0)                            rotd-454
   17 continue                                                          rotd-455
      return                                                            rotd-456
c *** asymmetric rotational model ***************                       rotd-457
   18 idt=36                                                            rotd-458
      do 21 j=1,8                                                       rotd-459
      do 20 i=1,iqm                                                     rotd-460
      if (nk(i+1).eq.0) go to 19                                        rotd-461
      p(16+j,i+1)=p(16+j,i)*dsin(pi*bta(j,i)/180.d0)                    rotd-462
      p(16+j,i)=p(16+j,i)*dcos(pi*bta(j,i)/180.d0)                      rotd-463
      go to 20                                                          rotd-464
   19 c=2*nl(i+1)+1                                                     rotd-465
      p(16+j,i+1)=bta(j,i)*dsqrt(c/(4.d0*pi))                           rotd-466
   20 continue                                                          rotd-467
   21 continue                                                          rotd-468
      sr=1.d0                                                           rotd-469
      do 23 j=1,8                                                       rotd-470
      if (lq(j,1)) go to 23                                             rotd-471
      if (lo(6)) sr=1.d0/val(3*j-1)                                     rotd-472
      if (.not.lq(j,4)) sr=dabs(sr)                                     rotd-473
      do 22 i=1,iqm                                                     rotd-474
      if (nk(i+1).ne.0) p(16+j,i+1)=p(16+j,i+1)*1.414213562d0           rotd-475
   22 p(16+j,i+1)=sr*p(16+j,i+1)                                        rotd-476
   23 continue                                                          rotd-477
      i=0                                                               rotd-478
      do 29 l=1,8                                                       rotd-479
      c=4*max0(1,l-1)                                                   rotd-480
      phi=pi/c                                                          rotd-481
      do 28 m=1,l                                                       rotd-482
      i=i+1                                                             rotd-483
      do 24 j=1,iq1                                                     rotd-484
      k=1                                                               rotd-485
      if (j.gt.iny) k=ivz(1,j-iny)/1000                                 rotd-486
   24 p(j+27,i)=poids(i,k)                                              rotd-487
      do 27 j=1,8                                                       rotd-488
      if (lq(j,1)) go to 27                                             rotd-489
      p(j,i)=0.d0                                                       rotd-490
      r=1.d0                                                            rotd-491
      do 25 k=1,iqm                                                     rotd-492
      c=nk(k+1)*nk(i)                                                   rotd-493
   25 r=r+p(16+j,k+1)*rb(k+1,l)*dcos(c*phi)                             rotd-494
      q(j,i,1)=-r*val(3*j-1)                                            rotd-495
      if (lq(j,3)) go to 26                                             rotd-496
      p(j+8,i)=1.d-16                                                   rotd-497
      if (lq(j,4)) go to 27                                             rotd-498
      q(j,i,1)=-q(j,i,1)                                                rotd-499
      if (q(j,i,1).gt.-36.*val(3*j)) p(j+8,i)=dexp(q(j,i,1)/val(3*j))   rotd-500
      go to 27                                                          rotd-501
   26 p(j,i)=r*abs(val(3*j-1))                                          rotd-502
      dd(j-6)=dd(j-6)+poids(i,1)*(p(j,i)**3)                            rotd-503
   27 continue                                                          rotd-504
   28 continue                                                          rotd-505
   29 continue                                                          rotd-506
      return                                                            rotd-507
      end                                                               rotd-508
c 31/08/94  ibm version                                         ecis94  rotz-000
      subroutine rotz(vr,xgn,r,q,val,j,iv,b,p,id1,iq1,lo)               rotz-001
c deformation of the schroedinger equation which is equivalent to the   rotz-002
c dirac equation only for elastic scattering.                           rotz-003
c     no asymmetric rotational model                                    rotz-004
c     no diffuseness of coulomb charge and no coulomb deformation       rotz-005
c     no vibrational band in rotational model                           rotz-006
c     only first order vibrational model                                rotz-007
c input variables: vr(i,j): potential for i=1, -1rst derivative for i=5 rotz-008
c                           and second derivative for i=6               rotz-009
c                  xgn:     abscissae for legendre integration          rotz-010
c                  r:       radius                                      rotz-011
c                  q(i,j,k):derivatives dr/dtheta for k=2 and 3         rotz-012
c                  val:     optical model                               rotz-013
c                  j:       point of legendre angular integral          rotz-014
c                  iv:      number of phonons plus one                  rotz-015
c                  b:       deformations                                rotz-016
c                  p(i,j):  previous results for i=17 to 26 and weights rotz-017
c                           for i=28 and up in the rotational model     rotz-018
c                  id1:     first dimension of p                        rotz-019
c                  iq1:     number of transition form factors plus 3    rotz-020
c                  lo:      logical controls                            rotz-021
c output variables:p(i,j)   for i=17 to 26, potential for j=1 and       rotz-022
c                           transition form factors for j=4 to iq1.     rotz-023
c***********************************************************************rotz-024
      implicit real*8 (a-h,o-z)                                         rotz-025
      logical lo(250)                                                   rotz-026
      real*4 val(1)                                                     rotz-027
      dimension vr(6,10),q(8,12,3),xgn(10),b(10,1),p(id1,1),iv(1)       rotz-028
      common /dblpr/ chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn              rotz-029
      do 2 i=7,8                                                        rotz-030
      if (r.gt.val(3*i-1)) go to 1                                      rotz-031
      vr(1,i)=ccz*val(3*i-2)*(1.5-0.5*(r*r)/val(3*i-1)**2)/val(3*i-1)   rotz-032
      vr(6,i)=-ccz*val(3*i-2)/val(3*i-1)**3                             rotz-033
      vr(5,i)=-vr(6,i)*r                                                rotz-034
      go to 2                                                           rotz-035
    1 vr(1,i)=ccz*val(3*i-2)/r                                          rotz-036
      vr(5,i)=vr(1,i)/r                                                 rotz-037
      vr(6,i)=2.*vr(5,i)/r                                              rotz-038
    2 continue                                                          rotz-039
c computation of d(r) and inverse                                       rotz-040
      c1=xe+xm+vr(1,1)-vr(1,3)-vr(1,7)                                  rotz-041
      c2=vr(1,2)-vr(1,4)                                                rotz-042
      dd=c1**2+c2**2                                                    rotz-043
      dr=c1/dd                                                          rotz-044
      di=-c2/dd                                                         rotz-045
      c3=xe-xm-vr(1,1)-vr(1,3)-vr(1,7)                                  rotz-046
      c4=-vr(1,2)-vr(1,4)                                               rotz-047
      c5=(c1*c3-c2*c4-xe**2+xm**2)/(2.*xm)                              rotz-048
      c6=(c1*c4+c2*c3)/(2.*xm)                                          rotz-049
      d1=vr(5,3)-vr(5,1)+vr(5,7)                                        rotz-050
      d2=vr(5,4)-vr(5,2)                                                rotz-051
      cr=d1*dr-d2*di+(vr(5,5)+vr(5,8))/xm                               rotz-052
      ci=d2*dr+d1*di+vr(5,6)/xm                                         rotz-053
      cc=vr(1,7)*xe/xm                                                  rotz-054
      br=vr(6,1)-vr(6,7)-vr(6,3)                                        rotz-055
      bi=vr(6,2)-vr(6,4)                                                rotz-056
c square of gradient  and laplacian     radial term                     rotz-057
      er=br*dr-bi*di+(vr(5,5)+vr(5,8))/xm*(cr+cr-(vr(5,5)+vr(5,8))/xm)-vrotz-058
     1r(5,6)/xm*(ci+ci-vr(5,6)/xm)-(vr(6,5)+vr(6,8))/xm+2.*cr/r         rotz-059
      ei=br*di+bi*dr+(vr(5,5)+vr(5,8))/xm*(ci+ci-vr(5,6)/xm)+vr(5,6)/xm*rotz-060
     1(cr+cr-(vr(5,5)+vr(5,8))/xm)-vr(6,6)/xm+2.*ci/r                   rotz-061
      c5=c5-(.75*(cr**2-ci**2)-.5*er)*xn                                rotz-062
      c6=c6-(1.5*cr*ci-.5*ei)*xn                                        rotz-063
      if (lo(101)) go to 5                                              rotz-064
c rotational model                                                      rotz-065
      c=1.-xgn(j)**2                                                    rotz-066
      do 3 i=1,8                                                        rotz-067
      vr(4,i)=(vr(6,i)*q(i,j,2)**2*c+vr(5,i)*q(i,j,3))/r**2             rotz-068
    3 vr(3,i)=vr(5,i)*q(i,j,2)/r                                        rotz-069
c square of gradient is d/dr.d/dr + 1/r**2 d/dth.d/dth                  rotz-070
      c3=vr(3,1)-vr(3,3)-vr(3,7)                                        rotz-071
      c4=vr(3,2)-vr(3,4)                                                rotz-072
      c7=c3*dr-c4*di                                                    rotz-073
      c8=c3*di+c4*dr                                                    rotz-074
      c3=(vr(3,5)+vr(3,8))/xm                                           rotz-075
      c4=vr(3,6)/xm                                                     rotz-076
      c5=c5-(.75*(c7**2-c8**2)+.5*(c7*c3-c8*c4)+.75*(c3**2-c4**2))*c*xn rotz-077
      c6=c6-(1.5*c7*c8+.5*(c7*c4+c8*c3)+1.5*c3*c4)*c*xn                 rotz-078
c laplacian is d**2/dr**2 + 2/r d/dr + 1/r**2 (d**2/dth**2+d/dth/tg )   rotz-079
      c3=vr(4,1)-vr(4,3)-vr(4,7)                                        rotz-080
      c4=vr(4,2)-vr(4,4)                                                rotz-081
      c5=c5+.5*(c3*dr-c4*di+(vr(4,5)+vr(4,8))/xm)*xn                    rotz-082
      c6=c6+.5*(c4*dr+c3*di+vr(4,6)/xm)*xn                              rotz-083
c c5 + i c6   central term                                              rotz-084
c cr + i ci   spin-orbit term                                           rotz-085
c dr + i di   1/denominator                                             rotz-086
      p(17,1)=p(17,1)+(c5+cc)*p(28,j)                                   rotz-087
      p(18,1)=p(18,1)+c6*p(28,j)                                        rotz-088
      p(21,1)=p(21,1)+.5*xn*(cr-vr(5,8)/xm)*p(28,j)/r                   rotz-089
      p(22,1)=p(22,1)+.5*xn*ci*p(28,j)/r                                rotz-090
      p(23,1)=p(23,1)+cc*p(28,j)                                        rotz-091
      p(24,1)=p(24,1)+vr(5,8)/r*p(28,j)                                 rotz-092
      if (iq1.lt.4) return                                              rotz-093
c logarithm of d(r) c9 + i c0                                           rotz-094
      c9=.5*dlog(c1**2+c2**2)-(vr(1,5)+vr(1,8))/xm                      rotz-095
      c0=datan2(c2,c1)-vr(1,6)/xm                                       rotz-096
      do 4 i=4,iq1                                                      rotz-097
      if (iv(i).gt.1) go to 7                                           rotz-098
      p(17,i)=p(17,i)+(c5+cc)*p(i+27,j)                                 rotz-099
      p(18,i)=p(18,i)+c6*p(i+27,j)                                      rotz-100
      p(21,i)=p(21,i)+.5*xn*(cr-vr(5,8)/xm)*p(i+27,j)/r                 rotz-101
      p(22,i)=p(22,i)+.5*xn*ci*p(i+27,j)/r                              rotz-102
      p(23,i)=p(23,1)+cc*p(i+27,j)                                      rotz-103
      p(24,i)=p(24,1)+vr(5,8)/r*p(i+27,j)                               rotz-104
      p(25,i)=p(25,i)-.5*xn*c9*p(i+27,j)/r**2                           rotz-105
    4 p(26,i)=p(26,i)-.5*xn*c0*p(i+27,j)/r**2                           rotz-106
      return                                                            rotz-107
c computation of zeroth order                                           rotz-108
    5 p(17,1)=c5+cc                                                     rotz-109
      p(18,1)=c6                                                        rotz-110
      p(21,1)=.5*(cr-vr(5,8)/xm)*xn/r                                   rotz-111
      p(22,1)=.5*ci*xn/r                                                rotz-112
      p(23,1)=cc                                                        rotz-113
      p(24,1)=vr(5,8)/r                                                 rotz-114
      if (iq1.lt.4) return                                              rotz-115
      do 6 i=4,iq1                                                      rotz-116
c computation of first order                                            rotz-117
      if (iv(i).ne.2) go to 8                                           rotz-118
      c1r=vr(5,1)*b(1,i)-vr(5,3)*b(3,i)                                 rotz-119
      c2r=vr(5,2)*b(2,i)-vr(5,4)*b(4,i)                                 rotz-120
      drr=-(dr*dr-di*di)*c1r+2.*dr*di*c2r                               rotz-121
      dir=-(dr*dr-di*di)*c2r-2.*dr*di*c1r                               rotz-122
      c3r=-vr(5,1)*b(1,i)-vr(5,3)*b(3,i)                                rotz-123
      c4r=-vr(5,2)*b(2,i)-vr(5,4)*b(4,i)                                rotz-124
      c5r=(c1r*c3-c2r*c4+c1*c3r-c2*c4r)/(2.*xm)                         rotz-125
      c6r=(c1r*c4+c2r*c3+c1*c4r+c2*c3r)/(2.*xm)                         rotz-126
      d1r=vr(6,3)*b(3,i)-vr(6,1)*b(1,i)                                 rotz-127
      d2r=vr(6,4)*b(4,i)-vr(6,2)*b(2,i)                                 rotz-128
      crr=d1r*dr-d2r*di+d1*drr-d2*dir+vr(6,5)*b(5,i)/xm                 rotz-129
      cir=d2r*dr+d1r*di+d2*drr+d1*dir+vr(6,6)*b(6,i)/xm                 rotz-130
      err=br*drr-bi*dir+(vr(5,5)+vr(5,8))/xm*(crr+crr-vr(6,5)*b(5,i)/xm)rotz-131
     1-vr(5,6)/xm*(cir+cir-vr(6,6)*b(6,i)/xm)+vr(6,5)*b(5,i)/xm*(cr+cr-(rotz-132
     2vr(5,5)+vr(5,8))/xm)-vr(6,6)*b(6,i)/xm*(ci+ci-vr(5,6)/xm)+2.*crr/rrotz-133
      eir=br*dir+bi*drr+(vr(5,5)+vr(5,8))/xm*(cir+cir-vr(6,6)*b(6,i)/xm)rotz-134
     1+vr(5,6)/xm*(crr+crr-vr(6,5)*b(5,i)/xm)+vr(6,5)*b(5,i)/xm*(ci+ci-vrotz-135
     2r(5,6)/xm)+vr(6,6)*b(6,i)/xm*(cr+cr-vr(6,5)/xm)+2.*cir/r          rotz-136
      p(17,i)=c5r-(1.5*(cr*crr-ci*cir)-.5*err)*xn                       rotz-137
      p(18,i)=c6r-(1.5*(crr*ci+cr*cir)-.5*eir)*xn                       rotz-138
      p(21,i)=.5*crr*xn/r                                               rotz-139
      p(22,i)=.5*cir*xn/r                                               rotz-140
      p(23,i)=0.                                                        rotz-141
      p(24,i)=0.                                                        rotz-142
      p(25,i)=-.5*xn*(c1r*dr-c2r*di-vr(5,5)*b(5,i)/xm)/r**2             rotz-143
    6 p(26,i)=-.5*xn*(c1r*di+c2r*dr-vr(5,6)*b(6,i)/xm)/r**2             rotz-144
      return                                                            rotz-145
    7 write (6,1000)                                                    rotz-146
      go to 9                                                           rotz-147
    8 write (6,1001)                                                    rotz-148
    9 write (6,1002)                                                    rotz-149
      stop                                                              rotz-150
 1000 format (40h no vibrational band in rotational model)              rotz-151
 1001 format (35h only first order vibrational model)                   rotz-152
 1002 format (19h in rotz   ... stop)                                   rotz-153
      end                                                               rotz-154
c 02/11/89  ibm version                                         ecis94  copo-000
      subroutine copo(w,v,q,ism,h,l,val,vac,ccz,zt,lt,lz)               copo-001
c computes the coulomb potential of the charge distribution stored in v.copo-002
c input variables: v:   charge distribution unnormalised                copo-003
c                  h:   step size                                       copo-004
c                  ism: number of points                                copo-005
c                  l:   angular momentum, return 0 if l is negative     copo-006
c                  val: product of charges is in val(1)                 copo-007
c                  vac: parameter of charge distribution                copo-008
c                  lt:  logical  .true.  form factor already normalised copo-009
c                         .false.  normalisation stored from the centralcopo-010
c                  lz:  logical  .true. to use the normalisation stored copo-011
c                          even if l=0                                  copo-012
c output variables:w:   form factor which can be at the same place as v copo-013
c                  zt:  normalisation factor                            copo-014
c workspace: q,double precision                                         copo-015
c***********************************************************************copo-016
      double precision q(ism,2),h,rr,c,zt,zz,ccz                        copo-017
      dimension v(1),val(1),w(1)                                        copo-018
      logical lt,lz                                                     copo-019
      if (l.ge.0) go to 2                                               copo-020
      do 1 is=1,ism                                                     copo-021
    1 v(is)=0.                                                          copo-022
      return                                                            copo-023
    2 rr=0.d0                                                           copo-024
      do 3 is=1,ism                                                     copo-025
      rr=rr+h                                                           copo-026
      v(is)=v(is)*(1.+vac*rr*rr)                                        copo-027
      q(is,4)=rr**l                                                     copo-028
      q(is,3)=q(is,4)/rr                                                copo-029
      q(is,5)=q(is,4)*rr                                                copo-030
    3 q(is,1)=q(is,5)*rr                                                copo-031
      v(ism)=0.                                                         copo-032
      v(ism-1)=0.                                                       copo-033
      q(1,1)=q(1,1)*v(1)                                                copo-034
      q(ism,2)=0.d0                                                     copo-035
      do 4 is=2,ism                                                     copo-036
      js=ism+1-is                                                       copo-037
      q(is,1)=q(is-1,1)+q(is,1)*v(is)                                   copo-038
    4 q(js,2)=q(js+1,2)+v(js+1)/q(js+1,3)                               copo-039
      c=2*l+1                                                           copo-040
      zz=1.d0/c                                                         copo-041
      if (lt) go to 6                                                   copo-042
      if (l.ne.0.or.lz) go to 5                                         copo-043
      zt=ccz*val(1)/q(ism,1)                                            copo-044
    5 zz=zt*zz                                                          copo-045
    6 c=c*h/12.d0                                                       copo-046
      do 7 is=1,ism                                                     copo-047
    7 w(is)=(q(is,1)/q(is,5)+q(is,2)*q(is,4)+c*v(is))*zz                copo-048
      return                                                            copo-049
      end                                                               copo-050
c 30/11/95  ibm version                                         ecis95  stdp-000
      subroutine stdp(v,ivz,ism,va,nva,nx,idx,x,wv,idmt,pgn,xgn,npp,izz,stdp-001
     1p,aconv,lo)                                                       stdp-002
c computes form factors independently of models                         stdp-003
c input : ivz:     table of form factors  (see redm)                    stdp-004
c         ism:     number of integration steps                          stdp-005
c         va,nva:  for optical model parameters to use here             stdp-006
c         nx:      length of working space                              stdp-007
c         wv:      step size in wv(11,*)                                stdp-008
c         idmt:    length of total working field                        stdp-009
c         npp:     number of optical potentials                         stdp-010
c         pgn,xgn: weights and abscissae of gauss-legendre integration  stdp-011
c         aconv:   value below which the folding is neglected           stdp-012
c         lo:      logical controls                                     stdp-013
c output: v(ism,1) elastic and inelastic form factors in the sequence   stdp-014
c                  central-real, spin-orbit-real, transition real,      stdp-015
c                  transition spin-orbit-real, imaginary potentials     stdp-016
c                  followed by coulomb, coulomb transition potentials.  stdp-017
c         idx:     length of working field used                         stdp-018
c working space: x(3,i) to compute bound functions, fold coulomb poten- stdp-019
c                  tial and compute rotational form factors and bessel  stdp-020
c                  functions.                                           stdp-021
c         izz,p    for folding                                          stdp-022
c***********************************************************************stdp-023
      logical lo(250),lt(9)                                             stdp-024
      double precision vr(5,2),vs(4),sep,xgn(10),pgn(10),hh,rr,a1,a2,a3,stdp-025
     1a4,a5,a6,an,y(3),pis2,wv(11,1),x(3,22),chi2,chi2m,cm,ck,chb,cmb,ccstdp-026
     2z,xe,xm,xn,zb(77)                                                 stdp-027
      dimension va(3),nva(3),v(ism,1),ivz(7,1),p(1),izz(4,1),nij(3),itz(stdp-028
     19)                                                                stdp-029
      common /poten/ im,nv,mv,invt,inls,invc,invd,intc,imax,it(16),itxm stdp-030
      common /dblpr/ chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn              stdp-031
      equivalence (it(1),it1),(it(2),it2),(it(3),it3),(it(4),it4),(it(5)stdp-032
     1,it5),(it(6),it6),(it(7),it7),(it(8),it8),(it(9),it9),(it(10),it0)stdp-033
     2,(it(11),ita),(it(12),itb),(it(13),itc),(it(14),itd),(it(15),ite),stdp-034
     3(it(16),itf)                                                      stdp-035
      data nij /1,24,11/                                                stdp-036
      data pis2 /1.5707963267949/                                       stdp-037
      data itz /6,6,6,6,7,9,6,7,9/                                      stdp-038
      data zb /4.49340945790906,7.72525183693771,5.76345919689455,9.0950stdp-039
     11133047635,12.3229409705666,6.98793200050052,10.4171185473794,13.6stdp-040
     2980231532492,16.9236212852138,8.18256145257124,11.7049071545704,15stdp-041
     3.0396647076165,18.3012559595420,21.5254177333999,9.35581211104275,stdp-042
     412.9665301727743,16.3547096393505,19.6531521018212,22.904550647903stdp-043
     57,26.1277501372255,10.5128354080940,14.2073924588425,17.6479748701stdp-044
     6659,20.9834630689448,24.2627680423970,27.5078683649043,30.73038073stdp-045
     716466,11.6570321925164,15.4312892102684,18.9229991985461,22.295348stdp-046
     80191308,25.6028559538106,28.8703733470427,32.1111962396826,35.3331stdp-047
     9941827165,12.7907817119721,16.6410028815122,20.1824707649492,23.59stdp-048
     a12748179830,26.9270407788180,30.2172627093614,33.4768008195015,36.stdp-049
     b7145291272447,39.9361278108677,13.9158226105049,17.8386431992053,2stdp-050
     c1.4284869721154,24.8732139238751,28.2371343599681,31.5501883818318stdp-051
     d,34.8286965376857,38.0824790873276,41.3178646902445,44.53914463340stdp-052
     e95,15.0334693037434,19.0258535361278,22.6627206581361,26.142767643stdp-053
     f3791,29.5346341078439,32.8705345976875,36.1681571359112,39.4382144stdp-054
     g800081,42.6876512846611,45.9212017638356,49.1422214247461,16.14474stdp-055
     h29423013,20.2039426328117,23.8865307559684,27.4012592588663,30.820stdp-056
     i7940864510,34.1794746664832,37.4962736357858,40.7827470981251,44.0stdp-057
     j464252109438,47.2924656052694,50.5245397255712,53.7453428657930/  stdp-058
c meaning of internal logical lt:   lt(1) spin-orbit transition (schroe)stdp-059
c lt(2) spin-orbit potential derivative                                 stdp-060
c lt(3) form factor given by points or bound state                      stdp-061
c lt(4) computation of a coulomb potential from the charge density      stdp-062
c lt(5) zero diffuseness coulomb    lt(6) surface potential             stdp-063
c lt(7) first or second passage in woods-saxon/bessel loop              stdp-064
c lt(8) woods-saxon form factor     lt(9) not symmetric                 stdp-065
      idx=0                                                             stdp-066
      hm=1000.                                                          stdp-067
      nfo=0                                                             stdp-068
      n=4*itxm                                                          stdp-069
      if (lo(100)) n=n-4*it(7)                                          stdp-070
      do 1 i=1,n                                                        stdp-071
    1 izz(i,1)=0                                                        stdp-072
      if (intc.eq.0) go to 7                                            stdp-073
      ntt=24*npp                                                        stdp-074
      do 6 i=1,intc                                                     stdp-075
      if (lo(100)) go to 4                                              stdp-076
      do 2 j=9,12                                                       stdp-077
      if (lo(112).and.(mod(j,2).eq.0)) go to 2                          stdp-078
      k=it(j)+i                                                         stdp-079
      izz(3,k)=ivz(7,i)                                                 stdp-080
    2 continue                                                          stdp-081
      k=ivz(3,i)                                                        stdp-082
      if (k.eq.0) go to 3                                               stdp-083
      izz(3,k+it9)=ivz(7,i)                                             stdp-084
      if (lo(14)) izz(3,k+it0)=ivz(7,i)                                 stdp-085
    3 k=ivz(4,i)                                                        stdp-086
      if (k.ne.0) izz(3,k+ite)=ivz(7,i)                                 stdp-087
      k=ivz(5,i)                                                        stdp-088
      if (k.ne.0) izz(3,k+itf)=ivz(7,i)                                 stdp-089
      go to 6                                                           stdp-090
    4 do 5 j=1,11                                                       stdp-091
    5 izz(3,ntt+j)=ivz(7,i)                                             stdp-092
    6 ntt=ntt+11                                                        stdp-093
    7 nma=nva(1)                                                        stdp-094
    8 if (nma.ge.nva(2)) go to 91                                       stdp-095
      i1=nva(nma)                                                       stdp-096
      iv=nva(nma+1)                                                     stdp-097
      ity=mod(i1-1,8)+1                                                 stdp-098
      j1=(i1-1)/8                                                       stdp-099
      itx=ity                                                           stdp-100
      lt(1)=(ity-5)*(ity-6)*(ity-8).eq.0                                stdp-101
      inl=0                                                             stdp-102
      if (j1.gt.npp) itx=ity+8                                          stdp-103
      if (lo(100)) go to 9                                              stdp-104
      ji=1                                                              stdp-105
      ij=1                                                              stdp-106
      if (j1.gt.npp) j1=j1-npp                                          stdp-107
      l1=j1+it(itx)                                                     stdp-108
      if ((itx.eq.13).or.(itx.eq.14)) inl=inls                          stdp-109
      if (itx.eq.16) inl=invd                                           stdp-110
      if (inl.ne.0) ij=2                                                stdp-111
      go to 12                                                          stdp-112
    9 if (j1.le.npp) go to 10                                           stdp-113
      ji=3                                                              stdp-114
      if (lt(1)) inl=4                                                  stdp-115
      if (itx.eq.16) inl=3                                              stdp-116
      l1=24*npp+11*(j1-npp-1)+ity                                       stdp-117
      go to 11                                                          stdp-118
   10 inl=8                                                             stdp-119
      ji=2                                                              stdp-120
      l1=ity+24*(j1-1)                                                  stdp-121
   11 ij=1+inl/3                                                        stdp-122
   12 if (iv.ne.16) go to 15                                            stdp-123
c form factor copied                                                    stdp-124
      l3=0                                                              stdp-125
      l2=l1+nij(ji)*(nva(nma+3)-i1)/8                                   stdp-126
      do 14 j=1,ij                                                      stdp-127
      do 13 is=1,ism                                                    stdp-128
   13 v(is,l1+l3)=v(is,l2+l3)*va(nma+5)                                 stdp-129
   14 l3=l3+inl                                                         stdp-130
      izz(1,l1)=-nva(nma+2)                                             stdp-131
      izz(2,l1)=izz(2,l2)                                               stdp-132
      izz(4,l1)=izz(4,l2)                                               stdp-133
      go to 90                                                          stdp-134
   15 j=max0(iv,1)                                                      stdp-135
      nmb=nma+itz(j)                                                    stdp-136
      lt(7)=.false.                                                     stdp-137
      if ((iv.ge.7).or.(va(nmb).ne.0.)) go to 18                        stdp-138
c zero form factors and go to next                                      stdp-139
      l2=l1                                                             stdp-140
      do 17 j=1,ij                                                      stdp-141
      do 16 is=1,ism                                                    stdp-142
   16 v(is,l2)=0.                                                       stdp-143
   17 l2=l2+inl                                                         stdp-144
      go to 90                                                          stdp-145
   18 lt(1)=lt(1).and.lo(200)                                           stdp-146
      lt(2)=lt(1).and.(ity.eq.itx).and.(nva(nma+2).eq.0)                stdp-147
      lt(3)=.false.                                                     stdp-148
      lt(4)=ity.gt.6                                                    stdp-149
      lt(8)=(iv.gt.0).and.(iv.lt.7)                                     stdp-150
      k=iabs(nva(nma+4))                                                stdp-151
      hh=wv(11,k)                                                       stdp-152
      h=hh                                                              stdp-153
      hm=amin1(h,hm)                                                    stdp-154
      izz(1,l1)=-nva(nma+2)                                             stdp-155
      izz(2,l1)=itx                                                     stdp-156
      izz(4,l1)=k                                                       stdp-157
      if (nva(nma+2).eq.0) go to 19                                     stdp-158
      ij=1                                                              stdp-159
      nfo=nfo+1                                                         stdp-160
   19 l=izz(3,l1)                                                       stdp-161
      ji=ij                                                             stdp-162
      if (lt(2)) ji=ji+1                                                stdp-163
      if ((iv.gt.0).and.(iv.ne.9)) go to 22                             stdp-164
      ap=va(nmb)                                                        stdp-165
      if (iv.eq.9) go to 27                                             stdp-166
      lt(2)=lt(2).and.(nva(nma+3).ne.0)                                 stdp-167
      lt(4)=lt(4).and.((nva(nma+3).ne.0))                               stdp-168
c form factor interpolated                                              stdp-169
      call intp(-iv,ism,h*va(nmb+1),ap,va(nmb+2),v,l1)                  stdp-170
      if (ij.eq.1) go to 25                                             stdp-171
   20 l2=l1                                                             stdp-172
      do 21 j=2,ij                                                      stdp-173
      call deri(v(1,l2+inl),v(1,l2),h,ism,.true.)                       stdp-174
   21 l2=l2+inl                                                         stdp-175
      if (iv.gt.0) go to 88                                             stdp-176
      go to 25                                                          stdp-177
   22 if (lt(8)) go to 30                                               stdp-178
c bound state form factor                                               stdp-179
      k=nva(nmb-1)                                                      stdp-180
      ivm=nva(nmb-2)                                                    stdp-181
      ivx=iv                                                            stdp-182
      jv=0                                                              stdp-183
      nmc=nmb+5                                                         stdp-184
      if (k.eq.1) go to 23                                              stdp-185
      jv=ism                                                            stdp-186
      if (jv.gt.nx) call memo(idmt,idmt+jv-nx,nx,3,lo)                  stdp-187
      if (lo(216)) go to 94                                             stdp-188
      idx=idx-jv                                                        stdp-189
      call stbf(p,nva(nmb),ism,va(nmc+5),ivm,nx-jv,idx,x(jv+1,1),idmt,ivstdp-190
     1x,hh,izz(4*itxm+jv+1,1),lo)                                       stdp-191
      nmc=nmc+10*ivx-64                                                 stdp-192
      if (k.eq.3) ivx=ivx-1                                             stdp-193
      nmb=nmb+4                                                         stdp-194
   23 call stbf(v(1,l1),nva(nmb),ism,va(nmc),ivm,nx-jv,idx,x(jv+1,1),idmstdp-195
     1t,ivx,hh,izz(4*itxm+jv+1,1),lo)                                   stdp-196
      if (k.eq.1) go to 90                                              stdp-197
      idx=idx+jv                                                        stdp-198
      do 24 is=1,ism                                                    stdp-199
   24 v(is,l1)=v(is,l1)*p(is)*va(nmb+5)                                 stdp-200
      go to 90                                                          stdp-201
   25 lt(3)=.true.                                                      stdp-202
      if (.not.lt(2).or.lt(4)) go to 26                                 stdp-203
      idx=max0(idx,ism)                                                 stdp-204
      if (idx.gt.nx) call memo(idmt,idmt+idx-nx,nx,3,lo)                stdp-205
      if (lo(216)) go to 94                                             stdp-206
      call deri(p,v(1,l1),h,ism,.true.)                                 stdp-207
   26 if (lt(2).or.(nva(nma+3).ne.0)) go to 47                          stdp-208
      if (ij.eq.1) go to 90                                             stdp-209
      go to 88                                                          stdp-210
c bessel expansion                                                      stdp-211
   27 l2x=nva(nma+5)                                                    stdp-212
      ll=nva(nma+6)                                                     stdp-213
      lj=ll+ji+nva(nma+7)                                               stdp-214
      nmc=nmb+1                                                         stdp-215
      idx=max0(idx,6*max0(l2x,lj))                                      stdp-216
      if (idx.gt.nx) call memo(idmt,idmt+idx-nx,nx,3,lo)                stdp-217
      if (lo(216)) go to 94                                             stdp-218
c computation of zeros of bessel functions - the l+1 zeros for l=1 to   stdp-219
c l=11 are in data zb. the others are computed with mc mahon's formula  stdp-220
c page 371, handbook of math. functions, abramovitz and stegun          stdp-221
      if (va(nmc).eq.0.) va(nmc)=ism*hh                                 stdp-222
      do 29 ii=1,l2x                                                    stdp-223
      if ((ll.ne.0).and.((ll.lt.12).and.(ii.le.ll+1))) go to 28         stdp-224
      x(1,ii)=(2*ii+ll)*pis2                                            stdp-225
      if (ll.eq.0) go to 29                                             stdp-226
      a1=2.d0*x(1,ii)                                                   stdp-227
      a2=ll*(ll+1)                                                      stdp-228
      x(1,ii)=x(1,ii)-a2*(1.d0+(7.d0*a2-6.d0+((166.d0*a2-408.d0)*a2+360.stdp-229
     1d0+(((6949.d0*a2-33252.d0)*a2+81180.d0)*a2-75600.d0)/(7.d0*a1**2))stdp-230
     2/(5.d0*a1**2))/(3.d0*a1**2))/a1                                   stdp-231
      go to 29                                                          stdp-232
   28 k=(ll*(ll+1))/2+ii-1                                              stdp-233
      x(1,ii)=zb(k)                                                     stdp-234
   29 x(1,ii)=x(1,ii)/va(nmc)                                           stdp-235
      lm=ll+1                                                           stdp-236
      lt(6)=lt(2).and.(nva(nma+3).eq.0)                                 stdp-237
      go to 47                                                          stdp-238
c woods-saxon and its derivatives to some power                         stdp-239
   30 nmc=nmb+4                                                         stdp-240
      lt(5)=((va(nmb+2).eq.0.).and.lt(4))                               stdp-241
      lt(4)=((va(nmb+2).ne.0.).and.lt(4))                               stdp-242
      lt(6)=(((ity.eq.3).or.(ity.eq.4)).and.lo(200))                    stdp-243
      lt(9)=lo(109).or.(va(nmb+1).ge.0.).or.lt(5)                       stdp-244
      if (ity.gt.6) nmc=nmc+1                                           stdp-245
      if (lt(5)) go to 31                                               stdp-246
      sep=dexp(hh/dble(va(nmb+2)))                                      stdp-247
      if (va(nmb+2).gt.0.02*h)  go to 32                                stdp-248
      write (6,1000) va(nmb+2),nma,i                                    stdp-249
      va(nmb+2)=amax1(-va(nmb+2),0.02*h)                                stdp-250
      go to 32                                                          stdp-251
   31 if (va(nmb+1).ge.h) go to 32                                      stdp-252
      write (6,1001) va(nmb+1),nma,i                                    stdp-253
      va(nmb+1)=amax1(-va(nmb+1),h)                                     stdp-254
   32 if (iv.le.4) go to 43                                             stdp-255
c initialisation of do loops for deformed potentials                    stdp-256
      iqm=nva(nma+5)                                                    stdp-257
      ix=20                                                             stdp-258
      iq=max0(l,iqm)                                                    stdp-259
      if (iv.eq.6) iq=max0(iq,nva(nma+5))                               stdp-260
      idx=max0(idx,6*iq+240)                                            stdp-261
      if (idx.gt.nx) call memo(idmt,idmt+idx-nx,nx,3,lo)                stdp-262
      if (lo(216)) go to 94                                             stdp-263
      a2=0.d0                                                           stdp-264
      a1=1.                                                             stdp-265
      if (lo(6)) a1=abs(va(nmb+1))                                      stdp-266
      do 33 i=1,iqm                                                     stdp-267
      a4=2*i+1                                                          stdp-268
   33 x(1,40+i)=va(nmc+i-1)*dsqrt(a4/(8.d0*pis2))/a1                    stdp-269
      do 42 ii=1,20                                                     stdp-270
      i=1+mod(ii-1,10)                                                  stdp-271
      x(2,22)=xgn(i)                                                    stdp-272
      if (i.ne.ii) x(2,22)=-x(2,22)                                     stdp-273
      x(2,21)=1.d0                                                      stdp-274
      do 34 j=2,iq                                                      stdp-275
      a4=j                                                              stdp-276
   34 x(2,j+21)=((2.d0*a4-1.d0)*x(2,22)*x(2,j+20)+(1.d0-a4)*x(2,j+19))/astdp-277
     14                                                                 stdp-278
      x(3,ii+20)=0.5d0*pgn(i)                                           stdp-279
      x(2,ii)=0.d0                                                      stdp-280
      a5=x(2,l+21)                                                      stdp-281
      if (iv.eq.5) go to 39                                             stdp-282
      kl=nva(nma+6)                                                     stdp-283
      if (nva(nma+7).ne.0) go to 35                                     stdp-284
      a5=a5*x(2,kl+21)*dsqrt(2.d0*kl+1.d0)                              stdp-285
      go to 39                                                          stdp-286
c computation of y(l,kk) * y(kl,kk)                                     stdp-287
   35 a5=dsqrt(2.d0*kl+1.d0)                                            stdp-288
      kk=nva(nma+7)                                                     stdp-289
      do 36 n=1,kk                                                      stdp-290
   36 a5=a5*(1.d0-xgn(i)**2)*(2*n-1)**2/dsqrt((kl+n)*(l+n)*(kl-n+1.d0)*(stdp-291
     1l-n+1.d0))                                                        stdp-292
      kz=l-kk                                                           stdp-293
      do 38 j=1,2                                                       stdp-294
      if (kz.le.0) go to 38                                             stdp-295
      a4=0.d0                                                           stdp-296
      do 37 k=1,kz                                                      stdp-297
      a3=a4                                                             stdp-298
      a4=a5                                                             stdp-299
   37 a5=a3+(a4*x(2,22)-a3)*(2.d0*(kk+k)-1.d0)/k                        stdp-300
   38 kz=kl-kk                                                          stdp-301
   39 x(3,ii)=x(3,ii+20)*a5*dsqrt(2.d0*l+1.d0)                          stdp-302
      rr=1.                                                             stdp-303
      do 40 k=1,iqm                                                     stdp-304
   40 rr=rr+x(1,40+k)*x(2,k+21)                                         stdp-305
      x(2,ii)=-rr*va(nmb+1)                                             stdp-306
      x(1,ii)=0.d0                                                      stdp-307
      x(1,20+ii)=1.d-16                                                 stdp-308
      if (lt(9)) go to 41                                               stdp-309
      x(2,ii)=-x(2,ii)                                                  stdp-310
      if (x(2,ii).gt.-36.*va(nmb+2)) x(1,20+ii)=dexp(x(2,ii)/dble(va(nmbstdp-311
     1+2)))                                                             stdp-312
   41 if (.not.lt(5)) go to 42                                          stdp-313
      x(2,ii)=dabs(x(2,ii))                                             stdp-314
      a2=a2+x(2,ii)**3*x(3,20+ii)                                       stdp-315
   42 continue                                                          stdp-316
      go to 45                                                          stdp-317
c initialisation of do loops for not deformed potentials                stdp-318
   43 iqm=0                                                             stdp-319
      ix=1                                                              stdp-320
      idx=max0(idx,126)                                                 stdp-321
      if (idx.gt.nx) call memo(idmt,idmt+idx-nx,nx,3,lo)                stdp-322
      if (lo(216)) go to 94                                             stdp-323
      x(1,1)=0.d0                                                       stdp-324
      x(2,1)=-va(nmb+1)                                                 stdp-325
      x(3,1)=1.d0                                                       stdp-326
      x(3,21)=1.d0                                                      stdp-327
      x(1,21)=1.d-16                                                    stdp-328
      if (lt(9)) go to 44                                               stdp-329
      x(2,1)=-x(2,1)                                                    stdp-330
      if (x(2,1).gt.-36.*va(nmb+2)) x(1,21)=dexp(x(2,1)/dble(va(nmb+2)))stdp-331
   44 if (.not.lt(5)) go to 45                                          stdp-332
      x(2,1)=-x(2,1)                                                    stdp-333
      a2=x(2,1)**3                                                      stdp-334
   45 iv1=1+mod(iv-1,4)                                                 stdp-335
      ap=va(nmb)                                                        stdp-336
      an=va(nmb+1)                                                      stdp-337
      if (lo(6)) an=an/abs(va(nmb+1))                                   stdp-338
      if (.not.lt(9)) an=-an                                            stdp-339
      if (iv1.gt.1) ap=ap*an/dsqrt(8.d0*pis2)                           stdp-340
      if (iv1.gt.2) ap=ap*an*0.5                                        stdp-341
      if (iv1.gt.3) ap=ap*an/3.                                         stdp-342
      if (va(nmb+3).gt.-1.) go to 46                                    stdp-343
      write (6,1002) va(nmb+3),nma                                      stdp-344
      va(nmb+3)=-.8                                                     stdp-345
   46 a1=va(nmb+3)                                                      stdp-346
      a5=l+1                                                            stdp-347
      iv2=iv1                                                           stdp-348
      iv3=iv2-1                                                         stdp-349
      iv2=iv3+ji                                                        stdp-350
      if (lt(6)) iv2=iv2+1                                              stdp-351
      if (ity.gt.6) ap=ap*ccz                                           stdp-352
      if (lt(5)) ap=ap/a2                                               stdp-353
   47 if (lt(4)) ji=1                                                   stdp-354
      rr=0.d0                                                           stdp-355
      an=0.d0                                                           stdp-356
      a6=0.d0                                                           stdp-357
      do 81 is=1,ism                                                    stdp-358
      rr=rr+h                                                           stdp-359
      if (lt(3)) go to 80                                               stdp-360
      do 48 i=1,3                                                       stdp-361
   48 y(i)=0.d0                                                         stdp-362
      if (iv.eq.9) go to 69                                             stdp-363
c integration loop                                                      stdp-364
      do 68 i=1,ix                                                      stdp-365
      if (lt(5)) go to 59                                               stdp-366
      if (x(1,i).ne.0.d0) go to 49                                      stdp-367
      x(2,i)=x(2,i)+hh                                                  stdp-368
      if (x(2,i)+50.d0*va(nmb+2).gt.0.d0) x(1,i)=dexp(x(2,i)/dble(va(nmbstdp-369
     1+2)))                                                             stdp-370
      go to 50                                                          stdp-371
   49 if (x(1,i).lt.1.d15) x(1,i)=x(1,i)*sep                            stdp-372
   50 if ((.not.lt(9)).and.x(1,i+20).gt.1.d-15) x(1,i+20)=x(1,i+20)/sep stdp-373
      j=i                                                               stdp-374
      k=1                                                               stdp-375
   51 vr(1,k)=1.d0/(1.d0+x(1,j))                                        stdp-376
      if (iv2.eq.1) go to 52                                            stdp-377
      a2=vr(1,k)/va(nmb+2)                                              stdp-378
      vr(2,k)=vr(1,k)*a2*x(1,j)                                         stdp-379
      if (iv2.gt.2) vr(3,k)=vr(2,k)*a2*(x(1,j)-1.d0)                    stdp-380
      if (iv2.gt.3) vr(4,k)=vr(2,k)*(x(1,j)**2-4.d0*x(1,j)+1.d0)*a2*a2  stdp-381
      if (iv2.gt.4) vr(5,k)=vr(3,k)*(x(1,j)**2-10.d0*x(1,j)+1.d0)*a2*a2 stdp-382
   52 if (a1.eq.0.d0) go to 53                                          stdp-383
      if (iv2.gt.4) vr(5,k)=(a1+1.d0)*(a1*(a1-1.d0)*((a1-2.d0)*vr(2,k)**stdp-384
     12+6.d0*vr(1,k)*vr(3,k))*vr(2,k)**2+a1*vr(1,k)**2*(3.d0*vr(3,k)**2+stdp-385
     24.d0*vr(2,k)*vr(4,k))+vr(1,k)**3*vr(5,k))*vr(1,k)**(a1-3.d0)      stdp-386
      if (iv2.gt.3) vr(4,k)=(a1+1.d0)*(a1*((a1-1.d0)*vr(2,k)**2+3.d0*vr(stdp-387
     11,k)*vr(3,k))*vr(2,k)+vr(1,k)**2*vr(4,k))*vr(1,k)**(a1-2.d0)      stdp-388
      if (iv2.gt.2) vr(3,k)=(a1+1.d0)*(a1*vr(2,k)**2+vr(3,k)*vr(1,k))*vrstdp-389
     1(1,k)**(a1-1.d0)                                                  stdp-390
      if (iv2.gt.1) vr(2,k)=(a1+1.d0)*vr(1,k)**a1*vr(2,k)               stdp-391
      vr(1,k)=vr(1,k)**(a1+1.d0)                                        stdp-392
   53 if (.not.lt(9)) go to 54                                          stdp-393
      if (lt(6)) vr(iv1,1)=vr(iv2,1)*4.d0*va(nmb+2)                     stdp-394
      go to 57                                                          stdp-395
   54 j=j+20                                                            stdp-396
      k=k+1                                                             stdp-397
      if (k.eq.2) go to 51                                              stdp-398
      if (lo(200).or.(ij.ne.3)) go to 55                                stdp-399
      vr(3,1)=vr(1,1)*vr(3,2)-2.d0*vr(2,1)*vr(2,2)+vr(3,1)*vr(1,2)      stdp-400
      vr(2,1)=vr(2,1)*vr(1,2)-vr(1,1)*vr(2,2)                           stdp-401
      go to 56                                                          stdp-402
   55 if (iv2.gt.4) vs(4)=vr(1,1)*vr(5,2)+2.d0*vr(2,1)*vr(4,2)-2.d0*vr(4stdp-403
     1,1)*vr(2,2)-vr(5,1)*vr(1,2)                                       stdp-404
      if (iv2.gt.3) vs(3)=vr(1,1)*vr(4,2)+vr(2,1)*vr(3,2)-vr(3,1)*vr(2,2stdp-405
     1)-vr(4,i)*vr(1,2)                                                 stdp-406
      if (iv2.gt.2) vs(2)=vr(1,1)*vr(3,2)-vr(3,1)*vr(1,2)               stdp-407
      vs(1)=vr(1,1)*vr(2,2)-vr(2,1)*vr(1,2)                             stdp-408
      if (iv2.gt.4) vr(5,1)=vr(1,1)*vr(5,2)+4.d0*vr(2,1)*vr(4,2)+6.d0*vrstdp-409
     1(3,1)*vr(3,2)+4.d0*vr(4,1)*vr(2,2)+vr(5,1)*vr(1,2)                stdp-410
      if (iv2.gt.3) vr(4,1)=vr(1,1)*vr(4,2)+3.d0*vr(2,1)*vr(3,2)+3.d0*vrstdp-411
     1(3,1)*vr(2,2)+vr(4,1)*vr(1,2)                                     stdp-412
      if (iv2.gt.2) vr(3,1)=vr(1,1)*vr(3,2)+2.d0*vr(2,1)*vr(2,2)+vr(3,1)stdp-413
     1*vr(1,2)                                                          stdp-414
      if (iv2.gt.1) vr(2,1)=vr(1,1)*vr(2,2)+vr(2,1)*vr(1,2)             stdp-415
   56 vr(1,1)=vr(1,1)*vr(1,2)                                           stdp-416
      if (lt(6)) vr(iv1,1)=rr*(4.d0*va(nmb+2)**(a1+1.d0))/va(nmb+1)*vs(istdp-417
     1v1)                                                               stdp-418
      if (lt(1)) vr(iv3+2,1)=-vs(iv3+1)                                 stdp-419
   57 if (lt(4)) a6=a6+vr(1,1)*rr**2*x(3,i+20)*(1.d0+va(nmb+4)*rr**2)   stdp-420
      do 58 j=1,ji                                                      stdp-421
   58 y(j)=y(j)+vr(iv3+j,1)*x(3,i)                                      stdp-422
      go to 68                                                          stdp-423
c deformed coulomb potential                                            stdp-424
   59 a4=x(2,i)/rr                                                      stdp-425
      if (ity.ne.itx) go to 61                                          stdp-426
      if (a4.gt.1.d0) go to 60                                          stdp-427
      y(1)=y(1)+(x(2,i)**2)*a4*x(3,i)                                   stdp-428
      y(2)=y(2)+x(2,i)*a4**2*x(3,i)                                     stdp-429
      y(3)=y(3)+2.d0*a4**3*x(3,i)                                       stdp-430
      go to 68                                                          stdp-431
   60 y(1)=y(1)+(0.5d0*x(2,i)*x(2,i)-rr*rr/6.d0)*x(3,i)*3.d0            stdp-432
      y(2)=y(2)+rr*x(3,i)                                               stdp-433
      y(3)=y(3)-x(3,i)                                                  stdp-434
      go to 68                                                          stdp-435
   61 if (a4.gt.1.d0) go to 62                                          stdp-436
      a3=(x(2,i)**2)*(a4**(l+1))*3.d0/((a5+2.d0)*(2.d0*a5-1.d0))        stdp-437
      if (iv1.gt.1) a3=a3*(a5+2.d0)/x(2,i)                              stdp-438
      if (iv1.gt.2) a3=a3*(a5+1.d0)/x(2,i)                              stdp-439
      if (iv1.gt.3) a3=a3*a5/x(2,i)                                     stdp-440
      go to 64                                                          stdp-441
   62 if (l.ne.2) go to 63                                              stdp-442
      if (iv1.eq.1) a3=rr*rr*(0.2d0+dlog(a4))*0.6d0                     stdp-443
      if (iv1.ge.2) a3=0.6d0*rr/a4                                      stdp-444
      if (iv1.ge.3) a3=-a3/x(2,i)                                       stdp-445
      if (iv1.ge.4) a3=-2.d0*a3/x(2,i)                                  stdp-446
      go to 64                                                          stdp-447
   63 if (iv1.eq.1) a3=rr*rr*(1.d0/(a5+2.d0)-1.d0/(a4**(l-2)*(2.d0*a5-1.stdp-448
     1d0)))*3.d0/(a5-3.d0)                                              stdp-449
      if (iv1.ge.2) a3=rr/a4**(l-1)*3.d0/(2.d0*a5-1.d0)                 stdp-450
      if (iv1.ge.3) a3=-a3*(a5-2.d0)/x(2,i)                             stdp-451
      if (iv1.eq.4) a3=-a3*(a5-1.d0)/x(2,i)                             stdp-452
   64 y(1)=y(1)+a3*x(3,i)                                               stdp-453
      if (ji.eq.1) go to 68                                             stdp-454
      if (a4.gt.1.d0) go to 65                                          stdp-455
      a3=-a5*a3/rr                                                      stdp-456
      go to 67                                                          stdp-457
   65 if (l.ne.2) go to 66                                              stdp-458
      if (iv2.eq.1) a3=-1.2d0*(0.3d0*rr-dlog(a4))*rr                    stdp-459
      if (iv2.ge.2) a3=2.d0*a3/rr                                       stdp-460
      go to 67                                                          stdp-461
   66 if (iv2.eq.1) a3=(2.d0/(a5+2.d0)-(a5-1.d0)/(a4**(l-2)*(2.d0*a5-1.dstdp-462
     10)))*3.d0/(a5-3.d0)*rr                                            stdp-463
      if (iv2.ne.1) a3=(a5-1.d0)*a3/rr                                  stdp-464
   67 y(2)=y(2)-a3*x(3,i)                                               stdp-465
   68 continue                                                          stdp-466
      go to 78                                                          stdp-467
c computation of bessel functions                                       stdp-468
   69 if (rr.gt.va(nmc)) go to 81                                       stdp-469
      do 77 ii=1,l2x                                                    stdp-470
      a1=rr*x(1,ii)                                                     stdp-471
      x(2,1)=dsin(a1)/a1                                                stdp-472
      if (lj.eq.1) go to 74                                             stdp-473
      k=1.+a1                                                           stdp-474
      if (k.lt.lj) go to 71                                             stdp-475
      x(2,2)=(x(2,1)-dcos(a1))/a1                                       stdp-476
      if (lj.eq.2) go to 74                                             stdp-477
      do 70 j=3,lj                                                      stdp-478
   70 x(2,j)=(2*j-3)*x(2,j-1)/a1-x(2,j-2)                               stdp-479
      go to 74                                                          stdp-480
   71 a3=lj                                                             stdp-481
      a4=dmax1(dsqrt(10.5d0*a1)-0.5d0,a3)                               stdp-482
      k=a4+3.d0+21.d0*a1/(a4+a4+1.d0)                                   stdp-483
      a2=0.d0                                                           stdp-484
   72 a2=a1/(2.d0*k+1.d0-a2*a1)                                         stdp-485
      if (k.le.lj) x(2,k+1)=a2                                          stdp-486
      k=k-1                                                             stdp-487
      if (k.ge.1) go to 72                                              stdp-488
      do 73 k=2,lj                                                      stdp-489
   73 x(2,k)=x(2,k)*x(2,k-1)                                            stdp-490
c computation of derivatives of bessel functions                        stdp-491
   74 jl=lj-1                                                           stdp-492
      do 76 j=lm,lj                                                     stdp-493
      kk=ji+j-lj                                                        stdp-494
      if (kk.ge.1) y(kk)=y(kk)+va(nmc+ii)*x(2,lm)                       stdp-495
      if (kk.eq.ji) go to 77                                            stdp-496
      a3=0.d0                                                           stdp-497
      a5=0.d0                                                           stdp-498
      do 75 k=1,jl                                                      stdp-499
      a2=(a5+1.d0)*x(2,k+1)-a5*a3                                       stdp-500
      a3=x(2,k)                                                         stdp-501
      x(2,k)=x(1,ii)*a2/(2.d0*a5+1.d0)                                  stdp-502
   75 a5=a5+1.d0                                                        stdp-503
   76 jl=jl-1                                                           stdp-504
   77 continue                                                          stdp-505
   78 l2=l1                                                             stdp-506
      do 79 j=1,ji                                                      stdp-507
      v(is,l2)=ap*y(j)                                                  stdp-508
   79 l2=l2+inl                                                         stdp-509
      go to 81                                                          stdp-510
   80 y(1)=v(is,l1)/ap                                                  stdp-511
      if (lt(2).and.(.not.lt(4))) v(is,l1)=p(is)                        stdp-512
   81 an=an+ap*y(1)*rr**(l+2)                                           stdp-513
      if (lt(7)) go to 88                                               stdp-514
      if (.not.lt(4)) go to 83                                          stdp-515
c folding of charge distribution with coulomb potential                 stdp-516
      idx=max0(idx,10*ism)                                              stdp-517
      if (idx.gt.nx) call memo(idmt,idmt+idx-nx,nx,3,lo)                stdp-518
      if (lo(216)) go to 94                                             stdp-519
      a7=0.d0                                                           stdp-520
      if (lt(8)) a7=va(nmb+4)                                           stdp-521
      call copo(v(1,l1),v(1,l1),x,ism,hh,l,ap,a7,ccz,a6,.true.,.false.) stdp-522
      if (a6.eq.0.d0) a6=dabs(v(ism,l1)*(2*l+1)*(ism*hh)**(l+1)/(ccz*va(stdp-523
     1nmb)))                                                            stdp-524
      do 82 is=1,ism                                                    stdp-525
   82 v(is,l1)=v(is,l1)/a6                                              stdp-526
   83 if (nva(nma+3).eq.0) go to 87                                     stdp-527
      an=dabs(an*hh/ap)                                                 stdp-528
      if (ity.gt.6) an=dabs(v(ism,l1)*(2*l+1)*(ism*hh)**(l+1)/(ccz*va(nmstdp-529
     1b)))                                                              stdp-530
      if (lt(2).and.(itx.eq.8).and.(nva(nma+2).eq.0).and.(va(nmb+2).eq.0stdp-531
     1.).and.lt(8)) an=an*hh*ism                                        stdp-532
      if (nva(nma+3).gt.0) go to 84                                     stdp-533
      nva(nma+3)=-nva(nma+3)                                            stdp-534
      ap=va(nmb)                                                        stdp-535
      va(nmb)=ap*an                                                     stdp-536
      write (6,1003) ap,va(nmb),itx,j1                                  stdp-537
      go to 87                                                          stdp-538
   84 l2=l1                                                             stdp-539
      do 86 j=1,ij                                                      stdp-540
      do 85 is=1,ism                                                    stdp-541
   85 v(is,l2)=v(is,l2)/an                                              stdp-542
   86 l2=l2+inl                                                         stdp-543
   87 if (.not.lt(4)) go to 88                                          stdp-544
      lt(4)=.false.                                                     stdp-545
      lt(7)=.true.                                                      stdp-546
      if (lt(2)) go to 25                                               stdp-547
      if (ij.ne.1) go to 20                                             stdp-548
   88 if (.not.lt(1).or.(nva(nma+2).ne.0)) go to 90                     stdp-549
      rr=0.d0                                                           stdp-550
      do 89 is=1,ism                                                    stdp-551
      rr=rr+h                                                           stdp-552
      a1=v(is,l1+inl)                                                   stdp-553
      v(is,l1+inl)=-v(is,l1)/rr**2                                      stdp-554
   89 v(is,l1)=a1/rr                                                    stdp-555
   90 nma=nva(2*i1-13)+1                                                stdp-556
      go to 8                                                           stdp-557
   91 if (nfo.eq.0) return                                              stdp-558
c folding                                                               stdp-559
      nnf=ism*itxm+1                                                    stdp-560
      if (lo(100)) nnf=nnf-ism*it(7)                                    stdp-561
      do 92 i=1,nnf                                                     stdp-562
   92 p(i)=0                                                            stdp-563
      n1=nva(2)                                                         stdp-564
      n2=nva(3)                                                         stdp-565
      ist=0                                                             stdp-566
      do 93 n=n1,n2,3                                                   stdp-567
      is=5+ism+2.*(abs(va(n+1))+2.*abs(va(n+2)))/hm                     stdp-568
      if (va(n)*va(n+1).eq.0.) is=ism+5                                 stdp-569
   93 ist=max0(is,ist)                                                  stdp-570
      idy=nnf+2*ist*(imax+1)                                            stdp-571
      idx=max0(idy,idx)                                                 stdp-572
      if (idx.gt.nx) call memo(idmt,idmt+idx-nx,nx,3,lo)                stdp-573
      if (lo(216)) go to 94                                             stdp-574
      n3=(n2+1-n1)/3                                                    stdp-575
      call fold(v,p,va(n1),n3,1,ism,ist,aconv,ivz,intc,p(nnf),pgn,xgn,wvstdp-576
     1,izz,lo)                                                          stdp-577
      return                                                            stdp-578
   94 write (6,1004) idx,nx                                             stdp-579
      stop                                                              stdp-580
 1000 format (24h too small diffuseness =,e15.8,47h   changed into minimstdp-581
     1um value in stdp for nma =,i5,8h and i =,i2)                      stdp-582
 1001 format (27h too small coulomb radius =,e15.8,47h   changed into mistdp-583
     1nimum value in stdp for nma =,i5,8h and i =,i2)                   stdp-584
 1002 format (9h power 1+,e15.6,25h  changed to .2 for nma =,i4)        stdp-585
 1003 format (9h strength,e15.6,25h replaced by the integral,e15.6,20h fstdp-586
     1or the form factor,i4,17h of the potential,i4)                    stdp-587
 1004 format (32h working field too small in stdp/17h field requested:,istdp-588
     110,20x,17h field available:,i10)                                  stdp-589
      end                                                               stdp-590
c 26/04/95  ibm version                                         ecis95  stbf-000
      subroutine stbf(v,ivz,ism,va,ivm,nx,idx,xx,idmt,iv,h,iex,lo)      stbf-001
c computes bound state form factors                                     stbf-002
c input : ivz:  table of quantum numbers                                stbf-003
c         ism:  number of integration steps                             stbf-004
c         va:   for optical model parameters to use here                stbf-005
c         ivm:  step factor for woods-saxon wave functions              stbf-006
c         nx:   length of working space                                 stbf-007
c         idmt: length of total working field                           stbf-008
c         lo:   logical controls                                        stbf-009
c output: v(ism):  bound state wave function                            stbf-010
c         idx:  length of working field used                            stbf-011
c working space: xx(3,i): to compute bound functions                    stbf-012
c                iex: for coulomb function, in equivalence with xx      stbf-013
c***********************************************************************stbf-014
      double precision h,rr,a1,a2,a3,a4,a5,a6,x1,x2,x3,x4,x5,xx,y1,y2,y3stbf-015
     1,y4,y5,chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn,z1,z2,z3,z4          stbf-016
      logical lo(250)                                                   stbf-017
      dimension va(11),v(1),ivz(4),xx(3,1),iex(1)                       stbf-018
      common /dblpr/ chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn              stbf-019
      l=ivz(2)                                                          stbf-020
      if (iv.eq.8) go to 7                                              stbf-021
      n=ivz(1)                                                          stbf-022
c computation of the normalisation of laguerre polynomials              stbf-023
      a1=2.256758334191d0*va(1)                                         stbf-024
      a3=l                                                              stbf-025
      if (l.eq.0) go to 2                                               stbf-026
      do 1 i=1,l                                                        stbf-027
    1 a1=a1/(i+.5d0)                                                    stbf-028
    2 if (n.eq.0) go to 4                                               stbf-029
      do 3 i=1,n                                                        stbf-030
      a2=i                                                              stbf-031
    3 a1=a1*(a2+a3+.5d0)/a2                                             stbf-032
    4 a1=dsqrt(a1)                                                      stbf-033
c computation of laguerre polynomials                                   stbf-034
      rr=0.d0                                                           stbf-035
      do 6 is=1,ism                                                     stbf-036
      rr=rr+h                                                           stbf-037
      x1=(va(1)*rr)**2                                                  stbf-038
      x3=a1*dexp(.5d0*((a3+1.d0)*dlog(x1)-x1))                          stbf-039
      if (n.eq.0) go to 6                                               stbf-040
      x2=x3                                                             stbf-041
      do  5 i=1,n                                                       stbf-042
      x2=2.d0*x2*(i-n-1)*x1/(i*(2.d0*(a3+i)+1.d0))                      stbf-043
    5 x3=x3+x2                                                          stbf-044
    6 v(is)=x3                                                          stbf-045
      return                                                            stbf-046
c bound state in woods-saxon potential                                  stbf-047
c control of storage and step size                                      stbf-048
    7 ireb=ivm                                                          stbf-049
      if (ireb.eq.0) ireb=4                                             stbf-050
      kn=ireb*ism                                                       stbf-051
      idx=max0(idx,6*kn+6)                                              stbf-052
      if (idx.gt.nx) call memo(idmt,idmt+idx-nx,nx,3,lo)                stbf-053
      if (lo(216)) go to 35                                             stbf-054
      a4=ireb                                                           stbf-055
      a4=h/a4                                                           stbf-056
      if (va(3).eq.0.) va(3)=1.                                         stbf-057
      y3=(va(2)-va(3))**0.3333333333                                    stbf-058
      a2=y3*va(6)                                                       stbf-059
      kr=a2/a4                                                          stbf-060
      y2=va(1)                                                          stbf-061
      if (y2.eq.0.) y2=0.01                                             stbf-062
      jl=ivz(4)                                                         stbf-063
      if (ivz(3).eq.0) jl=2*l                                           stbf-064
      if (lo(51)) write (6,1000) ivz,kn,ireb,kr,y2,(va(i),i=2,11)       stbf-065
      a1=a4*a4                                                          stbf-066
      y1=va(3)*(va(2)-va(3))/va(2)                                      stbf-067
      y5=ck*y1*a1                                                       stbf-068
      a5=y2*y5                                                          stbf-069
      rr=dsqrt(dabs(a5))/a4                                             stbf-070
      x5=0.5d0*ck*ccz*y1*va(4)/rr                                       stbf-071
      if (va(1).gt.0.) go to 8                                          stbf-072
c matching of unbound functions                                         stbf-073
      idx=max0(idx,10*l+10)                                             stbf-074
      if (idx.gt.nx) call memo(idmt,idmt+idx-nx,nx,3,lo)                stbf-075
      if (lo(216)) go to 35                                             stbf-076
      call fcou(l,x5,rr*a4*kn,xx(l+2,1),xx(2*l+3,1),xx(3*l+4,1),xx(4*l+5stbf-077
     1,1),iex,xx(5*l+6,1))                                              stbf-078
      z1=xx(2*l+2,1)                                                    stbf-079
      z2=xx(4*l+4,1)                                                    stbf-080
      call fcou(l,x5,rr*a4*(kn-2),xx(l+2,1),xx(2*l+3,1),xx(3*l+4,1),xx(4stbf-081
     1*l+5,1),iex,xx(5*l+6,1))                                          stbf-082
      z3=xx(2*l+2,1)                                                    stbf-083
      z4=xx(4*l+4,1)                                                    stbf-084
    8 x1=y3*va(11)                                                      stbf-085
      a3=y3*va(9)                                                       stbf-086
      y3=2.*va(8)*y5                                                    stbf-087
      y4=ivz(3)*(ivz(3)+2)-jl*(jl+2)+4*l*(l+1)                          stbf-088
      y4=.25d0*y4                                                       stbf-089
      a6=l*(l+1)                                                        stbf-090
      a6=a6*a1                                                          stbf-091
      x4=x5*2.*a1*rr                                                    stbf-092
      x3=0.                                                             stbf-093
      k=kn+1                                                            stbf-094
c computation of optical potentials                                     stbf-095
      do 10 i=1,k                                                       stbf-096
      x3=x3+a4                                                          stbf-097
      x2=dexp((x3-a3)/va(10))                                           stbf-098
      xx(2,i)=a6/(x3*x3)+y4*y3*x2/((1.d0+x2)**2*x3*va(10))+a5           stbf-099
      xx(3,i)=-1.d0/(1.d0+dexp((x3-a2)/va(7)))                          stbf-100
      if (x3.gt.x1) go to 9                                             stbf-101
      xx(2,i)=xx(2,i)+x4*(1.5d0-0.5d0*x3*x3/(x1*x1))/x1                 stbf-102
      go to 10                                                          stbf-103
    9 xx(2,i)=xx(2,i)+x4/x3                                             stbf-104
   10 continue                                                          stbf-105
      if (va(1).lt.0.) go to 15                                         stbf-106
c matching conditions                                                   stbf-107
      x1=(x3-a4)*rr                                                     stbf-108
      x3=x3*rr                                                          stbf-109
      a6=a6/a1                                                          stbf-110
      n=5.d0*(x3-x1)+1.d0                                               stbf-111
      y3=n                                                              stbf-112
      y3=(x3-x1)/y3                                                     stbf-113
      ig=1.d0/y3                                                        stbf-114
      jg=min0(100,ig)                                                   stbf-115
      a5=y3*y3                                                          stbf-116
      a3=1.d0                                                           stbf-117
      do 12 i=1,20                                                      stbf-118
      m=2*i*jg                                                          stbf-119
      a4=m                                                              stbf-120
      a4=x3+y3*a4                                                       stbf-121
      y1=dexp(y3)                                                       stbf-122
      y4=0.5d0/y3+0.5d0                                                 stbf-123
      y2=(a6/(a4*a4)+2.d0*x5/a4+1.d0)*a5                                stbf-124
      do 11 j=1,m                                                       stbf-125
      y1=(2.d0+y2/(1.d0-y2/12.d0))-1.d0/y1                              stbf-126
      a2=y2                                                             stbf-127
      a4=a4-y3                                                          stbf-128
      y2=(a6/(a4*a4)+2.d0*x5/a4+1.d0)*a5                                stbf-129
      a1=y1*(1.d0-a2/12.d0)/(1.d0-y2/12.d0)                             stbf-130
   11 y4=y4/(a1*a1)+1.d0                                                stbf-131
      if (dabs(y1-a3).lt.0.1d-4*dabs(y1-1.d0)) go to 13                 stbf-132
   12 a3=y1                                                             stbf-133
      if (lo(51)) write (6,1001)                                        stbf-134
   13 y4=(y4-0.5d0)*y3                                                  stbf-135
      if (lo(51)) write (6,1002) i,m                                    stbf-136
      x2=1.d0/y1                                                        stbf-137
      x3=1.d0                                                           stbf-138
      x4=y2                                                             stbf-139
      do 14 i=1,n                                                       stbf-140
      x1=x2                                                             stbf-141
      x2=x3                                                             stbf-142
      x3=(2.d0+x4/(1.d0-x4/12.d0))*x2-x1                                stbf-143
      a4=a4-y3                                                          stbf-144
   14 x4=(a6/(a4*a4)+2.d0*x5/a4+1.d0)*a5                                stbf-145
      a3=x3*(1.d0-y2/12.d0)/(1.d0-x4/12.d0)                             stbf-146
      go to 16                                                          stbf-147
   15 kr=k                                                              stbf-148
   16 ks=2+dsqrt(a6/12.d0)                                              stbf-149
c starting values                                                       stbf-150
      do 17 i=1,ks                                                      stbf-151
   17 xx(1,i)=0.d0                                                      stbf-152
      xx(1,ks)=1.d0                                                     stbf-153
      if (l.eq.1) xx(1,ks-1)=-.2d0                                      stbf-154
      a4=va(5)                                                          stbf-155
      ik=2*ivz(1)                                                       stbf-156
      ist=0                                                             stbf-157
      x1=0.d0                                                           stbf-158
      y1=-1.d0                                                          stbf-159
      in1=0                                                             stbf-160
      in2=0                                                             stbf-161
c search for the eigenvalue                                             stbf-162
   18 x3=x1+a4                                                          stbf-163
   19 ist=ist+1                                                         stbf-164
      in3=0                                                             stbf-165
      x4=x3*y5                                                          stbf-166
c upwards integration                                                   stbf-167
      do 20 i=ks,kr                                                     stbf-168
      x5=x4*xx(3,i-1)+xx(2,i-1)                                         stbf-169
      xx(1,i+1)=(2.d0+x5/(1.d0-x5/12.d0))*xx(1,i)-xx(1,i-1)             stbf-170
      if (xx(1,i+1)*xx(1,i).lt.0.d0) in3=in3+2                          stbf-171
   20 continue                                                          stbf-172
      if (va(1).lt.0.) go to 29                                         stbf-173
      a1=xx(1,kr)                                                       stbf-174
      a2=xx(1,kr+1)                                                     stbf-175
      xx(1,kn+2)=1.d0                                                   stbf-176
      xx(1,kn+1)=a3*(1.d0-(x4*xx(3,kn)+xx(2,kn))/12.d0)/(1.d0-(x4*xx(3,kstbf-177
     1n+1)+xx(2,kn+1))/12.d0)                                           stbf-178
c backwards integration                                                 stbf-179
      do 21 i=kr,kn                                                     stbf-180
      j=kn+kr-i                                                         stbf-181
      x5=x4*xx(3,j)+xx(2,j)                                             stbf-182
      if (xx(1,j+1)*xx(1,j+2).lt.0.d0) in3=in3+2                        stbf-183
   21 xx(1,j)=(2.d0+x5/(1.d0-x5/12.d0))*xx(1,j+1)-xx(1,j+2)             stbf-184
      y3=a1/a2-xx(1,kr)/xx(1,kr+1)                                      stbf-185
      if (y3.gt.0.d0) in3=in3+1                                         stbf-186
      if (lo(51)) write (6,1003) ist,in3,x3,y3                          stbf-187
      if (dabs(y3).le.1.d-10.or.x2.eq.x3.or.x1.eq.x3) go to 27          stbf-188
      if (in2.ne.0) go to 24                                            stbf-189
      if (in3.gt.ik) go to 22                                           stbf-190
      y1=y3                                                             stbf-191
      x1=x3                                                             stbf-192
      in1=in3                                                           stbf-193
      a4=x1                                                             stbf-194
      go to 18                                                          stbf-195
   22 if (lo(51)) write (6,1004) ik,in1,in3                             stbf-196
      x2=x3                                                             stbf-197
      in2=in3                                                           stbf-198
      y2=y3                                                             stbf-199
c interpolation of solution                                             stbf-200
   23 x3=x1+0.5d0*(x2-x1)                                               stbf-201
      if (in2.eq.in1+1) x3=(y1*x2-y2*x1)/(y1-y2)                        stbf-202
      go to 19                                                          stbf-203
   24 x4=(y1*y2*x3*(x2-x1)+y1*y3*x2*(x1-x3)+y2*y3*x1*(x3-x2))/(y1*y2*(x2stbf-204
     1-x1)+y1*y3*(x1-x3)+y2*y3*(x3-x2))                                 stbf-205
      if (in2.gt.in1+2) x4=1.d20                                        stbf-206
      if (in3.gt.ik) go to 25                                           stbf-207
      x1=x3                                                             stbf-208
      y1=y3                                                             stbf-209
      in1=in3                                                           stbf-210
      go to 26                                                          stbf-211
   25 x2=x3                                                             stbf-212
      y2=y3                                                             stbf-213
      in2=in3                                                           stbf-214
   26 if ((x1-x4)*(x4-x2).lt.0.d0) go to 23                             stbf-215
      x3=x4                                                             stbf-216
      go to 19                                                          stbf-217
   27 y3=a1/xx(1,kr)                                                    stbf-218
      k=kn+2                                                            stbf-219
      do 28 i=kr,k                                                      stbf-220
   28 xx(1,i)=y3*xx(1,i)                                                stbf-221
   29 do 30 i=1,kn                                                      stbf-222
   30 xx(1,i)=(xx(1,i)+10.d0*xx(1,i+1)+xx(1,i+2))/12.d0                 stbf-223
      if (va(1).gt.0.d0) go to 31                                       stbf-224
      x1=xx(1,kn)*z4-xx(1,kn-2)*z2                                      stbf-225
      x2=xx(1,kn-2)*z1-xx(1,kn)*z3                                      stbf-226
      x3=z1*z4-z2*z3                                                    stbf-227
      y2=datan2(x2,x1)                                                  stbf-228
      y1=(x1**2+x2**2)/x3**2                                            stbf-229
      x3=va(5)                                                          stbf-230
      go to 33                                                          stbf-231
   31 y1=0.d0                                                           stbf-232
      do 32 i=1,kn                                                      stbf-233
   32 y1=y1+xx(1,i)**2                                                  stbf-234
      y1=y1-0.5d0*xx(1,kn)**2                                           stbf-235
      y2=y4*xx(1,kn)**2/rr                                              stbf-236
      y3=ireb                                                           stbf-237
      y1=y1*h/y3+y2                                                     stbf-238
      y2=100.d0*y2/y1                                                   stbf-239
   33 y1=1.d0/dsqrt(y1)                                                 stbf-240
      is=0                                                              stbf-241
      rr=0.d0                                                           stbf-242
      do 34 i=ireb,kn,ireb                                              stbf-243
      is=is+1                                                           stbf-244
      rr=rr+h                                                           stbf-245
   34 v(is)=y1*xx(1,i)/rr                                               stbf-246
      if (lo(51)) write (6,1005) x3,y2,(is,v(is),is=1,ism)              stbf-247
      return                                                            stbf-248
   35 write (6,1006) idx,nx                                             stbf-249
      stop                                                              stbf-250
 1000 format (//45h woods-saxon potential eigenfunction with n =,i2,3x,3stbf-249
     1hl =,i3,3x,5h2*s =,i2,3x,5h2*j =,i3,3x,i4,18h steps (divided by,i3stbf-250
     2,17h) matching at the,i4,2hth/20h **** binding energy,f12.6,9h mevstbf-253
     3 ****,4x,10htotal mass,f12.6,4x,13hparticle mass,f12.6,4x,18hprodustbf-252
     4ct of charges,f8.2/39h search on depth of real potential from,f12.stbf-255
     56,20h with reduced radius,f10.6,22h fermi and diffuseness,f10.6,6hstbf-256
     6 fermi/28h spin orbit potential depth:,f12.6,12h mev radius:,f10.6stbf-255
     7,19h fermi diffuseness:,f9.6,22h fermi coulomb radius:,f10.6,6h festbf-256
     8rmi)                                                              stbf-257
 1001 format (10x,33hno convergence on matching values)                 stbf-260
 1002 format (10x,30hmatching value obtained for i=,i3,5h with,i6,7h poistbf-261
     1nts)                                                              stbf-262
 1003 format (2x,i3,5x,12h2*n (+0/1) =,i3,5x,3hv =,d20.10,5x,3hd =,d20.1stbf-263
     10)                                                                stbf-264
 1004 format (24h interpolation for 2*n =,i4,5x,7hbetween,i4,4h and,i4) stbf-265
 1005 format (//11h depth used,d20.10,4h mev,15x,30htail percentage or pstbf-266
     1hase-shift,f10.5//(6(i6,e15.6)))                                  stbf-267
 1006 format (32h working field too small in stbf/17h field requested:,istbf-268
     110,20x,17h field available:,i10)                                  stbf-269
      end                                                               stbf-270
c 05/08/89  ibm and cdc version                                 ecis94  deri-000
      subroutine deri(x,y,h,n,lt)                                       deri-001
c numerical derivation of the function y known in n points with step h  deri-002
c it needs at least 7 points and returns in x the value of -d(y)/dr     deri-003
c if lt is false, the result is divided by r.                           deri-004
c***********************************************************************deri-005
      logical lt                                                        deri-006
      dimension x(7),y(7)                                               deri-007
      n3=n-3                                                            deri-008
      if (n3.ge.4) go to 1                                              deri-009
      write (6,1000) n                                                  deri-010
      stop                                                              deri-011
    1 hh=-h*60.                                                         deri-012
      x(1)=(-147.*y(1)+360.*y(2)-450.*y(3)+400.*y(4)-225.*y(5)+72.*y(6)-deri-013
     110.*y(7))/hh                                                      deri-014
      x(2)=(-10.*y(1)-77.*y(2)+150.*y(3)-100.*y(4)+50.*y(5)-15.*y(6)+2.*deri-015
     1y(7))/hh                                                          deri-016
      x(3)=(2.*y(1)-24.*y(2)-35.*y(3)+80.*y(4)-30.*y(5)+8.*y(6)-y(7))/hhderi-017
      do 2 i=4,n3                                                       deri-018
    2 x(i)=(45.*(y(i+1)-y(i-1))-9.*(y(i+2)-y(i-2))+y(i+3)-y(i-3))/hh    deri-019
      x(n-2)=(y(n-6)-8.*y(n-5)+30.*y(n-4)-80.*y(n3)+35*y(n-2)+24.*y(n-1)deri-020
     1-2.*y(n))/hh                                                      deri-021
      x(n-1)=(-2.*y(n-6)+15.*y(n-5)-50.*y(n-4)+100.*y(n3)-150.*y(n-2)+77deri-022
     1.*y(n-1)+10.*y(n))/hh                                             deri-023
      x(n)=(10.*y(n-6)-72.*y(n-5)+225.*y(n-4)-400.*y(n3)+450.*y(n-2)-360deri-024
     1.*y(n-1)+147.*y(n))/hh                                            deri-025
      if (lt) return                                                    deri-026
      r=0.                                                              deri-027
      do 3 i=1,n                                                        deri-028
      r=r+h                                                             deri-029
    3 x(i)=x(i)/r                                                       deri-030
      return                                                            deri-031
 1000 format (5x,i5,43h points insufficient for derivation in deri//10x,deri-032
     115h ...  stop  ...)                                               deri-033
      end                                                               deri-034
c 29/10/85  ibm and cdc version                                 ecis88  intp-000
      subroutine intp(i,ism,h,g,rr,v,lx)                                intp-001
c interpolation routine for radial form factors                         intp-002
c input variables: i:   number of points where the function is given    intp-003
c                  ism: number of points where the function is needed   intp-004
c                  h:   step size                                       intp-005
c                  g:   normalisation factor                            intp-006
c                  rr(2,1): radii (j=1) and values (j=2) to interpolate intp-007
c                  lx:  address of result in v                          intp-008
c output variable: v(i,lx) for i=1 to ism                               intp-009
c***********************************************************************intp-010
      dimension rr(2,1),v(ism,1)                                        intp-011
      if (i.lt.4) go to 4                                               intp-012
      ir=1                                                              intp-013
      do 3 is=1,ism                                                     intp-014
      x0=is*h                                                           intp-015
    1 if (x0.lt.rr(1,ir+2)) go to 2                                     intp-016
      if (ir.ge.i-3) go to 2                                            intp-017
      ir=ir+1                                                           intp-018
      go to 1                                                           intp-019
    2 x1=(x0-rr(1,ir+1))*(x0-rr(1,ir+2))*(x0-rr(1,ir+3))/((rr(1,ir)-rr(1intp-020
     1,ir+1))*(rr(1,ir)-rr(1,ir+2))*(rr(1,ir)-rr(1,ir+3)))              intp-021
      x2=(x0-rr(1,ir))*(x0-rr(1,ir+2))*(x0-rr(1,ir+3))/((rr(1,ir+1)-rr(1intp-022
     1,ir))*(rr(1,ir+1)-rr(1,ir+2))*(rr(1,ir+1)-rr(1,ir+3)))            intp-023
      x3=(x0-rr(1,ir))*(x0-rr(1,ir+1))*(x0-rr(1,ir+3))/((rr(1,ir+2)-rr(1intp-024
     1,ir))*(rr(1,ir+2)-rr(1,ir+1))*(rr(1,ir+2)-rr(1,ir+3)))            intp-025
      x4=(x0-rr(1,ir))*(x0-rr(1,ir+1))*(x0-rr(1,ir+2))/((rr(1,ir+3)-rr(1intp-026
     1,ir))*(rr(1,ir+3)-rr(1,ir+1))*(rr(1,ir+3)-rr(1,ir+2)))            intp-027
    3 v(is,lx)=g*(x1*rr(2,ir)+x2*rr(2,ir+1)+x3*rr(2,ir+2)+x4*rr(2,ir+3))intp-028
      return                                                            intp-029
    4 do 5 is=1,ism                                                     intp-030
    5 v(is,lx)=0.                                                       intp-031
      return                                                            intp-032
      end                                                               intp-033
c 31/03/94  ibm version   cdc with 'c' to double precision      ecis94  fold-000
      subroutine fold(v1,v2,val,nfo,ip,ism,ist,aconv,ivz,invz,fr,pgn,xgnfold-001
     1,wv,izz,lo)                                                       fold-002
c v1 are the potentials and form factors, unfolded as input, folded as  fold-003
c output. v2 are working fields in which 0. are stored before the call. fold-004
c input variables: val(i,j),i=1,3,j=1,nfo  folding parameters           fold-005
c                  nfo:    number of sets of folding parameters         fold-006
c                  ip:     potential to be folded if lo(7)=.false.      fold-007
c                  ism:    number of points                             fold-008
c                  ist:    maximum number of steps for folding functionsfold-009
c                  aconv:  value below which the folding is neglected   fold-010
c                  ivz:    table of form factors (see redm)             fold-011
c                  invz:   number of transition form factors to fold    fold-012
c                  pgn,xgn: 20-point gauss legendre integration         fold-013
c                  wv:     masses, wave numbers, step size (see calx)   fold-014
c                  lo(i):  logical controls (see calc)                  fold-015
c working fields:  fr(i,j),i=1,ist: gaussian or saxon folding functions fold-016
c          for j=1,imt.  for yukawa or hulthen folding: h-functions for fold-017
c          j=1,imt, j-functions for j=imt+1,2*imt; these functions are  fold-018
c          multiplyed by r*r*exp(+\-r/va)                               fold-019
c          integrals with h and j-functions for j=2*imt+1,2*imt+2       fold-020
c                  izz(i,*) address of folding parameters below for i=1 fold-021
c                           type of form factor from 1 to 16 for i=2    fold-022
c                           angular momentum for i=3                    fold-023
c                           address of step size for i=4                fold-024
c                    (this part is an input with external form factors) fold-025
c folding conventions : val(*,1) real potential, val(*,2) imaginary one fold-026
c if val(1,*)=0  no folding                      val(*,3) coulomb       fold-027
c if val(3,*)=0 gaussian form factor with range val(2,*)                fold-028
c if val(2,*)=0 hulthen form factor with ranges val(1,*) and val(3,*)   fold-029
c if val(2,*)=val(3,*)=0 yukawa form factor with range val(1,*)         fold-030
c all other cases  saxon form factor with radius val(2,*) and diffuse-  fold-031
c ness val(3,*) - all form factors are normalised - val(1,*) is used    fold-032
c only for hulthen form factor                                          fold-033
c the diffuseness of a saxon form factor and the ranges of a hulthen or fold-034
c yukawa form factor are positive by taking the absolute value          fold-035
c***********************************************************************fold-036
      double precision xgn,pgn,wv                                       fold-037
      dimension v1(ism,1),v2(ism,1),fr(ist,1),val(3,3),ivz(7,1),izz(4,1)fold-038
     1,mm(3),xgn(10),pgn(10),wv(11,1)                                   fold-039
      logical lo(250)                                                   fold-040
      common /poten/ im,nv,mv,invt,inls,invc,invd,intc,imax,it(16),itxm fold-041
      data pim2 /6.2831853070e0/                                        fold-042
      ac=-alog(aconv)                                                   fold-043
      jsl=ism+1                                                         fold-044
      itxn=itxm                                                         fold-045
      if (lo(100)) itxn=itxn-it(2)                                      fold-046
      if (lo(7)) go to 9                                                fold-047
c initialisation of the table izz when potentials are not external      fold-048
      mm(1)=1                                                           fold-049
      mm(2)=2                                                           fold-050
      mm(3)=3                                                           fold-051
      if ((val(1,2).eq.val(1,1)).and.(val(2,2).eq.val(2,1)).and.(val(3,2fold-052
     1).eq.val(3,1))) mm(2)=1                                           fold-053
      if ((val(1,3).eq.val(1,2)).and.(val(2,3).eq.val(2,2)).and.(val(3,3fold-054
     1).eq.val(3,2))) mm(3)=2                                           fold-055
      if ((val(1,3).eq.val(1,1)).and.(val(2,3).eq.val(2,1)).and.(val(3,3fold-056
     1).eq.val(3,1))) mm(3)=1                                           fold-057
      nfox=max0(mm(1),mm(2),mm(3))                                      fold-058
      do 2 j=1,itxn                                                     fold-059
      do 1 i=1,3                                                        fold-060
    1 izz(i,j)=0                                                        fold-061
    2 izz(4,j)=ip                                                       fold-062
      do 3 i=1,8                                                        fold-063
      if ((i.eq.5).and.lo(201)) go to 3                                 fold-064
      if ((i.eq.6).and.lo(202)) go to 3                                 fold-065
      if ((i.eq.8).and.lo(203)) go to 3                                 fold-066
      m=mod(i+1,2)+1                                                    fold-067
      if (i.gt.6) m=3                                                   fold-068
      n=i                                                               fold-069
      if (lo(200)) n=1+it(i)                                            fold-070
      izz(1,n)=-mm(m)                                                   fold-071
      izz(2,n)=i                                                        fold-072
    3 continue                                                          fold-073
      if (invz.eq.0) go to 9                                            fold-074
      ij=it(3)-it(7)                                                    fold-075
      do 8 j=1,intc                                                     fold-076
      do 7 i=1,8                                                        fold-077
      m=mod(i+1,2)+1                                                    fold-078
      n=i+ij                                                            fold-079
      if (i.gt.6) go to 5                                               fold-080
      if (i.gt.4) go to 4                                               fold-081
      if ((m.eq.2).and.lo(112)) go to 7                                 fold-082
      if (lo(200)) n=j+it(i+8)                                          fold-083
      go to 6                                                           fold-084
    4 if (lo(108+i)) go to 7                                            fold-085
      if (lo(200)) n=ivz(3,j)+it(i+4)                                   fold-086
      go to 6                                                           fold-087
    5 if (lo(55+8*i)) go to 7                                           fold-088
      if (lo(200)) n=it(i+8)+ivz(i-3,j)                                 fold-089
      m=3                                                               fold-090
    6 izz(1,n)=-mm(m)                                                   fold-091
      izz(2,n)=i+8                                                      fold-092
      izz(3,n)=ivz(7,j)                                                 fold-093
    7 continue                                                          fold-094
    8 ij=ij+11                                                          fold-095
c classification of step sizes                                          fold-096
    9 do 11 i=2,itxn                                                    fold-097
      if (izz(1,i).eq.0) go to 11                                       fold-098
      do 10 j=2,i                                                       fold-099
      if (izz(1,j-1).ne.izz(1,i)) go to 10                              fold-100
      if (izz(4,j-1).eq.izz(4,i)) go to 10                              fold-101
      i1=izz(4,i)                                                       fold-102
      j1=izz(4,j-1)                                                     fold-103
      if (wv(11,i1).ne.wv(11,j1)) go to 10                              fold-104
      izz(4,i)=j1                                                       fold-105
      go to 11                                                          fold-106
   10 continue                                                          fold-107
   11 continue                                                          fold-108
      nfot=-nfo                                                         fold-109
c for external potentials, add 1 for dummy folding                      fold-110
      if (lo(7)) nfox=nfo+1                                             fold-111
c loop on foldings                                                      fold-112
      do 67 ii=1,nfox                                                   fold-113
      if (ii.gt.nfo) go to 57                                           fold-114
      ic=0                                                              fold-115
      do 12 j=1,3                                                       fold-116
      if (val(j,ii).ne.0.) ic=ic+2**(3-j)                               fold-117
      if (val(j,ii).ge.0.) go to 12                                     fold-118
      write (6,1000) val(j,ii),j,ii                                     fold-119
      val(j,ii)=-val(j,ii)                                              fold-120
   12 continue                                                          fold-121
      if (ic.lt.4) go to 67                                             fold-122
      ih=0                                                              fold-123
   13 imt=1                                                             fold-124
      jh=0                                                              fold-125
      kh=0                                                              fold-126
c separation of foldings with respect to the step size                  fold-127
      do 14 j=1,itxn                                                    fold-128
      if (izz(1,j)+ii.ne.0) go to 14                                    fold-129
      if (izz(4,j).lt.ih) go to 14                                      fold-130
      kh=kh+1                                                           fold-131
      if ((jh.ne.0).and.(izz(4,j).gt.ih)) go to 14                      fold-132
      jh=jh+1                                                           fold-133
      ih=izz(4,j)                                                       fold-134
      izz(1,j)=nfot-1                                                   fold-135
      imt=max0(imt,izz(3,j)+1)                                          fold-136
   14 continue                                                          fold-137
      if (jh.eq.0) go to 67                                             fold-138
      nfot=nfot-1                                                       fold-139
      h=wv(11,ih)                                                       fold-140
c computation of the strength of the folding functions                  fold-141
      cn=1.                                                             fold-142
      if (ic.gt.5) go to 15                                             fold-143
c yukawa folding                                                        fold-144
      if (val(3,ii).eq.val(1,ii)) val(3,ii)=.99*val(1,ii)               fold-145
      cn=h/(2.*pim2*(val(1,ii)**2-val(3,ii)**2))                        fold-146
      jst=ism+5                                                         fold-147
      go to 18                                                          fold-148
   15 if (ic.eq.7) go to 16                                             fold-149
c gaussian folding                                                      fold-150
      isy=1.+val(2,ii)*sqrt(ac)/h                                       fold-151
      cn=h/(0.5*pim2*sqrt(0.5*pim2)*val(2,ii)**3)                       fold-152
      go to 18                                                          fold-153
c saxon folding                                                         fold-154
   16 is=1+(val(2,ii)+10.*val(3,ii))/h                                  fold-155
      isy=1.+(val(2,ii)+2.*val(3,ii)*ac)/h                              fold-156
      cn=0.                                                             fold-157
      do 17 k=1,is                                                      fold-158
      rr=h*k                                                            fold-159
   17 cn=cn+rr*rr/(1.+exp((rr-val(2,ii))/val(3,ii)))                    fold-160
      cn=.5/(pim2*cn)                                                   fold-161
c gaussian or saxon folding                                             fold-162
   18 an=imt-1                                                          fold-163
      wr=sqrt(2.*imt+1.)                                                fold-164
      if (ic.lt.6) go to 39                                             fold-165
c do loop on the points of potentials                                   fold-166
      fs=0.                                                             fold-167
      is=0                                                              fold-168
   19 is=is+1                                                           fold-169
      jst=is+isy                                                        fold-170
      jsm=min0(ism,jst)                                                 fold-171
      r=val(2,ii)                                                       fold-172
      a=val(3,ii)                                                       fold-173
      x1=h*is                                                           fold-174
      if (jst.le.ism) go to 20                                          fold-175
      jsz=max0(ism,1+is+2*int((r+2.*a)/h))                              fold-176
      jst=min0(jst,jsz+4)                                               fold-177
      isz=jsz-1                                                         fold-178
      isx=jst-jsz                                                       fold-179
c loop on the points of the folding function for which the symmetry     fold-180
c between the two arguments is used                                     fold-181
   20 ji=is-1                                                           fold-182
   21 ji=ji+1                                                           fold-183
      a3=h*ji                                                           fold-184
      a4=2.*x1*a3                                                       fold-185
      y=x1*x1+a3*a3                                                     fold-186
      if (a.eq.0.) go to 25                                             fold-187
c saxon folding function  by a 20-points gaussian integration           fold-188
c the saxon form factor itself is the variable                          fold-189
      do 22 k=1,imt                                                     fold-190
   22 fr(ji,k)=0.                                                       fold-191
      r1=amin1(70.,(abs(x1-a3)-r)/a)                                    fold-192
      r2=amin1(70.,(x1+a3-r)/a)                                         fold-193
      e1=1./(1.+exp(r1))                                                fold-194
      e2=1./(1.+exp(r2))                                                fold-195
      em=0.5*(e1+e2)                                                    fold-196
      es=0.5*(e1-e2)                                                    fold-197
      p1=es*2.*a*pim2/a4                                                fold-198
      do 24 ij=1,10                                                     fold-199
      pp=p1*pgn(ij)                                                     fold-200
      e1=1./(em+es*xgn(ij))-1.                                          fold-201
      e2=1./(em-es*xgn(ij))-1.                                          fold-202
      u1=r+a*alog(e1)                                                   fold-203
      u2=r+a*alog(e2)                                                   fold-204
      r1=pp*u1*(1.+e1)/e1                                               fold-205
      r2=pp*u2*(1.+e2)/e2                                               fold-206
      fr(ji,1)=fr(ji,1)+r1+r2                                           fold-207
      if (imt.eq.1) go to 24                                            fold-208
      e1=(y-u1*u1)/a4                                                   fold-209
      e2=(y-u2*u2)/a4                                                   fold-210
      r3=r1*e1                                                          fold-211
      r4=r2*e2                                                          fold-212
      fr(ji,2)=fr(ji,2)+r3+r4                                           fold-213
      if (imt.eq.2) go to 24                                            fold-214
c recurrence for legendre polynomials                                   fold-215
      do 23 k=3,imt                                                     fold-216
      r5=r1                                                             fold-217
      r6=r2                                                             fold-218
      r1=r3                                                             fold-219
      r2=r4                                                             fold-220
      r3=((2.*k-3.)*r1*e1-r5*(k-2.))/(k-1.)                             fold-221
      r4=((2.*k-3.)*r2*e2-r6*(k-2.))/(k-1.)                             fold-222
   23 fr(ji,k)=fr(ji,k)+r3+r4                                           fold-223
   24 continue                                                          fold-224
      go to 32                                                          fold-225
c gaussian folding function                                             fold-226
   25 a4=a4/(r*r)                                                       fold-227
      y=y/(r*r)                                                         fold-228
      b1=exp(a4-y)                                                      fold-229
      b2=0.                                                             fold-230
      if (a4+y.lt.50.) b2=exp(-a4-y)                                    fold-231
      dn=1./a4                                                          fold-232
   26 fr(ji,1)=pim2*(b1-b2)*dn                                          fold-233
      if (imt.eq.1) go to 32                                            fold-234
      if ((a4.gt.wr.and.imt.le.5).or.imt.eq.2) go to 30                 fold-235
c downwards recurrence for small arguments                              fold-236
      q=amax1(sqrt(10.5*a4)-0.5,an)                                     fold-237
      k=int(q+3.+21.*a4/(q+q+1.))                                       fold-238
      a1=0.                                                             fold-239
   27 a1=a4/(2.*k+1.+a4*a1)                                             fold-240
      if (k.lt.imt) fr(ji,k+1)=a1                                       fold-241
      if (k.eq.1) go to 28                                              fold-242
      k=k-1                                                             fold-243
      go to 27                                                          fold-244
   28 do 29 k=2,imt                                                     fold-245
   29 fr(ji,k)=fr(ji,k)*fr(ji,k-1)                                      fold-246
      go to 32                                                          fold-247
c upwards recurrence for large arguments                                fold-248
   30 fr(ji,2)=pim2*(b1+b2)*dn-fr(ji,1)/a4                              fold-249
      if (imt.eq.2) go to 32                                            fold-250
      do 31 k=3,imt                                                     fold-251
   31 fr(ji,k)=fr(ji,k-2)-fr(ji,k-1)*(2.*k-3.)/a4                       fold-252
   32 if (ic.lt.6) go to 42                                             fold-253
      if (ji.lt.jst) go to 21                                           fold-254
      ik=1                                                              fold-255
      go to 49                                                          fold-256
   33 ik=2                                                              fold-257
      if (jst.le.ism) go to 49                                          fold-258
c form the coulomb potentials,asymptotic correction                     fold-259
c the form factors are assumed to decrease as (r)**(-l-1)               fold-260
      a1=ism                                                            fold-261
      do 35 i=jsl,jst                                                   fold-262
      a2=i                                                              fold-263
      y=a1/a2                                                           fold-264
      a4=y*(h*i)**2                                                     fold-265
      do 34 j=1,imt                                                     fold-266
      fr(i,j)=fr(i,j)*a4                                                fold-267
   34 a4=a4*y                                                           fold-268
   35 continue                                                          fold-269
c correction of the last value by sum between ism and jsz and a pade    fold-270
c approximation limited to four terms (between jsz+1 and jst)           fold-271
      do 38 i=1,imt                                                     fold-272
      a1=0.                                                             fold-273
      a2=0.                                                             fold-274
      a3=0.                                                             fold-275
      a4=0.                                                             fold-276
      y=0.                                                              fold-277
      if (jsl.gt.isz) go to 37                                          fold-278
      do 36 j=jsl,isz                                                   fold-279
   36 y=y+fr(j,i)                                                       fold-280
   37 if (isx.eq.0.or.fr(jsz,i).eq.0.) go to 38                         fold-281
      a1=-fr(jsz+1,i)/fr(jsz,i)                                         fold-282
      if (isx.eq.1.or.fr(jsz+1,i).eq.0.) go to 38                       fold-283
      b1=fr(jsz+2,i)/fr(jsz+1,i)                                        fold-284
      a2=-a1-b1                                                         fold-285
      if (isx.eq.2.or.a2.eq.0.) go to 38                                fold-286
      b2=fr(jsz+3,i)/fr(jsz+1,i)                                        fold-287
      c1=-(b1*a1+b2)/a2                                                 fold-288
      a3=b1-c1                                                          fold-289
      if (isx.eq.3.or.a3.eq.0.) go to 38                                fold-290
      a4=c1-(b2+(b2*a1+fr(jsz+4,i)/fr(jsz+1,i))/a2)/a3                  fold-291
   38 fr(jsl,i)=y+fr(jsz,i)/(1.+a1/(1.+a2/(1.+a3/(1.+a4))))             fold-292
      go to 49                                                          fold-293
c loop on the two yukawa form factors                                   fold-294
   39 fs=1.                                                             fold-295
      va=val(1,ii)                                                      fold-296
   40 if (va.eq.0.) go to 56                                            fold-297
c computation of bessel functions multiplied by r*r and exp(r/va)       fold-298
      ji=0                                                              fold-299
      b1=1.                                                             fold-300
      b2=1.                                                             fold-301
      b4=exp(-h/va)                                                     fold-302
   41 ji=ji+1                                                           fold-303
      a2=h*ji                                                           fold-304
      a4=a2/va                                                          fold-305
      b2=b2*b4**2                                                       fold-306
      fr(ji,imt+1)=fs*a2                                                fold-307
      dn=a2*va                                                          fold-308
      go to 26                                                          fold-309
c upwards recurrence for the irregular function                         fold-310
   42 fr(ji,imt+2)=fr(ji,imt+1)*(1.+1./a4)                              fold-311
      if (imt.eq.2) go to 44                                            fold-312
      do 43 k=3,imt                                                     fold-313
   43 fr(ji,k+imt)=fr(ji,k-2+imt)+fr(ji,k-1+imt)*(2*k-3)/a4             fold-314
   44 if (ji.lt.jst) go to 41                                           fold-315
c corrections for singular first derivative (yukawa form factor)        fold-316
      vr=-fs*h*pim2/6.                                                  fold-317
      ik=1                                                              fold-318
      go to 49                                                          fold-319
c correction for coulomb potentials                                     fold-320
   45 a6=ism                                                            fold-321
      do 47 i=jsl,jst                                                   fold-322
      a2=i                                                              fold-323
      y=a6/a2                                                           fold-324
      a1=y                                                              fold-325
      do 46 j=1,imt                                                     fold-326
      fr(i,j+imt)=fr(i,j+imt)*a1                                        fold-327
   46 a1=a1*y                                                           fold-328
   47 continue                                                          fold-329
c estimation of the last value by a pade of four terms                  fold-330
      do 48 i=1,imt                                                     fold-331
      a6=-fr(jsl+1,i+imt)/fr(jsl,i+imt)                                 fold-332
      if (i.eq.1) go to 48                                              fold-333
      b2=fr(jsl+2,i+imt)/fr(jsl+1,i+imt)                                fold-334
      a2=-a6-b2                                                         fold-335
      b3=fr(jsl+3,i+imt)/fr(jsl+1,i+imt)                                fold-336
      c1=-(b2*a6+b3)/a2                                                 fold-337
      a4=b2-c1                                                          fold-338
      a1=c1-(b3+(b3*a6+fr(jsl+4,i+imt)/fr(jsl+1,i+imt))/a2)/a4          fold-339
      a6=a6/(1.+b4*a2/(1.+b4*a4/(1.+b4*a1)))                            fold-340
   48 fr(jsl,i+imt)=fr(jsl,i+imt)/(1.+b4*a6)                            fold-341
      ik=2                                                              fold-342
c folding of the potentials                                             fold-343
   49 do 54 k=1,itxn                                                    fold-344
      if (izz(1,k).ne.nfot) go to 54                                    fold-345
      if ((ik.eq.1).and.mod(izz(2,k),8).gt.6) go to 54                  fold-346
      if ((ik.eq.2).and.mod(izz(2,k),8).le.6) go to 54                  fold-347
      n=izz(3,k)+1                                                      fold-348
      if (ic.lt.6) go to 51                                             fold-349
      do 50 js=is,jsm                                                   fold-350
      b1=(h*js)**2                                                      fold-351
      if (js.eq.is) go to 50                                            fold-352
      v2(js,k)=v2(js,k)+v1(is,k)*fr(js,n)*x1**2                         fold-353
   50 v2(is,k)=v2(is,k)+v1(js,k)*fr(js,n)*b1                            fold-354
      if ((ik.eq.2).and.(jst.gt.ism)) v2(is,k)=v2(is,k)+v1(ism,k)*fr(jslfold-355
     1,n)                                                               fold-356
      go to 54                                                          fold-357
   51 b2=0.                                                             fold-358
      b3=fr(jsl,n+imt)*v1(ism,k)                                        fold-359
      do 52 is=1,ism                                                    fold-360
      js=jsl-is                                                         fold-361
      fr(js,2*imt+1)=b3*b4                                              fold-362
      b2=b2*b4+fr(is,n)*v1(is,k)                                        fold-363
      b3=b3*b4+fr(js,n+imt)*v1(js,k)                                    fold-364
   52 fr(is,2*imt+2)=b2                                                 fold-365
      do 53 is=1,ism                                                    fold-366
      rr=(is*h)**2                                                      fold-367
   53 v2(is,k)=v2(is,k)+(fr(is,n)*fr(is,2*imt+1)+fr(is,n+imt)*fr(is,2*imfold-368
     1t+2))/rr+v1(is,k)*vr                                              fold-369
   54 continue                                                          fold-370
      if (ic.lt.6) go to 55                                             fold-371
      if (ik.eq.1) go to 33                                             fold-372
      if (is.lt.ism) go to 19                                           fold-373
   55 if (ik.eq.1) go to 45                                             fold-374
   56 fs=-fs                                                            fold-375
      if (fs.ge.0.) go to 58                                            fold-376
      va=val(3,ii)                                                      fold-377
      go to 40                                                          fold-378
c transfer of potentials from working space                             fold-379
   57 nfot=1                                                            fold-380
   58 do 66 j=1,itxn                                                    fold-381
      if (izz(1,j).ne.nfot) go to 66                                    fold-382
      if (nfot.eq.1) go to 60                                           fold-383
      do 59 is=1,ism                                                    fold-384
   59 v1(is,j)=cn*v2(is,j)                                              fold-385
      go to 61                                                          fold-386
c step size for dummy folding                                           fold-387
   60 ih=izz(4,j)                                                       fold-388
      h=wv(11,ih)                                                       fold-389
   61 if (lo(200).or.(izz(2,j).gt.8)) go to 62                          fold-390
      call deri(v1(1,j+8),v1(1,j),h,ism,.true.)                         fold-391
      call deri(v1(1,j+16),v1(1,j+8),h,ism,.true.)                      fold-392
      go to 66                                                          fold-393
   62 ix=mod(izz(2,j)-1,8)+1                                            fold-394
      if ((ix.lt.5).or.(ix.eq.7)) go to 66                              fold-395
      iml=0                                                             fold-396
      inl=0                                                             fold-397
      if (lo(100)) go to 63                                             fold-398
      if (izz(2,j).le.8) go to 64                                       fold-399
      inl=inls                                                          fold-400
      if (ix.eq.8) inl=invd                                             fold-401
      go to 64                                                          fold-402
   63 if (izz(2,j).le.8) go to 66                                       fold-403
      iml=4                                                             fold-404
      if (ix.eq.8) iml=3                                                fold-405
   64 call deri(v2(1,j),v1(1,j),h,ism,lo(100))                          fold-406
      do 65 is=1,ism                                                    fold-407
      if (inl.eq.0) go to 65                                            fold-408
      ay=is*h                                                           fold-409
      v1(is,j+inl)=-v1(is,j)/ay**2                                      fold-410
   65 v1(is,j+iml)=v2(is,j)                                             fold-411
   66 continue                                                          fold-412
      if (kh.ne.jh.and.nfot.ne.1) go to 13                              fold-413
   67 continue                                                          fold-414
      return                                                            fold-415
 1000 format (15h negative value,e15.5,4x,25hof folding parameter val(,ifold-416
     13,1h,,i3,1h))                                                     fold-417
      end                                                               fold-418
c 24/04/95  ibm version                                         ecis95  conu-000
      subroutine conu(w,nw,dw,tgg,tff,ipi,wv,tl,nci,scn,xd,nns,ncx1,lo) conu-001
c compound nucleus preparatory computations added by moldauer to cal1.  conu-002
c include transmission coefficients of uncoupled states                 conu-003
c         gamma transmission factors (prsl gammas and additions to cal1)conu-004
c input variables: w,nw,dw: total working array, equivalent by call     conu-005
c                  tgg:     gamma transmission coefficients             conu-006
c                  tff:     fission transmission coefficients           conu-007
c                  ipi,wv:  see calx                                    conu-008
c                  nci:     starting and final addresses for continua   conu-009
c                  scn:     descriptions of level densities             conu-010
c                  xd:     energy and spin dependence of level densitiesconu-011
c                  nns:     number of level densities                   conu-012
c                  ncx1:    first address free in dw                    conu-013
c                  lo:      logical controls                            conu-014
c in common /ncomp/nsp:     number of uncoupled levels                  conu-015
c                  nrd,nfiss: number of gamma and fission transmission  conu-016
c                           coefficients read in lect                   conu-017
c                  tg0,bn,fnug,egd,ggd:  neutron binding energy         conu-018
c                           giant dipole resonance energy and width ....conu-019
c output variables:tl:     transmission coefficients of uncoupled levelsconu-020
c in common /ncomp/egd,ggd: energy and width of giant dipole resonance  conu-021
c                  tg1,sgsq  .........                                  conu-022
c in scn:  1-sa  2-ux   3-tau  4-sg   5-e0   6-ex   7-nz  8-b           conu-023
c data pz, pn, sz and sn are the one used by the code gnash             conu-024
c***********************************************************************conu-025
      logical lo(250),lt                                                conu-026
      double precision chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn,dw(1),wv(11conu-027
     1,1),fam(10)                                                       conu-028
      dimension w(3,1),nw(1),tgg(1),tff(2,1),ipi(9,1),tl(1),pz(100),pn(1conu-029
     150),sz(100),sn(150),mc(6),cc(6),nci(2,1),scn(nns,8),xd(3,1)       conu-030
      equivalence (mc(1),cc(1))                                         conu-031
      common /decou/ nipi,nipp,nwv,nfis,ngam,njit,nniv,niph,npar,npot,nbconu-032
     1eta,nfm,ndonn,nrc,niw,nde,nise,ntx,ktgx,nry,nnvi,ncc,nam1,nfac,nfaconu-033
     2m,npad,nfg,nxg,nsm,nres,nxx,nixt,nt,idmt,ncoll,ncols,ncolt,njmax,iconu-034
     3term,npp,jdm,jit,nsec,lmd,h,bjm,eiter,aconv,conj,mcm(2),nlt,nva,nbconu-035
     4et,nbt1,lmx,lmax1,aspin,ism,iqm,iqmax,inc,ms1,ms2,nct(4),kba,kab,kconu-036
     5bc,njc,jtx,jth,ntot,nrec,ncolr,nrz,nfa,lmax2,ke,itemm,nplace,nnc,kconu-037
     6xt,nivq,nifq,nrco,nrdo,nvc1,nvc2,ncx,lmax3,ipj                    conu-038
      common /ncomp/ nsp(3),nfiss,nrd,ncont,ncoj,acn1,acn2,ncons,nie,ncoconu-039
     1i,nscn,nxd,ncolx,az(6),bz(3),tg0,bn,fnug,egd,ggd,tg1,sgsq         conu-040
      common /dblpr/ chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn              conu-041
      data pz /0.,5.05,0.,4.50,0.,3.95,0.,3.40,0.,2.90,0.,2.46,0.,2.09,0conu-042
     1.,1.62,0.,1.62,0.,1.83,0.,1.73,0.,1.35,0.,1.54,0.,1.28,0.26,0.88,0conu-043
     2.19,1.35,-.05,1.52,-.09,1.17,.04,1.24,0.29,1.09,.26,1.17,.23,1.15,conu-044
     3-.08,1.35,0.34,1.05,.28,1.27,0.,1.05,0.,1.,.09,1.2,.2,1.4,.93,1.,-conu-045
     4.2,1.19,.09,.97,0.,.92,.11,.68,.05,.68,-.22,.79,.09,.69,.01,.72,0.conu-046
     5,.4,.16,.73,0.,.46,.17,.89,0.,.79,0.,.89,0.,.81,-.06,.69,-.2,.71,-conu-047
     6.12,.72,0.,.77,2*0./                                              conu-048
      data pn /0.,5.25,0.,4.70,0.,4.15,0.,3.58,0.,3.05,0.,2.67,0.,1.8,0.conu-049
     1,1.67,0.,1.86,0.,2.04,0.,1.64,0.,1.44,0.,1.54,0.,1.3,0.,1.27,0.,1.conu-050
     229,.08,1.41,-.08,1.5,-.05,2.24,-.47,1.43,-.15,1.44,.06,1.56,.25,1.conu-051
     357,-.16,1.46,0.,.93,.01,.62,-.5,1.42,.13,1.52,-.65,.8,-.08,1.29,-.conu-052
     447,1.25,-.44,.97,.08,1.65,-.11,1.26,-.46,1.06,0.22,1.55,-.07,1.37,conu-053
     50.1,1.2,-.27,.92,-.35,1.19,0.,1.05,-.25,1.61,-.21,.9,-.21,.74,-.38conu-054
     6,.72,-.34,.92,-.26,.94,.01,.65,-.36,.83,.11,.67,.05,1.,.51,1.04,.3conu-055
     73,.68,-.27,.81,.09,.75,.17,.86,.14,1.1,-.22,.84,-.47,.48,.02,.88,.conu-056
     824,.52,.27,.41,-.05,.38,.15,.67,0.,.61,0.,.78,0.,.67,0.,.67,0.,.79conu-057
     9,0.,.6,.04,.64,-.06,.45,.05,.26,-.22,.39,0.,.39/                  conu-058
      data sz /.19,.38,.57,.75,.94,1.13,1.32,1.51,1.70,2.10,2.91,4.17,5.conu-059
     172,7.8,8.97,9.7,10.1,10.7,11.38,12.07,12.55,13.24,13.93,14.71,15.5conu-060
     23,16.37,17.36,18.6,18.7,18.01,17.87,17.08,16.6,16.75,16.5,16.35,16conu-061
     3.22,16.41,16.89,16.43,16.68,16.73,17.45,17.29,17.44,17.82,18.62,18conu-062
     4.27,19.39,19.91,19.14,18.26,17.4,16.42,15.77,14.37,13.91,13.1,13.1conu-063
     51,11.43,10.89,10.75,10.62,10.41,10.21,9.85,9.47,9.03,8.61,8.13,7.4conu-064
     66,7.48,7.2,7.13,7.06,6.78,6.64,6.64,7.68,7.89,8.41,8.49,7.88,6.3,5conu-065
     7.47,4.78,4.37,4.17,4.13,4.32,4.55,5.04,5.28,6.06,6.28,6.87,7.20,7.conu-066
     874,2*0./                                                          conu-067
      data sn /0.62,1.24,1.85,2.47,3.09,3.71,4.33,4.95,5.56,6.18,6.8,7.5conu-068
     13,7.55,7.21,7.44,8.07,8.94,9.81,10.6,11.39,12.54,13.68,14.34,14.19conu-069
     2,13.83,13.5,13.,12.13,12.6,13.26,14.13,14.92,15.52,16.38,17.16,17.conu-070
     355,18.03,17.59,19.03,18.71,18.8,18.99,18.46,18.25,17.76,17.38,16.7conu-071
     42,15.62,14.38,12.88,13.23,13.81,14.9,14.86,15.76,16.2,17.62,17.73,conu-072
     518.16,18.67,19.69,19.51,20.17,19.48,19.98,19.83,20.2,19.72,19.87,1conu-073
     69.24,18.44,17.61,17.1,16.16,15.9,15.33,14.76,13.54,12.63,10.65,10.conu-074
     71,8.89,10.25,9.79,11.39,11.72,12.43,12.96,13.43,13.37,12.96,12.11,conu-075
     811.92,11.,10.8,10.42,10.39,9.69,9.27,8.93,8.57,8.02,7.59,7.33,7.23conu-076
     9,7.05,7.42,6.75,6.6,6.38,6.36,6.49,6.25,5.85,5.48,4.53,4.3,3.39,2.conu-077
     a35,1.66,.81,0.46,-.96,-1.69,-2.53,-3.16,-1.87,-.41,.71,1.66,2.62,3conu-078
     b.22,3.76,4.1,4.46,4.83,5.09,5.18,5.17,5.1,5.01,4.97,5.09,5.03,4.93conu-079
     c,5.28,5.49,5.50,5.37,5.30/                                        conu-080
      if (lo(82)) return                                                conu-081
      bz(2)=abs(bz(2))                                                  conu-082
      bz(3)=bz(1)*bz(1)-1.                                              conu-083
      if (ncons.eq.0) go to 9                                           conu-084
      do 5 i=1,ncons                                                    conu-085
      if (i.gt.ncont) go to 1                                           conu-086
      ij=nci(1,i)                                                       conu-087
      na=wv(2,ij)+.5                                                    conu-088
      go to 2                                                           conu-089
    1 na=wv(2,1)+wv(1,1)+.5                                             conu-090
    2 nz=scn(i,7)+.1                                                    conu-091
      if (nz.le.0) nz=na/2                                              conu-092
      nn=na-nz                                                          conu-093
      aa=na                                                             conu-094
      sc=0.0                                                            conu-095
      pr=0.0                                                            conu-096
c sa given by p. j. brancazio and a. g. w. cameron, canadian journal of conu-097
c physics 47 (1969) 1029.                                               conu-098
      if (nz.gt.100.or.nn.gt.150) go to 3                               conu-099
      sc=sn(nn)-sz(nz)                                                  conu-100
      pr=pn(nn)+pz(nz)                                                  conu-101
      nd=min0(iabs(nz-2),iabs(nz-8),iabs(nz-20),iabs(nz-28),iabs(nz-50),conu-102
     1iabs(nz-82),iabs(nz-126),iabs(nn-2),iabs(nn-8),iabs(nn-20),iabs(nnconu-103
     2-28),iabs(nn-50),iabs(nn-82),iabs(nn-126),iabs(nn-184))           conu-104
    3 sa=abs((.0091*(sc-.23*nd)+.143)*aa)                               conu-105
      if (scn(i,1).eq.0.) scn(i,1)=sa                                   conu-106
      ux=2.5+150./aa                                                    conu-107
      if (scn(i,2).eq.0.) scn(i,2)=ux                                   conu-108
      tau=1.0/(sqrt(scn(i,1)/scn(i,2))-3./(2.*scn(i,2)))                conu-109
      if (tau.gt.0.) go to 4                                            conu-110
      scn(i,3)=1.0/(sqrt(sa/ux)-3./(2.*ux))                             conu-111
      write (6,1000) i,tau,scn(i,3)                                     conu-112
    4 if (scn(i,3).eq.0.) scn(i,3)=tau                                  conu-113
      sg=sqrt(0.0888*sqrt(scn(i,1)*scn(i,2))*aa**0.666666667)           conu-114
      if (scn(i,4).eq.0.) scn(i,4)=sg                                   conu-115
      ex=abs(scn(i,2)+pr)                                               conu-116
      e0=ex-scn(i,3)*(2.*sqrt(scn(i,1)*scn(i,2))+alog(scn(i,3)/(16.97056conu-117
     127*scn(i,1)**.25*scn(i,2)**1.25*scn(i,4))))                       conu-118
      if (scn(i,5).eq.0.) scn(i,5)=e0                                   conu-119
      if (scn(i,6).eq.0.) scn(i,6)=ex                                   conu-120
    5 scn(i,8)=exp(2.*sqrt(scn(i,1)*scn(i,2))-(scn(i,6)-scn(i,5))/scn(i,conu-121
     13))*scn(i,3)/(scn(i,1)**.5*scn(i,2)**1.5)                         conu-122
      write (6,1001) (i,(scn(i,j),j=1,7),i=1,ncons)                     conu-123
      if (ncont.eq.0) go to 9                                           conu-124
      ie=0                                                              conu-125
      do 8 i=1,ncont                                                    conu-126
      ij=nci(1,i)                                                       conu-127
      ji=nci(2,i)                                                       conu-128
      do 7 k=ij,ji                                                      conu-129
      ie=ie+1                                                           conu-130
      if (wv(3,1)-wv(3,k).gt.scn(i,6)) go to 6                          conu-131
      xd(1,ie)=xd(2,ie)*dexp((wv(3,1)-wv(3,k)-scn(i,5))/scn(i,3))/scn(i,conu-132
     13)                                                                conu-133
      xd(3,ie)=2.*scn(i,4)**2                                           conu-134
      go to 7                                                           conu-135
    6 exd=wv(3,1)-wv(3,k)+scn(i,2)-scn(i,6)                             conu-136
      ebyt=sqrt(scn(i,1)*exd)                                           conu-137
      xd(1,ie)=xd(2,ie)*exp(2.0*ebyt)/(ebyt*exd*scn(i,8))               conu-138
      xd(3,ie)=2.*scn(i,4)**2*sqrt(exd/scn(i,2))                        conu-139
    7 continue                                                          conu-140
    8 continue                                                          conu-141
    9 if (lo(184)) go to 15                                             conu-142
      lt=lo(44)                                                         conu-143
      lo(144)=.true.                                                    conu-144
      lo(44)=.false.                                                    conu-145
      lo(227)=.false.                                                   conu-146
      nx=nnc/2+1+2*ism                                                  conu-147
      n=2*nx+4*(ism+2)-1                                                conu-148
      if (n.gt.idmt) call memo(idmt,n,m,3,lo)                           conu-149
      if (lo(216)) go to 27                                             conu-150
      nplace=max0(nplace,n)                                             conu-151
      j=0                                                               conu-152
      nsq=nsp(3)                                                        conu-153
      do 14 i=1,nsq                                                     conu-154
      ii=i+ncols                                                        conu-155
      if (wv(3,ii).le.0.d0) go to 14                                    conu-156
      l=ipi(9,ii)+1                                                     conu-157
      if (l.le.0) go to 14                                              conu-158
      ij=ipi(2,ii)                                                      conu-159
      do 13 lj=1,l                                                      conu-160
      do 12 jl=1,ij                                                     conu-161
      jj=2*(lj+jl)-ij-3                                                 conu-162
      j=j+1                                                             conu-163
      if (jj.lt.0) go to 12                                             conu-164
      mc(1)=ii                                                          conu-165
      mc(2)=lj-1                                                        conu-166
      mc(4)=ipi(4,ii)                                                   conu-167
      cc(3)=.5*jj                                                       conu-168
      cc(5)=mc(2)*(mc(2)+1)                                             conu-169
      cc(6)=cc(3)*(cc(3)+1.)-.25*(ij*ij-1)-cc(5)                        conu-170
      call mtch(1,nw,ncols,1,wv,mc,cc,dw(nxg),nw,w,dw(ncx1),1,ism,lmax2,conu-171
     1nw(nniv),nw,dw(nfg),lmax1,lmax3,1,0,0,nw,w(nrco,1),w,fam,lmd,0.,loconu-172
     2)                                                                 conu-173
      if (lo(100)) go to 10                                             conu-174
      call insh(w(nnc,1),1,mc(4),kt,aconv,fam,dw(nx),1,ism,w(nvc1,1),nw,conu-175
     1w,nw,cc,lo,.true.)                                                conu-176
      go to 11                                                          conu-177
   10 call inrh(w(nnc,1),1,kt,aconv,fam,dw(nx),1,ism,lo,1.d0+cc(6),h,w(nconu-178
     1vc1+14*ism*(mc(4)-1),1),.true.)                                   conu-179
   11 tl(j)=4.d0*(fam(8)-fam(7)**2-fam(8)**2)                           conu-180
   12 continue                                                          conu-181
   13 continue                                                          conu-182
   14 continue                                                          conu-183
      lo(44)=lt                                                         conu-184
      lo(144)=.not.lo(44)                                               conu-185
   15 if (.not.(lo(222).or.lo(214))) return                             conu-186
c  gamma ray input                                                      conu-187
      if (lo(186)) go to 26                                             conu-188
      if (nrd.eq.0) go to 16                                            conu-189
      if (.not.lo(215)) write (6,1002) (tgg(k),k=1,nrd)                 conu-190
      go to 26                                                          conu-191
   16 xfr=0.5                                                           conu-192
      zz=nz*nn                                                          conu-193
      kgd=0                                                             conu-194
      if (egd.eq.0.) egd=163.0*sqrt(zz)/(aa**1.3333)                    conu-195
      if (egd.lt.0.) go to 17                                           conu-196
      kgd=1                                                             conu-197
      if (ggd.le.0.0) ggd=5.0                                           conu-198
   17 if (.not.lo(215)) write (6,1003) na,nz,nn,bn,fnug,scn(ncons,4)    conu-199
      atg0=abs(tg0)                                                     conu-200
      if (.not.lo(215)) write (6,1004) atg0                             conu-201
      if (kgd.eq.0.and..not.lo(215)) write (6,1005)                     conu-202
      if (kgd.eq.1.and..not.lo(215)) write (6,1006) egd,ggd,xfr         conu-203
      sgsq=2.*scn(ncons,4)**2                                           conu-204
      roj=0.0                                                           conu-205
      ecm=0.                                                            conu-206
   18 tg=0.0                                                            conu-207
      elim=bn+ecm                                                       conu-208
      elo=0.0                                                           conu-209
   19 ehi=elo+0.05                                                      conu-210
      if (ehi.ge.elim) ehi=elim                                         conu-211
      eps=(ehi+elo)/2.0                                                 conu-212
      esq=eps*eps                                                       conu-213
      tint=(ehi-elo)*eps*esq                                            conu-214
      eee=-egd*egd+esq                                                  conu-215
      if (kgd.eq.1) tint=tint*eps/(esq*ggd*ggd+eee*eee)                 conu-216
      exc=bn+ecm-eps                                                    conu-217
      if (exc.gt.scn(ncons,6)) go to 20                                 conu-218
      ebyt=(exc-scn(ncons,5))/scn(ncons,3)                              conu-219
      tint=tint*exp(ebyt)/scn(ncons,3)                                  conu-220
      go to 21                                                          conu-221
   20 exd=exc+scn(ncons,2)-scn(ncons,6)                                 conu-222
      ebyt=sqrt(scn(ncons,1)*exd)                                       conu-223
      tint=tint*exp(2.0*ebyt)/(ebyt*exd*scn(ncons,8))                   conu-224
   21 tg=tg+tint                                                        conu-225
      if (ehi.eq.elim) go to 22                                         conu-226
      elo=ehi                                                           conu-227
      go to 19                                                          conu-228
   22 if (ecm.ne.0.0) go to 25                                          conu-229
      temp=tg                                                           conu-230
      id=ipi(3,1)-1                                                     conu-231
      n1=iabs(id-1)                                                     conu-232
      n2=id+1                                                           conu-233
      do 24 i=n1,n2,2                                                   conu-234
      n3=iabs(i-2)                                                      conu-235
      n4=i+2                                                            conu-236
      do 23 j=n3,n4,2                                                   conu-237
      dex=-(j+1)*(j+1)/(sgsq*4.0)                                       conu-238
   23 roj=roj+exp(dex)*(j+1)/sgsq                                       conu-239
   24 continue                                                          conu-240
      ctg=atg0/(temp*roj)                                               conu-241
      ecm=wv(3,1)                                                       conu-242
      go to 18                                                          conu-243
   25 tg1=tg*ctg                                                        conu-244
c  fission input                                                        conu-245
   26 if (lo(85).and..not.lo(215)) write (6,1007) (tff(1,k),tff(2,k),k=1conu-246
     1,nfiss)                                                           conu-247
      return                                                            conu-248
   27 write (6,1008)                                                    conu-249
      stop                                                              conu-250
 1000 format (2x,i3,36hth density distribution, temperature,f10.5,12h reconu-251
     1placed by,f10.5)                                                  conu-252
 1001 format (41h density of states for continuum given by/(1x,i3,5h  saconu-253
     1:,e13.6,6x,3hux:,e13.6,5x,4htau:,e13.6,6x,3hsg:,e13.6/28x,3he0:,e1conu-254
     23.6,6x,3hex:,e13.6,7x,2hz:,f5.0))                                 conu-255
 1002 format (/64h  gamma transmission factors(compound ang. mom.) were conu-256
     1read in as/(8f10.6))                                              conu-257
 1003 format (/34h    gamma ray channel parameters ://5h   a=,i3,4h  z=,conu-258
     1i3,4h  n=,i3,5x,f9.3,21h mev  neutron binding,5x,f6.2,19h radiativconu-259
     2e d. of f.,5x,6hsigma=,f6.3)                                      conu-260
 1004 format (60h   normalised to slow s-wave neutron gamma widths/spaciconu-261
     1ngs =,e12.4)                                                      conu-262
 1005 format (27h   e1 strong coupling model)                           conu-263
 1006 format (25h   e1 giant resonance at ,f7.2,13h mev   width=,f7.2,4hconu-264
     1 mev,5x,18hexchange fraction=,f4.2)                               conu-265
 1007 format (/81h    fission channel transmission factors and degrees oconu-266
     3f freedom were read in as ://(8f10.5))                            conu-267
 1008 format (22h in conu  ... stop ...)                                conu-268
      end                                                               conu-269
c 28/07/95  ibm version                                         ecis95  quan-000
      subroutine quan(ncoll,ncols,sp,wv,ipi,niv,iq,tq,invt,inls,ivq,ivz,quan-001
     1mc,cc,nat,at,dt,it,nvi,kab,nc,ncj,ncin,aj,jpi,nin,inc,fac,nfa,idmtquan-002
     2,nmax,id,lo)                                                      quan-003
c input variables: ncoll:   number of coupled nuclear states            quan-004
c                  ncols:   number of states with angular distribution  quan-005
c                  sp,wv:   see calx                                    quan-006
c                  ipi:     projectile and target multiplicity, parity  quan-007
c                           and maximum angular momentum.  see calx     quan-008
c                  niv(i1,i2,1/2): first/last address in the table of   quan-009
c                           reduced nuclear matrix elements. see redm   quan-010
c                  iq,tq:   table of reduced nuclear matrix elements    quan-011
c                  invt:    number of non spin-orbit form factors       quan-012
c                  inls:    number of spin-orbit form factors           quan-013
c                  ivq(i):  table of multipoles.   see redm             quan-014
c                  ivz(i):  table of form factors.   see redm           quan-015
c                  kab:     maximum number of coupled channels          quan-016
c                  aj:      channel spin                                quan-017
c                  jpi:     channel parity (0/1)                        quan-018
c                  inc:     number of diagonal potentials               quan-019
c                  fac:     table of logarithms of factorials           quan-020
c                  nfa:     length of fac                               quan-021
c                  idmt:    available total working space               quan-022
c                  nmax:  available length of dt/at/nat(less 100 for 9j)quan-023
c                  id:      first dimension of tables nat and at        quan-024
c                  lo(i):   logical controls. see comments in calc      quan-025
c in common /ncompr/  parametrisation of the deformed spin-orbit        quan-026
c output variables:mc(ic,i) equivalent with cc(ic,i)                    quan-027
c                      mc(ic,1): nuclear state numbers, ic = 1,nc       quan-028
c                      mc(ic,2): orbital momentum                       quan-029
c                      cc(ic,3): orbital spin                           quan-030
c                      mc(ic,4): reference to potential or copy         quan-031
c                      cc(ic,5): lc*(lc+1)                              quan-032
c                      cc(ic,6): eigenvalue of l.s                      quan-033
c                      mc(ic,7): number of the equation for large spin  quan-034
c                  at(id,i),nat(id,i),dt(i) in equivalence by call      quan-035
c                       table of coupling coefficients for i=1,it       quan-036
c                    nat(1,i)  address of the form factor, negative for quan-037
c                        a complex term                                 quan-038
c                    at(2,i)  geometrical coefficient                   quan-039
c                    at(3,i)  idem for small components (dirac equation)quan-040
c                    d(i)  double precision, working space for dj9j     quan-041
c                  it: number of non zero coupling coefficients         quan-042
c                  nvi(1-3,i1,i2): address in the table at(i), analogousquan-043
c                    to the niv addresses: nvi(1,i1,i2) to nvi(2,i1,i2) quan-044
c                    for the non derivatives couplings, nvi(2,i1,i2)+1  quan-045
c                    to nvi(3,i1,i2)  for the derivative couplings      quan-046
c                  nc: number of equations at the channel spin aj       quan-047
c                  ncj: number of coupled equations                     quan-048
c                  ncin: number of solutions                            quan-049
c                  nin  number of coupling potentials                   quan-050
c***********************************************************************quan-051
      logical lo(250),llo                                               quan-052
      double precision fac(1),a1,cmatel,dj6j,dj9j,dcgs,fx,dt(1),c2,wv(11quan-053
     1,1)                                                               quan-054
      dimension niv(ncols,ncols,1),nvi(4,kab,1),nat(id,1),at(id,1),mc(kaquan-055
     1b,1),cc(kab,1),sp(3,1),ivz(7,1),ipi(9,1),ivq(3,1),ip(2),iq(4,1),tqquan-056
     2(4,1)                                                             quan-057
      common /ncomp/ nsp(7),ac(2),ncos(6),az1,az2,az3,az4,az5,az6,bz(10)quan-058
      data ip /2h+ ,2h- /                                               quan-059
c find quantum number of coupled channels                               quan-060
      nc=0                                                              quan-061
      ny=0                                                              quan-062
      ia=2.*aj+.1                                                       quan-063
      do 6 i=1,ncols                                                    quan-064
      sj1=aj-sp(2,i)                                                    quan-065
      sj2=abs(sj1)-.1                                                   quan-066
      nj=ipi(3,i)                                                       quan-067
      nl=ipi(2,i)                                                       quan-068
      do 5 j=1,nj                                                       quan-069
      l1=(ia-nj-nl)/2+j                                                 quan-070
      l2=iabs(l1)                                                       quan-071
      do 4 k=1,nl                                                       quan-072
      if (mod(l1+ipi(1,i)+jpi,2).ne.0) go to 3                          quan-073
      ny=ny+1                                                           quan-074
      if ((l1.lt.l2).or.(sj1.lt.sj2).or.(l1.gt.ipi(9,i))) go to 3       quan-075
      nc=nc+1                                                           quan-076
      mc(nc,4)=ipi(4,i)                                                 quan-077
      if (lo(228)) go to 2                                              quan-078
      if (lo(100)) mc(nc,4)=i                                           quan-079
      do 1 m=nc,kab                                                     quan-080
      if (mc(m,1).ne.i) go to 1                                         quan-081
      if (mc(m,2).ne.l1) go to 1                                        quan-082
      if (cc(m,3).ne.sj1) go to 1                                       quan-083
      mc(nc,4)=-m                                                       quan-084
      go to 2                                                           quan-085
    1 continue                                                          quan-086
    2 mc(nc,1)=i                                                        quan-087
      mc(nc,2)=l1                                                       quan-088
      cc(nc,3)=sj1                                                      quan-089
      cc(nc,5)=mc(nc,2)*(mc(nc,2)+1)                                    quan-090
      cc(nc,6)=cc(nc,3)*(cc(nc,3)+1.)-sp(1,i)*(sp(1,i)+1.)-cc(nc,5)     quan-091
      mc(nc,7)=ny                                                       quan-092
    3 l1=l1+1                                                           quan-093
    4 continue                                                          quan-094
    5 sj1=sj1+1.                                                        quan-095
      if (i.eq.ncoll) ncj=nc                                            quan-096
      if (i.ne.1) go to 6                                               quan-097
      ncin=nc                                                           quan-098
      if (ncin.eq.0) return                                             quan-099
    6 continue                                                          quan-100
      if (lo(58)) write (6,1000) aj,ip(jpi+1),nc,ncin,(j,mc(j,1),mc(j,2)quan-101
     1,cc(j,3),mc(j,4),cc(j,5),cc(j,6),j=1,nc)                          quan-102
c computation of coupling coefficients for the form factors             quan-103
c when the spin-orbit is deformed,there is no symmetry, the total       quan-104
c table is calculated. with no spin-orbit deformation,only one half is  quan-105
c calculated. lo(210) returns .true. if they are derivative couplings   quan-106
      lo(210)=.false.                                                   quan-107
      it=0                                                              quan-108
      nin=0                                                             quan-109
      npp=inc/2                                                         quan-110
      invz=invt+inc                                                     quan-111
      do 39 i1=1,nc                                                     quan-112
      j1=mc(i1,1)                                                       quan-113
      k1=ipi(4,j1)                                                      quan-114
      if (lo(100)) k1=j1                                                quan-115
      if (lo(227)) mc(i1,4)=k1                                          quan-116
      do 38 i2=1,i1                                                     quan-117
      j2=mc(i2,1)                                                       quan-118
      c2=wv(8,j1)*wv(8,j2)                                              quan-119
      it1=it+1                                                          quan-120
      nvi(1,i2,i1)=it1                                                  quan-121
      k1=niv(j2,j1,1)                                                   quan-122
      k2=niv(j2,j1,2)                                                   quan-123
      if (k1.gt.k2) go to 30                                            quan-124
      if (4*(k2-k1+3+it).gt.nmax) call memo(idmt,idmt+4*(k2-k1+3+it)-nmaquan-125
     1x,nmax,3,lo)                                                      quan-126
      if (lo(216)) go to 41                                             quan-127
      il=2*mc(i2,2)                                                     quan-128
      ilp=2*mc(i1,2)                                                    quan-129
      isj=2.*cc(i2,3)+.1                                                quan-130
      isjp=2.*cc(i1,3)+.1                                               quan-131
      iai=ipi(3,j2)-1                                                   quan-132
      iaip=ipi(3,j1)-1                                                  quan-133
      is=ipi(2,j2)-1                                                    quan-134
      isp=ipi(2,j1)-1                                                   quan-135
      do 20 k=k1,k2                                                     quan-136
      ni=iq(2,k)                                                        quan-137
c coefficient of a central multipole with angular momentum iq=ivq(1,ni) quan-138
c transfer of spin is=ivq(2,ni)/2 and of total momentum ij=ivq(3,ni)/2  quan-139
c noting the spin s,the orbital angular momentum l,the total spin of thequan-140
c particle j,the spin of the target ai,the eigenvalue of l.s g......    quan-141
c and 'k'=sqrt(2*k+1)   the most general expression of (i2||iq||i1) is  quan-142
c  (-)**(aj+ai2+1+j1+(l2+iq-l1)/2)*'l1'*'l2'*'j1'*'j2'*'iq'*'ij'*       quan-143
c cgs(iq,l2,l1)*c6j(j1,ij,j2,ai2,aj,ai1)*c9j(l2,l1,iq,s2,s1,is,j2,j1,ij)quan-144
c in a macroscopic model, is=0 and ij=iq, the expressions used are      quan-145
c  (-)**(aj+ai2+1-s+(l1+l2+iq)/2)*'l1'*'l2'*'j1'*'j2'*'iq'*cgs(iq,l2,l1)quan-146
c    *c6j(j1,iq,j2,ai2,aj,ai1)*c6j(l1,iq,l2,j2,s,j1)                    quan-147
c for s=1/2 (-)**(aj+ai2-j2+(l1-l2+iq)/2)*'iq'*cgs(iq,j2,j1)            quan-148
c for s=0   (-)**(aj+ai2+1+(l1+l2+iq)/2)*'l1'*'l2'*'iq'*cgs(iq,l2,l1)*  quan-149
c           c6j(l1,iq,l2,ai2,aj,ai1)                                    quan-150
      iiq=2*ivq(1,ni)                                                   quan-151
      do 14 ix=2,id                                                     quan-152
      cx=0.d0                                                           quan-153
      if ((iiq.gt.il+ilp).or.(iiq.lt.iabs(il-ilp))) go to 11            quan-154
      kk=mc(i1,2)+mc(i2,2)+ivq(1,ni)                                    quan-155
      iis=ivq(2,ni)                                                     quan-156
      if (iis.lt.0) go to 9                                             quan-157
      iij=ivq(3,ni)                                                     quan-158
      cmatel=dj6j(isj,iij,isjp,iaip,ia,iai,fac,nfa)                     quan-159
      a1=iij+1                                                          quan-160
      if (is.gt.1.or.iis.ne.0) go to 7                                  quan-161
      cmatel=cmatel*dcgs(iij,isjp,isj,fac,nfa)                          quan-162
      kk=kk+ia+iaip                                                     quan-163
      if (is.eq.1) kk=kk+2+il-isjp                                      quan-164
      if (is.ne.1) a1=a1*(isj+1)*(isjp+1)                               quan-165
      go to 10                                                          quan-166
    7 a1=a1*(il+1)*(ilp+1)                                              quan-167
      a1=a1*(isj+1)*(isjp+1)                                            quan-168
      kk=(ia+iaip-is)+kk                                                quan-169
      cmatel=cmatel*dcgs(iiq,ilp,il,fac,nfa)                            quan-170
      if (iis.ne.0) go to 8                                             quan-171
      fx=dj6j(il,isj,is,isjp,ilp,iij,fac,nfa)                           quan-172
      cmatel=cmatel*fx                                                  quan-173
      go to 10                                                          quan-174
    8 cmatel=cmatel*dj9j(il,ilp,iiq,is,isp,iis,isj,isjp,iij,dt(id*it+1),quan-175
     1100)                                                              quan-176
      a1=a1*(iiq+1)*(iis+1)                                             quan-177
      kk=kk+isjp+ilp+is                                                 quan-178
      go to 10                                                          quan-179
c magnetic coulomb excitation of the particle:                          quan-180
    9 iij=iiq-2                                                         quan-181
      if (iiq.gt.il+ilp+2.or.iiq.lt.iabs(il-ilp)+2) go to 11            quan-182
      cmatel=dj6j(isj,isjp,iij,ilp,il,is,fac,nfa)*dj6j(isj,isjp,iiq-2,iaquan-183
     1ip,iai,ia,fac,nfa)*dcgs(iiq,ilp,il,fac,nfa)                       quan-184
      kk=kk+ia+iaip-is-2                                                quan-185
      a1=(iiq+1)**3*float((isj+1)*(isjp+1))*float((il+1)*(ilp+1))*float(quan-186
     1(il+ilp+iiq+2)*(il+ilp-iij))*(il-ilp+iiq)*(ilp-il+iiq)/float((iiq-quan-187
     21)*iij)**2/16.                                                    quan-188
   10 if (mod(kk,4).eq.0) cmatel=-cmatel                                quan-189
      cx=tq(4,k)*cmatel*dsqrt(a1)                                       quan-190
   11 if (cx.eq.0..and.lo(200)) go to 20                                quan-191
      if (ix.eq.3) go to 12                                             quan-192
      it=it+1                                                           quan-193
      nat(1,it)=iq(1,k)                                                 quan-194
   12 at(ix,it)=cx*c2                                                   quan-195
      if (lo(200)) go to 15                                             quan-196
      if (ix.eq.3) go to 20                                             quan-197
      if (iiq.ne.iij) go to 13                                          quan-198
      at(3,it)=at(2,it)                                                 quan-199
      if (iis.ne.0) at(3,it)=-at(3,it)                                  quan-200
      go to 20                                                          quan-201
   13 il=2*isj-il                                                       quan-202
   14 ilp=2*isjp-ilp                                                    quan-203
   15 nat(1,it)=nat(1,it)+inc                                           quan-204
      if (lo(12)) nat(1,it)=-nat(1,it)                                  quan-205
      if (iq(3,k).eq.0) go to 20                                        quan-206
c deformed spin-orbit                                                   quan-207
c form factor (1/r)(d/dr)v(r)         coefficient:  (i2||iq||i1)*g1     quan-208
c parametrisation:  (i2||iq||i1)*(az3*g1+az4*g2+az1)                    quan-209
      a=cx*(cc(i2,6)*az3+cc(i1,6)*az4+az1)                              quan-210
      if (abs(a).lt.1.e-10) go to 16                                    quan-211
      it=it+1                                                           quan-212
      nat(1,it)=iq(3,k)+inc                                             quan-213
      if (lo(14)) nat(1,it)=-nat(1,it)                                  quan-214
      at(2,it)=2.*a*c2                                                  quan-215
c form factor v(r)/r**2   coefficient: (i2||iq||i1)*(s*(iq*(iq+1)-l1*(l1quan-216
c   +1)-l2*(l2+1)+g2*(1+g1)/(2*s))+xxx)                                 quan-217
c parametrisation:   (i2||iq||i1)*az5*(s*(iq*(iq+1)*az2........         quan-218
c xxx is -sqrt(f1*f2)*c6j(l1,j1,s-1,j2,l2,iq)/(2*s*c6j(l1,j1,s,j2,l2,iq)quan-219
c  with f=(l*l+l-(j-s)*(j-s+1))*((j+s)*(j+s+1)-l*l-l)                   quan-220
c  for s=1/2  xxx=0                                                     quan-221
c  for s=1  xxx=-4*l1*l2*(l1+1)*(l2+1)/iq*iq+iq-l1*l1-l1-l2*l2-l2)      quan-222
c when j1=l1 and j2=l2 , else  xxx=0                                    quan-223
   16 azi=ivq(1,ni)*(ivq(1,ni)+1)                                       quan-224
      aspi=is                                                           quan-225
      smatel=sp(1,j1)*(az2*azi-cc(i1,5)-cc(i2,5))+cc(i1,6)*(1.+cc(i2,6)/quan-226
     1(aspi))                                                           quan-227
      if (is-2) 19 , 17 , 18                                            quan-228
   17 if (il.eq.isj.and.ilp.eq.isjp) smatel=smatel-4.*cc(i1,5)*cc(i2,5)/quan-229
     1(azi-cc(i1,5)-cc(i2,5))                                           quan-230
      go to 19                                                          quan-231
   18 f1=(cc(i1,5)-(cc(i1,3)-sp(1,j1))*(cc(i1,3)-sp(1,j1)+1.))*((cc(i1,3quan-232
     1)+sp(1,j1))*(cc(i1,3)+sp(1,j1)+1.)-cc(i1,5))                      quan-233
      f2=(cc(i2,5)-(cc(i2,3)-sp(1,j1))*(cc(i2,3)-sp(1,j1)+1.))*((cc(i2,3quan-234
     1)+sp(1,j1))*(cc(i2,3)+sp(1,j1)+1.)-cc(i2,5))                      quan-235
      f3=f1*f2                                                          quan-236
      if (f3.gt.0.) smatel=smatel-sqrt(f3)*dj6j(il,isj,is-2,isjp,ilp,iiqquan-237
     1,fac,nfa)/(aspi*fx)                                               quan-238
   19 a=cx*az5*smatel                                                   quan-239
      if (abs(a).lt.1.e-10) go to 20                                    quan-240
      it=it+1                                                           quan-241
      nat(1,it)=iq(3,k)+inc+inls                                        quan-242
      if (lo(14)) nat(1,it)=-nat(1,it)                                  quan-243
      at(2,it)=2.*a*c2                                                  quan-244
   20 continue                                                          quan-245
      llo=.false.                                                       quan-246
   21 if (it-it1) 30 , 25 , 22                                          quan-247
c  summation of coefficients related to the same form factor            quan-248
   22 it2=it-1                                                          quan-249
      do 24 i=it1,it2                                                   quan-250
      do 23 j=i,it2                                                     quan-251
      if (nat(1,i).ne.nat(1,j+1)) go to 23                              quan-252
      at(2,i)=at(2,i)+at(2,j+1)                                         quan-253
      at(2,j+1)=0.                                                      quan-254
      if (lo(200)) go to 23                                             quan-255
      at(3,i)=at(3,i)+at(3,j+1)                                         quan-256
      at(3,j+1)=0.                                                      quan-257
   23 continue                                                          quan-258
   24 continue                                                          quan-259
c elimination of too small coefficients                                 quan-260
   25 it2=it                                                            quan-261
      it=it1-1                                                          quan-262
      nmr=0                                                             quan-263
      nmi=0                                                             quan-264
      do 26 i=it1,it2                                                   quan-265
      cx=abs(at(2,i))                                                   quan-266
      if (lo(100)) cx=cx+abs(at(3,i))                                   quan-267
      if (cx.lt.1.e-10) go to 26                                        quan-268
      it=it+1                                                           quan-269
      nat(1,it)=nat(1,i)                                                quan-270
      at(2,it)=at(2,i)                                                  quan-271
      if (lo(100)) at(3,it)=at(3,i)                                     quan-272
      nmr=nmr+1                                                         quan-273
      if (nat(1,it).lt.0) nmi=nmi+1                                     quan-274
   26 continue                                                          quan-275
      if (nmr.ne.0) nin=nin+1                                           quan-276
      if (nmi.ne.0) nin=nin+1                                           quan-277
      if (llo) go to 34                                                 quan-278
      if (lo(113).and.lo(119)) go to 30                                 quan-279
      nvi(2,i2,i1)=it                                                   quan-280
c coefficients of the derivative coupling                               quan-281
c form factor  v(r)/r**2  coefficient: (i2||iq||i1)*(g1-g2)             quan-282
c parametrisation: (i2||iq||i1)*(g1-g2)*az6                             quan-283
      it2=it                                                            quan-284
      if (lo(100)) go to 28                                             quan-285
      do 27 i=it1,it2                                                   quan-286
      if (iabs(nat(1,i)).gt.invz) go to 27                              quan-287
      ij=iabs(nat(1,i))-inc                                             quan-288
      if (ivz(3,ij).eq.0) go to 27                                      quan-289
      a=at(2,i)*(cc(i2,6)-cc(i1,6))*az6*2.                              quan-290
      if (abs(a).lt.1.e-10) go to 27                                    quan-291
      lo(210)=.true.                                                    quan-292
      it=it+1                                                           quan-293
      nat(1,it)=ivz(3,ij)+inc+inls                                      quan-294
      if (lo(14)) nat(1,it)=-nat(1,it)                                  quan-295
      at(2,it)=a                                                        quan-296
   27 continue                                                          quan-297
      go to 31                                                          quan-298
   28 do 29 i=it1,it2                                                   quan-299
      ij=nat(1,i)                                                       quan-300
      if (ivz(3,ij).eq.0) go to 29                                      quan-301
      lo(210)=.true.                                                    quan-302
      it=it+1                                                           quan-303
      nat(1,it)=ivz(3,ij)                                               quan-304
      at(2,it)=at(2,i)                                                  quan-305
      at(3,it)=at(2,it)*(cc(i2,6)-cc(i1,6))                             quan-306
   29 continue                                                          quan-307
      if (it.gt.it2) nin=nin+1                                          quan-308
      go to 31                                                          quan-309
   30 nvi(2,i2,i1)=it                                                   quan-310
   31 nvi(3,i2,i1)=it                                                   quan-311
      if (lo(100).or.(nvi(3,i2,i1).eq.nvi(2,i2,i1))) go to 36           quan-312
c copy of the coefficients and corrections in order to obtain           quan-313
c an hermitian interaction                                              quan-314
      k1=nvi(1,i2,i1)                                                   quan-315
      k2=nvi(2,i2,i1)                                                   quan-316
      it1=it+1                                                          quan-317
      nvi(1,i1,i2)=it1                                                  quan-318
      do 32 k=k1,k2                                                     quan-319
      it=it+1                                                           quan-320
      nat(1,it)=nat(1,k)                                                quan-321
   32 at(2,it)=at(2,k)                                                  quan-322
      k1=k2+1                                                           quan-323
      k2=nvi(3,i2,i1)                                                   quan-324
      do 33 k=k1,k2                                                     quan-325
      it=it+1                                                           quan-326
      nat(1,it)=nat(1,k)-inls                                           quan-327
      if (nat(1,k).lt.0) nat(1,it)=nat(1,it)+2*inls                     quan-328
      at(2,it)=-at(2,k)                                                 quan-329
      it=it+1                                                           quan-330
      nat(1,it)=nat(1,k)                                                quan-331
   33 at(2,it)=at(2,k)                                                  quan-332
      llo=.true.                                                        quan-333
      go to 21                                                          quan-334
   34 nvi(2,i1,i2)=it                                                   quan-335
      do 35 k=k1,k2                                                     quan-336
      it=it+1                                                           quan-337
      nat(1,it)=nat(1,k)                                                quan-338
   35 at(2,it)=-at(2,k)                                                 quan-339
      nvi(3,i1,i2)=it                                                   quan-340
      nin=nin+2                                                         quan-341
      if (lo(14)) nin=nin+2                                             quan-342
      go to 38                                                          quan-343
c symmetrisation of the table when there is no deformed spin-orbit      quan-344
   36 do 37 k=1,3                                                       quan-345
   37 nvi(k,i1,i2)=nvi(k,i2,i1)                                         quan-346
   38 continue                                                          quan-347
   39 continue                                                          quan-348
      if (lo(158)) return                                               quan-349
c output of coupling coefficients                                       quan-350
      write (6,1001) ((j,i,(nvi(k,j,i),k=1,3),i=1,nc),j=1,nc)           quan-351
      if (it.eq.0) return                                               quan-352
      if (lo(100)) go to 40                                             quan-353
      write (6,1002) (i,nat(1,i),at(2,i),i=1,it)                        quan-354
      return                                                            quan-355
   40 write (6,1003) (i,nat(1,i),at(2,i),at(3,i),i=1,it)                quan-356
      return                                                            quan-357
   41 write (6,1004)                                                    quan-358
      stop                                                              quan-359
 1000 format (/24h channel spin and parity,f6.1,a2,i10,21h coupled channquan-360
     1els and,i3,10h solutions//8x,2h i,3x,2h v,3x,2h l,3x,2h j,9x,4h poquan-361
     2t,5x,3h cl,6x,3h cj//(5x,3i5,f6.1,i11,2f9.1))                     quan-362
 1001 format (/77h pairs of channels n1 n2, and coupling coefficient numquan-363
     1bers nvi(k,n1,n2),k=1,3/(1x,6(i3,i3,1h,,3i4,1h;)))                quan-364
 1002 format (//5x,12hcoefficients/(4(2x,2i4,1p,e15.6)))                quan-365
 1003 format (//5x,12hcoefficients/(3(2x,2i4,1p,2e15.6)))               quan-366
 1004 format (22h in quan  ... stop ...)                                quan-367
      end                                                               quan-368
c 29/10/85  ibm version                                         ecis88  dcgs-000
      function dcgs(l,j1,j2,fac,nfa)                                    dcgs-001
c   cgs(l,j1,j2) =                                                      dcgs-002
c                                 /~~~~~~~~~~~~~~~~   ( j2   l   j1  )  dcgs-003
c  cgs(l,j1,j2) = (-)**(j1+1/2)  / (2*j1+1)*(2*j2+1)  (              )  dcgs-004
c                               v                     (-1/2  0   1/2 )  dcgs-005
c  when j1 and j2 are half-integers                                     dcgs-006
c                              ( j2  l  j1 )                            dcgs-007
c  cgs(l,j1,j2) = (-)**(j1-1)  (           )                            dcgs-008
c                              (  0  0  0  )                            dcgs-009
c  when j1 and j2  are integers                                         dcgs-010
c l,j1,j2 are integer double values.                                    dcgs-011
c fac is a table of logarithm of factorials and nfa its length.         dcgs-012
c***********************************************************************dcgs-013
      implicit real*8 (a-h,o-z)                                         dcgs-014
      dimension fac(1)                                                  dcgs-015
      if (l.lt.0.or.j1.lt.0.or.j2.lt.0) go to 1                         dcgs-016
      ll=l+j1+j2+2                                                      dcgs-017
      lt=ll/2                                                           dcgs-018
      if (2*lt.ne.ll) go to 1                                           dcgs-019
      if (lt.ge.nfa) go to 1                                            dcgs-020
      l1=lt-j1                                                          dcgs-021
      l2=lt-j2                                                          dcgs-022
      l3=lt-l                                                           dcgs-023
      if (l1.le.0.or.l2.le.0.or.l3.le.0) go to 1                        dcgs-024
      l4=lt+1                                                           dcgs-025
      n1=(l1+1)/2                                                       dcgs-026
      n2=(l2+1)/2                                                       dcgs-027
      n3=(l3+1)/2                                                       dcgs-028
      n4=(l4+1)/2                                                       dcgs-029
      dcgs=dexp(fac(n4)-fac(n1)-fac(n2)-fac(n3)-.5d0*(fac(l4)-fac(l1)-fadcgs-030
     1c(l2)-fac(l3)))                                                   dcgs-031
      if (2*(n1/2).ne.n1) dcgs=-dcgs                                    dcgs-032
      if (n4-n1-n2-n3+1) 3 , 2 , 1                                      dcgs-033
    1 dcgs=0.d0                                                         dcgs-034
    2 dcgs=2.d0*dcgs                                                    dcgs-035
    3 return                                                            dcgs-036
      end                                                               dcgs-037
c 29/10/85  ibm version                                         ecis88  dj9j-000
      function dj9j(j1,j2,j3,j4,j5,j6,j7,j8,j9,aa,ito)                  dj9j-001
c  recurrence computation of                                            dj9j-002
c                                     | j1  j2  j3 |                    dj9j-003
c                                     |            |                    dj9j-004
c   9j(j1,j2,j3,j4,j5,j6,j7,j8,j9) =  | j4  j5  j6 |                    dj9j-005
c                                     |            |                    dj9j-006
c                                     | j7  j8  j9 |                    dj9j-007
c                                                                       dj9j-008
c the arguments are integer double values                               dj9j-009
c aa is a working space and ito its length                              dj9j-010
c***********************************************************************dj9j-011
      implicit real*8 (a-f)                                             dj9j-012
      dimension aa(1),j(5),ix(9),jx(3,3),js(3),jf(3),ia(5,3),ib(3)      dj9j-013
      equivalence (ix(1),jx(1,1)),(ib(1),ib1),(ib(2),ib2),(ib(3),ib3)   dj9j-014
      data ia /1,2,3,6,9,6,4,5,8,2,8,9,7,1,4/                           dj9j-015
      dj9j=0.d0                                                         dj9j-016
      ix(1)=j1                                                          dj9j-017
      ix(2)=j2                                                          dj9j-018
      ix(3)=j3                                                          dj9j-019
      ix(4)=j4                                                          dj9j-020
      ix(5)=j5                                                          dj9j-021
      ix(6)=j6                                                          dj9j-022
      ix(7)=j7                                                          dj9j-023
      ix(8)=j8                                                          dj9j-024
      ix(9)=j9                                                          dj9j-025
      do 2 i=1,3                                                        dj9j-026
      do 1 k=1,3                                                        dj9j-027
      if (jx(k,i).lt.0) go to 15                                        dj9j-028
    1 continue                                                          dj9j-029
c check of triangular relations                                         dj9j-030
      if (mod(jx(1,i)+jx(2,i)+jx(3,i),2).ne.0.or.mod(jx(i,1)+jx(i,2)+jx(dj9j-031
     1i,3),2).ne.0) go to 13                                            dj9j-032
      if (iabs(jx(1,i)-jx(2,i)).gt.jx(3,i).or.jx(1,i)+jx(2,i).lt.jx(3,i)dj9j-033
     1) return                                                          dj9j-034
      if (iabs(jx(i,1)-jx(i,2)).gt.jx(i,3).or.jx(i,1)+jx(i,2).lt.jx(i,3)dj9j-035
     1) return                                                          dj9j-036
    2 continue                                                          dj9j-037
c search of the configuration for which the sum on products of 6-j      dj9j-038
c coefficients is the smallest one                                      dj9j-039
      k1=min0(ix(3),ix(5),ix(7))                                        dj9j-040
      k2=min0(ix(2),ix(4),ix(9))                                        dj9j-041
      k3=min0(ix(1),ix(6),ix(8))                                        dj9j-042
      kt=max0(k1,k2,k3)                                                 dj9j-043
      if (kt.eq.k1) go to 6                                             dj9j-044
      if (k2.gt.k3) go to 4                                             dj9j-045
      do 3 i=1,3                                                        dj9j-046
      ii=ix(i)                                                          dj9j-047
      ix(i)=ix(i+3)                                                     dj9j-048
      ix(i+3)=ix(i+6)                                                   dj9j-049
    3 ix(i+6)=ii                                                        dj9j-050
      go to 6                                                           dj9j-051
    4 do 5 i=1,3                                                        dj9j-052
      ii=ix(i+6)                                                        dj9j-053
      ix(i+6)=ix(i+3)                                                   dj9j-054
      ix(i+3)=ix(i)                                                     dj9j-055
    5 ix(i)=ii                                                          dj9j-056
    6 do 7 k=1,3                                                        dj9j-057
      ia1=ia(1,k)                                                       dj9j-058
      ia2=ia(2,k)                                                       dj9j-059
      ia4=ia(4,k)                                                       dj9j-060
      ia5=ia(5,k)                                                       dj9j-061
      js(k)=max0(iabs(ix(ia1)-ix(ia5)),iabs(ix(ia4)-ix(ia2)))+1         dj9j-062
    7 jf(k)=min0(ix(ia1)+ix(ia5),ix(ia2)+ix(ia4))+1                     dj9j-063
      if=min0(jf(1),jf(2),jf(3))                                        dj9j-064
      kt=2+(if-max0(js(1),js(2),js(3)))/2                               dj9j-065
c loop on the three 6-j coefficients                                    dj9j-066
      itx=0                                                             dj9j-067
      az=1.d0                                                           dj9j-068
      do 11 k=1,3                                                       dj9j-069
      ij=itx                                                            dj9j-070
      ib(k)=itx+(jf(k)-if)/2                                            dj9j-071
      do 8 i=1,5                                                        dj9j-072
      ia1=ia(i,k)                                                       dj9j-073
    8 j(i)=ix(ia1)                                                      dj9j-074
      aa(2+ij)=1.d0                                                     dj9j-075
      at=jf(k)                                                          dj9j-076
      jt=2+(jf(k)-js(k))/2                                              dj9j-077
      itx=itx+jt                                                        dj9j-078
      if (jf(k).le.js(k)) go to 11                                      dj9j-079
      if (itx.gt.ito) go to 14                                          dj9j-080
      al=jf(k)                                                          dj9j-081
      aa(1+ij)=0.d0                                                     dj9j-082
      c2=0.d0                                                           dj9j-083
      bk1=(j(1)-j(5))**2                                                dj9j-084
      bk3=(j(2)-j(4))**2                                                dj9j-085
      bk2=(j(1)+j(5)+2)**2                                              dj9j-086
      bk4=(j(2)+j(4)+2)**2                                              dj9j-087
      d1=(j(1)-j(5))*(j(1)+j(5)+2.d0)*(j(4)-j(2))*(j(2)+j(4)+2.d0)/16.d0dj9j-088
      d2=(bk1+bk2+bk3+bk4-4*j(3)*(j(3)+2))/8.d0-1.d0                    dj9j-089
      bk=(al+1.d0)**2                                                   dj9j-090
      do 10 i=3,jt                                                      dj9j-091
      c1=c2                                                             dj9j-092
      bk=bk-al*4.d0                                                     dj9j-093
      c2=.03125d0*dsqrt((bk3-bk)*(bk1-bk)*(bk2-bk)*(bk4-bk))            dj9j-094
      d4=.5d0*(al+.5d0*bk-1.d0)                                         dj9j-095
      aa(i+ij)=-(al*(d1+(d2-d4)*d4)*aa(i-1+ij)+(al-1.d0)*c1*aa(i-2+ij))/dj9j-096
     1(c2*(al+1.d0))                                                    dj9j-097
      al=al-2.d0                                                        dj9j-098
      at=at+al*aa(i+ij)*aa(i+ij)                                        dj9j-099
      if (at.lt.1.d15) go to 10                                         dj9j-100
      at=at*1.d-30                                                      dj9j-101
      do 9 ii=2,i                                                       dj9j-102
    9 aa(ii+ij)=aa(ii+ij)*1.d-15                                        dj9j-103
   10 continue                                                          dj9j-104
   11 az=az*at*(j(3)+1)                                                 dj9j-105
c summation on products of 6-j                                          dj9j-106
      af=if                                                             dj9j-107
      do 12 i=2,kt                                                      dj9j-108
      dj9j=dj9j+af*aa(i+ib1)*aa(i+ib2)*aa(i+ib3)                        dj9j-109
   12 af=af-2.d0                                                        dj9j-110
c normalisation                                                         dj9j-111
      dj9j=dj9j/dsqrt(az)                                               dj9j-112
      return                                                            dj9j-113
   13 write (6,1000)                                                    dj9j-114
      return                                                            dj9j-115
   14 write (6,1001)                                                    dj9j-116
      return                                                            dj9j-117
   15 write (6,1002)                                                    dj9j-118
      return                                                            dj9j-119
 1000 format (71h integer/half-integer rule between quantum numbers trandj9j-120
     1sgressed in dj9j)                                                 dj9j-121
 1001 format (28h too many 6-j needed in dj9j)                          dj9j-122
 1002 format (34h negative angular momentum in dj9j)                    dj9j-123
      end                                                               dj9j-124
c 22/08/94  ibm version                                         ecis94  mtch-000
      subroutine mtch(nc,nvi,ncoll,kab,wv,mc,sc,bg,nat,st,aa,ncin,ism,lmmtch-001
     1ax2,niv,ivz,fg,lmax1,lmax3,inc,invt,inls,kr,vco,vdo,fam,id,pjm,lo)mtch-002
c computation of coulomb corrections as integrals from the matching     mtch-003
c point if lo(227)=.false. or from the origin if lo(227)=.true.         mtch-004
c input variables: nc:    number of equations                           mtch-005
c                  nvi:   addresses of couplings in table at            mtch-006
c                  ncoll: number of nuclear states                      mtch-007
c                  kab:   maximum number of coupled channels            mtch-008
c                  wv:    wwve numbers and coulomb parameters           mtch-009
c                  mc,sc: nuclear state number and angular momentum     mtch-010
c                  bg:    table of coulomb integrals from 0 to infinity mtch-011
c                           for coupled equations or when lo(227)=.true.mtch-012
c                  nat,st:table of coupling coefficients                mtch-013
c                  ncin:  number of solutions needed for coupled equatiomtch-014
c                  ism:   number of integration points                  mtch-015
c                  lmax2: first dimension of table bg                   mtch-016
c                  niv:   address in the table of reduced matrix elementmtch-017
c                  ivz:   table of form factors (see redm 3rd part)     mtch-018
c                  fg:    coulomb functions                             mtch-019
c                  lmax1: first dimension of table fg                   mtch-020
c                  lmax3: maximum number of coulomb integrals from the  mtch-021
c                           matching point to infinity                  mtch-022
c                  inc:   number of diagonal potentials                 mtch-023
c                  invt:  number of form factors                        mtch-024
c                  inls:  number of spin-orbit form factors             mtch-025
c                  vco:   strength of tails of coulomb potentials       mtch-026
c                  vdo:   strength of tails of coulomb transitions      mtch-027
c                  id:    first dimension of nat,st                     mtch-028
c                  pjm:   coefficient of increase of imaginary potentialmtch-029
c                  lo:    logical controls                              mtch-030
c output variables:aa:    coulomb integrals from the matching point to  mtch-031
c                           infinity for iterations lo(225)=.false.     mtch-032
c                  fam(i,j): matching values and wave number for j=1 to mtch-033
c                         6, coefficient of central potential for j=7,  mtch-034
c                         coefficient of spin-orbit potential for j=8,  mtch-035
c                         energy for j=9, centrifugal potential for j=10mtch-036
c working space:   aa(1,1,i) for i=7,10 if lo(227) or lo(225)=.true.    mtch-037
c                  kr:    for lins                                      mtch-038
c local tables la(3,11) and ba(2,11) are set mcm(1)=5 and mcm(2)=4      mtch-039
c***********************************************************************mtch-040
      implicit real*8 (a-h,w-z)                                         mtch-041
      logical lo(250),lv                                                mtch-042
      dimension aa(kab,kab,1),wv(11,1),nat(id,1),st(id,1),b(4),c(2,2),mcmtch-043
     1(kab,1),nvi(4,kab,1),niv(ncoll,ncoll,1),ivz(7,1),sc(kab,1),fg(lmaxmtch-044
     21,4,1),g(4),ab(4,2),kr(1),vco(2,1),vdo(2,1),bg(lmax2,1),fam(kab,1)mtch-045
     3,av(5),la(3,11),ba(2,11)                                          mtch-046
      common /dblpr/ chi2,chi2m,cm,ck,chb,cmb,ccz,cxe,cxm,cxn           mtch-047
      lv=lo(44).and.(lo(57).or.lo(58))                                  mtch-048
      inx=inc                                                           mtch-049
      if (lo(100)) inx=0                                                mtch-050
      ll4=4                                                             mtch-051
      if (lo(227)) ll4=1                                                mtch-052
      if (lv) write (6,1000)                                            mtch-053
c loops on equations                                                    mtch-054
      do 56 ic=1,nc                                                     mtch-055
      i1=mc(ic,1)                                                       mtch-056
      k1=mc(ic,4)                                                       mtch-057
      l1=mc(ic,2)                                                       mtch-058
      if (k1.ge.0.or.lo(227)) go to 2                                   mtch-059
c transfer of informations when uncoupled functions are not recomputed  mtch-060
      k1=-k1                                                            mtch-061
      if (lo(200)) sc(ic,6)=0.                                          mtch-062
      if (k1.eq.ic) go to 5                                             mtch-063
      do 1 i=1,8                                                        mtch-064
    1 fam(ic,i)=fam(k1,i)                                               mtch-065
      go to 5                                                           mtch-066
c values of long range tails of central potentials                      mtch-067
    2 f2=vco(1,k1)**2                                                   mtch-068
      f3=vco(2,k1)*sc(ic,6)                                             mtch-069
      jc=0                                                              mtch-070
      if (i1.le.ncoll) jc=niv(i1,i1,3)                                  mtch-071
      if (wv(3,i1).gt.0.d0.and.jc.gt.0) go to 3                         mtch-072
      f2=0.d0                                                           mtch-073
      f3=0.d0                                                           mtch-074
    3 if (lo(227)) go to 5                                              mtch-075
c integration region - set up of potential in five points for           mtch-076
c transformation of matching values                                     mtch-077
      b1=wv(11,1)*wv(11,1)/48.d0                                        mtch-078
      c1=(ism-1)*wv(11,1)                                               mtch-079
      a1=wv(9,i1)**2                                                    mtch-080
      if (wv(3,i1).lt.0.d0) a1=-a1                                      mtch-081
      do 4 k=1,5                                                        mtch-082
      av(k)=b1*(2.d0*wv(9,i1)*wv(5,i1)/c1-a1+(sc(ic,5)-f2-f3/c1)/c1**2) mtch-083
    4 c1=c1+0.5d0*wv(11,1)                                              mtch-084
c computation of coulomb corrections                                    mtch-085
    5 az=ism*wv(11,i1)                                                  mtch-086
      do 48 ip=1,ic                                                     mtch-087
      do 6 l=1,8                                                        mtch-088
    6 ab(l,1)=0.d0                                                      mtch-089
      i2=mc(ip,1)                                                       mtch-090
      ilm=1                                                             mtch-091
      if (lo(144)) go to 45                                             mtch-092
      l2=mc(ip,2)                                                       mtch-093
      i3=niv(i2,i1,3)                                                   mtch-094
      if (i3.eq.0) go to 45                                             mtch-095
      ay=dsqrt(wv(9,i1)*wv(9,i2))                                       mtch-096
      aw=ay*az                                                          mtch-097
c scan the couplings between equations                                  mtch-098
      is=0                                                              mtch-099
      if (lo(200).and.lo(19).and.(ic.ne.ip)) ilm=2                      mtch-100
      k1=nvi(1,ip,ic)                                                   mtch-101
      k2=nvi(2,ip,ic)                                                   mtch-102
      if (lo(111).or.(k1.gt.k2)) go to 15                               mtch-103
      iml=1                                                             mtch-104
c central contribution                                                  mtch-105
      i=1                                                               mtch-106
    7 if (vdo(1,i).eq.0.d0) go to 29                                    mtch-107
      ii=i+inx                                                          mtch-108
      do 8 k=k1,k2                                                      mtch-109
      if (iabs(nat(1,k)).eq.ii) go to 9                                 mtch-110
    8 continue                                                          mtch-111
      go to 29                                                          mtch-112
    9 if (st(2,k).eq.0.and.lo(200)) go to 29                            mtch-113
      la1=mc(ic,2)                                                      mtch-114
      la2=mc(ip,2)                                                      mtch-115
      la3=ivz(7,i)                                                      mtch-116
      zt=st(2,k)*ay**la3*vdo(1,i)/wv(11,i1)**2                          mtch-117
      if (lo(100)) zt=zt*.5d0*dsqrt((1.+wv(7,i1)/cxm)*(1.+wv(7,i2)/cxm))mtch-118
      im=1                                                              mtch-119
   10 if (im.lt.5) yt=zt                                                mtch-120
      if ((yt.eq.0.).and.(zt.eq.0.)) go to 13                           mtch-121
      if (is.eq.0) go to 12                                             mtch-122
      do 11 j=1,is                                                      mtch-123
      if ((la(1,j).ne.la1).or.(la(2,j).ne.la2).or.(la(3,j).ne.la3)) go tmtch-124
     1o 11                                                              mtch-125
      ba(1,j)=ba(1,j)+zt                                                mtch-126
      ba(2,j)=ba(2,j)+yt                                                mtch-127
      go to 13                                                          mtch-128
   11 continue                                                          mtch-129
   12 is=is+1                                                           mtch-130
      la(1,is)=la1                                                      mtch-131
      la(2,is)=la2                                                      mtch-132
      la(3,is)=la3                                                      mtch-133
      ba(1,is)=zt                                                       mtch-134
      ba(2,is)=yt                                                       mtch-135
   13 go to ( 14 , 29 , 19 , 29 , 26 , 27 , 28 , 29 ),im                mtch-136
   14 if (lo(200)) go to 29                                             mtch-137
c vector contribution in dirac equation                                 mtch-138
      im=2                                                              mtch-139
      la1=2.*sc(ic,3)+.1-mc(ic,2)                                       mtch-140
      la2=2.*sc(ip,3)+.1-mc(ip,2)                                       mtch-141
      la3=ivz(7,i)                                                      mtch-142
      zt=st(3,k)*ay**la3*vdo(1,i)*chb**2*wv(9,i1)*wv(9,i2)/(2.*cxm*(wv(7mtch-143
     1,i2)+cxm)*wv(11,i1)**2)                                           mtch-144
      if ((la1-mc(ic,2))*(la2-mc(ip,2)).lt.0) zt=-zt                    mtch-145
      go to 10                                                          mtch-146
   15 if (lo(119)) go to 30                                             mtch-147
      k3=nvi(3,ip,ic)                                                   mtch-148
c tensor contribution in dirac equation                                 mtch-149
      if (lo(200)) go to 20                                             mtch-150
      iml=2                                                             mtch-151
      k4=k2+1                                                           mtch-152
      if (k4.gt.k3) go to 30                                            mtch-153
      i=1                                                               mtch-154
   16 if (vdo(2,i).eq.0.) go to 29                                      mtch-155
      do 17 k=k4,k3                                                     mtch-156
      if (iabs(nat(1,k)).eq.ivz(3,i)) go to 18                          mtch-157
   17 continue                                                          mtch-158
      go to 29                                                          mtch-159
   18 im=3                                                              mtch-160
      la1=2.*sc(ic,3)+.1-mc(ic,2)                                       mtch-161
      la2=mc(ip,2)                                                      mtch-162
      la3=ivz(7,i)+1                                                    mtch-163
      zt=.5d0*(st(3,k)+la3*st(2,k))*ay**la3*vdo(2,i)*chb*wv(9,i1)/(wv(11mtch-164
     1,i1)**2*cxm)                                                      mtch-165
      if ((la1-mc(ic,2)).gt.0) zt=-zt                                   mtch-166
      go to 10                                                          mtch-167
   19 im=4                                                              mtch-168
      la1=mc(ic,2)                                                      mtch-169
      la2=2.*sc(ip,3)+.1-la2                                            mtch-170
      zt=-.5d0*(st(3,k)-la3*st(2,k))*ay**la3*vdo(2,i)*chb*wv(9,i2)/(wv(1mtch-171
     11,i2)**2*cxm)                                                     mtch-172
      if ((la2-mc(ip,2)).gt.0) zt=-zt                                   mtch-173
      go to 10                                                          mtch-174
   20 i=1                                                               mtch-175
      iml=3                                                             mtch-176
c spin-orbit contribution in schroedinger equation                      mtch-177
      kp1=nvi(1,ic,ip)                                                  mtch-178
      kp2=nvi(2,ic,ip)                                                  mtch-179
      kp3=nvi(3,ic,ip)                                                  mtch-180
   21 if (vdo(2,i).eq.0.d0) go to 29                                    mtch-181
      ii=ivz(3,i)+inx+inls                                              mtch-182
      ax1=0.d0                                                          mtch-183
      ax2=0.d0                                                          mtch-184
      ax3=0.d0                                                          mtch-185
      if (k1.gt.k3) go to 23                                            mtch-186
      do 22 k=k1,k3                                                     mtch-187
      if (iabs(nat(1,k))+inls.eq.ii) ax1=st(2,k)                        mtch-188
      if ((k.le.k2).and.(iabs(nat(1,k)).eq.ii)) ax2=st(2,k)             mtch-189
      if ((k.gt.k2).and.(iabs(nat(1,k)).eq.ii)) ax3=st(2,k)             mtch-190
   22 continue                                                          mtch-191
   23 ay1=0.d0                                                          mtch-192
      ay2=0.d0                                                          mtch-193
      ay3=0.d0                                                          mtch-194
      if (kp1.gt.kp3) go to 25                                          mtch-195
      do 24 k=kp1,kp3                                                   mtch-196
      if (iabs(nat(1,k))+inls.eq.ii) ay1=st(2,k)                        mtch-197
      if ((k.le.kp2).and.(iabs(nat(1,k)).eq.ii)) ay2=st(2,k)            mtch-198
      if ((k.gt.kp2).and.(iabs(nat(1,k)).eq.ii)) ay3=st(2,k)            mtch-199
   24 continue                                                          mtch-200
   25 if ((k1.gt.k3).and.(kp1.gt.kp3)) go to 29                         mtch-201
      la1=mc(ic,2)                                                      mtch-202
      la2=mc(ip,2)                                                      mtch-203
      la3=ivz(7,i)+2                                                    mtch-204
      if (la3.gt.la1+la2) go to 29                                      mtch-205
      xt=ay**la3*vdo(2,i)/wv(11,i1)**2                                  mtch-206
      zt=(ax2-(la3-1)*ax1+(la1+1)*ax3)*xt                               mtch-207
      yt=(ay2-(la3-1)*ay1+(la2+1)*ay3)*xt                               mtch-208
      im=5                                                              mtch-209
      go to 10                                                          mtch-210
   26 la3=la3-1                                                         mtch-211
      xt=xt/ay                                                          mtch-212
      zt=ax3*wv(9,i1)*wv(5,i1)/dfloat(la1+1)*xt                         mtch-213
      yt=ay3*wv(9,i2)*wv(5,i2)/dfloat(la2+1)*xt                         mtch-214
      im=6                                                              mtch-215
      go to 10                                                          mtch-216
   27 la2=la2+1                                                         mtch-217
      yt=-ay3*dsqrt(1.d0+(wv(5,i2)/dfloat(la2))**2)*wv(9,i2)*xt         mtch-218
      zt=0.d0                                                           mtch-219
      im=7                                                              mtch-220
      go to 10                                                          mtch-221
   28 la1=la1+1                                                         mtch-222
      la2=la2-1                                                         mtch-223
      zt=-ax3*dsqrt(1.d0+(wv(5,i1)/dfloat(la1))**2)*wv(9,i1)*xt         mtch-224
      yt=0.d0                                                           mtch-225
      im=8                                                              mtch-226
      go to 10                                                          mtch-227
   29 i=i+1                                                             mtch-228
      if (i.le.invt) go to ( 7 , 16 , 21 ),iml                          mtch-229
      if (iml.eq.1) go to 15                                            mtch-230
   30 if (is.eq.0) go to 45                                             mtch-231
      do 44 ik=1,is                                                     mtch-232
      if (dabs(ba(1,ik))+dabs(ba(2,ik)).lt.1.d-8) go to 44              mtch-233
      l4=la(1,ik)                                                       mtch-234
      l5=la(2,ik)                                                       mtch-235
      li=min0(l4,l5)                                                    mtch-236
      lf=max0(l4,l5)                                                    mtch-237
      ll=la(3,ik)                                                       mtch-238
      i4=i1                                                             mtch-239
      if (li.ne.la(2,ik)) i4=i2                                         mtch-240
      i5=i1+i2-i4                                                       mtch-241
      ei=wv(5,i5)                                                       mtch-242
      ef=wv(5,i4)                                                       mtch-243
      xi=wv(9,i5)*az                                                    mtch-244
      xf=wv(9,i4)*az                                                    mtch-245
      l3=(li+lf-ll+3)/2                                                 mtch-246
      if (l3.le.0) go to 44                                             mtch-247
      call cora(l3,ll,lf-li+1,ei,ef,xi,xf,b,c,lo(227))                  mtch-248
c order in c   (li,lf),(li,lf+1),(li+1,lf),(li+1,lf+1)                  mtch-249
c order in fg   f(ei)*f(ef),g(ei)*f(ef),f(ei)*g(ef),g(ei)*g(ef)         mtch-250
      if (lo(227)) go to 41                                             mtch-251
c integration region - integrals from matching point to infinity        mtch-252
      if (max0(l3+3,lf+2).gt.lmax3) go to 65                            mtch-253
      if (li.ne.l5) go to 31                                            mtch-254
      a1=c(1,2)                                                         mtch-255
      c(1,2)=c(2,1)                                                     mtch-256
      c(2,1)=a1                                                         mtch-257
c computation of the integrals from the matching point using b and c    mtch-258
   31 do 35 n1=1,4                                                      mtch-259
      g(n1)=0.d0                                                        mtch-260
      do 32 n3=1,4                                                      mtch-261
   32 g(n1)=g(n1)+b(n3)*fg(l3+n3-1,n1,i3)                               mtch-262
      nn2=2*((n1-1)/2)+1                                                mtch-263
      nn1=2*(n1-nn2)+1                                                  mtch-264
      do 34 n3=1,2                                                      mtch-265
      do 33 n4=1,2                                                      mtch-266
   33 g(n1)=g(n1)-c(n4,n3)*fg(l3+n3,nn1,i1)*fg(l3+n4,nn2,i2)            mtch-267
   34 continue                                                          mtch-268
   35 continue                                                          mtch-269
      do 37 il=1,ilm                                                    mtch-270
      do 36 l=1,4                                                       mtch-271
   36 ab(l,il)=ab(l,il)+ba(il,ik)*g(l)                                  mtch-272
   37 continue                                                          mtch-273
      if (lo(225).or.(lo(29).and.(ip.eq.ic))) go to 39                  mtch-274
      do 38 il=1,ilm                                                    mtch-275
      yt=ba(il,ik)*wv(11,i1)**2*ay/(12.d0*aw**(ll+1))                   mtch-276
c with the green's functions method,we must add h**2*fp(r)/12           mtch-277
c which is vre(ism-1)*(ki*fp(i)*g(f)+kf*f(i)*gp(f)-(ll+1)/r)/12.        mtch-278
      c0=-(ll+1)/az+6./wv(11,i1)                                        mtch-279
      ab(1,il)=ab(1,il)-yt*(wv(9,i1)*fg(l4+1,2,i1)*fg(l5+1,1,i2)+wv(9,i2mtch-280
     1)*fg(l4+1,1,i1)*fg(l5+1,2,i2)+c0*fg(l4+1,1,i1)*fg(l5+1,1,i2))     mtch-281
      ab(2,il)=ab(2,il)-yt*(wv(9,i1)*fg(l4+1,4,i1)*fg(l5+1,1,i2)+wv(9,i2mtch-282
     1)*fg(l4+1,3,i1)*fg(l5+1,2,i2)+c0*fg(l4+1,3,i1)*fg(l5+1,1,i2))     mtch-283
      ab(3,il)=ab(3,il)-yt*(wv(9,i1)*fg(l4+1,2,i1)*fg(l5+1,3,i2)+wv(9,i2mtch-284
     1)*fg(l4+1,1,i1)*fg(l5+1,4,i2)+c0*fg(l4+1,1,i1)*fg(l5+1,3,i2))     mtch-285
      ab(4,il)=ab(4,il)-yt*(wv(9,i1)*fg(l4+1,4,i1)*fg(l5+1,3,i2)+wv(9,i2mtch-286
     1)*fg(l4+1,3,i1)*fg(l5+1,4,i2)+c0*fg(l4+1,3,i1)*fg(l5+1,3,i2))     mtch-287
   38 continue                                                          mtch-288
      go to 44                                                          mtch-289
c correction of the potential in five points for matching values        mtch-290
   39 c1=(ism-1)*wv(11,i1)*ay                                           mtch-291
      do 40 i=1,5                                                       mtch-292
      av(i)=av(i)+ba(1,ik)*ay*wv(11,i1)**2/c1**(ll+1)/48.               mtch-293
   40 c1=c1+0.5d0*wv(11,i1)*ay                                          mtch-294
      go to 44                                                          mtch-295
c computation of integrals from 0 to infinity using b                   mtch-296
   41 ax=0.d0                                                           mtch-297
      if (l3+3.gt.lmax2) go to 66                                       mtch-298
      do 42 n1=1,4                                                      mtch-299
   42 ax=ax+b(n1)*bg(l3+n1-1,i3)                                        mtch-300
      do 43 il=1,ilm                                                    mtch-301
   43 ab(1,il)=ab(1,il)+ba(il,ik)*ax                                    mtch-302
   44 continue                                                          mtch-303
c limitation for too large integral of irregular functions              mtch-304
   45 if (dabs(ab(4,1)).gt.wv(9,i1)) ab(4,1)=ab(1,1)                    mtch-305
      if ((ilm.eq.2).and.(dabs(ab(4,2)).gt.wv(9,i2))) ab(4,2)=ab(1,2)   mtch-306
      if (.not.lv) go to 46                                             mtch-307
      write (6,1001) ic,ip,l1,l2,(ab(i,1),i=1,ll4)                      mtch-308
      if (ilm.eq.2) write (6,1001) ip,ic,l2,l1,(ab(i,2),i=1,ll4)        mtch-309
c build up of matrix of corrections                                     mtch-310
   46 do 47 l=1,ll4                                                     mtch-311
      if (ic.ne.ip) aa(ip,ic,l)=ab(l,ilm)                               mtch-312
   47 aa(ic,ip,l)=ab(l,1)                                               mtch-313
      if (lo(227).or.(ic.eq.ip)) go to 48                               mtch-314
      aa(ip,ic,2)=ab(3,ilm)                                             mtch-315
      aa(ip,ic,3)=ab(2,ilm)                                             mtch-316
   48 continue                                                          mtch-317
      if (.not.lo(227)) go to 49                                        mtch-318
      if (jc.le.0) go to 56                                             mtch-319
      if (wv(5,i1).eq.0.d0) f2=f3*wv(9,i1)                              mtch-320
      aa(ic,ic,1)=aa(ic,ic,1)-f2*bg(l1+1,jc)*wv(9,i1)                   mtch-321
      if ((wv(5,i1).eq.0.d0).or.(f3.eq.0.d0)) go to 56                  mtch-322
      b1=2.d0*wv(5,i1)*l1*(l1+1)                                        mtch-323
      b2=(l1+1)**2+wv(5,i1)**2                                          mtch-324
      c1=-((2*l1+1)*b2+2*wv(5,i1)**2)/b1                                mtch-325
      c2=(2*l1+3)*b2/b1                                                 mtch-326
      aa(ic,ic,1)=aa(ic,ic,1)-f3*(c1*bg(l1+1,jc)+c2*bg(l1+2,jc))*wv(9,i1mtch-327
     1)**2                                                              mtch-328
      go to 56                                                          mtch-329
   49 if (mc(ic,4).lt.0) go to 56                                       mtch-330
c matching values                                                       mtch-331
      do 50 k=1,4                                                       mtch-332
   50 b(k)=fg(l1+1,k,i1)                                                mtch-333
      if (jc.le.0.) go to 54                                            mtch-334
      if (lo(129).and.(f2.eq.0.d0.and.f3.eq.0.d0)) go to 54             mtch-335
      if (wv(5,i1).ne.0.d0) go to 51                                    mtch-336
      f2=f3*wv(9,i1)                                                    mtch-337
      f3=0.d0                                                           mtch-338
   51 do 52 k=1,4                                                       mtch-339
   52 g(k)=-fg(l1+1,k,jc)*f2+ab(k,1)/wv(9,i1)                           mtch-340
      if (f3.eq.0.d0) go to 53                                          mtch-341
      b1=2.d0*wv(5,i1)*l1*(l1+1)                                        mtch-342
      b2=(l1+1)**2+wv(5,i1)**2                                          mtch-343
      c1=-((2*l1+1)*b2+2*wv(5,i1)**2)/b1                                mtch-344
      c2=(2*l1+3)*b2/b1                                                 mtch-345
      a1=ism*wv(11,i1)*wv(9,i1)                                         mtch-346
      d1=(b2+(l1+1)*wv(5,i1)/a1)/a1/b1                                  mtch-347
      d2=-wv(5,i1)*dsqrt(b2)/b1/a1                                      mtch-348
      a1=b2/b1/a1                                                       mtch-349
      a3=f3*wv(9,i1)                                                    mtch-350
      g(1)=g(1)-a3*(c1*fg(l1+1,1,jc)+c2*fg(l1+2,1,jc)-d1*fg(l1+1,1,i1)**mtch-351
     12-d2*2.d0*fg(l1+1,1,i1)*fg(l1+2,1,i1)-a1*fg(l1+2,1,i1)**2)        mtch-352
      g(2)=g(2)-a3*(c1*fg(l1+1,2,jc)+c2*fg(l1+2,2,jc)-d1*fg(l1+1,1,i1)*fmtch-353
     1g(l1+1,3,i1)-d2*(fg(l1+1,1,i1)*fg(l1+2,3,i1)+fg(l1+2,1,i1)*fg(l1+1mtch-354
     2,3,i1))-a1*fg(l1+2,1,i1)*fg(l1+2,3,i1))                           mtch-355
      g(4)=g(4)-a3*(c1*fg(l1+1,4,jc)+c2*fg(l1+2,4,jc)-d1*fg(l1+1,3,i1)**mtch-356
     12-d2*2.d0*fg(l1+1,3,i1)*fg(l1+2,3,i1)-a1*fg(l1+2,3,i1)**2)        mtch-357
   53 a4=1.d0+(g(1)*g(4)-g(2)**2)                                       mtch-358
      g(3)=b(1)                                                         mtch-359
      b(1)=(b(1)*(1.d0-g(2))+g(1)*b(3))/a4                              mtch-360
      b(3)=(-g(3)*g(4)+(1.d0+g(2))*b(3))/a4                             mtch-361
      g(3)=b(2)                                                         mtch-362
      b(2)=(b(2)*(1.d0-g(2))+g(1)*b(4))/a4                              mtch-363
      b(4)=(-g(3)*g(4)+(1.d0+g(2))*b(4))/a4                             mtch-364
   54 a1=(1.d0-av(2))/(2.d0+10.d0*av(2))                                mtch-365
      b1=(1.d0-av(4))/(2.d0+10.d0*av(4))                                mtch-366
      a2=a1*(1.d0-av(1))/(1.d0-4.d0*av(1))                              mtch-367
      b2=b1*(1.d0-av(5))/(1.d0-4.d0*av(5))                              mtch-368
      c1=(2.d0+10.d0*av(3))-(1.d0-av(3))*(a1+b1)                        mtch-369
      a1=(16.d0-144.d0*av(2))/(2.d0+10.d0*av(2))                        mtch-370
      b1=(16.d0-144.d0*av(4))/(2.d0+10.d0*av(4))                        mtch-371
      c2=(7.d0+a1*(1.d0-av(1)))/(1.d0-4.d0*av(1))                       mtch-372
      d2=(7.d0+b1*(1.d0-av(5)))/(1.d0-4.d0*av(5))                       mtch-373
      d1=(b1-a1)*(1.d0-av(3))                                           mtch-374
      a1=a2*d2+b2*c2                                                    mtch-375
      b1=(c1*d2+d1*b2)/a1                                               mtch-376
      b2=30.d0*wv(11,1)*b2*wv(9,i1)/a1                                  mtch-377
      fam(ic,1)=b1*b(1)-b2*b(2)                                         mtch-378
      fam(ic,3)=b1*b(3)-b2*b(4)                                         mtch-379
      b1=(c2*c1-a2*d1)/a1                                               mtch-380
      a2=-30.d0*wv(11,1)*a2*wv(9,i1)/a1                                 mtch-381
      fam(ic,2)=b1*b(1)-a2*b(2)                                         mtch-382
      fam(ic,4)=b1*b(3)-a2*b(4)                                         mtch-383
      fam(ic,5)=wv(9,i1)                                                mtch-384
      if (lo(100)) fam(ic,5)=fam(ic,5)*chb/(cxm+wv(7,i1))               mtch-385
      bt=fam(ic,2)*fam(ic,3)-fam(ic,1)*fam(ic,4)                        mtch-386
      if (bt.eq.0.d0) bt=1.d0                                           mtch-387
      do 55 i=1,4                                                       mtch-388
   55 fam(ic,i)=fam(ic,i)/bt                                            mtch-389
      fam(ic,6)=fam(ic,5)/bt                                            mtch-390
      if (lo(100)) fam(ic,5)=fam(ic,5)*wv(11,i1)                        mtch-391
      fam(ic,7)=wv(8,i1)**2                                             mtch-392
      fam(ic,8)=2.d0*fam(ic,7)*sc(ic,6)                                 mtch-393
      fam(ic,9)=wv(10,i1)                                               mtch-394
      fam(ic,10)=sc(ic,5)                                               mtch-395
      if (lo(200)) sc(ic,6)=pjm*fam(ic,7)                               mtch-396
   56 continue                                                          mtch-397
      do 59 ic=1,nc                                                     mtch-398
      i1=mc(ic,1)                                                       mtch-399
      do 58 l=1,ll4                                                     mtch-400
      do 57 ip=1,nc                                                     mtch-401
   57 aa(ic,ip,l)=aa(ic,ip,l)/wv(9,i1)                                  mtch-402
   58 continue                                                          mtch-403
   59 continue                                                          mtch-404
      if (.not.lo(227)) return                                          mtch-405
      if (.not.lo(225)) go to 62                                        mtch-406
c transposition if coupled equations are used                           mtch-407
      do 61 ic=1,nc                                                     mtch-408
      do 60 ip=1,ic                                                     mtch-409
      ax=aa(ip,ic,1)                                                    mtch-410
      aa(ip,ic,1)=aa(ic,ip,1)                                           mtch-411
   60 aa(ic,ip,1)=ax                                                    mtch-412
   61 continue                                                          mtch-413
c linear system for computation of the s-matrix from the k-matrix       mtch-414
   62 do 64 ic=1,nc                                                     mtch-415
      do 63 ip=1,nc                                                     mtch-416
      aa(ic,nc+ip,1)=0.d0                                               mtch-417
      aa(ic,ip,4)=0.d0                                                  mtch-418
   63 aa(ic,nc+ip,4)=-aa(ic,ip,1)                                       mtch-419
   64 aa(ic,ic,4)=1.d0                                                  mtch-420
      call lins(aa(1,1,4),kab,aa,kab,nc,ncin,kr,ier)                    mtch-421
      lo(216)=ier.ne.0                                                  mtch-422
      return                                                            mtch-423
   65 write (6,1002) l3,lf,lmax3                                        mtch-424
      go to 67                                                          mtch-425
   66 write (6,1003) l3,lmax2                                           mtch-426
   67 lo(216)=.true.                                                    mtch-427
      return                                                            mtch-428
 1000 format (/62h channels  l-values     coulomb integrals: f*f,g*f,f*gmtch-429
     1 and g*g)                                                         mtch-430
 1001 format (2x,2i3,2x,2i4,3x,4d18.10)                                 mtch-431
 1002 format (16h starting values,i3,18h for integrals and,i3,48h for comtch-432
     1ulomb functions too large . limitation at,i4)                     mtch-433
 1003 format (15h starting value,i4,57h too large for coulomb integrals mtch-434
     1which are computed up to,i5)                                      mtch-435
      end                                                               mtch-436
c 18/08/94  ibm version                                         ecis94  cora-000
      subroutine cora(l,lq,ll,e,f,v,w,b,c,lt)                           cora-001
c coefficients for coulomb integrals                                    cora-002
c m(l1,l2,lq,r)=sum from r to infinity of h(l1)*k(l2)/r**(lq+1)         cora-003
c expressed as sum on i of b(i)*m(l+i-2,l+i-2,1) + c1(r)*h(l)*k(l)      cora-004
c + c2(r)*h(l)*k(l+1) + c3(r)*h(l+1)*k(l) + c4(r)*h(l+1)*k(l+1)         cora-005
c where h and k are regular or irregular coulomb functions              cora-006
c l=integer part of (l1+l2-lq+3)/2 and i ranges from 1 to 4.            cora-007
c input variables: l,lq:   l,lq in the expressions above                cora-008
c                  ll:     value of l2-l1+1 which must be >1.           cora-009
c                  e,f:    coulomb parameters                           cora-010
c                  v,w:    product of r with the wave numbers           cora-011
c                  lt:     .true. for only integrals from 0 to infinity cora-012
c output variables:b(4):   coefficients b in the expressions above      cora-013
c                  c(4):   coefficients c                               cora-014
c                                                                       cora-015
c these results are obtained by expressing                              cora-016
c h(l1)*k(l2)/r**(lq+1)- sum on i of b(i)*h(l+i-2)*k(l+i-2)/r**2        cora-017
c as p1*h(l)*k(l) + p2*h(l)*k(l+1) + p3*h(l+1)*k(l) + p4*h(l+1)*q(l+1)  cora-018
c where p1,p2,p3,p4 are polynomial in 1/r and identification term by    cora-019
c term starting from the highest degree in 1/r with the derivative of   cora-020
c  q1*h(l)*k(l) + q2*h(l)*k(l+1) + q3*h(l+1)*k(l) + q4*h(l+1)*q(l+1)    cora-021
c this as been done using amp ( j.-m. drouffe, amp language reference   cora-022
c manual - version 6 - note cea-n-2297 1982).                           cora-023
c                                                                       cora-024
c the non relativistic results for lq=6 l2-l1=0,2,4 and all the         cora-025
c coefficients up to lq=5 have been obtained. but, this is a version    cora-026
c limited to lq=4. to use all the coefficients, suppress 'c' in column 1cora-027
c of the fortran cards and put 'c' in column 1 of cora-063, cora-214 andcora-028
c cora-901, replace in subroutine calx                                  cora-029
c     if (mc1.gt.0) mcm(1)=min0(mc1,4)                        calx-231  cora-030
c     if (lo(200).and.(mc2.gt.0)) mcm(2)=min0(mc2,2)          calx-232  cora-031
c     if (lo(100).and.(mc2.gt.0)) mcm(2)=min0(mc2,3)          calx-233  cora-032
c by                                                                    cora-033
c     if (lo(200).and.(mc1.gt.0)) mcm(1)=min0(mc1,6)          calx-231  cora-034
c     if (lo(100).and.(mc1.gt.0)) mcm(1)=min0(mc1,5)          calx-232  cora-035
c     if (mc2.gt.0) mcm(2)=min0(mc2,4)                        calx-233  cora-036
c and use lo(45)=.true. in the tests to read mc1 and mc2.               cora-037
c                                                                       cora-038
c***********************************************************************cora-039
      implicit real*8 (a-h,o-z)                                         cora-040
      dimension b(4),c(4)                                               cora-041
      logical lt                                                        cora-042
      do 1 i=1,4                                                        cora-043
      b(i)=0                                                            cora-044
    1 c(i)=0                                                            cora-045
      if ((lq.gt.6).or.(ll*(lq-ll+2).le.0)) go to 68                    cora-046
      a=l+1                                                             cora-047
      s=v/w                                                             cora-048
      x=e*s-f                                                           cora-049
      if (dabs(x).lt.1.d-10) x=0                                        cora-050
      u=s**2-1                                                          cora-051
      if (dabs(u).lt.1.d-10) u=0                                        cora-052
      if ((x.eq.0).and.(e.eq.0)) go to 47                               cora-053
      p=s**2*(a**2+e**2)                                                cora-054
      q=a**2+f**2                                                       cora-055
      y=e*s+f                                                           cora-056
      z=e**2-f**2                                                       cora-057
      if (dabs(z).lt.1.d-10) z=0                                        cora-058
      if (x.eq.0.and.z.eq.0) z=1                                        cora-059
      den=2*x**2*(p-q)+8*z*s**2                                         cora-060
      z=u                                                               cora-061
      if (x.eq.0.and.z.eq.0) z=-1/(e*f)                                 cora-062
c     go to ( 2 , 7 , 11 , 18 , 26 , 39 ) , lq                          cora-063
      go to ( 2 , 7 , 11 , 18 , 69 , 69 ) , lq                          cora-064
    2 go to ( 3 , 4 ) , ll                                              cora-065
c multipole lq=1 l1=l2                                                  cora-066
    3 b(1)=1                                                            cora-067
      return                                                            cora-068
    4 if ((e.ne.f).or.(v.ne.w)) go to 5                                 cora-069
c multipole lq=1 l1=l2-1 with e=f and v=w                               cora-070
      b1=dsqrt((a-1)**2+e**2)                                           cora-071
      b(2)=-(a-.5)*q/(e*b1)                                             cora-072
      b(3)=(a+.5)*q/(e*b1)                                              cora-073
      if (lt) return                                                    cora-074
      c(1)=(q+(2*a-1)*e/v)/(2*e*v*b1)                                   cora-075
      c(3)=-dsqrt(q)/(2*v*a*b1)                                         cora-076
      c(2)=c(3)*(2*a-1)                                                 cora-077
      c(4)=q/(2*e*v*b1)                                                 cora-078
      return                                                            cora-079
c multipole lq=1 l1=l2-1                                                cora-080
    5 a1=-2*f*(2*(a-1)*q-a**2*u)                                        cora-081
      a2=f*(4*q*(a-1)*((6*a+1)*q-4*a**2+1)+u*((((16*a-24)*a+4)*a**2-2)*qcora-082
     1+a**2*(2*a-1-u*(a-1)**2)*(4*a+2)))                                cora-083
      a3=-f*(a-1)*((24*a-4)*q+16*a**2-4+u*(((8*a+8)*a+2)*a-2))          cora-084
      a4=4*(a-1)*f                                                      cora-085
      if (x.eq.0) go to 6                                               cora-086
      a1=a1-x*(q*(a-1)*(2*a+6)+a**2*(4+a*u)+x*((2*a-2)*f+a*x))          cora-087
      a2=a2+x*(q*((a-1)*(a+5)*(12*a+2)*q-(((40*a-16)*a-34)*a-8)*a-6+((((cora-088
     1(8*a+12)*a-38)*a+8)*a+5)*a-4)*u+(((16*a+40)*a-44)*a-12)*f*x+(((4*acora-089
     2+20)*a-13)*a-8)*x**2)+(2*a+1)*(a**2*(4-8*a+((6*a-7)*a+4)*u+a*(a-1)cora-090
     3**2*u**2)+x*(((4*a+6)*a-2+(a-1)*((4*a-4)*a+2)*u)*f+x*(a*(((2*a-2)*cora-091
     4a+1)*u-(4*a-6)*a+1)+(4*a-2)*f*x+a*x**2))))                        cora-092
      a3=a3+x*(a-1)*(((8*a-8)*a+6)*a+2-(2*a+6)*(6*a-1)*q-((((4*a+12)*a+5cora-093
     1)*a-3)*a-2)*u-2*x*(((4*a+8)*a-3)*f-x))                            cora-094
      a4=a4+x*2*(a**2-1)                                                cora-095
    6 bd=.5*den*dsqrt((a-1)**2+e**2)                                    cora-096
      if (.not.lt) c(1)=.5-a                                            cora-097
      go to 46                                                          cora-098
    7 go to ( 8 , 9 , 10 ) , ll                                         cora-099
c multipole lq=2 l1=l2                                                  cora-100
    8 a1=2*z*a**2*y                                                     cora-101
      a2=-z*y*(2*a+1)*(((a-1)*a-.5)*y**2+2*a**2*(a-1)**2*(s**2+1))      cora-102
      a3=2*z*(2*a+1)*(a-1)**2*y                                         cora-103
      a4=0                                                              cora-104
      bd=den*(a-1)/dsqrt(s)                                             cora-105
      if (.not.lt) c(1)=-1                                              cora-106
      if (x.eq.0) go to 46                                              cora-107
      a1=a1+x*(4*f*e*s-2*a*(a+q+a*s**2+p))                              cora-108
      a2=a2+x*((a+.5)*((((4*a-6)*a+2)*a-1)*(q+p*s**2)+4*(2*a-3)*f*e*s*(qcora-109
     1+p+s**2+1)+(((4*a+2)*a-14)*a+1)*(q*s**2+p)+a**2*((s**4+1)*((2*a-6)cora-110
     2*a+5)-s**2*(4*(a+1)*a-14)))+p*q*((8*a-4)*a+8))                    cora-111
      a3=a3-2*x*(a-1)*((2*a-3)*(f**2+e**2*s**2)+4*(2*a+1)*f*e*s+(s**2+1)cora-112
     1*(a+1)*((6*a+1)*a-3))                                             cora-113
      a4=4*(a-1)*x                                                      cora-114
      go to 46                                                          cora-115
c multipole lq=2 l1=l2-1                                                cora-116
    9 b1=x*(a-1)-e*s                                                    cora-117
      b3=-(a-1)**2                                                      cora-118
      b2=b3/(a-.5)                                                      cora-119
      bd=-den*a*(a-1)*(2*a-3)*dsqrt(s*((a-1)**2+e**2))/(2*a-1)          cora-120
      if (lt) go to 13                                                  cora-121
      c(1)=b1+2*a*(a-1)**2/w                                            cora-122
      c(2)=b3                                                           cora-123
      c(3)=b2                                                           cora-124
      go to 13                                                          cora-125
c multipole lq=2 l1=l2-2                                                cora-126
   10 b1=q                                                              cora-127
      b3=-3*e*s-x*(a-1)                                                 cora-128
      b4=(a-1)/(a-.5)                                                   cora-129
      bd=-3*den*a*dsqrt(s*q*((a-1)**2+e**2))/(2*a-1)                    cora-130
      if (lt) go to 15                                                  cora-131
      c(1)=b1                                                           cora-132
      c(2)=b3-2*a*(a-1)/w                                               cora-133
      c(4)=b4                                                           cora-134
      go to 15                                                          cora-135
   11 go to ( 12 , 14 , 16 , 17 ) , ll                                  cora-136
c multipole lq=3 l1=l2                                                  cora-137
   12 b1=y/(a-1)                                                        cora-138
      b2=1                                                              cora-139
      b3=1                                                              cora-140
      bd=den*a*(2*a-3)                                                  cora-141
      if (lt) go to 13                                                  cora-142
      c(1)=b1-2*a/w                                                     cora-143
      c(2)=b3                                                           cora-144
      c(3)=b2                                                           cora-145
   13 a1=-2*a**2*y*b1*z                                                 cora-146
      a2=y*((2*a+1)*((2*(a**2-a)**2*(1+s**2)+y**2*(a**2-a-.5))*b1-y*(p*bcora-147
     12+q*b3)))*z                                                       cora-148
      a3=-y*((2*a-1)*(-y*(b2+b3))+(4*a+2)*(a-1)**2*b1)*z                cora-149
      a4=0                                                              cora-150
      if (x.eq.0) go to 46                                              cora-151
      a1=a1+x*2*p*(a*x-2*f)*b2                                          cora-152
      a2=a2+x*p*(2*q*((2*a+3)*(a+1)*f+((2*a+3)*a-4)*e*s)-2*p*(2*a-3)*(2*cora-153
     1a+1)*f+(2*a+1)*((((2*a-1)*a-8)*a+5)*f-s*((a+1)*((6*a-9)*a+1)*e-s*(cora-154
     2(6*a-7)*(a**2-1)*f-s*((((2*a-5)*a+2)*a-1)*e)))))*b2               cora-155
      a3=a3+x*(2*p*((2*a-3)*(a-1)*e*s+f*((2*a-3)*a-4))-2*q*e*s*(2*a+3)*(cora-156
     12*a-1)-(2*a-1)*((((2*a+5)*a+2)*a+1)*f-s*((6*a+7)*(a**2-1)*e-s*((a-cora-157
     21)*((6*a+9)*a+1)*f-s*((((2*a+1)*a-8)*a-5)*e)))))*b2               cora-158
      if (lq.eq.3) go to 45                                             cora-159
      a4=a4+x*2*(2*e*s-a*x)*b2                                          cora-160
      go to 44                                                          cora-161
c multipole lq=3 l1=l2-1                                                cora-162
   14 b1=q/(a-1)                                                        cora-163
      b3=-x                                                             cora-164
      b4=1/(a+1)                                                        cora-165
      bd=-3*den*a*dsqrt(q)                                              cora-166
      if (lt) go to 15                                                  cora-167
      c(1)=b1                                                           cora-168
      c(2)=b3-2*a/w                                                     cora-169
      c(4)=b4                                                           cora-170
   15 a1=-2*a**2*y*b1*z                                                 cora-171
      a2=y*((2*a+1)*((2*(a**2-a)**2*(1+s**2)+y**2*(a**2-a-.5))*b1-y*q*b3cora-172
     1)+(4*a-2)*(a+1)**2*p*q*b4)*z                                      cora-173
      a3=-y*((2*a-1)*((2*(a**2+a)**2*(1+s**2)+y**2*(a**2+a-.5))*b4-y*b3)cora-174
     1+(4*a+2)*(a-1)**2*b1)*z                                           cora-175
      a4=2*a**2*y*b4*z                                                  cora-176
      if (x.eq.0) go to 46                                              cora-177
      a1=a1-x*4*p*q*(a+1)*b4                                            cora-178
      a2=a2+x*2*p*q*(a+1)*((2*a+3)*(q+p)+(2*a-1)*(4*e*f*s+(1+s**2)*((2*acora-179
     1-4)*a-3)))*b4                                                     cora-180
      a3=a3+x*(-4*p*q*((2*a+1)*a+2)-(2*a-1)*(2*s*e*f*(2*a+3)*(q+p+s**2+1cora-181
     1)-a**2*(((a+3)*a+2.5)*(1+s**4)-s**2*((2*a-2)*a-7))+a*(a-1)*(2*a+3)cora-182
     2*(1+s**2)*(p+q)-(s**2-1)*((2*a+4)*a+.5)*(q-p)))*b4                cora-183
      a4=a4+x*2*((a-1)*(p+q)+y**2)*b4                                   cora-184
      go to 44                                                          cora-185
c multipole lq=3 l1=l2-2                                                cora-186
   16 b1=-q*(2*a-1)*((2*a-3)*(a+1)*x+(a-3)*y)/(a-1)                     cora-187
      b2=6*q*(a-1)                                                      cora-188
      b3=((a-1)*(6*a-3)*q+(2*a-1)*((a+1)*x+2*y)*(2*a-3)*x-(a-1)*(6*a-9)*cora-189
     1p)                                                                cora-190
      b4=-((2*a-1)*x+y)*(2*a-3)                                         cora-191
      bd=12*a**2*(2*a-3)*den*s*dsqrt(q*((a-1)**2+e**2))                 cora-192
      if (lt) go to 43                                                  cora-193
      c(1)=b1-6*q*a*(a-1)*(2*a-1)/w                                     cora-194
      c(2)=b3+a*(4*a-6)*(2*a-1)*((a+1)*x+2*y+3*a*(a-1)/w)/w             cora-195
      c(3)=b2                                                           cora-196
      c(4)=b4-6*a*(a-1)*(2*a-3)/w                                       cora-197
      go to 43                                                          cora-198
c multipole lq=3 l1=l2-3                                                cora-199
   17 b1=-q*(3*e*s*y+a*(3*x*y+2*(a+1)*(x**2+2*a-1-2*(a-1)*s**2)))       cora-200
      b2=3*q*(a*x+y)                                                    cora-201
      b4=-(3*f*y+a*(3*x*y+2*(a-1)*(x**2+2*a+2-(2*a+1)*s**2)))           cora-202
      b3=-x*b4*(a+1)+3*q*(y+a*x)+a*(3*a+1.5)*(1-s**2)*((3*a-2)*y+((a-2)*cora-203
     1a+2)*x)                                                           cora-204
      bd=30*a**2*den*s*dsqrt(q*((a-1)**2+e**2)*((a+1)**2+f**2))         cora-205
      if (lt) go to 43                                                  cora-206
      c(1)=b1-3*q*(2*a-1)*((6*a+4)*f+(a+1)*(a+4)*x+4*a*(a**2-1)/w)/w    cora-207
      c(2)=b3+((4*a**2*(a**2-1)*(2*a-1-s**2*(2*a+1))+(18*a**2-3)*y**2+a*cora-208
     1(12*a**2+3)*x*y+(a**2-1)*(4*a**2-3)*x**2)+3*a*(4*a**2-1)*(5*a*y+(acora-209
     2**2+4)*x+4*a*(a**2-1)/w)/w)/w                                     cora-210
      c(3)=b2+12*q*(a**2-1)/w                                           cora-211
      c(4)=b4-3*(2*a+1)*((6*a-4)*f+a*(a+1)*x+4*a*(a**2-1)/w)/w          cora-212
      go to 43                                                          cora-213
c  18 go to ( 19 , 20 , 21 , 22 , 24 ) , ll                             cora-214
   18 go to ( 19 , 69 , 21 , 69 , 24 ) , ll                             cora-215
c multipole lq=4 l1=l2                                                  cora-216
   19 b1=-p*q*(2*a+3)/(a-1)                                             cora-217
      b2=-q*(3*e*s+a*x)                                                 cora-218
      b3=-p*(3*f-a*x)                                                   cora-219
      b4=-((p+q)*(a+1.5)-1.5*y**2)/(a+1)                                cora-220
      bd=3*den*a**2*(2*a+3)*(a+2)*dsqrt(s*p*q)                          cora-221
      if (lt) go to 43                                                  cora-222
      c(1)=b1                                                           cora-223
      c(2)=(b3+p*a*(2*a+3)/w)                                           cora-224
      c(3)=(b2+q*a*(2*a+3)/w)                                           cora-225
      c(4)=(b4-3*a*(y-a*(2*a+3)/w)/w)                                   cora-226
      go to 43                                                          cora-227
c multipole lq=4 l1=l2-1                                                cora-228
c  20 b1=q*(3*e*s-a*x)*(4*a+6)/(a-1)                                    cora-229
c     b2=18*q                                                           cora-230
c     b3=((2*a+3)*(3*q+(2*a-3)*x**2)-(6*a-9)*p)                         cora-231
c     b4=(3*f-a*x)*(4*a-6)/(a+1)                                        cora-232
c     bd=12*den*a**2*dsqrt(s*q)*(4*a**2-9)                              cora-233
c     if (lt) go to 43                                                  cora-234
c     c(1)=b1-6*q*a*(2*a+3)/w                                           cora-235
c     c(2)=b3+2*a*(4*a**2-9)*(x+3*a/w)/w                                cora-236
c     c(3)=b2                                                           cora-237
c     c(4)=b4-6*a*(2*a-3)/w                                             cora-238
c     go to 43                                                          cora-239
c multipole lq=4 l1=l2-2                                                cora-240
   21 b1=((2*a-e**2)*s**2+(a+2)*(2*e*f*s-a*(2*a+2+f**2)/(a-1))/(a+1))   cora-241
      b2=6*q*((a+1)*x-3*f)                                              cora-242
      b3=(-x*(4*a+6)*b1*(a**2-1)+3*(p*((2*a+5)*x-3*y)+(1-s**2)*a*(a+2)*(cora-243
     12*a+3)*(a*x+e*s)))                                                cora-244
      b4=((4*a+6)*(b1*(a-1)+3*a*(s**2-1))+3*y*(3*y-(2*a+5)*x)/(a+1))    cora-245
      b1=q*(a+1)*(4*a+6)*b1                                             cora-246
      bd=60*den*a**2*(a+2)*(2*a+3)*dsqrt(s*q*((a+1)**2+f**2))           cora-247
      if (lt) go to 43                                                  cora-248
      c(1)=b1-6*q*(a+2)*(2*a+3)*(e*s+a*(x+4*(a+1)/w))/w                 cora-249
      c(2)=b3+2*(2*a+3)*(6*e*f*s+a*(f*((2*a+13)*x+6*f)+(a+1)*(2*a*(2*a+4cora-250
     1-(2*a+1)*s**2)+(2*a+1)*x**2))+3*a*(a+2)*(2*a+1)*((a+1)*x+5*f+a*(4*cora-251
     2a+4)/w)/w)/w                                                      cora-252
      c(3)=b2+12*q*(a+1)*(2*a+3)/w                                      cora-253
      c(4)=b4-(12*a+6)*((a+6)*f+a*(a+1)*(x+(4*a+6)/w))/w                cora-254
      go to 43                                                          cora-255
c multipole lq=4 l1=l2-3                                                cora-256
c  22 b1=f*q*(12*(q-(2*a-1)*(2*a-5))/((2*a-3)*(a-1))+(26*a-10)*u)       cora-257
c     b2=q*(36*(q+4*a**2-5)/(2*a-3)-30*(a**2-1)*u)/(2*a+3)              cora-258
c     b3=b2+u*(a**2*(6*a+3)*((4*a+10)+5*(a**2-1)*u)-18*q*a*(3*a+4))/(2*acora-259
c    1+3)                                                               cora-260
c     b4=f*(12*(q-(2*a+5)*(2*a+1))+u*(4*a+2)*((13*a+22)*a-15))/((a+1)*(2cora-261
c    1*a+3))                                                            cora-262
c     if (x.eq.0) go to 23                                              cora-263
c     b1=b1-2*q*x*((6*q*(a-2)+(((28*a-30)*a-46)*a+30))/((2*a-3)*(a-1))-(cora-264
c    1a+1)*((9*a-5)*u-2*x**2))                                          cora-265
c     b2=b2-12*q*x*(f-x*(a+1))/(2*a+3)                                  cora-266
c     b3=b3+x*(24*q*(a*x-f)+(2*a+1)*(12*(2*a+5)*f-((44*a+80)*a-30)*f*u+xcora-267
c    1*a*(28*a+52-u*(24*a+2)*(a+1))+12*f*x**2+4*a*x**3*(a+1)))/(2*a+3)  cora-268
c     b4=b4-x*(12*(a-1)*q+(4*a+2)*(6*f*x+a*(14*a+26-(a+1)*((9*a+1)*u-2*xcora-269
c    1**2))))/((2*a+3)*(a+1))                                           cora-270
c  23 bd=360*den*a**2*s*dsqrt(s*q*((a+1)**2+f**2)*((a-1)**2+e**2))      cora-271
c     if (lt) go to 43                                                  cora-272
c     c(1)=b1+q*(12*(a*(2*a-1)*(2*a-5)-q*(9*a-12))/(2*a-3)+30*a*u*(a**2-cora-273
c    11)-24*(2*a-1)*(f*(7*a+5)+5*a*(a**2-1)/w)/w)/w                     cora-274
c     c(2)=b3+(f*(48*q-8*a*u*(2*a+1)*(7*a-5))+6*(10*q*(11*a**2-2)-a**2*(cora-275
c    12*a+1)*(30*(2*a-1)+5*u*(a**2-1)-(8*a-4)*(12*f+5*(a**2-1)/w)/w))/w)cora-276
c    2/w                                                                cora-277
c     c(3)=b2+24*q*(2*f+5*(a**2-1)/w)/w                                 cora-278
c     c(4)=b4+((12*a*(2*a+1)*(2*a+5)-36*q*(3*a+4)+30*a*u*(2*a+1)*(a**2-1cora-279
c    1))/(2*a+3)-24*(2*a+1)*(f*(7*a-5)+5*a*(a**2-1)/w)/w)/w             cora-280
c     if (x.eq.0) go to 43                                              cora-281
c     c(1)=c(1)-12*x*q*((a+2)*(3*f+(a+1)*x)+(4*a-2)*(a+1)*(a+5)/w)/w    cora-282
c     c(2)=c(2)+x*((12*q*(5*a+6)+(2*a+1)*(12*f*x*(a+2)-2*a*(4*a+10+(a+1)cora-283
c    1*(u*(9*a-5)-2*x**2))))+12*(2*a+1)*(f*((7*a+24)*a-10)+a*(a+1)*((a+2cora-284
c    2)*x+(4*a-2)*(a+5)/w))/w)/w                                        cora-285
c     c(3)=c(3)+24*x*q*(a+1)/w                                          cora-286
c     c(4)=c(4)-12*x*(2*a+1)*((3*f*(a+2)+a*x*(a+1))/(2*a+3)+2*a*(a+1)/w)cora-287
c    1/w                                                                cora-288
c     go to 43                                                          cora-289
c multipole lq=4 l1=l2-4                                                cora-290
   24 b1=6*q*(q*((42*a+3)*u-36)+a*(24*a-12-u*((34*a+3)*a+8)-(8*a+12)*(a*cora-291
     1*2-1)*u**2))                                                      cora-292
      b2=18*q*(12-u*(9*a+1))*f                                          cora-293
      b3=9*f*(q*(24-u*(38*a+2))+u*a*(2*a+1)*(a+1)*(4+(17*a-12)*u))      cora-294
      b4=6*(q*((42*a+3)*u-36)+a*(2*a+1)*(12-(17*a-2)*u-u**2*(4*a+6)*(a-1cora-295
     1)))                                                               cora-296
      if (x.eq.0) go to 25                                              cora-297
      b1=b1-q*x*(x*(24*q+(56*a+188)*a+108)+108*(2*a+3)*f-2*(2*a+3)*(58*acora-298
     1+7)*f*u-2*(a+1)*(2*a+3)*(15*a+4)*u*x+12*(2*a+3)*f*x**2+4*(a+1)*(2*cora-299
     2a+3)*x**3)                                                        cora-300
      b2=b2+q*x*(24*f*x+(a+1)*(108-(66*a+24)*u+12*x**2))                cora-301
      b3=b3+x*(24*f*q*x+(a+1)*(q*(324+36*x**2-(498*a+42)*u)+(2*a+1)*(f*xcora-302
     1*(108-(152*a+24)*u+12*x**2)-a*(72-(168*a-12)*u-((57*a+24)*a-36)*u*cora-303
     2*2-x**2*(28-(36*a+20)*u+4*x**2)))))                               cora-304
      b4=b4+x*(x*(a*(2*a+1)*(30*a+20)*u-24*q)-(8*a+4)*(f*(27-(29*a+6)*u)cora-305
     1+x*(7*a+3*f*x+a*x**2)))                                           cora-306
   25 bd=2520*den*a**2*s*dsqrt(s*q*((a+1)**2+f**2)*((a-1)**2+e**2)*((a+2cora-307
     1)**2+f**2))                                                       cora-308
      if (lt) go to 43                                                  cora-309
      c(1)=b1+18*q*(f*((a-1)*(8*a-4)-20*q+(2*a+3)*((17*a-3)*a-4)*u)-4*(1cora-310
     15*q*((4*a+4)*a-1)-a*(2*a-1)*((34*a+55)*a+16)-(2*a+3)*(2*a*u*(a+1)*cora-311
     2(a-1)*(a+2)-5*(2*a-1)*(f*((5*a+5)*a+4)+2*a*(a**2-1)*(a+2)/w)/w))/wcora-312
     3)/w                                                               cora-313
      c(2)=b3+(360*q**2-72*q*(4*a**2+1)-24*(a+1)*u*(q*((66*a-12)*a-9)-a*cora-314
     1*2*(2*a+1)*(34*a-19+u*(a-1)*(2*a+3)))+18*(20*q*f*((20*a+14)*a-3)-(cora-315
     2a+1)*(a*f*((4*a**2-1)*140+u*(10*a+15)*(2*a+1)*(5*a-4))-4*(10*q*(((cora-316
     330*a+19)*a-1)*a-6)-a**2*(2*a+1)*((2*a-1)*(84*a+56)+(2*a+3)*((2*a-2cora-317
     4)*(a+2)*u-(10*a-5)*(7*f+2*(a-1)*(a+2)/w)/w)))/w))/w)/w            cora-318
      c(3)=b2+72*q*(5*q-4*a**2-1-(2*a+3)*((a**2-1)*u-5*(f*(3*a-1)+2*(a**cora-319
     12-1)*(a+2)/w)/w))/w                                               cora-320
      c(4)=b4-18*(20*q*f-(a+1)*((2*a+1)*f*(4+u*(17*a-12))-4*(15*q*(4*a-1cora-321
     1)-(2*a+1)*(a*(34*a-19)+(2*a+3)*(a*(a-1)*u-5*(f*(5*a-4)+2*a*(a-1)*(cora-322
     2a+2)/w)/w)))/w))/w                                                cora-323
      if (x.eq.0) go to 43                                              cora-324
      c(1)=c(1)-6*q*x*((a+2)*(60*q-(44*a-10)*a-6-(2*a+3)*((a+1)*((11*a-6cora-325
     1)*u-2*x**2)-12*f*x))+(8*a+12)*(((20*a+90)*a-5)*f+(a+1)*(a+2)*((2*acora-326
     2+5)*x+(10*a-5)*(a+6)/w))/w)/w                                     cora-327
      c(2)=c(2)+x*((2*a+3)*(240*f*q+(a+1)*(144*q*x-(2*a+1)*((24-24*x**2+cora-328
     1(182*a-72)*u)*f+a*x*(44+(30*a+8)*u-4*x**2))))+(a+1)*(q*((2400*a+84cora-329
     200)*a-360)-(24*a+12)*(a*((102*a+357)*a-114)-(2*a+3)*((a+2)*(10*f*xcora-330
     3+a*(x**2-(5.5*a-3)*u))+(f*((60*a+270)*a-120)+a*(a+2)*(x*(4*a+10)+(cora-331
     420*a-10)*(a+6)/w))/w)))/w)/w                                      cora-332
      c(3)=c(3)+24*x*q*(2*a+3)*(5*f+(a+1)*(x+5*(a+2)/w))/w              cora-333
      c(4)=c(4)-6*x*(a+1)*(60*q-(2*a+1)*(22*a+(11*a+4)*a*u-12*f*x-2*a*x*cora-334
     1*2-(8*a+12)*(10*f+a*(x+5*(a+2)/w))/w))/w                          cora-335
      go to 43                                                          cora-336
c  26 go to ( 27 , 29 , 31 , 33 , 35 , 37 ) , ll                        cora-337
c multipole lq=5 l1=l2                                                  cora-338
c  27 bd=12*den*a**2*(a+2)*(2*a+5)*(4*a**2-9)*s*dsqrt(p*q)              cora-339
c     b1=28*p*q*f*(2*a+3)/(a-1)                                         cora-340
c     b2=q*(84*q-a*(48*a-72-u*(a+2)*(6*a+27)))                          cora-341
c     b3=p*(84*q-a*(6*a-9)*(8+(a+2)*u))                                 cora-342
c     b4=(4*a-6)*(14*q+a*(24+(7*a+12)*u))*f/(a+1)                       cora-343
c     if (x.eq.0) go to 28                                              cora-344
c     b1=b1+(28*a+42)*x*p*q/(a-1)                                       cora-345
c     b2=b2+q*x*((28*a+126)*f+((4*a+22)*a+42)*x)                        cora-346
c     b3=b3-p*x*(2*a-3)*(14*f-2*a*x)                                    cora-347
c     b4=b4+x*(4*a-6)*(21*q-a*(14*a-12+(a**2-3)*u)-x*((2*a-7)*f+a*x))/(acora-348
c    1+1)                                                               cora-349
c  28 if (lt) go to 43                                                  cora-350
c     c(1)=b1-p*q*(a+2)*(24*a+36)/w                                     cora-351
c     c(2)=b3-p*(4*a**2-9)*(8*f-a*(6*a+12)/w)/w                         cora-352
c     c(3)=b2-q*(4*a**2-9)*(8*f-a*(6*a+12)/w)/w                         cora-353
c     c(4)=b4-(12*a-18)*((2*a-4)*q+a*(a*(8+(a+2)*u)+(8*a+12)*(f-(a+2)*a/cora-354
c    1w)/w))/w                                                          cora-355
c     if (x.eq.0) go to 43                                              cora-356
c     c(3)=c(3)-x*q*(8*a**2-18)*(a+4)/w                                 cora-357
c     c(2)=c(2)+x*p*a*(8*a**2-18)/w                                     cora-358
c     c(4)=c(4)-x*(12*a-18)*((2*a-4)*f+a*(x+(4*a+6)/w))/w               cora-359
c     go to 43                                                          cora-360
c multipole lq=5 l1=l2-1                                                cora-361
c  29 bd=-60*a**2*(2*a+5)*(2*a+3)*(a+3)*(a+2)*den*s*dsqrt(p*q*((a+1)**2+cora-362
c    1f**2))                                                            cora-363
c     b1=p*q*(4*a+6)*((28*q-(12*a-56)*a+40)/(a-1)-(2*a+5)*(a+1)*u)      cora-364
c     b2=q*f*(168*q+480*a+240+((48*a+120)*a+30)*u)                      cora-365
c     b3=p*f*(168*q+480*a+240-(12*a+6)*((2*a+2)*a-5)*u)                 cora-366
c     b4=((2*a-3)*(56*q-(24*a-208)*a+80-(((4*a-18)*a-52)*a-10)*u)*q+a**2cora-367
c    1*(2*a+1)*(480-((24*a-56)*a-180)*u-(2*a+5)*(2*a+3)*(a+1)*u**2))/(a+cora-368
c    21)                                                                cora-369
c     if (x.eq.0) go to 30                                              cora-370
c     b1=b1-x*p*q*(4*a+6)*(7*f-x*(a+1))                                 cora-371
c     b2=b2+x*q*((14*a+210)*q-(56*a-380)*a+240-(6*a+6)*(a**2-5)*u-(12*a-cora-372
c    136)*f*x-(6*a+6)*x**2)                                             cora-373
c     b3=b3-x*p*((98*a-42)*q-(2*a+1)*(a*(24*a-116+(a+1)*((7*a+16)*u-2*x*cora-374
c    1*2))+(14*a-6)*f*x))                                               cora-375
c     b4=b4-x*((2*a-3)*(((2*a+1)*(24*a-80)+(14*a-70)*q)*f-((2*a-22)*a+12cora-376
c    1)*q*x)+(4*a+2)*((((11*a+17)*a+1)*a+15)*f*u-x*((a-1)*(2*a-3)*f*x+a*cora-377
c    2((14*a-18)*a+58+(a+1)*((a+2)*(a-4)*u+x**2)))))/(a+1)              cora-378
c  30 if (lt) go to 43                                                  cora-379
c     c(1)=b1-12*p*q*(2*a+3)*(a+2)*(2*f-(2*a+5)*(a+1)/w)/w              cora-380
c     c(2)=b3-p*(4*a+6)*((16*a-24)*q+(2*a+1)*(40*a-a*(2*a+5)*(a+1)*(u-(6cora-381
c    1*a+12)/w**2)+(30*a+60)*f/w))/w                                    cora-382
c     c(3)=b2-q*(4*a+6)*((16*a-24)*q+(2*a+1)*(40*a+(30*a+60)*f/w)+a*(a+1cora-383
c    1)*(6*a+15)*(u-(10*a+20)/w**2))/w                                  cora-384
c     c(4)=b4-6*(f*(((8*a-28)*a+24)*q+a*(4*a+2)*(((2*a+2)*a-5)*u-40))-(2cora-385
c    1*a+3)*((((4*a+6)*a+62)*a+20)*q+a*(2*a+1)*((2*a+5)*(a+1)*u*a-40*a-(cora-386
c    210*a+20)*(4*f+a*(a+1)*(2*a+5)/w)/w))/w)/w                         cora-387
c     if (x.eq.0) go to 43                                              cora-388
c     c(1)=c(1)+x*p*q*(12*a+18)*(a+1)*(a+2)/w                           cora-389
c     c(2)=c(2)+x*p*(4*a+6)*(((8*a-8)*a-6)*f-a*(a+1)*(2*a+1)*(x+(3*a+6)/cora-390
c    1w))/w                                                             cora-391
c     c(3)=c(3)-x*q*(24*a+36)*((2*a-3)*f+(a+1)*(x+(5*a+10)/w))/w        cora-392
c     c(4)=c(4)+6*x*((a-2)*(a-3)*(2*a-3)*q+(2*a+1)*(((8*a-12)*a+40)*a+((cora-393
c    12*a-2)*a+6)*f*x+a*(a+1)*((a**2-5)*u+x**2)+(4*a+6)*(((2*a+2)*a+10)*cora-394
c    2f+a*(a+1)*(x+(5*a+10)/w))/w))/w                                   cora-395
c     go to 43                                                          cora-396
c multipole lq=5 l1=l2-2                                                cora-397
c  31 dn=720*a**2*(4*a**2-9)*(2*a+5)*(a+2)                              cora-398
c     bd=den*dn*s*dsqrt(q*((a+1)**2+f**2))/2                            cora-399
c     b1=2*(2*a+3)*(24*((2*a+5)*(a+2)+7*q)/(a-1)-(2*a-3)*(11*a-10)*u)*f cora-400
c     b2=-6*(24*(2*a**2-15*a-10)-168*q+5*(a+1)*(2*a**2+a-6)*u)          cora-401
c     b3=((1008*q-144*(2*a**2-15*a-10))*q-(2*a-3)*u*(6*(17*a**2-9*a+10)*cora-402
c    1q+a**2*(2*a+1)*(24*(a+10)-15*(a+1)*(a+2)*u)))                     cora-403
c     b4=2*(2*a-3)*(168*q+(2*a+1)*(24*(a+10)-(11*a**2-a-30)*u))*f/(a+1) cora-404
c     if (x.eq.0) go to 32                                              cora-405
c     b1=b1+x*2*(2*a+3)*((20*a**3-198*a**2+316*a+240-42*(2*a-5)*q)/(a-1)cora-406
c    1+(2*a-3)*(12*f*x+(a+1)*((9*a+10)*u-2*x**2)))                      cora-407
c     b2=b2-x*12*(7*(2*a-3)*f-(a+1)*(2*a-3)*x)                          cora-408
c     b3=b3-x*(2*a-3)*((420*f-36*(5*a-2)*x)*q+(2*a+1)*(48*(a+10)*f-(40*acora-409
c    1**2-38*a-60)*f*u+4*(5*a-58)*a*x+12*(2*a-1)*f*x**2+a*(a+1)*x*(8*(3*cora-410
c    2a+4)*u-4*x**2)))                                                  cora-411
c     b4=b4-x*2*(2*a-3)*(42*(2*a-1)*q-(2*a+1)*(6*(2*a-1)*f*x+a*((10*a-11cora-412
c    16)+(a+1)*((9*a+16)*u-2*x**2))))/(a+1)                             cora-413
c  32 if (lt) go to 43                                                  cora-414
c     b1=b1*q                                                           cora-415
c     b2=b2*q                                                           cora-416
c     c(1)=b1-6*q*(a+2)*(2*a+3)*(8*a*(2*a+5)+24*q-5*a*(a+1)*(2*a-3)*u+4*cora-417
c    1(2*a-3)*(2*a+5)*(f+5*a*(a+1)/w)/w)/w                              cora-418
c     c(2)=b3-(4*a**2-9)*(8*(12*q+a*(a+10)*(2*a+1)*u)*f-(6*a+12)*((a+1)*cora-419
c    1(20*q-a**2*(10*a+5)*u)+(8*a+4)*a*(2*a+5)*(6*f+5*a*(a+1)/w)/w)/w)/wcora-420
c     c(3)=b2-q*24*(4*a**2-9)*(4*f-5*(a+1)*(a+2)/w)/w                   cora-421
c     c(4)=b4-6*(2*a-3)*(24*(a-2)*q+a*(2*a+1)*(8*(a+10)-5*(a+1)*(a+2)*u)cora-422
c    1+4*(2*a+3)*(2*a+1)*((a+10)*f+5*a*(a+1)*(a+2)/w)/w)/w              cora-423
c     if (x.eq.0) go to 43                                              cora-424
c     c(1)=c(1)+x*q*(12*a+24)*(4*a**2-9)*(3*f-(a+1)*(x+(4*a+10)/w))/w   cora-425
c     c(2)=c(2)+x*(8*a**2-18)*(36*(a-1)*q-(2*a+1)*(6*(a-2)*f*x-a*(8*(a+1cora-426
c    10)-(a+1)*((9*a+10)*u-2*x**2))-6*(a+2)*((a+10)*f+a*(a+1)*(x+(4*a+10cora-427
c    2)/w))/w))/w                                                       cora-428
c     c(3)=c(3)+x*q*24*(4*a**2-9)*(a+1)/w                               cora-429
c     c(4)=c(4)+x*12*(2*a+1)*(2*a-3)*(3*(a-2)*f-a*(a+1)*(x+(4*a+6)/w))/wcora-430
c     go to 43                                                          cora-431
c multipole lq=5 l1=l2-3                                                cora-432
c  33 bd=-2520*den*a**2*(a+2)*(a+3)*(2*a+3)*(2*a+5)*s*dsqrt(q*((a+1)**2+cora-433
c    1f**2)*((a+2)**2+f**2))                                            cora-434
c     b1=q*(4*a+6)*(((24*((a+36)*a+40)+168*q)*q+48*a*(a+2)*(a+3)*(2*a+5)cora-435
c    1)/(a-1)-(a*(((80*a+620)*a+966)*a+540)+((28*a-26)*a+60)*q-6*a*(a+1)cora-436
c    2*(a+2)*(2*a+3)*(2*a+5)*u)*u)                                      cora-437
c     b2=6*f*q*(48*((2*a+21)*a+20)+168*q-(((16*a+36)*a-22)*a-60)*u)     cora-438
c     b3=6*f*((48*((2*a+21)*a+20)+168*q-(10*a-12)*(4*a**2+5)*u)*q+a*(a+1cora-439
c    1)*(2*a+1)*(((16*a+168)*a+720)-(2*a+3)*(a+2)*(8*a+45)*u)*u)        cora-440
c     b4=((2*a-3)*(48*((a+48)*a+40)+336*q)*q/(a+1)-(4*a**2-9)*(28*a-40)*cora-441
c    1q*u+a*(2*a+1)*(96*((2*a+21)*a+90)-(4*a+6)*(((40*a+282)*a+180)-(a+2cora-442
c    2)*(2*a+3)*(6*a+15)*u)*u))                                         cora-443
c     if (x.eq.0) go to 34                                              cora-444
c     b1=b1+x*q*(4*a+6)*((((28*a+402)*a+704)*a+360)*x-((88*a+700)*a+600)cora-445
c    1*f-126*f*q+(54*a+24)*q*x+(2*a+3)*(((5*a-53)*a-70)*f*u-(8*a+2)*f*x*cora-446
c    2*2-(a+1)*(a+2)*((15*a+25)*u-2*x**2)*x))                           cora-447
c     b2=b2-x*6*q*((((8*a+372)*a+696)*a+360)+(70*a+42)*q-(2*a+3)*((10*a+cora-448
c    16)*f*x+(a+1)*(a+2)*((11*a+25)*u-2*x**2)))                         cora-449
c     b3=b3+x*((48*((13*a-7)*a-3)*f*x-(((144*a+6696)*a+1104)*a-3600)-84*cora-450
c    1(13*a-9)*q)*q+(a+1)*(((((352*a+224)*a+1518)*a+1260)*u-12*((20*a-14cora-451
c    2)*a-3)*x**2)*q+(2*a+1)*((2*a-3)*((88*a+720)+(16*a+24)*x**2)*f*x+a*cora-452
c    3((((280*a+2292)*a+2772)*a+1080)*u-(192*a+2016)*a-8640-28*((2*a+31)cora-453
c    4*a+24)*x**2)-(2*a+3)*(((16*a-230)*a-300)*f*u*x+a*(a+2)*(((57*a+171cora-454
c    5)*a+90)*u**2-(36*a+62)*u*x**2+4*x**4)))))                         cora-455
c     b4=b4-x*((4*a-6)*(126*a+42)*f*q/(a+1)-36*(2*a-3)*(3*a+1)*q*x-(4*a+cora-456
c    12)*(a*((28*a+434)*a+336)*x-(2*a-3)*(44*a+360)*f+(2*a+3)*(((5*a-79)cora-457
c    2*a-150)*f*u-(8*a-12)*f*x**2-a*(a+2)*((15*a+31)*u-2*x**2)*x)))     cora-458
c  34 if (lt) go to 43                                                  cora-459
c     c(1)=b1-12*q*(2*a+3)*(a+2)*((12*q+(2*a+3)*((8*a+41)*a+15)*u)*f-(4*cora-460
c    1a+10)*((a+3)*4*f+((33+13*a)*q-a*(a+3)*(4*a-6)-(2*a+3)*(3*a*(a+1)*(cora-461
c    2a+2)*u-10*(a+3)*((4*a+1)*f+3*a*(a+1)*(a+2)/w)/w))/w))/w           cora-462
c     c(3)=b2-12*q*(2*a+3)*((((32*a+288)*a+456)*a+240)+8*(2*a-3)*q-(a+2)cora-463
c    1*(2*a+3)*(3*(a+1)*(2*a+5)*u-10*((2*a+11)*f+3*(2*a+5)*(a+1)*(a+2)/wcora-464
c    2)/w))/w                                                           cora-465
c     c(2)=b3-(4*a+6)*((((192*a+1728)*a+2736)*a+1440+48*(2*a-3)*q)*q-(a+cora-466
c    11)*((((176*a+964)*a+2166)*a+540)*q-a**2*(2*a+1)*(((16*a+168)*a+720cora-467
c    2)+6*(a+2)*(2*a+3)*(2*a+5)*u))*u-6*(a+2)*((2*a+3)*((a+1)*(2*a+1)*(2cora-468
c    30*a+75)*a*u-(20*a+110)*q)*f+(a+1)*(2*a+5)*(6*(28*a**2*(2*a+1)*(a+3cora-469
c    4)-((52*a+161)*a+30)*q+a**2*(a+2)*(2*a+1)*(2*a+3)*u)-10*a*(a+3)*(2*cora-470
c    5a+1)*(2*a+3)*(14*f+6*a*(a+2)/w)/w)/w)/w)/w                        cora-471
c     c(4)=b4+12*(((2*a+1)*(a+1)*(((16*a+168)*a+720)-(a+2)*(2*a+3)*(8*a+cora-472
c    145)*u)-12*(2*a-3)*(a-2)*q)*f+(2*a+3)*(a+1)*(((52*a+266)*a+660)*q-acora-473
c    2*(2*a+1)*((8*a+84)*a+360)-(a+2)*(2*a+1)*(2*a+3)*(3*a*(2*a+5)*u-10*cora-474
c    3((8*a+30)*f+3*a*(2*a+5)*(a+2)/w)/w))/w)/w                         cora-475
c     if (x.eq.0) go to 43                                              cora-476
c     c(1)=c(1)+6*q*x*(2*a+3)*(a+2)*(((40*a+300)*a+476)*a+240+(18*a-6)*qcora-477
c    1-(2*a+3)*((2*a-10)*f*x+(a+1)*(a+2)*((11*a+15)*u-2*x**2)-(8*a+20)*(cora-478
c    2(3*a+13)*f+(a+1)*(a+2)*(x+(5*a+15)/w))/w))/w                      cora-479
c     c(2)=c(2)+x*(4*a+6)*(12*(2*a-3)*(4*a-1)*f*q-(a+1)*(((60*a-42)*a+18cora-480
c    10)*q*x+(2*a+1)*(((32*a+336)*a+1440)*f-(2*a+3)*((28*a+202)*a+180)*fcora-481
c    2*u+a*(((40*a+308)*a+120)-(a+2)*(2*a+3)*((15*a+25)*u-2*x**2))*x-(2*cora-482
c    3a+3)*(2*a-24)*f*x**2)+(3*a+6)*(((92*a+406)*a+780)*q-(2*a+1)*(a*((8cora-483
c    4*a+84)*a+360)+(2*a+3)*(a*(a+2)*((11*a+15)*u-2*x**2)-(6*a+40)*f*x-(cora-484
c    58*a+20)*((30+8*a)*f+a*(a+2)*(x+(5*a+15)/w))/w)))/w))/w            cora-485
c     c(3)=c(3)+24*x*q*(2*a+3)**2*((2*a-3)*f-(a+1)*(a+2)*(x+5*(a+2)/w))/cora-486
c    1w                                                                 cora-487
c     c(4)=c(4)+x*6*(a+1)*(18*(a-2)*(2*a-3)*q+(2*a+1)*(a*((40*a+308)*a+1cora-488
c    120)-(2*a+3)*((2*a-24)*f*x+a*(a+2)*((11*a+25)*u-2*x**2)-4*(2*a+3)*(cora-489
c    2(20+3*a)*f+a*(a+2)*(x+5*(a+2)/w))/w)))/w                          cora-490
c     go to 43                                                          cora-491
c multipole lq=5 l1=l2-4                                                cora-492
c  35 bd=10080*den*a**2*(2*a+5)*(a+2)*s**2*dsqrt(q*((a+1)**2+f**2)*((a+2cora-493
c    1)**2+f**2)*((a-1)**2+e**2))                                       cora-494
c     b1=q*(((336*q+48*((8*a+22)*a+47))*q-96*(2*a-1)*(a+2)*(2*a+5)*(3*a-cora-495
c    17))/((a-1)*(2*a-3))+(4*(((162*a+683)*a+538)*a-280)-4*(7*a-38)*q-(2cora-496
c    2*a+3)*(((163*a+497)*a-16)*a-140)*u)*u)*f                          cora-497
c     b2=3*q*(((96*((((12*a+56)*a+29)*a-70)*a-70)+(48*((4*a+28)*a+47)+33cora-498
c    16*q)*q)/(2*a-3)-4*(((((66*a+307)*a+172)*a-280)*a-280)+(a-2)*(4*a-1cora-499
c    29)*q)*u)/(2*a+3)+35*(a**2-1)*(a+2)**2*u**2)                       cora-500
c     b3=(((1008*q+144*((4*a+28)*a+47))*q+288*((((12*a+56)*a+29)*a-70)*acora-501
c    1-70))*q/(2*a-3)-12*(((((178*a+967)*a+1410)*a+428)*a-280)+(a-2)*(10cora-502
c    2*a-19)*q)*q*u+(3*a+3)*(((((458*a+2185)*a+2899)*a-352)*a-420)*q*u+(cora-503
c    34*a+2)*a**2*(8*((6*a+37)*a+70)-(((62*a+349)*a+524)*a-140)*u))*u)/(cora-504
c    42*a+3)-52.5*a**2*(a**2-1)*(a+2)**2*(2*a+1)*u**3                   cora-505
c     b4=(((336*q+48*((8*a+34)*a+47)-(4*a-8)*((14*a-41)*a+57)*u)*q/(a+1)cora-506
c    1+(2*a+1)*(4*(((162*a+863)*a+1070)*a-840)*u-96*((6*a+37)*a+70)))/(2cora-507
c    2*a+3)-(2*a+1)*(((163*a+631)*a+256)*a-420)*u**2)*f                 cora-508
c     if (x.eq.0) go to 36                                              cora-509
c     b1=b1+x*q*(8*((((((180*a+604)*a-425)*a-1813)*a-394)*a+840)+(((34*acora-510
c    1+147)*a-193)*a-450)*q+42*(a-2)*q**2)/((1-a)*(2*a-3))+96*f*q*x+16*(cora-511
c    2(((26*a+126)*a+133)*a-13)*a-70)*u+4*((41*a+115)*a+170)*q*u+4*((2*acora-512
c    3-1)*a-54)*f*x-8*(5*a+2)*q*x**2-(((152*a+892)*a+1380)*a+664)*x**2+(cora-513
c    42*a+3)*(4*((20*a+97)*a+62)*f*u*x+4*(a-2)*f*x**3+(a+1)*(a+2)*(((44*cora-514
c    5a+36)*u-4*x**2)*x**2-((87*a+67)*a-70)*u**2)))                     cora-515
c     b2=b2-12*x*q*((28*f*q+2*((18*a+83)*a+56)*f-(((34*a+217)*a+341)*a+1cora-516
c    166)*x-4*(3*a+1)*q*x)/(2*a+3)+(((9*a+58)*a+44)*u+2*a*x**2)*f+(a+1)*cora-517
c    2(a+2)*(9*(a+1)*u-x**2)*x)                                         cora-518
c     b3=b3+x*(((96*(5*a-3)*q+4*(((170*a+1101)*a+901)*a+162)-24*((10*a-5cora-519
c    1)*a-2)*f*x)*q*x-4*((((22*a+543)*a+629)*a+510)*u+168*q)*f*q+(a+1)*(cora-520
c    24*(((26*a-5)*a+18)*x**2-(((166*a+627)*a+1415)*a+558)*u)*q*x+(2*a+1cora-521
c    3)*((96*((6*a+37)*a+70)-4*((2*a-105)*a-498)*x**2-8*(((138*a+751)*a+cora-522
c    41012)*a-420)*u)*f+a*(4*((38*a+197)*a+154)*x**2-(((572*a+2362)*a+96cora-523
c    50)*a-40)*u+8*((90*a+491)*a+674))*x)))/(2*a+3)-24*(17*a+50)*f*q+(a+cora-524
c    61)*(2*a+1)*((((373*a+1411)*a+544)*a-420)*f*u**2-4*((23*a+125)*a+54cora-525
c    7)*f*u*x**2-4*(a-6)*f*x**4+a*(a+2)*(((141*a+199)*a-22)*u**2-(50*a+4cora-526
c    88)*u*x**2+4*x**4)*x))                                             cora-527
c     b4=b4+x*(((48*((4*a-4)*a-1)*f*x-8*(((34*a+225)*a-61)*a-168)-336*(acora-528
c    1-1)*q)*q/(a+1)+4*((((82*a+315)*a+902)*a+396)*u-a*(20*a-26)*x**2)*qcora-529
c    2+4*(2*a+1)*(((2*a-105)*a-498)*f*x+a*((((104*a+430)*a+171)*a-10)*u-cora-530
c    32*((90*a+491)*a+674)-((38*a+197)*a+154)*x**2)))/(2*a+3)+(2*a+1)*(4cora-531
c    4*((20*a+107)*a+54)*f*u*x+4*(a-6)*f*x**3+a*(a+2)*(4*(11*a+12)*u*x**cora-532
c    52-((87*a+145)*a-22)*u**2-4*x**4)))                                cora-533
c  36 if (lt) go to 43                                                  cora-534
c     c(1)=b1-3*q*(a+2)*(((16*((56*a+62)*a-177)+48*q)*q-32*a*(2*a-1)*(2*cora-535
c    1a+5)*(3*a-7))/(2*a-3)+(4*a*(((62*a+159)*a+29)*a+70)-4*((97*a+229)*cora-536
c    2a-6)*q+35*a*(a**2-1)*(2*a+3)*(a+2)*u)*u-4*(2*a+5)*((4*(2*a-1)*(3*acora-537
c    3-7)-92*q+(2*a+3)*((67*a-17)*a-14)*u)*f-5*(4*((59*a+59)*a-18)*q-4*acora-538
c    4*(2*a-1)*(3*a+1)*(11*a+14)-(2*a+3)*(7*a*(a**2-1)*(a+2)*u-6*(2*a-1)cora-539
c    5*(((17*a+17)*a+14)*f+7*a*(a**2-1)*(a+2)/w)/w))/w)/w)/w            cora-540
c     c(2)=b3+(((96*((12*a+56)*a+59-q)-8*(((188*a+864)*a+889)*a-18)*u)*qcora-541
c    1+a*(a+1)*(2*a+1)*(16*((6*a+37)*a+70)*u+4*(2*a+3)*((67*a+136)*a-140cora-542
c    2)*u**2))*f+3*(a+2)*(40*((19*a+46)*q-((12*a+32)*a+7)*a-14)*q-(a+1)*cora-543
c    3(20*(((132*a+292)*a-97)*a-42)*q-a**2*(2*a+1)*(20*((66*a+127)*a-98)cora-544
c    4+35*(a-1)*(2*a+3)*(a+2)*u))*u+4*(2*a+5)*(36*((54*a+37)*a-10)*q*f-(cora-545
c    5a+1)*(a*(2*a+1)*(672*(2*a-1)+6*(2*a+3)*(17*a-14)*u)*f-5*(14*(((86*cora-546
c    6a+55)*a-3)*a-18)*q-a**2*(2*a+1)*(112*(2*a-1)*(3*a+2)+(2*a+3)*(7*(acora-547
c    7-1)*(a+2)*u-6*(2*a-1)*(24*f+7*(a-1)*(a+2)/w)/w)))/w))/w)/w)/w     cora-548
c     c(3)=b2+12*q*((8*((12*a+56)*a+59)-8*q-(2*a+3)*((32*a+98)*a-4)*u)*fcora-549
c    1+5*(a+2)*((38*a+92)*q-(((24*a+64)*a+14)*a+28)-(2*a+3)*(7*(a**2-1)*cora-550
c    2(a+2)*u-6*(2*a+5)*((10*a-4)*f+7*(a**2-1)*(a+2)/w)/w))/w)/w        cora-551
c     c(4)=b4-3*(((16*(((56*a+330)*a+619)*a+354+(3*a-6)*q)*q-(a+1)*(4*((cora-552
c    1(194*a+935)*a+1292)*a-36)*q*u+a*(2*a+1)*(32*((6*a+37)*a+70)-4*(((6cora-553
c    22*a+349)*a+524)*a-140)*u-35*(a-1)*(2*a+3)*(a+2)**2*u**2))))/(2*a+3cora-554
c    3)+4*(4*((46*a+213)*a+230)*q*f-(a+1)*((2*a+1)*((24*a+148)*a+280+(2*cora-555
c    4a+3)*((67*a+136)*a-140)*u)*f-5*(a+2)*(4*((118*a+257)*a-90)*q-4*a*(cora-556
c    52*a+1)*((66*a+127)*a-98)-(2*a+1)*(2*a+3)*(7*a*(a-1)*(a+2)*u-6*(2*acora-557
c    6+5)*((17*a-14)*f+7*a*(a+2)*(a-1)/w)/w))/w))/w)/w                  cora-558
c     if (x.eq.0) go to 43                                              cora-559
c     c(1)=c(1)-q*x*(3*a+6)*(8*((38*a+167)*a+171-3*q)*f+4*(((26*a+145)*acora-560
c    1+231)*a+106)*x+(40*a+64)*q*x+(2*a+3)*((8*a+32)*f*x**2-4*((35*a+101cora-561
c    2)*a+6)*f*u+4*(a+1)*(a+2)*(x**3-(9*a+4)*u*x))-4*(2*a+5)*((((44*a+94cora-562
c    3)*a-22)*a+28)-4*(19*a+44)*q-(2*a+3)*(4*(3*a+8)*f*x+(a+1)*(a+2)*(2*cora-563
c    4x**2-(13*a-7)*u)+10*(((11*a+59)*a-6)*f+(a+1)*(a+2)*((a+3)*x+(3*a+2cora-564
c    51)*(2*a-1)/w))/w))/w)/w                                           cora-565
c     c(2)=c(2)+x*(8*(((196*a+1104)*a+1901)*a+1026+(15*a-18)*q+12*(5*a+4cora-566
c    1)*f*x)*q+(a+1)*(32*((4*a+11)*a+18)*q*x**2-8*(((212*a+966)*a+1267)*cora-567
c    2a+54)*q*u+(2*a+1)*(8*((38*a+213)*a+318)*f*x+4*a*((((106*a+599)*a+9cora-568
c    312)*a-140)*u+((26*a+107)*a+46)*x**2-8*((6*a+37)*a+70))+(2*a+3)*(8*cora-569
c    4(a+6)*f*x**3-4*((47*a+170)*a+48)*f*u*x+a*(a+2)*(((87*a+67)*a-70)*ucora-570
c    5**2-4*(11*a+9)*u*x**2+4*x**4))))+3*(a+2)*(32*((24*a+107)*a+110)*f*cora-571
c    6q+(a+1)*(96*((4*a+17)*a+20)*q*x-(8*a+4)*(2*((6*a+37)*a+70)*f+a*((2cora-572
c    72*a+125)*a+194)*x+(2*a+3)*(((61*a+143)*a-70)*f*u+a*(a+2)*((9*a+4)*cora-573
c    8u-x**2)*x-(6*a+20)*f*x**2))+(8*a+20)*(((532*a+2246)*a-180)*q-(2*a+cora-574
c    91)*(4*a*((66*a+295)*a-98)-(2*a+3)*((22*a+60)*f*x+a*(a+2)*(2*x**2-(cora-575
c    a13*a-7)*u)+10*(((17*a+93)*a-42)*f+a*(a+2)*((a+3)*x+3*(a+7)*(2*a-1)cora-576
c    b/w))/w)))/w))/w)/w                                                cora-577
c     c(3)=c(3)+12*q*x*(2*(((28*a+148)*a+221)*a+106)+(6*a-4)*q+(2*a+3)*(cora-578
c    1(2*a+12)*f*x+(a+2)*((a+1)*(2*x**2-(13*a+8)*u)+5*((10*a+28)*f+2*(a+cora-579
c    21)*(a+2)*(x+(6*a+15)/w))/w)))/w                                   cora-580
c     c(4)=c(4)+3*x*((24*(2*a-1)*(a-2)*f*q-(4*a+4)*(((20*a+46)*a+108)*q*cora-581
c    1x+(2*a+1)*(((76*a+426)*a+636)*f+a*((26*a+107)*a+46)*x)))/(2*a+3)+(cora-582
c    24*a+4)*((2*a+1)*((35*a+130)*a+48)*f*u+(2*a+1)*(a*(a+2)*(9*(a+1)*u-cora-583
c    3x**2)*x-(2*a+12)*f*x**2)-(4*((38*a+169)*a+210)*q-(2*a+1)*(a*((44*acora-584
c    4+250)*a+388)-(2*a+3)*((12*a+40)*f*x-(a+2)*(a*((13*a+8)*u-2*x**2)-1cora-585
c    50*((11*a+30)*f+a*(a+2)*(x+(6*a+15)/w))/w))))/w))/w                cora-586
c     go to 43                                                          cora-587
c multipole lq=5 l1=l2-5                                                cora-588
c  37 bd=181440*den*s**2*dsqrt(q*((a+1)**2+f**2)*((a+2)**2+f**2)*((a-1)*cora-589
c    1*2+e**2)*((a+3)**2+f**2))*a**2                                    cora-590
c     b1=q*(2304*a*(2*a-1)-6912*q+864*(9*a+1)*q*u-288*a*((22*a+3)*a+5)*ucora-591
c    1+8*a*(((530*a+611)*a+12)*a+72)*u**2-8*((602*a+683)*a-60)*q*u**2+96cora-592
c    2*a*(a**2-1)*(2*a+5)*(2*a+3)*u**3)                                 cora-593
c     b2=24*q*f*(288-(204*a+36)*u+((89*a+141)*a-20)*u**2)               cora-594
c     b3=12*f*(q*(576-24*(37*a+3)*u+((718*a+582)*a-40)*u**2)+a*(a+1)*(2*cora-595
c    1a+1)*u*(96-(148*a+12)*u-((137*a+148)*a-180)*u**2))                cora-596
c     b4=q*(864*(9*a+1)*u-6912-8*(602*a**2+613*a-60)*u**2)+a*(2*a+1)*(23cora-597
c    104-288*(11*a-1)*u+8*((265*a+174)*a-54)*u**2+48*(2*a+3)*(2*a+5)*(a-cora-598
c    21)*u**3)                                                          cora-599
c     if (x.eq.0) go to 38                                              cora-600
c     b1=b1+x*q*((1176*f*u+((2040*a+2616)*u-1200-48*x**2)*x)*q+(((2944*acora-601
c    1+4432)*a+912)*x+8*((794*a+1535)*a+222)*f)*u-(16*((94*a+385)*a+216)cora-602
c    2+((368*a+1016)*a+600)*x**2)*x+(2*a+3)*((((608*a+632)*u-600-24*x**2cora-603
c    3)*x**2-3456-((1950*a+2614)*a-140)*u**2)*f+(a+1)*((120*a+152)*u*x**cora-604
c    43-((414*a+798)*a+20)*u**2*x-8*x**5)))                             cora-605
c     b2=b2+x*q*(1200*f*x-1176*q*u-24*((33*a+120)*a+38)*u-24*(53*a+60)*fcora-606
c    1*u*x+48*f*x**3+(a+1)*(3456+((738*a+1722)*a+60)*u**2+24*(25-(13*a+1cora-607
c    29)*u+x**2)*x**2))                                                 cora-608
c     b3=b3+x*((1200*f*x-24*((597*a+720)*a+74)*u-1176*q*u-(2808*a+2616)*cora-609
c    1f*u*x+48*f*x**3)*q+(a+1)*((10368-24*(113*a+79)*u*x**2+(72*x**2+180cora-610
c    20)*x**2+((11782*a+10730)*a-420)*u**2)*q+(2*a+1)*((((3090*a+3898)*acora-611
c    3+60)*u**2+3456+600*x**2-304*(14*a+3)*u-(680*a+456)*u*x**2+24*x**4)cora-612
c    4*f*x+a*(((8*x**2+184)*x**2+752)*x**2-2304-((3*(((187*a+479)*a-6)*acora-613
c    5-240)*u+4*((1175*a+624)*a-108))*u-96*(55*a-3))*u+(((570*a+1278)*a+cora-614
c    6356)*u-60*a-440-44*(3*a+4)*x**2)*u*x**2))))                       cora-615
c     b4=b4+x*((1176*f*u-1200*x+120*(17*a+12)*u*x-48*x**3)*q+(2*a+1)*((8cora-616
c    1*(397*a+114)*u-3456-10*((195*a+289)*a+6)*u**2-600*x**2+8*(76*a+57)cora-617
c    2*u*x**2-24*x**4)*f+a*x*(440*u-752-((414*a+1050)*a+356)*u**2-184*x*cora-618
c    3*2+8*(15*a+22)*u*x**2-8*x**4)))                                   cora-619
c  38 if (lt) go to 43                                                  cora-620
c     c(1)=b1+24*q*((60*((9*a+5)*u-8)*q+96*(a-1)*(2*a-1)-4*(((74*a+15)*acora-621
c    1+28)*a+3)*u-(2*a+3)*(a+2)*((137*a-37)*a-30)*u**2)*f+4*(30*((8*a-6)cora-622
c    2*a+5-7*q)*q+(a+2)*(5*((128*a+80)*a-33)*q-a*(((676*a+544)*a-201)*a-cora-623
c    3144))*u-(6*a-6)*((2*a-1)*(4*a-6)*a+(a+1)*(2*a+3)*(2*a+5)*a*(a+2)*ucora-624
c    4**2)+5*((12*(2*a-1)*(((50*a+153)*a+136)*a+39)-84*((10*a+19)*a+3)*qcora-625
c    5)*f+(a+2)*((2*a+3)*(2*a+5)*((37*a-17)*a-6)*u*f+6*(a*(2*a-1)*(((236cora-626
c    6*a+648)*a+625)*a+66)-3*(((140*a+294)*a+196)*a-105)*q+(2*a+3)*(2*a+cora-627
c    75)*(a*(a**2-1)*(2*a+6)*u-(14*a-7)*(((7*a+5)*a+6)*f+a*(a**2-1)*(2*acora-628
c    8+6)/w)/w))/w))/w)/w)/w                                            cora-629
c     c(2)=b3+8*((1440*q-288*(4*a**2+1)+12*(((168*a+132)*a+62)*a+3)*u-30cora-630
c    1*(68*a+30)*q*u)*q+(a+1)*(8*a+12)*(((338*a-83)*a-45)*q*u-(2*a+1)*a*cora-631
c    2*2*(12+(169*a-99)*u+(a-1)*(6*a+15)*u**2))*u+3*(((840*q-120*(4*a**2cora-632
c    3+5))*q-(2*a+3)*(40*((65*a+30)*a-11)*q-5*a*(2*a+1)*(a+1)*(12*(25*a-cora-633
c    413)+(a+2)*(37*a-30)*u))*u)*f+4*((630*((10*a+15)*a+2)*q-90*((((200*cora-634
c    5a+420)*a+162)*a-63)*a-26))*q+(2*a+3)*((a+1)*(1512*(4*a**2-1)*a**2-cora-635
c    6(a+2)*(30*((44*a-18)*a-5)*q-6*a**2*(2*a+1)*(118*a-83+(a-1)*(2*a+5)cora-636
c    7*u))*u)+5*(42*(((70*a+129)*a+53)*a-30)*q*f-(a+1)*(a*(2*a+1)*(252*(cora-637
c    82*a-1)*(4*a+5)+7*(a+2)*(2*a+5)*(7*a-6)*u)*f-6*(a+2)*(14*(((56*a+36cora-638
c    9)*a+4)*a-15)*q-a**2*(2*a+1)*((4*a+3)*54*(2*a-1)+(2*a+5)*((a-1)*(2*cora-639
c    aa+6)*u-7*(2*a-1)*(9*f+(a-1)*(2*a+6)/w)/w)))/w))/w))/w)/w)/w       cora-640
c     c(3)=b2+96*q*((120-25*(4*a+3)*u)*q-24*(4*a**2+1)+((((88*a+72)*a+12cora-641
c    1)*a+3)+3*(a**2-1)*(2*a+3)*(2*a+5)*u)*u+5*((42*q-(24*a**2+30))*f-(acora-642
c    2+2)*((2*a+3)*(25*a-11)*u*f-6*(21*(4*a+1)*q-3*(((32*a+20)*a-4)*a-13cora-643
c    3)-(2*a+3)*(2*a+5)*((a**2-1)*u-7*((5*a-3)*f+(a**2-1)*(2*a+6)/w)/w))cora-644
c    4/w))/w)/w                                                         cora-645
c     c(4)=b4+24*((60*((9*a+5)*u-8)*q+(a+1)*(2*a+1)*(96-4*(37*a+3)*u-((1cora-646
c    137*a+148)*a-180)*u**2))*f+4*((30*((8*a+6)*a+5)-210*q)*q+(2*a+3)*((cora-647
c    2a+1)*(10*(32*a-11)*q*u-(2*a+1)*(a*(12+(169*a-99)*u)+3*(a-1)*(2*a+5cora-648
c    3)*a*u**2))-5*(84*(5*a+1)*q*f-(a+1)*((2*a+1)*(12*(25*a-13)+(a+2)*(3cora-649
c    47*a-30)*u)*f-6*(a+2)*(105*(2*a-1)*q-(2*a+1)*((118*a-83)*a+(2*a+5)*cora-650
c    5(a*(a-1)*u-7*((7*a-6)*f+a*(a-1)*(2*a+6)/w)/w)))/w))/w))/w)/w      cora-651
c     if (x.eq.0) go to 43                                              cora-652
c     c(1)=c(1)-q*x*(720*(((6*a+23)*a+19)+q)*f*x+(a+2)*(720*q*x**2-384*(cora-653
c    1(22*a-5)*a+3)+11520*q+24*(((430*a+255)*a+29)*a+6)*u-72*(173*a+107)cora-654
c    2*q*u+120*((2*a+17)*a+9)*x**2+(2*a+3)*(144*f*x**3-24*(95*a+71)*f*u*cora-655
c    3x+(a+1)*(6*((123*a+137)*a-120)*u**2-24*(13*a+14)*u*x**2+24*x**4)))cora-656
c    4-24*((2*a+5)*((20*((10*a-7)*a+9)-420*q)*f+(a+2)*((10*((14*a-1)*a+3cora-657
c    5)-180*q)*x+(2*a+3)*((199*a-31)*f*u-20*f*x**2+(a+1)*((21*a+13)*u-2*cora-658
c    6x**2)*x)))+5*(a+2)*(4*((((220*a+1340)*a+973)*a+123)*a-234)-84*((10cora-659
c    7*a+55)*a+21)*q+(2*a+3)*(2*a+5)*((a+1)*(a+3)*((15*a-8)*u-2*x**2)-30cora-660
c    8*(a+3)*f*x-6*(21*((2*a+13)*a-3)*f+(a+1)*(a+3)*((2*a+7)*x+(14*a-7)*cora-661
c    9(a+8)/w))/w))/w)/w)/w                                             cora-662
c     c(2)=c(2)+x*(720*((12*a+32)*a+19+q)*q*x+(2*a+3)*((7680+480*x**2-48cora-663
c    1*(222*a+107)*u)*f*q+(a+1)*((288*x**2-48*(127*a+71)*u)*q*x+(2*a+1)*cora-664
c    2(((48*x**2+720)*x**2-768+(32*(62*a+3)+16*((168*a+139)*a-90)*u-(920cora-665
c    3*a+672)*x**2)*u)*f+a*x*((8*x**2+40-(120*a+152)*u)*x**2+((414*a+798cora-666
c    4)*a+20)*u**2-1408+(2280*a+736)*u))))+6*((a+2)*((4200*q-200*((20*a+cora-667
c    58)*a+9))*q+(2*a+3)*(1200*f*q*x+(a+1)*((400*x**2-(4960*a-620)*u)*q+cora-668
c    6(2*a+1)*((40*x**2-200-(548*a+260)*u)*f*x+a*((((123*a+137)*a-120)*ucora-669
c    7+(2452*a-792))*u+96+4*x**2*(x**2-35-(13*a+14)*u))))))+(8*a+12)*(42cora-670
c    80*((10*a+45)*a+14)*f*q-(a+1)*(240*(2*a+1)*((10*a+45)*a-13)*f-(a+2)cora-671
c    9*(450*(2*a+5)*q*x+(2*a+1)*(2*a+5)*(30*f*x**2-(274*a-120)*f*u+a*x*(cora-672
c    a2*x**2-220-(21*a+13)*u))+5*(42*((42*a+231)*a-45)*q-(2*a+1)*(8*a*((cora-673
c    b118*a+649)*a-249)+(a+3)*(2*a+5)*(a*(15*a-8)*u-42*f*x-2*a*x**2))+(1cora-674
c    c2*a+6)*(2*a+5)*(28*((2*a+13)*a-6)*f+a*(a+3)*((2*a+7)*x+(14*a-7)*(acora-675
c    d+8)/w))/w)/w)))/w)/w)/w                                           cora-676
c     c(3)=c(3)+24*x*q*((30*q+10*((4*a+16)*a+9))*x+(2*a+3)*((160-(124*a+cora-677
c    1114)*u+10*x**2)*f+(a+1)*(2*x**2-(21*a+28)*u)*x)+(5*a+10)*(126*q-2*cora-678
c    2((52*a+4)*a+15)+(2*a+3)*(18*f*x+(a+1)*(2*x**2-(15*a+13)*u))+(12*a+cora-679
c    318)*(2*a+5)*(14*f+(a+1)*(x+(7*a+21)/w))/w)/w)/w                   cora-680
c     c(4)=c(4)-x*(720*f*q*x+(a+1)*((11520+720*x**2-72*(173*a+114)*u)*q-cora-681
c    1(2*a+1)*((24*(95*a+84)*u-2160-144*x**2)*f*x+a*(4224-24*(215*a+92)*cora-682
c    2u-6*((123*a+287)*a+10)*u**2-120*x**2+24*(13*a+19)*u*x**2-24*x**4))cora-683
c    3)+24*(2*a+3)*(420*f*q+(a+1)*(180*q*x-7*a*(2*a+1)*(3*a+4)*u*x-(2*a+cora-684
c    41)*((100+(199*a+130)*u-20*x**2)*f+a*x*(70-2*x**2))+5*(a+2)*(420*q+cora-685
c    5(2*a+1)*(30*f*x+a*(2*x**2-220-(15*a+13)*u)+6*(2*a+5)*(21*f+a*(x+(7cora-686
c    6*a+21)/w))/w))/w))/w)/w                                           cora-687
c     go to 43                                                          cora-688
c  39 if ((x.ne.0).or.(mod(ll,2).ne.1).or.(ll.eq.7)) go to 69           cora-689
c     go to ( 40 , 69 , 41 , 69 , 42 , 69 , 69 ) , ll                   cora-690
c multipole lq=6 l1=l2                                                  cora-691
c  40 bd=120*den*a**2*(2*a+7)*(2*a+5)*(a+2)*(a+3)*(a+4)*dsqrt(s*q*p*((a+cora-692
c    11)**2+f**2)*((a+1)**2+e**2))*s**2                                 cora-693
c     b1=p*q*((8*(((154*a-205)*a-376)*a-140+((47*a-282)*a-143-63*q)*q)+4cora-694
c    1*((((47*a+26)*a-553)*a-752)*a-280-((79*a+282)*a+143)*q)*u)/(a-1)+2cora-695
c    2*(2*a+7)*(2*a+5)*(a+1)**2*u**2)                                   cora-696
c     b2=(240*(2*a+1)**2*(a-14)+24*((20*a-336)*a-143)*q-1512*q**2-6*((((cora-697
c    136*a+836)*a+2797)*a+2374)*a+560+(((18*a+275)*a+726)*a+286)*q+(a+1)cora-698
c    2*(((26*a+146)*a+210)*a+35)*u)*u)/(2*a+3)                          cora-699
c     b3=p*f*(b2+a*(2*a+4)*u*(54*q+6*(38*a+29)+3*(a+1)*(9*a+29)*u))     cora-700
c     b2=q*f*b2                                                         cora-701
c     b4=(((((((32*a-216)*a-1692)*a-2272)*a+454)*a+1402)*a+210)*q*u**2+(cora-702
c    12*a-3)*((16*a+8)*((107*a-444)*a-140)+8*((((47*a-176)*a-924)*a-724)cora-703
c    2*a-140)*u+(8*((47*a-390)*a-143)-4*((142*a+390)*a+143)*u-504*q)*q)*cora-704
c    3q+a**2*(2*a+1)*(480*(2*a+1)*(a-14)+(4*(((214*a-849)*a-3808)*a-2100cora-705
c    4)+((((204*a+752)*a-232)*a-2550)*a-1680)*u)*u))/((a+1)*(2*a+3))+a**cora-706
c    52*(2*a+5)*(2*a+7)*(2*a+1)*(a+1)*u**3                              cora-707
c     if (lt) go to 43                                                  cora-708
c     c(1)=b1+12*p*q*(a+2)*((58+76*a+18*q+(a+1)*(9*a+29)*u)*f-(2*a+5)*((cora-709
c    128*a+32)*a+14+(4*a-6)*q+(a+1)*((a+1)*(2*a+7)*u+10*(a+3)*(2*f-(a+1)cora-710
c    2*(2*a+7)/w)/w))/w)/w                                              cora-711
c     c(2)=b3-2*p*(2*a*((((48*a+16)*a-570)*a-703)*a-210)*u+(2*a-3)*((((4cora-712
c    1*a-34)*a-172)*a-116)*u+8*((5*a-48)*a-29)-72*q)*q-a*(2*a+1)*(40*(2*cora-713
c    2a+1)*(14-a)-(2*a+7)*(2*a+5)*(a+1)**2*u**2)-6*(a+2)*(5*((14-a)*(2*acora-714
c    3+1)**2-(a-2)*(2*a-3)*q-(a+1)*(2*a+1)*((a+1)*a-7)*u)*f+(2*a+5)*((((cora-715
c    44*a+6)*a+92)*a+60)*q+(2*a+1)*((a-14)*a*(4*a+2)+(a+1)*(a*(a+1)*(2*acora-716
c    5+7)*u-10*(a+3)*(7*f+(2*a+7)*a*(a+1)/w)/w)))/w)/w)/w               cora-717
c     c(3)=b2+2*q*(a*((((16*a+600)*a+2332)*a+2298)*a+700)*u+(2*a-3)*((((cora-718
c    14*a+70)*a+212)*a+116)*u-8*((5*a-48)*a-29)+72*q)*q+40*(2*a+1)**2*a*cora-719
c    2(14-a)+3*a*(2*a+5)*(2*a+7)*(a+1)**2*u**2+6*(a+2)*(5*((14-a)*(2*a+1cora-720
c    3)**2-(a-2)*(2*a-3)*q+(a+1)*((8*a+28)*a+7)*u)*f+(2*a+5)*((((4*a+6)*cora-721
c    4a+92)*a+60)*q+2*(a-14)*a*(2*a+1)**2-5*a*(a+1)**2*(2*a+7)*u-10*(a+3cora-722
c    5)*(a+1)*(2*a+1)*(7*f+(2*a+7)*a*(a+1)/w)/w)/w)/w)/w                cora-723
c     c(4)=b4+6*(2*f*((2*a-3)*(a-2)*(((18*a+58)*a+29)*u+58*(2*a+1)+18*q)cora-724
c    1*q+a*(2*a+1)*(40*(2*a+1)*(a-14)+(((58*a-123)*a-906)*a-560)*u+(a+1)cora-725
c    2*(((9*a+43)*a+34)*a-35)*u**2))/(2*a+3)-((((((16*a**2+60)*a+820)*a+cora-726
c    3794)*a+140)*u+4*(2*a-3)*(2*a-5)*(a-2)*q)*q-(2*a+1)*(a**2*(40*(14-acora-727
c    4)*(2*a+1)-(a+1)**2*(2*a+5)*(2*a+7)*u**2)-4*(((24*a-44)*a+257)*a+70cora-728
c    5)*q-(((48*a-8)*a-566)*a-420)*a**2*u+10*(a+2)*(4*((14-a)*(2*a+1)*a-cora-729
c    6((2*a+2)*a+15)*q-a*(a+1)*((a+1)*a-7)*u)*f+(2*a+5)*(2*(a-14)*(2*a+1cora-730
c    7)*a**2+2*(((2*a+9)*a+43)*a+21)*q+a*(a+1)*(a*(a+1)*(2*a+7)*u+(4*a+2cora-731
c    8)*(a+3)*((a+7)*2*f+(2*a+7)*a*(a+1)/w)/w))/w)/w))/w)/w             cora-732
c     go to 43                                                          cora-733
c multipole lq=6 l1=l2-2                                                cora-734
c  41 bd=2520*den*a**2*(2*a+5)*(2*a+7)*(a+2)*(a+3)*(a+4)*s*dsqrt(s*q*p*(cora-735
c    1(a+1)**2+f**2)*((a+2)**2+f**2))                                   cora-736
c     b1=2*p*q*(120*((((2*a+57)*a-117)*a-306)*a-140+((11*a-129)*a-113-21cora-737
c    1*q)*q)/(a-1)-((((74*a-865)*a-5208)*a-7344)*a-3360)*u+((266*a+863)*cora-738
c    2a+312)*q*u-3*(a+1)*(a+2)*(2*a+3)*(2*a+5)*(2*a+7)*u**2)            cora-739
c     b2=6*q*f*((120*((2*a-147)*a-113-21*q)*q+60*((((4*a-56)*a-261)*a-25cora-740
c    19)*a-56)*u+(((86*a-573)*a-2171)*a-312)*q*u-16800*(a+1)*(2*a+1))/(2cora-741
c    2*a+3)+(a+2)*(((43*a+193)*a+210)*a+105)*u**2)                      cora-742
c     b3=3*p*((240*((2*a-147)*a-113-21*q)*q+40*(a+1)*(2*a+1)*(((2*a+63)*cora-743
c    1a+69)*a-168)*u+(((892*a+1374)*a-2182)*a-624)*q*u-33600*(a+1)*(2*a+cora-744
c    21))/(2*a+3)-(a+1)*(a+2)*(2*a+1)*((19*a-6)*a-210)*u**2)*f          cora-745
c     b4=(((2*a-3)*(240*((((2*a+69)*a-369)*a-534)*a-140+((11*a-165)*a-11cora-746
c    13-21*q)*q)*q+((((532*a-1326)*a-5422)*a-624)*q-((((148*a-4110)*a+41cora-747
c    230)*a+45120)*a+40512)*a-6720)*q*u)/(a+1)+240*a**2*(2*a+1)*((a+2)*(cora-748
c    3(2*a+59)*a-189)*u-840))/(2*a+3)-(2*(((((24*a-26)*a+317)*a+2298)*a+cora-749
c    42001)*a+630)*q+a**2*(2*a+1)*(((74*a-1068)*a-4812)*a-3360+3*(a+2)*(cora-750
c    52*a+3)*(2*a+5)*(2*a+7)*u))*u**2)                                  cora-751
c     if (lt) go to 43                                                  cora-752
c     c(1)=b1+6*p*q*(a+2)*((360*q+40*((2*a+53)*a+57)-(2*a+3)*((19*a+37)*cora-753
c    1a-72)*u)*f-(4*a+10)*(20*(2*a-3)*q+10*(((2*a+45)*a+75)*a+42)-(a+1)*cora-754
c    2(a+2)*(6*a+9)*(2*a+7)*u+(a+3)*(20*a+30)*((a+16)*f+(a+2)*(6*a+21)*(cora-755
c    3a+1)/w)/w)/w)/w                                                   cora-756
c     c(2)=b3+2*p*((2*a-3)*(240*(3*q-(a-21)*a+19)-(a+1)*((116*a+166)*a-4cora-757
c    132)*u)*q+a*(a+1)*(2*a+1)*(16800-(20*(((2*a+63)*a+174)*a+42)-(a+2)*cora-758
c    2(6*a+9)*(2*a+5)*(2*a+7)*u)*u)-(3*a+6)*((20*(a-2)*(2*a-3)*q-(a+1)*(cora-759
c    32*a+1)*(840-(2*a+3)*((a+30)*a+84)*u))*5*f-(4*a+10)*(a+1)*(30*((2*acora-760
c    4+7)*a+48)*q-(2*a+1)*(a*(840+(3*a+6)*(2*a+3)*(2*a+7)*u)-(a+3)*(20*acora-761
c    5+30)*((7*a+42)*f+a*(a+2)*(6*a+21)/w)/w))/w)/w)/w                  cora-762
c     c(3)=b2+6*q*((2*a-3)*(80*(3*q-(a-21)*a+19)-(((12*a-26)*a-222)*a-14cora-763
c    14)*u)*q-40*a*((((4*a-6)*a-90)*a-138)*a-63)*u+a*(a+1)*(5600*(2*a+1)cora-764
c    2-3*(a+2)*(2*a+3)*(2*a+5)*(2*a+7)*u**2)+10*(a+2)*((420*(a+1)*(2*a+1cora-765
c    3)-10*(a-2)*(2*a-3)*q-(2*a+3)*(((10*a+34)*a+21)*a+42)*u)*f+(6*a+15)cora-766
c    4*((a+1)*(((4*a+14)*a+96)*q+a*((a+2)*(2*a+3)*(2*a+7)*u-56*(2*a+1)))cora-767
c    5-14*(a+3)*(2*a+3)*((3*a-2)*f+a*(a+2)*(2*a+7)*(a+1)/w)/w)/w)/w)/w  cora-768
c     c(4)=b4+6*(((a-2)*(2*a-3)*(40*(9*q+(2*a+73)*a+57)-(((38*a-49)*a-43cora-769
c    13)*a-216)*u)*q+a*(a+1)*(2*a+1)*(40*(((2*a+63)*a+69)*a-168)*u-33600cora-770
c    2-(a+2)*(2*a+3)*((19*a-6)*a-210)*u**2))*f/(2*a+3)-(20*(((((4*a+132)cora-771
c    3*a+35)*a+1509)*a+1812)*a+420+(a-2)*(4*a-6)*(2*a-5)*q)*q-(a+1)*(4*(cora-772
c    4((((12*a+80)*a+625)*a+1710)*a+1158)*a+630)*q*u+a**2*(2*a+1)*(16800cora-773
c    5-(20*(((2*a+63)*a+174)*a+42)-(3*a+6)*(2*a+3)*(2*a+5)*(2*a+7)*u)*u)cora-774
c    6)+(10*a+20)*((((((4*a+132)*a+371)*a+1173)*a+720)*q-a*(a+1)*(2*a+1)cora-775
c    7*(840-(2*a+3)*((a+30)*a+84)*u))*2*f+(6*a+15)*(a+1)*(((((8*a+60)*a+cora-776
c    8220)*a-30)*a+252)*q+a*(2*a+1)*(280*a+(2*a+3)*(a*(a+2)*(2*a+7)*u-14cora-777
c    9*(a+3)*((2*a+12)*f+a*(a+2)*(2*a+7)/w)/w)))/w)/w)/w)/w             cora-778
c     go to 43                                                          cora-779
c multipole lq=6 l1=l2-4                                                cora-780
c  42 bd=181440*den*a**2*(a+2)*(a+3)*(a+4)*(2*a+5)*(2*a+7)*s*dsqrt(s*q*(cora-781
c    1(a+1)**2+f**2)*((a+2)**2+f**2)*((a+3)**2+f**2))                   cora-782
c     b1=-q*((4320*((7*q+(a+78)*a+103)*q+((10*a+255)*a+638)*a+420)*q+288cora-783
c    10*a*(a+2)*(a+3)*(a+4)*(2*a+5)*(2*a+7))/(a-1)-72*((5*((14*a-13)*a+3cora-784
c    20)*q+(((38*a+833)*a+243)*a+678)*a+2520)*q+a*(((((148*a+2304)*a+138cora-785
c    379)*a+31194)*a+31336)*a+13440))*u+(a+2)*(4*a+10)*(a*((((814*a+8467cora-786
c    4)*a+23265)*a+30834)*a+16632)+(((338*a+1757)*a+8199)*a+8190)*q-24*acora-787
c    5*(a+1)*(a+3)*(2*a+3)*(2*a+5)*(2*a+7)*u)*u**2)                     cora-788
c     b2=-6*q*f*(2160*((4*a+84)*a+103+7*q)*q/(2*a+3)+1440*(((2*a+33)*a+2cora-789
c    126)*a+210)-(a+2)*(12*(((62*a+623)*a+126)*a-1260)+180*(4*a-5)*q+(a+cora-790
c    23)*(2*a+5)*((41*a+591)*a+910)*u)*u)                               cora-791
c     b3=-3*f*(((30240*q+4320*((4*a+84)*a+103)-360*(4*a**2+5)*(5*a-6)*u)cora-792
c    1*q-24*(((((284*a+3480)*a+25)*a-690)*a+396)*a-7560)*u)*q/(2*a+3)+28cora-793
c    280*(((2*a+33)*a+226)*a+210)*q+(2*a+4)*((((98*a-2563)*a-7346)*a-197cora-794
c    375)*a-13650)*q*u**2+a*(a+1)*(2*a+1)*(480*(((2*a+33)*a+226)*a+840)+cora-795
c    4(a+2)*((a+3)*(2*a+5)*((233*a+1798)*a+2520)*u-4*(((262*a+3523)*a+16cora-796
c    5926)*a+17640))*u)*u)                                              cora-797
c     b4=-(4320*(2*a-3)*((7*q+(a+90)*a+103)*q+7*(((2*a+57)*a+118)*a+60))cora-798
c    1*q/((a+1)*(2*a+3))-72*(2*a-3)*((35*a-50)*q+((19*a+425)*a-66)*a-840cora-799
c    2)*q*u+(a+2)*(4*a+10)*(((338*a+1567)*a+8439)*a+8190)*q*u**2+a*(4*a+cora-800
c    32)*(1440*(((2*a+33)*a+226)*a+840)-36*((((74*a+1109)*a+6154)*a+9304cora-801
c    4)*a+3360)*u+(a+2)*(2*a+5)*(((407*a+3765)*a+6714)*a+4536-12*(a+3)*(cora-802
c    52*a+3)*(2*a+5)*(2*a+7)*u)*u**2))                                  cora-803
c     if (lt) go to 43                                                  cora-804
c     c(1)=b1+6*q*(a+2)*((240*(9*q+(8*a+98)*a+141)*q+4*(((((524*a+7460)*cora-805
c    1a+40945)*a+88825)*a+77406)*a+17640)*u-60*(((6*a-7)*a+23)*a-30)*q*ucora-806
c    2-(a+3)*(2*a+5)*(480*(a+4)*(2*a+7)+(a+2)*(2*a+3)*((233*a+1373)*a+42cora-807
c    30)*u**2))*f+4*(2*a+5)*((a+2)*(5*(((116*a+1028)*a+3015)*a+1953)*q-acora-808
c    4*((((292*a+2908)*a+9639)*a+5517)*a-756))*u-60*((((14*a+153)*a+467)cora-809
c    5*a+483)+(2*a-3)*q)*q+(a+3)*(12*(2*a+7)*a*(5*(a+4)*(2*a-3)-(a+1)*(acora-810
c    6+2)*(2*a+3)*(2*a+5)*u**2)+5*((12*(a+4)*(a-2)*(2*a-3)*(2*a+7)-12*((cora-811
c    722*a+175)*a+318)*q)*f+(a+2)*((2*a+3)*(2*a+5)*((85*a+409)*a+84)*u*fcora-812
c    8-6*(2*a+7)*(15*((20*a+92)*a+51)*q-(a+4)*a*((332*a+368)*a+141)-(2*acora-813
c    9+3)*(2*a+5)*(4*a*(a+1)*(a+3)*u-7*(a+4)*((19*a+3)*f+8*a*(a+1)*(a+3)cora-814
c    a/w)/w))/w))/w))/w)/w                                              cora-815
c     c(2)=b3+2*(1440*(((((8*a+132)*a+906)*a+2133)*a+2116)*a+840+(2*a-3)cora-816
c    1*((a+36)*a+47+3*q)*q)*q-24*((((((504*a+7644)*a+39370)*a+119625)*a+cora-817
c    2174926)*a+106596)*a+17640+(10*a-15)*(((8*a-6)*a+13)*a-30)*q)*q*u+(cora-818
c    3a+1)*(8*a+12)*((a+2)*(2*a+5)*(((362*a+3013)*a+8436)*a+1890)*q*u+a*cora-819
c    4*2*(2*a+1)*(60*(((2*a+33)*a+226)*a+840)-(a+2)*(2*a+5)*((73*a+822)*cora-820
c    5a+3024+(a+3)*(12*a+30)*(2*a+7)*u)*u))*u+((3*a+6)*(5*f*(120*((((8*acora-821
c    6+116)*a+682)*a+1405)*a+966-(a-2)*(2*a-3)*q)*q-(2*a+3)*(4*((((140*acora-822
c    7+1808)*a+7627)*a+13909)*a+6510)*q-a*(a+1)*(2*a+1)*(12*(((2*a+33)*acora-823
c    8+226)*a+840)+(a+2)*(a+3)*(10*a+25)*(17*a+84)*u))*u)+(4*a+10)*(12*(cora-824
c    9a+2)*(30*(((8*a+62)*a+159)*q-((((4*a+40)*a+151)*a+94)*a+84))*q-(a+cora-825
c    a1)*(2*a+3)*(5*(((68*a+564)*a+1285)*a+210)*q-a**2*(2*a+1)*(((166*a+cora-826
c    b1399)*a+3108)+(a+3)*(4*a+10)*(2*a+7)*u))*u)+10*(a+3)*(42*(2*a+3)*(cora-827
c    c((70*a+561)*a+1241)*a+510)*q*f-(2*a+3)*(a+1)*(7*a*(a+2)*(2*a+1)*(2cora-828
c    d*a+5)*(19*a+84)*u*f+(2*a+7)*(1008*a*(a+4)*(2*a+1)*f-(6*a+12)*(4*((cora-829
c    e194*a+797)*a+105)*q-a*(2*a+1)*(432*a*(a+4)+(2*a+5)*(4*a*(a+3)*u-7*cora-830
c    f(a+4)*(27*f+8*a*(a+3)/w)/w)))/w)))/w)/w))/w)/w                    cora-831
c     c(3)=b2+24*q*(2*(60*(((((8*a+132)*a+906)*a+2133)*a+2116)*a+840+(2*cora-832
c    1a-3)*(3*q+(a+36)*a+47)*q)-(a+2)*(2*a+5)*((((112*a+1218)*a+3459)*a+cora-833
c    24242)*a+1764+5*(2*a-3)**2*q-3*(a+1)*(a+3)*(2*a+3)*(2*a+5)*(2*a+7)*cora-834
c    3u)*u)+5*(a+2)*(30*(((((8*a+116)*a+682)*a+1405)*a+966)-(a-2)*(2*a-3cora-835
c    4)*q)*f-(a+2)*(2*a+5)*((a+3)*(2*a+3)*(37*a+217)*u*f+6*(6*((((4*a+40cora-836
c    5)*a+151)*a+94)*a+84)-2*((24*a+186)*a+477)*q+(2*a+3)*(2*a+5)*(2*(a+cora-837
c    61)*(a+3)*(2*a+7)*u-7*(a+3)*((11*a+51)*f+4*(2*a+7)*(a+1)*(a+3)/w)/wcora-838
c    7))/w))/w)/w                                                       cora-839
c     c(4)=b4+6*((240*(a-2)*(2*a-3)*(9*q+(8*a+118)*a+141)*q/(2*a+3)-60*(cora-840
c    1a**2-4)*(2*a-3)*(3*a-5)*q*u-(a+1)*(2*a+1)*(480*(((2*a+33)*a+226)*acora-841
c    2+840)+(a+2)*((a+3)*(2*a+5)*((233*a+1798)*a+2520)*u**2-4*(((262*a+3cora-842
c    3523)*a+16926)*a+17640)*u)))*f-4*(60*(7*(((((4*a+60)*a+291)*a+969)*cora-843
c    4a+1409)*a+690)+(a-2)*(2*a-3)*(2*a-5)*q)*q-(a+1)*(2*a+3)*(60*a*(2*acora-844
c    5+1)*(((2*a+33)*a+226)*a+840)+(a+2)*(2*a+5)*(5*((58*a+473)*a+1302)*cora-845
c    6q-a*(2*a+1)*((73*a+822)*a+3024+6*(a+3)*(2*a+5)*(2*a+7)*u))*u)+5*(acora-846
c    7+2)*(2*a+3)*(12*(((22*a+273)*a+1001)*a+1590)*q*f-(a+1)*(12*(2*a+1)cora-847
c    8*(((2*a+33)*a+226)*a+840)*f+(a+2)*(2*a+5)*(5*(a+3)*(2*a+1)*(17*a+8cora-848
c    94)*u*f-6*(15*((20*a+164)*a+357)*q-(2*a+1)*(a*((166*a+1399)*a+3108)cora-849
c    a+(a+3)*(2*a+5)*(a*(4*a+14)*u-7*((19*a+84)*f+4*a*(2*a+7)*(a+3)/w)/wcora-850
c    b)))/w)))/w)/w)/w                                                  cora-851
   43 a1=-2*a**2*y*b1*z                                                 cora-852
      a2=y*((2*a+1)*((2*(a**2-a)**2*(1+s**2)+y**2*(a**2-a-.5))*b1-y*(p*bcora-853
     12+q*b3))+(4*a-2)*(a+1)**2*p*q*b4)*z                               cora-854
      a3=-y*((2*a-1)*((2*(a**2+a)**2*(1+s**2)+y**2*(a**2+a-.5))*b4-y*(b2cora-855
     1+b3))+(4*a+2)*(a-1)**2*b1)*z                                      cora-856
      a4=2*a**2*y*b4*z                                                  cora-857
      if (x.eq.0) go to 46                                              cora-858
      a1=a1+x*2*p*((a*x-2*f)*b2-2*q*(a+1)*b4)                           cora-859
      a2=a2+x*p*((2*q*((2*a+3)*(a+1)*f+((2*a+3)*a-4)*e*s)-2*p*(2*a-3)*(2cora-860
     1*a+1)*f+(2*a+1)*((((2*a-1)*a-8)*a+5)*f-s*((a+1)*((6*a-9)*a+1)*e-s*cora-861
     2((6*a-7)*(a**2-1)*f-s*((((2*a-5)*a+2)*a-1)*e)))))*b2+2*q*(a+1)*((2cora-862
     3*a+3)*(q+p)+(2*a-1)*(4*e*f*s+(1+s**2)*((2*a-4)*a-3)))*b4)         cora-863
      a3=a3+x*((2*p*((2*a-3)*(a-1)*e*s+f*((2*a-3)*a-4))-2*q*e*s*(2*a+3)*cora-864
     1(2*a-1)-(2*a-1)*((((2*a+5)*a+2)*a+1)*f-s*((6*a+7)*(a**2-1)*e-s*((acora-865
     2-1)*((6*a+9)*a+1)*f-s*((((2*a+1)*a-8)*a-5)*e)))))*b2+(-4*p*q*((2*acora-866
     3+1)*a+2)-(2*a-1)*(2*s*e*f*(2*a+3)*(q+p+s**2+1)-a**2*(((a+3)*a+2.5)cora-867
     4*(1+s**4)-s**2*((2*a-2)*a-7))+a*(a-1)*(2*a+3)*(1+s**2)*(p+q)-(s**2cora-868
     5-1)*((2*a+4)*a+.5)*(q-p)))*b4)                                    cora-869
      a4=a4+x*2*(((a-1)*(p+q)+y**2)*b4+(2*e*s-a*x)*b2)                  cora-870
   44 a4=a4+x*2*((2*f+a*x)*b3-2*(a-1)*b1)                               cora-871
   45 a1=a1+x*2*(((a+1)*(q+p)-y**2)*b1-q*(a*x+2*e*s)*b3)                cora-872
      a2=a2+x*((-4*p*q*(2*a**2-a+2)-(2*a+1)*(2*s*e*f*(2*a-3)*(q+p+s**2+1cora-873
     1)+a**2*(((a-3)*a+2.5)*(1+s**4)-s**2*((2*a+2)*a-7))+a*(a+1)*(2*a-3)cora-874
     2*(1+s**2)*(p+q)+(s**2-1)*((2*a-4)*a+.5)*(q-p)))*b1+q*(2*p*((2*a+3)cora-875
     3*(a+1)*e*s+f*((2*a+3)*a-4))-2*q*e*s*(2*a-3)*(2*a+1)-(2*a+1)*((((2*cora-876
     4a-5)*a+2)*a-1)*f-s*((6*a-7)*(a**2-1)*e-s*((a+1)*((6*a-9)*a+1)*f-s*cora-877
     5((((2*a-1)*a-8)*a+5)*e)))))*b3)                                   cora-878
      a3=a3+x*(2*(a-1)*((2*a-3)*(q+p)+(2*a+1)*(4*e*f*s+(1+s**2)*((2*a+4)cora-879
     1*a-3)))*b1+(2*q*((2*a-3)*(a-1)*f+((2*a-3)*a-4)*e*s)-2*p*(2*a+3)*(2cora-880
     2*a-1)*f+(2*a-1)*((((2*a+1)*a-8)*a-5)*f-s*((a-1)*((6*a+9)*a+1)*e-s*cora-881
     3((6*a+7)*(a**2-1)*f-s*((((2*a+5)*a+2)*a+1)*e)))))*b3)             cora-882
   46 b(1)=a1*dsqrt(((a-1)**2+e**2)*((a-1)**2+f**2))*(2*a-3)/(bd*a*(2*a-cora-883
     11))                                                               cora-884
      b(2)=a2/(a*s*bd*(2*a+1))                                          cora-885
      b(3)=a3/(a*s*bd*(2*a-1))*dsqrt(p*q)                               cora-886
      b(4)=a4*dsqrt(p*q*((a+1)**2+e**2)*((a+1)**2+f**2))*(2*a+3)/(bd*a*(cora-887
     12*a+1))                                                           cora-888
      if (lt) return                                                    cora-889
      z=-2*bd*v*w*dsqrt(s)/den                                          cora-890
      bd=a**2*bd*dsqrt(v*w)**3                                          cora-891
      a1=a1*(a-1)**2                                                    cora-892
      a4=a4*(a+1)**2                                                    cora-893
      c(1)=c(1)/z-(a+y*w*(.5*a-1)/(a-1)**2)*(2*a-1)*a1/bd               cora-894
      c(2)=(c(2)/z+w*(a1-p*a4)/bd)*dsqrt(q)                             cora-895
      c(3)=(c(3)/z+w*(a1-q*a4)/bd)*dsqrt(p)                             cora-896
      c(4)=(c(4)/z+(a+y*w*(.5*a+1)/(a+1)**2)*(2*a+1)*a4/bd)*dsqrt(p*q)  cora-897
      return                                                            cora-898
c for neutrons ( coulomb parameter 0.)                                  cora-899
   47 x=w**2                                                            cora-900
c     go to ( 48 , 49 , 52 , 55 , 59 , 63 ) , lq                        cora-901
      go to ( 48 , 49 , 52 , 55 , 69 , 69 ) , lq                        cora-902
   48 if ((ll.eq.1).or.(u.eq.0)) go to 70                               cora-903
c multipole lq=1 l1=l2-1 (useless)                                      cora-904
      b(2)=(u+2-2*a)/(dsqrt(s)*u)                                       cora-905
      b(3)=dsqrt(s)*(2*a+2)/u                                           cora-906
      if (lt) return                                                    cora-907
      c(1)=dsqrt(s)/(u*x)                                               cora-908
      c(4)=c(1)/s                                                       cora-909
      return                                                            cora-910
   49 go to ( 50 , 70 , 51 ) , ll                                       cora-911
c multipole lq=2 l1=l2                                                  cora-912
   50 b(2)=1                                                            cora-913
      return                                                            cora-914
c multipole lq=2 l1=l2-2                                                cora-915
   51 b(2)=(2*a-1)/(3*s)                                                cora-916
      b(3)=-(a+1)/1.5                                                   cora-917
      if (.not.lt) c(2)=-b(2)/(x*v)                                     cora-918
      return                                                            cora-919
   52 go to ( 70 , 53 , 70 , 54 ) , ll                                  cora-920
c multipole lq=3 l1=l2-1                                                cora-921
   53 b(2)=1/(3*dsqrt(s))                                               cora-922
      b(3)=-s*b(2)                                                      cora-923
      if (.not.lt) c(2)=-b(2)/(x*v)                                     cora-924
      return                                                            cora-925
c multipole lq=3 l1=l2-3                                                cora-926
   54 y=15*s*dsqrt(s)                                                   cora-927
      b(2)=(1-2*u*(a-1))/y                                              cora-928
      b(3)=((2*a+1)*u-1)*s/y                                            cora-929
      if (lt) return                                                    cora-930
      c(1)=(6*a-3)/(y*x**2*s)                                           cora-931
      c(2)=(2+u*(2*a+1)-(12*a**2-3)/x)/(y*x*v)                          cora-932
      c(3)=-3/(y*x*w)                                                   cora-933
      c(4)=(6*a+3)/(y*x**2)                                             cora-934
      return                                                            cora-935
   55 go to ( 56 , 70 , 57 , 70 , 58 ) , ll                             cora-936
c multipole lq=4 l1=l2                                                  cora-937
   56 b(2)=1/(3*a+6)                                                    cora-938
      b(3)=-(u+2)*b(2)/(2*s)                                            cora-939
      if (lt) return                                                    cora-940
      c(2)=-b(2)/(2*x*v)                                                cora-941
      c(3)=c(2)/s                                                       cora-942
      c(4)=3*c(3)/w                                                     cora-943
      return                                                            cora-944
c multipole lq=4 l1=l2-2                                                cora-945
   57 y=15*s*(a+2)                                                      cora-946
      b(2)=-(u*(a-1)-3)/y                                               cora-947
      b(3)=((a+.5)*u-3)*s/y                                             cora-948
      if (lt) return                                                    cora-949
      c(1)=(3*a+6)/(y*x**2*s)                                           cora-950
      c(2)=-(3-(2*a+1)*(u-(6*a+12)/x))/(2*y*x*v)                        cora-951
      c(3)=-1.5/(y*x*w)                                                 cora-952
      c(4)=-(2*a+1)*c(3)/w                                              cora-953
      return                                                            cora-954
c multipole lq=4 l1=l2-4                                                cora-955
   58 y=210*(a+2)*s                                                     cora-956
      b(2)=(6-2*(a-1)*u*(2-(2*a+3)*u))/(y*s)                            cora-957
      b(3)=-(6-u*(4*a-1-u*(2*a+3)*(2*a+1)))/y                           cora-958
      if (lt) return                                                    cora-959
      c1=u-(10*a-5)/x                                                   cora-960
      c(1)=-(6*a+12)*(4+(2*a+3)*c1)/(y*x**2*s**2)                       cora-961
      c(2)=-(3+(2*a+10)*u-(a+2)*(108*a-6)/x+(2*a+3)*(2*a+1)*(u**2-(6*a+1cora-962
     12)*c1/x))/(y*x*v*s)                                               cora-963
      c(3)=-(3-(6*a+9)*(u-(10*a+20)/x))/(y*x*v)                         cora-964
      c(4)=-(2*a+1)*c(3)/w-(30*a+60)/(y*x**2*s)                         cora-965
      return                                                            cora-966
c  59 go to ( 70 , 60 , 70 , 61 , 70 , 62 ) , ll                        cora-967
c multipole lq=5 l1=l2-1                                                cora-968
c  60 y=60*(a+2)*(a+3)*dsqrt(s)                                         cora-969
c     b(2)=(16-u*(2*a-2))/y                                             cora-970
c     b(3)=-(16-u*(2*a-10+u*(2*a+1)))/(y*s)                             cora-971
c     if (lt) return                                                    cora-972
c     c(1)=6*(a+2)/(s*y*x**2)                                           cora-973
c     c(2)=-(8-(2*a+1)*(u-6*(a+2)/x))/(y*x*v)                           cora-974
c     c(3)=-(8+3*u-30*(a+2)/x)/(y*x*v*s)                                cora-975
c     c(4)=(6*a-12+(15*u-(60*a+30)*(a+2)/x)/s**2)/(y*x**2)              cora-976
c     return                                                            cora-977
c multipole lq=5 l1=l2-3                                                cora-978
c  61 y=420*(a+2)*(a+3)*dsqrt(s)                                        cora-979
c     b(2)=(48-u*(2*a-2)*(9-u*(2*a+3)))/(y*s)                           cora-980
c     b(3)=-(48-u*(18*a+6-u*(2*a+1)*(2*a+3)))/y                         cora-981
c     if (lt) return                                                    cora-982
c     c1=u-(10*a+30)/x                                                  cora-983
c     c(1)=(6*a+12)*(3-(2*a+3)*c1)/(y*x**2*s**2)                        cora-984
c     c(2)=((24*a+162)*(a+2)/x-24+(12*a-3)*u-(2*a+1)*(2*a+3)*(u**2-(6*a+cora-985
c    112)*c1/x))/(y*x*s*v)                                              cora-986
c     c(3)=-(24-(6*a+9)*(u-(10*a+20)/x))/(y*x*v)                        cora-987
c     c(4)=-(2*a+1)*c(3)/w-(30*a+60)/(y*x**2*s)                         cora-988
c     return                                                            cora-989
c multipole lq=5 l1=l2-5                                                cora-990
c  62 y=3780*(a+2)*(a+3)*s*dsqrt(s)                                     cora-991
c     b(2)=(48-u*(2*a-2)*(15-u*(6*a+6-u*(2*a+3)*(2*a+5))))/(y*s)        cora-992
c     b(3)=-(48-u*(30*a-6-u*(12*a**2+12*a-9-u*(8*a**3+36*a**2+46*a+15)))cora-993
c    1)/y                                                               cora-994
c     if (lt) return                                                    cora-995
c     c1=u**2-(10*a+30)*(u-(14*a-7)/x)/x                                cora-996
c     c(1)=(6*a+12)*(3+(6*a+24)*u-(a+3)*(260*a+110)/x+(2*a+5)*(2*a+3)*c1cora-997
c    1)/(y*x**2*s**2)                                                   cora-998
c     c(2)=-(24-(18*a-9)*u+(6*a+12)*(66*a+183)/x-(2*a+3)*(18*u**2-(12*a+cora-999
c    124)*((8*a+29)*u-(a+3)*(200*a-40)/x)/x+(2*a+5)*(2*a+1)*(u**3-(6*a+1cora1000
c    22)*c1/x)))/(y*x*v*s)                                              cora1001
c     c1=u**2-(10*a+20)*(u-(14*a+42)/x)/x                               cora1002
c     c(3)=-(24-(12*a+3)*u+(6*a+9)*(2*a+5)*c1-(a+2)*(360*a+1170)/x)/(y*xcora1003
c    1*v)                                                               cora1004
c     c(4)=(18*a-36+(6*a+9)*((6*a+33)*u+(2*a+1)*(2*a+5)*c1-(a+2)*(260*a+cora1005
c    1830)/x))/(y*x**2*s)                                               cora1006
c     return                                                            cora1007
c  63 go to ( 64 , 70 , 65 , 70 , 66 , 70 , 67 ) , ll                   cora1008
c multipole lq=6 l1=l2                                                  cora1009
c  64 y=120*(a+2)*(a+3)*(a+4)*s**2                                      cora1010
c     b(2)=(32+u*(32-u*(2*a-2)))/y                                      cora1011
c     b(3)=-(32+u*(48-u*(4*a-14+u*(2*a+1))))/(y*s)                      cora1012
c     if (lt) return                                                    cora1013
c     c(1)=(a+2)*(12+6*u-(60*a+180)/x)/(y*x**2*s)                       cora1014
c     c(2)=-(16-u*(2*a-12+u*(2*a+1))+(6*a+12)*(2*a-4+(2*a+1)*(u-(10*a+30cora1015
c    1)/x))/x)/(y*x*v)                                                  cora1016
c     c(3)=-(16+u*(2*a+20+3*u)-(6*a+12)*(4-2*a+5*u+(20*a+10)*(a+3)/x)/x)cora1017
c    1/(y*x*s*v)                                                        cora1018
c     c(4)=((12*a-24)*s**2+(6*a+3)*(u**2-(10*a+20)*(2+u+(4*a+2)*(a+3)/x)cora1019
c    1/x))/(y*x**2*s**2)                                                cora1020
c     return                                                            cora1021
c multipole lq=6 l1=l2-2                                                cora1022
c  65 y=840*(a+2)*(a+3)*(a+4)*s                                         cora1023
c     b(2)=(160-u*(2*a-2)*(16-u*(2*a+3)))/y                             cora1024
c     b(3)=-(160-u*(32*a-112-u*((4*a-24)*a-10+u*(2*a+3)*(2*a+1))))/(y*s)cora1025
c     if (lt) return                                                    cora1026
c     c1=u-(10*a+30)/x                                                  cora1027
c     c(1)=(60-(12*a+18)*c1)*(a+2)/(y*x**2*s)                           cora1028
c     c(2)=-(80-(26*a+4)*u+(60*a**2-240)/x+(2*a+1)*(2*a+3)*(u**2-(6*a+12cora1029
c    1)*c1/x))/(y*x*v)                                                  cora1030
c     c(3)=-(80-u*(6*a-36)+60*(a**2-4)/x-(6*a+9)*(u**2-(10*a+20)*(u-(14*cora1031
c    1a+42)/x)/x))/(y*x*v*s)                                            cora1032
c     c(4)=-(105*(1-(10*a+20)/x)-(60*a-15)*s**2+(6*a+3)*(2*a+3)*(u*s**2-cora1033
c    1(10*a+20)*(1+u-(14*a+42)/x)/x))/(y*x**2*s**2)                     cora1034
c     return                                                            cora1035
c multipole lq=6 l1=l2-4                                                cora1036
c  66 y=7560*(a+2)*(a+3)*(a+4)*s                                        cora1037
c     b(2)=(480-u*(2*a-2)*(96-u*(24*a+33-u*(2*a+3)*(2*a+5))))/(y*s)     cora1038
c     b(3)=-(480-u*(192*a+48-u*(2*a+3)*(24*a+6-u*(2*a+1)*(2*a+5))))/y   cora1039
c     if (lt) return                                                    cora1040
c     c1=(u**2-(10*a+30)*(u-(14*a+56)/x)/x)                             cora1041
c     c(1)=(6*a+12)*(30-(12*a+3)*u-(a+3)*(80*a+470)/x+(2*a+3)*(2*a+5)*c1cora1042
c    1)/(y*x**2*s**2)                                                   cora1043
c     c(2)=-(240-u*(126*a-36)+180*(a**2-4)/x+(2*a+3)*((18*a-9)*u**2-(6*acora1044
c    1+12)*((2*a-49)*u+(10*a+30)*(22*a+109)/x)/x-(2*a+1)*(2*a+5)*(u**3-(cora1045
c    26*a+12)*c1/x)))/(y*x*w*s**2)                                      cora1046
c     c1=(2*a+5)*(u**2-(10*a+20)*(u-(14*a+42)/x)/x)                     cora1047
c     c(3)=-(240-(66*a+84)*u+180*(a**2-4)/x+(6*a+9)*c1)/(y*x*v)         cora1048
c     c(4)=((a-2)*(180-(72*a+108)*u)+(6*a+9)*((2*a+1)*c1-(a+2)*(80*a+740cora1049
c    1)/x))/(y*x**2*s)                                                  cora1050
c     return                                                            cora1051
c multipole lq=6 l1=l2-6                                                cora1052
c  67 y=83160*(a+2)*(a+3)*(a+4)*s**2                                    cora1053
c     b(2)=(480-u*(2*a-2)*(144-u*(54*a+57-u*(2*a+5)*(8*a+6-u*(2*a+7)*(2*cora1054
c    1a+3)))))/(y*s)                                                    cora1055
c     b(3)=-(480-u*(288*a-48-u*(108*a**2+120*a-78-u*(2*a+3)*(2*a+5)*(8*acora1056
c    1-5-u*(2*a+1)*(2*a+7)))))/y                                        cora1057
c     if (lt) return                                                    cora1058
c     c1=u**3-(10*a+30)*(u**2-(14*a+56)*(u-(18*a-9)/x)/x)/x             cora1059
c     c(1)=(6*a+12)*(30-(18*a-3)*u+(10*a+30)*(118*a+457)/x-(2*a+5)*((4*acora1060
c    1+36)*u**2-(10*a+30)*((24*a+106)*u-(14*a+56)*(52*a+6)/x)/x+(2*a+7)*cora1061
c    2(2*a+3)*c1))/(y*x**2*s**2)                                        cora1062
c     c(2)=-(240-(174*a-84)*u+((72*a+36)*a-63)*u**2+(180*(a**2-4)-(6*a+1cora1063
c    12)*(((136*a+772)*a+1377)*u-(10*a+30)*((712*a+3370)*a+2193)/x))/x-(cora1064
c    22*a+5)*(2*a+3)*((2*a-26)*u**3+(6*a+12)*((14*a+82)*u**2-(10*a+30)*(cora1065
c    3(38*a+166)*u-(14*a+56)*(70*a-19)/x)/x)/x-(2*a+7)*(2*a+1)*(u**4-6*(cora1066
c    4a+2)*c1/x)))/(y*x*v*s)                                            cora1067
c     c1=u**3-(10*a+20)*(u**2-(14*a+42)*(u-(18*a+72)/x)/x)/x            cora1068
c     c(3)=-(240-(114*a+36)*u+180*(a**2-4)/x+(6*a+15)*((6*a-1)*u**2+(10*cora1069
c    1a+20)*((10*a+57)*u-(14*a+42)*(34*a+141)/x)/x-(2*a+7)*(2*a+3)*c1))/cora1070
c    2(y*x*v)                                                           cora1071
c     c(4)=(180*a-360-(108*a+72)*(a-2)*u+(60*a+120)*((118*a+796)*a+1401)cora1072
c    1/x-(2*a+5)*(6*a+9)*((4*a+47)*u**2-(10*a+20)*((24*a+117)*u-(14*a+42cora1073
c    2)*(52*a+215)/x)/x+(2*a+7)*(2*a+1)*c1))/(y*x**2*s)                 cora1074
c     return                                                            cora1075
   68 write (6,1000) lq,ll                                              cora1076
      return                                                            cora1077
   69 write (6,1001) lq,ll                                              cora1078
      return                                                            cora1079
   70 write (6,1002) lq,ll                                              cora1080
      return                                                            cora1081
 1000 format (14h in cora: lq =,i3,22h too large or l1-l2+1=,i3,14h out cora1082
     1of bounds)                                                        cora1083
 1001 format (42h in cora: coefficients suppressed for lq =,i3,13h and lcora1084
     11-l2+1=,i3)                                                       cora1085
 1002 format (56h in cora: coefficients not given by the method for lq =cora1086
     1,i3,13h and l1-l2+1=,i3)                                          cora1087
      end                                                               cora1088
c 26/07/94  ibm version                                         ecis94  inti-000
      subroutine inti(fam,x,fr,gr,wre,pad,ipe,ism,kab,w,iterm,nc,ncj,v,ninti-001
     1vi,mc,cc,nat,at,ag,h,acnv,eiter,ncin,nni,iterr,lo)                inti-002
c  e. c. i. s. method: schroedinger equation driving routine.           inti-003
c  inti calls insh  to solve the single homogeneous equations           inti-004
c             insi  to solve the single inhomogeneous equations         inti-005
c  pade approximants of type i may be used to accelerate the convergenceinti-006
c input variables: fam(ic,i): matching values for i=1,6                 inti-007
c                             constants of each equation for i=7,10     inti-008
c                  ism:   number of radial points                       inti-009
c                  kab:   maximum number of coupled channels            inti-010
c                  iterm: maximum number of iterations and dim. of pad  inti-011
c                  nc:    number of coupled and uncoupled equations     inti-012
c                  ncj:   number of coupled equations                   inti-013
c                  v:     potentials                                    inti-014
c                  nvi:   addresses of couplings                        inti-015
c                  mc,cc: nuclear state number, angular momenta....     inti-016
c                  nat,at:table of coupling coefficients                inti-017
c                  ag:    coulomb integrals for coulomb corrections     inti-018
c                  h:     step length                                   inti-019
c                  acnv:  epsilon for negligible function values        inti-020
c                  eiter: convergence epsilon for the scattering coef.  inti-021
c                  ncin:  number of solutions                           inti-022
c                  lo(i): logical controls                              inti-023
c output variables:fam(ic,i+7): scattering coefficients                 inti-024
c working fields:  x:     used in insh and insi                         inti-025
c                  fr:    solutions of homogeneous equations            inti-026
c                  gr:    solutions of coupled equations                inti-027
c                  wre:   real/imaginary inhomogeneous term             inti-028
c                  pad(iterm,kab+2): pade approximants                  inti-029
c               ipe(i,1): first non negligible point of uncoupled func. inti-030
c               ipe(i,2): first non negligible point of coupled funct.  inti-031
c                  w:     free part of the storage for couplings        inti-032
c output variables:nni:   number of eq. with negligible inhomog. term   inti-033
c                  iterr: largest number of iterations done for this j  inti-034
c***********************************************************************inti-035
      logical lo(250)                                                   inti-036
      double precision fam(kab,1),x(1),pad(2,iterm,1),ag(kab,kab,1),z(4)inti-037
     1,amax,y(2)                                                        inti-038
      dimension fr(ism,4,1),gr(2,ism,1),wre(2,1),ipe(nc,1),v(ism,1),w(isinti-039
     1m,1),nvi(4,kab,1),mc(kab,1),nat(2,1),at(2,1),cc(kab,1)            inti-040
      common /poten/ im,nv,mv,invt,inls,invc,invd,intc,imax,it(16),itxm inti-041
c compute all coupling potentials and solve all homogeneous equations   inti-042
      i2=4*ism                                                          inti-043
      do 4 i=1,nc                                                       inti-044
      i1=mc(i,4)                                                        inti-045
      if (i1.lt.0) go to 1                                              inti-046
      call insh(fr(1,1,i),i,i1,kt,acnv,fam,x,kab,ism,v,nat,at,nvi,cc,lo,inti-047
     1lo(221).or.i.gt.ncj)                                              inti-048
      ipe(i,1)=kt                                                       inti-049
      go to 3                                                           inti-050
    1 i1=-i1                                                            inti-051
      if (i.eq.i1) go to 3                                              inti-052
      do 2 is=1,i2                                                      inti-053
    2 fr(is,1,i)=fr(is,1,i1)                                            inti-054
      ipe(i,1)=ipe(i1,1)                                                inti-055
    3 if (lo(57)) write (6,1000) fam(i,7),fam(i,8),i,ipe(i,1)           inti-056
    4 continue                                                          inti-057
      if ((.not.lo(207)).or.lo(221)) go to 32                           inti-058
      ivv=0                                                             inti-059
c calculation of the non diagonal coupling potentials                   inti-060
      do 31 ic=1,ncj                                                    inti-061
      do 27 ip=1,ncj                                                    inti-062
      k1=nvi(1,ip,ic)                                                   inti-063
      k2=nvi(2,ip,ic)                                                   inti-064
      k3=nvi(3,ip,ic)                                                   inti-065
      if (k2.eq.k3.and.ip.lt.ic) go to 25                               inti-066
      do 5 j=1,4                                                        inti-067
    5 nvi(j,ip,ic)=0                                                    inti-068
c non derivative coupling potentials                                    inti-069
      if (k1.gt.k2) go to 15                                            inti-070
      if (lo(29).and.(ic.eq.ip)) go to 15                               inti-071
      ivv=ivv+1                                                         inti-072
      nvi(1,ip,ic)=ivv                                                  inti-073
      kt=iabs(nat(1,k1))                                                inti-074
      nima=k2+1-k1                                                      inti-075
      if (kt.eq.nat(1,k1)) nima=nima-1                                  inti-076
      do 6 is=1,ism                                                     inti-077
    6 w(is,ivv)=at(2,k1)*v(is,kt)                                       inti-078
      if (k1.eq.k2) go to 9                                             inti-079
      k4=k1+1                                                           inti-080
      do 8 k=k4,k2                                                      inti-081
      kt=iabs(nat(1,k))                                                 inti-082
      if (kt.eq.nat(1,k)) nima=nima-1                                   inti-083
      do 7 is=1,ism                                                     inti-084
    7 w(is,ivv)=w(is,ivv)+at(2,k)*v(is,kt)                              inti-085
    8 continue                                                          inti-086
    9 if (nima.eq.0) go to 15                                           inti-087
      ivv=ivv+1                                                         inti-088
      nvi(2,ip,ic)=ivv                                                  inti-089
      do 11 k=k1,k2                                                     inti-090
      if (nat(1,k).gt.0) go to 11                                       inti-091
      kt=iabs(nat(1,k))+it(2)                                           inti-092
      do 10 is=1,ism                                                    inti-093
   10 w(is,ivv)=at(2,k)*v(is,kt)                                        inti-094
      go to 12                                                          inti-095
   11 continue                                                          inti-096
   12 k1=k+1                                                            inti-097
      if (k1.gt.k2) go to 15                                            inti-098
      do 14 k=k1,k2                                                     inti-099
      if (nat(1,k).gt.0) go to 14                                       inti-100
      kt=iabs(nat(1,k))+it(2)                                           inti-101
      do 13 is=1,ism                                                    inti-102
   13 w(is,ivv)=w(is,ivv)+at(2,k)*v(is,kt)                              inti-103
   14 continue                                                          inti-104
c derivative coupling potentials                                        inti-105
   15 k2=k2+1                                                           inti-106
      if (k2.gt.k3) go to 27                                            inti-107
      ivv=ivv+1                                                         inti-108
      nvi(3,ip,ic)=ivv                                                  inti-109
      kt=iabs(nat(1,k2))                                                inti-110
      nima=k3+1-k2                                                      inti-111
      if (kt.eq.nat(1,k2)) nima=nima-1                                  inti-112
      do 16 is=1,ism                                                    inti-113
   16 w(is,ivv)=at(2,k2)*v(is,kt)                                       inti-114
      if (k2.eq.k3) go to 19                                            inti-115
      k4=k2+1                                                           inti-116
      do 18 k=k4,k3                                                     inti-117
      kt=iabs(nat(1,k))                                                 inti-118
      if (kt.eq.nat(1,k)) nima=nima-1                                   inti-119
      do 17 is=1,ism                                                    inti-120
   17 w(is,ivv)=w(is,ivv)+at(2,k)*v(is,kt)                              inti-121
   18 continue                                                          inti-122
   19 if (nima.eq.0) go to 27                                           inti-123
      ivv=ivv+1                                                         inti-124
      nvi(4,ip,ic)=ivv                                                  inti-125
      do 21 k=k2,k3                                                     inti-126
      kt=iabs(nat(1,k))+it(2)                                           inti-127
      if (kt.eq.nat(1,k)) go to 21                                      inti-128
      do 20 is=1,ism                                                    inti-129
   20 w(is,ivv)=at(2,k)*v(is,kt)                                        inti-130
      go to 22                                                          inti-131
   21 continue                                                          inti-132
   22 k2=k+1                                                            inti-133
      if (k2.gt.k3) go to 27                                            inti-134
      do 24 k=k2,k3                                                     inti-135
      kt=iabs(nat(1,k))+it(2)                                           inti-136
      if (kt.eq.nat(1,k)) go to 24                                      inti-137
      do 23 is=1,ism                                                    inti-138
   23 w(is,ivv)=w(is,ivv)+at(2,k)*v(is,kt)                              inti-139
   24 continue                                                          inti-140
      go to 27                                                          inti-141
c symmetrisation of the table                                           inti-142
   25 do 26 k=1,4                                                       inti-143
   26 nvi(k,ip,ic)=nvi(k,ic,ip)                                         inti-144
   27 continue                                                          inti-145
c correction to an increase of the imaginary potential                  inti-146
      if (cc(ic,6).eq.0.) go to 31                                      inti-147
      i1=mc(ic,4)+it(2)                                                 inti-148
      if (nvi(2,ic,ic).eq.0) go to 29                                   inti-149
      k=nvi(2,ic,ic)                                                    inti-150
      do 28 is=1,ism                                                    inti-151
   28 w(is,k)=w(is,k)-cc(ic,6)*v(is,i1)                                 inti-152
      go to 31                                                          inti-153
   29 ivv=ivv+1                                                         inti-154
      nvi(2,ic,ic)=ivv                                                  inti-155
      do 30 is=1,ism                                                    inti-156
   30 w(is,ivv)=-cc(ic,6)*v(is,i1)                                      inti-157
   31 continue                                                          inti-158
   32 if (lo(59)) call hora                                             inti-159
      conv=acnv*h*h                                                     inti-160
      nni=0                                                             inti-161
c loop on solutions                                                     inti-162
      do 46 nci=1,ncin                                                  inti-163
      nci1=nci+8                                                        inti-164
      nci2=nci1+ncin                                                    inti-165
c set the zero's order solution                                         inti-166
      do 33 ic=1,nc                                                     inti-167
      ipe(ic,2)=ism+1                                                   inti-168
      fam(ic,nci1)=0.d0                                                 inti-169
   33 fam(ic,nci2)=0.d0                                                 inti-170
      fam(nci,nci1)=fam(nci,7)                                          inti-171
      fam(nci,nci2)=fam(nci,8)                                          inti-172
      if ((ipe(nci,1).gt.ism-3).or.lo(221).or.(nci.gt.ncj)) go to 46    inti-173
      do 34 is=1,ism                                                    inti-174
      gr(1,is,nci)=fr(is,1,nci)                                         inti-175
   34 gr(2,is,nci)=fr(is,2,nci)                                         inti-176
      ipe(nci,2)=ipe(nci,1)                                             inti-177
c derive the zero's order equation                                      inti-178
      if (lo(210)) call insi(wre,gr,gr(1,1,ncj+1),fr,fam,x,pad,pad,1,eitinti-179
     1er,acnv,kab,ism,ipe,nci,v,w,conv,nat,at,nvi,nc,y,y,mc,cc,lo,.true.inti-180
     2,h,z)                                                             inti-181
      amax=0.d0                                                         inti-182
c e. c. i. s. loop                                                      inti-183
      do 44 kiter=1,iterm                                               inti-184
      iterr=max0(iterr,kiter)                                           inti-185
      lo(204)=.true.                                                    inti-186
      lo(206)=((kiter.ne.iterm).and.(amax.lt.1.d10)).or.lo(23)          inti-187
      if (amax.gt.1.d10) write (6,1001) amax,kiter                      inti-188
      do 43 ic=1,ncj                                                    inti-189
      i=mod(ic+nci-1,ncj)+1                                             inti-190
c compute second members and solve the inhomogeneous equations          inti-191
      do 35 j=1,4                                                       inti-192
   35 z(j)=0.d0                                                         inti-193
      if (lo(144)) go to 40                                             inti-194
      do 38 j=1,ncj                                                     inti-195
      if ((lo(29).and.(i.eq.j)).or.(ipe(j,2).ge.ism)) go to 38          inti-196
c order in fg   f(ei)*f(ef),g(ei)*f(ef),f(ei)*g(ef),g(ei)*g(ef)         inti-197
      if (lo(22)) go to 36                                              inti-198
      ij=kiter                                                          inti-199
      if (1+mod(j+ncj-nci-1,ncj).ge.ic) ij=ij-1                         inti-200
      if (ij.eq.0) go to 36                                             inti-201
      y(1)=pad(1,ij,j)                                                  inti-202
      y(2)=pad(2,ij,j)                                                  inti-203
      go to 37                                                          inti-204
   36 y(1)=fam(j,nci1)                                                  inti-205
      y(2)=fam(j,nci2)                                                  inti-206
   37 z(1)=z(1)+y(1)*ag(i,j,3)-y(2)*ag(i,j,1)                           inti-207
      z(2)=z(2)+y(1)*ag(i,j,1)+y(2)*ag(i,j,3)                           inti-208
      z(3)=z(3)+y(1)*ag(i,j,4)-y(2)*ag(i,j,2)                           inti-209
      z(4)=z(4)+y(1)*ag(i,j,2)+y(2)*ag(i,j,4)                           inti-210
   38 continue                                                          inti-211
      if (i.eq.nci) go to 39                                            inti-212
      z(1)=z(1)+ag(i,nci,1)                                             inti-213
      z(3)=z(3)+ag(i,nci,2)                                             inti-214
   39 z(3)=z(3)-z(2)                                                    inti-215
      z(4)=z(4)+z(1)                                                    inti-216
      z(1)=z(1)+fam(i,7)*z(3)-fam(i,8)*z(4)                             inti-217
      z(2)=z(2)+z(3)*fam(i,8)+z(4)*fam(i,7)                             inti-218
   40 if (i.ne.nci) go to 41                                            inti-219
      z(1)=z(1)-fam(i,7)                                                inti-220
      z(2)=z(2)-fam(i,8)                                                inti-221
      z(3)=z(3)-1.d0                                                    inti-222
   41 if (lo(23).and.(.not.lo(206))) lo(204)=.true.                     inti-223
      call insi(wre,gr,gr(1,1,ncj+1),fr,fam(i,5),x,pad(1,1,i),pad(1,1,ncinti-224
     1j+1),kiter,eiter,acnv,kab,ism,ipe(1,2),i,v,w,conv,nat,at,nvi,ncj,finti-225
     2am(i,nci1),fam(i,nci2),mc,cc,lo,.false.,h,z)                      inti-226
      if (ipe(i,2).ge.ism) go to 42                                     inti-227
      amax=dmax1(amax,dabs(fam(i,nci1))+dabs(fam(i,nci2)))              inti-228
      if (i.ne.nci.and.lo(92)) ipe(i,2)=ism+1                           inti-229
      go to 43                                                          inti-230
   42 fam(i,nci1)=-z(1)                                                 inti-231
      fam(i,nci2)=-z(2)                                                 inti-232
      if (lo(57)) write (6,1002)                                        inti-233
      if (kiter.eq.1.and.lo(144)) nni=nni+1                             inti-234
      if (i.eq.nci) ipe(nci,2)=ipe(nci,1)                               inti-235
   43 continue                                                          inti-236
      if (lo(59)) call hora                                             inti-237
      if (lo(204).or.(amax.gt.1.d10.and.lo(23))) go to 45               inti-238
   44 continue                                                          inti-239
      kiter=min0(kiter,iterm)                                           inti-240
   45 if (lo(53)) write (6,1003) kiter                                  inti-241
   46 continue                                                          inti-242
      nni=nni/ncin                                                      inti-243
      return                                                            inti-244
 1000 format (2d30.15,5x,2i5)                                           inti-245
 1001 format (8h maximum,d15.6,44h obtained in previous iteration. last inti-246
     1one is,i3)                                                        inti-247
 1002 format (5x,35hthe inhomogeneous term is neglected)                inti-248
 1003 format (5x,i5,11h iterations)                                     inti-249
      end                                                               inti-250
c 26/07/94  ibm version                                         ecis94  insh-000
      subroutine insh(p,ic,i1,kt,aconv,fam,x,nc,ism,v,nat,at,nvi,cc,lo,linsh-001
     1t)                                                                insh-002
c  e. c. i. s. method: integration of a single homogeneous equation by  insh-003
c  the numerov method       - schroedinger equation -                   insh-004
c input variables: ic:    channel number of the equation                insh-005
c                  aconv: limit for negligible function values          insh-006
c                  fam(ic,i): matching values for i=1,4                 insh-007
c                             wave number for i=6                       insh-008
c                             constants of this equation for i=7,10     insh-009
c                  nc:    maximum number of coupled channels            insh-010
c                  v:     central potentials and couplings              insh-011
c                  ism:   number of radial points                       insh-012
c                  nat,at:coupling coefficients                         insh-013
c                  nvi:   table of addresses in nat,at                  insh-014
c                  cc(,6):coefficient of increase of imaginary potentialinsh-015
c                  lo(i): logical controls                              insh-016
c                  lt:    logical to return only with phase shift       insh-017
c output variables:p(ism,i): real/imaginary regular solution for i=1,2  insh-018
c                            real/imaginary irregular solution for i=3,4insh-019
c                  fam(ic,7/8): real/imaginary part of zero's order     insh-020
c                            scattering coefficients                    insh-021
c                  kt:    the solution is negligible for is < kt        insh-022
c working space:   x:     for the integration                           insh-023
c***********************************************************************insh-024
      logical lo(250),lt                                                insh-025
      double precision fam(nc,1),x(2,2),bre,bim,hx,hy,a,b               insh-026
      dimension p(ism,1),v(ism,1),nvi(4,nc,1),nat(2,1),at(2,1),cc(nc,1) insh-027
      common /poten/ im,nv,mv,invt,inls,invc,invd,intc,imax,it(16),itxm insh-028
      bconv=aconv                                                       insh-029
c for closed channels when green's function is used                     insh-030
      if (fam(ic,9).lt.0.) bconv=1.e-15                                 insh-031
c computation of the regular solution                                   insh-032
      i2=i1+it(2)                                                       insh-033
      i3=i1+it(5)                                                       insh-034
      i4=i1+it(6)                                                       insh-035
      do 1 is=1,ism                                                     insh-036
      a=is*is                                                           insh-037
      x(1,is+2)=fam(ic,9)-fam(ic,10)/a+fam(ic,7)*v(is,i1)               insh-038
      x(2,is+2)=fam(ic,7)*v(is,i2)                                      insh-039
      if (.not.lo(201)) x(1,is+2)=x(1,is+2)+fam(ic,8)*v(is,i3)          insh-040
      if (.not.lo(202)) x(2,is+2)=x(2,is+2)+fam(ic,8)*v(is,i4)          insh-041
    1 continue                                                          insh-042
      if (lo(129)) go to 5                                              insh-043
      k1=nvi(1,ic,ic)                                                   insh-044
      k2=nvi(2,ic,ic)                                                   insh-045
      if (k1.gt.k2) go to 5                                             insh-046
      do 4 k=k1,k2                                                      insh-047
      kt=iabs(nat(1,k))                                                 insh-048
      do 2 is=1,ism                                                     insh-049
    2 x(1,is+2)=x(1,is+2)+at(2,k)*v(is,kt)                              insh-050
      if (nat(1,k).gt.0) go to 4                                        insh-051
      kt=kt+it(2)                                                       insh-052
      do 3 is=1,ism                                                     insh-053
    3 x(2,is+2)=x(2,is+2)+at(2,k)*v(is,kt)                              insh-054
    4 continue                                                          insh-055
    5 if (cc(ic,6).eq.0.) go to 7                                       insh-056
      do 6 is=1,ism                                                     insh-057
    6 x(2,is+2)=x(2,is+2)+v(is,i2)*cc(ic,6)                             insh-058
    7 if (lo(27)) go to 9                                               insh-059
c modified numerov method                                               insh-060
      do 8 is=1,ism                                                     insh-061
      a=x(1,is+2)**2-x(2,is+2)**2                                       insh-062
      if (lo(26)) a=a*(1.d0-x(1,is+2)*.033333333333333d0)               insh-063
      x(2,is+2)=x(2,is+2)*(1.d0-x(1,is+2)*.166666666666667d0)           insh-064
    8 x(1,is+2)=x(1,is+2)-a*.083333333333333d0                          insh-065
      go to 11                                                          insh-066
c numerov method                                                        insh-067
    9 do 10 is=1,ism                                                    insh-068
      b=(12.d0+x(1,is+2))**2+x(2,is+2)**2                               insh-069
      a=12.d0*(x(1,is+2)*(12.d0+x(1,is+2))+x(2,is+2)**2)/b              insh-070
      if (lo(26)) a=a*(1.d0+x(1,is+2)**2*.416666666666667d-2)           insh-071
      x(1,is+2)=a                                                       insh-072
   10 x(2,is+2)=144.d0*x(2,is+2)/b                                      insh-073
   11 x(1,1)=0.d0                                                       insh-074
      x(2,1)=0.d0                                                       insh-075
      x(1,2)=1.d-15                                                     insh-076
      x(2,2)=0.d0                                                       insh-077
      do 13 is=1,ism                                                    insh-078
      p(is,3)=x(1,is+2)                                                 insh-079
      p(is,4)=x(2,is+2)                                                 insh-080
      hx=x(1,is+1)*x(1,is+2)-x(2,is+1)*x(2,is+2)                        insh-081
      hy=x(2,is+1)*x(1,is+2)+x(1,is+1)*x(2,is+2)                        insh-082
      x(1,is+2)=x(1,is+1)+x(1,is+1)-x(1,is)-hx                          insh-083
      x(2,is+2)=x(2,is+1)+x(2,is+1)-x(2,is)-hy                          insh-084
      if (dabs(x(1,is+2)).lt.1.d15) go to 13                            insh-085
c  renormalisation of large function values                             insh-086
      j=2*is+4                                                          insh-087
      do 12 i=3,j                                                       insh-088
   12 x(i,1)=x(i,1)*1.d-30                                              insh-089
   13 continue                                                          insh-090
c end of integration                                                    insh-091
c matching                                                              insh-092
      bre=x(1,ism)*fam(ic,4)-fam(ic,3)*x(1,ism+2)                       insh-093
      bim=x(2,ism)*fam(ic,4)-fam(ic,3)*x(2,ism+2)                       insh-094
      hx=x(1,ism)*fam(ic,2)-fam(ic,1)*x(1,ism+2)                        insh-095
      hy=x(2,ism)*fam(ic,2)-fam(ic,1)*x(2,ism+2)                        insh-096
      if (fam(ic,9).lt.0.) go to 14                                     insh-097
      bim=bim+hx                                                        insh-098
      bre=bre-hy                                                        insh-099
   14 a=bre*bre+bim*bim                                                 insh-100
      bre=-bre/a                                                        insh-101
      bim=bim/a                                                         insh-102
      fam(ic,7)=bre*hx-bim*hy                                           insh-103
      fam(ic,8)=hx*bim+hy*bre                                           insh-104
      if (lt) return                                                    insh-105
      bre=bre/12.d0                                                     insh-106
      bim=bim/12.d0                                                     insh-107
c normalisation of the regular solution                                 insh-108
      do 15 is=1,ism                                                    insh-109
      hx=x(1,is)+10.d0*x(1,is+1)+x(1,is+2)                              insh-110
      hy=x(2,is)+10.d0*x(2,is+1)+x(2,is+2)                              insh-111
      p(is,1)=hx*bre-hy*bim                                             insh-112
   15 p(is,2)=hx*bim+hy*bre                                             insh-113
c search of the first non negligible value                              insh-114
      do 16 kt=1,ism                                                    insh-115
      if ((abs(p(kt,1))+abs(p(kt,2))).gt.bconv) go to 17                insh-116
   16 continue                                                          insh-117
   17 if (lo(92)) return                                                insh-118
      hx=0.d0                                                           insh-119
      hy=0.d0                                                           insh-120
      if (fam(ic,9).lt.0.) go to 18                                     insh-121
      hx=fam(ic,1)                                                      insh-122
      hy=fam(ic,2)                                                      insh-123
c computation of the irregular solution - starting values               insh-124
c  the two last points of imaginary potential are zero                  insh-125
   18 x(2,ism)=hx/fam(ic,6)                                             insh-126
      x(2,ism+2)=hy/fam(ic,6)                                           insh-127
      x(1,ism)=fam(ic,3)/fam(ic,6)                                      insh-128
      x(1,ism+2)=fam(ic,4)/fam(ic,6)                                    insh-129
      bre=2.d0-dble(p(ism,3))                                           insh-130
      x(1,ism+1)=(x(1,ism)+x(1,ism+2))/bre                              insh-131
      x(2,ism+1)=(x(2,ism)+x(2,ism+2))/bre                              insh-132
      i1=ism-kt                                                         insh-133
      if (i1.le.0) go to 20                                             insh-134
c integration                                                           insh-135
      do 19 js=1,i1                                                     insh-136
      is=ism-js                                                         insh-137
      hx=x(1,is+1)*dble(p(is,3))-x(2,is+1)*dble(p(is,4))                insh-138
      hy=x(2,is+1)*dble(p(is,3))+x(1,is+1)*dble(p(is,4))                insh-139
      x(1,is)=x(1,is+1)+x(1,is+1)-x(1,is+2)-hx                          insh-140
   19 x(2,is)=x(2,is+1)+x(2,is+1)-x(2,is+2)-hy                          insh-141
c computation of irregular solution                                     insh-142
   20 do 21 is=kt,ism                                                   insh-143
      p(is,3)=(x(1,is)+10.d0*x(1,is+1)+x(1,is+2))/12.d0                 insh-144
   21 p(is,4)=(x(2,is)+10.d0*x(2,is+1)+x(2,is+2))/12.d0                 insh-145
      return                                                            insh-146
      end                                                               insh-147
c 02/11/94  ibm version                                         ecis94  insi-000
      subroutine insi(w,p,pd,ph,fam,x,pad1,pad2,kiter,eiter,aconv,kab,isinsi-001
     1m,ipd,i,v,www,conv,nat,at,nvi,nc,far,fai,mc,cc,lo,lt,h,z)         insi-002
c  e. c. i. s. method: integration of a single inhomogeneous equation   insi-003
c  by the numerov method       - schroedinger equation -                insi-004
c input variables: p:     coupled solution                              insi-005
c                  ph:    homogeneous solutions                         insi-006
c                  pd:    derivative of the coupled solution            insi-007
c                  fam:   wave number                                   insi-008
c                  kiter: current iteration number                      insi-009
c                  eiter: convergence epsilon for the scattering coeff. insi-010
c                  aconv: epsilon for negligible function values        insi-011
c                  kab:   maximum number of equations                   insi-012
c                  ism:   number of radial points                       insi-013
c                  ipd(ic): the function ic is negligible for r < ipd*h insi-014
c                  i:     channel number of the equation                insi-015
c                  v:     coupling potentials                           insi-016
c                  www:   coupling between equations computed in inti   insi-017
c                  conv:  epsilon for negligible second member          insi-018
c                  nat,at:table of coupling coefficients                insi-019
c                  nvi:   addresses of coupling coefficients            insi-020
c                  nc:    number of coupled channels                    insi-021
c                  far,fai: phase-shifts to update                      insi-022
c                  lo(i): logical controls                              insi-023
c                  lt:    .true. to compute only the derivative         insi-024
c                  h:     integration step                              insi-025
c                  z:     coulomb integral for corrections              insi-026
c output variables:p:     solution for equation i                       insi-027
c                  pd:    derivative of the solution for equation i     insi-028
c                  far,fai:  scattering coefficient                     insi-029
c working field:   w(2,ism): real/imaginary second member               insi-030
c                  pad1: iteration results for the channel i            insi-031
c                  pad2: working field of pade,twice longer than pad1   insi-032
c                  x:    integral of regular solution with second memberinsi-033
c***********************************************************************insi-034
      logical lo(250),lt                                                insi-035
      double precision fam(1),x(2,1),pad1(2,1),pad2(2,1),z(4),bre,bim,hxinsi-036
     1,hy,far(1),fai(1)                                                 insi-037
      dimension ph(ism,4,1),p(2,ism,1),pd(2,ism,1),w(2,1),ipd(1),v(ism,1insi-038
     1),www(ism,1),nat(2,1),at(2,1),nvi(4,kab,1),mc(kab,1),cc(kab,1)    insi-039
      common /poten/ im,nv,mv,invt,inls,invc,invd,intc,imax,it(16),itxm insi-040
      if (lt) go to 35                                                  insi-041
      ism1=ism+1                                                        insi-042
c put zero in the inhomogeneous terms                                   insi-043
      do 1 is=1,ism                                                     insi-044
      w(1,is)=0.                                                        insi-045
    1 w(2,is)=0.                                                        insi-046
      idp=ism1                                                          insi-047
c non derivative term of coupling potentials                            insi-048
      do 23 ic=1,nc                                                     insi-049
      if (ipd(ic).gt.ism) go to 23                                      insi-050
      if (lo(207)) go to 7                                              insi-051
c no previous calculation of coupling potentials                        insi-052
      if (ic.ne.i) go to 3                                              insi-053
      if (cc(ic,6).eq.0.) go to 3                                       insi-054
      kt=mc(ic,4)+it(2)                                                 insi-055
      do 2 is=1,ism                                                     insi-056
      w(1,is)=w(1,is)+cc(ic,6)*v(is,kt)*p(2,is,ic)                      insi-057
    2 w(2,is)=w(2,is)-cc(ic,6)*v(is,kt)*p(1,is,ic)                      insi-058
    3 if (lo(29).and.(ic.eq.i)) go to 23                                insi-059
      k1=nvi(1,ic,i)                                                    insi-060
      k2=nvi(2,ic,i)                                                    insi-061
      if (k1.gt.k2) go to 13                                            insi-062
      k3=ipd(ic)                                                        insi-063
      idp=min0(idp,k3)                                                  insi-064
      do 6 k=k1,k2                                                      insi-065
      kt=iabs(nat(1,k))                                                 insi-066
      do 4 is=k3,ism                                                    insi-067
      w(1,is)=w(1,is)+at(2,k)*v(is,kt)*p(1,is,ic)                       insi-068
    4 w(2,is)=w(2,is)+at(2,k)*v(is,kt)*p(2,is,ic)                       insi-069
      if (kt.eq.nat(1,k)) go to 6                                       insi-070
      kt=kt+it(2)                                                       insi-071
      do 5 is=k3,ism                                                    insi-072
      w(1,is)=w(1,is)-at(2,k)*v(is,kt)*p(2,is,ic)                       insi-073
    5 w(2,is)=w(2,is)+at(2,k)*v(is,kt)*p(1,is,ic)                       insi-074
    6 continue                                                          insi-075
      go to 13                                                          insi-076
c coupling potentials already calculated                                insi-077
    7 l1=nvi(1,ic,i)                                                    insi-078
      l2=nvi(2,ic,i)                                                    insi-079
      k3=ipd(ic)                                                        insi-080
      idp=min0(idp,k3)                                                  insi-081
      if (l1.eq.0) go to 11                                             insi-082
      if (l2.gt.0) go to 9                                              insi-083
      do 8 is=k3,ism                                                    insi-084
      w(1,is)=w(1,is)+www(is,l1)*p(1,is,ic)                             insi-085
    8 w(2,is)=w(2,is)+www(is,l1)*p(2,is,ic)                             insi-086
      go to 13                                                          insi-087
    9 do 10 is=k3,ism                                                   insi-088
      w(1,is)=w(1,is)+www(is,l1)*p(1,is,ic)-www(is,l2)*p(2,is,ic)       insi-089
   10 w(2,is)=w(2,is)+www(is,l1)*p(2,is,ic)+www(is,l2)*p(1,is,ic)       insi-090
      go to 13                                                          insi-091
   11 if (l2.eq.0) go to 13                                             insi-092
      do 12 is=k3,ism                                                   insi-093
      w(1,is)=w(1,is)-www(is,l2)*p(2,is,ic)                             insi-094
   12 w(2,is)=w(2,is)+www(is,l2)*p(1,is,ic)                             insi-095
   13 if (.not.lo(210)) go to 23                                        insi-096
c derivative term of coupling potentials                                insi-097
      if (lo(207)) go to 17                                             insi-098
c no previous calculation of coupling potentials                        insi-099
      k1=k2+1                                                           insi-100
      k2=nvi(3,ic,i)                                                    insi-101
      if (k1.gt.k2) go to 23                                            insi-102
      do 16 k=k1,k2                                                     insi-103
      kt=iabs(nat(1,k))                                                 insi-104
      do 14 is=k3,ism                                                   insi-105
      w(1,is)=w(1,is)+at(2,k)*v(is,kt)*pd(1,is,ic)                      insi-106
   14 w(2,is)=w(2,is)+at(2,k)*v(is,kt)*pd(2,is,ic)                      insi-107
      if (kt.eq.nat(1,k)) go to 16                                      insi-108
      kt=kt+it(2)                                                       insi-109
      do 15 is=k3,ism                                                   insi-110
      w(1,is)=w(1,is)-at(2,k)*v(is,kt)*pd(2,is,ic)                      insi-111
   15 w(2,is)=w(2,is)+at(2,k)*v(is,kt)*pd(1,is,ic)                      insi-112
   16 continue                                                          insi-113
      go to 23                                                          insi-114
c coupling potentials already calculated                                insi-115
   17 l1=nvi(3,ic,i)                                                    insi-116
      l2=nvi(4,ic,i)                                                    insi-117
      if (l1.le.0) go to 21                                             insi-118
      if (l2.gt.0) go to 19                                             insi-119
      do 18 is=k3,ism                                                   insi-120
      w(1,is)=w(1,is)+www(is,l1)*pd(1,is,ic)                            insi-121
   18 w(2,is)=w(2,is)+www(is,l1)*pd(2,is,ic)                            insi-122
      go to 23                                                          insi-123
   19 do 20 is=k3,ism                                                   insi-124
      w(1,is)=w(1,is)+www(is,l1)*pd(1,is,ic)-www(is,l2)*pd(2,is,ic)     insi-125
   20 w(2,is)=w(2,is)+www(is,l1)*pd(2,is,ic)+www(is,l2)*pd(1,is,ic)     insi-126
      go to 23                                                          insi-127
   21 if (l2.eq.0) go to 23                                             insi-128
      do 22 is=k3,ism                                                   insi-129
      w(1,is)=w(1,is)-www(is,l2)*pd(2,is,ic)                            insi-130
   22 w(2,is)=w(2,is)+www(is,l2)*pd(1,is,ic)                            insi-131
   23 continue                                                          insi-132
      ipd(i)=idp                                                        insi-133
c search for the first non negligible value                             insi-134
      if (idp.gt.ism) return                                            insi-135
      do 24 is=idp,ism                                                  insi-136
      if ((abs(w(1,is))+abs(w(2,is))).gt.conv) go to 25                 insi-137
   24 continue                                                          insi-138
   25 ipd(i)=is                                                         insi-139
      kt=max0(ipd(i),1)                                                 insi-140
      if (ipd(i).ge.ism) return                                         insi-141
      if (lo(144)) go to 26                                             insi-142
      w(1,ism)=0.                                                       insi-143
      w(2,ism)=0.                                                       insi-144
c integral of the regular function with the second member               insi-145
   26 x(1,kt)=-ph(kt,2,i)*w(2,kt)+ph(kt,1,i)*w(1,kt)                    insi-146
      x(2,kt)=ph(kt,1,i)*w(2,kt)+ph(kt,2,i)*w(1,kt)                     insi-147
      kkt=kt+1                                                          insi-148
      if (kt.gt.ism) go to 28                                           insi-149
      do 27 is=kkt,ism                                                  insi-150
      x(1,is)=x(1,is-1)+ph(is,1,i)*w(1,is)-ph(is,2,i)*w(2,is)           insi-151
   27 x(2,is)=x(2,is-1)+ph(is,1,i)*w(2,is)+ph(is,2,i)*w(1,is)           insi-152
c scattering coefficients                                               insi-153
   28 bre=x(1,ism)/(h*fam(1))-z(1)                                      insi-154
      bim=x(2,ism)/(h*fam(1))-z(2)                                      insi-155
      if (lo(92)) go to 34                                              insi-156
      hx=z(3)*h                                                         insi-157
      hy=z(4)*h                                                         insi-158
      ist=ism+kt                                                        insi-159
c integral of the irregular function with the second member in hx/hy    insi-160
c and computation of the solution with the correction term w/12         insi-161
      do 29 is=kt,ism                                                   insi-162
      js=ist-is                                                         insi-163
      p(1,js,i)=(x(1,js)*ph(js,3,i)-x(2,js)*ph(js,4,i)-hx*ph(js,1,i)+hy*insi-164
     1ph(js,2,i))/h-w(1,js)/12.                                         insi-165
      p(2,js,i)=(x(1,js)*ph(js,4,i)+x(2,js)*ph(js,3,i)-hy*ph(js,1,i)-hx*insi-166
     1ph(js,2,i))/h-w(2,js)/12.                                         insi-167
      hx=hx-ph(js,3,i)*w(1,js)+ph(js,4,i)*w(2,js)                       insi-168
   29 hy=hy-ph(js,3,i)*w(2,js)-ph(js,4,i)*w(1,js)                       insi-169
      if (kt.eq.1) go to 31                                             insi-170
      k=kt-1                                                            insi-171
      do 30 is=1,k                                                      insi-172
      p(1,is,i)=-(hx*ph(is,1,i)-hy*ph(is,2,i))/h                        insi-173
   30 p(2,is,i)=-(hy*ph(is,1,i)+hx*ph(is,2,i))/h                        insi-174
   31 do 32 kt=1,ism                                                    insi-175
      if ((abs(p(1,kt,i))+abs(p(2,kt,i))).gt.aconv) go to 33            insi-176
   32 continue                                                          insi-177
   33 ipd(i)=kt                                                         insi-178
      if (lo(22)) go to 34                                              insi-179
      pad1(1,kiter)=bre                                                 insi-180
      pad1(2,kiter)=bim                                                 insi-181
c  test of convergence                                                  insi-182
   34 lo(205)=(dabs(bim-fai(1)).le.eiter.and.(dabs(bre-far(1)).le.eiter)insi-183
     1)                                                                 insi-184
      if (lo(122).and.lo(204).and.kiter.gt.3.and.(.not.lo(205))) call painsi-185
     1de(pad1,pad2,kiter,bre,bim,eiter,1.d0,0.d0,lo)                    insi-186
      lo(204)=lo(204).and.lo(205)                                       insi-187
      far(1)=bre                                                        insi-188
      fai(1)=bim                                                        insi-189
      if (lo(57)) write (6,1000) i,far(1),fai(1),kiter,kt               insi-190
      if (.not.lo(210).or.lo(92)) return                                insi-191
c computation of r*(d/dr) of the solutions                              insi-192
   35 ist=ism-3                                                         insi-193
      do 37 j=1,2                                                       insi-194
      pd(j,1,i)=2.5*p(j,2,i)-.25*p(j,5,i)+(5.*p(j,4,i)-7.7*p(j,1,i)-10.*insi-195
     1p(j,3,i)+.2*p(j,6,i))/6.                                          insi-196
      pd(j,2,i)=-.8*p(j,1,i)-p(j,4,i)+(8.*p(j,3,i)-3.5*p(j,2,i)+.8*p(j,5insi-197
     1,i)-.1*p(j,6,i))/3.                                               insi-198
      pd(j,3,i)=2.25*(p(j,4,i)-p(j,2,i))-.45*(p(j,5,i)-p(j,1,i))+.05*p(jinsi-199
     1,6,i)                                                             insi-200
      fp=3.                                                             insi-201
      do 36 is=4,ist                                                    insi-202
      fp=fp+1.                                                          insi-203
   36 pd(j,is,i)=fp*(.75*(p(j,is+1,i)-p(j,is-1,i))-.15*(p(j,is+2,i)-p(j,insi-204
     1is-2,i))+(p(j,is+3,i)-p(j,is-3,i))/60.)                           insi-205
      fp=fp+1.                                                          insi-206
      pd(j,ism-2,i)=fp*(p(j,ism-6,i)-8.*p(j,ism-5,i)+30.*p(j,ism-4,i)-80insi-207
     1.*p(j,ist,i)+35.*p(j,ism-2,i)+24.*p(j,ism-1,i)-2.*p(j,ism,i))/60. insi-208
      fp=fp+1.                                                          insi-209
      pd(j,ism-1,i)=fp*(15.*p(j,ism-5,i)-2.*p(j,ism-6,i)-50.*p(j,ism-4,iinsi-210
     1)+100.*p(j,ist,i)-150.*p(j,ism-2,i)+77.*p(j,ism-1,i)+10.*p(j,ism,iinsi-211
     2))/60.                                                            insi-212
      fp=fp+1.                                                          insi-213
      pd(j,ism,i)=fp*(10.*p(j,ism-6,i)-72.*p(j,ism-5,i)+225.*p(j,ism-4,iinsi-214
     1)-400.*p(j,ist,i)+450.*p(j,ism-2,i)-360.*p(j,ism-1,i)+147*p(j,ism,insi-215
     2i))/60.                                                           insi-216
   37 continue                                                          insi-217
      return                                                            insi-218
 1000 format (5x,i5,2d30.15,i10,10x,i5)                                 insi-219
      end                                                               insi-220
c 26/07/94  ibm version                                         ecis94  intr-000
      subroutine intr(fam,x,fr,gr,wre,pad,ipe,ism,kab,w,iterm,nc,ncj,v,vintr-001
     1r,nvi,cc,mc,nat,at,ag,h,aconv,eiter,ncin,nni,iterr,lo)            intr-002
c  e. c. i. s. method: dirac equation driving routine.                  intr-003
c             inrh  to solve the single homogeneous equations           intr-004
c             inri  to solve the single inhomogeneous equations         intr-005
c  pade approximants of type i may be used to accelerate the convergenceintr-006
c input variables: fam(ic,i): matching values for i=1,6                 intr-007
c                             constants of each equation for i=7,10     intr-008
c                  ism:   number of radial points                       intr-009
c                  kab:   maximum number of coupled channels            intr-010
c                  iterm: maximum number of iterations and dim. of pad  intr-011
c                  nc:    number of coupled and uncoupled equations     intr-012
c                  ncj:   number of coupled equations                   intr-013
c                  v,vr:  potentials                                    intr-014
c                  nvi:   addresses of couplings                        intr-015
c                  cc,mc: nuclear state number, angular momenta....     intr-016
c                  nat,at:table of coupling coefficients                intr-017
c                  ag:    coulomb integrals for coulomb corrections     intr-018
c                  h:     step length                                   intr-019
c                  aconv: epsilon for negligible function values        intr-020
c                  eiter: convergence epsilon for the scattering coef.  intr-021
c                  ncin:  number of solutions                           intr-022
c                  lo(i): logical controls                              intr-023
c output variables:fam(ic,i+7): scattering coefficients                 intr-024
c working fields:  x:     used in inrh and inri                         intr-025
c                  fr:    solutions of homogeneous equations            intr-026
c                  gr:    solutions of coupled equations                intr-027
c                  wre:   real/imaginary inhomogeneous term             intr-028
c                  pad(iterm,kab+2): pade approximants                  intr-029
c               ipe(i,1): first non negligible point of uncoupled func. intr-030
c               ipe(i,2): first non negligible point of coupled funct.  intr-031
c                  w:     free part of the storage for couplings        intr-032
c output variables:nni:   number of eq. with negligible inhomog. term   intr-033
c                  iterr: largest number of iterations done for this j  intr-034
c***********************************************************************intr-035
      implicit real*8 (a-h,o-z)                                         intr-036
      logical lo(250)                                                   intr-037
      real*4 aconv,cc(kab,1),h,eiter,v(ism,14,1),vr(ism,4,1),fr(ism,8,1)intr-038
     1,gr(ism,4,1),wre(ism,1),w(ism,4,1),conv,at(3,1)                   intr-039
      dimension ipe(nc,1),nvi(4,kab,1),fam(kab,1),x(1),nat(3,1),pad(2,itintr-040
     1erm,1),ag(kab,kab,1),y(2),mc(kab,1),z(4)                          intr-041
      conv=aconv*h*h                                                    intr-042
      nni=0                                                             intr-043
      i2=8*ism                                                          intr-044
c compute all coupling potentials and solve all homogeneous equations   intr-045
      do 4 i=1,nc                                                       intr-046
      i1=mc(i,4)                                                        intr-047
      if (i1.lt.0) go to 1                                              intr-048
      call inrh(fr(1,1,i),i,k,aconv,fam,x,kab,ism,lo,dble(cc(i,6)+1.),h,intr-049
     1v(1,1,i1),lo(221).or.i.gt.ncj)                                    intr-050
      ipe(i,1)=k                                                        intr-051
      go to 3                                                           intr-052
    1 i1=-i1                                                            intr-053
      if (i1.eq.i) go to 3                                              intr-054
      do 2 is=1,i2                                                      intr-055
    2 fr(is,1,i)=fr(is,1,i1)                                            intr-056
      ipe(i,1)=ipe(i1,1)                                                intr-057
    3 if (lo(57)) write (6,1000) fam(i,7),fam(i,8),i,ipe(i,1)           intr-058
    4 continue                                                          intr-059
      i2=2*ism                                                          intr-060
      if (.not.lo(207).or.lo(221)) go to 15                             intr-061
      iw=0                                                              intr-062
c calculation of the non diagonal coupling potentials                   intr-063
      do 14 ic=1,ncj                                                    intr-064
      do 13 ip=1,ic                                                     intr-065
      k1=nvi(1,ip,ic)                                                   intr-066
      k2=nvi(2,ip,ic)                                                   intr-067
      k3=nvi(3,ip,ic)                                                   intr-068
      nvi(3,ip,ic)=0                                                    intr-069
      nvi(4,ip,ic)=0                                                    intr-070
      if (k1.gt.k2) go to 8                                             intr-071
      iw=iw+1                                                           intr-072
      nvi(3,ip,ic)=iw                                                   intr-073
      k=nat(1,k1)                                                       intr-074
      do 5 is=1,i2                                                      intr-075
      w(is,1,iw)=at(2,k1)*vr(is,1,k)                                    intr-076
    5 w(is,3,iw)=at(3,k1)*vr(is,3,k)                                    intr-077
      k4=k1+1                                                           intr-078
      if (k4.gt.k2) go to 8                                             intr-079
      do 7 k1=k4,k2                                                     intr-080
      k=nat(1,k1)                                                       intr-081
      do 6 is=1,i2                                                      intr-082
      w(is,1,iw)=w(is,1,iw)+at(2,k1)*vr(is,1,k)                         intr-083
    6 w(is,3,iw)=w(is,3,iw)+at(3,k1)*vr(is,3,k)                         intr-084
    7 continue                                                          intr-085
    8 if (k2.ge.k3) go to 12                                            intr-086
      iw=iw+1                                                           intr-087
      nvi(4,ip,ic)=iw                                                   intr-088
      k1=k2+1                                                           intr-089
      k=nat(1,k1)                                                       intr-090
      do 9 is=1,i2                                                      intr-091
      w(is,1,iw)=at(2,k1)*vr(is,1,k)+at(3,k1)*vr(is,3,k)                intr-092
    9 w(is,3,iw)=at(2,k1)*vr(is,1,k)-at(3,k1)*vr(is,3,k)                intr-093
      k4=k1+1                                                           intr-094
      if (k4.gt.k3) go to 12                                            intr-095
      do 11 k1=k4,k3                                                    intr-096
      k=nat(1,k1)                                                       intr-097
      do 10 is=1,i2                                                     intr-098
      w(is,1,iw)=w(is,1,iw)+at(2,k1)*vr(is,1,k)+at(3,k1)*vr(is,3,k)     intr-099
   10 w(is,3,iw)=w(is,3,iw)+at(2,k1)*vr(is,1,k)-at(3,k1)*vr(is,3,k)     intr-100
   11 continue                                                          intr-101
   12 nvi(3,ic,ip)=nvi(3,ip,ic)                                         intr-102
      nvi(4,ic,ip)=nvi(4,ip,ic)                                         intr-103
      if (iw.gt.iw) iw=iw                                               intr-104
   13 continue                                                          intr-105
   14 continue                                                          intr-106
   15 if (lo(59)) call hora                                             intr-107
c loop on solutions                                                     intr-108
      do 29 nci=1,ncin                                                  intr-109
      nci1=nci+8                                                        intr-110
      nci2=nci1+ncin                                                    intr-111
c set the zero's order solution                                         intr-112
      do 16 ic=1,ncj                                                    intr-113
      ipe(ic,2)=ism+1                                                   intr-114
      fam(ic,nci1)=0.d0                                                 intr-115
   16 fam(ic,nci2)=0.d0                                                 intr-116
      fam(nci,nci1)=fam(nci,7)                                          intr-117
      fam(nci,nci2)=fam(nci,8)                                          intr-118
      if ((ipe(nci,1).gt.ism-3).or.lo(221)) go to 29                    intr-119
      do 17 is=1,i2                                                     intr-120
      gr(is,1,nci)=fr(is,1,nci)                                         intr-121
   17 gr(is,3,nci)=fr(is,5,nci)                                         intr-122
      ipe(nci,2)=ipe(nci,1)                                             intr-123
      amax=0.d0                                                         intr-124
c e. c. i. s. loop                                                      intr-125
      do 27 kiter=1,iterm                                               intr-126
      iterr=max0(iterr,kiter)                                           intr-127
      lo(204)=.true.                                                    intr-128
      lo(206)=((kiter.ne.iterm).and.(amax.lt.1.d10)).or.lo(23)          intr-129
      if (amax.gt.1.d10) write (6,1001) amax,kiter                      intr-130
      do 26 ic=1,ncj                                                    intr-131
      i=mod(ic+nci-1,ncj)+1                                             intr-132
      i1=mc(i,1)                                                        intr-133
      do 18 j=1,4                                                       intr-134
   18 z(j)=0.d0                                                         intr-135
      if (lo(144)) go to 23                                             intr-136
      do 21 j=1,ncj                                                     intr-137
      if (ipe(j,2).ge.ism) go to 21                                     intr-138
c order in fg   f(ei)*f(ef),g(ei)*f(ef),f(ei)*g(ef),g(ei)*g(ef)         intr-139
      if (lo(22)) go to 19                                              intr-140
      ij=kiter                                                          intr-141
      if (1+mod(j+ncj-nci-1,ncj).ge.ic) ij=ij-1                         intr-142
      if (ij.eq.0) go to 19                                             intr-143
      y(1)=pad(1,ij,j)                                                  intr-144
      y(2)=pad(2,ij,j)                                                  intr-145
      go to 20                                                          intr-146
   19 y(1)=fam(j,nci1)                                                  intr-147
      y(2)=fam(j,nci2)                                                  intr-148
   20 z(1)=z(1)+y(1)*ag(i,j,3)-y(2)*ag(i,j,1)                           intr-149
      z(2)=z(2)+y(1)*ag(i,j,1)+y(2)*ag(i,j,3)                           intr-150
      z(3)=z(3)+y(1)*ag(i,j,4)-y(2)*ag(i,j,2)                           intr-151
      z(4)=z(4)+y(1)*ag(i,j,2)+y(2)*ag(i,j,4)                           intr-152
   21 continue                                                          intr-153
      if (i.eq.nci) go to 22                                            intr-154
      z(1)=z(1)+ag(i,nci,1)                                             intr-155
      z(3)=z(3)+ag(i,nci,2)                                             intr-156
   22 z(3)=z(3)-z(2)                                                    intr-157
      z(4)=z(4)+z(1)                                                    intr-158
      z(1)=z(1)+fam(i,7)*z(3)-fam(i,8)*z(4)                             intr-159
      z(2)=z(2)+z(3)*fam(i,8)+z(4)*fam(i,7)                             intr-160
   23 if (i.ne.nci) go to 24                                            intr-161
      z(1)=z(1)-fam(i,7)                                                intr-162
      z(2)=z(2)-fam(i,8)                                                intr-163
      z(3)=z(3)-1.d0                                                    intr-164
   24 if (lo(23).and.(.not.lo(206))) lo(204)=.true.                     intr-165
c compute second members and solve the inhomogeneous equations          intr-166
      call inri(wre,fr(1,1,i),gr,w,nvi,fam(i,5),x,pad(1,1,i),pad(1,1,ncjintr-167
     1+1),kiter,eiter,conv,aconv,kab,ncj,ism,ipe(1,2),i,nat,at,vr,fam(i,intr-168
     2nci1),fam(i,nci2),cc(i,6)+1.,v(1,1,i1),lo,h,z)                    intr-169
      if (ipe(i,2).ge.ism) go to 25                                     intr-170
      if (i.ne.nci.and.lo(92)) ipe(i,2)=ism+1                           intr-171
      amax=dmax1(amax,dabs(fam(i,nci1))+dabs(fam(i,nci2)))              intr-172
      go to 26                                                          intr-173
   25 fam(i,nci1)=-z(1)                                                 intr-174
      fam(i,nci2)=-z(2)                                                 intr-175
      if (lo(57)) write (6,1002)                                        intr-176
      if (kiter.eq.1.and.lo(144)) nni=nni+1                             intr-177
      if (i.eq.nci) ipe(nci,2)=ipe(nci,1)                               intr-178
   26 continue                                                          intr-179
      if (lo(59)) call hora                                             intr-180
      if (lo(204).or.(amax.gt.1.d10.and.lo(23))) go to 28               intr-181
   27 continue                                                          intr-182
      kiter=min0(kiter,iterm)                                           intr-183
   28 if (lo(53)) write (6,1003) kiter                                  intr-184
   29 continue                                                          intr-185
      nni=nni/ncin                                                      intr-186
      return                                                            intr-187
 1000 format (2d30.15,5x,2i5)                                           intr-188
 1001 format (8h maximum,d15.6,44h obtained in previous iteration. last intr-189
     1one is,i3)                                                        intr-190
 1002 format (5x,35hthe inhomogeneous term is neglected)                intr-191
 1003 format (5x,i5,11h iterations)                                     intr-192
      end                                                               intr-193
c 26/06/94  ibm version                                         ecis94  inrh-000
      subroutine inrh(p,ic,kt,aconv,fam,x,nc,ism,lo,cc,h,vv,lt)         inrh-001
c  e. c. i. s. method: integration of a single homogeneous equation by  inrh-002
c  the numerov method   - dirac equation -                              inrh-003
c input variables: ic:    channel number of the equation                inrh-004
c                  aconv: limit for negligible function values          inrh-005
c                  fam(ic,i): matching values for i=1,4                 inrh-006
c                             constants of the equation for i=6,10      inrh-007
c                  nc:    number of coupled channels                    inrh-008
c                  ism:   number of radial points                       inrh-009
c                  lo(i): logical controls                              inrh-010
c                  cc:    eigenvalue of l.s+1                           inrh-011
c                  h:     step size                                     inrh-012
c                  vv:    potentials, d(r), ....                        inrh-013
c                  lt:    logical to return only with phase shift       inrh-014
c output variables:p(ism,i): regular solution for i=1,2 and 5,6         inrh-015
c                            irregular solution for i=3,4 and 7,8       inrh-016
c                            large components for i=1,4                 inrh-017
c                            small component for i=5,8                  inrh-018
c                  fam(ic,7/8): real/imaginary part of zero's order     inrh-019
c                         scattering coefficients                       inrh-020
c                  kt: the solution is negligible for is < kt           inrh-021
c working space:   x:    for the integration                            inrh-022
c***********************************************************************inrh-023
      implicit real*8 (a-h,o-z)                                         inrh-024
      logical lo(250),lt                                                inrh-025
      dimension fam(nc,1),x(2,2)                                        inrh-026
      real*4 p(ism,1),vv(ism,1),aconv,h                                 inrh-027
c computation of the regular solution                                   inrh-028
      do 1 is=1,ism                                                     inrh-029
      a=is*is                                                           inrh-030
      x(1,is+2)=fam(ic,10)/a-fam(ic,9)-fam(ic,7)*vv(is,1)-fam(ic,8)*vv(iinrh-031
     1s,3)                                                              inrh-032
    1 x(2,is+2)=-fam(ic,7)*vv(is,2)-fam(ic,8)*vv(is,4)                  inrh-033
      if (lo(27)) go to 3                                               inrh-034
c modified numerov method                                               inrh-035
      do 2 is=1,ism                                                     inrh-036
      a=x(1,is+2)**2-x(2,is+2)**2                                       inrh-037
      if (lo(26)) a=a*(1.d0+x(1,is+2)*.033333333333333d0)               inrh-038
      x(2,is+2)=x(2,is+2)*(1.d0+x(1,is+2)*.166666666666667d0)           inrh-039
    2 x(1,is+2)=x(1,is+2)+a*.083333333333333d0                          inrh-040
      go to 5                                                           inrh-041
c numerov method                                                        inrh-042
    3 do 4 is=1,ism                                                     inrh-043
      b=(12.d0-x(1,is+2))**2+x(2,is+2)**2                               inrh-044
      a=12.d0*(x(1,is+2)*(12.d0-x(1,is+2))-x(2,is+2)**2)/b              inrh-045
      if (lo(26)) a=a*(1.d0-x(1,is+2)**2*.416666666666667d-2)           inrh-046
      x(1,is+2)=a                                                       inrh-047
    4 x(2,is+2)=144.d0*x(2,is+2)/b                                      inrh-048
    5 x(1,1)=0.d0                                                       inrh-049
      x(2,1)=0.d0                                                       inrh-050
      x(1,2)=1.d-15                                                     inrh-051
      x(2,2)=0.d0                                                       inrh-052
      do 7 is=1,ism                                                     inrh-053
      p(is,3)=x(1,is+2)                                                 inrh-054
      p(is,4)=x(2,is+2)                                                 inrh-055
      hx=x(1,is+1)*x(1,is+2)-x(2,is+1)*x(2,is+2)                        inrh-056
      hy=x(2,is+1)*x(1,is+2)+x(1,is+1)*x(2,is+2)                        inrh-057
      x(1,is+2)=x(1,is+1)+x(1,is+1)-x(1,is)+hx                          inrh-058
      x(2,is+2)=x(2,is+1)+x(2,is+1)-x(2,is)+hy                          inrh-059
      if (dabs(x(1,is+2)).lt.1.d15) go to 7                             inrh-060
c renormalisation of large function values                              inrh-061
      j=2*is+4                                                          inrh-062
      do 6 i=3,j                                                        inrh-063
    6 x(i,1)=x(i,1)*1.d-30                                              inrh-064
    7 continue                                                          inrh-065
c end of integration                                                    inrh-066
c matching with two values                                              inrh-067
      bre=x(1,ism)*fam(ic,4)-fam(ic,3)*x(1,ism+2)                       inrh-068
      bim=x(2,ism)*fam(ic,4)-fam(ic,3)*x(2,ism+2)                       inrh-069
      hx=x(1,ism)*fam(ic,2)-fam(ic,1)*x(1,ism+2)                        inrh-070
      hy=x(2,ism)*fam(ic,2)-fam(ic,1)*x(2,ism+2)                        inrh-071
      bim=bim+hx                                                        inrh-072
      bre=bre-hy                                                        inrh-073
      brr=bre*bre+bim*bim                                               inrh-074
      bre=-bre/brr                                                      inrh-075
      bim=bim/brr                                                       inrh-076
      fam(ic,7)=bre*hx-bim*hy                                           inrh-077
      fam(ic,8)=hx*bim+hy*bre                                           inrh-078
      if (lt) return                                                    inrh-079
      bre=bre/12.d0                                                     inrh-080
      bim=bim/12.d0                                                     inrh-081
c normalisation of the regular solution                                 inrh-082
c and search of the first non negligible value                          inrh-083
      do 8 is=1,ism                                                     inrh-084
      brr=x(1,is)+10.d0*x(1,is+1)+x(1,is+2)                             inrh-085
      hy=x(2,is)+10.d0*x(2,is+1)+x(2,is+2)                              inrh-086
      hx=brr*bre-hy*bim                                                 inrh-087
      hy=hy*bre+brr*bim                                                 inrh-088
      p(is,1)=hx*vv(is,9)-hy*vv(is,10)                                  inrh-089
    8 p(is,2)=hx*vv(is,10)+hy*vv(is,9)                                  inrh-090
      do 9 kt=1,ism                                                     inrh-091
      if ((abs(p(kt,1))+abs(p(kt,2))).gt.aconv) go to 10                inrh-092
    9 continue                                                          inrh-093
   10 hx=fam(ic,1)                                                      inrh-094
      hy=fam(ic,2)                                                      inrh-095
c computation of the irregular solution - starting values               inrh-096
c the last point of imaginary potential is neglected                    inrh-097
      x(2,ism)=hx/fam(ic,6)                                             inrh-098
      x(2,ism+2)=hy/fam(ic,6)                                           inrh-099
      x(1,ism)=fam(ic,3)/fam(ic,6)                                      inrh-100
      x(1,ism+2)=fam(ic,4)/fam(ic,6)                                    inrh-101
      bre=2.d0+p(ism,3)                                                 inrh-102
      x(1,ism+1)=(x(1,ism)+x(1,ism+2))/bre                              inrh-103
      x(2,ism+1)=(x(2,ism)+x(2,ism+2))/bre                              inrh-104
      kr=min0(kt,ism-6)                                                 inrh-105
      i1=ism-kr                                                         inrh-106
c integration                                                           inrh-107
      do 11 js=1,i1                                                     inrh-108
      is=ism-js                                                         inrh-109
      hx=x(1,is+1)*p(is,3)-x(2,is+1)*p(is,4)                            inrh-110
      hy=x(2,is+1)*p(is,3)+x(1,is+1)*p(is,4)                            inrh-111
      x(1,is)=x(1,is+1)+x(1,is+1)-x(1,is+2)+hx                          inrh-112
   11 x(2,is)=x(2,is+1)+x(2,is+1)-x(2,is+2)+hy                          inrh-113
c computation of irregular solution                                     inrh-114
      do 12 is=kr,ism                                                   inrh-115
      bre=(x(1,is)+10.d0*x(1,is+1)+x(1,is+2))/12.d0                     inrh-116
      bim=(x(2,is)+10.d0*x(2,is+1)+x(2,is+2))/12.d0                     inrh-117
      p(is,3)=bre*vv(is,9)-bim*vv(is,10)                                inrh-118
   12 p(is,4)=bre*vv(is,10)+bim*vv(is,9)                                inrh-119
      ism3=ism-3                                                        inrh-120
      hh=h*60.                                                          inrh-121
      do 22 l=1,4                                                       inrh-122
      do 21 is=kt,ism                                                   inrh-123
      if (is-kr.gt.2) go to 16                                          inrh-124
      if (is-kr-1)  13 , 14 , 15                                        inrh-125
   13 p(is,l+4)=(-147.*p(is,l)+360.*p(is+1,l)-450.*p(is+2,l)+400.*p(is+3inrh-126
     1,l)-225.*p(is+4,l)+72.*p(is+5,l)-10.*p(is+6,l))/hh                inrh-127
      go to 21                                                          inrh-128
   14 p(is,l+4)=(-10.*p(kr,l)-77.*p(is,l)+150.*p(is+1,l)-100.*p(is+2,l)+inrh-129
     150.*p(is+3,l)-15.*p(is+4,l)+2.*p(is+5,l))/hh                      inrh-130
      go to 21                                                          inrh-131
   15 p(is,l+4)=(2.*p(kr,l)-24.*p(is-1,l)-35.*p(is,l)+80.*p(is+1,l)-30.*inrh-132
     1p(is+2,l)+8.*p(is+3,l)-p(is+4,l))/hh                              inrh-133
      go to 21                                                          inrh-134
   16 if (is.gt.ism3) go to 17                                          inrh-135
      p(is,l+4)=(45.*(p(is+1,l)-p(is-1,l))-9.*(p(is+2,l)-p(is-2,l))+p(isinrh-136
     1+3,l)-p(is-3,l))/hh                                               inrh-137
      go to 21                                                          inrh-138
   17 if (is-ism+1) 18 , 19 , 20                                        inrh-139
   18 p(ism-2,l+4)=(p(ism-6,l)-8.*p(ism-5,l)+30.*p(ism-4,l)-80.*p(ism3,linrh-140
     1)+35*p(ism-2,l)+24.*p(ism-1,l)-2.*p(ism,l))/hh                    inrh-141
      go to 21                                                          inrh-142
   19 p(ism-1,l+4)=(-2.*p(ism-6,l)+15.*p(ism-5,l)-50.*p(ism-4,l)+100.*p(inrh-143
     1ism3,l)-150.*p(ism-2,l)+77.*p(ism-1,l)+10.*p(ism,l))/hh           inrh-144
      go to 21                                                          inrh-145
   20 p(ism,l+4)=(10.*p(ism-6,l)-72.*p(ism-5,l)+225.*p(ism-4,l)-400.*p(iinrh-146
     1sm3,l)+450.*p(ism-2,l)-360.*p(ism-1,l)+147.*p(ism,l))/hh          inrh-147
   21 continue                                                          inrh-148
   22 continue                                                          inrh-149
      r=h*(kt-1)                                                        inrh-150
      do 23 is=kt,ism                                                   inrh-151
      r=r+h                                                             inrh-152
      br=p(is,1)*(cc/r+vv(is,13))-p(is,5)-p(is,2)*vv(is,14)             inrh-153
      bi=p(is,2)*(cc/r+vv(is,13))-p(is,6)+p(is,1)*vv(is,14)             inrh-154
      cr=p(is,3)*(cc/r+vv(is,13))-p(is,7)-p(is,4)*vv(is,14)             inrh-155
      ci=p(is,4)*(cc/r+vv(is,13))-p(is,8)+p(is,3)*vv(is,14)             inrh-156
      p(is,5)=br*vv(is,11)-bi*vv(is,12)                                 inrh-157
      p(is,6)=bi*vv(is,11)+br*vv(is,12)                                 inrh-158
      p(is,7)=cr*vv(is,11)-ci*vv(is,12)                                 inrh-159
   23 p(is,8)=ci*vv(is,11)+cr*vv(is,12)                                 inrh-160
      if (kt.eq.1) return                                               inrh-161
      kr=kt-1                                                           inrh-162
      do 25 is=1,kr                                                     inrh-163
      do 24 l=1,8                                                       inrh-164
   24 p(is,l)=0.                                                        inrh-165
   25 continue                                                          inrh-166
      return                                                            inrh-167
      end                                                               inrh-168
c 26/07/94  ibm version                                         ecis94  inri-000
      subroutine inri(w,p,q,ww,nvi,fam,x,pad1,pad2,kiter,eiter,conv,aconinri-001
     1v,kab,nc,ism,ipi,j,nat,at,vr,far,fai,xz,v,lo,h,z)                 inri-002
c  e. c. i. s. method: integration of a single inhomogeneous equation   inri-003
c  by the numerov method      - dirac equation -                        inri-004
c input variables: p:     uncoupled solutions                           inri-005
c                  q:     coupled solution                              inri-006
c                  ww:    coupling between equations                    inri-007
c                  nvi:   table of addresses of couplings               inri-008
c                  fam:   wave number                                   inri-009
c                  kiter: current iteration number                      inri-010
c                  eiter: convergence epsilon for the scattering coeff. inri-011
c                  conv:  epsilon for negligible second members         inri-012
c                  aconv: epsilon for negligible function values        inri-013
c                  kab:   dimension of table nvi                        inri-014
c                  nc:    number of coupled channels                    inri-015
c                  ism:   number of radial points                       inri-016
c                  ipi:   the function is negligible for r < ipi*h      inri-017
c                  j:     channel number of the equation                inri-018
c                  nat,at:coefficients and addresses of couplings       inri-019
c                  vr:    coupling potentials                           inri-020
c                  xz:    eigenvalue of l.s + 1                         inri-021
c                  v:     d(r) and tensor potentials for h**4 correctioninri-022
c                  lo(i): logical controls                              inri-023
c                  h:     integration step                              inri-024
c                  z:     coulomb integral for corrections              inri-025
c output variables:far,fai: real and imaginary part of scat. coeff.     inri-026
c working field:   w(ism,4):second members                              inri-027
c                  x:    integral of regular function with second memberinri-028
c                  pad1(2,j): iteration results for the channel j       inri-029
c                  pad2: working field of pade,twice longer than pad1   inri-030
c***********************************************************************inri-031
      logical lo(250)                                                   inri-032
      double precision fam(1),x(2,1),pad1(2,1),pad2(1),hx,hy,a,b,z(4),fainri-033
     1r(1),fai(1)                                                       inri-034
      dimension p(ism,1),w(ism,4),ipi(1),v(ism,1),q(ism,4,1),ww(ism,4,1)inri-035
     1,nvi(4,kab,1),wx(4),nat(3,1),at(3,1),vr(ism,4,1)                  inri-036
      ism1=ism+1                                                        inri-037
c put zero in the inhomogeneous terms                                   inri-038
      i2=4*ism                                                          inri-039
      do 1 is=1,i2                                                      inri-040
    1 w(is,1)=0.                                                        inri-041
      idp=ism1                                                          inri-042
      do 14 ic=1,nc                                                     inri-043
      if (ipi(ic).gt.ism) go to 14                                      inri-044
      k3=ipi(ic)                                                        inri-045
      idp=min0(idp,k3)                                                  inri-046
      if (lo(207)) go to 10                                             inri-047
c no previous calculation of coupling potentials                        inri-048
      l1=nvi(1,j,ic)                                                    inri-049
      l2=nvi(2,j,ic)                                                    inri-050
      l3=nvi(3,j,ic)                                                    inri-051
      if (l1.gt.l2) go to 5                                             inri-052
c scalar and vector terms of coupling potentials                        inri-053
      do 4 is=k3,ism                                                    inri-054
      do 2 i=1,4                                                        inri-055
    2 wx(i)=0.                                                          inri-056
      do 3 k1=l1,l2                                                     inri-057
      k=nat(1,k1)                                                       inri-058
      wx(1)=wx(1)+at(2,k1)*vr(is,1,k)                                   inri-059
      wx(2)=wx(2)+at(2,k1)*vr(is,2,k)                                   inri-060
      wx(3)=wx(3)+at(3,k1)*vr(is,3,k)                                   inri-061
    3 wx(4)=wx(4)+at(3,k1)*vr(is,4,k)                                   inri-062
      w(is,1)=w(is,1)+wx(1)*q(is,1,ic)-wx(2)*q(is,2,ic)                 inri-063
      w(is,2)=w(is,2)+wx(1)*q(is,2,ic)+wx(2)*q(is,1,ic)                 inri-064
      w(is,3)=w(is,3)+wx(3)*q(is,3,ic)-wx(4)*q(is,4,ic)                 inri-065
    4 w(is,4)=w(is,4)+wx(3)*q(is,4,ic)+wx(4)*q(is,3,ic)                 inri-066
    5 if (l2.ge.l3) go to 12                                            inri-067
c tensor terms of coupling potentials                                   inri-068
      l2=l2+1                                                           inri-069
      do 9 is=k3,ism                                                    inri-070
      do 6 i=1,4                                                        inri-071
    6 wx(i)=0.                                                          inri-072
      do 7 k1=l2,l3                                                     inri-073
      k=nat(1,k1)                                                       inri-074
      wx(1)=wx(1)+at(2,k1)*vr(is,1,k)                                   inri-075
      wx(2)=wx(2)+at(2,k1)*vr(is,2,k)                                   inri-076
      wx(3)=wx(3)+at(3,k1)*vr(is,3,k)                                   inri-077
    7 wx(4)=wx(4)+at(3,k1)*vr(is,4,k)                                   inri-078
      if (j.gt.ic) go to 8                                              inri-079
      wx(3)=-wx(3)                                                      inri-080
      wx(4)=-wx(4)                                                      inri-081
    8 w(is,1)=w(is,1)+(wx(1)+wx(3))*q(is,3,ic)-(wx(2)+wx(4))*q(is,4,ic) inri-082
      w(is,2)=w(is,2)+(wx(1)+wx(3))*q(is,4,ic)+(wx(2)+wx(4))*q(is,3,ic) inri-083
      w(is,3)=w(is,3)+(wx(1)-wx(3))*q(is,1,ic)-(wx(2)-wx(4))*q(is,2,ic) inri-084
    9 w(is,4)=w(is,4)+(wx(1)-wx(3))*q(is,2,ic)+(wx(2)-wx(4))*q(is,1,ic) inri-085
      go to 14                                                          inri-086
c coupling potentials computed in intr                                  inri-087
   10 k1=nvi(3,ic,j)                                                    inri-088
      if (k1.eq.0) go to 12                                             inri-089
c scalar and vector terms of coupling potentials                        inri-090
      do 11 is=k3,ism                                                   inri-091
      w(is,1)=w(is,1)+ww(is,1,k1)*q(is,1,ic)-ww(is,2,k1)*q(is,2,ic)     inri-092
      w(is,2)=w(is,2)+ww(is,1,k1)*q(is,2,ic)+ww(is,2,k1)*q(is,1,ic)     inri-093
      w(is,3)=w(is,3)+ww(is,3,k1)*q(is,3,ic)-ww(is,4,k1)*q(is,4,ic)     inri-094
   11 w(is,4)=w(is,4)+ww(is,3,k1)*q(is,4,ic)+ww(is,4,k1)*q(is,3,ic)     inri-095
   12 k1=nvi(4,ic,j)                                                    inri-096
c tensor terms of coupling potentials                                   inri-097
      if (k1.eq.0) go to 14                                             inri-098
      l1=1                                                              inri-099
      if (j.lt.ic) l1=3                                                 inri-100
      l2=4-l1                                                           inri-101
      do 13 is=k3,ism                                                   inri-102
      w(is,1)=w(is,1)+ww(is,l1,k1)*q(is,3,ic)-ww(is,l1+1,k1)*q(is,4,ic) inri-103
      w(is,2)=w(is,2)+ww(is,l1,k1)*q(is,4,ic)+ww(is,l1+1,k1)*q(is,3,ic) inri-104
      w(is,3)=w(is,3)+ww(is,l2,k1)*q(is,1,ic)-ww(is,l2+1,k1)*q(is,2,ic) inri-105
   13 w(is,4)=w(is,4)+ww(is,l2,k1)*q(is,2,ic)+ww(is,l2+1,k1)*q(is,1,ic) inri-106
   14 continue                                                          inri-107
      ipi(j)=idp                                                        inri-108
c search for the first non negligible value                             inri-109
      if (idp.gt.ism) return                                            inri-110
      do 15 is=idp,ism                                                  inri-111
      if ((abs(w(is,1))+abs(w(is,2))+abs(w(is,3))+abs(w(is,4))).gt.conv)inri-112
     1 go to 16                                                         inri-113
   15 continue                                                          inri-114
   16 ipi(j)=is                                                         inri-115
      if (ipi(j).ge.ism) return                                         inri-116
      kt=max0(ipi(j),1)                                                 inri-117
c integral of the regular function with the second member               inri-118
      x(1,kt)=p(kt,2)*w(kt,2)-p(kt,1)*w(kt,1)+p(kt,6)*w(kt,4)-p(kt,5)*w(inri-119
     1kt,3)                                                             inri-120
      x(2,kt)=-p(kt,1)*w(kt,2)-p(kt,2)*w(kt,1)-p(kt,5)*w(kt,4)-p(kt,6)*winri-121
     1(kt,3)                                                            inri-122
      kkt=kt+1                                                          inri-123
      if (kt.gt.ism) go to 18                                           inri-124
      do 17 is=kkt,ism                                                  inri-125
      x(1,is)=x(1,is-1)-p(is,1)*w(is,1)+p(is,2)*w(is,2)-p(is,5)*w(is,3)+inri-126
     1p(is,6)*w(is,4)                                                   inri-127
   17 x(2,is)=x(2,is-1)-p(is,1)*w(is,2)-p(is,2)*w(is,1)-p(is,5)*w(is,4)-inri-128
     1p(is,6)*w(is,3)                                                   inri-129
c scattering coefficients                                               inri-130
   18 hx=z(3)*h                                                         inri-131
      hy=z(4)*h                                                         inri-132
      a=x(1,ism)/fam(1)-z(1)                                            inri-133
      b=x(2,ism)/fam(1)-z(2)                                            inri-134
      if (lo(92)) go to 26                                              inri-135
      ist=ism+kt                                                        inri-136
      r=h*ism                                                           inri-137
      do 19 is=kt,ism                                                   inri-138
      js=ist-is                                                         inri-139
      q(js,1,j)=(x(1,js)*p(js,3)-x(2,js)*p(js,4)-hx*p(js,1)+hy*p(js,2)-.inri-140
     15*w(js,3))/h+(v(js,5)*w(js,1)-v(js,6)*w(js,2)+w(js,3)*(xz/r+v(js,1inri-141
     23))-w(js,4)*v(js,14))/12.                                         inri-142
      q(js,2,j)=(x(1,js)*p(js,4)+x(2,js)*p(js,3)-hy*p(js,1)-hx*p(js,2)-.inri-143
     15*w(js,4))/h+(v(js,5)*w(js,2)+v(js,6)*w(js,1)+w(js,4)*(xz/r+v(js,1inri-144
     23))+w(js,3)*v(js,14))/12.                                         inri-145
      q(js,3,j)=(x(1,js)*p(js,7)-x(2,js)*p(js,8)-hx*p(js,5)+hy*p(js,6)+.inri-146
     15*w(js,1))/h+(v(js,7)*w(js,3)-v(js,8)*w(js,4)+w(js,1)*(xz/r+v(js,1inri-147
     23))-w(js,2)*v(js,14))/12.                                         inri-148
      q(js,4,j)=(x(1,js)*p(js,8)+x(2,js)*p(js,7)-hy*p(js,5)-hx*p(js,6)+.inri-149
     15*w(js,2))/h+(v(js,7)*w(js,4)+v(js,8)*w(js,3)+w(js,2)*(xz/r+v(js,1inri-150
     23))+w(js,1)*v(js,14))/12.                                         inri-151
      hx=hx+p(js,3)*w(js,1)-p(js,4)*w(js,2)+p(js,7)*w(js,3)-p(js,8)*w(jsinri-152
     1,4)                                                               inri-153
      hy=hy+p(js,3)*w(js,2)+p(js,4)*w(js,1)+p(js,7)*w(js,4)+p(js,8)*w(jsinri-154
     1,3)                                                               inri-155
   19 r=r-h                                                             inri-156
c corrections of order h**4                                             inri-157
      kt1=kt+3                                                          inri-158
      ism3=ism-3                                                        inri-159
      if (kt1.gt.ism3) go to 21                                         inri-160
      hz=h*720.                                                         inri-161
      do 20 is=kt1,ism3                                                 inri-162
      q(is,1,j)=q(is,1,j)-(45.*(w(is+1,3)-w(is-1,3))-9.*(w(is+2,3)-w(is-inri-163
     12,3))+w(is+3,3)-w(is-3,3))/hz                                     inri-164
      q(is,2,j)=q(is,2,j)-(45.*(w(is+1,4)-w(is-1,4))-9.*(w(is+2,4)-w(is-inri-165
     12,4))+w(is+3,4)-w(is-3,4))/hz                                     inri-166
      q(is,3,j)=q(is,3,j)+(45.*(w(is+1,1)-w(is-1,1))-9.*(w(is+2,1)-w(is-inri-167
     12,1))+w(is+3,1)-w(is-3,1))/hz                                     inri-168
   20 q(is,4,j)=q(is,4,j)+(45.*(w(is+1,2)-w(is-1,2))-9.*(w(is+2,2)-w(is-inri-169
     12,2))+w(is+3,2)-w(is-3,2))/hz                                     inri-170
   21 if (kt.eq.1) go to 23                                             inri-171
      k=kt-1                                                            inri-172
      do 22 is=1,k                                                      inri-173
      q(is,1,j)=-(hx*p(is,1)-hy*p(is,2))/h                              inri-174
      q(is,2,j)=-(hy*p(is,1)+hx*p(is,2))/h                              inri-175
      q(is,3,j)=-(hx*p(is,5)-hy*p(is,6))/h                              inri-176
   22 q(is,4,j)=-(hy*p(is,5)+hx*p(is,6))/h                              inri-177
   23 do 24 kt=1,ism                                                    inri-178
      if ((abs(q(kt,1,j))+abs(q(kt,2,j))+abs(q(kt,3,j))+abs(q(kt,4,j))).inri-179
     1gt.aconv) go to 25                                                inri-180
   24 continue                                                          inri-181
   25 ipi(j)=kt                                                         inri-182
      if (lo(22)) go to 26                                              inri-183
      pad1(1,kiter)=a                                                   inri-184
      pad1(2,kiter)=b                                                   inri-185
c  test of convergence                                                  inri-186
   26 lo(205)=(dabs(b-fai(1)).le.eiter.and.(dabs(a-far(1)).le.eiter))   inri-187
      if (lo(122).and.lo(204).and.kiter.gt.3.and.(.not.lo(205))) call painri-188
     1de(pad1,pad2,kiter,a,b,eiter,1.d0,0.d0,lo)                        inri-189
      lo(204)=lo(204).and.lo(205)                                       inri-190
      far(1)=a                                                          inri-191
      fai(1)=b                                                          inri-192
      if (lo(57)) write (6,1000) j,far(1),fai(1),kiter,kt               inri-193
      return                                                            inri-194
 1000 format (5x,i5,2d30.15,i10,10x,i5)                                 inri-195
      end                                                               inri-196
c 29/10/85  ibm version                                         ecis88  pade-000
      subroutine pade(r,p,mm,bre,bim,eiter,valr,vali,lo)                pade-001
c  pade approximant of type i, continued fraction                       pade-002
c input variables: r: partial taylor sums                               pade-003
c                  mm: number of components of p                        pade-004
c                  eiter: convergence criterion                         pade-005
c                  val: variable   here taken as (1.d0,0.d0)            pade-006
c                  lo: logical controls                                 pade-007
c output variables: bre,bim if convergence is obtained                  pade-008
c working field: p: at least twice as long as r                         pade-009
c***********************************************************************pade-010
      double precision r(2,1),p(2,2,1),ai,ar,zi,zr,ai1,ar1,bim,bre,vali,pade-011
     1valr,zx                                                           pade-012
      logical lo(250)                                                   pade-013
      lo(205)=.true.                                                    pade-014
      if (mm.gt.3) go to 1                                              pade-015
      lo(205)=.false.                                                   pade-016
      return                                                            pade-017
c  taylor coefficients                                                  pade-018
    1 mt=mm+1                                                           pade-019
      p(1,1,1)=r(1,1)                                                   pade-020
      p(1,2,1)=0.d0                                                     pade-021
      p(2,1,1)=r(2,1)                                                   pade-022
      p(2,2,1)=0.d0                                                     pade-023
      do 2 i=2,mm                                                       pade-024
      p(1,1,i)=r(1,i)-r(1,i-1)                                          pade-025
      p(1,2,i)=0.d0                                                     pade-026
      p(2,1,i)=r(2,i)-r(2,i-1)                                          pade-027
    2 p(2,2,i)=0.d0                                                     pade-028
c  decomposition loop                                                   pade-029
      nm=mm-1                                                           pade-030
      do 6 na=1,nm                                                      pade-031
      ml=mm-na                                                          pade-032
      zr=p(1,1,na)                                                      pade-033
      zi=p(2,1,na)                                                      pade-034
      if (dabs(zr)+dabs(zi).ge.1.d-8) go to 4                           pade-035
      p(1,2,mt-na)=0.d0                                                 pade-036
      p(2,2,mt-na)=0.d0                                                 pade-037
      do 3 j=1,ml                                                       pade-038
      p(1,1,na+j)=p(1,1,na+j)-p(1,1,na)*p(1,2,j)+p(2,1,na)*p(2,2,j)     pade-039
    3 p(2,1,na+j)=p(2,1,na+j)-p(2,1,na)*p(1,2,j)-p(1,1,na)*p(2,2,j)     pade-040
      go to 6                                                           pade-041
    4 p(1,2,mt-na)=1.d0                                                 pade-042
      do 5 j=1,ml                                                       pade-043
      zx=p(1,1,na)**2+p(2,1,na)**2                                      pade-044
      zr=(p(1,1,na+j)*p(1,1,na)+p(2,1,na+j)*p(2,1,na))/zx               pade-045
      zi=(p(2,1,na+j)*p(1,1,na)-p(1,1,na+j)*p(2,1,na))/zx               pade-046
      p(1,1,na+j)=p(1,2,j)-zr                                           pade-047
      p(2,1,na+j)=p(2,2,j)-zi                                           pade-048
      p(1,2,j)=zr                                                       pade-049
    5 p(2,2,j)=zi                                                       pade-050
    6 continue                                                          pade-051
      ar1=1.d30                                                         pade-052
c  truncated continued fractions                                        pade-053
      do 9  n=1,nm                                                      pade-054
      ip=mm+1-n                                                         pade-055
      p(1,2,n)=p(1,1,ip)                                                pade-056
      p(2,2,n)=p(2,1,ip)                                                pade-057
      do 8  i=2,ip                                                      pade-058
      id=ip+1-i                                                         pade-059
      if (p(1,2,mt-id).gt.0.d0) go to 7                                 pade-060
      ar=valr*p(1,2,n)-vali*p(2,2,n)+p(1,1,id)                          pade-061
      ai=valr*p(2,2,n)+vali*p(1,2,n)+p(2,1,id)                          pade-062
      p(1,2,n)=ar                                                       pade-063
      p(2,2,n)=ai                                                       pade-064
      go to 8                                                           pade-065
    7 ar=1.d0+valr*p(1,2,n)-vali*p(2,2,n)                               pade-066
      ai=valr*p(2,2,n)+vali*p(1,2,n)                                    pade-067
      zx=ar*ar+ai*ai                                                    pade-068
      p(1,2,n)=(p(1,1,id)*ar+p(2,1,id)*ai)/zx                           pade-069
      p(2,2,n)=(p(2,1,id)*ar-p(1,1,id)*ai)/zx                           pade-070
    8 continue                                                          pade-071
      if (n.eq.1) go to 9                                               pade-072
c search for smallest difference                                        pade-073
      zr=p(1,2,n)-p(1,2,n-1)                                            pade-074
      zi=p(2,2,n)-p(2,2,n-1)                                            pade-075
      ai1=dmax1(dabs(zr),dabs(zi))                                      pade-076
      if (ai1.ge.ar1) go to 9                                           pade-077
      nn=n                                                              pade-078
      ar1=ai1                                                           pade-079
    9 continue                                                          pade-080
      lo(205)=ar1.le.eiter                                              pade-081
      if (lo(57)) write (6,1000) lo(205),mm,nn,p(1,2,nn),p(2,2,nn),p(1,2pade-082
     1,nn-1),p(2,2,nn-1)                                                pade-083
      if ((.not.lo(205)).and.(lo(206).or.lo(23))) return                pade-084
      lo(205)=.true.                                                    pade-085
      bre=p(1,2,nn-1)                                                   pade-086
      bim=p(2,2,nn-1)                                                   pade-087
      if (nn.eq.2) return                                               pade-088
      bre=0.5d0*(bre+p(1,2,nn))                                         pade-089
      bim=0.5d0*(bim+p(2,2,nn))                                         pade-090
      return                                                            pade-091
 1000 format (5h pade,5x,l3,5x,6hiter =,i3,5x,3hn =,i3,5x,4d15.8)       pade-092
      end                                                               pade-093
c 31/10/95  ibm version                                         ecis94  inch-000
      subroutine inch(v,vi,mc,cc,nat,at,nvi,fam,y,x,wr,wi,ism,kab,nc,ncjinch-001
     1,ncin,nml,jsx,npp,kr,lo)                                          inch-002
c  standard integration of the coupled  equations by the numerov method inch-003
c input variables: v,vi:    real and imaginary potentials and couplings inch-004
c                  mc,cc:   address of central potentials               inch-005
c                  nat,at:  geometrical coefficients                    inch-006
c                  nvi:     addresses in the table nat,at               inch-007
c                  fam:     matching values and constants of equations  inch-008
c                  y:       coulomb corrections                         inch-009
c                  ism:     number of radial points                     inch-010
c                  kab:     maximum number of coupled channels          inch-011
c                  nc:      number of channels with angular distributioninch-012
c                  ncj:     number of coupled channels                  inch-013
c                  ncin:    number of solutions                         inch-014
c                  nml:     maximum number of points where the coupling inch-015
c                           potentials can be calculated at a time      inch-016
c                  jsx:     periodicity of the schmidt's                inch-017
c                           orthogonalisation if lo(42) is .true.       inch-018
c                  npp:     number of optical potentials                inch-019
c                  lo(i):   logical controls                            inch-020
c output variables: scattering coefficients multiplied kf/ki            inch-021
c                  real part in x(ic,ic',5), imaginary part in          inch-022
c                  x(ic,ic',2) for incoming channel ic'                 inch-023
c working fields:  wr/i(ic,ic',is): real/imaginary coupling potentials  inch-024
c                  x(ic,ic',i): numerov recurrence                      inch-025
c                  kr:      working field for lins                      inch-026
c***********************************************************************inch-027
      logical lo(250),lt                                                inch-028
      double precision x(kab,kab,6),fam(kab,1),bre,bim,y(kab,kab,1)     inch-029
      dimension wr(ncj,ncj,1),wi(ncj,ncj,1),v(ism,1),vi(ism,1),mc(kab,1)inch-030
     1,nvi(4,kab,1),kr(1),nat(2,1),at(2,1)                              inch-031
      if (lo(59)) call hora                                             inch-032
      jr=0                                                              inch-033
      n2=ncj*ncj                                                        inch-034
      do 3 i=1,ncj                                                      inch-035
      do 2 j=1,ncj                                                      inch-036
      do 1 k=1,6                                                        inch-037
    1 x(j,i,k)=0.d0                                                     inch-038
    2 continue                                                          inch-039
    3 x(i,i,3)=1.d-15                                                   inch-040
c  radial integration loop                                              inch-041
      do 31 js=1,ism                                                    inch-042
      is=mod(js-1,nml)+1                                                inch-043
      if (js.le.jr) go to 17                                            inch-044
      ji=jr+1                                                           inch-045
      jr=min0(ism,jr+nml)                                               inch-046
c the potentials are first calculated in wr(ic,ic',i) and               inch-047
c wi(ic,ic',i) starting with i=2   for ic larger or equal to ic'        inch-048
      do 10 l=1,ncj                                                     inch-049
      do 9 j=l,ncj                                                      inch-050
      m=j+(l-1)*ncj                                                     inch-051
      n=m                                                               inch-052
      do 4 i=ji,jr                                                      inch-053
      n=n+n2                                                            inch-054
      wr(n,1,1)=0.                                                      inch-055
    4 wi(n,1,1)=0.                                                      inch-056
      if (l.ne.j) go to 6                                               inch-057
c optical model contribution                                            inch-058
      n=m                                                               inch-059
      i1=mc(l,4)                                                        inch-060
      i2=i1+npp                                                         inch-061
      do 5 i=ji,jr                                                      inch-062
      n=n+n2                                                            inch-063
      bre=i*i                                                           inch-064
      wr(n,1,1)=fam(l,9)-fam(l,10)/bre+fam(l,7)*v(i,i1)                 inch-065
      wi(n,1,1)=fam(l,7)*vi(i,i1)                                       inch-066
      if (.not.lo(201)) wr(n,1,1)=wr(n,1,1)+fam(l,8)*v(i,i2)            inch-067
      if (.not.lo(202)) wi(n,1,1)=wi(n,1,1)+fam(l,8)*vi(i,i2)           inch-068
    5 continue                                                          inch-069
c coupled channel contribution                                          inch-070
    6 k1=nvi(1,j,l)                                                     inch-071
      k2=nvi(2,j,l)                                                     inch-072
      if (k1.gt.k2) go to 9                                             inch-073
      do 8 k=k1,k2                                                      inch-074
      kt=iabs(nat(1,k))                                                 inch-075
      lt=kt.ne.nat(1,k)                                                 inch-076
      n=m                                                               inch-077
      do 7 i=ji,jr                                                      inch-078
      n=n+n2                                                            inch-079
      wr(n,1,1)=wr(n,1,1)+at(2,k)*v(i,kt)                               inch-080
      if (lt) wi(n,1,1)=wi(n,1,1)+at(2,k)*vi(i,kt)                      inch-081
    7 continue                                                          inch-082
    8 continue                                                          inch-083
    9 continue                                                          inch-084
   10 continue                                                          inch-085
      jj=jr-ji+1                                                        inch-086
      do 16 i=1,jj                                                      inch-087
      j=i+1                                                             inch-088
c symmetrisation of old values                                          inch-089
      do 12 k=1,ncj                                                     inch-090
      do 11 l=k,ncj                                                     inch-091
      wr(k,l,j)=wr(l,k,j)                                               inch-092
   11 wi(k,l,j)=wi(l,k,j)                                               inch-093
   12 continue                                                          inch-094
c computation of v +v*v/12. for l larger or equal to k                  inch-095
      do 15 k=1,ncj                                                     inch-096
      do 14 l=k,ncj                                                     inch-097
      bre=0.                                                            inch-098
      bim=0.                                                            inch-099
      do 13 n=1,ncj                                                     inch-100
      bre=bre-wr(n,k,j)*wr(n,l,j)+wi(n,k,j)*wi(n,l,j)                   inch-101
   13 bim=bim-wi(n,k,j)*wr(n,l,j)-wr(n,k,j)*wi(n,l,j)                   inch-102
c symmetrisation                                                        inch-103
      wr(l,k,i)=wr(l,k,j)+bre/12.                                       inch-104
      wi(l,k,i)=wi(l,k,j)+bim/12.                                       inch-105
      wr(k,l,i)=wr(l,k,i)                                               inch-106
   14 wi(k,l,i)=wi(l,k,i)                                               inch-107
      if (lo(30)) wr(k,k,i)=wr(k,k,i)+wr(k,k,j)**3/360.                 inch-108
   15 continue                                                          inch-109
   16 continue                                                          inch-110
   17 do 24 i=1,ncj                                                     inch-111
      do 18 j=1,ncj                                                     inch-112
      x(i,j,1)=x(i,j,2)                                                 inch-113
      x(i,j,2)=x(i,j,3)                                                 inch-114
      x(i,j,4)=x(i,j,5)                                                 inch-115
   18 x(i,j,5)=x(i,j,6)                                                 inch-116
   19 do 21 j=1,ncj                                                     inch-117
      hx=0.                                                             inch-118
      hy=0.                                                             inch-119
      do 20 k=1,ncj                                                     inch-120
      hx=hx+wr(k,j,is)*sngl(x(i,k,2))-wi(k,j,is)*sngl(x(i,k,5))         inch-121
   20 hy=hy+wi(k,j,is)*sngl(x(i,k,2))+wr(k,j,is)*sngl(x(i,k,5))         inch-122
      x(i,j,3)=x(i,j,2)+x(i,j,2)-x(i,j,1)-dble(hx)                      inch-123
   21 x(i,j,6)=x(i,j,5)+x(i,j,5)-x(i,j,4)-dble(hy)                      inch-124
      if (dabs(x(i,i,3)).lt.1.d15) go to 24                             inch-125
      do 23 ji=1,6                                                      inch-126
      do 22 ij=1,ncj                                                    inch-127
   22 x(i,ij,ji)=x(i,ij,ji)*1.d-30                                      inch-128
   23 continue                                                          inch-129
      go to 19                                                          inch-130
   24 continue                                                          inch-131
      if (lo(142).or.mod(js,jsx).ne.0.or.js.eq.ism) go to 31            inch-132
c  schmidt orthogonalisation procedure every jsx steps                  inch-133
      do 30 i=1,ncj                                                     inch-134
      if (i.eq.1) go to 28                                              inch-135
      in=i-1                                                            inch-136
      do 27 k=1,in                                                      inch-137
      x(i,k,1)=0.d0                                                     inch-138
      x(i,k,4)=0.d0                                                     inch-139
      do 25 j=1,ncj                                                     inch-140
      x(i,k,1)=x(i,k,1)+x(k,j,2)*x(i,j,2)-x(k,j,5)*x(i,j,5)             inch-141
   25 x(i,k,4)=x(i,k,4)+x(k,j,5)*x(i,j,2)+x(k,j,2)*x(i,j,5)             inch-142
      bre=x(i,k,1)*x(k,k,1)-x(i,k,4)*x(k,k,4)                           inch-143
      bim=x(i,k,1)*x(k,k,4)+x(i,k,4)*x(k,k,1)                           inch-144
      do 26 j=1,ncj                                                     inch-145
      x(i,j,2)=x(i,j,2)-bre*x(k,j,2)+bim*x(k,j,5)                       inch-146
      x(i,j,5)=x(i,j,5)-bre*x(k,j,5)-bim*x(k,j,2)                       inch-147
      x(i,j,3)=x(i,j,3)-bre*x(k,j,3)+bim*x(k,j,6)                       inch-148
   26 x(i,j,6)=x(i,j,6)-bre*x(k,j,6)-bim*x(k,j,3)                       inch-149
   27 continue                                                          inch-150
   28 bre=0.d0                                                          inch-151
      bim=0.d0                                                          inch-152
      do 29 j=1,ncj                                                     inch-153
      bre=bre+x(i,j,2)**2-x(i,j,5)**2                                   inch-154
   29 bim=bim+2.d0*x(i,j,2)*x(i,j,5)                                    inch-155
      bim=bim/bre                                                       inch-156
      x(i,i,1)=1.d0/(bre*(1.d0+bim**2))                                 inch-157
   30 x(i,i,4)=-x(i,i,1)*bim                                            inch-158
   31 continue                                                          inch-159
      if (lo(59)) call hora                                             inch-160
c  matrices of pseudo-wronskians for the matching condition             inch-161
      do 33 i=1,ncj                                                     inch-162
      do 32 j=1,ncj                                                     inch-163
      j1=ncj+j                                                          inch-164
      x(i,j1,1)=(x(i,j,1)*fam(j,2)-fam(j,1)*x(i,j,3))                   inch-165
      x(i,j1,4)=(x(i,j,6)*fam(j,1)-fam(j,2)*x(i,j,4))                   inch-166
      x(i,j,1)=(x(i,j,3)*fam(j,3)-fam(j,4)*x(i,j,1))                    inch-167
      x(i,j,4)=(x(i,j,4)*fam(j,4)-fam(j,3)*x(i,j,6))                    inch-168
      if (fam(j,9).lt.0.d0) go to 32                                    inch-169
      x(i,j,1)=x(i,j,1)-x(i,j1,4)                                       inch-170
      x(i,j,4)=x(i,j,4)+x(i,j1,1)                                       inch-171
   32 continue                                                          inch-172
   33 continue                                                          inch-173
c  complex linear system of equations                                   inch-174
      ncx=ncin                                                          inch-175
      if (lo(44)) ncx=ncj                                               inch-176
      call lins(x(1,1,4),kab,x,kab,ncj,ncx,kr,ier)                      inch-177
      if (ier.ne.0) go to 42                                            inch-178
      if (lo(144)) go to 39                                             inch-179
c building the linear system for s-matrix with coulomb corrections      inch-180
      do 36 i=1,ncj                                                     inch-181
      do 35 j=1,ncj                                                     inch-182
      j1=ncj+j                                                          inch-183
      x(i,j,1)=y(j,i,1)                                                 inch-184
      x(i,j,3)=x(i,j1,1)                                                inch-185
      x(i,j,4)=y(j,i,2)                                                 inch-186
      x(i,j,6)=-y(j,i,1)+x(i,j1,4)                                      inch-187
      do 34 k=1,ncj                                                     inch-188
      k1=k+ncj                                                          inch-189
      x(i,j,1)=x(i,j,1)-(y(j,k,1)-y(j,k,4))*x(i,k1,1)+(y(j,k,3)+y(j,k,2)inch-190
     1)*x(i,k1,4)                                                       inch-191
      x(i,j,3)=x(i,j,3)-y(j,k,3)*x(i,k1,1)-y(j,k,1)*x(i,k1,4)           inch-192
      x(i,j,4)=x(i,j,4)-(y(j,k,1)-y(j,k,4))*x(i,k1,4)-(y(j,k,2)+y(j,k,3)inch-193
     1)*x(i,k1,1)                                                       inch-194
   34 x(i,j,6)=x(i,j,6)-y(j,k,3)*x(i,k1,4)+y(j,k,1)*x(i,k1,1)           inch-195
   35 continue                                                          inch-196
   36 x(i,i,4)=x(i,i,4)+1.d0                                            inch-197
c transfer of the second members in x(1,1,5) and x(1,1,2)               inch-198
      do 38 i=1,ncj                                                     inch-199
      do 37 j=1,ncj                                                     inch-200
      j1=ncj+j                                                          inch-201
      y(i,j,2)=x(i,j1,1)                                                inch-202
      x(i,j1,1)=x(i,j,3)                                                inch-203
      y(i,j,1)=x(i,j1,4)                                                inch-204
   37 x(i,j1,4)=x(i,j,6)                                                inch-205
   38 continue                                                          inch-206
      call lins(x(1,1,4),kab,x,kab,ncj,ncin,kr,ier)                     inch-207
      if (ier.ne.0) go to 42                                            inch-208
      if (lo(57)) write (6,1000) ((i,j,y(i,j,1),y(i,j,2),x(i,ncj+j,4),x(inch-209
     1i,ncj+j,1),j=1,ncin),i=1,ncj)                                     inch-210
   39 n=ncj+1                                                           inch-211
      if (nc.lt.n) return                                               inch-212
      lt=lo(221)                                                        inch-213
      lo(221)=.true.                                                    inch-214
      do 41 i=n,nc                                                      inch-215
      i1=mc(i,4)                                                        inch-216
      if (i1.lt.0) go to 40                                             inch-217
      call insh(wr,i,i1,kt,1.e-8,fam,x(1,1,6),kab,ism,v,nat,at,nvi,cc,loinch-218
     1,.true.)                                                          inch-219
   40 x(i,i+ncj,4)=fam(i,7)                                             inch-220
   41 x(i,i+ncj,1)=fam(i,8)                                             inch-221
      lo(221)=lt                                                        inch-222
      return                                                            inch-223
   42 write (6,1001) ier                                                inch-224
      stop                                                              inch-225
 1000 format (/25x,18huncorrected values,30x,16hcorrected values/(2x,2i3inch-226
     1,4d25.15))                                                        inch-227
 1001 format (28h return from lins with ier =,i2,23h in inch   ... stop inch-228
     1...)                                                              inch-229
      end                                                               inch-230
c 29/10/85  ibm version                                         ecis88  lins-000
      subroutine lins(a,ia,b,ib,na,m,k,ier)                             lins-001
c lins: jlsb2 version 01 18/12/68 math l003 de saclay                   lins-002
c solution of double precision complex linear systems with real and     lins-003
c imaginary parts in different arrays                                   lins-004
c     a real component of matrix and second members                     lins-005
c     b imaginary component of matrix and second members                lins-006
c second members are replaced by solutions                              lins-007
c     ia first dimension of array a                                     lins-008
c     ib first dimension of array b                                     lins-009
c     na order of the system                                            lins-010
c     m  number of second members                                       lins-011
c     k  working field of dimension >/= na                              lins-012
c     ier returns diagnostic 0 non singular matrix                      lins-013
c                            1 singular matrix                          lins-014
c                            2 quasi singular matrix                    lins-015
c***********************************************************************lins-016
      implicit real*8 (a-h,o-z)                                         lins-017
      dimension a(ia,1),k(1),b(ib,1)                                    lins-018
      ier=0                                                             lins-019
      n=na                                                              lins-020
      ndeb=n+1                                                          lins-021
      nm=n+m                                                            lins-022
      do 1 i=1,n                                                        lins-023
    1 k(i)=i                                                            lins-024
      do 11 i=1,n                                                       lins-025
      amax=dabs(a(i,i))+dabs(b(i,i))                                    lins-026
      jmax=i                                                            lins-027
      i1=i+1                                                            lins-028
      if (i.eq.n) go to 3                                               lins-029
      do 2 j=i1,n                                                       lins-030
      amay=dabs(a(i,j))+dabs(b(i,j))                                    lins-031
      if (amax.ge.amay) go to 2                                         lins-032
      amax=amay                                                         lins-033
      jmax=j                                                            lins-034
    2 continue                                                          lins-035
    3 if (amax.eq.0.) go to 18                                          lins-036
      if (jmax.eq.i) go to 5                                            lins-037
      do 4 i2=1,n                                                       lins-038
      aux=b(i2,i)                                                       lins-039
      b(i2,i)=b(i2,jmax)                                                lins-040
      b(i2,jmax)=aux                                                    lins-041
      aux=a(i2,i)                                                       lins-042
      a(i2,i)=a(i2,jmax)                                                lins-043
    4 a(i2,jmax)=aux                                                    lins-044
      nab=k(jmax)                                                       lins-045
      k(jmax)=k(i)                                                      lins-046
      k(i)=nab                                                          lins-047
    5 if (i.eq.1) go to 7                                               lins-048
      sr=0.d0                                                           lins-049
      si=0.d0                                                           lins-050
      t=0.d0                                                            lins-051
      in=i-1                                                            lins-052
      do 6 it=1,in                                                      lins-053
      pr=a(it,i)*a(i,it)-b(it,i)*b(i,it)                                lins-054
      pi=a(it,i)*b(i,it)+a(i,it)*b(it,i)                                lins-055
      sr=sr+pr                                                          lins-056
      si=si+pi                                                          lins-057
    6 t=t+dabs(pr)+dabs(pi)                                             lins-058
      era=1.d-16*(t+dabs(a(i,i)-sr)+dabs(b(i,i)-si))                    lins-059
      if (amax.gt.era) go to 7                                          lins-060
      ier=2                                                             lins-061
      write (6,1000)                                                    lins-062
      go to 19                                                          lins-063
    7 do 8 j=i1,nm                                                      lins-064
      aa=a(i,j)                                                         lins-065
      bb=b(i,j)                                                         lins-066
      ai=a(i,i)                                                         lins-067
      bi=b(i,i)                                                         lins-068
      d=ai*ai+bi*bi                                                     lins-069
      a(i,j)=(aa*ai+bb*bi)/d                                            lins-070
    8 b(i,j)=(bb*ai-aa*bi)/d                                            lins-071
      if (i.eq.n) go to 11                                              lins-072
      do 10 i3 =i1,n                                                    lins-073
      do 9 j3 =i1,nm                                                    lins-074
      b(i3,j3)=b(i3,j3)-a(i3,i)*b(i,j3)-b(i3,i)*a(i,j3)                 lins-075
    9 a(i3,j3)=a(i3,j3)-a(i3,i)*a(i,j3)+b(i3,i)*b(i,j3)                 lins-076
   10 continue                                                          lins-077
   11 continue                                                          lins-078
      if (n.eq.1) go to 19                                              lins-079
      do 14 kc=ndeb,nm                                                  lins-080
      j=n                                                               lins-081
   12 i=j-1                                                             lins-082
   13 a(i,kc)=a(i,kc)-a(j,kc)*a(i,j)+b(j,kc)*b(i,j)                     lins-083
      b(i,kc)=b(i,kc)-a(j,kc)*b(i,j)-b(j,kc)*a(i,j)                     lins-084
      i=i-1                                                             lins-085
      if (i.ne.0) go to 13                                              lins-086
      j=j-1                                                             lins-087
      if (j.ne.1) go to 12                                              lins-088
   14 continue                                                          lins-089
      do 17 i=1,n                                                       lins-090
   15 j=k(i)                                                            lins-091
      if (j.le.i) go to 17                                              lins-092
      k(i)=k(j)                                                         lins-093
      k(j)=j                                                            lins-094
      do 16 mp=ndeb,nm                                                  lins-095
      aux=b(j,mp)                                                       lins-096
      b(j,mp)=b(i,mp)                                                   lins-097
      b(i,mp)=aux                                                       lins-098
      aux=a(j,mp)                                                       lins-099
      a(j,mp)=a(i,mp)                                                   lins-100
   16 a(i,mp)=aux                                                       lins-101
      go to 15                                                          lins-102
   17 continue                                                          lins-103
      go to 19                                                          lins-104
   18 ier=1                                                             lins-105
      write(6,1001)                                                     lins-106
   19 return                                                            lins-107
 1000 format (41h *****  lins  ***** quasi singular matrix)             lins-108
 1001 format (41h *****  lins  *****       singular matrix)             lins-109
      end                                                               lins-110
c 28/07/95  ibm version                                         ecis95  scam-000
      subroutine scam(f,jmax,mc,cc,far,fai,wv,aj,jpi,ipj,fnc,ncols,kab,kscam-001
     1ba,nc,ncj,ncin,r1,ipi,gam,fiss,tl,nci,xd,p,v,nct,lo)              scam-002
c storage of scattering coefficients                                    scam-003
c  input variables:jmax: maximum number of channel spins, dim. for f,fncscam-004
c                  mc,cc:equivalent by call: nuclear state numbers      scam-005
c                        angular momenta, etc... see quan               scam-006
c                  far/fai: real/imaginary part of scattering coeff.    scam-007
c                  wv:   wave number and coulomb parameter.  see colf   scam-008
c                  aj:   channel spin                                   scam-009
c                  jpi:  channel parity (0/1)                           scam-010
c                  ipj:  number of the channel spin                     scam-011
c                  ncols:number of levels with angular distribution     scam-012
c                  kab:  dimension for mc,cc                            scam-013
c                  kba:  number of independent amplitudes               scam-014
c                  nc:   number of channels with angular distribution   scam-015
c                  ncj:  number of coupled channels                     scam-016
c                  ncin: number of solutions                            scam-017
c                  ipi:  parity, multiplicity, addresses in f (see calx)scam-018
c                  gam:  gamma transmission coefficients read           scam-019
c                  fiss: fission coefficients for compound nucleus      scam-020
c                  tl:   transmission coefficients of uncoupled levels  scam-021
c                  ncont:number of continua for compound nucleus        scam-022
c                  nci:  starting and final addresses for continua      scam-023
c                  xd:   energy and spin dependence of level densities  scam-024
c                  nct:  number of equa. and solutions for each parity  scam-025
c                  lo:   logical controls                               scam-026
c by common /ncomp/bz1,bz2,bz3: parameter for compound nucleus (see des-scam-027
c                    cription of input. for the others see conu         scam-028
c output variables:f:    scattering coefficients                        scam-029
c                  fnc:  compound nucleus contributions                 scam-030
c                  r1:   maximum of scattering coefficient              scam-031
c working space:   p:    for diagonalisation of the s matrix            scam-032
c                  v:    for transmission coefficients                  scam-033
c***********************************************************************scam-034
      logical lo(250),lg,lf                                             scam-035
      dimension mc(kab,1),cc(kab,1),ip(2),fnc(jmax,1),ipi(9,1),v(5,20),gscam-036
     1am(1),fiss(2,1),tl(1),nct(1),nci(2,1),xd(3,1)                     scam-037
      double precision f(2,jmax,1),far(kab,1),fai(kab,1),wv(11,1),p(ncj,scam-038
     1ncj,4),a1,a2,b1,b2,x(20),w(20),tp(20),g,bir,bri                   scam-039
      common /ncomp/ nsp(3),nfiss,nrd,ncont,ncoj,acn1,acn2,ncons,nie,ncoscam-040
     1i,nscn,nxd,ncolx,az(6),bz1,bz2,bz3,tg0,bn,fnug,egd,ggd,tg1,sgsq   scam-041
      data ip /1h+,1h-/                                                 scam-042
      data x /0.07054,0.372127,0.916582,1.707307,2.749199,4.048925,5.615scam-043
     1175,7.459017,9.594393,12.038803,14.814293,17.948896,21.478788,25.4scam-044
     251703,29.932555,35.013434,40.833057,47.619994,55.810796,66.524417/scam-045
      data w /0.18108,0.422556,0.666909,0.91535,1.16954,1.43135,1.70298,scam-046
     11.98701,2.28664,2.60583,2.94979,3.3254,3.74226,4.21425,4.76253,5.4scam-047
     22168,6.25397,7.38731,9.15128,12.89338/                            scam-048
      ns=mod(ipj+jpi+1,2)                                               scam-049
      ny=nct(ns+1)                                                      scam-050
      if (ns.ne.0) ns=nct(1)*nct(3)                                     scam-051
      r1=0.                                                             scam-052
      iaj=2*aj+.1                                                       scam-053
      if (lo(55)) write (6,1000) aj,ip(jpi+1),nc,ncin                   scam-054
      if (lo(63))                                                       capote
     & write (76,'(1x,f4.1,1x,a1,1x,i4)') aj,ip(jpi+1),nc               capote
      if(lo(56))                                                        capote
     & write (78,'(1x,f4.1,1x,a1,1x,i4,1x,i4)') aj,ip(jpi+1),nc,ncin    capote
c computation of transmission coefficients                              scam-055
      if (.not.lo(224)) go to 19                                        scam-056
      jc=nc                                                             scam-057
      do 3 ic=1,nc                                                      scam-058
      iv=mc(ic,1)                                                       scam-059
      v(1,ic)=0.                                                        scam-060
      v(5,ic)=1.                                                        scam-061
      if (wv(3,iv).lt.0.d0) go to 3                                     scam-062
      v(1,ic)=4.*fai(ic,ic)                                             scam-063
      if (ic.le.ncj) go to 1                                            scam-064
      v(1,ic)=v(1,ic)-4.*(far(ic,ic)**2+fai(ic,ic)**2)                  scam-065
      go to 3                                                           scam-066
    1 do 2 icp=1,ncj                                                    scam-067
      ivq=mc(icp,1)                                                     scam-068
      if (wv(3,ivq).lt.0.d0) go to 2                                    scam-069
      a1=wv(6,iv)/wv(6,ivq)                                             scam-070
      if (lo(225)) a1=1.d0/a1                                           scam-071
      far(ic,icp)=far(ic,icp)*a1                                        scam-072
      fai(ic,icp)=fai(ic,icp)*a1                                        scam-073
      v(1,ic)=v(1,ic)-4.*(far(ic,icp)**2+fai(ic,icp)**2)                scam-074
    2 continue                                                          scam-075
    3 continue                                                          scam-076
      if (lo(163)) go to 5                                              scam-077
      ic=1+(nc-1)/4                                                     scam-078
c     do 4 i=1,ic                                                       scam-079
c     j1=1+4*(i-1)                                                      scam-080
c     j2=min0(nc,j1+3)                                                  scam-081
c   4 write (72,1001) aj,ip(jpi+1),i,(v(1,j),j=j1,j2)                   capote
c   4 write (7,1001) aj,ip(jpi+1),i,(v(1,j),j=j1,j2)                    scam-082
    5 if (lo(181)) go to 19                                             scam-083
      tg=0.d0                                                           scam-084
      if (lo(186)) go to 8                                              scam-085
      if (nrd.ne.0) go to 7                                             scam-086
      c1=0.                                                             scam-087
      n1=iaj-2                                                          scam-088
      n1=iabs(n1)                                                       scam-089
      n2=iaj+2                                                          scam-090
      do 6 j=n1,n2,2                                                    scam-091
      c2=-(j+1)*(j+1)/(4.*sgsq)                                         scam-092
    6 c1=c1+exp(c2)*(j+1)/sgsq                                          scam-093
      tg=6.2832*tg1*c1                                                  scam-094
      go to 8                                                           scam-095
    7 if (ipj.le.nrd) tg=gam(ipj)                                       scam-096
    8 lg=lo(186).or.tg.eq.0.                                            scam-097
      tf=0.                                                             scam-098
      fn=1.                                                             scam-099
      if (lo(186)) go to 9                                              scam-100
      kn=2*ipj+jpi-2                                                    scam-101
      if (kn.ge.nfiss) go to 9                                          scam-102
      tf=fiss(1,kn)                                                     scam-103
      fn=fiss(2,kn)                                                     scam-104
    9 lf=lo(185).or.tf.eq.0.                                            scam-105
      if (nsp(3).lt.1) go to 19                                         scam-106
      nsp1=nsp(3)                                                       scam-107
      if (ncont.ne.0) nsp1=nci(1,1)-ncols-1                             scam-108
      if (nsp1.lt.1) go to 13                                           scam-109
      do 12 i=1,nsp1                                                    scam-110
      ii=i+ncols                                                        scam-111
      if (wv(3,ii).lt.0.d0) go to 12                                    scam-112
      nm=ipi(3,ii)                                                      scam-113
      mn=ipi(2,ii)                                                      scam-114
      do 11 j=1,nm                                                      scam-115
      nn=iaj-nm-1+2*j                                                   scam-116
      if (nn.lt.iabs(nm-1-iaj)) go to 11                                scam-117
      do 10 k=1,mn                                                      scam-118
      mm=nn+mn+1-2*k                                                    scam-119
      if (mm.lt.iabs(mn-1-nn).or.mm.ge.2*ipi(9,ii)+2) go to 10          scam-120
      l=mm/2                                                            scam-121
      if (mod(l+jpi+ipi(1,ii),2).ne.0) go to 10                         scam-122
      m=mn*l+k+ipi(6,ii)                                                scam-123
      fj=nn                                                             scam-124
      jc=jc+1                                                           scam-125
      v(1,jc)=tl(m)                                                     scam-126
      v(3,jc)=i*10000+l*100+0.5*fj                                      scam-127
      v(4,jc)=0.                                                        scam-128
      v(5,jc)=1.                                                        scam-129
   10 continue                                                          scam-130
   11 continue                                                          scam-131
   12 continue                                                          scam-132
   13 if (ncont.eq.0) go to 19                                          scam-133
      je=0                                                              scam-134
      do 18 i=1,ncont                                                   scam-135
      ij=nci(1,i)                                                       scam-136
      ji=nci(2,i)                                                       scam-137
      mn=ipi(2,ij)                                                      scam-138
      do 17 ii=ij,ji                                                    scam-139
      if (wv(3,ii).lt.0.d0) go to 17                                    scam-140
      je=je+1                                                           scam-141
      it=mod(ipi(3,ij)+1,2)                                             scam-142
      l=ipi(9,ii)+1                                                     scam-143
      if (l.eq.0) go to 17                                              scam-144
      m=ipi(6,ii)                                                       scam-145
      do 16 lj=1,l                                                      scam-146
      do 15 jl=1,mn                                                     scam-147
      m=m+1                                                             scam-148
      if (tl(m).eq.0.) go to 15                                         scam-149
      jj=2*(lj+jl)-mn-3                                                 scam-150
      if (jj.lt.0) go to 15                                             scam-151
      ikm=iabs(jj-iaj)/2+1                                              scam-152
      ikp=min0((jj+iaj)/2+1,ncoj)                                       scam-153
      if (ikm.gt.ikp) go to 15                                          scam-154
      xf=0.                                                             scam-155
      do 14 kk=ikm,ikp                                                  scam-156
      fk=.5*float(it+2*kk-1)                                            scam-157
   14 xf=xf+fk*exp(-fk*fk/xd(3,je))/xd(3,je)                            scam-158
      fj=jj                                                             scam-159
      jc=jc+1                                                           scam-160
      v(1,jc)=tl(m)                                                     scam-161
      v(3,jc)=(ii-ncols)*10000+(lj-1)*100+0.5*fj                        scam-162
      v(4,jc)=0.                                                        scam-163
      v(5,jc)=xf*xd(1,je)                                               scam-164
   15 continue                                                          scam-165
   16 continue                                                          scam-166
   17 continue                                                          scam-167
   18 continue                                                          scam-168
c storage of the amplitudes                                             scam-169
   19 do 21 ic=1,ncin                                                   scam-170
      nt=ns+(mc(ic,7)-1)*ny                                             scam-171
      do 20 icp=1,ncj                                                   scam-172
      iv=mc(icp,1)                                                      scam-173
      id=nt+mc(icp,7)                                                   scam-174
      a1=wv(6,iv)                                                       scam-175
      if (lo(225)) a1=1.d0/a1                                           scam-176
      if (lo(224)) a1=1.d0                                              scam-177
      f(1,ipj,id)=far(icp,ic)*a1                                        scam-178
      f(2,ipj,id)=fai(icp,ic)*a1                                        scam-179
c test of convergence                                                   scam-180
      r1=amax1(r1,sngl(dabs(f(1,ipj,id))+dabs(f(2,ipj,id))))            scam-181
      a1=f(1,ipj,id)*f(1,ipj,id)+f(2,ipj,id)*f(2,ipj,id)                scam-182
      if (a1.gt.1.d0) write (6,1002) aj,ip(jpi+1),nc,ncin,ic,icp,f(1,ipjscam-183
     1,id),f(2,ipj,id)                                                  scam-184
      if (lo(155)) go to 20                                             scam-185
c print out of the amplitudes                                           scam-186
      a1=sqrt(a1)                                                       scam-187
      if (a1.ne.0.) b1=atan2(f(2,ipj,id),f(1,ipj,id))                   scam-188
      write (6,1003) icp,ic,iv,mc(icp,2),cc(icp,3),f(1,ipj,id),f(2,ipj,iscam-189
     1d),a1,b1                                                          scam-190
      if (lo(63)) write (6,1004) v(1,icp)                               scam-191
C     Only writing Tljc(J) corresponding to the first solution          capote
      if (lo(63).and.ic.eq.1)                                           capote
     >  write (76,'(1x,I2,1x,I3,1x,F5.1,1x,e15.6)')                     capote
     >                  iv, mc(icp,2), cc(icp,3), max(v(1,icp),0.)      capote 
   20 continue                                                          scam-192
   21 continue                                                          scam-193
      if (lo(181)) return                                               scam-194
c compound nucleus                                                      scam-195
      if (lo(82)) go to 63                                              scam-196
      if (lo(56)) write (6,1005) aj,ip(jpi+1)                           scam-197
      if (lo(83)) go to 25                                              scam-198
c computation of satchler p-matrix ('pr','pi')                          scam-199
      do 24 i=1,ncj                                                     scam-200
      do 23 j=1,ncj                                                     scam-201
      p(i,j,1)=2.d0*(fai(i,j)+fai(j,i))                                 scam-202
      p(i,j,2)=0.d0                                                     scam-203
      p(i,j,3)=0.d0                                                     scam-204
      p(i,j,4)=0.d0                                                     scam-205
      do 22 k=1,ncj                                                     scam-206
      p(i,j,1)=p(i,j,1)-4.d0*(far(i,k)*far(j,k)+fai(i,k)*fai(j,k))      scam-207
   22 p(i,j,2)=p(i,j,2)+4.d0*(far(i,k)*fai(j,k)-fai(i,k)*far(j,k))      scam-208
   23 continue                                                          scam-209
   24 p(i,i,3)=1.d0                                                     scam-210
      call diag(ncj,ncj,p,p(1,1,2),p(1,1,3),p(1,1,4),1.d-12,a1,ierr)    scam-211
      if (ierr.eq.0) go to 25                                           scam-212
      write (6,1006)                                                    scam-213
      lo(83)=.true.                                                     scam-214
      lo(183)=.false.                                                   scam-215
   25 bir=1.e-12+tg+tf                                                  scam-216
      do 26 ic=1,jc                                                     scam-217
      if (lo(183).and.ic.le.ncj) v(1,ic)=p(ic,ic,1)                     scam-218
      if (v(1,ic).lt.1e-20) v(1,ic)=1e-20                               scam-219
   26 bir=bir+v(1,ic)*v(5,ic)                                           scam-220
c fluctuation parameter nu=2*fnu, (p.a.m.,n.p.a344(1980)185)            scam-221
c common factor 'tp' of width fluct. integral (p.a.m.,prc 11(1975)426)  scam-222
      if (lo(87).or.(bir.lt.0.0001)) go to 37                           scam-223
      do 27 m=1,20                                                      scam-224
   27 tp(m)=1.d0                                                        scam-225
      if (bz2.ne.0.) go to 29                                           scam-226
      efb=exp(-0.228*bir)                                               scam-227
      do 28 ic=1,jc                                                     scam-228
      v(2,ic)=0.5                                                       scam-229
      if (v(1,ic).gt.1e-6) v(2,ic)=(1.78+(v(1,ic)**1.212-0.78)*efb)/2.  scam-230
   28 continue                                                          scam-231
      go to 31                                                          scam-232
   29 do 30 ic=1,jc                                                     scam-233
   30 v(2,ic)=0.5*bz2                                                   scam-234
   31 do 33 ic=1,jc                                                     scam-235
      do 32 m=1,20                                                      scam-236
   32 tp(m)=tp(m)*((bir+x(m)*v(1,ic)/v(2,ic))/bir)**(v(2,ic)*v(5,ic))   scam-237
   33 continue                                                          scam-238
      if (lg) go to 35                                                  scam-239
      ng=fnug/2.                                                        scam-240
      do 34 m=1,20                                                      scam-241
   34 tp(m)=tp(m)*(1.d0+2.d0*x(m)*tg/(bir*fnug))**ng                    scam-242
   35 if (lf) go to 37                                                  scam-243
      ffnu=fn/2.                                                        scam-244
      do 36 m=1,20                                                      scam-245
   36 tp(m)=tp(m)*(1.d0+x(m)*tf/(bir*ffnu))**ffnu                       scam-246
c storage of compound terms                                             scam-247
   37 sggm=0.                                                           scam-248
      sgfi=0.                                                           scam-249
      tq=0.                                                             scam-250
      if (lo(156)) go to 38                                             scam-251
      if (lo(83)) write (6,1007)                                        scam-252
      if (lo(183)) write (6,1008)                                       scam-253
   38 do 61 ic=1,ncj                                                    scam-254
      g=1.d0                                                            scam-255
      bri=bir                                                           scam-256
      if (lo(87).and.(ic.le.ncin)) bri=bri+v(1,ic)*bz3                  scam-257
      do 51 icp=1,jc                                                    scam-258
      if (icp.le.nc) iv=mc(icp,1)                                       scam-259
      if (lo(87).or.(bir.lt.0.0001)) go to 40                           scam-260
      g=0.d0                                                            scam-261
      do 39 m=1,20                                                      scam-262
   39 g=g+w(m)/(tp(m)*(1.d0+x(m)*v(1,ic)/(v(2,ic)*bri))*(1.d0+x(m)*v(1,iscam-263
     1cp)/(v(2,icp)*bri)))                                              scam-264
      if (icp.eq.ic) g=g+g/v(2,ic)                                      scam-265
   40 tq=v(1,ic)*v(1,icp)*g/bri                                         scam-266
      if (lo(87).and.(icp.eq.ic)) tq=tq+tq*bz3                          scam-267
      if (lo(83)) go to 45                                              scam-268
c inverse e-w transformation (p.a.m.,prc 12(1975)744)                   scam-269
      do 44 ia=1,ncin                                                   scam-270
      nt=ns+(mc(ia,7)-1)*ny                                             scam-271
      if (icp.le.nc) go to 41                                           scam-272
      v(4,icp)=v(4,icp)+(p(ia,ic,3)**2+p(ia,ic,4)**2)*tq                scam-273
      go to 44                                                          scam-274
   41 if (icp.gt.ncj) go to 43                                          scam-275
      do 42 ib=1,ncj                                                    scam-276
      ivp=mc(ib,1)                                                      scam-277
      if (wv(3,ivp).le.0.d0) go to 42                                   scam-278
      id=nt+mc(ib,7)                                                    scam-279
      a1=p(ia,ic,3)*p(ib,icp,3)-p(ia,ic,4)*p(ib,icp,4)                  scam-280
      b1=p(ia,ic,3)*p(ib,icp,4)+p(ia,ic,4)*p(ib,icp,3)                  scam-281
      a2=a1                                                             scam-282
      b2=b1                                                             scam-283
      if (icp.ne.ic) a2=a1+p(ia,icp,3)*p(ib,ic,3)-p(ia,icp,4)*p(ib,ic,4)scam-284
      if (icp.ne.ic) b2=b1+p(ia,icp,3)*p(ib,ic,4)+p(ia,icp,4)*p(ib,ic,3)scam-285
      fnc(ipj,id)=fnc(ipj,id)+.25*(a1*a2+b1*b2)*tq                      scam-286
   42 continue                                                          scam-287
      go to 44                                                          scam-288
   43 id=nt+mc(icp,7)                                                   scam-289
      fnc(ipj,id)=fnc(ipj,id)+.25*(p(ia,ic,3)**2+p(ia,ic,4)**2)*tq      scam-290
   44 continue                                                          scam-291
   45 if (ic.gt.ncin.or.(icp.le.nc.and.wv(3,iv).le.0.d0)) go to 51      scam-292
      if (lo(156)) go to 49                                             scam-293
      gnu=2.*v(2,icp)                                                   scam-294
      if (icp.gt.ncj) go to 46                                          scam-295
      a1=-2.d0*fai(icp,ic)                                              scam-296
      if (ic.eq.icp) a1=a1+1.d0                                         scam-297
      b1=2.d0*far(icp,ic)                                               scam-298
      write (6,1009) ic,icp,iv,mc(icp,2),cc(icp,3),a1,b1                scam-299
      go to 48                                                          scam-300
   46 if (icp.gt.nc) go to 47                                           scam-301
      write (6,1010) ic,icp,iv,mc(icp,2),cc(icp,3)                      scam-302
      go to 48                                                          scam-303
   47 ict=v(3,icp)/10000                                                scam-304
      l=(v(3,icp)-10000*ict)/100                                        scam-305
      fj=v(3,icp)-10000*ict-100*l                                       scam-306
      ict=ict+ncols                                                     scam-307
      write (6,1010) ic,icp,ict,l,fj                                    scam-308
   48 write (6,1011) v(1,icp)                                           scam-309
      if (lo(56).and.lo(83)) write (6,1012) tq,gnu,g                    scam-310
   49 if (lo(183)) go to 51                                             scam-311
      if (icp.gt.nc) go to 50                                           scam-312
      id=ns+(mc(ic,7)-1)*ny+mc(icp,7)                                   scam-313
      fnc(ipj,id)=fnc(ipj,id)+.25*tq                                    scam-314
      go to 51                                                          scam-315
   50 v(4,icp)=v(4,icp)+tq                                              scam-316
   51 continue                                                          scam-317
      if (lo(83).and.ic.gt.ncin) go to 62                               scam-318
      if (lg) go to 56                                                  scam-319
      if (lo(56).and.ic.le.ncin) write (6,1013) tg                      scam-320
      if (lo(87)) go to 53                                              scam-321
      g=0.d0                                                            scam-322
      do 52 m=1,20                                                      scam-323
   52 g=g+w(m)/(tp(m)*(1.d0+x(m)*v(1,ic)/(v(2,ic)*bri))*(1.d0+2.d0*x(m)*scam-324
     1tg/(bri*fnug)))                                                   scam-325
   53 c1=v(1,ic)*tg*g/bri                                               scam-326
      if (lo(183)) go to 54                                             scam-327
      sggm=sggm+c1                                                      scam-328
      if (lo(56)) write (6,1012) sggm,fnug,g                            scam-329
      go to 56                                                          scam-330
   54 do 55 ia=1,ncin                                                   scam-331
   55 sggm=sggm+c1*(p(ia,ic,3)**2+p(ia,ic,4)**2)                        scam-332
   56 if (lf) go to 61                                                  scam-333
      if (lo(56).and.ic.le.ncin) write (6,1014) tf                      scam-334
      if (lo(87)) go to 58                                              scam-335
      g=0.d0                                                            scam-336
      do 57 m=1,20                                                      scam-337
   57 g=g+w(m)/(tp(m)*(1.d0+x(m)*v(1,ic)/(v(2,ic)*bri))*(1.d0+x(m)*tf/(bscam-338
     1ri*ffnu)))                                                        scam-339
   58 c1=v(1,ic)*tf*g/bri                                               scam-340
      if (lo(183)) go to 59                                             scam-341
      sgfi=sgfi+c1                                                      scam-342
      if (lo(56)) write (6,1012) sgfi,fn,g                              scam-343
      go to 61                                                          scam-344
   59 do 60 ia=1,ncin                                                   scam-345
   60 sgfi=sgfi+c1*(p(ia,ic,3)**2+p(ia,ic,4)**2)                        scam-346
   61 continue                                                          scam-347
   62 if (lo(56)) write (6,1015) bir                                    scam-348
c storage for simplified compound nucleus                               scam-349
   63 if (lo(182)) go to 67                                             scam-350
      bir=bz3*bz3*(2.*aj+1.)*exp(-aj*(aj+1.)/(2.*bz2*bz2))              scam-351
      do 64 ic=1,nc                                                     scam-352
   64 bir=bir+4.*v(1,ic)                                                scam-353
      if (lo(56)) write (6,1016) bir                                    scam-354
      do 66 ic=1,ncin                                                   scam-355
      nt=ns+(mc(ic,7)-1)*ny                                             scam-356
      do 65 icp=1,nc                                                    scam-357
      iv=mc(icp,1)                                                      scam-358
      id=nt+mc(icp,7)                                                   scam-359
      tq=v(1,ic)*v(1,icp)/bir                                           scam-360
      if (iv.eq.1) tq=tq*bz1*bz1                                        scam-361
   65 fnc(ipj,id)=fnc(ipj,id)+tq                                        scam-362
   66 continue                                                          scam-363
   67 if (.not.lf) fnc(ipj,kba+1)=fnc(ipj,kba+1)+.25*sgfi               scam-364
      if (.not.lg) fnc(ipj,kba+2)=fnc(ipj,kba+2)+.25*sggm               scam-365
      if (nsp(3).eq.0) return                                           scam-366
      nc1=nc+1                                                          scam-367
      do 68 i=nc1,jc                                                    scam-368
      j=v(3,i)/10000+kba+2                                              scam-369
   68 fnc(ipj,j)=fnc(ipj,j)+.25*v(4,i)*v(5,i)                           scam-370
      return                                                            scam-371
 1000 format (//26h channel spin and parity =,f7.1,a2,i10,21h coupled chscam-372
     1annels and,i3,10h solutions//20h  ic icp n    l    j,19x,8hc matriscam-373
     2x,20x,3h|c|,6x,5hphase,12x,2htl)                                  scam-374
 1001 format (f5.1,a2,i3,1p,4e15.6)                                     scam-375
 1002 format (51h c matrix larger than 1 for aj ipi nc ncin ic icp =,f5.scam-376
     11,a2,4i3,2x,2d12.4)                                               scam-377
 1003 format (1x,3i3,i5,f7.1,4x,1p,2d15.7,2h i,4x,0p,2f11.8)            scam-378
 1004 format (1h+,87x,f11.8)                                            scam-379
 1005 format (//26h channel spin and parity =,f7.1,a2//20h  ic icp n    scam-380
     1l    j,18x,8hs matrix)                                            scam-381
 1006 format (51h error in eigensystem.  e-w correction discontinued)   scam-382
 1007 format (1h+,72x,2htl,11x,2hhf,10x,2hnu,11x,1hg)                   scam-383
 1008 format (1h+,72x,32htl  in transformed channel space)              scam-384
 1009 format (1x,3i3,i5,f7.1,4x,1p,2d15.7,8x,f11.6,3f12.4)              scam-385
 1010 format (1x,3i3,i5,f7.1)                                           scam-386
 1011 format (1h+,66x,f11.6)                                            scam-387
 1012 format (1h+,77x,3f12.4)                                           scam-388
 1013 format (62x,5hgamma,f11.6)                                        scam-389
 1014 format (60x,7hfission,f11.6)                                      scam-390
 1015 format (64x,4hsum ,f10.6)                                         scam-391
 1016 format (60x,5hh.-f.,e20.6)                                        scam-392
      end                                                               scam-393
c 10/10/85  ibm version                                         ecis88  diag-000
      subroutine diag(n,nc,zr,zi,xr,xi,eps,ax,ier)                      diag-001
c diagonalisation of a hermitian complex matrix by an extension of the  diag-002
c jacobi's method                                                       diag-003
c input: zr,zi:  real and imaginary parts of the matrix                 diag-004
c        xr,xi:  real and imaginary parts of the unit matrix            diag-005
c        n:      first dimension of zr,zi,xr and xi                     diag-006
c        nc:     dimension of the matrix                                diag-007
c        eps:    value below which matrix elements are set to 0.        diag-008
c output:zr,zi:  the eigenvalues are on the diagonal of zr              diag-009
c                all the other elements are 0. if process succeeded     diag-010
c        xr,xi:  eigenvectors                                           diag-011
c        ax:     square of the norm of the largest non diagonal element diag-012
c        ier:    returns 0 or -1 after 4*nc**2 rotations                diag-013
c***********************************************************************diag-014
      implicit real*8 (a-h,o-z)                                         diag-015
      dimension zr(n,1),zi(n,1),xr(n,1),xi(n,1)                         diag-016
      ier=0                                                             diag-017
      nt=0                                                              diag-018
    1 nt=nt+1                                                           diag-019
      if (nt.gt.4*nc*nc) go to 6                                        diag-020
      ax=0                                                              diag-021
      l=1                                                               diag-022
      m=2                                                               diag-023
c symmetrisation and search for the largest non diagonal element        diag-024
      do 3 i=1,nc                                                       diag-025
      do 2 j=i,nc                                                       diag-026
      if (zr(j,i).eq.0.d0) zr(i,j)=0.d0                                 diag-027
      if (zi(j,i).eq.0.d0) zi(i,j)=0.d0                                 diag-028
      if (zr(i,j).eq.0.d0) zr(j,i)=0.d0                                 diag-029
      if (zi(i,j).eq.0.d0) zi(j,i)=0.d0                                 diag-030
      ar=(zr(i,j)+zr(j,i))/2.d0                                         diag-031
      ai=(zi(i,j)-zi(j,i))/2.d0                                         diag-032
      zr(j,i)=ar                                                        diag-033
      zr(i,j)=ar                                                        diag-034
      zi(i,j)=ai                                                        diag-035
      zi(j,i)=-ai                                                       diag-036
      if (i.eq.j) go to 2                                               diag-037
      ay=zr(i,j)**2+zi(i,j)**2                                          diag-038
      if (ax.gt.ay) go to 2                                             diag-039
      ax=ay                                                             diag-040
      l=i                                                               diag-041
      m=j                                                               diag-042
    2 continue                                                          diag-043
    3 continue                                                          diag-044
      if (ax.eq.0.d0) return                                            diag-045
c elementary transformation                                             diag-046
      u=datan2(-zi(l,m),zr(l,m))/2.d0                                   diag-047
      v=datan2(2.d0*dsqrt(zr(l,m)**2+zi(l,m)**2),zr(m,m)-zr(l,l))/2.d0  diag-048
      uc=dcos(u)                                                        diag-049
      us=dsin(u)                                                        diag-050
      tc=dcos(v)                                                        diag-051
      ts=-dsin(v)                                                       diag-052
      ucc=uc*tc                                                         diag-053
      ucs=uc*ts                                                         diag-054
      usc=us*tc                                                         diag-055
      uss=us*ts                                                         diag-056
c transformation of rows                                                diag-057
      do 4 i=1,nc                                                       diag-058
      ar=xr(i,l)*ucc+xi(i,l)*usc+xr(i,m)*ucs-xi(i,m)*uss                diag-059
      br=-xr(i,l)*ucs-xi(i,l)*uss+xr(i,m)*ucc-xi(i,m)*usc               diag-060
      ai=xi(i,l)*ucc-xr(i,l)*usc+xi(i,m)*ucs+xr(i,m)*uss                diag-061
      bi=-xi(i,l)*ucs+xr(i,l)*uss+xi(i,m)*ucc+xr(i,m)*usc               diag-062
      xr(i,l)=ar                                                        diag-063
      xr(i,m)=br                                                        diag-064
      xi(i,l)=ai                                                        diag-065
      xi(i,m)=bi                                                        diag-066
      ar=zr(i,l)*ucc+zi(i,l)*usc+zr(i,m)*ucs-zi(i,m)*uss                diag-067
      br=-zr(i,l)*ucs-zi(i,l)*uss+zr(i,m)*ucc-zi(i,m)*usc               diag-068
      ai=zi(i,l)*ucc-zr(i,l)*usc+zi(i,m)*ucs+zr(i,m)*uss                diag-069
      bi=-zi(i,l)*ucs+zr(i,l)*uss+zi(i,m)*ucc+zr(i,m)*usc               diag-070
      zr(i,l)=ar                                                        diag-071
      zr(i,m)=br                                                        diag-072
      zi(i,l)=ai                                                        diag-073
    4 zi(i,m)=bi                                                        diag-074
c transformation of columns                                             diag-075
      do 5 i=1,nc                                                       diag-076
      ar=zr(l,i)*ucc-zi(l,i)*usc+zr(m,i)*ucs+zi(m,i)*uss                diag-077
      br=-zr(l,i)*ucs+zi(l,i)*uss+zr(m,i)*ucc+zi(m,i)*usc               diag-078
      ai=zi(l,i)*ucc+zr(l,i)*usc+zi(m,i)*ucs-zr(m,i)*uss                diag-079
      bi=-zi(l,i)*ucs-zr(l,i)*uss+zi(m,i)*ucc-zr(m,i)*usc               diag-080
      if (dabs(ar).lt.eps) ar=0.d0                                      diag-081
      if (dabs(br).lt.eps) br=0.d0                                      diag-082
      if (dabs(ai).lt.eps) ai=0.d0                                      diag-083
      if (dabs(bi).lt.eps) bi=0.d0                                      diag-084
      zr(l,i)=ar                                                        diag-085
      zr(m,i)=br                                                        diag-086
      zi(l,i)=ai                                                        diag-087
    5 zi(m,i)=bi                                                        diag-088
      go to 1                                                           diag-089
    6 ier=-1                                                            diag-090
      return                                                            diag-091
      end                                                               diag-092
c 30/11/95  ibm version                                         ecis95  sche-000
      subroutine sche(f,jmax,ipi,mt1,mt2,mf,fm,tx,bm,mc,sp,fa,fb,xg,lmaxsche-001
     11,wv,kab,kba,aj,ipj,fn,ncoll,ncols,nct,fac,nfa,sqx,mx,am,jit,jti,nsche-002
     2lt,idmt,id1,lo)                                                   sche-003
c scattering coefficients in the helicity representation                sche-004
c input variables: f:     s-matrix                                      sche-005
c                  jmax:  maximum number of channel spins, dim. for f   sche-006
c                  ipi(1,iv):   parity of channel                       sche-007
c                  ipi(5/6,iv): first/last channel number. see deph     sche-008
c                  ipi(9,iv):   maximum angular momentum                sche-009
c                  mt1,mt2: maximum 2*spin+1 for part. and target       sche-010
c                  mf,fm: helicity numbers. see deph                    sche-011
c                  sp(1/2,iv): part. and target spin in state iv        sche-012
c                  xg:    coulomb phase-shifts                          sche-013
c                  lmax1: dimension for xg                              sche-014
c                  wv:    wave number and coulomb parameter.  see colf  sche-015
c                  kab:   dimension for fa,fb and mc                    sche-016
c                  kba:   number of independent amplitudes              sche-017
c                  aj:    minimum channel spin                          sche-018
c                  ipj:   number of the channel spin                    sche-019
c                  fn:    transmission coefficients                     sche-020
c                  ncoll: number of coupled levels                      sche-021
c                  ncols: number of levels with angular distribution    sche-022
c                  nct:   number of equ. and solutions for each parity  sche-023
c                  fac,nfa: table of factorials and its length          sche-024
c                  mx:    dimension of sqx                              sche-025
c                  jit:   number of different rates of interpolation    sche-026
c                  jti:   limits and steps of interpolation             sche-027
c                  nlt:   memories needed for legendre polynomials      sche-028
c                  idmt:  length of working space                       sche-029
c                  id1:   length available for bm as single precision   sche-030
c                  lo:    logical controls. if lo(220)=.true., compute  sche-031
c                            only the square roots and legendre coeffi. sche-032
c in common /titr/ ncj:   number of factors 1/(-x*cos(theta))           sche-033
c                  xz:    10/((2*spin(1)+1)*(2*ai(1)+1))                sche-034
c in common /ncomp/nsp:   number of uncoupled states                    sche-035
c output variables:f:     helicity scattering coefficients              sche-036
c                  tx:    total reaction cross section in mb            sche-037
c                         followed by the total cross section for each  sche-038
c                         level, the compound nucleus cross sections,   sche-039
c                         the fission, gamma, uncoupled states c. s.    sche-040
c                  fn:    helicity hauser-feshbach coefficients         sche-041
c                  sqx:   table of square roots of integers             sche-042
c  working field:  am(mt1,mt2,kab) for products of c.g. coefficients    sche-043
c                  fa:    for storage of s-matrix for a given total spinsche-044
c                  fb:    for storage of transmission coefficients      sche-045
c                  mc:    nuclear state numbers and angular momenta     sche-046
c                  bm:    for factors 1/(-x*cos(theta)), 3j coeff., etc sche-047
c***********************************************************************sche-048
      logical lo(250)                                                   sche-049
      dimension mf(9,1),fm(9,1),tx(1),mc(kab,2,1),sp(3,1),fb(kab,1),ipi(sche-050
     19,1),fn(jmax,1),nct(4),jti(2,1),ip(2)                             sche-051
      double precision f(2,jmax,1),fa(2,kab,1),bm(1),am(mt1,mt2,1),sqx(1sche-052
     1),xg(lmax1,1),wv(11,1),a1,a2,a3,a4,b1,b2,b3,b4,c1,c2,c3,d1,d2,d3,psche-053
     2i,dj6j                                                            sche-054
C
C     Capote 03/2001, corrected to allow g77 compilation
C     otherwise g77 complains(correctly) that fac() does not
C     have proper declaration   
C
C     The impact of this bug on previous calculation is unknown, but
C     it will affect only scattering of identical projectile and target.
C     For nucleon induced reactions therefore previous calculations are OK,
C
      double precision fac(1)
C     Capote 03/2001,
      common /titr/ title(18),theta1,theta2,dtheta,dthe,ncj,xz,jmm,nl(3)sche-055
      common /ncomp/ nsp(3),nrd(4),acn(2),ncons(6),az(16)               sche-056
      data ip,pi /1h+,1h-,3.1415926535d0/                               sche-057
c computation of table of square roots                                  sche-058
      do 1 i=1,mx                                                       sche-059
      a1=i                                                              sche-060
    1 sqx(i)=dsqrt(a1)                                                  sche-061
      if (lo(220)) go to 59                                             sche-062
      if (lo(219)) return                                               sche-063
c tables of quantum numbers                                             sche-064
      ipd=1                                                             sche-065
      if (lo(223)) ipd=2                                                sche-066
      ipz=2*ipd                                                         sche-067
      ija=int(2.*aj+.1)-ipz                                             sche-068
      iaj=ija                                                           sche-069
      ni1=2.*sp(1,1)+0.1                                                sche-070
      do 5 jpi=1,2                                                      sche-071
      nc=0                                                              sche-072
      do 4 i=1,ncols                                                    sche-073
      nj1=ija-int(2.*sp(2,i)+.1)                                        sche-074
      nj=2.*sp(2,i)+1.1                                                 sche-075
      do 3 j=1,nj                                                       sche-076
      l1=nj1-int(2.*sp(1,i)+.1)                                         sche-077
      nm=2*sp(1,i)+1.1                                                  sche-078
      do 2 k=1,nm                                                       sche-079
      if (mod(l1+2*ipi(1,i)+2*(jpi+ipd),4).eq.0) go to 2                sche-080
      nc=nc+1                                                           sche-081
      mc(nc,jpi,1)=i                                                    sche-082
      mc(nc,jpi,2)=l1                                                   sche-083
      mc(nc,jpi,3)=nj1                                                  sche-084
    2 l1=l1+2                                                           sche-085
    3 nj1=nj1+2                                                         sche-086
    4 continue                                                          sche-087
    5 continue                                                          sche-088
      nxy=0                                                             sche-089
      if (lo(81).and.lo(182)) nxy=nsp(3)+2                              sche-090
      if (lo(143)) go to 23                                             sche-091
c interpolation for the s-matrix                                        sche-092
      i1=0                                                              sche-093
      i4=0                                                              sche-094
      do 22 j=1,3                                                       sche-095
      if (j.le.2) go to 6                                               sche-096
      if (nxy.eq.0) go to 22                                            sche-097
      i2=i1                                                             sche-098
      i3=nxy                                                            sche-099
      go to 7                                                           sche-100
    6 i2=i1+nct(j+2)                                                    sche-101
      i3=nct(j)                                                         sche-102
      i1=i1+1                                                           sche-103
    7 if (i1.gt.i2) go to 22                                            sche-104
      i6=0                                                              sche-105
      do 21 i=i1,i2                                                     sche-106
      if (j.eq.3) go to 8                                               sche-107
      i6=i6+1                                                           sche-108
      iv=mc(i6,j,1)                                                     sche-109
      ni=2.*sp(1,iv)+0.1                                                sche-110
      mi=2.*sp(2,iv)+0.1                                                sche-111
      ji3=(3+max0(mi-iaj-mc(i6,j,3),ni-mc(i6,j,2)-mc(i6,j,3),-2*mc(i6,j,sche-112
     12),-2*mc(i6,j,3)))/4-ipd+1                                        sche-113
    8 do 20 k=1,i3                                                      sche-114
      i4=i4+1                                                           sche-115
      ji1=1                                                             sche-116
      if (j.eq.3) go to 9                                               sche-117
      iv=mc(k,j,1)                                                      sche-118
      ni=2.*sp(1,iv)+0.1                                                sche-119
      mi=2.*sp(2,iv)+0.1                                                sche-120
      ji4=(3+max0(mi-iaj-mc(k,j,3),ni-mc(k,j,2)-mc(k,j,3),-2*mc(k,j,2),-sche-121
     12*mc(k,j,3)))/4-ipd+1                                             sche-122
      ji1=max0(ji3,ji4)                                                 sche-123
    9 n1=0                                                              sche-124
      n3=1                                                              sche-125
   10 if (n3.lt.ji1) go to 11                                           sche-126
      n1=n1+1                                                           sche-127
      k1=k2                                                             sche-128
      k2=k3                                                             sche-129
      k3=k4                                                             sche-130
      k4=n3                                                             sche-131
      if (n1.gt.3) go to 14                                             sche-132
   11 do 12 l=1,jit                                                     sche-133
      if (n3.le.jti(1,l)) go to 13                                      sche-134
   12 n3=n3+jti(2,l)*ipd                                                sche-135
      l=jit                                                             sche-136
   13 n3=n3+ipd                                                         sche-137
      if (n3.le.ipj) go to 10                                           sche-138
      if (n3.gt.jti(1,l)+jti(2,l)*ipd+ipd) go to 19                     sche-139
      go to 68                                                          sche-140
   14 ji2=k3-ipd                                                        sche-141
      if (n3.eq.ipj) ji2=k4-ipd                                         sche-142
      if (ji1.gt.ji2) go to 19                                          sche-143
      m1=(k1-k2)*(k1-k3)*(k1-k4)                                        sche-144
      m2=(k2-k1)*(k2-k3)*(k2-k4)                                        sche-145
      m3=(k3-k1)*(k3-k2)*(k3-k4)                                        sche-146
      m4=(k4-k1)*(k4-k2)*(k4-k3)                                        sche-147
      n2=1                                                              sche-148
      do 18 n4=ji1,ji2                                                  sche-149
      if (n4.eq.k1.or.n4.eq.k2.or.n4.eq.k3.or.n4.eq.k4) go to 18        sche-150
      if (n2.ne.1.or.j.eq.3) go to 15                                   sche-151
      n2=3                                                              sche-152
      a2=f(1,k1,i4)**2+f(2,k1,i4)**2                                    sche-153
      b2=f(1,k2,i4)**2+f(2,k2,i4)**2                                    sche-154
      c2=f(1,k3,i4)**2+f(2,k3,i4)**2                                    sche-155
      d2=f(1,k4,i4)**2+f(2,k4,i4)**2                                    sche-156
      if (a2*b2*c2*d2.eq.0.d0) go to 15                                 sche-157
      a1=datan2(f(2,k1,i4),f(1,k1,i4))                                  sche-158
      b1=datan2(f(2,k2,i4),f(1,k2,i4))                                  sche-159
      c1=datan2(f(2,k3,i4),f(1,k3,i4))                                  sche-160
      d1=datan2(f(2,k4,i4),f(1,k4,i4))                                  sche-161
      if ((a1-b1)*(b1-c1).lt.0.d0.or.(b1-c1)*(c1-d1).lt.0.d0) go to 15  sche-162
      n2=2                                                              sche-163
      a2=dlog(a2)                                                       sche-164
      b2=dlog(b2)                                                       sche-165
      c2=dlog(c2)                                                       sche-166
      d2=dlog(d2)                                                       sche-167
   15 a3=dfloat((n4-k2)*(n4-k3)*(n4-k4))/dfloat(m1)                     sche-168
      b3=dfloat((n4-k1)*(n4-k3)*(n4-k4))/dfloat(m2)                     sche-169
      c3=dfloat((n4-k1)*(n4-k2)*(n4-k4))/dfloat(m3)                     sche-170
      d3=dfloat((n4-k1)*(n4-k2)*(n4-k3))/dfloat(m4)                     sche-171
      if (j.eq.3) go to 17                                              sche-172
      if (n2.eq.3) go to 16                                             sche-173
      a4=a1*a3+b1*b3+c1*c3+d1*d3                                        sche-174
      b4=dexp(0.5d0*(a2*a3+b2*b3+c2*c3+d2*d3))                          sche-175
      f(1,n4,i4)=b4*dcos(a4)                                            sche-176
      f(2,n4,i4)=b4*dsin(a4)                                            sche-177
      go to 17                                                          sche-178
   16 f(1,n4,i4)=f(1,k1,i4)*a3+f(1,k2,i4)*b3+f(1,k3,i4)*c3+f(1,k4,i4)*d3sche-179
      f(2,n4,i4)=f(2,k1,i4)*a3+f(2,k2,i4)*b3+f(2,k3,i4)*c3+f(2,k4,i4)*d3sche-180
   17 if (lo(181)) go to 18                                             sche-181
      fn(n4,i4)=fn(k1,i4)*a3+fn(k2,i4)*b3+fn(k3,i4)*c3+fn(k4,i4)*d3     sche-182
   18 continue                                                          sche-183
   19 ji1=ji2+ipz                                                       sche-184
      if (ji1.lt.ipj) go to 11                                          sche-185
   20 continue                                                          sche-186
   21 continue                                                          sche-187
   22 i1=i2                                                             sche-188
   23 tq=0.                                                             sche-189
      ik=1                                                              sche-190
      r2=4.d0*pi*xz/wv(4,1)**2                                          sche-191
      do 43 ij=1,ipj,ipd                                                sche-192
c transfer of s matrix for a given angular momentum                     sche-193
      i1=0                                                              sche-194
      i4=0                                                              sche-195
      do 26 j=1,2                                                       sche-196
      i2=i1+nct(j+2)                                                    sche-197
      i1=i1+1                                                           sche-198
      if (i1.gt.i2) go to 26                                            sche-199
      i3=nct(j)                                                         sche-200
      do 25 i=i1,i2                                                     sche-201
      do 24 k=1,i3                                                      sche-202
      i4=i4+1                                                           sche-203
      fa(1,k,i)=f(1,ij,i4)                                              sche-204
      fa(2,k,i)=f(2,ij,i4)                                              sche-205
      if (lo(81)) fb(k,i)=fn(ij,i4)                                     sche-206
   24 continue                                                          sche-207
   25 continue                                                          sche-208
   26 i1=i2                                                             sche-209
      do 27 i=1,kba                                                     sche-210
      if (lo(81)) fn(ij,i)=0.                                           sche-211
      f(1,ij,i)=0.d0                                                    sche-212
   27 f(2,ij,i)=0.d0                                                    sche-213
      j1=0                                                              sche-214
      iaj=iaj+ipz                                                       sche-215
      w2=r2*(iaj+1)                                                     sche-216
      do 40 ji=1,2                                                      sche-217
      j2=j1+nct(ji+2)                                                   sche-218
      j1=j1+1                                                           sche-219
      if (j1.gt.j2) go to 40                                            sche-220
      nc1=0                                                             sche-221
      nc=nct(ji)                                                        sche-222
c  geometric coefficient for the transformation to helicity coefficientssche-223
      do 33 ic=1,nc                                                     sche-224
      mc(ic,ji,2)=mc(ic,ji,2)+ipz                                       sche-225
      mc(ic,ji,3)=mc(ic,ji,3)+ipz                                       sche-226
      iv=mc(ic,ji,1)                                                    sche-227
      ni=2.*sp(1,iv)+1.1                                                sche-228
      mi=2.*sp(2,iv)+1.1                                                sche-229
      mc(ic,1,4)=min0(mc(ic,ji,3)-iabs(iaj+1-mi),mc(ic,ji,2)-iabs(mc(ic,sche-230
     1ji,3)+1-ni))                                                      sche-231
      if (mc(ic,ji,2).gt.2*ipi(9,iv)) mc(ic,1,4)=-1                     sche-232
      if (mc(ic,1,4).lt.0) go to 33                                     sche-233
      if (iv.eq.1) nc1=nc1+1                                            sche-234
      a1=0.d0                                                           sche-235
      ib1=ni**2+(mc(ic,ji,3)-mc(ic,ji,2))*(mc(ic,ji,2)+mc(ic,ji,3)+2)-1 sche-236
      c3=0.d0                                                           sche-237
c coupling for particle helicity                                        sche-238
      do 28 i1=1,ni                                                     sche-239
      bm(i1)=0.d0                                                       sche-240
      if (iabs(2*i1-ni-1).gt.mc(ic,ji,3)) go to 28                      sche-241
      n3=(mc(ic,ji,3)+2*i1-ni-1)*(mc(ic,ji,3)-2*i1+ni+3)*(i1-1)         sche-242
      if (n3.eq.0) bm(i1)=2*mod(i1,2)-1                                 sche-243
      if (n3.le.0) go to 28                                             sche-244
      c2=c3                                                             sche-245
      c3=sqx(2*ni-2*i1+2)*sqx(2*i1-2)*sqx(mc(ic,ji,3)+2*i1-ni-1)*sqx(mc(sche-246
     1ic,ji,3)-2*i1+ni+3)                                               sche-247
      bm(i1)=dfloat(ib1-2*(2*i1-ni-3)**2)*bm(i1-1)/c3                   sche-248
      if (i1.ge.3) bm(i1)=bm(i1)-c2*bm(i1-2)/c3                         sche-249
   28 a1=a1+bm(i1)**2                                                   sche-250
      do 32 i1=1,ni                                                     sche-251
      a2=0.d0                                                           sche-252
      if (dabs(bm(i1)).lt.1.d-10) go to 30                              sche-253
      ia=2*i1-ni-1                                                      sche-254
      ib1=mi**2+(iaj-mc(ic,ji,3))*(iaj+mc(ic,ji,3)+2)-1                 sche-255
      c3=0.d0                                                           sche-256
c coupling for target helicity                                          sche-257
      do 29 i2=1,mi                                                     sche-258
      bm(ni+i2)=0.d0                                                    sche-259
      if (iabs(2*i2-mi-1-ia).gt.iaj) go to 29                           sche-260
      n3=(iaj+ia-2*i2+mi+3)*(iaj-ia+2*i2-mi-1)*(i2-1)                   sche-261
      if (n3.eq.0) bm(ni+i2)=2*mod(i2,2)-1                              sche-262
      if (n3.le.0) go to 29                                             sche-263
      c2=c3                                                             sche-264
      ib=2*i2-mi-3                                                      sche-265
      c3=sqx(mi-1-ib)*sqx(iaj+ia-ib)*sqx(iaj-ia+ib+2)*sqx(2*i2-2)       sche-266
      bm(ni+i2)=(dfloat(ib1-2*ib*(ib-ia))*bm(ni+i2-1)-c2*bm(ni+i2-2))/c3sche-267
   29 a2=a2+bm(ni+i2)**2                                                sche-268
      if (a2*a1.ne.0.d0) a2=(mod(1+mc(ic,ji,3)-iaj+mi,4)-1)*sqx(iaj+1)/dsche-269
     1sqrt(a1*a2)                                                       sche-270
   30 do 31 i2=1,mi                                                     sche-271
   31 am(i1,i2,ic)=bm(i1)*bm(ni+i2)*a2                                  sche-272
   32 continue                                                          sche-273
   33 continue                                                          sche-274
      if (nc1.eq.0) go to 40                                            sche-275
      ncin=nct(ji+2)                                                    sche-276
c transformation                                                        sche-277
      if (lo(156).or.ik.ne.ij) go to 34                                 sche-278
      bj=.5*float(iaj)                                                  sche-279
      jij=1+mod(ij+ji,2)                                                sche-280
      write (6,1000) bj,ip(jij)                                         sche-281
      rewind 78                                                         capote
  330 read (78,'(1x,f4.1,1x,a1,1x,i4,1x,i4)',END=34)                    capote 
     >       ajjj,ippp,itmp1,itmp2                                      capote
      if(ajjj.ne.bj.OR.ippp.ne.ip(jij)) goto 330                        capote
      write (77,'(1x,f4.1,1x,a1,1x,i2,1x,i4)')                          capote
     >       bj,ip(jij),itmp1,itmp1*itmp2                               capote
   34 nc1=0                                                             sche-282
      do 39 ic=1,ncin                                                   sche-283
      if (mc(ic,1,4).lt.0) go to 39                                     sche-284
      icx=ic                                                            sche-285
      nc1=nc1+1                                                         sche-286
      if (ji.eq.2) icx=icx+nct(3)                                       sche-287
      lci=mc(ic,ji,2)/2+1                                               sche-288
      nc2=0                                                             sche-289
      do 37 icp=1,nc                                                    sche-290
      if (mc(icp,1,4).lt.0) go to 37                                    sche-291
      lcp=mc(icp,ji,2)/2+1                                              sche-292
      iv=mc(icp,ji,1)                                                   sche-293
      nc2=nc2+1                                                         sche-294
      c1=xg(lci,1)+xg(lcp,iv)                                           sche-295
      if (lo(156).or.ik.ne.ij) go to 35                                 sche-296
      if (lo(81)) tq=fb(icp,icx)                                        sche-297
      b1=-2.d0*fa(2,icp,icx)                                            sche-298
      if (ic.eq.icp) b1=b1+1.d0                                         sche-299
      b2=2.d0*fa(1,icp,icx)                                             sche-300
      b3=dsqrt(b1**2+b2**2)                                             sche-301
      d1=0.d0                                                           sche-302
      if (b3.ne.0.d0) d1=datan2(b2,b1)                                  sche-303
      d2=dmod(d1+c1+pi,2.d0*pi)-pi                                      sche-304
      lc=lcp-1                                                          sche-305
      bj=0.5*float(mc(icp,ji,3))                                        sche-306
      write (6,1001) nc1,nc2,iv,lc,bj,b1,b2,b3,d1,d2,tq                 sche-307
      write (77,'(1x,3(I2,1x),I3,1x,F5.1,1x,2(D15.7,1x),1hi,4x,F11.8)') capote
     >     nc1,nc2,iv,lc,bj,b1,b2,max(b3,0.d0)                          capote
c multiplication by the coulomb phase                                   sche-308
   35 a1=dcos(c1)                                                       sche-309
      a2=dsin(c1)                                                       sche-310
      c2=fa(1,icp,icx)*a1-fa(2,icp,icx)*a2                              sche-311
      c3=fa(1,icp,icx)*a2+fa(2,icp,icx)*a1                              sche-312
      i1=ipi(5,iv)                                                      sche-313
      i2=ipi(6,iv)                                                      sche-314
c  helicity scattering coefficients                                     sche-315
      do 36 id=i1,i2                                                    sche-316
      mf1=mf(1,id)                                                      sche-317
      mf2=mf(2,id)                                                      sche-318
      mf3=mf(3,id)                                                      sche-319
      mf4=mf(4,id)                                                      sche-320
      c1=am(mf1,mf2,icp)*am(mf3,mf4,ic)/wv(4,1)                         sche-321
      f(1,ij,id)=f(1,ij,id)+c2*c1                                       sche-322
      f(2,ij,id)=f(2,ij,id)+c3*c1                                       sche-323
      if (lo(181)) go to 36                                             sche-324
      fn(ij,id)=fn(ij,id)+fb(icp,icx)*c1*c1                             sche-325
      if (iv.gt.1.or.ic.eq.icp) go to 36                                sche-326
      fn(ij,id)=fn(ij,id)+fb(icp,icx)*c1*am(mf1,mf2,ic)*am(mf3,mf4,icp)/sche-327
     1wv(4,1)                                                           sche-328
   36 continue                                                          sche-329
   37 continue                                                          sche-330
c total reaction cross section plus total elastic cross section         sche-331
      tx(1)=tx(1)+w2*fa(2,ic,icx)                                       sche-332
      if (lo(118)) go to 39                                             sche-333
c correction for identical particles                                    sche-334
      do 38 icp=1,ncin                                                  sche-335
      if (mc(icp,ji,2).ne.mc(ic,ji,2)) go to 38                         sche-336
      if (mc(icp,1,4).lt.0) go to 38                                    sche-337
      a1=dj6j(ni1,iaj,mc(icp,ji,3),ni1,mc(ic,ji,2),mc(ic,ji,3),fac,nfa)*sche-338
     1sqx(mc(icp,ji,3)+1)*sqx(mc(ic,ji,3)+1)*(1-mod(mc(ic,ji,2)+mc(icp,jsche-339
     2i,3)+mc(ic,ji,3),4))                                              sche-340
      tx(1)=tx(1)+w2*a1*fa(2,icp,icx)                                   sche-341
   38 continue                                                          sche-342
   39 continue                                                          sche-343
   40 continue                                                          sche-344
      if (lo(143).or.ik.ne.ij) go to 42                                 sche-345
      do 41 l=1,jit                                                     sche-346
      if (ik.le.jti(1,l)) go to 42                                      sche-347
   41 ik=ik+jti(2,l)*ipd                                                sche-348
   42 ik=ik+ipd                                                         sche-349
   43 continue                                                          sche-350
      if (lo(118)) go to 52                                             sche-351
c symmetrisation between projectile and target                          sche-352
      tx(1)=2.*tx(1)                                                    sche-353
      mt3=ipi(2,1)+1                                                    sche-354
      do 44 i=1,kba                                                     sche-355
   44 bm(i)=1.d0                                                        sche-356
      do 49 i=1,ncols                                                   sche-357
      jn1=ipi(5,i)                                                      sche-358
      jn2=ipi(6,i)                                                      sche-359
      mt1=ipi(2,i)+1                                                    sche-360
      mt2=ipi(3,i)+1                                                    sche-361
      do 48 ij=jn1,jn2                                                  sche-362
      if (bm(ij).eq.0.d0) go to 48                                      sche-363
      do 45 ji=jn1,jn2                                                  sche-364
      if (bm(ji).eq.0.d0) go to 45                                      sche-365
      if (mf(1,ij).eq.mf(1,ji).and.mf(2,ij).eq.mf(2,ji).and.mf(3,ij).eq.sche-366
     1mf(4,ji).and.mf(4,ij).eq.mf(3,ji)) go to 46                       sche-367
      if (mf(3,ij)+mf(4,ji).eq.mt3.and.mf(4,ij)+mf(3,ji).eq.mt3.and.mf(1sche-368
     1,ij)+mf(1,ji).eq.mt1.and.mf(2,ij)+mf(2,ji).eq.mt2) go to 46       sche-369
   45 continue                                                          sche-370
      go to 69                                                          sche-371
   46 c2=1.d0                                                           sche-372
      bm(ji)=0.d0                                                       sche-373
      bm(ij)=0.d0                                                       sche-374
      do 47 j=1,ipj                                                     sche-375
      a1=f(1,j,ij)                                                      sche-376
      a2=f(2,j,ij)                                                      sche-377
      b1=f(1,j,ji)                                                      sche-378
      b2=f(2,j,ji)                                                      sche-379
      f(1,j,ij)=a1+c2*b1                                                sche-380
      f(2,j,ij)=a2+c2*b2                                                sche-381
      f(1,j,ji)=b1+c2*a1                                                sche-382
      f(2,j,ji)=b2+c2*a2                                                sche-383
      if (lo(181)) go to 47                                             sche-384
      a1=fn(j,ij)                                                       sche-385
      b1=fn(j,ji)                                                       sche-386
      fn(j,ij)=a1+c2*b1                                                 sche-387
      fn(j,ji)=b1+c2*a1                                                 sche-388
   47 c2=-c2                                                            sche-389
   48 continue                                                          sche-390
   49 continue                                                          sche-391
      if (nxy.le.0) go to 52                                            sche-392
c symmetrisation of compound nucleus                                    sche-393
      do 51 i=1,ipj                                                     sche-394
      a1=mod(2*i,4)                                                     sche-395
      do 50 k=1,nxy                                                     sche-396
   50 fn(i,kba+k)=a1*fn(i,kba+k)                                        sche-397
   51 continue                                                          sche-398
c total reaction cross-sections                                         sche-399
   52 a1=2.*aj+1.                                                       sche-400
      b1=4.d0*pi*xz                                                     sche-401
      do 56 iv=1,ncols                                                  sche-402
      i1=ipi(5,iv)                                                      sche-403
      i2=ipi(6,iv)                                                      sche-404
      do 55 id=i1,i2                                                    sche-405
      a2=a1                                                             sche-406
      a3=0.                                                             sche-407
      do 53 i=1,ipj                                                     sche-408
      a3=a3+(f(1,i,id)**2+f(2,i,id)**2)/a2                              sche-409
   53 a2=a2+2.d0                                                        sche-410
      if (fm(5,id).ne.0.) a3=2.*a3                                      sche-411
      tx(iv+1)=tx(iv+1)+b1*a3                                           sche-412
      if (lo(181)) go to 55                                             sche-413
      a2=a1                                                             sche-414
      a3=0.                                                             sche-415
      do 54 i=1,ipj                                                     sche-416
      a3=a3+fn(i,id)/a2                                                 sche-417
   54 a2=a2+2.                                                          sche-418
      if (fm(5,id).ne.0.) a3=2.*a3                                      sche-419
      tx(iv+ncols+1)=tx(iv+ncols+1)+b1*a3                               sche-420
   55 continue                                                          sche-421
   56 continue                                                          sche-422
      if (nxy.le.0) go to 59                                            sche-423
      b1=b1/wv(4,1)**2                                                  sche-424
      do 58 i=1,ipj                                                     sche-425
      b2=b1*a1                                                          sche-426
      do 57 k=1,nxy                                                     sche-427
   57 tx(2*ncols+1+k)=tx(2*ncols+1+k)+b2*fn(i,kba+k)                    sche-428
   58 a1=a1+2.                                                          sche-429
   59 if (lo(165)) go to 60                                             sche-430
      nsa=7*(nlt+2*ipj+1)+1                                             sche-431
      if (2*nsa.gt.id1) call memo(idmt,idmt+2*nsa-id1,m,5,lo)           sche-432
      call lcsp(f,fn,jmax,ipi,ncoll,ncols,mf,fm,sp,wv,aj,ipj,sqx,bm,bm(nsche-433
     1sa),idmt,idmt-2*nsa,lo)                                           sche-434
   60 if (lo(220).or.lo(141)) return                                    sche-435
c elimination of factors 1/(1-x*cos(theta))                             sche-436
      nji=2.*aj+.1                                                      sche-437
      ncj=min0(ncj,ipj-1)                                               sche-438
      if (ncj.eq.0) return                                              sche-439
      do 67 nj=1,ncj                                                    sche-440
      ipj=ipj-1                                                         sche-441
c loop on the independent amplitudes                                    sche-442
      do 66 k=1,kba                                                     sche-443
      if (abs(fm(7,k)).eq..25) go to 61                                 sche-444
      m1=2.0001*fm(6,k)                                                 sche-445
      m2=2.0001*fm(7,k)                                                 sche-446
      m3=((iabs(m1+m2)+iabs(m1-m2))/2-nji)/2+1                          sche-447
   61 b3=0.25*float(m1*m2)                                              sche-448
      if (m3.gt.ipj) go to 70                                           sche-449
      d1=0.d0                                                           sche-450
      d2=0.d0                                                           sche-451
      mj=2*m3+nji-2                                                     sche-452
      c3=0.5*dfloat(mj)                                                 sche-453
      n1=(mj+m2)/2+1-m3                                                 sche-454
      n2=(mj-m2)/2+1-m3                                                 sche-455
      n3=(mj+m1)/2+1-m3                                                 sche-456
      n4=(mj-m1)/2+1-m3                                                 sche-457
      c1=0.d0                                                           sche-458
      b1=0.d0                                                           sche-459
      a1=0.d0                                                           sche-460
      b4=0.d0                                                           sche-461
c calc. of x which minimises the differences with a weight (j+1)**2     sche-462
c for the 5 last one                                                    sche-463
      npj=ipj-5                                                         sche-464
      do 62 i=m3,ipj                                                    sche-465
      a2=a1                                                             sche-466
      b2=b1                                                             sche-467
      a1=f(1,i,k)                                                       sche-468
      b1=f(2,i,k)                                                       sche-469
      c3=c3+1.d0                                                        sche-470
      c2=c1                                                             sche-471
      c1=sqx(n1+i)*sqx(n2+i)*sqx(n3+i)*sqx(n4+i)/(c3*(2.d0*c3+1.d0))    sche-472
      if (b3.ne.0.d0) b4=b3/(c3*c3-c3)                                  sche-473
      bm(2*i-1)=a1*b4+a2*c2+f(1,i+1,k)*c1                               sche-474
      bm(2*i)=b1*b4+b2*c2+f(2,i+1,k)*c1                                 sche-475
      if (i.le.npj) go to 62                                            sche-476
      d1=d1+c3*c3*(f(1,i,k)*bm(2*i-1)+f(2,i,k)*bm(2*i))                 sche-477
      d2=d2+c3*c3*(bm(2*i-1)**2+bm(2*i)**2)                             sche-478
   62 c1=c1*(c3+c3+1.d0)/(c3+c3-1.d0)                                   sche-479
      a3=.9999999                                                       sche-480
      if (lo(18)) go to 63                                              sche-481
      if (d2.ne.0.d0) a3=d1/d2                                          sche-482
      a4=a3                                                             sche-483
c x is fixed between +1 and -1                                          sche-484
      if (a4.gt..9999999) a4=.9999999                                   sche-485
      if (a4.lt.-.9999999) a4=-.9999999                                 sche-486
c calculation of the new scattering coefficients                        sche-487
      go to 64                                                          sche-488
   63 a4=a3*(2*mod(nj,2)-1)                                             sche-489
   64 do 65 i=m3,ipj                                                    sche-490
      f(1,i,k)=f(1,i,k)-a4*bm(2*i-1)                                    sche-491
   65 f(2,i,k)=f(2,i,k)-a4*bm(2*i)                                      sche-492
      if (.not.lo(215)) write (6,1002) k,a4,a3,f(1,ipj,k),f(2,ipj,k),f(1sche-493
     1,ipj+1,k),f(2,ipj+1,k)                                            sche-494
      f(1,ipj+1,k)=a4                                                   sche-495
   66 continue                                                          sche-496
   67 continue                                                          sche-497
      return                                                            sche-498
   68 write (6,1003) n1                                                 sche-499
      go to 71                                                          sche-500
   69 write (6,1004) ij                                                 sche-501
      go to 71                                                          sche-502
   70 write (6,1005) nj                                                 sche-503
   71 write (6,1006)                                                    sche-504
      stop                                                              sche-505
 1000 format (//26h channel spin and parity =,f7.1,a2//20h  ic icp n    sche-506
     1l    j,18x,8hs matrix,20x,3h|s|,7x,17hphase /with coul.,11x,5hh.-fsche-507
     2.)                                                                sche-508
 1001 format (1x,3i3,i5,f7.1,4x,1p,2d15.7,2h i,4x,0p,3f11.8,4x,f11.8)   sche-509
 1002 format (12h amplitude =,i3,d15.7,2h (,d15.7,6h)  new,2d15.7,3x,3hosche-510
     1ld,2d15.7)                                                        sche-511
 1003 format (5x,i2,39h amplitudes unsufficient to interpolate)         sche-512
 1004 format (33h error in symmetrisation for ij =,i4)                  sche-513
 1005 format (45h amplitudes unsufficient to factorise (1-cos),i2,6h timsche-514
     1es)                                                               sche-515
 1006 format (24h in sche  .... stop ....)                              sche-516
      end                                                               sche-517
c 09/11/95  ibm version                                         ecis95  lcsp-000
      subroutine lcsp(f,fn,jmax,ipi,ncoll,ncols,mf,fm,sp,wv,aj,ipj,sqx,alcsp-001
     1,ax,idmt,id,lo)                                                   lcsp-002
c coefficients of legendre polynomials for cross-sections               lcsp-003
c scattering coefficients in the helicity representation                lcsp-004
c input variables: f:     s-matrix                                      lcsp-005
c                  fn:    transmission coefficients                     lcsp-006
c                  jmax:  maximum number of channel spins, dim. for f   lcsp-007
c                  ipi(5/6,iv): first/last channel number. see deph     lcsp-008
c                  ncoll: number of coupled levels                      lcsp-009
c                  ncols: number of levels with angular distribution    lcsp-010
c                  mf,fm: helicity numbers. see deph                    lcsp-011
c                  sp(1/2,iv): part. and target spin in state iv        lcsp-012
c                  wv:    wave number and coulomb parameter.  see colf  lcsp-013
c                  aj:    minimum channel spin                          lcsp-014
c                  ipj:   number of the channel spin                    lcsp-015
c                  sqx:   table of square roots of integers             lcsp-016
c                  idmt:  dimension of total working field              lcsp-017
c                  id:    dimension of working field ax single precisionlcsp-018
c                  lo:    logical controls                              lcsp-019
c in common /titr/ xz:    10/((2*spin(1)+1)*(2*ai(1)+1))                lcsp-020
c                  nl:    indications for expansion of cross-sections   lcsp-021
c                         in legendre polynomials                       lcsp-022
c working field:   a(7,*) amplitude multiplied by a legendre polynomial lcsp-023
c                         alternatively in a(1-2,*) and a(3-4,*)        lcsp-024
c                         coefficients of recurrence in a(5-7,*)        lcsp-025
c                  ax:    1 to jml  legendre coefficients of cross-sect.lcsp-026
c                         jml+1 to jmt    for compound nucleus          lcsp-027
c                         jmt+1 to jmx    product spin rotation matriceslcsp-028
c                         jmx+1 to jmy    coulomb phase-shifts          lcsp-029
c***********************************************************************lcsp-030
      logical lo(250),ls                                                lcsp-031
      double precision f,wv,sqx,at,a,ax,a1,a2,a3,b1,b2,b3,c1,c2,c3      lcsp-032
      dimension f(2,jmax,1),fn(jmax,1),ipi(9,1),fm(9,1),mf(9,1),sp(3,1),lcsp-033
     1wv(11,1),sqx(1),at(2),ndl(2),a(7,1),ax(1)                         lcsp-034
      common /titr/ title(18),theta1,theta2,dtheta,dthe,ncj,xz,jmm,nl(3)lcsp-035
c determination of the number of legendre polynomials                   lcsp-036
      nji=2*aj+.1                                                       lcsp-037
      ndl(1)=nl(2)                                                      lcsp-038
      ndl(2)=nl(3)                                                      lcsp-039
      if (ndl(1).eq.0) ndl(1)=(6*ipj-3+3*nji)/2                         lcsp-040
      if (ndl(2).eq.0) ndl(2)=2*ipj-1+nji                               lcsp-041
      write (6,1000)                                                    lcsp-042
c loop on levels                                                        lcsp-043
      do 40 jk=1,ncols                                                  lcsp-044
      if (wv(3,jk).lt.0.d0) go to 40                                    lcsp-045
      jk1=ipi(5,jk)                                                     lcsp-046
      jk2=ipi(6,jk)                                                     lcsp-047
      jml=ndl(2)                                                        lcsp-048
      jms=jml                                                           lcsp-049
      ls=jk.eq.1.and.wv(5,1).ne.0.                                      lcsp-050
      if (ls) jml=ndl(1)                                                lcsp-051
      jmt=jml                                                           lcsp-052
      if (lo(81)) jmt=jmt+jms                                           lcsp-053
      if (2*jmt.gt.id) call memo(idmt,idmt+2*jmt-id,m,5,lo)             lcsp-054
      if (lo(216)) go to 41                                             lcsp-055
      do 1 j=1,jmt                                                      lcsp-056
    1 ax(j)=0.d0                                                        lcsp-057
c loop on amplitudes                                                    lcsp-058
      do 34 i=jk1,jk2                                                   lcsp-059
      if (abs(fm(7,i)).eq..25) go to 3                                  lcsp-060
      m1=2.0001*fm(6,i)                                                 lcsp-061
      m2=2.0001*fm(7,i)                                                 lcsp-062
      m3=((iabs(m1+m2)+iabs(m1-m2))/2-nji)/2+1                          lcsp-063
      if (jk.gt.ncoll) go to 3                                          lcsp-064
      a1=0.25d0*(m1*m2)                                                 lcsp-065
      mj=2*m3+nji-2                                                     lcsp-066
      a2=0.5d0*mj                                                       lcsp-067
      n1=(mj+m2)/2+1-m3                                                 lcsp-068
      n2=(mj-m2)/2+1-m3                                                 lcsp-069
      n3=(mj+m1)/2+1-m3                                                 lcsp-070
      n4=(mj-m1)/2+1-m3                                                 lcsp-071
      a(7,m3)=0.d0                                                      lcsp-072
c coefficients of the recurrence                                        lcsp-073
      jm1=jml+ipj                                                       lcsp-074
      jm=jm1+1                                                          lcsp-075
      if (m3.gt.jm1) go to 3                                            lcsp-076
      do 2 j=m3,jm1                                                     lcsp-077
      a2=a2+1.d0                                                        lcsp-078
      a(6,j)=0.d0                                                       lcsp-079
      if (a1.ne.0.d0) a(6,j)=a1/(a2*a2-a2)                              lcsp-080
      a(5,j)=sqx(n1+j)*sqx(n2+j)*sqx(n3+j)*sqx(n4+j)/(a2*(2.d0*a2+1.d0))lcsp-081
    2 a(7,j+1)=a(5,j)*(a2+a2+1.d0)/(a2+a2-1.d0)                         lcsp-082
    3 if (m3.gt.jm) go to 34                                            lcsp-083
      if (jk.gt.ncoll) go to 29                                         lcsp-084
      do 4 j=m3,jm                                                      lcsp-085
      a(1,j)=0.d0                                                       lcsp-086
      a(2,j)=0.d0                                                       lcsp-087
      a(3,j)=0.d0                                                       lcsp-088
      if (j.gt.ipj) go to 4                                             lcsp-089
      a(1,j)=f(1,j,i)                                                   lcsp-090
      a(2,j)=f(2,j,i)                                                   lcsp-091
    4 a(4,j)=0.d0                                                       lcsp-092
      if (.not.ls) go to 24                                             lcsp-093
c coulomb amplitude                                                     lcsp-094
      ns1=2.001*sp(1,1)                                                 lcsp-095
      ns2=2.001*sp(2,1)                                                 lcsp-096
      nsm=iabs(ns1-ns2)-nji                                             lcsp-097
      nsp=ns1+ns2-nji                                                   lcsp-098
      ns3=ns1+ns2+2                                                     lcsp-099
      ns4=ns1-ns2                                                       lcsp-100
      nst=nsp/2+1                                                       lcsp-101
      jmx=jmt+nst                                                       lcsp-102
      jmy=jmx+2                                                         lcsp-103
      if (lo(18)) jmy=jmy+2*nl(1)                                       lcsp-104
      if (2*jmy.gt.id) call memo(idmt,idmt+2*jmy-id,m,5,lo)             lcsp-105
      if (lo(216)) go to 41                                             lcsp-106
      do 5 j=1,nst                                                      lcsp-107
    5 ax(jmt+j)=1.d0                                                    lcsp-108
c reduced rotation matrix element                                       lcsp-109
      do 9 i1=1,2                                                       lcsp-110
      ms1=2*mf(2*i1-1,i)-ns1-2                                          lcsp-111
      ms2=ns2-2*mf(2*i1,i)+2                                            lcsp-112
      ms=ms1+ms2                                                        lcsp-113
      msp=iabs(ms)-nji                                                  lcsp-114
      nsq=max0(nsm,msp)/2+1                                             lcsp-115
      at(i1)=1.d0                                                       lcsp-116
      if (nsq.eq.1) go to 7                                             lcsp-117
      do 6 j=2,nsq                                                      lcsp-118
    6 ax(jmt+j-1)=0.d0                                                  lcsp-119
    7 if (nsq.eq.nst) go to 9                                           lcsp-120
      ns=nsq+1                                                          lcsp-121
      a2=0.d0                                                           lcsp-122
      a1=1.d0                                                           lcsp-123
      b2=0.d0                                                           lcsp-124
      do 8 k=ns,nst                                                     lcsp-125
      a3=a2                                                             lcsp-126
      a2=a1                                                             lcsp-127
      b1=b2                                                             lcsp-128
      j=2*k+nji-2                                                       lcsp-129
      b2=sqx(j-ms)*sqx(j+ms)*sqx(ns3+j)*sqx(ns3-j)*sqx(j+ns4)*sqx(j-ns4)lcsp-130
     1/sqx(2*j-2)/sqx(2*j+2)/dfloat(j)                                  lcsp-131
      b3=ms1-ms2                                                        lcsp-132
      if (j.ne.2) b3=b3-dfloat(ms*ns3*ns4)/dfloat(j*(j-2))              lcsp-133
      a1=(a2*b3-a3*b1)/b2                                               lcsp-134
      ax(jmt+k)=ax(jmt+k)*a1                                            lcsp-135
    8 at(i1)=at(i1)+a1**2                                               lcsp-136
    9 continue                                                          lcsp-137
      ijx=nl(1)                                                         lcsp-138
      a3=1.d0                                                           lcsp-139
      jp=ipj                                                            lcsp-140
c multiplication by (1-cos), (1-cos**2) or their squares                lcsp-141
   10 do 12 ij=1,ijx                                                    lcsp-142
      a1=0.d0                                                           lcsp-143
      b1=0.d0                                                           lcsp-144
      do 11 j=m3,jp                                                     lcsp-145
      a2=a1                                                             lcsp-146
      b2=b1                                                             lcsp-147
      a1=a(1,j)                                                         lcsp-148
      b1=a(2,j)                                                         lcsp-149
      a(1,j)=a1-a3*(a(7,j)*a2+a(6,j)*a1+a(5,j)*a(1,j+1))                lcsp-150
   11 a(2,j)=b1-a3*(a(7,j)*b2+a(6,j)*b1+a(5,j)*a(2,j+1))                lcsp-151
      jp=jp+1                                                           lcsp-152
      a(1,jp)=-a3*a1*a(6,jp)                                            lcsp-153
   12 a(2,jp)=-a3*b1*a(6,jp)                                            lcsp-154
      a3=-a3                                                            lcsp-155
      if (lo(18).and.a3.lt.0.d0) go to 10                               lcsp-156
c initialisation of coulomb phase shifts                                lcsp-157
      c1=dsqrt(at(1)*at(2))                                             lcsp-158
      if (ax(jmx).lt.0.d0) c1=-c1                                       lcsp-159
      c2=ijx                                                            lcsp-160
      c3=2.**(ijx-1)                                                    lcsp-161
      do 23 ik=1,2                                                      lcsp-162
      nx=0                                                              lcsp-163
      nst1=nst                                                          lcsp-164
      do 13 j=1,nst                                                     lcsp-165
      a1=2.d0*ax(jmt+j)/c1*(1-mod(j+ik,2))                              lcsp-166
      if (a1.ne.0.d0) nx=nx+1                                           lcsp-167
   13 a(3,j)=a1                                                         lcsp-168
      if (nx.eq.0) go to 23                                             lcsp-169
      ax(jmx+1)=-c2*c3*wv(5,1)/(c2*c2+wv(5,1)**2)/wv(4,1)               lcsp-170
      ax(jmx+2)=-c3*wv(5,1)**2/(c2*c2+wv(5,1)**2)/wv(4,1)               lcsp-171
      if (lo(118)) go to 15                                             lcsp-172
      ax(jmx+1)=4.d0*c3*ax(jmx+1)                                       lcsp-173
      ax(jmx+2)=4.d0*c3*ax(jmx+2)                                       lcsp-174
      do 14 j=1,ijx                                                     lcsp-175
      a2=dfloat(j)*(dfloat(j+ijx)**2+wv(5,1)**2)                        lcsp-176
      a1=-dfloat(ijx-j+1)*(dfloat(ijx+j)*dfloat(ijx+j-1)+wv(5,1)**2)/a2 lcsp-177
      b1=dfloat(ijx-j+1)*wv(5,1)/a2                                     lcsp-178
      ax(jmx+2*j+1)=ax(jmx+2*j-1)*a1-ax(jmx+2*j)*b1                     lcsp-179
   14 ax(jmx+2*j+2)=ax(jmx+2*j-1)*b1+ax(jmx+2*j)*a1                     lcsp-180
   15 i1=3                                                              lcsp-181
      do 21 l=1,jm                                                      lcsp-182
      b1=2*l-1                                                          lcsp-183
c coulomb phase shift                                                   lcsp-184
      a1=ax(jmx+1)                                                      lcsp-185
      a2=ax(jmx+2)                                                      lcsp-186
      if (lo(118)) go to 17                                             lcsp-187
      do 16 j=1,ijx                                                     lcsp-188
      a1=a1+ax(jmx+2*j+1)                                               lcsp-189
   16 a2=a2+ax(jmx+2*j+2)                                               lcsp-190
   17 do 18 j=1,nst1                                                    lcsp-191
      if (lo(18).and.mod(l+ik,2).eq.1) go to 18                         lcsp-192
      a(1,j)=a(1,j)+a1*a(i1,j)*b1                                       lcsp-193
      a(2,j)=a(2,j)+a2*a(i1,j)*b1                                       lcsp-194
   18 continue                                                          lcsp-195
      i2=7-i1                                                           lcsp-196
      if (l.eq.jm) go to 21                                             lcsp-197
c product of rotation matrix elements by next pl                        lcsp-198
      b2=-(b1-1.d0)/(b1+1.d0)                                           lcsp-199
      b3=2.d0*b1/(b1+1.d0)                                              lcsp-200
      a1=0.d0                                                           lcsp-201
      do 19 j=m3,nst1                                                   lcsp-202
      a2=a1                                                             lcsp-203
      a1=a(i1,j)                                                        lcsp-204
      a(i2,j)=b2*a(i2,j)+(a(7,j)*a2+a(6,j)*a1+a(5,j)*a(i1,j+1))*b3      lcsp-205
      if (dabs(a(i2,j)).lt.1.d-10) a(i2,j)=0.d0                         lcsp-206
   19 continue                                                          lcsp-207
      if (nst1.ne.jm) a(i2,nst1+1)=a(7,nst1+1)*a1*b3                    lcsp-208
      nst1=min0(nst1+1,jm)                                              lcsp-209
      a1=(b1+1.d0)*wv(5,1)                                              lcsp-210
      b2=2.d0*c2                                                        lcsp-211
      a3=.25d0*(b1+1.d0+b2)**2+wv(5,1)**2                               lcsp-212
      a2=.25d0*(b1+1.d0-b2)*(b1+1.d0+b2)-wv(5,1)**2                     lcsp-213
      b3=(ax(jmx+1)*a2-ax(jmx+2)*a1)/a3                                 lcsp-214
      ax(jmx+2)=(ax(jmx+1)*a1+ax(jmx+2)*a2)/a3                          lcsp-215
      ax(jmx+1)=b3                                                      lcsp-216
      if (lo(118)) go to 21                                             lcsp-217
      do 20 j=1,ijx                                                     lcsp-218
      b2=b2+2.d0                                                        lcsp-219
      a3=.25d0*(b1+1.d0+b2)**2+wv(5,1)**2                               lcsp-220
      a2=.25d0*(b1+1.d0-b2)*(b1+1.d0+b2)-wv(5,1)**2                     lcsp-221
      b3=(ax(jmx+2*j+1)*a2-ax(jmx+2*j+2)*a1)/a3                         lcsp-222
      ax(jmx+2*j+2)=(ax(jmx+2*j+1)*a1+ax(jmx+2*j+2)*a2)/a3              lcsp-223
   20 ax(jmx+2*j+1)=b3                                                  lcsp-224
   21 i1=i2                                                             lcsp-225
      do 22 j=m3,jm                                                     lcsp-226
      a(3,j)=0.                                                         lcsp-227
   22 a(4,j)=0.                                                         lcsp-228
   23 continue                                                          lcsp-229
   24 b3=2.*aj+1.+2*(m3-1)                                              lcsp-230
      i1=1                                                              lcsp-231
      i2=3                                                              lcsp-232
c coefficient of other pl                                               lcsp-233
      do 28 l=1,jml                                                     lcsp-234
      a3=0.d0                                                           lcsp-235
      c1=b3                                                             lcsp-236
      if (lo(18).and.mod(l,2).ne.1) go to 26                            lcsp-237
      do 25 j=m3,ipj                                                    lcsp-238
      a3=a3+(f(1,j,i)*a(i1,j)+f(2,j,i)*a(i1+1,j))/c1                    lcsp-239
   25 c1=c1+2.d0                                                        lcsp-240
      if (fm(5,i).ne.0.) a3=a3+a3                                       lcsp-241
      ax(l)=ax(l)+a3*xz                                                 lcsp-242
   26 if (l.eq.jml) go to 28                                            lcsp-243
      c1=l                                                              lcsp-244
      c2=-(c1-1.d0)/c1                                                  lcsp-245
      c3=(2.d0*c1-1.d0)/c1                                              lcsp-246
      i1=i2                                                             lcsp-247
      i2=4-i1                                                           lcsp-248
      a1=0.d0                                                           lcsp-249
      b1=0.d0                                                           lcsp-250
      do 27 j=m3,jm1                                                    lcsp-251
      a2=a1                                                             lcsp-252
      b2=b1                                                             lcsp-253
      a1=a(i2,j)                                                        lcsp-254
      b1=a(i2+1,j)                                                      lcsp-255
      a(i1,j)=c2*a(i1,j)+(a(7,j)*a2+a(6,j)*a1+a(5,j)*a(i2,j+1))*c3      lcsp-256
   27 a(i1+1,j)=c2*a(i1+1,j)+(a(7,j)*b2+a(6,j)*b1+a(5,j)*a(i2+1,j+1))*c3lcsp-257
      a(i1,jm)=a(7,jm)*a1*c3                                            lcsp-258
      a(i1+1,jm)=a(7,jm)*b1*c3                                          lcsp-259
   28 continue                                                          lcsp-260
   29 if (lo(181)) go to 34                                             lcsp-261
c coefficients of compound nucleus                                      lcsp-262
      do 33 j=m3,ipj                                                    lcsp-263
      jj=2*j+nji-2                                                      lcsp-264
      do 31 k=1,2                                                       lcsp-265
      a(k,1)=1.d0                                                       lcsp-266
      at(k)=1.d0                                                        lcsp-267
      j1=jj+1                                                           lcsp-268
      if (j1.eq.1) go to 31                                             lcsp-269
      b1=m1                                                             lcsp-270
      if (k.eq.2) b1=m2                                                 lcsp-271
      a2=0.d0                                                           lcsp-272
      c1=0.d0                                                           lcsp-273
      do 30 m=2,j1                                                      lcsp-274
      c2=c1                                                             lcsp-275
      c1=(m-1)*sqx(jj-m+2)*sqx(jj+m)/sqx(2*m-1)/sqx(2*m-3)              lcsp-276
      a(k,m)=-(a2*c2-b1*a(k,m-1))/c1                                    lcsp-277
      a2=a(k,m-1)                                                       lcsp-278
   30 at(k)=at(k)+a(k,m)**2                                             lcsp-279
   31 continue                                                          lcsp-280
      c1=sqrt(at(1)*at(2))/xz                                           lcsp-281
      if (fm(5,i).ne.0.) c1=.5d0*c1                                     lcsp-282
      c2=1.d0                                                           lcsp-283
      do 32 m=1,j1,2                                                    lcsp-284
      ax(jml+m)=ax(jml+m)+fn(j,i)*a(1,m)*a(2,m)/c1/c2                   lcsp-285
   32 c2=c2+4.d0                                                        lcsp-286
   33 continue                                                          lcsp-287
   34 continue                                                          lcsp-288
      if (jk.gt.ncoll) go to 37                                         lcsp-289
      if (ls) write (6,1001) jk,ijx,jml                                 lcsp-290
      if (.not.ls) write (6,1002) jk,jml                                lcsp-291
      do 35 ll=1,jml,5                                                  lcsp-292
      l=ll-1                                                            lcsp-293
      lm=min0(jml,ll+4)                                                 lcsp-294
   35 write (6,1003) l,(ax(m),m=ll,lm)                                  lcsp-295
      do 36 ll=1,jml                                                    lcsp-296
      l=ll-1                                                            lcsp-297
      if (ls) write (7,1004) jk,l,ax(ll),ijx                            lcsp-298
      if (.not.ls) write (7,1005) jk,l,ax(ll)                           lcsp-299
      if (ls) write (73,1004) jk,l,ax(ll),ijx                           capote
      if (.not.ls) write (73,1005) jk,l,ax(ll)                          capote
   36 continue                                                          lcsp-300
   37 if (lo(181)) go to 40                                             lcsp-301
      write (6,1006) jk,jms                                             lcsp-302
      do 38 ll=1,jms,10                                                 lcsp-303
      l=ll-1                                                            lcsp-304
      lm=min0(jml,ll+9)                                                 lcsp-305
   38 write (6,1003) l,(ax(jml+m),m=ll,lm,2)                            lcsp-306
      do 39 ll=1,jms,2                                                  lcsp-307
      l=ll-1                                                            lcsp-308
   39 write (7,1007) jk,l,ax(jml+ll)                                    lcsp-309
   40 continue                                                          lcsp-310
      return                                                            lcsp-311
   41 write (6,1008)                                                    lcsp-312
      stop                                                              lcsp-313
 1000 format (68h1 coefficients of legendre polynomials describing the clcsp-314
     1ross-sections)                                                    lcsp-315
 1001 format (/29h direct interaction for level,i2,32h multiplied by (1-lcsp-316
     1cos(theta))**(,i2,2h ),i4,13h coefficients/4x,1hl,8x,4hc(l),14x,6hlcsp-317
     2c(l+1),13x,6hc(l+2),13x,6hc(l+3),13x,6hc(l+4))                    lcsp-318
 1002 format (/29h direct interaction for level,i2,1h,,i4,13h coefficienlcsp-319
     1ts/4x,1hl,8x,4hc(l),14x,6hc(l+1),13x,6hc(l+2),13x,6hc(l+3),13x,6hclcsp-320
     2(l+4))                                                            lcsp-321
 1003 format (i5,1p,5e19.10)                                            lcsp-322
 1004 format (2i5,1p,e20.10,5x,17h*(1-cos(theta)**(,i2,2h ))            lcsp-323
 1005 format (2i5,1p,e20.10)                                            lcsp-324
 1006 format (/27h compound nucleus for level,i2,1h,,i4,40h coefficientslcsp-325
     1 (only even ones are given)/4x,1hl,8x,4hc(l),14x,6hc(l+2),13x,6hc(lcsp-326
     2l+4),13x,6hc(l+6),13x,6hc(l+8))                                   lcsp-327
 1007 format (2i5,1p,e20.10,5x,16hcompound nucleus)                     lcsp-328
 1008 format (36h not enough place in lcsp   ... stop)                  lcsp-329
      end                                                               lcsp-330
c 28/08/95  ibm version                                         ecis95  resu-000
      subroutine resu(sp,ipi,tx,jmax,sr,ncoll,fm,mf,ipj,donn,res,ncolr,aresu-001
     1m,nco,coe,ex,njc,the,dxx,spg,nzz,wv,ajx,sqx,mx,idmt,fnc,ncont,ncoiresu-002
     2,xd,id1,lo)                                                       resu-003
c computes cross-sections and polarisations - compare to experimental   resu-004
c results -   obtains experimental normalisations and partial chi2      resu-005
c input variables: sp(j,i): spins of the part. and the target for j=1,2 resu-006
c                  ipi(j,i):parity of the nuclear states (+/-) for j=1, resu-007
c                           first/last ampl. and observable for each    resu-008
c                           level for j=5 to 8. (see calx)              resu-009
c                  tx:      inelastic cross-sections in millibarns      resu-010
c                           followed by hauser-feshbach coefficients    resu-011
c                  jmax:    maximum number of channel spins             resu-012
c                  sr:      helicity scattering coefficients            resu-013
c                  ncoll:   number of channels                          resu-014
c                  fm,mf:   tables of helicity, description of observa- resu-015
c                           bles ... etc     see deph and obse          resu-016
c                  ipj:     number of channel spins used                resu-017
c                  donn:    experimental data:angle, value, exper. errorresu-018
c                           ,ang. width, ang. error and calculated errorresu-019
c                  ncolr:   number of experimental angular distributionsresu-020
c                  njc:     first dimension of working array ex         resu-021
c                  nco,coe: indications for observables     see obse    resu-022
c                  nzz:     total length of working field,returns space resu-023
c                           used. (single precision)                    resu-024
c                  wv(i,j): wave number and coulomb parameter           resu-025
c                  ajx:     minimum channel spin                        resu-026
c                  sqx:     table of square roots of integers           resu-027
c                  mx:      length of sqx                               resu-028
c                  idmt:    total length of working field starting by spresu-029
c                  fnc:     compound nucleus coefficients               resu-030
c                  ncont:   number of continua for compound nucleus     resu-031
c                  ncoi:    starting and final addresses for continua   resu-032
c                  xd:      energy step for the continua                resu-033
c                  id1:     length of tx to be saved for minimum chi2   resu-034
c                  lo:      logical controls                            resu-035
c output variables:res:     difference between experimental and calcula-resu-036
c                           ted value divided by error (function of fiteresu-037
c in common /dblpr/chi2:    (calculated in resu)                        resu-038
c                  chi2m:   smaller previous chi2                       resu-039
c in common /ncomp/nsp:     number of uncoupled states for comp. nucleusresu-040
c working space:   am:      for general purposes                        resu-041
c                  ex:      for observables                             resu-042
c                  the,dxx,spg  for plots                               resu-043
c informations are also in labelled common /titr/ title: head of output resu-044
c        theta1,theta2,dtheta,dthe for calculation at equidistant anglesresu-045
c        ncj    for elimination of factors 1/(1-x*cos(theta)            resu-046
c        xz     conversion factor to millibarns                         resu-047
c the common /resc/ is used to transfer informations to scat            resu-048
c    see description in scat                                            resu-049
c internal logical lt(5):                                               resu-050
c          lt(1) is .true. when computing at equidistant angles         resu-051
c          lt(2) is .false. for angle in the laboratory system          resu-052
c          lt(3) is .true. for cross-section in millibarns              resu-053
c          lt(4) is .true. for symmetrised chi2, cross-section and      resu-054
c                normalisation error                                    resu-055
c          lt(5) is .true. for graph of polarisation                    resu-056
c***********************************************************************resu-057
      logical lo(250),lt(5)                                             resu-058
      dimension sp(3,1),tx(20),ipi(9,1),fm(9,1),donn(6,1),dxx(1),the(1),resu-059
     1spg(1),mf(9,1),lg(10),sigm(2),fnc(jmax,1),nco(1),res(1),xd(3,1),ncresu-060
     2oi(2,1)                                                           resu-061
      double precision am(1),sr(2,jmax,1),wv(11,1),coe(1),sqx(1),chi2,chresu-062
     1i2m,aa,bb,cc,a1,a2,thet,cm,ck,chb,cmb,ccz,xe,xm,xn,xa,xb,xc,ex(njcresu-063
     2,4),excn,zx(3),zy(3),a3,a4,a5,a6                                  resu-064
      common /titr/ title(18),theta1,theta2,dtheta,dthe,ncj,xz,jmm,nl(3)resu-065
      common /resc/ excn,jm,jn1,jn2,ntt,mtt,mt2,mt3,mt4,nout,nix,nfx    resu-066
      common /dblpr/ chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn              resu-067
      common /ncomp/ nsp(3),nrd(4),acn(2),ncons(6),az(16)               resu-068
      data sigm,lg /1h+,1h-,4hcomp,4hound,4h nuc,4hleus,2h  ,4h    ,4h dresu-069
     1ir,4hect ,4h    ,2h    /                                          resu-070
      nesp=0                                                            resu-071
      mt3=ipi(2,1)                                                      resu-072
      mt4=ipi(3,1)                                                      resu-073
      k1=ipi(6,ncoll)*2*jmax                                            resu-074
      if (.not.lo(218)) go to 3                                         resu-075
c copy the scattering coefficients obtained for minimum chi2            resu-076
      ipj=jmm                                                           resu-077
      k1=ipi(6,ncoll)*2*jmax                                            resu-078
      do 1 i=1,k1                                                       resu-079
    1 sr(i,1,1)=sr(i+k1,1,1)                                            resu-080
      do 2 i=1,id1                                                      resu-081
    2 tx(i)=tx(i+id1)                                                   resu-082
    3 jm=ipj                                                            resu-083
      if (lo(131)) go to 28                                             resu-084
c calculation at experimental angles                                    resu-085
      lt(1)=.false.                                                     resu-086
      chi2=0.d0                                                         resu-087
      nout=0                                                            resu-088
      ki=ipi(8,ncoll)                                                   resu-089
      kz=ki+ncolr                                                       resu-090
      ji=1                                                              resu-091
      ka=0                                                              resu-092
c pseudo loop on the angular distributions                              resu-093
    4 aa=0.d0                                                           resu-094
      bb=0.d0                                                           resu-095
      cc=0.d0                                                           resu-096
      jim=ji                                                            resu-097
      jin=ji                                                            resu-098
    5 j1=mf(2,kz+ji)                                                    resu-099
      j2=mf(3,kz+ji)                                                    resu-100
      lt(2)=mf(4,kz+ji).ne.1                                            resu-101
      if (j2.ge.j1) go to 6                                             resu-102
      ji=ji+1                                                           resu-103
      go to 5                                                           resu-104
    6 jif=ji                                                            resu-105
      j=j1                                                              resu-106
c pseudo loop on the experimental data                                  resu-107
    7 donn(6,j)=donn(3,j)                                               resu-108
      kc=1                                                              resu-109
      theta=donn(1,j)                                                   resu-110
    8 ji=jim                                                            resu-111
      zx(kc)=0.                                                         resu-112
      zy(kc)=0.                                                         resu-113
      if (mf(1,ki+ji).ne.8) go to 50                                    resu-114
c data are total cross sections                                         resu-115
      nix=ki+ji                                                         resu-116
      kx=kz+ji                                                          resu-117
      i=donn(1,j)*1.0001                                                resu-118
      k=max0(i,1)+1                                                     resu-119
      zx(1)=tx(k)                                                       resu-120
      if (i.eq.-1) zx(1)=tx(1)                                          resu-121
      if (i.eq.0) zx(1)=tx(1)-tx(2)                                     resu-122
      go to 16                                                          resu-123
    9 if (lt(3)) ex(2,kc)=1.                                            resu-124
      zx(kc)=(zx(kc)*zy(kc)+ex(2,kc)*ex(1,kc))/(zy(kc)+ex(1,kc))        resu-125
      zy(kc)=zy(kc)+ex(1,kc)                                            resu-126
      if (ji.eq.jif) go to 10                                           resu-127
      ji=ji+1                                                           resu-128
      go to 50                                                          resu-129
   10 if (lt(3)) zx(kc)=zx(kc)*zy(kc)                                   resu-130
      go to ( 11 , 12 , 13 ),kc                                         resu-131
   11 if (donn(4,j).eq.0) go to 16                                      resu-132
      kc=2                                                              resu-133
      theta=donn(1,j)-donn(4,j)                                         resu-134
      go to 8                                                           resu-135
   12 kc=3                                                              resu-136
      theta=donn(1,j)+donn(4,j)                                         resu-137
      go to 8                                                           resu-138
   13 if (lt(3)) go to 14                                               resu-139
      zx(1)=(zx(1)*zy(1)+zx(2)*zy(2)+zx(3)*zy(3))/(zy(1)+zy(2)+zy(3))   resu-140
      go to 15                                                          resu-141
   14 zx(1)=(zx(1)+zx(2)+zx(3))/3.                                      resu-142
   15 if (donn(5,j).ne.0.) donn(6,j)=dsqrt(donn(3,j)*donn(3,j)+((zx(2)-zresu-143
     1x(3))*donn(2,j)*donn(5,j)/(2.*donn(4,j)*zx(1)))**2)               resu-144
   16 res(j)=zx(1)                                                      resu-145
      if (lt(4)) donn(6,j)=donn(6,j)*sqrt(fm(6,kx)*res(j)/donn(2,j))    resu-146
      xc=donn(6,j)**2/fm(5,kx)                                          resu-147
      aa=aa+res(j)**2/xc                                                resu-148
      bb=bb+res(j)*donn(2,j)/xc                                         resu-149
      cc=cc+donn(2,j)**2/xc                                             resu-150
      j=j+1                                                             resu-151
c end of the pseudo loop on experimental data                           resu-152
      if (j.le.j2) go to 7                                              resu-153
c computation of normalisation and chi2                                 resu-154
      if (fm(7,kx).eq.0.) go to 19                                      resu-155
      xa=fm(5,kx)/fm(7,kx)**2                                           resu-156
      aa=aa+xa                                                          resu-157
      xb=fm(6,kx)                                                       resu-158
      bb=bb+xa*xb                                                       resu-159
      cc=cc+xa*xb*xb                                                    resu-160
      if (ji.eq.ncolr) go to 17                                         resu-161
      if (fm(6,kx).ne.fm(6,kx+1).or.fm(7,kx).ne.fm(7,kx+1)) go to 17    resu-162
      if ((2*iabs(mf(1,nix))-3)*(2*iabs(mf(1,nix+1))-3).lt.0) go to 17  resu-163
      ji=ji+1                                                           resu-164
      jim=ji                                                            resu-165
      go to 5                                                           resu-166
   17 if (lt(4)) go to 18                                               resu-167
      fm(8,kx)=bb/aa                                                    resu-168
      go to 20                                                          resu-169
   18 fm(8,kx)=dsqrt(cc/aa)                                             resu-170
      go to 20                                                          resu-171
   19 fm(8,kx)=fm(6,kx)                                                 resu-172
   20 do 25 jj=jin,ji                                                   resu-173
      ky=kz+jj                                                          resu-174
      nix=ki+jj                                                         resu-175
      j1=mf(2,ky)                                                       resu-176
      j2=mf(3,ky)                                                       resu-177
      if (j1.gt.j2) go to 25                                            resu-178
      if (ky.ne.kx) fm(8,ky)=fm(8,kx)                                   resu-179
      if (lo(215)) go to 21                                             resu-180
c output of the calculated and the experimental values                  resu-181
      m=0                                                               resu-182
      write (6,1000) title                                              resu-183
      if (mf(1,nix).ne.8) write (6,1001) mf(1,ky)                       resu-184
      write (6,1002) (mf(j,nix),j=5,9)                                  resu-185
   21 a1=fm(8,ky)                                                       resu-186
      a6=sqrt(fm(5,ky))                                                 resu-187
      aa=0.d0                                                           resu-188
      if (fm(7,ky).eq.0.) go to 22                                      resu-189
      a2=(a1-fm(6,ky))/fm(7,ky)                                         resu-190
      aa=a2**2                                                          resu-191
      res(j2+1)=a2*a6                                                   resu-192
      chi2=chi2+res(j2+1)**2                                            resu-193
   22 do 24 j=j1,j2                                                     resu-194
      a2=donn(2,j)/a1                                                   resu-195
      a3=donn(6,j)/a1                                                   resu-196
      a4=((res(j)-a2)/a3)**2                                            resu-197
      if (lo(215)) go to 23                                             resu-198
      m=m+1                                                             resu-199
      a5=donn(3,j)/a1                                                   resu-200
      the(m)=donn(1,j)                                                  resu-201
      dxx(m)=a2                                                         resu-202
      spg(m)=res(j)                                                     resu-203
      write (6,1003) donn(1,j),res(j),a2,a5,a3,a4                       resu-204
   23 aa=aa+a4                                                          resu-205
      res(j)=(res(j)-a2)*a6/a3                                          resu-206
   24 chi2=chi2+res(j)**2                                               resu-207
      fm(9,ky)=aa                                                       resu-208
      if (lo(215)) go to 25                                             resu-209
      write (6,1004) (fm(j,ky),j=6,9)                                   resu-210
      if (mf(1,nix).eq.8) go to 25                                      resu-211
      if (lo(59)) call hora                                             resu-212
      lt(5)=.not.(lt(3).or.mf(1,nix).eq.1)                              resu-213
      if (lo(167)) call gral(the,spg,dxx,m,mf(1,nix),1,lt(5),.false.)   resu-214
      if (lo(59)) call hora                                             resu-215
   25 continue                                                          resu-216
      ji=ji+1                                                           resu-217
c end of the pseudo loop on angular distributions                       resu-218
      if (ji.le.ncolr) go to 4                                          resu-219
      if (.not.lo(215)) write (6,1005) chi2                             resu-220
      if (chi2.gt.chi2m.or.lo(132)) go to 28                            resu-221
      jmm=ipj                                                           resu-222
      chi2m=chi2                                                        resu-223
      k1=ipi(6,ncoll)*2*jmax                                            resu-224
c if the chi2 decreased, save the scattering coefficients               resu-225
      do 26 i=1,k1                                                      resu-226
   26 sr(i+k1,1,1)=sr(i,1,1)                                            resu-227
      do 27 i=1,id1                                                     resu-228
   27 tx(i+id1)=tx(i)                                                   resu-229
   28 if (lo(215)) go to 49                                             resu-230
      lt(2)=lo(191)                                                     resu-231
      if (lo(66).and.lo(181)) go to 49                                  resu-232
c computation at equidistant angles                                     resu-233
      write (6,1000) title                                              resu-234
      if (wv(5,1).eq.0.d0) write (6,1006) tx(1)                         resu-235
      if (wv(5,1).eq.0.d0) write (70,'(e12.5)') tx(1)                   capote
c     if (lo(90).and.wv(5,1).eq.0.d0) write (70,'(e12.5)') tx(1)        koning
      rx=tx(1)-tx(2)                                                    resu-236
      write (6,1007) rx                                                 resu-237
c     if (lo(70)) write (70,'(e12.5)') rx                               koning
      write (70,'(e12.5)') rx                                           capote
      if (lo(181)) go to 36                                             resu-238
c compound nucleus results                                              resu-239
      write (6,1008)                                                    resu-240
      rx=rx-tx(ncoll+2)                                                 resu-241
      write (6,1009) rx                                                 resu-242
      write (6,1010)                                                    resu-243
      if (lo(85)) write (6,1011) tx(2*ncoll+2)                          resu-244
      if (lo(86)) write (6,1012) tx(2*ncoll+3)                          resu-245
      rx=tx(2*ncoll+2)+tx(2*ncoll+3)                                    resu-246
      write (6,1013)                                                    resu-247
      ry=0.                                                             resu-248
      do 29 i=1,ncoll                                                   resu-249
      ii=ipi(1,i)+1                                                     resu-250
      ry=ry+tx(ncoll+i+1)                                               resu-251
   29 write (6,1014) i,sp(2,i),sigm(ii),wv(3,i),tx(ncoll+i+1)           resu-252
      write (6,1015) ry                                                 resu-253
      rx=rx+ry                                                          resu-254
      if (lo(184)) go to 35                                             resu-255
      nsp1=nsp(3)                                                       resu-256
      if (ncont.ne.0) nsp1=ncoi(1,1)-ncoll-1                            resu-257
      if (nsp1.lt.1) go to 31                                           resu-258
      write (6,1016)                                                    resu-259
      ry=0.                                                             resu-260
      do 30 i=1,nsp1                                                    resu-261
      j=i+ncoll                                                         resu-262
      ii=ipi(1,j)+1                                                     resu-263
      ry=ry+tx(ncoll+j+3)                                               resu-264
   30 write (6,1014) j,sp(2,j),sigm(ii),wv(3,j),tx(ncoll+j+3)           resu-265
      write (6,1015) ry                                                 resu-266
      rx=rx+ry                                                          resu-267
   31 if (ncont.eq.0) go to 35                                          resu-268
      je=0                                                              resu-269
      do 34 i=1,ncont                                                   resu-270
      ij=ncoi(1,i)                                                      resu-271
      ji=ncoi(2,i)                                                      resu-272
      ry=0.                                                             resu-273
      do 32 ii=ij,ji                                                    resu-274
      if (wv(3,ncoll+ii).ge.0.d0) ry=ry+tx(ncoll+ii+3)                  resu-275
   32 continue                                                          resu-276
      write (6,1017) i,ry                                               resu-277
      rx=rx+ry                                                          resu-278
      do 33 ii=ij,ji                                                    resu-279
      je=je+1                                                           resu-280
      if (wv(3,ncoll+ii).lt.0.d0) go to 33                              resu-281
      ry=tx(ncoll+ii+3)/xd(2,je)                                        resu-282
      write (6,1018) ii,wv(3,ii),xd(2,je),tx(ncoll+ii+3),ry             resu-283
   33 continue                                                          resu-284
   34 continue                                                          resu-285
   35 write (6,1019) rx                                                 resu-286
      write (6,1000) title                                              resu-287
   36 iniv=1                                                            resu-288
      ip=ipi(1,iniv)+1                                                  resu-289
      write (6,1020) sp(2,iniv),sigm(ip)                                resu-290
      nout=0                                                            resu-291
      lt(1)=.true.                                                      resu-292
      j=int((theta2-theta1)/dtheta+1.5)                                 resu-293
c pseudo do loop on levels                                              resu-294
   37 if (wv(3,iniv).gt.0.d0) go to 38                                  resu-295
      write (6,1021) iniv                                               resu-296
      go to 48                                                          resu-297
   38 if (iniv.ne.1.and.lo(166)) write (6,1000) title                   resu-298
      if (iniv.eq.1) go to 39                                           resu-299
      ip=ipi(1,iniv)+1                                                  resu-300
      write (6,1022) iniv,sp(2,iniv),sigm(ip)                           resu-301
   39 if (iniv.eq.1.and.wv(5,1).ne.0.d0) go to 40                       resu-302
      rx=tx(iniv+1)                                                     resu-303
      if (lo(81)) rx=rx+tx(ncoll+iniv+1)                                resu-304
      if (iniv.eq.1) write (6,1023) rx                                  resu-305
      if (iniv.eq.1) write (70,'(e12.5)') rx                            capote
c     if (lo(90).and.iniv.eq.1) write (70,'(e12.5)') rx                 koning
      if (iniv.ne.1) write (6,1024) rx                                  resu-306
      if (iniv.ne.1) write (71,'(e12.5)') rx                            capote
c     if (lo(80).and.iniv.ne.1) write (7,'(e12.5)') rx                  koning
      if (lo(64)) write (74,'(e12.5)') rx                               capote
      if (lo(81)) write (6,1025) tx(iniv+1)                             resu-307
   40 if (lo(81)) write (6,1026) tx(ncoll+iniv+1)                       resu-308
      if (lo(66)) go to 49                                              resu-309
      if (j.le.0) go to 48                                              resu-310
      thetb=theta1                                                      resu-311
      ij=0                                                              resu-312
      ii=1                                                              resu-313
c pseudo do loop on angles                                              resu-314
   41 the(ii)=thetb                                                     resu-315
      theta=thetb                                                       resu-316
      kc=1                                                              resu-317
      go to 51                                                          resu-318
   42 dxx(ii)=ex(i5,1)                                                  resu-319
      i1=min0(i4,7)                                                     resu-320
      write (6,1027) thetb,(ex(k,1),k=2,i1)                             resu-321
   43 if (i1.ge.i4) go to 44                                            resu-322
      i2=i1+1                                                           resu-323
      i1=min0(i1+5,i4)                                                  resu-324
      write (6,1028) (ex(k,1),k=i2,i1)                                  resu-325
      go to 43                                                          resu-326
   44 if (lo(164)) go to 45                                             resu-327
c     if (lo(60)) then                                                  koning
c       write (74,1029) (mf(1,nix+k-2),theta,ex(k,1),k=2,i3)            capote
c       write (7,1029) (mf(1,nix+k-2),theta,ex(k,1),k=2,i3)             resu-328
c     else                                                              koning
      write (74,1029) mf(1,nix),theta,ex(2,1)                           capote  
c       write (7,1029) mf(1,nix),theta,ex(2,1)                          koning  
c     endif                                                             koning
      if (lo(81)) write (7,1030) theta,ex(i3+1,1),theta,ex(i4,1)        resu-329
   45 if (i7.le.0) go to 47                                             resu-330
      do 46 k=1,i7                                                      resu-331
      ij=ij+1                                                           resu-332
   46 spg(ij)=ex(k+i5,1)                                                resu-333
   47 thetb=thetb+dtheta                                                resu-334
      ii=ii+1                                                           resu-335
c end of the pseudo do loop on angles                                   resu-336
      if (ii.le.j) go to 41                                             resu-337
      if (lo(168))call gral(the,dxx,dxx,j,mf(1,nfx-i7),1,.false.,.true.)resu-338
      if (lo(169).and.i7.gt.0) call gral(the,spg,dxx,j,mf(1,nix+i5-1),i7resu-339
     1,.true.,.true.)                                                   resu-340
      if (lo(59)) call hora                                             resu-341
   48 iniv=iniv+1                                                       resu-342
c end of the pseudo do loop on levels                                   resu-343
      if (iniv.le.ncoll) go to 37                                       resu-344
   49 nzz=4*nesp                                                        resu-345
      return                                                            resu-346
c for experimental data                                                 resu-347
   50 kx=kz+ji                                                          resu-348
      if (kx.eq.ka) go to 57                                            resu-349
      iniv=mf(1,kx)                                                     resu-350
      ka=kx                                                             resu-351
      go to 52                                                          resu-352
c for equidistant angles                                                resu-353
   51 if (iniv.eq.nout) go to 57                                        resu-354
   52 nout=iniv                                                         resu-355
c change of level                                                       resu-356
      jn1=ipi(5,nout)                                                   resu-357
      jn2=ipi(6,nout)                                                   resu-358
      mt1=ipi(2,nout)                                                   resu-359
      mt2=ipi(3,nout)                                                   resu-360
      ntt=jn2+1-jn1                                                     resu-361
      mtt=mt1*mt2*mt3*mt4                                               resu-362
      m2=1+2*mtt                                                        resu-363
      m3=m2+2*ntt                                                       resu-364
      m4=m3+ipj+ncj                                                     resu-365
      if (lo(226)) m4=max0(m4,6*mtt)                                    resu-366
      nesp=max0(nesp,m4)                                                resu-367
      if (4*m4.gt.nzz) call memo(idmt,idmt+4*m4-nzz,nzz,5,lo)           resu-368
      if (lo(216)) go to 67                                             resu-369
      if (lt(2)) go to 54                                               resu-370
      if (lo(8)) go to 53                                               resu-371
      xa=1.d0                                                           resu-372
      xb=wv(4,1)*wv(1,nout)/(wv(4,nout)*wv(2,1))                        resu-373
      go to 54                                                          resu-374
   53 xa=dsqrt(1.d0+(wv(4,1)/(cmb*wv(2,1)))**2)                         resu-375
      xb=dsqrt(wv(1,nout)**2+(wv(4,nout)/cmb)**2)*wv(4,1)/(wv(4,nout)*wvresu-376
     1(2,1))                                                            resu-377
   54 if (lt(1)) go to 55                                               resu-378
c for experimental data                                                 resu-379
      nix=ki+ji                                                         resu-380
      nfx=nix                                                           resu-381
      lt(3)=mf(1,nix).eq.0                                              resu-382
      lt(4)=lo(33).and.(iabs(mf(1,nix)).le.1.and.fm(7,kx).eq.0.)        resu-383
      go to 57                                                          resu-384
c for equidistant angles                                                resu-385
   55 nix=ipi(7,iniv)                                                   resu-386
      nfx=ipi(8,iniv)                                                   resu-387
      i4=2+nfx-nix                                                      resu-388
      i3=i4                                                             resu-389
      i5=2                                                              resu-390
      if (i4.gt.2.and.mf(1,nix+1).eq.1) i5=3                            resu-391
      i7=i4-i5                                                          resu-392
      if (lo(81)) go to 56                                              resu-393
      write (6,1031) ((fm(l,k),l=5,9),k=nix,nfx)                        resu-394
      go to 57                                                          resu-395
   56 i4=i4+2                                                           resu-396
      write (6,1031) ((fm(l,k),l=5,9),k=nix,nfx),lg                     resu-397
   57 thet=1.74532925e-02*theta                                         resu-398
      if (lt(2)) go to 58                                               resu-399
      a1=dcos(thet)                                                     resu-400
      a2=dsin(thet)                                                     resu-401
      xc=(xa**2-xb**2)*a2**2+a1**2                                      resu-402
      if (xc.gt.0.d0) xc=dsqrt(xc)                                      resu-403
      thet=datan2(a2*(xb*a1+xc*xa),xc*a1-xa*xb*a2**2)                   resu-404
   58 call scat(sr,mf,fm,jmax,thet,cmb,nco,coe,sp,mt1,am,am(m2),am(m3),eresu-405
     1x(1,kc),fnc,wv,ncj,ajx,xz,sqx,mx,lo)                              resu-406
      if (lt(2)) go to 59                                               resu-407
      a1=dcos(thet)                                                     resu-408
      a2=dsin(thet)                                                     resu-409
      xc=xa*a1+xb                                                       resu-410
      xc=dsqrt(xc**2+a2**2)**3/dabs(xa+xb*a1)                           resu-411
      ex(1,kc)=ex(1,kc)*xc                                              resu-412
      thet=thet/1.74532925e-02                                          resu-413
   59 if (.not.lt(1)) go to 9                                           resu-414
      if (lt(2)) go to 60                                               resu-415
      ex(2,kc)=ex(2,kc)*xc                                              resu-416
      if (lo(81)) excn=excn*xc                                          resu-417
   60 if (lo(181)) go to 61                                             resu-418
      ex(i4-1,kc)=excn                                                  resu-419
      ex(i4,kc)=ex(2,kc)-excn                                           resu-420
   61 if (dthe.eq.0.) go to 42                                          resu-421
      go to ( 62 , 63 , 64 ),kc                                         resu-422
   62 kc=2                                                              resu-423
      theta=thetb-dthe                                                  resu-424
      go to 57                                                          resu-425
   63 kc=3                                                              resu-426
      theta=thetb+dthe                                                  resu-427
      go to 57                                                          resu-428
   64 aa=ex(1,1)+ex(1,2)+ex(1,3)                                        resu-429
      do 66 k=2,i4                                                      resu-430
      if ((k.gt.i5).and.(k.le.i3)) go to 65                             resu-431
      ex(k,1)=(ex(k,1)+ex(k,2)+ex(k,3))/3.d0                            resu-432
      go to 66                                                          resu-433
   65 ex(k,1)=(ex(k,1)*ex(1,1)+ex(k,2)*ex(1,2)+ex(k,3)*ex(1,3))/aa      resu-434
   66 continue                                                          resu-435
      go to 42                                                          resu-436
   67 write (6,1032)                                                    resu-437
      go to 49                                                          resu-438
 1000 format (1h1,5x,18a4//)                                            resu-439
 1001 format (//30x,18h**********   state,i5,14h    **********//)       resu-440
 1002 format (//42x,5a4//10x,5hangle,10x,10hcalc. val.,11x,9hexp. val.,1resu-441
     10x,10hexp. error,10x,10hcor. error,13x,4hchi2/)                   resu-442
 1003 format (6x,f10.3,5e20.5)                                          resu-443
 1004 format (//27h experimental normalisation,e15.5/20h normalisation eresu-444
     1rror,e22.5/25h calculated normalisation,e17.5//13h ***** chi2 =,e1resu-445
     25.6,8h   *****/)                                                  resu-446
 1005 format (/29h ************ chi2 **********,d20.10//)               resu-447
 1006 format (6x,25h==> total cross section =,f14.6,11h millibarns)     resu-448
 1007 format (31h total reaction cross section =,f14.6,11h millibarns)  resu-449
 1008 format (1h+,66x,30h( including compound elastic ))                resu-450
 1009 format (38h total direct reaction cross section =,f14.6,11h millibresu-451
     1arns)                                                             resu-452
 1010 format (1h+,66x,28h( without compound elastic ))                  resu-453
 1011 format (8x,23hfission cross section =,f14.6,11h millibarns)       resu-454
 1012 format (6x,25hgamma ray cross section =,f14.6,11h millibarns)     resu-455
 1013 format (/75h  compound cross section for scattering to levels withresu-456
     1 angular distribution/75h  =======================================resu-457
     2==================================//50h   level     spin       eneresu-458
     3rgy       cross section/)                                         resu-459
 1014 format (i5,f9.1,a1,5h   at,f10.5,4h mev,f14.5)                    resu-460
 1015 format (/30h sum of compound contributions,f14.6,11h millibarns)  resu-461
 1016 format (/78h  compound cross section for scattering to levels withresu-462
     1out angular distribution/78h  ====================================resu-463
     2========================================//50h   level     spin    resu-464
     3   energy       cross section/)                                   resu-465
 1017 format (/10h continuum,i4/40h total compound reaction cross sectioresu-466
     1n =,f14.6,11h millibarns//8x,57h energy     step     contribution resu-467
     2 value (millibarns/mev)/)                                         resu-468
 1018 format (2x,i3,2f10.5,2f15.5)                                      resu-469
 1019 format (/36h total sum of compound contributions,f14.6,11h millibaresu-470
     1rns)                                                              resu-471
 1020 format (/49h elastic scattering on the target state of spin =,f5.1resu-472
     1,a1)                                                              resu-473
 1021 format (//36h closed channel for the target state,i3)             resu-474
 1022 format (/41h inelastic scattering to the target state,i3,8h  spin resu-475
     1=,f5.1,a1)                                                        resu-476
 1023 format (/31h  total elastic cross section =,f14.6,11h millibarns) resu-477
 1024 format (/6x,25hinelastic cross section =,f14.6,11h millibarns)    resu-478
 1025 format (9x,22hdirect cross section =,f14.6,11h millibarns)        resu-479
 1026 format (7x,24hcompound cross section =,f14.6,11h millibarns)      resu-480
 1027 format (1x,f10.3,e16.5,2x,5f18.7)                                 resu-481
 1028 format (29x,5f18.7)                                               resu-482
 1029 format (i3,2e12.5)                                                resu-483
 1030 format (3h -4,2e12.5/3h -5,2e12.5)                                resu-484
 1031 format (/5x,5hangle,2x,6(4a4,a2)/(30x,5(4a4,a2)))                 resu-485
 1032 format (//67h **** not enough storage for the computation of crossresu-486
     1-sections ****//)                                                 resu-487
      end                                                               resu-488
c 24/08/94  ibm version                                         ecis94  scat-000
      subroutine scat(fr,mf,fm,jmax,thet,cmb,nco,coe,sp,mt1,ab,a,b,ex,fnscat-001
     1c,wv,ncj,ajx,xz,sqx,mx,lo)                                        scat-002
c computation of observables                                            scat-003
c input variables: fr:    scattering coeff. in the helicity formalism   scat-004
c                  mf,fm: tables of helicity,description of observables,scat-005
c                         .... etc   see deph and obse                  scat-006
c                  jmax:  dimension for fr and fnc                      scat-007
c                  thet:  scattering angle in radians                   scat-008
c                  cmb:   atomic mass unit divided by hbar              scat-009
c                  nco,coe:   loops and coeff. for observables  see obsescat-010
c                  sp:    spins for incident and target nucleus         scat-011
c                  mt1:   multiplicity of the outgoing particle         scat-012
c                         second dimension of the working space ab      scat-013
c                  fnc:   compound nucleus coefficients                 scat-014
c                  wv:    masses, energies, etc..    see calx           scat-015
c                  ncj:   number of factorisations of 1/(1-x*cos(theta))scat-016
c                  ajx:   minimum of the total spin                     scat-017
c                  xz:    conversion factor to millibarns               scat-018
c                  sqx:   table of square roots of integers             scat-019
c                  mx:    length of sqx                                 scat-020
c                  lo:    logical controls                              scat-021
c output variables:ex:    differ. cross-section followed by observables scat-022
c working space:   ab:    amplitudes in the c. m. or the lab. system    scat-023
c                  a:     for independent amplitudes                    scat-024
c                  b:     to store the rotation matrix elements         scat-025
c other input by common /resc/                                          scat-026
c                  jm:     number of channel spins used                 scat-027
c                  jn1,jn2:first and last amplitude in:the table        scat-028
c                  ntt:    number of independent amplitudes             scat-029
c                  mtt:    total number of amplitudes                   scat-030
c                  mt2:    multiplicity of the residual target          scat-031
c                  mt3:    multiplicity of the incident particle        scat-032
c                  mt4:    multiplicity of the initial target           scat-033
c                  nout:   nuclear state considered                     scat-034
c                  nix,nfx:first:and last observable in the table       scat-035
c output:          excn:   compound-nucleus cross-section               scat-036
c***********************************************************************scat-037
      logical lo(250),ltt(6),lxy                                        scat-038
      double precision fr(2,jmax,1),wv(11,1),coe(1),ab(2,mt1,1),a(2,1),bscat-039
     1(2),thet,cmb,dz,w1,w2,w3,w4,w5,w6,sqx(1),x,x1,x2,x3,x4,x5,ex(1),exscat-040
     2cn,y1,y2,y4,y5                                                    scat-041
      dimension sp(3,1),fm(9,1),mf(9,1),fnc(jmax,1),nlt(2),nco(20,1)    scat-042
      common /resc/ excn,jm,jn1,jn2,ntt,mtt,mt2,mt3,mt4,nout,nix,nfx    scat-043
      w3=1.d0                                                           scat-044
      x2=dcos(0.5d0*thet)                                               scat-045
      x3=dsin(0.5d0*thet)                                               scat-046
      if (lo(41)) w6=x2*x2-x3*x3                                        scat-047
      do 1 i=1,ntt                                                      scat-048
      a(1,i)=0.d0                                                       scat-049
    1 a(2,i)=0.d0                                                       scat-050
      if (nout.ne.1) go to 4                                            scat-051
c computation of coulomb amplitudes for the elastic channel             scat-052
      if (wv(5,1).eq.0..or.x3.lt.1.e-20) go to 4                        scat-053
      sp1=sp(1,1)                                                       scat-054
      sp2=sp(2,1)                                                       scat-055
      w2=2.d0*wv(5,1)*dlog(x3)                                          scat-056
      w3=-0.5d0*wv(5,1)/(wv(4,1)*x3*x3)                                 scat-057
      w4=w3*dcos(w2)                                                    scat-058
      w5=-w3*dsin(w2)                                                   scat-059
      w3=w3**2                                                          scat-060
      if (lo(118)) go to 2                                              scat-061
c symmetrisation between projectile and target                          scat-062
      fs=1.-amod(4.*sp1,4.)                                             scat-063
      y2=2.*wv(5,1)*dlog(x2)                                            scat-064
      y1=-0.5*wv(5,1)/(wv(4,1)*x2*x2)                                   scat-065
      y4=y1*dcos(y2)                                                    scat-066
      y5=-y1*dsin(y2)                                                   scat-067
      w3=w4**2+w5**2+y4**2+y5**2+fs*(w4*y4+w5*y5)/(sp1+.5)              scat-068
c transformation of the coulomb amplitudes to the helicity formalism    scat-069
    2 do 3 i=1,ntt                                                      scat-070
      sm1=mf(1,i)-1-sp1                                                 scat-071
      sm2=sp2-mf(2,i)+1                                                 scat-072
      sm3=mf(3,i)-1-sp1                                                 scat-073
      sm4=sp2-mf(4,i)+1                                                 scat-074
      call emro(sp1,sm3,sm1,x2,x3,sqx,mx,b,1)                           scat-075
      call emro(sp2,sm4,sm2,x2,x3,sqx,mx,b(2),1)                        scat-076
      w1=b(1)*b(2)                                                      scat-077
      a(1,i)=w4*w1                                                      scat-078
      a(2,i)=w5*w1                                                      scat-079
      if (lo(118)) go to 3                                              scat-080
      call emro(sp1,sm3,sm2,x2,x3,sqx,mx,b,1)                           scat-081
      call emro(sp2,sm4,sm1,x2,x3,sqx,mx,b(2),1)                        scat-082
      y1=b(1)*b(2)*fs                                                   scat-083
      a(1,i)=a(1,i)+y4*y1                                               scat-084
      a(2,i)=a(2,i)+y5*y1                                               scat-085
    3 continue                                                          scat-086
c computation of the nuclear amplitudes                                 scat-087
    4 dz=0.d0                                                           scat-088
      do 12 i=jn1,jn2                                                   scat-089
      ij=i-jn1+1                                                        scat-090
      x5=0.d0                                                           scat-091
      w5=1.d0                                                           scat-092
      jn=jm                                                             scat-093
      if (lo(141)) go to 6                                              scat-094
c factorisation of 1/(1-x*cos(theta)) with x after the scat. coeff.     scat-095
      do 5 j=1,ncj                                                      scat-096
      jn=jn+1                                                           scat-097
    5 w5=w5/(1.d0-fr(1,jn,i)*w6)                                        scat-098
    6 if (abs(fm(7,i)).eq..25) go to 7                                  scat-099
      sm1=fm(6,i)                                                       scat-100
      sm2=fm(7,i)                                                       scat-101
      call emro(ajx,sm1,sm2,x2,x3,sqx,mx,b,jn)                          scat-102
      w1=w5                                                             scat-103
      go to 8                                                           scat-104
c rotation matrix elements are the same as for the last amplitude       scat-105
    7 w1=w5*fm(7,i)/abs(fm(7,i))                                        scat-106
    8 do 9 j=1,jm                                                       scat-107
      a(1,ij)=a(1,ij)+fr(1,j,i)*w1*b(j)                                 scat-108
    9 a(2,ij)=a(2,ij)+fr(2,j,i)*w1*b(j)                                 scat-109
      if (lo(181)) go to 11                                             scat-110
      do 10 j=1,jn                                                      scat-111
   10 x5=x5+fnc(j,i)*b(j)**2                                            scat-112
c construction of the total amplitude matrix                            scat-113
   11 k1=mf(8,i)                                                        scat-114
      ab(1,k1,1)=a(1,ij)                                                scat-115
      ab(2,k1,1)=a(2,ij)                                                scat-116
      dz=dz+x5                                                          scat-117
      if (fm(5,i).eq.0.) go to 12                                       scat-118
      w1=fm(5,i)                                                        scat-119
      k1=mf(9,i)                                                        scat-120
      ab(1,k1,1)=w1*a(1,ij)                                             scat-121
      ab(2,k1,1)=w1*a(2,ij)                                             scat-122
      dz=dz+x5                                                          scat-123
   12 continue                                                          scat-124
c cross-section                                                         scat-125
      excn=dz*xz                                                        scat-126
      do 13 i1=1,mtt                                                    scat-127
   13 dz=dz+ab(1,i1,1)*ab(1,i1,1)+ab(2,i1,1)*ab(2,i1,1)                 scat-128
      ex(1)=dz*xz                                                       scat-129
      lx1=0                                                             scat-130
      lx2=0                                                             scat-131
      jex=1                                                             scat-132
c loop on the observables                                               scat-133
      do 50 iex=nix,nfx                                                 scat-134
      jex=jex+1                                                         scat-135
      if (mf(1,iex).gt.1) go to 20                                      scat-136
      if (mf(1,iex)) 16 , 14 , 15                                       scat-137
c cross section                                                         scat-138
   14 ex(jex)=ex(1)                                                     scat-139
      go to 50                                                          scat-140
c cross section divided by rutherford's cross-section                   scat-141
   15 ex(jex)=ex(1)/(10.*w3)                                            scat-142
      go to 50                                                          scat-143
   16 ex(jex)=0.                                                        scat-144
      if (mf(1,iex).eq.-3) go to 18                                     scat-145
      mtp=mt1*mt2*mt4                                                   scat-146
c vector analysing power for spin 1/2 or 1                              scat-147
      do 17 i1=1,mtp                                                    scat-148
      i2=i1+mtp                                                         scat-149
   17 ex(jex)=ex(jex)+ab(2,i2,1)*ab(1,i1,1)-ab(1,i2,1)*ab(2,i1,1)       scat-150
      ex(jex)=2.*ex(jex)*xz/ex(1)                                       scat-151
      if (mt3.eq.3) ex(jex)=1.22474487e0*ex(jex)                        scat-152
      go to 50                                                          scat-153
c vector polarisation for spin 1/2 or 1                                 scat-154
   18 do 19 i1=1,mtt,mt1                                                scat-155
   19 ex(jex)=ex(jex)+ab(1,i1+1,1)*ab(2,i1,1)-ab(2,i1+1,1)*ab(1,i1,1)   scat-156
      ex(jex)=2.*ex(jex)*xz/ex(1)                                       scat-157
      if (mt1.eq.3) ex(jex)=1.22475*ex(jex)                             scat-158
      go to 50                                                          scat-159
c all the other observables                                             scat-160
   20 ex(jex)=0.d0                                                      scat-161
      k1=mf(3,iex)                                                      scat-162
      k2=mf(4,iex)                                                      scat-163
c loop on the components of the description of the observable           scat-164
      do 49 ii=k1,k2                                                    scat-165
      ix=1                                                              scat-166
      ixy=1                                                             scat-167
      ixx=ixy+mt2*mt3*mt4                                               scat-168
      jn=nco(17,ii)                                                     scat-169
      do 21 ij=1,6                                                      scat-170
      ltt(ij)=mod(jn,2).eq.1                                            scat-171
   21 jn=jn/2                                                           scat-172
      nlt(1)=mod(nco(18,ii),1000)                                       scat-173
      nlt(2)=nco(18,ii)/1000                                            scat-174
c computation of the angle for a change of frame                        scat-175
      if (nlt(1).eq.0) go to 42                                         scat-176
      lxy=.true.                                                        scat-177
      if (lx1.eq.nlt(1)) go to 41                                       scat-178
      lx1=nlt(1)                                                        scat-179
      lx2=0                                                             scat-180
      n=mt1                                                             scat-181
      if (lx1.eq.1) go to 23                                            scat-182
      w3=-thet                                                          scat-183
      go to 27                                                          scat-184
   22 if (nlt(2).eq.0) go to 42                                         scat-185
      lxy=.false.                                                       scat-186
      if (nlt(2).eq.lx2) go to 41                                       scat-187
      lx2=nlt(2)                                                        scat-188
      n=mt2                                                             scat-189
      if (lx2.eq.1) go to 24                                            scat-190
      w3=-thet                                                          scat-191
      go to 27                                                          scat-192
c transformation to the laboratory system for the particle              scat-193
   23 w1=wv(1,nout)                                                     scat-194
      go to 25                                                          scat-195
c transformation to the laboratory system for the target                scat-196
   24 w1=-wv(2,nout)                                                    scat-197
   25 if (n.eq.1) go to 39                                              scat-198
      if (lo(108)) go to 26                                             scat-199
      w1=wv(4,nout)/(cmb*w1)                                            scat-200
      w2=cmb*wv(2,1)/wv(4,1)                                            scat-201
      w3=datan(-dsin(thet)/(dcos(thet)*dsqrt(w1*w1+1.d0)+w1*dsqrt(w2*w2+scat-202
     11.d0)))                                                           scat-203
      go to 27                                                          scat-204
   26 w3=datan(-dsin(thet)/(wv(4,nout)*wv(2,1)/(wv(4,1)*w1)+dcos(thet)))scat-205
   27 if (dabs(w3).lt.1.d-5.or.n.eq.1) go to 39                         scat-206
      do 28 i=1,mtt                                                     scat-207
      ab(1,i,ixx)=0.d0                                                  scat-208
   28 ab(2,i,ixx)=0.d0                                                  scat-209
      w1=dcos(w3)                                                       scat-210
      w2=dsin(w3)                                                       scat-211
      w5=1.d0                                                           scat-212
      w3=dsin(w3*.5d0)                                                  scat-213
      do 29 i=2,n                                                       scat-214
   29 w5=-w5*w3                                                         scat-215
      if (dabs(w5).lt.1.d-30) go to 39                                  scat-216
      w4=0.d0                                                           scat-217
      w6=.5d0*(n-1)                                                     scat-218
      mty=mt3*mt4                                                       scat-219
      x3=-w6                                                            scat-220
c transformation of the amplitude matrix                                scat-221
      do 38 i=1,n                                                       scat-222
      if (i.eq.1) go to 30                                              scat-223
      w3=w4                                                             scat-224
      if (i.ne.2) w3=w3*sqx(i-2)*sqx(n+2-i)                             scat-225
      w4=w5                                                             scat-226
      w5=(2.d0*(x3*w1-w6)*w4/w2-w3)/(sqx(i-1)*sqx(n+1-i))               scat-227
      x3=x3+1.d0                                                        scat-228
   30 x2=0.d0                                                           scat-229
      x5=w5                                                             scat-230
      x4=w6                                                             scat-231
      do 37 j=i,n                                                       scat-232
      if (j.eq.i) go to 31                                              scat-233
      x1=x2                                                             scat-234
      if (j.ne.i+1) x1=x1*sqx(j-i-1)*sqx(n+1-j+i)                       scat-235
      x2=x5                                                             scat-236
      x5=(2.d0*(x3-x4*w1)*x2/w2-x1)/(sqx(j-i)*sqx(n+i-j))               scat-237
      x4=x4-1.d0                                                        scat-238
   31 x=x5                                                              scat-239
      l=1+j-i                                                           scat-240
      m=n+1-i                                                           scat-241
      do 36 k=1,2                                                       scat-242
      do 35 i1=1,mty                                                    scat-243
      if (lxy) go to 33                                                 scat-244
      ixi=ixx+(i1-1)*mt2+l-1                                            scat-245
      ixj=ixy+(i1-1)*mt2+m-1                                            scat-246
      do 32 i4=1,mt1                                                    scat-247
      ab(1,i4,ixi)=ab(1,i4,ixi)+x*ab(1,i4,ixj)                          scat-248
   32 ab(2,i4,ixi)=ab(2,i4,ixi)+x*ab(2,i4,ixj)                          scat-249
      go to 35                                                          scat-250
   33 ixi=mt1*(ixx+(i1-1)*mt2-1)+l                                      scat-251
      ixj=mt1*(ixy+(i1-1)*mt2-1)+m                                      scat-252
      do 34 i4=1,mt2                                                    scat-253
      ab(1,ixi,i4)=ab(1,ixi,i4)+x*ab(1,ixj,i4)                          scat-254
   34 ab(2,ixi,i4)=ab(2,ixi,i4)+x*ab(2,ixj,i4)                          scat-255
   35 continue                                                          scat-256
      if (j.eq.n) go to 37                                              scat-257
      ml=l                                                              scat-258
      l=m                                                               scat-259
      m=ml                                                              scat-260
      if (mod(j+n,2).ne.0) x=-x                                         scat-261
   36 continue                                                          scat-262
   37 continue                                                          scat-263
   38 continue                                                          scat-264
      go to 41                                                          scat-265
   39 do 40 i=1,mtt                                                     scat-266
      ab(1,i,ixx)=ab(1,i,ixy)                                           scat-267
   40 ab(2,i,ixx)=ab(2,i,ixy)                                           scat-268
   41 ix=ix+1                                                           scat-269
      ixy=ixx                                                           scat-270
      ixx=ixy+mt2*mt3*mt4                                               scat-271
      if (lxy) go to 22                                                 scat-272
   42 if (ltt(5)) go to 48                                              scat-273
      x=0.d0                                                            scat-274
c the four do loops                                                     scat-275
      mi1=nco(1,ii)                                                     scat-276
      mp1=nco(2,ii)                                                     scat-277
      n1=nco(3,ii)                                                      scat-278
      l1=nco(4,ii)                                                      scat-279
      mi2=nco(5,ii)                                                     scat-280
      mp2=nco(6,ii)                                                     scat-281
      n2=nco(7,ii)                                                      scat-282
      l2=nco(8,ii)                                                      scat-283
      mi3=nco(9,ii)                                                     scat-284
      mp3=nco(10,ii)                                                    scat-285
      n3=nco(11,ii)                                                     scat-286
      l3=nco(12,ii)                                                     scat-287
      mi4=nco(13,ii)                                                    scat-288
      mp4=nco(14,ii)                                                    scat-289
      n4=nco(15,ii)                                                     scat-290
      l4=nco(16,ii)                                                     scat-291
      do 47 i1=mi1,mp1                                                  scat-292
      j1=i1-n1                                                          scat-293
      x1=coe(10*ii)                                                     scat-294
      if (ltt(1)) x1=coe(10*ii)*coe(i1+l1)                              scat-295
      do 46 i2=mi2,mp2                                                  scat-296
      j2=i2-n2                                                          scat-297
      x2=x1                                                             scat-298
      if (ltt(2)) x2=x1*coe(i2+l2)                                      scat-299
      do 45 i3=mi3,mp3                                                  scat-300
      j3=i3-n3                                                          scat-301
      x3=x2                                                             scat-302
      if (ltt(3)) x3=x2*coe(i3+l3)                                      scat-303
      do 44 i4=mi4,mp4                                                  scat-304
      j4=i4-n4                                                          scat-305
      x4=x3                                                             scat-306
      iij=i4+mt2*(j2-1+mt4*(j1-1+mt3*(ix-1)))                           scat-307
      iii=j4+mt2*(i2-1+mt4*(i1-1+mt3*(ix-1)))                           scat-308
      if (ltt(4)) x4=x3*coe(i4+l4)                                      scat-309
      if (ltt(6)) go to 43                                              scat-310
      x=x+(ab(1,i3,iij)*ab(1,j3,iii)+ab(2,i3,iij)*ab(2,j3,iii))*x4      scat-311
      go to 44                                                          scat-312
   43 x=x+(ab(2,i3,iij)*ab(1,j3,iii)-ab(1,i3,iij)*ab(2,j3,iii))*x4      scat-313
   44 continue                                                          scat-314
   45 continue                                                          scat-315
   46 continue                                                          scat-316
   47 continue                                                          scat-317
      go to 49                                                          scat-318
   48 x=coe(10*ii)*dz                                                   scat-319
   49 ex(jex)=ex(jex)+x                                                 scat-320
      ex(jex)=ex(jex)/dz                                                scat-321
   50 continue                                                          scat-322
      return                                                            scat-323
      end                                                               scat-324
c 31/10/85  ibm and cdc version                                 ecis88  gral-000
      subroutine gral(tgr,grr,frr,mteta,mf,id1,lt1,lt2)                 gral-001
c plots of cross-section and polarisations with or without exper. data  gral-002
c input variables: tgr(i):    angles for i=1,mteta                      gral-003
c                  grr(j,i):  calc. values for j=1,id1 and i=1,mteta    gral-004
c                  frr(i):    exper. values for i=1,mteta               gral-005
c                  mteta:     number of angles                          gral-006
c                  mf:        description of data    see obse           gral-007
c                  id1:       number of different polarisations         gral-008
c                  lt1:       .true. for polarisation,                  gral-009
c                             .false. for cross section                 gral-010
c                  lt2:       .true. if there are no experimental data  gral-011
c mf(i,j) is a title for i=5,9                                          gral-012
c mf(2,j) is the number of power of 10 in a line for cross sections     gral-013
c  and must be 1 to plot a polarisation (always between -1 and 1)       gral-014
c***********************************************************************gral-015
      logical lt1,lt2                                                   gral-016
      dimension tgr(1),grr(id1,1),mf(9,1),frr(1),vgr(112),gra(17)       gral-017
      data  gra /1h+,1h*,1h,,1h:,1h-,1h1,1h2,1h3,1h4,1h5,1h6,1h7,1h8,1h9gral-018
     1,1h0,1h ,1h./                                                     gral-019
      if (lt1) go to 14                                                 gral-020
c cross sections                                                        gral-021
      if ((mf(2,1).le.0).or.(mf(2,1).gt.50)) return                     gral-022
      na2=100/mf(2,1)                                                   gral-023
      aa2=na2                                                           gral-024
      write (6,1000)                                                    gral-025
      write (6,1001) gra(1),(mf(j,1),j=5,9)                             gral-026
      if (.not.lt2) write (6,1007)                                      gral-027
      aa3=aa2*((mf(2,1)+1)/2)                                           gral-028
      aa1=aa2/alog(10.)                                                 gral-029
      na1=101-mf(2,1)*na2                                               gral-030
      a5=101.5                                                          gral-031
      do 1 i=1,112                                                      gral-032
    1 vgr(i)=gra(16)                                                    gral-033
      do 2 i=na1,112,na2                                                gral-034
    2 vgr(i)=gra(6)                                                     gral-035
      write (6,1002) vgr                                                gral-036
      do 3 i=1,112                                                      gral-037
    3 vgr(i)=gra(17)                                                    gral-038
      do 4 i=na1,112,na2                                                gral-039
    4 vgr(i)=gra(2)                                                     gral-040
      write (6,1002) vgr                                                gral-041
      do 11 i=1,mteta                                                   gral-042
      do 5 j=2,111                                                      gral-043
    5 vgr(j)=gra(16)                                                    gral-044
      do 6 j=na1,111,na2                                                gral-045
    6 vgr(j)=gra(17)                                                    gral-046
      a4=aa1*alog(grr(1,i))+a5                                          gral-047
    7 if (a4.gt.2.) go to 8                                             gral-048
      a4=a4+aa3                                                         gral-049
      a5=a5+aa3                                                         gral-050
      write (6,1003)                                                    gral-051
      go to 7                                                           gral-052
    8 if (a4.lt.112.) go to 9                                           gral-053
      a4=a4-aa3                                                         gral-054
      a5=a5-aa3                                                         gral-055
      write (6,1004)                                                    gral-056
      go to 8                                                           gral-057
    9 l=a4                                                              gral-058
      vgr(l)=gra(1)                                                     gral-059
      if (lt2) go to 10                                                 gral-060
c experimental data                                                     gral-061
      l=aa1*alog(frr(i))+a5                                             gral-062
      if (l.gt.1.and.l.lt.112) vgr(l)=gra(2)                            gral-063
   10 write (6,1005) tgr(i),vgr                                         gral-064
   11 continue                                                          gral-065
      do 12 i=1,112                                                     gral-066
   12 vgr(i)=gra(17)                                                    gral-067
      do 13 i=na1,112,na2                                               gral-068
   13 vgr(i)=gra(2)                                                     gral-069
      write (6,1002) vgr                                                gral-070
      return                                                            gral-071
c polarisation                                                          gral-072
   14 if (lt2) go to 15                                                 gral-073
      write (6,1000)                                                    gral-074
      write (6,1001) gra(1),(mf(j,1),j=5,9)                             gral-075
      write (6,1007)                                                    gral-076
      go to 17                                                          gral-077
   15 nk=0                                                              gral-078
      do 16 k=1,id1                                                     gral-079
      if (mf(2,k).ne.1) go to 16                                        gral-080
      kn=mod(nk,15)+1                                                   gral-081
      nk=nk+1                                                           gral-082
      if (nk.eq.1) write (6,1000)                                       gral-083
      write (6,1001) gra(kn),(mf(j,k),j=5,9)                            gral-084
   16 continue                                                          gral-085
      if (nk.eq.0) return                                               gral-086
   17 write (6,1006)                                                    gral-087
      do 18 i=1,112                                                     gral-088
   18 vgr(i)=gra(16)                                                    gral-089
      do 19 i=1,103                                                     gral-090
   19 vgr(i)=gra(17)                                                    gral-091
      do 20 i=2,102,10                                                  gral-092
   20 vgr(i)=gra(2)                                                     gral-093
      write (6,1002) vgr                                                gral-094
      do 24 i=1,mteta                                                   gral-095
      do 21 m=2,102                                                     gral-096
   21 vgr(m)=gra(16)                                                    gral-097
      vgr(52)=gra(17)                                                   gral-098
      nk=0                                                              gral-099
      do 22 k=1,id1                                                     gral-100
      if (mf(2,k).ne.1) go to 22                                        gral-101
      nk=mod(nk,15)+1                                                   gral-102
      m=50.*grr(k,i)+52.5                                               gral-103
      if (m.gt.1.and.m.le.102) vgr(m)=gra(nk)                           gral-104
   22 continue                                                          gral-105
      if (lt2) go to 23                                                 gral-106
      m=50.*frr(i)+52.5                                                 gral-107
      if (m.gt.1.and.m.le.102) vgr(m)=gra(2)                            gral-108
   23 write (6,1005) tgr(i),vgr                                         gral-109
   24 continue                                                          gral-110
      do 25 i=1,103                                                     gral-111
   25 vgr(i)=gra(17)                                                    gral-112
      do 26 i=2,102,10                                                  gral-113
   26 vgr(i)=gra(2)                                                     gral-114
      write (6,1002) vgr                                                gral-115
      return                                                            gral-116
 1000 format (1h1)                                                      gral-117
 1001 format (45x,a1,4x,5a4/)                                           gral-118
 1002 format (7x,112a1)                                                 gral-119
 1003 format (40(3h -*))                                                gral-120
 1004 format (40(3h *-))                                                gral-121
 1005 format (f7.2,112a1)                                               gral-122
 1006 format (//6x,3h -1,7x,4h -.8,6x,4h -.6,6x,4h -.4,6x,4h -.2,7x,2h 0gral-123
     1,8x,3h .2,7x,3h .4,7x,3h .6,7x,3h .8,7x,2h 1)                     gral-124
 1007 format (45x,21h+    calculated value/45x,23h*    experimental valugral-125
     1e/)                                                               gral-126
      end                                                               gral-127
c 29/10/85  ibm version                                         ecis88  emro-000
      subroutine emro(a,f1,f2,x2,x3,xc,nf,res,nx)                       emro-001
c  calculate                                                            emro-002
c            a          a+1                     a+n-1                   emro-003
c           r (theta), r (theta) ............. r (theta)                emro-004
c            f1,f2      f1,f2                   f1,f2                   emro-005
c in the array res                                                      emro-006
c it uses the recurrence relation obtained from                         emro-007
c                      j                   j'                           emro-008
c        cos(theta) * r (theta)  = sum  r (theta)                       emro-009
c                      f1,f2       on j'   f1,f2                        emro-010
c it uses the table xc(i)=dsqrt(i) for i=1 to nf                        emro-011
c theta is given by x2=cos(0.5*theta) and x3=sin(0.5*theta)             emro-012
c***********************************************************************emro-013
      implicit real*8 (o-z)                                             emro-014
      dimension res(1),xc(1)                                            emro-015
      nt=nx                                                             emro-016
      nr=1                                                              emro-017
      aj=a                                                              emro-018
      x1=x2*x2-x3*x3                                                    emro-019
      m1=abs(f1+f2)+0.1                                                 emro-020
      m2=abs(f1-f2)+0.1                                                 emro-021
      mj=m1+m2                                                          emro-022
    1 n=2*aj+.1                                                         emro-023
      if (mj.gt.n) go to 9                                              emro-024
      s1=0.d0                                                           emro-025
      s2=0.d0                                                           emro-026
      s3=1.d0                                                           emro-027
      if (mj.eq.0) go to 13                                             emro-028
c the magnetic quantum numbers are not both zeros                       emro-029
      nlim=nf+nr-(mj+n)/2                                               emro-030
      if (nlim.ge.nt) go to 3                                           emro-031
      write (6,1000)                                                    emro-032
      do 2 i=nlim,nt                                                    emro-033
    2 res(i)=0.d0                                                       emro-034
      nt=nlim-1                                                         emro-035
    3 if (m1.eq.m2) go to 10                                            emro-036
c no magnetic quantum number is zero                                    emro-037
      if (m2.eq.0) go to 5                                              emro-038
      do 4 i=1,m2                                                       emro-039
    4 s3=s3*x3*xc(m1+i)/xc(i)                                           emro-040
    5 if (m1.eq.0) go to 7                                              emro-041
      do 6 m=1,m1                                                       emro-042
    6 s3=s3*x2                                                          emro-043
    7 if ((f1.gt.f2).and.(2*(m2/2).ne.m2)) s3=-s3                       emro-044
      kx=1                                                              emro-045
      sj=0.5d0*mj                                                       emro-046
      ai=sj                                                             emro-047
      n4=0                                                              emro-048
      sl=m1-m2                                                          emro-049
      sl=sl/(2.d0*sj+2.d0)                                              emro-050
    8 if (aj.le.(ai+.1)) go to 15                                       emro-051
c recurrence                                                            emro-052
      ai=ai+1.                                                          emro-053
      sj=sj+1.d0                                                        emro-054
      s2=s3                                                             emro-055
      m1=m1+1                                                           emro-056
      m2=m2+1                                                           emro-057
      mj=mj+1                                                           emro-058
      n4=n4+1                                                           emro-059
      y2=xc(m1)*xc(m2)*xc(mj)*xc(n4)                                    emro-060
      s3=(2.d0*sj-1.d0)*sj*((x1-sl)*s2-s1)/y2                           emro-061
      s1=y2*s2/((2.d0*sj+1.d0)*sj)                                      emro-062
      sl=sl*(sj-1.d0)/(sj+1.d0)                                         emro-063
      go to 8                                                           emro-064
    9 res(nr)=0.d0                                                      emro-065
      nr=nr+1                                                           emro-066
      if (nr.gt.nt) go to 16                                            emro-067
      aj=aj+1.                                                          emro-068
      go to 1                                                           emro-069
c a magnetic quantum number is zero                                     emro-070
   10 do 11 i=1,m1                                                      emro-071
   11 s3=s3*x3*x2*xc(m1+i)/xc(i)                                        emro-072
      kx=2                                                              emro-073
      if (f1.gt.f2.and.(2*(m2/2).ne.m2)) s3=-s3                         emro-074
      n4=0                                                              emro-075
      sj=m1                                                             emro-076
      ai=sj                                                             emro-077
   12 if (aj.le.(ai+.1)) go to 15                                       emro-078
c recurrence                                                            emro-079
      ai=ai+1.                                                          emro-080
      sj=sj+1.d0                                                        emro-081
      s2=s3                                                             emro-082
      mj=mj+1                                                           emro-083
      n4=n4+1                                                           emro-084
      y2=xc(mj)*xc(n4)                                                  emro-085
      s3=((2.d0*sj-1.d0)*x1*s2-s1)/y2                                   emro-086
      s1=y2*s2                                                          emro-087
      go to 12                                                          emro-088
c the magnetic quantum numbers are both zeros                           emro-089
   13 n4=0                                                              emro-090
      kx=3                                                              emro-091
      sj=0.d0                                                           emro-092
      ai=0.                                                             emro-093
   14 if (aj.le.(ai+.1)) go to 15                                       emro-094
c recurrence                                                            emro-095
      ai=ai+1.                                                          emro-096
      sj=sj+1.d0                                                        emro-097
      s2=s3                                                             emro-098
      s3=((2.d0*sj-1.d0)*x1*s2-s1)/sj                                   emro-099
      s1=s2*sj                                                          emro-100
      go to 14                                                          emro-101
c storage                                                               emro-102
   15 res(nr)=s3                                                        emro-103
      nr=nr+1                                                           emro-104
      if (nr.gt.nt) go to 16                                            emro-105
      aj=aj+1.                                                          emro-106
      go to (8,12,14),kx                                                emro-107
   16 return                                                            emro-108
 1000 format (30h square root too large in emro)                        emro-109
      end                                                               emro-110
c 30/11/95  ibm version   cdc with 'c' to double precision      ecis95  vari-000
      subroutine vari(kf,ke,index,nrec,val,nval,npp,beta,nbta,nbet,var,nvari-001
     1nva,ele,nel,scn,res,ntot,fm,ncolr,iw,w,x,wv,ipp,ivz,lo)           vari-002
c it assigns the values of the variable parameters and                  vari-003
c  prints the output during the search.                                 vari-004
c  kf=1 before the call to the search subroutines                       vari-005
c    at the first call(ke=0) defines the variables in search            vari-006
c    at any call,print chi2 and variables                               vari-007
c  kf=0 after the call to the search subroutines                        vari-008
c    at any call sets parameters to their value for next evaluation     vari-009
c    at the last call(ke/=0) print errors and parameters                vari-010
c input values: ke:        return code of search                        vari-011
c               index,nrec:indications on parameters in search, number  vari-012
c               val,npp:   optical model parameters and their number    vari-013
c               nval:      in equivalence by call with val              vari-014
c               beta,nbta,nbet: deformations and their number           vari-015
c               var,nnva:  nuclear parameters and their number          vari-016
c               ele,nel:   nuclear matrix elements and their number     vari-017
c               scn:       level density description for comp. nucleus  vari-018
c               res,ntot:  difference between exp. and calc. values and vari-019
c                               their number                            vari-020
c               fm,ncolr:  descr. of exp. distributions and their numbervari-021
c               iw,w:      integer and floating points results of searchvari-022
c                                  (see fite)                           vari-023
c               x:         variables in search                          vari-024
c               wv,ipp:    masses, spins, ....   see calx               vari-025
c               ivz:       table of form factors  (see redm)            vari-026
c               lo:        logical controls                             vari-027
c by common /ncomp/ ncont: number of continuum for compound nucleus     vari-028
c                   ncons: number of level densities needed             vari-029
c                   az(i): spin orbit parametrisation for i-1 to 6      vari-030
c                          hauser feshbach parameters for j=7 to 9      vari-031
c                          giant dipole resonance for i=10 to 14        vari-032
c           /dblpr/ : current and minimum chi-square                    vari-033
c                                                                       vari-034
c parameters in search are given by index(i)                            vari-035
c   positive value: parameter defined by index(i)                       vari-036
c   negative value -l: parameters defined by index(j) for j=l+1 to      vari-037
c     j=l+index(l) are defined as the same variable                     vari-038
c      1-1000      optical model,folding parameters                     vari-039
c   1001-2000      deformations for a given potential   - lo(211)=.true.vari-040
c   2001-3000      deformations for a given multipole   - lo(211)=.true.vari-041
c   3001-4000      individual deformation               - lo(211)=.true.vari-042
c   4001-5000      nuclear model parameter              - lo(212)=.true.vari-043
c   5001-6000      nuclear matrix element               - lo(213)=.true.vari-044
c   6001-7000      spin-orbit and c. n. parametrisation - lo(214)=.true.vari-045
c  10001-99999     external optical model (parameters above 1000)       vari-046
c it stops the calculation for an index of parameter out of range       vari-047
c***********************************************************************vari-048
      logical lo(250)                                                   vari-049
      double precision chi2,chi2m,wv,cm,ck,chb,cmb,ccz,xe,xm,xn         vari-050
      dimension index(1),ele(4,1),var(1),beta(10,1),iw(4),fm(9,1),val(34vari-051
     1,1),ipp(1),r0(8),nval(200),x(1),res(1),w(4),nbta(10,1),wv(11,1),itvari-052
     2y(9),itz(5),ivz(7,1),scn(1)                                       vari-053
      common /ncomp/ nsp(7),acn(2),ncons,nco(5),az(16)                  vari-054
      common /dblpr/ chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn              vari-055
      data ity /6,6,6,6,7,9,6,7,9/                                      vari-056
      data itz /0,2,10,22,12/                                           vari-057
      nvat=34*npp                                                       vari-058
c transfer between variables and parameters                             vari-059
      if (kf.eq.1.and.ke.ne.0) go to 29                                 vari-060
      do 28 i=1,nrec                                                    vari-061
      j=index(i)                                                        vari-062
      jj=iabs(j)                                                        vari-063
      if (j.ne.jj) go to 1                                              vari-064
      j1=i                                                              vari-065
      j2=i                                                              vari-066
      go to 2                                                           vari-067
    1 j1=jj+1                                                           vari-068
      j2=j1+index(jj)-1                                                 vari-069
    2 do 27 k=j1,j2                                                     vari-070
      j=index(k)                                                        vari-071
      if ((j.gt.1000).and.(j.le.10000)) go to 7                         vari-072
c optical model and folding parameters                                  vari-073
      if (j.gt.10000) j=j-9000                                          vari-074
      if (lo(7)) go to 3                                                vari-075
      if (j.gt.nvat.or.mod(j,34).eq.19) go to 59                        vari-076
      go to 5                                                           vari-077
c external optical parameters                                           vari-078
    3 i1=nval(1)-2                                                      vari-079
      do 4 l=2,i1,2                                                     vari-080
      if (j.ge.nval(l).and.j.le.nval(l+1)) go to 5                      vari-081
    4 continue                                                          vari-082
      go to 59                                                          vari-083
    5 if (kf.ne.0) go to 6                                              vari-084
      if (k.eq.j1) rap=x(i)/val(j,1)                                    vari-085
      val(j,1)=rap*val(j,1)                                             vari-086
      go to 27                                                          vari-087
    6 x(i)=val(j,1)                                                     vari-088
      go to 28                                                          vari-089
    7 j=j-1000                                                          vari-090
      if (j.gt.1000) go to 12                                           vari-091
      if (j.gt.6) go to 59                                              vari-092
c  deformations for a given potential                                   vari-093
      lo(211)=.true.                                                    vari-094
      do 8 k1=1,nbet                                                    vari-095
      if (lo(1).and.lo(3).and.nbta(10,k1).ne.0) go to 8                 vari-096
      if (beta(j,k1).ne.0.) go to 9                                     vari-097
    8 continue                                                          vari-098
      write (6,1000) i,index(k),j                                       vari-099
      go to 60                                                          vari-100
    9 if (kf.eq.0) go to 10                                             vari-101
      x(i)=beta(j,k1)                                                   vari-102
      go to 28                                                          vari-103
   10 if (k.eq.j1) rap=x(i)/beta(j,k1)                                  vari-104
      do 11 l=k1,nbet                                                   vari-105
      if (lo(1).and.lo(3).and.nbta(10,k1).ne.0) go to 11                vari-106
      beta(j,l)=beta(j,l)*rap                                           vari-107
   11 continue                                                          vari-108
      go to 27                                                          vari-109
   12 j=j-1000                                                          vari-110
      if (j.gt.1000) go to 17                                           vari-111
c deformations for a given multipole                                    vari-112
      if (j.gt.nbet) go to 59                                           vari-113
      lo(211)=.true.                                                    vari-114
      do 13 k1=1,8                                                      vari-115
      if (beta(k1,j).ne.0.) go to 14                                    vari-116
   13 continue                                                          vari-117
      write (6,1001) i,index(k),j                                       vari-118
      go to 60                                                          vari-119
   14 if (kf.eq.0) go to 15                                             vari-120
      x(i)=beta(k1,j)                                                   vari-121
      go to 28                                                          vari-122
   15 if (k.eq.j1) rap=x(i)/beta(k1,j)                                  vari-123
      do 16 l=k1,8                                                      vari-124
   16 beta(l,j)=beta(l,j)*rap                                           vari-125
      go to 27                                                          vari-126
   17 j=j-1000                                                          vari-127
      if (j.gt.1000) go to 19                                           vari-128
c individual deformations                                               vari-129
      if ((j.gt.10*nbet).or.(mod(j,10).gt.8)) go to 59                  vari-130
      lo(211)=.true.                                                    vari-131
      if (kf.ne.0) go to 18                                             vari-132
      if (k.eq.j1) rap=x(i)/beta(j,1)                                   vari-133
      beta(j,1)=rap*beta(j,1)                                           vari-134
      go to 27                                                          vari-135
   18 x(i)=beta(j,1)                                                    vari-136
      go to 28                                                          vari-137
   19 j=j-1000                                                          vari-138
      if (j.gt.1000) go to 21                                           vari-139
c  nuclear parameters                                                   vari-140
      if (j.gt.nnva) go to 59                                           vari-141
      lo(212)=.true.                                                    vari-142
      if (kf.ne.0) go to 20                                             vari-143
      if (k.eq.j1) rap=x(i)/var(j)                                      vari-144
      var(j)=rap*var(j)                                                 vari-145
      go to 27                                                          vari-146
   20 x(i)=var(j)                                                       vari-147
      go to 28                                                          vari-148
   21 j=j-1000                                                          vari-149
      if (j.gt.1000) go to 23                                           vari-150
c  nuclear matrix elements                                              vari-151
      if (j.gt.nel) go to 59                                            vari-152
      lo(213)=.true.                                                    vari-153
      if (kf.ne.0) go to 22                                             vari-154
      if (k.eq.j1) rap=x(i)/ele(4,j)                                    vari-155
      ele(4,j)=rap*ele(4,j)                                             vari-156
      go to 27                                                          vari-157
   22 x(i)=ele(4,j)                                                     vari-158
      go to 28                                                          vari-159
   23 j=j-1000                                                          vari-160
c  spin-orbit and h. f. parametrisation                                 vari-161
      if (j.gt.14+6*ncons) go to 59                                     vari-162
      if (lo(181).and.j.gt.6) go to 59                                  vari-163
      lo(214)=.true.                                                    vari-164
      if (j.gt.14) go to 25                                             vari-165
      if ((lo(82).or.lo(186)).and.j.gt.9) go to 59                      vari-166
      if (lo(182).and.(j.eq.7.or.j.eq.9).and.lo(87)) go to 59           vari-167
      if (lo(182).and.(j.eq.8.or.j.eq.9).and.lo(187)) go to 59          vari-168
      if (kf.ne.0) go to 24                                             vari-169
      if (k.eq.j1) rap=x(i)/az(j)                                       vari-170
      az(j)=rap*az(j)                                                   vari-171
      go to 27                                                          vari-172
   24 x(i)=az(j)                                                        vari-173
      go to 28                                                          vari-174
   25 if (kf.eq.0) go to 26                                             vari-175
      x(i)=scn(j-14)                                                    vari-176
      go to 28                                                          vari-177
   26 if (k.eq.j1) rap=x(i)/scn(j-14)                                   vari-178
      scn(j-14)=rap*scn(j-14)                                           vari-179
   27 continue                                                          vari-180
   28 continue                                                          vari-181
   29 if (kf.eq.0) go to 31                                             vari-182
      write (6,1002) iw(3),iw(2),chi2,(w(i),i=1,3)                      vari-183
      write (6,1003)                                                    vari-184
      do 30 i=1,ncolr                                                   vari-185
   30 write (6,1004) i,(fm(j,i),j=5,9)                                  vari-186
      write (6,1005) (i,x(i),i=1,nrec)                                  vari-187
      if (lo(178)) write (6,1006) (i,res(i),i=1,ntot)                   vari-188
      return                                                            vari-189
   31 if (ke.eq.1) return                                               vari-190
      write (6,1007) iw(3),iw(2),chi2,ke,w(1)                           vari-191
      if (ke*(ke-3).ne.0.or.w(4).le.0.) go to 33                        vari-192
      write (6,1008) iw(4),w(3),(w(3+i),i=1,nrec)                       vari-193
      write (6,1009) (w(3+nrec+i),i=1,nrec)                             vari-194
      write (6,1010)                                                    vari-195
      l=3+2*nrec                                                        vari-196
      do 32 i=1,nrec                                                    vari-197
      k=l+1                                                             vari-198
      l=l+i                                                             vari-199
   32 write (6,1011) (w(j),j=k,l)                                       vari-200
      go to 34                                                          vari-201
   33 write (6,1012)                                                    vari-202
   34 if (ke.eq.0) write (6,1013)                                       vari-203
      if (ke.eq.2) write (6,1014)                                       vari-204
      if (ke.eq.3) write (6,1015)                                       vari-205
      if (ke.eq.4) write (6,1016)                                       vari-206
      if (ke.eq.5) write (6,1017) iw(4)                                 vari-207
      if (ke.eq.6) write (6,1018) iw(3),iw(4)                           vari-208
      if (ke.eq.7) write (6,1019) ntot,nrec                             vari-209
c end of the search                                                     vari-210
      lo(215)=.false.                                                   vari-211
      lo(218)=.true.                                                    vari-212
      if (lo(76)) go to 36                                              vari-213
      do 35 i=51,65                                                     vari-214
      lo(i)=lo(i+180)                                                   vari-215
   35 lo(i+100)=.not.lo(i)                                              vari-216
   36 lo(220)=lo(153).and.lo(155).and.lo(156).and.lo(157).and.lo(158).anvari-217
     1d.lo(162).and.lo(164)                                             vari-218
      if (lo(41)) lo(220)=lo(220).and.lo(165)                           vari-219
      lo(219)=lo(220).and.lo(151).and.lo(164).and.lo(165)               vari-220
      lo(220)=chi2.eq.chi2m.and.lo(220)                                 vari-221
c output of final parameters                                            vari-222
      write (6,1020) (lo(j),j=1,100)                                    vari-223
      if (lo(7)) go to 39                                               vari-224
      do 38 j=1,npp                                                     vari-225
      ij=ipp(j)                                                         vari-226
      am3=wv(2,ij)**.33333333333333e0                                   vari-227
      if (lo(16)) am3=am3+wv(1,ij)**.33333333333333e0                   vari-228
      write (6,1021) j,am3                                              vari-229
      do 37 i=1,8                                                       vari-230
   37 r0(i)=val(3*i-1,j)/am3                                            vari-231
      write (6,1022) (val(3*i-2,j),val(3*i-1,j),r0(i),val(3*i,j),i=1,8),vari-232
     1val(25,j)                                                         vari-233
      if (lo(17)) write (6,1023) (val(i,j),i=26,34)                     vari-234
   38 continue                                                          vari-235
      go to 50                                                          vari-236
   39 nvma=nval(1)                                                      vari-237
      write (6,1024)                                                    vari-238
   40 if (nvma.ge.nval(2)) go to 49                                     vari-239
      i1=nval(nvma)                                                     vari-240
      iv=nval(nvma+1)                                                   vari-241
      if (iv.eq.16) go to 48                                            vari-242
      it1=mod(i1-1,8)+1                                                 vari-243
      j1=(i1-1)/8                                                       vari-244
      if (iv.ge.0) go to 41                                             vari-245
      nvma=nvma+6                                                       vari-246
      nvmb=nvma+1-2*iv                                                  vari-247
      write (6,1025) it1,j1,nvma,nvmb,(val(i,1),i=nvma,nvmb)            vari-248
      go to 48                                                          vari-249
   41 nb=nval(nvma+5)                                                   vari-250
      nst=nval(nvma+4)                                                  vari-251
      nvma=nvma+ity(iv)                                                 vari-252
      if (iv.ne.9) go to 42                                             vari-253
      nvmb=nvma+nb+1                                                    vari-254
      write (6,1026) it1,j1,nvma,nvmb,(val(i,1),i=nvma,nvmb)            vari-255
      go to 48                                                          vari-256
   42 nvmb=nvma                                                         vari-257
      if (iv.gt.6) go to 47                                             vari-258
      nvmb=nvmb+3                                                       vari-259
      if (it1.gt.6) nvmb=nvmb+1                                         vari-260
      write (6,1027) it1,j1,iv,nvma,nvmb,(val(i,1),i=nvma,nvmb)         vari-261
      if (nst.gt.0) go to 44                                            vari-262
      k=iabs(nst)                                                       vari-263
      ex=wv(2,k)**.33333333333333e0                                     vari-264
      ey=ex                                                             vari-265
      if (lo(16)) ex=ex+wv(1,k)**.33333333333333e0                      vari-266
      ey=ey/ex                                                          vari-267
      ex=val(nvma+1,1)/ex                                               vari-268
      ez=val(nvma,1)                                                    vari-269
      if (lo(116).or.j1.le.npp) go to 43                                vari-270
      ityz=iv                                                           vari-271
      if (ityz.ge.5) ityz=ityz-4                                        vari-272
      ityw=1                                                            vari-273
      if (it1.gt.6) ityw=ityw*ivz(7,j1-npp)                             vari-274
      if (lo(6)) ityw=ityw-1                                            vari-275
      if (ityz.gt.1) ez=ez/ey**((ityz-1)*ityw)                          vari-276
   43 write (6,1028) ez,ex                                              vari-277
   44 if ((iv.ne.5).and.(iv.ne.6)) go to 48                             vari-278
      nvma=nvmb+1                                                       vari-279
      nvmb=nvmb+nb                                                      vari-280
      write (6,1029) nvma,nvmb,(val(i,1),i=nvma,nvmb)                   vari-281
      if (nst.gt.0) go to 48                                            vari-282
      write (6,1030)                                                    vari-283
      nmb=0                                                             vari-284
   45 nvmc=min0(nvma+7,nvmb)                                            vari-285
      nma=nvma                                                          vari-286
      do 46 i=nvma,nvmb                                                 vari-287
      nmb=nmb+1                                                         vari-288
      j=i-nma                                                           vari-289
      if (it1.lt.7) j=0                                                 vari-290
      if (lo(106)) j=j+1                                                vari-291
   46 r0(nmb)=val(i,1)/ey**j                                            vari-292
      write (6,1011) (r0(i),i=1,nmb)                                    vari-293
      nvma=nvma+8                                                       vari-294
      if (nvma.le.nvmb) go to 45                                        vari-295
      go to 48                                                          vari-296
   47 nb=nval(nvmb-1)                                                   vari-297
      nvma=nvmb+5                                                       vari-298
      if (nb.gt.1) nvma=nvma+4                                          vari-299
      if (iv.eq.8) nb=nb+2                                              vari-300
      nvmb=nvma+itz(nb)                                                 vari-301
      write (6,1027) it1,j1,iv,nvma,nvmb,(val(i,1),i=nvma,nvmb)         vari-302
   48 nvma=nval(2*i1-13)+1                                              vari-303
      go to 40                                                          vari-304
   49 nvmb=nval(3)                                                      vari-305
      if (nvma.lt.nvmb) write (6,1031) (val(i,1),i=nvma,nvmb)           vari-306
   50 if (.not.lo(211)) go to 58                                        vari-307
      write (6,1032) (i,nbta(9,i),nbta(10,i),(beta(j,i),j=1,8),i=1,nbet)vari-308
      if (lo(116)) go to 58                                             vari-309
      dm=wv(2,1)**.33333333333333e0/(wv(1,1)**.33333333333333e0+wv(2,1)*vari-310
     1*.33333333333333e0)                                               vari-311
      write (6,1033)                                                    vari-312
      do 57 i=1,nbet                                                    vari-313
      k1=0                                                              vari-314
      k2=0                                                              vari-315
      if (lo(3)) go to 52                                               vari-316
   51 k1=1                                                              vari-317
      k2=nbta(9,i)                                                      vari-318
      go to 54                                                          vari-319
   52 if (lo(1)) go to 53                                               vari-320
      k1=i-1                                                            vari-321
      k2=k1*nbta(9,i)                                                   vari-322
      go to 54                                                          vari-323
   53 if (nbta(10,i).eq.0) go to 51                                     vari-324
   54 if (lo(106)) go to 55                                             vari-325
      k2=k2-k1                                                          vari-326
      k1=0                                                              vari-327
   55 do 56 j=1,6                                                       vari-328
   56 r0(j)=beta(j,i)/dm**k1                                            vari-329
      r0(7)=beta(7,i)/dm**k2                                            vari-330
      r0(8)=beta(8,i)/dm**k2                                            vari-331
   57 write (6,1034) i,nbta(9,i),nbta(10,i),r0                          vari-332
   58 if (lo(212)) write (6,1035) (var(i),i=1,nnva)                     vari-333
      if (lo(213)) write (6,1036) (ele(4,i),i=1,nel)                    vari-334
      if (lo(214)) write (6,1037) (az(i),i=1,16)                        vari-335
      return                                                            vari-336
   59 write (6,1038) i,index(k),j                                       vari-337
   60 write (6,1039)                                                    vari-338
      stop                                                              vari-339
 1000 format (13h the variable,i3,24h cannot be used because ,i5,49h  isvari-340
     1 a variation of the deformations of potential,i3,15h which are zervari-341
     1o)                                                                vari-342
 1001 format (13h the variable,i3,24h cannot be used because ,i5,38h  isvari-343
     1 a variation for a given multipole,i3,18h and they are zero)      vari-344
 1002 format (/4h run,i4,8h   max =,i4,15h   ***** chi2 =,d18.10,6h ****vari-345
     1*,5x,6hw(1) =,f10.2,5x,6hw(2) =,f5.2,5x,6hw(3) =,f10.5)           vari-346
 1003 format (/21x,6hweight,12x,10hexp. norm.,10x,10herr. norm.,10x,11hcvari-347
     1alc. norm.,12x,4hchi2)                                            vari-348
 1004 format (5x,i5,1p,5e20.6)                                          vari-349
 1005 format (/14h *** variables//(6(1x,i3,1p,e16.6)))                  vari-350
 1006 format (/14h *** functions//(6(1x,i3,1p,e16.6)))                  vari-351
 1007 format (/4h run,i4,8h   max =,i4,15h   ***** chi2 =,d18.10,6h ****vari-352
     1*,5x,4hke =,i2,5x,6hw(1) =,f12.4)                                 vari-353
 1008 format (//66h standard errors (variance at best fit equal to degrevari-354
     1e of freedom:,i6,23h.renormalisation factor,d15.6,2h )/(1p,8d15.6)vari-355
     2)                                                                 vari-356
 1009 format (/49h error enhancements (multi/single variable error)/(1p,vari-357
     18d15.6))                                                          vari-358
 1010 format (/25h error correlation matrix)                            vari-359
 1011 format (1p,8e15.6)                                                vari-360
 1012 format (//25h no information on errors)                           vari-361
 1013 format (//28h search ended without errors)                        vari-362
 1014 format (//27h search interrupted by user)                         vari-363
 1015 format (//38h search ended by number of evaluations)              vari-364
 1016 format (//33h search ended for rounding errors)                   vari-365
 1017 format (//65h search ended because the functions do not depend on vari-366
     1the variable,i6)                                                  vari-367
 1018 format (//31h search ended because variables,2i6,33h are useless ivari-368
     1n preparatory calls)                                              vari-369
 1019 format (//46h search ended because the number of parameters,i4,34hvari-370
     1 is larger than the number of data,i4)                            vari-371
 1020 format (1h1/30h ******* final results *******//29h **** first contvari-372
     1rol card ****,2x,2h1 ,9(2h 1),3h 2 ,9(2h 2),3h 3 ,9(2h 3),3h 4 ,9(vari-373
     22h 4),2h 5/11x,5(21h  1 2 3 4 5 6 7 8 9 0)/11x,5(1x,10l2)//29h ***vari-374
     3 second control card ****,2x,2h1 ,9(2h 1),3h 2 ,9(2h 2),3h 3 ,9(2hvari-375
     4 3),3h 4 ,9(2h 4),2h 5/11x,5(21h  1 2 3 4 5 6 7 8 9 0)/11x,5(1x,10vari-376
     5l2)/)                                                             vari-377
 1021 format (/23h optical potentials  **,i3,38h **     reduced radius mvari-378
     1ultiplied by  ,e15.6/)                                            vari-379
 1022 format (22h volume real potential,11x,5hdepth,f12.6,12h mev  radiuvari-380
     1s,f9.6,15h fermi (reduced,f9.6,14h)  diffuseness,f9.6,6h fermi/27hvari-381
     2 volume imaginary potential,6x,5hdepth,f12.6,12h mev  radius,f9.6,vari-382
     315h fermi (reduced,f9.6,14h)  diffuseness,f9.6,6h fermi/23h surfacvari-383
     4e real potential,10x,5hdepth,f12.6,12h mev  radius,f9.6,15h fermi vari-384
     5(reduced,f9.6,14h)  diffuseness,f9.6,6h fermi/28h surface imaginarvari-385
     6y potential,5x,5hdepth,f12.6,12h mev  radius,f9.6,15h fermi (reducvari-386
     7ed,f9.6,14h)  diffuseness,f9.6,6h fermi/26h real spin-orbit potentvari-387
     8ial,7x,5hdepth,f12.6,12h mev  radius,f9.6,15h fermi (reduced,f9.6,vari-388
     914h)  diffuseness,f9.6,6h fermi/38h imaginary spin-orbit potentialvari-389
     a  depth,f12.6,12h mev  radius,f9.6,15h fermi (reduced,f9.6,14h)  dvari-390
     biffuseness,f9.6,6h fermi/38h coulomb potential  product of chargesvari-391
     c,f12.6,6x,6hradius,f9.6,15h fermi (reduced,f9.6,14h)  diffuseness,vari-392
     df9.6,6h fermi/38h spin-orbit coulomb potential    depth,f12.6,6x,6vari-393
     ehradius,f9.6,15h fermi (reduced,f9.6,14h)  diffuseness,f9.6,6h fervari-394
     fmi/14x,22hthird charge parameter,f9.6)                            vari-395
 1023 format (/22h *** folding model ***/10h real part,10x,3hv =,f10.4,6vari-396
     1x,3hr =,f10.4,6x,3ha =,f10.4/15h imaginary part,6x,3hv =,f10.4,6x,vari-397
     23hr =,f10.4,6x,3ha =,f10.4/13h coulomb part,7x,3hv =,f10.4,6x,3hr vari-398
     3=,f10.4,6x,3ha =,f10.4)                                           vari-399
 1024 format (/40h **** external potential parameters ****/)            vari-400
 1025 format (2h (,i1,1h,,i2,42h) given by points with the parameters frvari-401
     1om,i4,3h to,i4/1p,2e15.6/(1p,8e15.6))                             vari-402
 1026 format (2h (,i1,1h,,i2,13h) type 9 from,i4,3h to,i4/1p,2e15.6/(1p,vari-403
     28e15.6))                                                          vari-404
 1027 format (2h (,i1,1h,,i2,6h) type,i3,5h from,i4,3h to,i4,4x,6e14.6/(vari-405
     17x,8e14.6))                                                       vari-406
 1028 format (13h values read:,f12.6,3x,f9.6)                           vari-407
 1029 format (30h deformations: parameters from,i4,4h to ,i4,10x,4e18.6/vari-408
     1(52x,4e18.6))                                                     vari-409
 1030 format (19h deformations read:)                                   vari-410
 1031 format (20h folding parameters:,3f10.5/(20x,3f10.5))              vari-411
 1032 format (/21h beta(i,j) for  l   k,9x,1hv,9x,1hw,8x,2hvs,8x,2hws,7xvari-412
     1,3hvso,7x,3hwso,6x,14hcoul s.o. coul/(5x,i5,5x,i2,2x,i2,2x,8f10.5)vari-413
     2)                                                                 vari-414
 1033 format (/10x,28hwithout heavy ion correction/)                    vari-415
 1034 format (5x,i5,5x,i2,2x,i2,2x,8f10.5)                              vari-416
 1035 format (/26h *** nuclear variables ***//(1x,6f20.6))              vari-417
 1036 format (/32h *** nuclear matrix elements ***//(1x,6f20.6))        vari-418
 1037 format (/36h *** spin-orbit and c.-n. param. ***//1x,6f20.6/1x,6f2vari-419
     10.6/1x,4f20.6)                                                    vari-420
 1038 format (9h variable,i3,11h defined by,i5,i4,15h cannot be used)   vari-421
 1039 format (/19h in vari  ...  stop)                                  vari-422
      end                                                               vari-423
c 28/07/95  ibm version                                         ecis95  eval-000
      subroutine eval(wv,ipp,val,nval,npp,beta,nbta,nbet,var,nva,ele,neleval-001
     1,scn,nci,xd,ind,x,idt,idmt,w,iw,ivz,lo)                           eval-002
c this subroutine changes some parameters to do a new calculation.      eval-003
c the values read here are absolute changes ( nex=0 ),                  eval-004
c relative changes ( nex>0 ) or percentages ( nex<0 ).                  eval-005
c if the laboratory energy is changed, coulomb functions and reduced    eval-006
c nuclear matrix elements are recalculated even if they are not modifiedeval-007
c if nuclear parameters are changed, reduced nuclear matrix elements areeval-008
c calculated again. in all the others cases, the computation restarts   eval-009
c with the computation of potentials.                                   eval-010
c indexes for parameters are the ones used in search (see vari)         eval-011
c however 0 means energy in the laboratory system.                      eval-012
c input variables:wv,ipp:   description of levels (see calx)            eval-013
c                 val,npp:  optical model and folding and their number  eval-014
c                 nval:     equivalent by call with val                 eval-015
c                 beta,nbta,nbet:deformations and their number          eval-016
c                 var,nva:  nuclear parameters:their number is nva      eval-017
c                 ele,nel:  reduced nuclear matrix elements,number      eval-018
c                 scn:      description of level densities              eval-019
c                 nci:      table for discretisation of continuum       eval-020
c                 xd:       weights and steps for continuum             eval-021
c                 idt:      available working space                     eval-022
c                 idmt:     total working space                         eval-023
c                 w:        first step size of search in w(1)           eval-024
c                 iw:       maximum number of runs for a search in iw(2)eval-025
c                 ivz:      table of form factors  (see redm)           eval-026
c                 lo: logical controls,returns lo(222)=.true. if energy eval-027
c working space:  ind,x:    for input                                   eval-028
c common /ncomp/ncont: number of continuum for compound nucleus         eval-029
c               ncons: number of level densities needed                 eval-030
c               ncolx: total number of levels without discretisation    eval-031
c               az(i): spin orbit parametrisation for i-1 to 6          eval-032
c                      hauser feshbach parameters for j=7 to 9          eval-033
c                      giant dipole resonance description for i=10 to 14eval-034
c        is changed and lo(212)=.true. if nuclear parameters are changedeval-035
c it stops the calculation for an index of parameter out of range       eval-036
c working space: ind,x equivalent by call                               eval-037
c***********************************************************************eval-038
      logical lo(250)                                                   eval-039
      dimension ind(2,1),x(2,1),ele(4,1),var(1),beta(10,1),val(1),ipp(1)eval-040
     1,aa(2),nval(3),nbta(10,1),w(3),iw(3),ivz(7,1),scn(1),xd(3,1),nci(2eval-041
     2,1)                                                               eval-042
      double precision wv(11,1),chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn,bbeval-043
     1(2,2)                                                             eval-044
      common /ncomp/ nsp(5),ncont,ncoj,ac(2),ncons,nco(4),ncolx,az(16)  eval-045
      common /dblpr/ chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn              eval-046
      data aa /4h new,4hlast/                                           eval-047
      data bb /8hincrease,8hs )     ,8hnew valu,8hes )    /             eval-048
      nvat=34*npp                                                       eval-049
      lo(37)=.false.                                                    eval-050
      read (5,1000) lo(37),nin,nex,ech                                  eval-051
      lo(137)=.not.lo(37)                                               eval-052
      nx=min0(1,max0(nex,-1))+2                                         eval-053
      i1=1                                                              eval-054
      i2=1                                                              eval-055
      if (lo(137)) i1=2                                                 eval-056
      if (nx.eq.2) i2=2                                                 eval-057
      write (6,1001) aa(i1),nin,bb(1,i2),bb(2,i2)                       eval-058
      if (nx.eq.1) write (6,1002)                                       eval-059
      lo(212)=.false.                                                   eval-060
      lo(222)=.false.                                                   eval-061
      if (2*nin.gt.idt) call memo(idmt,idmt+2*nin-idt,idt,3,lo)         eval-062
      if (lo(216)) go to 52                                             eval-063
      read (5,1003) (ind(1,i),i=1,nin)                                  eval-064
      read (5,1004) (x(2,i),i=1,nin)                                    eval-065
      do 47 i=1,nin                                                     eval-066
      ind(1,i)=max0(0,ind(1,i))                                         eval-067
      j=mod(ind(1,i),1000)                                              eval-068
      ik=(ind(1,i)+1999)/1000                                           eval-069
      ey=x(2,i)                                                         eval-070
      if (ik.ne.1) go to 10                                             eval-071
c energy in the laboratory system                                       eval-072
      lo(222)=.true.                                                    eval-073
      ex=wv(3,1)                                                        eval-074
      if (nx.ne.2) go to 9                                              eval-075
    1 amred=wv(1,1)*wv(2,1)/(wv(1,1)+wv(2,1))                           eval-076
      if (lo(8)) go to 2                                                eval-077
      wv(3,1)=ey*wv(2,1)/(wv(1,1)+wv(2,1))                              eval-078
      go to 3                                                           eval-079
c relativistic c.-m. energy ecm=sqrt((m1+m2)**2+2*m2*elab))-m1-m2       eval-080
    2 wv(3,1)=cm*(dsqrt((wv(1,1)+wv(2,1))**2+2.d0*wv(2,1)*ey/cm)-wv(1,1)eval-081
     1-wv(2,1))                                                         eval-082
    3 write (6,1005) i,j,ey,x(2,i),wv(3,1),ex                           eval-083
      if (ncolx.eq.1) go to 5                                           eval-084
      do 4 j=2,ncolx                                                    eval-085
    4 wv(3,j)=wv(3,j)+wv(3,1)-ex                                        eval-086
    5 if (ncont.eq.0) go to 47                                          eval-087
      ie=0                                                              eval-088
      do 8 j=1,ncont                                                    eval-089
      je=ie                                                             eval-090
      ii=nci(1,j)                                                       eval-091
      ij=nci(2,j)                                                       eval-092
      de=0.                                                             eval-093
      do 6 l=ii,ij                                                      eval-094
      ie=ie+1                                                           eval-095
    6 de=de+xd(2,ie)                                                    eval-096
      de=1.+(wv(3,1)-ex)/de                                             eval-097
      do 7 l=ii,ij                                                      eval-098
      je=je+2                                                           eval-099
      xd(2,ie)=de*xd(2,ie)                                              eval-100
    7 wv(3,l)=de*wv(3,l)                                                eval-101
    8 continue                                                          eval-102
      go to 47                                                          eval-103
    9 if (nex.lt.0) ey=.01*ey*ex                                        eval-104
      ey=ex+ey                                                          eval-105
      go to ( 1 , 19 , 24 , 30 , 35 , 37 , 39 , 41 ),ik                 eval-106
   10 if (ik.gt.11) go to 11                                            eval-107
      if (ik.gt.8) go to 50                                             eval-108
      go to ( 12 , 12 , 20 , 26 , 32 , 36 , 38 , 40 ),ik                eval-109
   11 ik=2                                                              eval-110
      j=ind(1,i)-9000                                                   eval-111
   12 if (lo(7)) go to 14                                               eval-112
c optical model and folding parameters                                  eval-113
      n=1+mod(j-1,34)                                                   eval-114
      m=1+(j-1)/34                                                      eval-115
      k=ipp(m)                                                          eval-116
      if (mod(n,3).ne.2.or.n.gt.24) go to 13                            eval-117
      ex=wv(2,k)**.33333333333333e0                                     eval-118
      if (lo(16)) ex=ex+wv(1,k)**.33333333333333e0                      eval-119
      ey=ey*ex                                                          eval-120
   13 if (j.gt.nvat.or.n.eq.19) go to 50                                eval-121
      ex=val(j)                                                         eval-122
      if (nx.ne.2) go to 9                                              eval-123
      go to 19                                                          eval-124
c external optical parameters                                           eval-125
   14 i1=nval(1)                                                        eval-126
      do 15 l=2,i1,2                                                    eval-127
      if (j.ge.nval(l).and.j.le.nval(l+1)) go to 16                     eval-128
   15 continue                                                          eval-129
      go to 51                                                          eval-130
   16 ex=val(j)                                                         eval-131
      if (l.eq.2) go to 18                                              eval-132
      m=nval(l)                                                         eval-133
      n=nval(m-1)                                                       eval-134
      iv=nval(n+1)                                                      eval-135
      if (iv.lt.1.or.iv.gt.6) go to 18                                  eval-136
      nst=nval(n+4)                                                     eval-137
      if (nst.gt.0) go to 18                                            eval-138
      it1=mod(nval(n)-1,8)+1                                            eval-139
      j1=(nval(n)-1)/8                                                  eval-140
      j2=4                                                              eval-141
      if (it1.gt.6) j2=5                                                eval-142
      if (j-m.gt.1.and.j-m.lt.j2) go to 18                              eval-143
      k=iabs(nst)                                                       eval-144
      fx=wv(2,k)**.33333333333333e0                                     eval-145
      fy=fx                                                             eval-146
      if (lo(16)) fx=fx+wv(1,k)**.33333333333333e0                      eval-147
c transformation of depth and radius                                    eval-148
      if (j-m.eq.1) ey=ey*fx                                            eval-149
      fy=fy/fx                                                          eval-150
      if (j.gt.m+2) go to 17                                            eval-151
      if (lo(116).or.j1.le.npp.or.j.ne.m) go to 18                      eval-152
      ityz=iv                                                           eval-153
      if (ityz.ge.5) ityz=ityz-4                                        eval-154
      ityw=1                                                            eval-155
      if (it1.gt.6) ityw=ityw*ivz(7,j1-npp)                             eval-156
      if (lo(6)) ityw=ityw-1                                            eval-157
      if (ityz.gt.1) ey=ey*fy**((ityz-1)*ityw)                          eval-158
      go to 18                                                          eval-159
c transformation of deformations                                        eval-160
   17 j3=j-m-j2                                                         eval-161
      if (it1.lt.7) j3=0                                                eval-162
      if (lo(106)) j3=j3+1                                              eval-163
      ey=ey*fy**j3                                                      eval-164
   18 if (nx.ne.2) go to 9                                              eval-165
   19 if (lo(107)) write (6,1006) i,j,n,m,ey,x(2,i),val(j)              eval-166
      if (lo(7)) write (6,1007) i,j,ey,x(2,i),val(j)                    eval-167
      val(j)=ey                                                         eval-168
      go to 47                                                          eval-169
   20 if (j.gt.8) go to 50                                              eval-170
c  deformations for a given potential                                   eval-171
      k2=j                                                              eval-172
      do 21 k1=1,nbet                                                   eval-173
      if (lo(1).and.lo(3).and.nbta(10,k1).ne.0) go to 21                eval-174
      if (beta(k2,k1).ne.0.) go to 22                                   eval-175
   21 continue                                                          eval-176
      write (6,1008) i,ind(1,i),k2                                      eval-177
      go to 52                                                          eval-178
   22 ey=ey/beta(k2,k1)                                                 eval-179
      k3=1                                                              eval-180
      if ((nx.ne.1).and.lo(16)) go to 33                                eval-181
   23 ex=1                                                              eval-182
      if (nx.ne.2) go to 9                                              eval-183
   24 write (6,1009) i,ind(1,i),k2,k1,ey,x(2,i)                         eval-184
      do 25 l=k1,nbet                                                   eval-185
      if (lo(1).and.lo(3).and.nbta(10,k1).ne.0) go to 25                eval-186
      ex=beta(k2,l)*ey                                                  eval-187
      write (6,1010) k2,l,ex,beta(k2,l)                                 eval-188
      beta(k2,l)=ex                                                     eval-189
   25 continue                                                          eval-190
      go to 47                                                          eval-191
c deformations for a given multipole                                    eval-192
   26 k1=j                                                              eval-193
      if (j.gt.nbet) go to 50                                           eval-194
      do 27 k2=1,8                                                      eval-195
      if (beta(k2,k1).ne.0.) go to 28                                   eval-196
   27 continue                                                          eval-197
      write (6,1011) i,ind(1,i),k1                                      eval-198
      go to 52                                                          eval-199
   28 ey=ey/beta(k2,k1)                                                 eval-200
      k3=2                                                              eval-201
      if ((nx.ne.1).and.lo(16)) go to 33                                eval-202
   29 ex=1                                                              eval-203
      if (nx.ne.2) go to 9                                              eval-204
   30 write (6,1009) i,ind(1,i),k2,k1,ey,x(2,i)                         eval-205
      do 31 l=k2,8                                                      eval-206
      ex=beta(l,k1)*ey                                                  eval-207
      write (6,1010) l,k1,ex,beta(l,k1)                                 eval-208
   31 beta(l,k1)=ex                                                     eval-209
      go to 47                                                          eval-210
c individual deformations                                               eval-211
   32 if (j.gt.10*nbet) go to 50                                        eval-212
      k1=1+(j-1)/10                                                     eval-213
      k2=1+mod(j-1,10)                                                  eval-214
      if (k2.gt.8) go to 50                                             eval-215
      k3=3                                                              eval-216
      if (lo(116)) go to 34                                             eval-217
c search of the corrections for heavy ions                              eval-218
   33 ex=wv(2,1)**.33333333333333e0/(wv(2,1)**.33333333333333e0+wv(1,1)*eval-219
     1*.33333333333333e0)                                               eval-220
      jk=1                                                              eval-221
      if (lo(101).and.lo(3)) jk=k1-1                                    eval-222
      k=jk                                                              eval-223
      if (k1.gt.6) k=k*nbta(10,k1)                                      eval-224
      if (lo(6)) k=k-jk                                                 eval-225
      ey=ey*ex**k                                                       eval-226
      if (k3-2) 23 , 29 , 34                                            eval-227
   34 ex=beta(k2,k1)                                                    eval-228
      if (nx.ne.2) go to 9                                              eval-229
   35 write (6,1012) i,ind(1,i),k2,k1,ey,x(2,i),beta(k2,k1)             eval-230
      beta(k2,k1)=ey                                                    eval-231
      go to 47                                                          eval-232
   36 if (j.gt.nva) go to 50                                            eval-233
      ex=var(j)                                                         eval-234
      if (nx.ne.2) go to 9                                              eval-235
   37 write (6,1013) i,ind(1,i),j,ey,x(2,i),var(j)                      eval-236
      var(j)=ey                                                         eval-237
      go to 47                                                          eval-238
c  nuclear matrix elements                                              eval-239
   38 if (j.gt.nel) go to 50                                            eval-240
      ex=ele(4,j)                                                       eval-241
      lo(212)=.true.                                                    eval-242
      if (nx.ne.2) go to 9                                              eval-243
   39 write (6,1014) i,ind(1,i),j,ey,x(2,i),ele(4,j)                    eval-244
      ele(4,j)=ey                                                       eval-245
      go to 47                                                          eval-246
c  spin-orbit and h. f. parametrisation                                 eval-247
   40 if (j.gt.6*ncons+14) go to 50                                     eval-248
      if (lo(181).and.j.gt.6) go to 50                                  eval-249
      if (j.gt.14) go to 45                                             eval-250
      if ((lo(82).or.lo(186)).and.j.gt.9) go to 50                      eval-251
      if (lo(182).and.(j.eq.7.or.j.eq.9).and.lo(87)) go to 50           eval-252
      if (lo(182).and.(j.eq.8.or.j.eq.9).and.lo(187)) go to 50          eval-253
      ex=az(j)                                                          eval-254
      if (nx.ne.2) go to 9                                              eval-255
   41 if (j.gt.14) go to 46                                             eval-256
      if (j.gt.6) go to 42                                              eval-257
      write (6,1015) i,ind(1,i),j,ey,x(2,i),az(j)                       eval-258
      go to 44                                                          eval-259
   42 k=j-6                                                             eval-260
      if (k.gt.3) go to 43                                              eval-261
      write (6,1016) i,ind(1,i),k,ey,x(2,i),az(j)                       eval-262
      go to 44                                                          eval-263
   43 k=j-3                                                             eval-264
      write (6,1017) i,ind(1,i),k,ey,x(2,i),az(j)                       eval-265
   44 az(j)=ey                                                          eval-266
      go to 47                                                          eval-267
   45 ex=scn(j-14)                                                      eval-268
      if (nx.ne.2) go to 9                                              eval-269
   46 k=1+(j-15)/ncons                                                  eval-270
      l=1+mod(j-15,ncons)                                               eval-271
      write (6,1018) i,ind(1,i),k,l,ey,x(2,i),scn(j-14)                 eval-272
      scn(j-14)=ey                                                      eval-273
   47 continue                                                          eval-274
      do 48 i=215,220                                                   eval-275
   48 lo(i)=.false.                                                     eval-276
      if (lo(132)) return                                               eval-277
      chi2m=1.d35                                                       eval-278
      if (ech.eq.0.) ech=20.                                            eval-279
      w(1)=ech                                                          eval-280
      w(3)=0.                                                           eval-281
      iw(2)=iw(2)-iw(3)                                                 eval-282
      iw(3)=1                                                           eval-283
      write (6,1019) iw(2),w(1)                                         eval-284
      if (iw(2).le.0) go to 52                                          eval-285
      if (lo(76).or.lo(175)) return                                     eval-286
      do 49 i=51,65                                                     eval-287
      lo(i+180)=lo(i)                                                   eval-288
      lo(i)=.false.                                                     eval-289
   49 lo(i+100)=.true.                                                  eval-290
      lo(215)=.true.                                                    eval-291
      return                                                            eval-292
   50 write (6,1020) i,ind(1,i),ik,j,x(2,i)                             eval-293
      go to 52                                                          eval-294
   51 if (j.gt.nval(3)) go to 50                                        eval-295
      write (6,1021) i,ey,j,nval(j)                                     eval-296
   52 write (6,1022)                                                    eval-297
      stop                                                              eval-298
 1000 format (l1,i4,i5,f10.5)                                           eval-299
 1001 format (1h1,a4,17h computation with,i4,16h  new parameters,10x,11heval-300
     1( input of ,2a8)                                                  eval-301
 1002 format (1h+,72x,22hgiven as percentages ))                        eval-302
 1003 format (14i5)                                                     eval-303
 1004 format (7f10.5)                                                   eval-304
 1005 format (2x,i2,7h param.,i5,3x,15hnew lab. energy,e15.8,2h (,e15.8,eval-305
     11h),3x,21hcenter of mass energy,e15.6,5x,9hold value,e15.6)       eval-306
 1006 format (2x,i2,7h param.,i5,3x,19hvalue of v-optical(,i2,1h,,i2,3h)eval-307
     1 =,e15.6,2h (,e15.6,1h),3x,9hold value,e15.6)                     eval-308
 1007 format (2x,i2,7h param.,i5,32hth value of external potential =,e15eval-309
     1.6,2h (,e15.6,1h),3x,9hold value,e15.6)                           eval-310
 1008 format (13h the variable,i3,24h cannot be used because ,i5,49h  iseval-311
     1 a variation of the deformations of potential,i3,15h which are zereval-312
     1o)                                                                eval-313
 1009 format (2x,i2,7h param.,i5,3x,22hproportionnal to beta(,i2,1h,,i2,eval-314
     113h)  with ratio,e15.6,2h (,e15.6,1h))                            eval-315
 1010 format (15x,5hbeta(,i2,1h,,i2,3h) =,e15.6,5x,9hold value,e15.6)   eval-316
 1011 format (13h the variable,i3,24h cannot be used because ,i5,38h  iseval-317
     1 a variation for a given multipole,i3,18h and they are zero)      eval-318
 1012 format (2x,i2,7h param.,i5,3x,5hbeta(,i2,1h,,i2,3h) =,e15.6,2h (,eeval-319
     115.6,1h),3x,9hold value,e15.6)                                    eval-320
 1013 format (2x,i2,7h param.,i5,3x,4hvar(,i2,3h) =,e15.6,2h (,e15.6,1h)eval-321
     1,3x,9hold value,e15.6)                                            eval-322
 1014 format (2x,i2,7h param.,i5,3x,4ht(4,,i3,3h) =,e15.6,2h (,e15.6,1h)eval-323
     1,3x,9hold value,e15.6)                                            eval-324
 1015 format (2x,i2,7h param.,i5,3x,3haz(,i1,3h) =,e15.6,2h (,e15.6,1h),eval-325
     13x,9hold value,e15.6)                                             eval-326
 1016 format (2x,i2,7h param.,i5,3x,3hbz(,i1,3h) =,e15.6,2h (,e15.6,1h),eval-327
     13x,9hold value,e15.6)                                             eval-328
 1017 format (2x,i2,7h param.,i5,3x,16hgiant resonance(,i1,3h) =,e15.6,2eval-329
     1h (,e15.6,1h),3x,9hold value,e15.6)                               eval-330
 1018 format (2x,i2,7h param.,i5,3x,4hscn(,i3,1h,i3,3h) =,e15.6,2h (,e15eval-331
     1.6,1h),3x,9hold value,e15.6)                                      eval-332
 1019 format (28h new maximum number of runs:,i6,10x,14hstarting scale,feval-333
     110.2)                                                             eval-334
 1020 format (9h variable,i3,11h defined by,i5,2h (,i2,i5,1h),12h with veval-335
     1alue ,e15.6,15h cannot be used)                                   eval-336
 1021 format (9h variable,i3,e15.6,11h defined by,i5,60h cannot be used eval-337
     1for the parameter which is the integer value,i10)                 eval-338
 1022 format (/19h in eval  ...  stop)                                  eval-339
      end                                                               eval-340
c 28/07/95  ibm version                                         ecis95  rest-000
      subroutine rest(kf,nw,w,lo,idmx)                                  rest-001
c if kf=0                                                               rest-002
c it saves on tape 8 all the data needed to re-start a                  rest-003
c search stopped by the number of evaluations (by time if lo(34)=.true.)rest-004
c it is called only if lo(35)=.true.                                    rest-005
c if kf.ne.0                                                            rest-006
c it reads on tape 8 to re-start the search                             rest-007
c it is called only if lo(36)=.true.                                    rest-008
c***********************************************************************rest-009
      logical lo(250)                                                   rest-010
      dimension w(1),nw(1),t(18)                                        rest-011
      common /titr/title(18),n1(10)/dblpr/n2(20)/decou/n3(94)/ncomp/n4(3rest-012
     11)/poten/n5(26)                                                   rest-013
      idmy=idmx                                                         rest-014
      rewind 8                                                          rest-015
      if (kf.ne.0) go to 1                                              rest-016
c writes commons first and w after                                      rest-017
      write (8) idmx,lo,n1,n2,n3,n4,n5,title                            rest-018
c n3(88) is nrco,n3(83) is nplace,n3(34) is idmt                        rest-019
      i1=n3(88)                                                         rest-020
      write (6,1000) i1                                                 rest-021
      write (8) (w(i),i=1,i1)                                           rest-022
      rewind 8                                                          rest-023
      return                                                            rest-024
c read commons,computes limits of w and read w                          rest-025
    1 read (8) idmz,lo,n1,n2,n3,n4,n5,t                                 rest-026
      i1=n3(88)                                                         rest-027
      n3(34)=idmy                                                       rest-028
      write (6,1001) title,t,n3(34)                                     rest-029
      call memo(n3(34),0,m,1,lo)                                        rest-030
      call memo(n3(34),n3(83),m,5,lo)                                   rest-031
      if (lo(216)) go to 5                                              rest-032
      read (8) (w(i),i=1,i1)                                            rest-033
      rewind 8                                                          rest-034
c reads on 5 if save has to be done again and the new number of eval.   rest-035
c any modification of the search can be read at this place if they      rest-036
c do not spoil the search                                               rest-037
      lo(35)=.false.                                                    rest-038
      read (5,1002) lo(35),n,nsec,ech,rap                               rest-039
c n3(15) is niw, n3(76) is nrec                                         rest-040
      if (n.eq.0) n=n3(76)+2                                            rest-041
      lo(135)=.not.lo(35)                                               rest-042
      m=n3(15)+1                                                        rest-043
      nw(m)=nw(m)+n                                                     rest-044
      write (6,1003) i1                                                 rest-045
      write (6,1004) n,nw(m)                                            rest-046
      if (lo(35)) write (6,1005)                                        rest-047
      if (lo(135)) write (6,1006)                                       rest-048
      if (nsec.eq.0) go to 2                                            rest-049
      n3(43)=nsec                                                       rest-050
      write (6,1007) nsec                                               rest-051
    2 n=n3(14)                                                          rest-052
      if (ech.lt.1.) go to 3                                            rest-053
      write (6,1008) w(n),ech                                           rest-054
      w(n)=ech                                                          rest-055
    3 if (rap.lt.1.) go to 4                                            rest-056
      write (6,1009) w(n+1),rap                                         rest-057
      w(n+1)=rap                                                        rest-058
    4 return                                                            rest-059
    5 write (6,1010) n3(34),n3(83)                                      rest-060
      stop                                                              rest-061
 1000 format (///38h output on tape 8 of w from w(1) to w(,i6,1h)///)   rest-062
 1001 format (1h1//1x,18a4//23h restart of computation//16h last title :rest-063
     1 '',18a4,2h''//24h available working space,i8/)                   rest-064
 1002 format (l1,i4,i5,2f10.5)                                          rest-065
 1003 format (39h input from tape 8 of w from w(1) to w(,i6,1h)//)      rest-066
 1004 format (/43h maximum number of evaluations increased by,i4,5x,9hnerest-067
     1w value,i6)                                                       rest-068
 1005 format (28h save on tape 8 if necessary)                          rest-069
 1006 format (18h no save on tape 8)                                    rest-070
 1007 format (5x,i5,44h hund of second spared at the end of the job)    rest-071
 1008 format (19h change of ech from,f10.5,3h to,f10.5)                 rest-072
 1009 format (19h change of rap from,f10.5,3h to,f10.5)                 rest-073
 1010 format (14h working space,i6,16h is unsufficient,10x,i6,7h needed)rest-074
      end                                                               rest-075
c 13/03/86  ibm version                                         ecis88  fite-000
      subroutine fite(ke,m,n,f,x,e,w,nw,iz,wa,chi2)                     fite-001
c  chisquare minimising subroutine written by g. schweimer in karlsruhe.fite-002
c simplified for the use of ecis (no gradient)                          fite-003
c  solves the nonlinear least squares problem                           fite-004
c  using a least squares interpolation between variables and functions  fite-005
c  called subroutines: fit2 /.true./ (linear least squares problem)     fite-006
c                      fit2 /.false./(inversion of a(transposed)*a)     fite-007
c                      fit1(one dimensional minimum search)             fite-008
c  calling sequence                                                     fite-009
c     ke=0                                                              fite-010
c     m=number of functions, m ge n                                     fite-011
c     n=number of variables, n ge 1                                     fite-012
c     do 1 i=1,n                                                        fite-013
c     x(i)=starting values of the variables                             fite-014
c   1 e(i)=absolute search accuracies for the variables                 fite-015
c     w(1)=first step size in units of e(i)                             fite-016
c     w(2)=half of the success multiplication factor for step size      fite-017
c         the step size is divided by 4 times its square after unsuccessfite-018
c     iz(1)=number of points to be remembered, if le n iz(1) = n+1      fite-019
c     iz(2)=maximum number of function evaluations, if 0 iz(2)=2*iz(1)  fite-020
c   2 chi2=0.                                                           fite-021
c     do 3 i=1,m                                                        fite-022
c     f(i)=function values at the point x                               fite-023
c   3 chi2=chi2+f(i)*f(i)                                               fite-024
c     call fite(ke,m,n,f,x,e,w,w,iz,wa,chi2)                            fite-025
c     if(ke.eq.1) go to 2                                               fite-026
c     w(1)=step size  maximum change of a variable is 2*w(1)            fite-027
c     w(3)=error renormalisation factor when ke=0,2 or 3. (square root  fite-028
c                of variance at best fit divided by degree of freedom)  fite-029
c         =changed x value in preparatory calls                         fite-030
c         =ratio step/distance of minimum after preparatory calls       fite-031
c              or 0. for random prediction                              fite-032
c     x=minimum point                                                   fite-033
c     f=functions at the minimum point                                  fite-034
c     ke=error code    ke=0: without errors                             fite-035
c                      ke=2: user interrupt                             fite-036
c                      ke=3: maximum number of function evaluations     fite-037
c                      ke=4: rounding errors                            fite-038
c                      ke=5: the functions do not depend on x(iz(4))    fite-039
c                      ke=6: useless variables in the preparatory calls,fite-040
c                            the labels of the variables are iz(3),iz(4)fite-041
c                      ke=7: m lt n                                     fite-042
c     w(3+i)=standard errors of the variables. (for a variance at best  fite-043
c                      fit equal to degree of freedom)                  fite-044
c     w(3+n+i)=error enhancements. (many/single variable result)        fite-045
c     w(3+n+n+i+(j*(j-1))/2)=error correlation between x(i) and x(j) i<jfite-046
c     iz(3): number of function evaluations                             fite-047
c     iz(4): number of degrees of freedom if ke=0,2,3 or 4              fite-048
c            place of useless variable if ke=5 or 6                     fite-049
c            eventually indications for one dimensional search if ke=1  fite-050
c  working field:  iz: length 4+k with k = iz(1)                        fite-051
c     w: length 3+max(14+n+k*(m+n+1),(n*(n+5))/2)                       fite-052
c     nw: equivalent by call with w                                     fite-053
c     wa: length (m+1)*(n+1)+(n*(n+1))/2                                fite-054
c                  addresses in iz                                      fite-055
c                      4+l: labels of the quadratic sums                fite-056
c                  addresses in w during search                         fite-057
c                      4 to 17 ,eventually, indications for one dimen-  fite-058
c                            sionnal search.                            fite-059
c                      from max(18,n+4),k sets(functions+variables+chi2)fite-060
c                  addresses in w after the search  see above           fite-061
c                  addresses in wa                                      fite-062
c                      from 1 gradient or matrix a followed by central  fite-063
c                              functions                                fite-064
c                      from 1+m*(n+1)  central variables                fite-065
c                      from (n+1)*(m+1) matrix d                        fite-066
c  the working fields iz and w contain all information to continue      fite-067
c  the search. this allows a search within another search just changing fite-068
c  the working fields                                                   fite-069
c***********************************************************************fite-070
      dimension f(m),x(n),e(n),w(20),iz(5),wa(1),nw(20)                 fite-071
      double precision chi2,s,t,u,v,eps                                 fite-072
      data eps /1.d-5/                                                  fite-073
      jd=(m+1)*(n+1)-1                                                  fite-074
      js=17+n                                                           fite-075
      lm=m+n+1                                                          fite-076
      k=iz(1)                                                           fite-077
      if (ke.ne.0) go to 2                                              fite-078
      if (m.lt.n) go to 39                                              fite-079
      iz(3)=1                                                           fite-080
      iz(4)=0                                                           fite-081
      do 1 l=1,k                                                        fite-082
      iz(l+4)=1+k-l                                                     fite-083
    1 w(js+lm*l)=7.e35                                                  fite-084
      if (w(2).lt.1.) w(2)=1.                                           fite-085
      ke=1                                                              fite-086
    2 jm=js+lm*iz(5)-lm                                                 fite-087
      j3=m*n                                                            fite-088
      kv=k                                                              fite-089
      if (chi2.le.0.d0) go to 38                                        fite-090
c  row of matrix s to be replaced by new values                         fite-091
      l=iz(k+4)                                                         fite-092
      if (w(js+lm*l).eq.7.e35) kv=l-1                                   fite-093
      do 3 i=1,k                                                        fite-094
      j1=js+lm*iz(i+4)                                                  fite-095
      if (chi2.lt.w(j1)) go to 4                                        fite-096
    3 continue                                                          fite-097
c  one dimensional search is necessary                                  fite-098
      go to 30                                                          fite-099
    4 if (i.gt.max0(n+1,kv)) go to 30                                   fite-100
c  vector of labels of the quadratic sums                               fite-101
      if (kv.lt.k) kv=kv+1                                              fite-102
      i1=k+4                                                            fite-103
      i2=k-i                                                            fite-104
      if ((iz(3).gt.n+1).and.(i.ne.1)) w(1)=w(1)/(4.*w(2)**3)           fite-105
      if (i2.eq.0) go to 6                                              fite-106
      do 5 j=1,i2                                                       fite-107
      i1=i1-1                                                           fite-108
    5 iz(i1+1)=iz(i1)                                                   fite-109
      iz(i1)=l                                                          fite-110
      jm=js+lm*iz(5)-lm                                                 fite-111
c  new row                                                              fite-112
    6 j1=js+lm*(l-1)                                                    fite-113
      do 7 i=1,m                                                        fite-114
      j1=j1+1                                                           fite-115
    7 w(j1)=f(i)                                                        fite-116
      do 8 i=1,n                                                        fite-117
      j1=j1+1                                                           fite-118
    8 w(j1)=x(i)                                                        fite-119
      w(j1+1)=chi2                                                      fite-120
      if (iz(3).ge.iz(2)) go to 43                                      fite-121
      if (n.eq.1) go to 35                                              fite-122
      if (iz(3).gt.n+1) go to 13                                        fite-123
c  preparatory function evaluations                                     fite-124
      mf=iz(3)                                                          fite-125
      if (mf.eq.1) go to 12                                             fite-126
c significance of the new variable                                      fite-127
      x(mf-1)=w(3)                                                      fite-128
      s=0.d0                                                            fite-129
      do 9 i=1,m                                                        fite-130
      t=f(i)-w(js+i)                                                    fite-131
    9 s=s+t*t                                                           fite-132
      j=2                                                               fite-133
      if (s.lt.eps*eps*w(js+lm)) go to 41                               fite-134
      w(3)=s                                                            fite-135
      w(mf+2)=sqrt(w(3))                                                fite-136
      if (mf.le.2) go to 12                                             fite-137
c independence of the new variable                                      fite-138
      do 11 j=3,mf                                                      fite-139
      i2=js+lm*(j-2)                                                    fite-140
      s=0.d0                                                            fite-141
      do 10 i=1,m                                                       fite-142
   10 s=s+(w(i2+i)-w(js+i))*(f(i)-w(js+i))                              fite-143
      if (dabs(w(mf+2)*w(j+1)-dabs(s)).lt.eps*dabs(s)) go to 40         fite-144
   11 continue                                                          fite-145
   12 if (mf.eq.n+1) go to 13                                           fite-146
      w(3)=x(mf)                                                        fite-147
      x(mf)=x(mf)+w(1)*e(mf)                                            fite-148
      go to 65                                                          fite-149
c  end of preparatory function evaluations                              fite-150
c  sum of inverses of the quadratic sums                                fite-151
   13 s=0.d0                                                            fite-152
      do 14 l=1,kv                                                      fite-153
      t=w(js+lm*l)                                                      fite-154
   14 s=s+1.d0/(t*t)                                                    fite-155
      wja=1.d0/s                                                        fite-156
c  centre of the variables and functions                                fite-157
      i1=m+n                                                            fite-158
      do 16 i=1,i1                                                      fite-159
      j1=js                                                             fite-160
      s=0.d0                                                            fite-161
      do 15 l=1,kv                                                      fite-162
      t=w(j1+lm)                                                        fite-163
      s=s+w(j1+i)/(t*t)                                                 fite-164
   15 j1=j1+lm                                                          fite-165
   16 wa(j3+i)=s*wja                                                    fite-166
      if (ke.ne.1) go to 47                                             fite-167
c the linear approximation means that the difference with central value fite-168
c f(i,k)-f(i) = sum f(i,j)*(x(j,k)-x(j)) where f(i),x(j) are mean valuesfite-169
c and f(i,j) is the first derivative with respect to x(j).              fite-170
c using the matrix d(i,j) = weighted sum on (x(i,k)-x(i))*(x(j,k)-x(j)) fite-171
c and writting the change dx = d*y, the best fit is obtained for        fite-172
c ||f-a*y||=min(y) with a(i,j)=weighted sum(f(i,k)-f(i)*(x(j,k)-x(j))   fite-173
c  matrix a                                                             fite-174
   17 j1=0                                                              fite-175
      do 19 i=1,n                                                       fite-176
      u=wa(j3+m+i)                                                      fite-177
      do 19 j=1,m                                                       fite-178
      j1=j1+1                                                           fite-179
      j2=js                                                             fite-180
      s=0.d0                                                            fite-181
      t=wa(j3+j)                                                        fite-182
      do 18 l=1,kv                                                      fite-183
      v=w(j2+lm)                                                        fite-184
      s=s+(w(j2+j)-t)*(w(j2+m+i)-u)/(v*v)                               fite-185
   18 j2=j2+lm                                                          fite-186
   19 wa(j1)=s*wja                                                      fite-187
      if (ke.ne.1) go to 50                                             fite-188
c  linear least squares problem                                         fite-189
      call fit2(m,n,wa,x,nw(4),ir,.true.)                               fite-190
      if (ir) 42 , 20 , 28                                              fite-191
c  matrix d                                                             fite-192
   20 j1=jd                                                             fite-193
      ja=j3+m                                                           fite-194
      do 23 i=1,n                                                       fite-195
      t=wa(ja+i)                                                        fite-196
      do 22 j=1,i                                                       fite-197
      j1=j1+1                                                           fite-198
      j2=js+m                                                           fite-199
      s=0.d0                                                            fite-200
      u=wa(ja+j)                                                        fite-201
      do 21 l=1,kv                                                      fite-202
      v=w(j2+n+1)                                                       fite-203
      s=s+(w(j2+i)-t)*(w(j2+j)-u)/(v*v)                                 fite-204
   21 j2=j2+lm                                                          fite-205
   22 wa(j1)=s*wja                                                      fite-206
   23 continue                                                          fite-207
c  new variables                                                        fite-208
      do 25 i=1,n                                                       fite-209
      i2=1                                                              fite-210
      j1=jd+(i*i-i)/2                                                   fite-211
      s=0.d0                                                            fite-212
      do 24 j=1,n                                                       fite-213
      j1=j1+i2                                                          fite-214
      if (j.ge.i) i2=j                                                  fite-215
   24 s=s+wa(j1)*x(j)                                                   fite-216
   25 wa(i)=wa(ja+i)-s                                                  fite-217
c  test of convergence                                                  fite-218
      a=0.                                                              fite-219
      do 26 i=1,n                                                       fite-220
      w(i+3)=wa(i)-w(jm+m+i)                                            fite-221
   26 a=amax1(a,abs(w(i+3)/e(i)))                                       fite-222
      w(1)=w(1)*w(2)                                                    fite-223
      if (a.lt.1..or.w(1).lt.1.) go to 38                               fite-224
      w(3)=1.                                                           fite-225
c  step size limitation                                                 fite-226
      if (a.gt.2.*w(1)) w(3)=2.*w(1)/a                                  fite-227
      do 27 i=1,n                                                       fite-228
   27 x(i)=w(jm+m+i)+w(3)*w(i+3)                                        fite-229
      iz(4)=0                                                           fite-230
      w(1)=a*w(3)                                                       fite-231
      go to 65                                                          fite-232
c  random prediction                                                    fite-233
   28 do 29 i=1,n                                                       fite-234
   29 x(i)=w(jm+m+i)+w(1)*e(i)*(mod(iabs(nw(jm+i)),200)-100)/100.       fite-235
      w(3)=0.                                                           fite-236
      go to 65                                                          fite-237
c  one dimensional search                                               fite-238
   30 if (n.eq.1) go to 36                                              fite-239
      if (iz(3).ge.iz(2)) go to 43                                      fite-240
      if (iz(4).eq.2) go to 32                                          fite-241
      iz(4)=2                                                           fite-242
      do 31 i=1,n                                                       fite-243
   31 w(i+17)=x(i)-w(jm+m+i)                                            fite-244
      nw(4)=3                                                           fite-245
      nw(5)=20                                                          fite-246
      w(7)=0.5                                                          fite-247
      w(10)=0.                                                          fite-248
      w(11)=0.                                                          fite-249
      w(12)=0.                                                          fite-250
      w(13)=1.                                                          fite-251
      w(15)=w(jm+lm)                                                    fite-252
      w(16)=chi2                                                        fite-253
      go to 33                                                          fite-254
   32 w(8)=chi2                                                         fite-255
      call fit1(ke,nw(4),w(7))                                          fite-256
   33 do 34 i=1,n                                                       fite-257
   34 x(i)=w(jm+m+i)+w(7)*w(i+17)                                       fite-258
      if (ke.eq.3) ke=2                                                 fite-259
      if (ke.eq.2) go to 43                                             fite-260
      ke=1                                                              fite-261
      w(3)=w(7)                                                         fite-262
      go to 65                                                          fite-263
c  only one variable x                                                  fite-264
   35 if (iz(3).gt.1) go to 36                                          fite-265
      ke=0                                                              fite-266
      w(9)=w(1)*e(1)                                                    fite-267
      w(10)=e(1)                                                        fite-268
      w(11)=0.                                                          fite-269
   36 nw(5)=iz(2)                                                       fite-270
      w(7)=x(1)                                                         fite-271
      w(8)=chi2                                                         fite-272
      call fit1(ke,nw(4),w(7))                                          fite-273
      iz(4)=2                                                           fite-274
      x(1)=w(7)                                                         fite-275
      if (ke.eq.1) go to 65                                             fite-276
      if (ke.gt.0) ke=ke+1                                              fite-277
      w(3)=0.                                                           fite-278
      w(4)=0.                                                           fite-279
      do 37 j=1,m                                                       fite-280
   37 f(j)=w(jm+i)                                                      fite-281
      chi2=w(jm+lm)                                                     fite-282
      x(1)=w(jm+lm-1)                                                   fite-283
      if (nw(5).ne.0) go to 64                                          fite-284
      w(4)=sqrt(abs((w(12)-w(14))/((w(15)-w(16))/(w(12)-w(13))-(w(16)-  fite-285
     1w(17))/(w(13)-w(14)))))                                           fite-286
      w(5)=1.                                                           fite-287
      w(6)=1.                                                           fite-288
      go to 61                                                          fite-289
c  end of search                                                        fite-290
   38 ke=0                                                              fite-291
      if (chi2.eq.0..or.iz(2).lt.0) go to 65                            fite-292
      go to 44                                                          fite-293
c  error code definition                                                fite-294
   39 ke=ke+1                                                           fite-295
   40 ke=ke+1                                                           fite-296
   41 ke=ke+1                                                           fite-297
   42 ke=ke+1                                                           fite-298
   43 ke=ke+1                                                           fite-299
      ke=ke+1                                                           fite-300
c  restore optimum values to x and f                                    fite-301
   44 do 45 i=1,m                                                       fite-302
   45 f(i)=w(jm+i)                                                      fite-303
      do 46 i=1,n                                                       fite-304
      x(i)=w(jm+m+i)                                                    fite-305
   46 w(i+3)=0.                                                         fite-306
      w(3)=0.                                                           fite-307
      chi2=w(jm+lm)                                                     fite-308
      if (ke*(ke-3).ne.0.or.(ke.eq.3.and.((w(3).eq.0..and.iz(3).le.n))))fite-309
     1 go to 64                                                         fite-310
c computation of the errors of the variables - restore matrix g         fite-311
      kv=min0(k,iz(3))                                                  fite-312
      go to 13                                                          fite-313
c  inverse of matrix d                                                  fite-314
   47 t=sqrt(wja)                                                       fite-315
      j1=0                                                              fite-316
      do 49 i=1,n                                                       fite-317
      s=wa(j3+m+i)                                                      fite-318
      j2=js+i-lm+m                                                      fite-319
      do 48 l=1,kv                                                      fite-320
      j1=j1+1                                                           fite-321
   48 wa(j1)=t*(w(j2+l*lm)-s)/w(js+l*lm)                                fite-322
   49 continue                                                          fite-323
      call fit2(kv,n,wa,wa(jd+1),nw(4),ir,.false.)                      fite-324
      if (ir) 64 , 17 , 64                                              fite-325
c  matrix g = a*inverse of d                                            fite-326
   50 do 54 l=1,m                                                       fite-327
      j1=l-m                                                            fite-328
      do 52 i=1,n                                                       fite-329
      i1=jd+(i*i-i)/2                                                   fite-330
      i2=1                                                              fite-331
      s=0.d0                                                            fite-332
      do 51 j=1,n                                                       fite-333
      i1=i1+i2                                                          fite-334
      if (j.ge.i) i2=j                                                  fite-335
   51 s=s+wa(i1)*dble(wa(j1+j*m))                                       fite-336
   52 w(3+i)=s                                                          fite-337
      do 53 j=1,n                                                       fite-338
   53 wa(j1+j*m)=w(3+j)                                                 fite-339
   54 continue                                                          fite-340
c  diagonal elements of g(t)*g                                          fite-341
      j1=0                                                              fite-342
      do 56 i=1,n                                                       fite-343
      s=0.d0                                                            fite-344
      do 55 l=1,m                                                       fite-345
      j1=j1+1                                                           fite-346
   55 s=s+wa(j1)*dble(wa(j1))                                           fite-347
   56 w(3+n+i)=dsqrt(s)                                                 fite-348
c  standard errors and error correlations                               fite-349
      call fit2(m,n,wa,w(2*n+4),nw(4),ir,.false.)                       fite-350
      if (ir.ne.0) go to 64                                             fite-351
      do 58 i=1,n                                                       fite-352
      jdi=2*n+3+(i*i+i)/2                                               fite-353
      w(i+3)=sqrt(w(jdi))                                               fite-354
   58 w(3+n+i)=w(i+3)*w(3+n+i)                                          fite-355
      j1=2*n+3                                                          fite-356
      do 60 i=1,n                                                       fite-357
      do 59 j=1,i                                                       fite-358
      j1=j1+1                                                           fite-359
   59 w(j1)=w(j1)/(w(i+3)*w(j+3))                                       fite-360
   60 continue                                                          fite-361
c  error renormalisation factor                                         fite-362
   61 s=0.d0                                                            fite-363
      do 62 i=1,m                                                       fite-364
   62 s=s+f(i)                                                          fite-365
      w(3)=dsqrt(dabs(chi2-s*s/m)/max0(m-n-1,1))                        fite-366
      do 63 i=1,n                                                       fite-367
   63 w(i+3)=w(i+3)*w(3)                                                fite-368
   64 iz(4)=m-n-1                                                       fite-369
      if ((ke-5)*(ke-6).ne.0) go to 65                                  fite-370
      iz(3)=j-2                                                         fite-371
      iz(4)=mf-1                                                        fite-372
   65 if (ke.eq.1) iz(3)=iz(3)+1                                        fite-373
      return                                                            fite-374
      end                                                               fite-375
c 10/03/79  ibm and cdc version                                 ecis88  fit1-000
      subroutine fit1(ke,i,w)                                           fit1-001
c  minimisation of a function f(x) of one variable x                    fit1-002
c  calling sequence                                                     fit1-003
c     ke=0                                                              fit1-004
c     i(2)=maximum number of function evaluations                       fit1-005
c     w(1)=start value of x                                             fit1-006
c     w(3)=first step size                                              fit1-007
c     w(4)=absolute search accuracy                                     fit1-008
c     w(5)=relative search accuracy                                     fit1-009
c   1 w(2)=function value f(x) at x=w(1)                                fit1-010
c     call fit1(ke,i,w)                                                 fit1-011
c     if(ke.eq.1) go to 1                                               fit1-012
c     xmin=w(1)                                                         fit1-013
c     fmin=w(2)                                                         fit1-014
c  ke = error code: ke=0 no errors, ke=                                 fit1-015
c   2 maximum number of function evaluations                            fit1-016
c   3 rounding errors, probably because both w(4) and w(5) are too smallfit1-017
c  the working fields i and w have the length 3 and 11 respectively     fit1-018
c  they contain all information for the continuation of the search      fit1-019
c  therefore a search within another search can be done just changing   fit1-020
c  the working fields                                                   fit1-021
c  if 2 function values f1 and f2 are known for x = x1 and x2 respectivefit1-022
c  ly with x1 ne x2 enter the calling sequence after defining :         fit1-023
c  ke = 1; i(1) = 3; w(6) = x1; w(7) = x2; w(9) = f1; w(10) = f2 and    fit1-024
c  w(1) = users choice                                                  fit1-025
c  working field variables:                                             fit1-026
c  i(1): current number of function evaluations                         fit1-027
c  i(2): maximum number of function evaluations                         fit1-028
c  i(3): minimum pointer, the minimum function value is at w(7+i(3))    fit1-029
c  w(1): current value of x                                             fit1-030
c  w(2): user supplied function value                                   fit1-031
c  w(3): first step size                                                fit1-032
c  w(4 and 5): search accuracies                                        fit1-033
c  w(6, 7 and 8): x1, x2 and x3 with x1 < x2 < x3                       fit1-034
c  w(9, 10 and 11): function values at x1, x2 and x3 respectively       fit1-035
c***********************************************************************fit1-036
      dimension i(3),w(11)                                              fit1-037
      if (ke.eq.1) go to 2                                              fit1-038
      ke=1                                                              fit1-039
      i(1)=1                                                            fit1-040
      i(3)=-1                                                           fit1-041
      w(6)=w(1)                                                         fit1-042
      w(9)=w(2)                                                         fit1-043
    1 w(1)=w(1)+w(3)                                                    fit1-044
      go to 11                                                          fit1-045
    2 if (i(1).gt.2) go to 3                                            fit1-046
      i(3)=0                                                            fit1-047
      w(7)=w(1)                                                         fit1-048
      w(10)=w(2)                                                        fit1-049
      if (w(2).le.w(9)) go to 1                                         fit1-050
      i(3)=-1                                                           fit1-051
      w(1)=w(6)-w(3)                                                    fit1-052
      go to 11                                                          fit1-053
    3 if (i(1).gt.3) go to 5                                            fit1-054
      w(8)=w(1)                                                         fit1-055
      w(11)=w(2)                                                        fit1-056
c  ordering of the 3 first values of x: w(6) < w(7) < w(8)              fit1-057
      do 4 j=1,3                                                        fit1-058
      k=7-mod(j,2)                                                      fit1-059
      if (w(k).le.w(k+1)) go to 4                                       fit1-060
      w(1)=w(k)                                                         fit1-061
      w(k)=w(k+1)                                                       fit1-062
      w(k+1)=w(1)                                                       fit1-063
      k=k+3                                                             fit1-064
      w(1)=w(k)                                                         fit1-065
      w(k)=w(k+1)                                                       fit1-066
      w(k+1)=w(1)                                                       fit1-067
    4 continue                                                          fit1-068
      i(3)=0                                                            fit1-069
      if (w(9).lt.w(10).and.w(9).lt.w(11)) i(3)=-1                      fit1-070
      if (w(11).lt.w(10).and.w(11).lt.w(9)) i(3)=1                      fit1-071
      go to 9                                                           fit1-072
c  sort in the new values of x and f                                    fit1-073
    5 if (i(3).eq.0) go to 6                                            fit1-074
      j=i(3)                                                            fit1-075
      w(7-j)=w(7)                                                       fit1-076
      w(10-j)=w(10)                                                     fit1-077
      if ((w(7+j)-w(1))*(w(1)-w(7)).gt.0.) go to 7                      fit1-078
      w(7)=w(7+j)                                                       fit1-079
      w(10)=w(10+j)                                                     fit1-080
      w(7+j)=w(1)                                                       fit1-081
      w(10+j)=w(2)                                                      fit1-082
      if (w(2).ge.w(10)) i(3)=0                                         fit1-083
      go to 9                                                           fit1-084
    6 j=-1                                                              fit1-085
      if (w(1).lt.w(7)) j=1                                             fit1-086
      if (w(2).gt.w(10)) go to 8                                        fit1-087
      w(7+j)=w(7)                                                       fit1-088
      w(10+j)=w(10)                                                     fit1-089
    7 w(7)=w(1)                                                         fit1-090
      w(10)=w(2)                                                        fit1-091
      i31=i(3)+10                                                       fit1-092
      if (w(2).le.w(i31)) i(3)=0                                        fit1-093
      go to 9                                                           fit1-094
    8 w(7-j)=w(1)                                                       fit1-095
      w(10-j)=w(2)                                                      fit1-096
    9 j=7+i(3)                                                          fit1-097
c  error tests                                                          fit1-098
      if (w(6).eq.w(7).or.w(7).eq.w(8).or.(w(9).eq.w(10).and.w(10).eq.w(fit1-099
     111))) go to 14                                                    fit1-100
      if (i(1).ge.i(2)) go to 15                                        fit1-101
      if (i(3).eq.0) go to 10                                           fit1-102
c  step size limitation                                                 fit1-103
      w(1)=w(j)+(2*i(3))*abs(w(6)-w(8))                                 fit1-104
      go to 11                                                          fit1-105
c  prediction of the position of the minimum (parabolic approximation)  fit1-106
   10 w(1)=((w(9)-w(10))/(w(6)-w(7))-(w(10)-w(11))/(w(7)-w(8)))/(w(6)-w(fit1-107
     18))                                                               fit1-108
      w(1)=.5*(w(6)+w(8)+(w(11)-w(9))/(w(1)*(w(6)-w(8))))               fit1-109
c  test of convergence                                                  fit1-110
      w(2)=abs(w(1)-w(j))                                               fit1-111
      if (w(2).lt.abs(w(4)).or.w(2).lt.abs(w(5)*w(j))) go to 12         fit1-112
   11 i(1)=i(1)+1                                                       fit1-113
      return                                                            fit1-114
   12 ke=0                                                              fit1-115
   13 i37=i(3)+7                                                        fit1-116
      w(1)=w(i37)                                                       fit1-117
      i31=i(3)+10                                                       fit1-118
      w(2)=w(i31)                                                       fit1-119
      return                                                            fit1-120
   14 ke=ke+1                                                           fit1-121
   15 ke=ke+1                                                           fit1-122
      go to 13                                                          fit1-123
      end                                                               fit1-124
c 13/03/86  ibm version                                         ecis88  fit2-000
      subroutine fit2(m,n,a,d,ip,ir,llo)                                fit2-001
c if llo=.true. ex subroutine lilesq written by schweimer.              fit2-002
c  linear least squares problem ||b-a*d||=min(d)                        fit2-003
c  solved by householder transformations                                fit2-004
c  input variables:m: number of rows of a and b                         fit2-005
c                  n: number of columns of a and rows of d              fit2-006
c                  a: m*n matrix followed by the vector b of m compo-   fit2-007
c                                  nents (destroyed)                    fit2-008
c  output variables: d: vector of variables, the redundant variables arefit2-009
c                    set to zero. the ||d||=min is not used because the fit2-010
c                    components of d are assumed to be not commensurablefit2-011
c                  ip: permutation vector of n components, it contains  fit2-012
c                    the column labels of matrix a ordered according    fit2-013
c                    their importance in reducing the euclidean norm    fit2-014
c                  a: the upper part contains the transformed input a   fit2-015
c                    a(2,1) contains the square of the euclidean norm   fit2-016
c                  ir: error code                                       fit2-017
c                    ir=0 no error                                      fit2-018
c                    ir=-1 all components of d are zero and may be      fit2-019
c                    redundant                                          fit2-020
c                    ir>0 the first ir components of ip contain the     fit2-021
c                    labels of the nonzero components of d, the remai-  fit2-022
c                    ning components of d are zero and may be redundant fit2-023
c  note: all arithmetic operations are performed in double precision,   fit2-024
c  an iterative improvement is impossible without saving a and b.       fit2-025
c  the round off error of ||b-a*d||**2 is approximately given by        fit2-026
c  ||b(initial)||**2 - ||b(transformed)||**2                            fit2-027
c                                                                       fit2-028
c if llo=.false. ex subroutine invata written by schweimer.             fit2-029
c  inversion of the product matrix a(transposed)*a                      fit2-030
c  the matrix a is reduced to an upper triangular matrix r by           fit2-031
c  householder transformations. the remaining computation is straight   fit2-032
c  forward.                                                             fit2-033
c  input variables: n: number of columns of matrix a                    fit2-034
c                  m: number of rows of matrix a, m >= n > 0            fit2-035
c                  a: input matrix (destroyed)                          fit2-036
c  output variables: ir: error code                                     fit2-037
c                    ir=-1 rank of matrix a is zero                     fit2-038
c                    ir=0 no error, rank of matrix a is n               fit2-039
c                    ir>0 rank of matrix a is ir, the inverse of a(t)*a fit2-040
c                    is computed considering the ir columns of a indica-fit2-041
c                    ted by the first ir components of ip               fit2-042
c                  a: triangular matrix r, r=a(i,j) i<=j=1,n            fit2-043
c                  d: vector of length (n*(n+1))/2, it contains the     fit2-044
c                    upper triangular part of the inverse of a(t)*a     fit2-045
c                  ip: permutation vector of length n, its first ir     fit2-046
c                    components contain the labels of the useful        fit2-047
c                    columns of a, the last components contain the      fit2-048
c                    labels of the columns which are linear combinationsfit2-049
c                    of the first.                                      fit2-050
c***********************************************************************fit2-051
      dimension a(m,n),d(n),ip(n)                                       fit2-052
      real*8 s,t,u,v,sig                                                fit2-053
      logical llo                                                       fit2-054
      ir=0                                                              fit2-055
      n1=n                                                              fit2-056
      if (llo) n1=n+1                                                   fit2-057
      do 1 j=1,n                                                        fit2-058
    1 ip(j)=j                                                           fit2-059
c  rotation loop                                                        fit2-060
      do 13 k=1,n                                                       fit2-061
c  pivot element    column j which generates the largest new b(k) and   fit2-062
c   and line i of the largest element of column j if llo=.true.         fit2-063
c  column and line of largest element if llo=.false.                    fit2-064
      u=0.d0                                                            fit2-065
      do 7 j=k,n                                                        fit2-066
      c=0.                                                              fit2-067
      do 2 i=k,m                                                        fit2-068
      if (abs(a(i,j)).le.abs(c)) go to 2                                fit2-069
      l2=i                                                              fit2-070
      c=a(i,j)                                                          fit2-071
    2 continue                                                          fit2-072
      if (c.eq.0.) go to 7                                              fit2-073
      s=0.d0                                                            fit2-074
      if (llo) go to 4                                                  fit2-075
      if (abs(c).lt.u) go to 7                                          fit2-076
      u=abs(c)                                                          fit2-077
      do 3 i=k,m                                                        fit2-078
      v=dble(a(i,j))/dble(c)                                            fit2-079
    3 s=s+v*v                                                           fit2-080
      go to 6                                                           fit2-081
    4 t=0.d0                                                            fit2-082
      do 5 i=k,m                                                        fit2-083
      v=dble(a(i,j))/dble(c)                                            fit2-084
      s=s+v*v                                                           fit2-085
    5 t=t+v*dble(a(i,n1))                                               fit2-086
      if (u.ge.t*(t/s)) go to 7                                         fit2-087
      u=t*(t/s)                                                         fit2-088
    6 sig=dble(c)*dsqrt(s)                                              fit2-089
      l=j                                                               fit2-090
      l1=l2                                                             fit2-091
    7 continue                                                          fit2-092
      if (u.eq.0.d0) go to 14                                           fit2-093
c  permute lines of a(k)                                                fit2-094
      i=ip(l)                                                           fit2-095
      ip(l)=ip(k)                                                       fit2-096
      ip(k)=i                                                           fit2-097
      do 8 i=1,m                                                        fit2-098
      c=a(i,l)                                                          fit2-099
      a(i,l)=a(i,k)                                                     fit2-100
    8 a(i,k)=c                                                          fit2-101
c  permute lines of a(k)                                                fit2-102
      do 9 j=k,n1                                                       fit2-103
      c=a(k,j)                                                          fit2-104
      a(k,j)=a(l1,j)                                                    fit2-105
    9 a(l1,j)=c                                                         fit2-106
c  rotation of the lower column fragment of a(k) and b(k)               fit2-107
      u=sig+dble(a(k,k))                                                fit2-108
      v=dble(a(k,k))/sig                                                fit2-109
      a(k,k)=-sig                                                       fit2-110
      l=k+1                                                             fit2-111
      if (l.gt.m) a(k,l)=-a(k,l)                                        fit2-112
      if (l.gt.n1.or.l.gt.m) go to 13                                   fit2-113
      do 12 j=l,n1                                                      fit2-114
      s=v*dble(a(k,j))                                                  fit2-115
      do 10 i=l,m                                                       fit2-116
      t=dble(a(i,k))/sig                                                fit2-117
   10 s=s+t*dble(a(i,j))                                                fit2-118
      t=(dble(a(k,j))+s)/u                                              fit2-119
      a(k,j)=-s                                                         fit2-120
      do 11 i=l,m                                                       fit2-121
   11 a(i,j)=dble(a(i,j))-t*dble(a(i,k))                                fit2-122
   12 continue                                                          fit2-123
   13 continue                                                          fit2-124
c  end of rotation loop                                                 fit2-125
      k=n                                                               fit2-126
      go to 15                                                          fit2-127
   14 k=k-1                                                             fit2-128
      ir=k                                                              fit2-129
   15 if (llo) go to 22                                                 fit2-130
      if (k.eq.0) go to 29                                              fit2-131
c  inverse of the triangular matrix r stored in d                       fit2-132
      do 18 j=1,k                                                       fit2-133
      d(j)=a(j,j)                                                       fit2-134
      a(j,j)=1./d(j)                                                    fit2-135
      if (j.eq.1) go to 18                                              fit2-136
      i=j                                                               fit2-137
      do 17 l=2,j                                                       fit2-138
      i1=i                                                              fit2-139
      i=i-1                                                             fit2-140
      s=0.d0                                                            fit2-141
      do 16 l1=i1,j                                                     fit2-142
   16 s=s+dble(a(i,l1))*dble(a(j,l1))                                   fit2-143
   17 a(j,i)=-s/dble(d(i))                                              fit2-144
   18 continue                                                          fit2-145
c  inverse of the product matrix                                        fit2-146
      do 21 j=1,k                                                       fit2-147
      do 20 i=1,j                                                       fit2-148
      l=max0(ip(j),ip(i))                                               fit2-149
      ij=ip(i)+ip(j)+(l*(l-3))/2                                        fit2-150
      s=0.d0                                                            fit2-151
      do 19 l1=j,k                                                      fit2-152
   19 s=s+dble(a(l1,i))*dble(a(l1,j))                                   fit2-153
   20 d(ij)=s                                                           fit2-154
   21 continue                                                          fit2-155
      go to 30                                                          fit2-156
c  square of the euclidean norm                                         fit2-157
   22 s=0.d0                                                            fit2-158
      l=k+1                                                             fit2-159
      if (k.eq.m) go to 24                                              fit2-160
      do 23 i=l,m                                                       fit2-161
   23 s=s+dble(a(i,n1))*dble(a(i,n1))                                   fit2-162
   24 a(2,1)=s                                                          fit2-163
      if (k.eq.n) go to 26                                              fit2-164
c  components of d which do not reduce the euclidean norm               fit2-165
      do 25 j=l,n                                                       fit2-166
      ij=ip(j)                                                          fit2-167
   25 d(ij)=0.                                                          fit2-168
      if (k.eq.0) go to 29                                              fit2-169
c  computation of d                                                     fit2-170
   26 ij=ip(k)                                                          fit2-171
      d(ij)=dble(a(k,n1))/dble(a(k,k))                                  fit2-172
      if (k.eq.1) go to 30                                              fit2-173
      do 28 j=2,k                                                       fit2-174
      l=k+2-j                                                           fit2-175
      s=a(l-1,n1)                                                       fit2-176
      do 27 i=l,k                                                       fit2-177
      ij=ip(i)                                                          fit2-178
   27 s=s-dble(a(l-1,i))*dble(d(ij))                                    fit2-179
      ij=ip(l-1)                                                        fit2-180
   28 d(ij)=s/dble(a(l-1,l-1))                                          fit2-181
      go to 30                                                          fit2-182
c  error code                                                           fit2-183
   29 ir=-1                                                             fit2-184
   30 return                                                            fit2-185
      end                                                               fit2-186

c 30/11/95  ibm version                                         ecis95  calx-000
      subroutine calx(w,nw,dw,lo)                                       calx-001
c calx and the subroutines called by it read all the input except for   calx-002
c reduced nuclear matrix elements and external form factors.            calx-003
c w,nw,dw are the working field in equivalence by call,starting as      calx-004
c double precision.                                                     calx-005
c lo is the table of logical controls (see calc) .                      calx-006
c                                                                       calx-007
c addresses in the working field defined here ( common /decou/ )        calx-008
c 1     sp(3,ncolt) single precision floating values for the descriptioncalx-009
c            of channels. first index:                                  calx-010
c       1 - spin of incident particle                                   calx-011
c       2 - spin of the target                                          calx-012
c       3 - product of the charges of the particle and the target       calx-013
c  1- nipi  ipi(9,ncolt) integer values for the description of channels calx-014
c       1 - parity (0 for + and 1 for -)                                calx-015
c       2 - multiplicity of incident particle                           calx-016
c       3 - multiplicity of the target                                  calx-017
c       4 - index of potential or model                                 calx-018
c       5,6,7,8 - beginning and end in the two parts of table mf-fm     calx-019
c                           (see deph)                                  calx-020
c       9 - maximum angular momentum                                    calx-021
c  2- nipp  cross-reference to potentials                               calx-022
c  3- nwv   wv(11,ncolt) ibm-double precision values for the channels   calx-023
c       1 - mass of incident particle                                   calx-024
c       2 - mass of the target                                          calx-025
c       3 - energy in the center of mass in mev                         calx-026
c       4 - k wave number                                               calx-027
c       5 - coulomb parameter                                           calx-028
c       6 - square root of kf/ki (modified by ratio of step sizes)      calx-029
c       7 - energy in the center of mass in mev ( for dirac equation )  calx-030
c       8 - square root of ratio to reduced units                       calx-031
c       9 - k wave number multiplied by ratio of step sizes             calx-032
c      10 - reduced energy term                                         calx-033
c      11 - step size for this level                                    calx-034
c  4- nfis     fission data for compound nucleus                        calx-035
c  5- ngam     gamma data for compound nucleus                          calx-036
c  6- njit     data for interpolation on total spin (limit/step)        calx-037
c  7- nniv     addresses of reduced nuclear matrix elements and coulomb calx-038
c              integrals in niv(ncols,ncols,3)                          calx-039
c  8- niph     number of phonons for the harmonic vibrational model     calx-040
c  9- npar     nuclear parameters                                       calx-041
c 10- npot     optical potential parameters                             calx-042
c 11- nbeta    deformation parameters                                   calx-043
c 12- nfm      helicities and observables (see deph,lecd and obse)      calx-044
c 13- ndonn    experimental data                                        calx-045
c 14- nrc      permanent working field for the search                   calx-046
c 15- niw      integer working field for the search                     calx-047
c 16- nde      search accuracies                                        calx-048
c 17- nise     indexes of the variable parameters                       calx-049
c 18- ntx      partial reaction cross sections and compound nucleus     calx-050
c 19- ktgx     beginning of chi2 and normalisation of data              calx-051
c 20- nry      compound nucleus coefficients                            calx-052
c 21- nnvi     table of addresses of coupling coefficients              calx-053
c 22- ncc      table of energies, l*(l+1) and l*s  (see quan)           calx-054
c 23- nam1     computation of observables (see obse)                    calx-055
c 24- nfac     table of log of factorials for geometric coefficients    calx-056
c 25- nfam     matching values (see mtch)                               calx-057
c 26- npad     pade approximants                                        calx-058
c 27- nfg      coulomb functions and finite integrals                   calx-059
c 28- nxg      coulomb phases and infinite integrals                    calx-060
c 29- nsm      standard and helicity scattering matrix elements         calx-061
c 30- nres     functions for the search                                 calx-062
c 31- nxx      variables for the search                                 calx-063
c 32- nixt     penetrabilities of uncoupled states                      calx-064
c 33- nt       first free address                                       calx-065
c other variables of common /decou/                                     calx-066
c 34- idmt     total working field length                               calx-067
c 35- ncoll    number of coupled channels                               calx-068
c 36- ncols    number of channels with angular distributions            calx-069
c 37- ncolt    number of channels including uncoupled states            calx-070
c 38- njmax    maximum number of j-values                               calx-071
c 39- iterm    maximum number of iterations                             calx-072
c 40- npp      number of optical potentials                             calx-073
c 41- jdm      minimum number of total spin                             calx-074
c 42- jit      number of rates of interpolation on total spin           calx-075
c 43- nsec     number of hundredths of second saved for final output    calx-076
c 44- lmd      dimension of a table of coefficients: 2 but 3 for dirac  calx-077
c 45- h        step size for integration                                calx-078
c 46- bjm      convergence coefficient of imaginary potential           calx-079
c 47- eiter    convergence criterion for s-matrix                       calx-080
c 48- aconv    convergence criterion for potential and function         calx-081
c 49- conj     convergence criterion for the scattering amplitudes      calx-082
c 50- mcm(1)   maximum angular momentum for central coulomb corrections calx-083
c 51- mcm(2)   maximum angular momentum for spin-orbit coulomb correct. calx-084
c 52- nlt      memories needed for legendre polynomials                 calx-085
c 53- nva      number of nuclear parameters                             calx-086
c 54- nbet     number of different deformations                         calx-087
c 55- nbt1     number of phonons                                        calx-088
c 56- lmx      difference between number of j-values and of coul. funct.calx-089
c 57- lmax1    number of l-values for coulomb functions                 calx-090
c 58- aspin    k-value of the rotational band                           calx-091
c 59- ism      number of integration steps                              calx-092
c 60- iqm      maximum l-value of deformation in rotational model       calx-093
c 61- iqmax    maximum l-expansion in rotational model                  calx-094
c 62- inc      number of diagonal potentials (central+spin-orbit)       calx-095
c 63- ms1      largest particle multiplicity                            calx-096
c 64- ms2      largest target multiplicity                              calx-097
c 65- nct(4)   number of equations for each parity in 1 and 2           calx-098
c              number of solutions for each parity in 3 and 4           calx-099
c 69- kba      number of independent amplitudes                         calx-100
c 70- kab      maximum number of equations                              calx-101
c 71- kbc      maximum number of solutions                              calx-102
c 72- njc      maximum number of observables at equidistant angles      calx-103
c 73- jtx      maximum number of calculated values for a plot           calx-104
c 74- jth      maximum number of angles for a plot                      calx-105
c 75- ntot     number of experimental data                              calx-106
c 76- nrec     number of variables in search                            calx-107
c 77- ncolr    number of experimental angular distributions             calx-108
c 78- nrz      number of partial cross-section and compound nucleus datacalx-109
c 79- nfa      number of logarithms of factorials                       calx-110
c 80- lmax2    number of l values for coulomb phases                    calx-111
c 81- ke       control of search (see fite)                             calx-112
c 82- itemm    maximum number of iterations at the beginning of a run   calx-113
c 83- nplace   maximum working field used                               calx-114
c  for the ones after   see calc                                        calx-115
c common /titr/ title  comment card reproduced in the output            calx-116
c               theta1,theta2,dtheta,dthe,xz    see lect                calx-117
c               ncj    number of factorisations of 1/(1-cos)            calx-118
c               jmm    used between resu and scat                       calx-119
c common /dblpr/ibm-double precision for chi2                           calx-120
c               chi2m  initialisation of minimum chi2                   calx-121
c common /ncomp/nsp(1) number of uncoupled levels for compound nucleus  calx-122
c                      including discretisation of continuum            calx-123
c               nsp(2) number of these levels with angular distribution calx-124
c               nsp(3) number of these levels without angular distrib.  calx-125
c               nfiss  number of fission transmission coefficients      calx-126
c               nrd    number of gamma transmission coefficients        calx-127
c               ncont: number of continuum for compound nucleus         calx-128
c               ncoj:  number of spins of the target for a continuum    calx-129
c               acon1: ratio size/step for discretisation of a continuumcalx-130
c               acon2: maximum number of steps by mev for a continuum   calx-131
c               ncons: number of level densities needed                 calx-132
c               nie:   number of uncoupled states added for discret.    calx-133
c               ncoi:  address of the table for discret. of continuum   calx-134
c               nscn:  address of the description of level densities    calx-135
c               nxd:   address of weights and steps of continuum        calx-136
c               ncolx: total number of levels without discretisation    calx-137
c***********************************************************************calx-138
      dimension w(1),nw(1),ngr(2),npr(2),desc(5),to(100)                calx-139
      double precision chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn,dw(1)      calx-140
      logical lo(250)                                                   calx-141
      common /ncomp/ nsp(3),nfiss,nrd,ncont,ncoj,acn1,acn2,ncons,nie,ncocalx-142
     1i,nscn,nxd,ncolx,az(6),bz(3),tg0,bn,fnug,egd,ggd,tg1,sgsq         calx-143
      common /decou/ nipi,nipp,nwv,nfis,ngam,njit,nniv,niph,npar,npot,nbcalx-144
     1eta,nfm,ndonn,nrc,niw,nde,nise,ntx,ktgx,nry,nnvi,ncc,nam1,nfac,nfacalx-145
     2m,npad,nfg,nxg,nsm,nres,nxx,nixt,nt,idmt,ncoll,ncols,ncolt,njmax,icalx-146
     3term,npp,jdm,jit,nsec,lmd,h,bjm,eiter,aconv,conj,mcm(2),nlt,nva,nbcalx-147
     4et,nbt1,lmx,lmax1,aspin,ism,iqm,iqmax,inc,ms1,ms2,nct(4),kba,kab,kcalx-148
     5bc,njc,jtx,jth,ntot,nrec,ncolr,nrz,nfa,lmax2,ke,itemm,nplace,nnc,kcalx-149
     6xt,nivq,nifq,nrco,nrdo,nvc1,nvc2,ncx,lmax3,ipj                    calx-150
      common /titr/ title(18),theta1,theta2,dtheta,dthe,ncj,xz,jmm,nl(3)calx-151
      common /dblpr/ chi2,chi2m,cm,ck,chb,cmb,ccz,xe,xm,xn              calx-152
      data fin,desc /4hFIN ,4hDESC,4hRIPT,4hION ,2h T,2h  /             calx-153
c     data fin,desc /4hfin ,4hdesc,4hript,4hion ,2h t,2h  /             UNIX !!
    1 read (5,1000) title                                               calx-154
      do 2 j=1,3                                                        calx-155
      if (title(j).ne.desc(j)) go to 3                                  calx-156
    2 continue                                                          calx-157
      call inpa                                                         calx-158
      call inpb                                                         calx-159
      call inpc                                                         calx-160
      go to 1                                                           calx-161
    3 if (title(1).eq.fin) stop                                         calx-162
      do 4 i=1,100                                                      calx-163
    4 lo(i)=.false.                                                     calx-164
      read (5,1001) (lo(i),i=1,50)                                      calx-165
c if lo(36)=.true. return to restart a search saved on tape 8           calx-166
      if (lo(36)) return                                                calx-167
      read (5,1001) (lo(i),i=51,100)                                    calx-168
      read (5,1002) ncoll,njmax,iterm,npp,ncj,ngr,npr,lmz,jdm,lml,jit,nscalx-169
     1ec                                                                calx-170
c elimination of contradictions between logical controls                calx-171
      if (ncoll.le.1) lo(28)=.true.                                     calx-172
      if (.not.lo(31)) lo(32)=.false.                                   calx-173
      if (lo(14)) lo(13)=.true.                                         calx-174
      if (lo(19)) lo(11)=.true.                                         calx-175
      if (lo(92)) iterm=1                                               calx-176
      if (lo(100)) lo(29)=.false.                                       calx-177
      lo(209)=lo(99).or.lo(100)                                         calx-178
      if (lo(82)) lo(84)=.false.                                        calx-179
      if (lo(82)) lo(85)=.false.                                        calx-180
      if (lo(82)) lo(86)=.false.                                        calx-181
      if (lo(82).or.lo(84).or.lo(85).or.lo(86)) lo(81)=.true.           calx-182
      lo(44)=lo(44).and.lo(11)                                          calx-183
      if (.not.lo(99)) go to 5                                          calx-184
      lo(11)=.false.                                                    calx-185
      lo(19)=.false.                                                    calx-186
      if (lo(1)) lo(3)=.false.                                          calx-187
      if (.not.lo(1)) lo(2)=.false.                                     calx-188
    5 lmd=2                                                             calx-189
      lo(224)=lo(81).or.lo(63)                                          calx-190
      if (lo(100)) lmd=3                                                calx-191
      write (6,1003) idmt                                               calx-192
c output of logical controls                                            calx-193
      if (.not.lo(71)) go to 6                                          calx-194
      write (6,1004) (lo(i),lo(44+i),i=1,2),lo(3),lo(51),(lo(48+i),lo(i)calx-195
     1,i=4,8),lo(9),lo(57),lo(58)                                       calx-196
      write (6,1005) lo(11),lo(59),lo(12),(lo(i),lo(48+i),i=13,19),(lo(icalx-197
     1+47),lo(i),i=21,22)                                               calx-198
      write (6,1006) lo(71),lo(23),lo(72),lo(73),lo(24),lo(74),lo(25),localx-199
     1(75),lo(76),lo(26),lo(27),lo(77),lo(78),lo(28),lo(29),lo(81)      calx-200
      write (6,1007) (lo(i+51),lo(i),i=31,36),lo(37),(lo(i),i=91,93),(localx-201
     1(i),lo(i+56),i=41,43)                                             calx-202
      write (6,1008) lo(44),lo(100)                                     calx-203
    6 do 7 i=1,100                                                      calx-204
      to(i)=desc(5)                                                     calx-205
      if (lo(i)) to(i)=desc(4)                                          calx-206
    7 lo(100+i)=.not.lo(i)                                              calx-207
      if (lo(171)) write (6,1009) to                                    calx-208
      write (6,1010) title                                              calx-209
      if (lo(59).or.lo(177)) call hora                                  calx-210
      read (5,1011) h,rm,bjm,eiter,aconv,conj                           calx-211
c defect values of njmax,iterm,npp,ncj,npr,ngr,eiter,aconv,conj         calx-212
c for npr and ngr, see deph                                             calx-213
      if (njmax.eq.0) njmax=20                                          calx-214
      if (iterm.eq.0) iterm=20                                          calx-215
      if (npp.eq.0) npp=1                                               calx-216
      if (npr(1).eq.0) npr(1)=1                                         calx-217
      if (npr(2).eq.0) npr(2)=1                                         calx-218
      if (ngr(1).eq.0) ngr(1)=2                                         calx-219
      if (ngr(2).eq.0) ngr(2)=2                                         calx-220
      if (ncj.le.0) ncj=1                                               calx-221
      if (jit.eq.0) jit=1                                               calx-222
      if (nsec.eq.0) nsec=100                                           calx-223
      if (eiter.eq.0.) eiter=1.e-5                                      calx-224
      if (aconv.eq.0.) aconv=1.e-5                                      calx-225
      if (conj.eq.0.) conj=1.e-5                                        calx-226
c output of title, masses, etc..                                        calx-227
      write (6,1012) njmax,jdm,conj,ngr,npr                             calx-228
      if (lo(41)) write (6,1013) ncj                                    calx-229
      if (lml.ne.0) write (6,1014) lml                                  calx-230
      if (lo(121)) write (6,1015) iterm,eiter,aconv                     calx-231
      lo(228)=lo(21).or.lo(29).or.bjm.ne.0.                             calx-232
      if (bjm.ne.0.) write (6,1016) bjm                                 calx-233
      if (lo(21)) write (6,1017)                                        calx-234
      if (lo(21).and.lo(42)) write (6,1018) iterm                       calx-235
      if (lo(32).and.lo(34)) write (6,1019) nsec                        calx-236
      chi2m=1.d35                                                       calx-237
c initialisation of a search or a single run                            calx-238
      do 8 i=211,220                                                    calx-239
    8 lo(i)=.false.                                                     calx-240
      lo(222)=.true.                                                    calx-241
      call memo(idmt,0,m,1,lo)                                          calx-242
      if (lo(216)) go to 31                                             calx-243
c limitation on angular momentum for coulomb corrections                calx-244
      mcm(1)=3                                                          calx-245
      mcm(2)=2                                                          calx-246
      if (lo(145)) go to 9                                              calx-247
      read (5,1002) mc1,mc2                                             calx-248
      if (mc1.gt.0) mcm(1)=min0(mc1,4)                                  calx-249
      if (lo(200).and.(mc2.gt.0)) mcm(2)=min0(mc2,2)                    calx-250
      if (lo(100).and.(mc2.gt.0)) mcm(2)=min0(mc2,3)                    calx-251
      if (mc1.lt.0) mcm(1)=0                                            calx-252
      if (mc2.lt.0) mcm(2)=0                                            calx-253
      write (6,1020) mcm                                                calx-254
    9 nl2=3*njmax                                                       calx-255
      nl3=2*njmax                                                       calx-256
c legendre polynomials data                                             calx-257
      if (lo(165)) go to 10                                             calx-258
      read (5,1002) nl                                                  calx-259
      if (nl(1).eq.0) nl(1)=2                                           calx-260
      if (nl(2).ne.0) nl2=nl(2)                                         calx-261
      if (nl(3).ne.0) nl3=nl(3)                                         calx-262
      if (lo(65)) write (6,1021) nl                                     calx-263
c compound nucleus data                                                 calx-264
   10 nsp(1)=0                                                          calx-265
      nsp(2)=0                                                          calx-266
      nsp(3)=0                                                          calx-267
      nfiss=0                                                           calx-268
      nrd=0                                                             calx-269
      ncont=0                                                           calx-270
      ncons=0                                                           calx-271
      if (lo(184).and.lo(185).and.lo(186)) go to 11                     calx-272
      read (5,1022) nsp(1),nsp(2),nfiss,nrd,ncont,ncoj,acn1,acn2        calx-273
      if (lo(184)) nsp(1)=0                                             calx-274
      nsp(2)=min0(nsp(1),nsp(2))                                        calx-275
      nsp(3)=nsp(1)-nsp(2)                                              calx-276
      if (nsp(3).lt.ncont) go to 29                                     calx-277
      if (lo(185)) nfiss=0                                              calx-278
      if (lo(186)) nrd=0                                                calx-279
      if (nsp(3).eq.0) lo(84)=.false.                                   calx-280
      lo(184)=.not.lo(84)                                               calx-281
      if (nfiss.eq.0) lo(85)=.false.                                    calx-282
      lo(185)=.not.lo(85)                                               calx-283
      if (lo(84).or.lo(85).or.lo(86)) write (6,1023) nsp,nfiss,nrd,ncontcalx-284
      ncons=ncont                                                       calx-285
      if (lo(86).and.nrd.eq.0) ncons=ncons+1                            calx-286
      if (ncont.eq.0) go to 11                                          calx-287
      if (ncoj.le.0) ncoj=30                                            calx-288
      if (acn1.le.1.) acn1=8.                                           calx-289
      if (acn2.le.1.) acn2=8.                                           calx-290
      write (6,1024) ncoj,acn1,acn2                                     calx-291
   11 ncolt=ncoll+nsp(1)                                                calx-292
      ncols=ncoll+nsp(2)                                                calx-293
      ncoi=3*ncolt+1                                                    calx-294
      njit=ncoi+2*ncont                                                 calx-295
      nipp=njit                                                         calx-296
c interpolation data                                                    calx-297
      if (lo(143)) go to 13                                             calx-298
      nipp=njit+2*jit                                                   calx-299
      n=nipp-1                                                          calx-300
      read (5,1002) (nw(i),i=njit,n)                                    calx-301
      write (6,1025) (nw(i),i=njit,n)                                   calx-302
      m=0                                                               calx-303
      l=-1                                                              calx-304
      k=njit                                                            calx-305
      do 12 i=1,jit                                                     calx-306
      if (nw(k).lt.l) go to 30                                          calx-307
      l=nw(k)                                                           calx-308
      nw(k+1)=nw(k+1)-m                                                 calx-309
      m=m+nw(k+1)                                                       calx-310
   12 k=k+2                                                             calx-311
      write (6,1026) (nw(i+1),i=njit,n,2)                               calx-312
c input of level descriptions                                           calx-313
   13 nipi=nipp+npp                                                     calx-314
      nwv=(nipi+9*ncolt)/2+1                                            calx-315
      niph=2*(nwv+11*ncolt)-1                                           calx-316
      nfm=niph+6*ncols                                                  calx-317
      if (nfm+20*ncols.gt.idmt) call memo(idmt,nfm+20*ncols,m,2,lo)     calx-318
      if (lo(216)) go to 31                                             calx-319
      nscn=niph                                                         calx-320
      ix=0                                                              calx-321
      nxd=nscn                                                          calx-322
   14 call lecl(ncolt,ncoll,npp,w,nw(nipi),nw(nipp),dw(nwv),nw(niph),npacalx-323
     1r,nva,nscn,aimax,nbet,w(nfm),x2,nw(ncoi),w(nxd),ix,lo)            calx-324
      nniv=nscn+8*ncons                                                 calx-325
      if ((ncont.eq.0).or.(ix.eq.1)) go to 21                           calx-326
c transfer of level description for discretisation of continuum for     calx-327
c compound nucleus                                                      calx-328
      ix=1                                                              calx-329
      ns1=3*nie                                                         calx-330
      nwvn=(nipi+12*nie+9*(ncolt+nie))/2+1                              calx-331
      ns2=nwvn-nwv                                                      calx-332
      njph=2*(nwvn+11*(ncolt+nie))-1                                    calx-333
      ns3=njph-niph                                                     calx-334
      npar=npar+ns3                                                     calx-335
      if (npar.gt.idmt) call memo(idmt,npar,m,2,lo)                     calx-336
      if (lo(216)) go to 31                                             calx-337
      if (nva.eq.0) go to 16                                            calx-338
      do 15 j=1,nva                                                     calx-339
      i=npar+nva-j                                                      calx-340
   15 w(i)=w(i-ns3)                                                     calx-341
   16 if (njph.eq.npar) go to 18                                        calx-342
      n=npar-njph                                                       calx-343
      do 17 j=1,n                                                       calx-344
      i=njph+n-j                                                        calx-345
   17 nw(i)=nw(i-ns3)                                                   calx-346
   18 n=11*ncolt                                                        calx-347
      do 19 j=1,n                                                       calx-348
      i=nwv+n-j                                                         calx-349
   19 dw(i+ns2)=dw(i)                                                   calx-350
      n=2*nwv-ncoi                                                      calx-351
      do 20 j=1,n                                                       calx-352
      i=ncoi+n-j                                                        calx-353
   20 nw(i+ns1)=nw(i)                                                   calx-354
      ncoi=ncoi+ns1                                                     calx-355
      njit=njit+ns1                                                     calx-356
      nipp=nipp+ns1                                                     calx-357
      nipi=nipi+ns1                                                     calx-358
      nwv=nwvn                                                          calx-359
      niph=njph                                                         calx-360
      nsp(1)=nsp(1)+nie                                                 calx-361
      nsp(3)=nsp(3)+nie                                                 calx-362
      ncolt=ncoll+nsp(1)                                                calx-363
      nxd=npar+nva                                                      calx-364
      nscn=nxd+3*nie+3*ncont                                            calx-365
      go to 14                                                          calx-366
c input of potentials, deformations ......                              calx-367
   21 nbt1=nbet                                                         calx-368
      lmx=aimax+3.1                                                     calx-369
      lmax1=njmax+lmx                                                   calx-370
      if (lml.eq.0) lml=lmax1                                           calx-371
      nw(nipi+8)=lml                                                    calx-372
      nfis=nniv+3*ncols*ncols                                           calx-373
      ngam=nfis+2*nfiss                                                 calx-374
      npot=ngam+nrd                                                     calx-375
      nbeta=npot+34*npp                                                 calx-376
      if (lo(7)) nbeta=npot                                             calx-377
      nfm=nbeta                                                         calx-378
      if (nfm+10*nbet.gt.idmt) call memo(idmt,nfm+10*nbet,m,2,lo)       calx-379
      if (lo(216)) go to 31                                             calx-380
      if (w(nwv+4).eq.0.) nl2=nl3                                       calx-381
      nlt=max0(nl2,nl3)                                                 calx-382
      if (lo(165)) nlt=0                                                calx-383
      call lect(ncoll,nbet,w,nw(nipi),nw(nipp),dw(nwv),nw(nbeta),w(nbetacalx-384
     1),w(npot),w(nfis),w(ngam),npp,nfm,rm,x2,aconv,idmt,idmt-nfm,h,aspicalx-385
     2n,ism,iqm,iqmax,w(nscn),ncons,lo)                                 calx-386
      inc=2*npp                                                         calx-387
      if (lo(201).and.lo(203)) inc=npp                                  calx-388
      if (lo(59)) call hora                                             calx-389
c helicity amplitudes and observables                                   calx-390
      njx=ncolt                                                         calx-391
      call deph(ncoll,ncols,w,dw(nwv),nw(nipi),nw(nfm),w(nfm),ms1,ms2,nccalx-392
     1t,kba,kab,kbc,ktgr,ngr,npr,jtx,idmt,nw(nniv),njc,njx,njy,idmt-nfm,calx-393
     2lo)                                                               calx-394
      jth=0                                                             calx-395
      if (lo(166)) jth=int((theta2-theta1)/dtheta+1.5)                  calx-396
      jtx=jtx*jth                                                       calx-397
      ngrm=nfm+9*kba                                                    calx-398
      nmax=nfm+9*ktgr                                                   calx-399
      ktg=ktgr                                                          calx-400
      ntot=0                                                            calx-401
      nrec=0                                                            calx-402
      if (lo(131)) go to 26                                             calx-403
c number of parameters in search and experimental data                  calx-404
      read (5,1027) ncolr,nrec,nfit,nessai,ech,rap                      calx-405
      write (6,1028) ncolr                                              calx-406
      if (ncolr.le.0) go to 24                                          calx-407
      ndonn=nmax+18*ncolr                                               calx-408
      ktgr=ktgr+ncolr                                                   calx-409
c experimental data                                                     calx-410
      if (idmt.le.ndonn) call memo(idmt,ndonn,n,3,lo)                   calx-411
      if (lo(216)) go to 31                                             calx-412
      call lecd(ncols,ncolr,ktg,nw(nfm),w(nfm),w(ndonn),ngr,ntot,jth,njycalx-413
     1,idmt,idmt-ndonn,lo)                                              calx-414
      jtx=max0(jth,jtx)                                                 calx-415
      nmax=ndonn+6*ntot                                                 calx-416
      if (lo(132)) go to 26                                             calx-417
      if (nrec.le.0) go to 25                                           calx-418
c search conditions                                                     calx-419
c defect values for nessai (maximum number of evaluations) and ech      calx-420
c nfit is the number of functions stored for search beyond nrec+1       calx-421
      nrc=nmax                                                          calx-422
      if (nessai.eq.0) nessai=100                                       calx-423
      if (ech.eq.0.) ech=20.                                            calx-424
      if (rap.lt.1.) rap=1.                                             calx-425
      kfit=nrec+nfit+1                                                  calx-426
      niw=nrc+3+max0(14+nrec+kfit*(ntot+nrec+1),(nrec*(nrec+5))/2)      calx-427
      if (idmt.le.niw) call memo(idmt,niw,n,3,lo)                       calx-428
      if (lo(216)) go to 31                                             calx-429
      nw(niw)=kfit                                                      calx-430
      nw(niw+1)=nessai                                                  calx-431
      nw(niw+2)=1                                                       calx-432
      w(nrc)=ech                                                        calx-433
      w(nrc+1)=rap                                                      calx-434
      w(nrc+2)=0.                                                       calx-435
      write (6,1029) nrec,kfit,nessai,ech,rap                           calx-436
      nde=niw+kfit+4                                                    calx-437
      nise=nde+nrec                                                     calx-438
      read (5,1011) (w(nde-1+j),j=1,nrec)                               calx-439
      read (5,1002) (nw(nise-1+i),i=1,nrec)                             calx-440
      write (6,1030) (i,nw(nise+i-1),w(nde+i-1),i=1,nrec)               calx-441
      nmax=nise+nrec                                                    calx-442
      do 22 i=1,nrec                                                    calx-443
c a negative value -k instead of indexes of parameters means that k     calx-444
c parameters will be kept proportional - input of their indexes         calx-445
      k=nw(nise+i-1)                                                    calx-446
      if (k.gt.0) go to 22                                              calx-447
      k=-k                                                              calx-448
      nw(nmax)=k                                                        calx-449
      read (5,1002) (nw(nmax+j),j=1,k)                                  calx-450
      write (6,1031) i,(nw(nmax+j),j=1,k)                               calx-451
      nw(nise+i-1)=nise-nmax-1                                          calx-452
      nmax=nmax+k+1                                                     calx-453
   22 continue                                                          calx-454
      if (lo(76).or.lo(175)) go to 26                                   calx-455
      do 23 i=51,65                                                     calx-456
      lo(i+180)=lo(i)                                                   calx-457
      lo(i)=.false.                                                     calx-458
   23 lo(i+100)=.true.                                                  calx-459
      lo(215)=.true.                                                    calx-460
      go to 26                                                          calx-461
   24 write (6,1032)                                                    calx-462
      lo(31)=.false.                                                    calx-463
      lo(131)=.true.                                                    calx-464
   25 if (lo(32)) write (6,1033)                                        calx-465
      lo(32)=.false.                                                    calx-466
      lo(132)=.true.                                                    calx-467
   26 if (lo(59)) call hora                                             calx-468
      ktgx=nfm+9*ktgr                                                   calx-469
      ntx=nmax                                                          calx-470
      nry=ntx+ncols+1                                                   calx-471
      if (lo(81)) nry=nry+2+ncolt                                       calx-472
      nnvi=nry                                                          calx-473
      if (lo(81)) nnvi=nnvi+njmax*(kba+2+nsp(3))                        calx-474
      nrz=nnvi-ntx                                                      calx-475
      if (lo(32)) nnvi=2*nnvi-ntx                                       calx-476
      ncc=nnvi+4*kab*kab                                                calx-477
      nam1=(ncc+7*kab)/2+1                                              calx-478
      nam2=nam1+4*(njy+9)                                               calx-479
      if (2*nam2.gt.idmt) call memo(idmt,2*nam2,n,3,lo)                 calx-480
      if (lo(216)) go to 31                                             calx-481
c do loops and cg-coefficients for observables                          calx-482
      call obse(nw(ngrm),ktgr-kba,ncolr,nw(nipi),dw(nam1),nw(2*nam1-1),dcalx-483
     1w(nam2),nw(2*nam2-1),jcal,idmt-2*nam2,idmt,lo)                    calx-484
      nfa=4*lmax1+10-2*njmax                                            calx-485
      nfac=nam1+jcal                                                    calx-486
      nfam=nfac+nfa+1                                                   calx-487
      npad=nfam+kab*(2*kbc+8)                                           calx-488
      if (lo(224)) npad=nfam+kab*(2*kab+8)                              calx-489
      nfg=npad+2*iterm*(kab+2)                                          calx-490
      if (lo(21).or.lo(22)) nfg=npad                                    calx-491
      lmax2=lmax1                                                       calx-492
      if (.not.lo(208)) go to 27                                        calx-493
      lmax1=lmz+lmx                                                     calx-494
      if (lmz.eq.0) lmax1=lmax2-njmax/2                                 calx-495
      if (lmz.lt.0) lmax1=lmax2                                         calx-496
      write (6,1034) lmax2,lmax1                                        calx-497
   27 nxg=nfg+4*njx*lmax1                                               calx-498
      nsm=nxg+njx*lmax2                                                 calx-499
      nres=2*nsm+4*njmax*kba-1                                          calx-500
      if (lo(32)) nres=nres+4*njmax*kba                                 calx-501
      ke=0                                                              calx-502
      nxx=nres+ntot                                                     calx-503
      nixt=nxx+nrec                                                     calx-504
      nt=2*(nixt/2)+1                                                   calx-505
      itemm=iterm                                                       calx-506
      nplace=nt                                                         calx-507
      if (idmt.le.nplace) call memo(idmt,nplace,n,3,lo)                 calx-508
      if (lo(216)) go to 31                                             calx-509
      dw(nfac)=0.d0                                                     calx-510
      do 28 i=1,nfa                                                     calx-511
      dw(nfac+i)=i                                                      calx-512
   28 dw(nfac+i)=dw(nfac+i-1)+dlog(dw(nfac+i))                          calx-513
      return                                                            calx-514
   29 write (6,1035) nsp(3),ncont                                       calx-515
      go to 31                                                          calx-516
   30 write (6,1036) i,nw(k),l                                          calx-517
   31 write (6,1037)                                                    calx-518
      stop                                                              calx-519
 1000 format (18a4)                                                     calx-520
 1001 format (50l1)                                                     calx-521
 1002 format (14i5)                                                     calx-522
 1003 format (1h1,20x,82he. c. i. s. code for coupled channels calculaticalx-523
     1ons ( 1995 ) working field length =,i10//24x,87hto obtain the inpucalx-524
     2t description, punch 'description ' in columns 1-12 of the first ccalx-525
     3ard//)                                                            calx-526
 1004 format (4h  1-,l2,44h - rotational model-(.f.: vibrational model),calx-527
     19x,5h| 45-,l2,50h - angular momentum limit for coulomb correctionscalx-528
     2./4h  2-,l2,58h - second order vibrational model-(.f.: first ordercalx-529
     3) | 46-,l2,34h - restricted coulomb corrections./9x,43hor constraicalx-530
     4ned asymmetric rotational model.,7x,1h|/4h  3-,l2,58h - anharmoniccalx-531
     5 vibrational model-(.f.: harmonic) or   | 51-,l2,24h - output of pcalx-532
     6otentials./9x,44hasymmetric rotational model-(.f.: symmetric),6x,5calx-533
     7h| 52-,l2,45h - output of reduced nuclear matrix elements./4h  4-,calx-534
     8l2,58h - parametrised spin-orbit deformation-(.f.:standard)| 53-,lcalx-535
     92,38h - output of the number of iterations./4h  5-,l2,58h - differcalx-536
     aent deformation for each potential(.f.:same)| 54-,l2,50h - output calx-537
     bof the length used in the working field./4h  6-,l2,30h - use of decalx-538
     cformation lengths.,23x,5h| 55-,l2,31h - output of c-matrix elementcalx-539
     ds./4h  7-,l2,58h - nuclear matrix elements and form factors on carcalx-540
     eds.| 56-,l2,51h - output of s-matrix elements and compound nucleuscalx-541
     f/4h  8-,l2,27h - relativistic kinematics.,26x,1h|,9x,21hintermediacalx-542
     gte results./4h  9-,l2,43h - symmetrised woods-saxon form factors fcalx-543
     hor,10x,5h| 57-,l2,53h - output of phase-shifts at each e.c.i.s. itcalx-544
     ieration./9x,29hnegative values of the radius,21x,5h| 58-,l2,50h - calx-545
     joutput of the coefficients of each form factor.)                  calx-546
 1005 format (59x,1h|,9x,26hfor all sets of equations./4h 11-,l2,30h - dcalx-547
     1eformed coulomb potential.,23x,5h| 59-,l2,39h - output of time difcalx-548
     2ferences in a run./4h 12-,l2,32h - deformed imaginary potential.,2calx-549
     31x,1h|/4h 13-,l2,45h - deformed real spin-orbit/tensor potential.,calx-550
     48x,5h| 61-,l2,52h - reduced nuclear matrix elements punched on carcalx-551
     5ds./4h 14-,l2,58h - deformed imaginary spin-orbit/tensor potentialcalx-552
     6.   | 62-,l2,31h - potentials punched on cards./4h 15-,l2,58h - recalx-553
     7duced nuclear matrix elements read from cards.  | 63-,l2,36h - pencalx-554
     8etrabilities punched on cards./4h 16-,l2,58h - heavy-ion definitiocalx-555
     9n of radii and deformations.   | 64-,l2,50h - results at equidistacalx-556
     ant angles punched on cards./4h 17-,l2,17h - folding model.,36x,5h|calx-557
     b 65-,l2,49h - legendre expansion for cross-sections punched./4h 18calx-558
     c-,l2,40h - projectile-target antisymmetrisation.,13x,5h| 66-,l2,40calx-559
     dh - no calculation at equidistant angles./4h 19-,l2,41h - deformedcalx-560
     e coulomb spin-orbit potential.,12x,5h| 67-,l2,32h - no plot of expcalx-561
     ferimental data./59x,5h| 68-,l2,51h - no plot of cross-sections at calx-562
     gequidistant angles./4h 21-,l2,44h - usual coupled equations-(.f.: calx-563
     hiterations),9x,5h| 69-,l2,50h - no plot of polarisations at equidicalx-564
     istant angles./4h 22-,l2,54h - no use of pade approximants for convcalx-565
     jergence of    |)                                                  calx-566
 1006 format (9x,15hthe iterations.,35x,5h| 71-,l2,39h - detailed outputcalx-567
     1 of logical controls./4h 23-,l2,42h - no use of pade approximant rcalx-568
     2esults when,11x,5h| 72-,l2,51h - no output of experimental data ascalx-569
     3 they are read./9x,28hconvergence is not obtained.,22x,5h| 73-,l2,calx-570
     453h - no output of external potentials as they are read./4h 24-,l2calx-571
     5,58h - coupling potentials computed at each iteration.   | 74-,l2,calx-572
     635h - output of variations in storage./4h 25-,l2,58h - complete cacalx-573
     7lculation up to the end-(.f.: one ite- | 75-,l2,51h - no complete calx-574
     8output at the first run of a search./9x,55hration only as soon as calx-575
     9two iterations are enough) | 76-,l2,50h - lo(51) to lo(65) are alwcalx-576
     aays used-(.f.: only for/4h 26-,l2,54h - integration stabilised forcalx-577
     b long range potential.  |,9x,16hcomplete output)/4h 27-,l2,58h - ncalx-578
     cumerov's method for single equations-(.f.: modi- | 77-,l2,51h - nocalx-579
     d output of time differences during the search./9x,22hfied numerov'calx-580
     es method),28x,5h| 78-,l2,48h - no output of differences between excalx-581
     fperimental/4h 28-,l2,54h - computation up to j-convergence-(.f.: scalx-582
     htop when   |,9x,22hand calculated values./9x,43hall the inhomogenecalx-583
     gous terms are negligible),7x,1h|/4h 29-,l2,38h - no diagonal term calx-584
     iin second members.,15x,5h| 81-,l2,49h - hauser-feshbach correctioncalx-585
     js to cross-sections.)                                             calx-586
 1007 format (59x,5h| 82-,l2,39h - simplest compound nucleus formalism./calx-587
     14h 31-,l2,58h - input of experimental data and chi2 calculation.  calx-588
     2| 83-,l2,47h - no engelbretch-weidenmuller transf. in c.-n./4h 32-calx-589
     3,l2,39h - automatic search on some parameters.,14x,5h| 84-,l2,41h calx-590
     4- uncoupled levels for compound nucleus./4h 33-,l2,39h - symmetriscalx-591
     5ed chi2 for cross-sections.,14x,5h| 85-,l2,36h - fission data in ccalx-592
     6ompound nucleus./4h 34-,l2,58h - number of evaluations limited by calx-593
     7the job card.    | 86-,l2,43h - gamma emission data in compound nucalx-594
     8cleus./4h 35-,l2,58h - search saved on tape 8 if ended by lack of calx-595
     9time.  | 87-,l2,25h - no width fluctuations./4h 36-,l2,32h - restacalx-596
     art a search from tape 8.,21x,1h|/4h 37-,l2,47h - next calculation calx-597
     bchanging energy and/or some,6x,5h| 91-,l2,47h - equidistant anglescalx-598
     c in the laboratory system./9x,11hparameters.,39x,5h| 92-,l2,25h - calx-599
     dpure dwba calculation./59x,5h| 93-,l2,38h - no recoil correction fcalx-600
     eor reactions./4h 41-,l2,58h - factorisation of 1/(1-cos(theta)) incalx-601
     f amplitudes.  | 94-,l2,50h - non standard observables at equidistacalx-602
     gnt angles./4h 42-,l2,58h - schmidt's orthogonal. in usual coupled calx-603
     hequations. | 98-,l2,39h - use of rest mass in dirac equations./4h calx-604
     i43-,l2,31h - interpolation on total spin.,22x,5h| 99-,l2,45h - schcalx-605
     jroedinger equivalent to dirac equation.)                          calx-606
 1008 format (4h 44-,l2,23h - coulomb corrections.,30x,5h|100-,l2,27h - calx-607
     1complete dirac equation./1h1)                                     calx-608
 1009 format (//29h **** first control card ****,2x,2h1 ,9(2h 1),3h 2 ,9calx-609
     1(2h 2),3h 3 ,9(2h 3),3h 4 ,9(2h 4),2h 5/11x,5(21h  1 2 3 4 5 6 7 8calx-610
     2 9 0)/11x,5(1x,10a2)//29h *** second control card ****,2x,2h1 ,9(2calx-611
     3h 1),3h 2 ,9(2h 2),3h 3 ,9(2h 3),3h 4 ,9(2h 4),2h 5/11x,5(21h  1 2calx-612
     4 3 4 5 6 7 8 9 0)/11x,5(1x,10a2)/)                                calx-613
 1010 format (10x,82(1h*)/10x,1h*,80x,1h*/10x,1h*,4x,18a4,4x,1h*/10x,1h*calx-614
     1,80x,1h*/10x,82(1h*)/)                                            calx-615
 1011 format (7f10.3)                                                   calx-616
 1012 format (20h maximum number of j,i6,6h  (min,i3,49h) stop when maxicalx-617
     1mum s-matrix element is less than,e18.4//35h plot conditions for ccalx-618
     2ross-sections,2i5,5x,17hfor polarisations,2i5/)                   calx-619
 1013 format (4x,i3,52h factorisation of 1/(1-cos(theta)) in the amplitucalx-620
     1des)                                                              calx-621
 1014 format (27h angular momenta limited to,i5)                        calx-622
 1015 format (10x,47hiteration method:  maximum number of iterations,i10calx-623
     1/10x,22hconvergence criterion:,e15.2,13h for s-matrix,e15.2,29h focalx-624
     2r potentials and functions/)                                      calx-625
 1016 format (44h imaginary potential increased with a factor,f10.5,23h calx-626
     1for better convergence)                                           calx-627
 1017 format (24h usual coupled equations)                              calx-628
 1018 format (34h schmidt's orthogonalisation every,i5,7h  steps)       calx-629
 1019 format (5x,i5,44h hund of second spared at the end of the job)    calx-630
 1020 format (47h coulomb corrections limited to angular momenta,i2,21h calx-631
     1for central term and,i2,20h for spin-orbit term)                  calx-632
 1021 format (/69h indications for expansion of cross-sections in legendcalx-633
     1re polynomials:,3i5)                                              calx-634
 1022 format (6i5,2f10.5)                                               calx-635
 1023 format (/24h compound nucleus input:,i5,17h uncoupled states,i4,30calx-636
     1h with angular distribution and,i4,29h without angular distributiocalx-637
     2n/24x,i5,23h fission transm. coeff./24x,i5,21h gamma transm. coeffcalx-638
     3./24x,i5,9h continua)                                             calx-639
 1024 format (48h maximum number of spin values in the continuum:,i5/21hcalx-640
     1 discretisation with:,2f10.5)                                     calx-641
 1025 format (26h interpolation of s-matrix,3(2x,4hfrom,i6,13h  by stepscalx-642
     1 of,i4,2h+1))                                                     calx-643
 1026 format (24h uncumulated increases  ,3(27x,i4))                    calx-644
 1027 format (4i5,2f10.5)                                               calx-645
 1028 format (//5x,i5,36h  experimental angular distributions/)         calx-646
 1029 format (//5x,i5,21h parameters in search/5x,i5,15h results stored/calx-647
     15x,i5,23h runs    starting scale,f10.2/12x,21hmultiplication factocalx-648
     2r,f10.2/)                                                         calx-649
 1030 format (5x,i5,5x,i5,5x,f15.8)                                     calx-650
 1031 format (5x,i5,20h variable defined as,20i5/(18x,20i5))            calx-651
 1032 format (48h there are no experimental data   ...  no search)      calx-652
 1033 format (23h no parameter in search)                               calx-653
 1034 format (2x,i10,40h coulomb phases and indefinite integrals/2x,i10,calx-654
     139h coulomb functions and finite integrals)                       calx-655
 1035 format (56h number of uncoupled states without angular distributiocalx-656
     1n,i5,34h less than the number of continua:,i5)                    calx-657
 1036 format (2x,i3,25hth limit of interpolation,i6,26h smaller than precalx-658
     1vious one,i6)                                                     calx-659
 1037 format (22h in calx  ... stop ...)                                calx-660
      end                                                               calx-661

      SUBROUTINE STIM(I)
C
C     VALID for MSFORTRAN and LAHEY compilers, return 0 otherwise
C
	INTEGER*4 I
C GIVES THE TIME ELAPSED IN ...
C  
C====================================================================
C     REAL*4 BEGTIM,CURTIM,DIFTIM
C     INTEGER*2 IHR,MIN,ISEC,I110,IHRM,MINM,ISECM,I110M
C     COMMON/INIT/NINIC,BEGTIM   
      
C     IF(NINIC.EQ.0) THEN 
C 	 NINIC=1	
c	 CALL GETTIM (IHRM,MINM,ISECM,I110M)
c	 BEGTIM=DBLE(IHRM*3600.+MINM*60.+ISECM+I110M*.01)
C	ENDIF 

c     CALL GETTIM (IHR,MIN,ISEC,I110)
c     CURTIM=DBLE(IHR*3600.+MIN*60.+ISEC+I110*.01)
c	DIFTIM=CURTIM-BEGTIM
C	I=(38500.D0*(3300.-DIFTIM))

      I=0 

	RETURN
C====================================================================
      END
