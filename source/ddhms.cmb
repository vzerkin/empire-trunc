c CVS Version Management $Revision: 2345 $
c $Id: ddhms.cmb,v 1.8 2007/09/03 14:20:29 Capote Exp $
c 
	integer ndim_ebins
	parameter (ndim_ebins = 200)    !must be >  emax=einc+Q /debin
	integer maxnemiss  
	parameter (maxnemiss = 5)  ! max number of emitted preeq. nucleons  
        integer ndexcluhms
        parameter (ndexcluhms = 15) ! max number of exclusive spectra and DDX's 

	integer ndim_zem,ndim_nem   
	parameter (ndim_zem = maxnemiss)  !max # of protons emitted	
	parameter (ndim_nem = maxnemiss)  !max # of neutrons emitted

	integer ndim_jbins,ndim_recbins
	parameter (ndim_jbins = 50)  ! number of spin bins
	parameter (ndim_recbins = 50)! number of recoil kinetc energy bins

        integer ndanghms,ndanghms1,ndanghms2
        parameter(ndanghms=37)
        parameter(ndanghms1=ndanghms-1,ndanghms2=2*ndanghms1)

        INTEGER nemx, nxmx
        PARAMETER(nemx=50,nxmx=20) ! dimensions of energy selecton tables

! other hardwired dimensions:
! 100=number of p-h states that can be created and deexcited in the 
!     MC cascade. 100 should be more than enough even at high energies
!  ndanghms1 = number of theta angle bins (every 5 degrees)
!  ndanghms2 = number of   phi angle bins (every 5 degrees)

!--------------------------------------------------------------
c  damping rate test
      REAL*8 vp,vh,vp2,vh2,vpe,vpe2,vhe,vhe2
      INTEGER npv,nhv
      common/matave/vp,vh,vp2,vh2,vpe,vpe2,vhe,vhe2,npv,nhv

c input flags controling print of history file and recoil information in o/p
      common/iflagprint/ ihistlab, irecprint, iomlread
      integer ihistlab,irecprint, iomlread

c quasideuteron frac. of photoabsorption cross section -- used in SETUPINITPH
      real*8 QDFrax
      common/qdsetup/ QDFrax

c lookup tables for particle energy selection for Fermi distributions
      INTEGER ntmx, ifermi
      REAL*8 tab2, tab3, eav2, rho3, detab
      COMMON/seltabs/tab2(0:nxmx,0:nemx), tab3(0:nxmx,0:nemx),
     1          eav2(0:nemx), rho3(0:nemx), detab, ntmx, ifermi

c /nstates/  nexist = number of 1p and 1h states excited and yet to decay
c            ntot = total # 1p and 1h states that have been created
      common/nstates/  nexist, ntot
      integer nexist, ntot

c /iexistph/ iexist...(n) - label 1 - particle, 0 - inactive, -1 - hole
      common/iexistph/ iexist(200)
      integer iexist
 
c phprops describes U,theta,phi,mom, gamma_up, gamma_down of nth p or h state
      common/phprops/uex(200), th(200), ph(200), zk(200),
     + gamup(200),gamdown(200)
      real*8 uex, th, ph, zk, gamup, gamdown
 
c /empropos/ for 1-event, eemiss,th...,ph.. describes channel energy,angle of ejectile,
c and "l" at end implies laboratory frame
      common/emissprops/eemiss(100),themiss(100),phemiss(100),
     +                  eemissl(100),themissl(100),phemissl(100)
c /iemissprops/ izaemiss labels the ejectile type (=1000Z+A)
c jnresid, jzresid give the N,Z of the residual (running variables decreased as part. are emitted)
      common/iemissprops/ izaemiss(100),jnresid, jzresid,
     +jninitcn,jzinitcn
	
      real*8 eemiss,themiss,phemiss,eemissl,themissl,phemissl
      integer izaemiss,jnresid, jzresid,jninitcn,jzinitcn

c /xsection/ exclusive cross  sections
      real*8 xsnx,xspx,xsn0,xsp0
      common/xsection/ xsnx(0:ndim_zem,0:ndim_nem),
     +                 xspx(0:ndim_zem,0:ndim_nem),
     +                 xsn0,xsp0
 
c /spec/ arrays of neutron and proton differential spectra
      common/binning/debin,debinrec
      real*8 debin,debinrec
      common/spec/ dxsn(0:ndim_ebins),dxsp(0:ndim_ebins), 
     +             ddxsn(0:ndim_ebins,ndanghms),
     +             ddxsp(0:ndim_ebins,ndanghms),
     +             dxsnx(0:ndim_ebins,0:ndim_zem,0:ndim_nem),
     +             dxspx(0:ndim_ebins,0:ndim_zem,0:ndim_nem),
     +             dxsnex(0:ndim_ebins,0:ndim_ebins,ndexcluhms),
     +             dxspex(0:ndim_ebins,0:ndim_ebins,ndexcluhms)
      real*8 dxsn,dxsp,ddxsn,ddxsp,dxsnx,dxspx,dxsnex,dxspex
      common/speclab/ dxsnlab(0:ndim_ebins),dxsplab(0:ndim_ebins), 
     +           dxsnxlab(0:ndim_ebins,0:ndim_zem,0:ndim_nem),
     +           dxspxlab(0:ndim_ebins,0:ndim_zem,0:ndim_nem),
     +           ddxsnlab(0:ndim_ebins,ndanghms),
     +           ddxsplab(0:ndim_ebins,ndanghms),
     +           ddxsnxlab(0:ndim_ebins,ndanghms,0:ndim_zem,0:ndim_nem),
     +           ddxspxlab(0:ndim_ebins,ndanghms,0:ndim_zem,0:ndim_nem),
     +           dxsnexlab(0:ndim_ebins,0:ndim_ebins,ndexcluhms),
     +           dxspexlab(0:ndim_ebins,0:ndim_ebins,ndexcluhms),
     +       ddxsnexlab(ndanghms,0:ndim_ebins,0:ndim_ebins,ndexcluhms),
     +       ddxspexlab(ndanghms,0:ndim_ebins,0:ndim_ebins,ndexcluhms)
c23456789012345678901234567890123456789012345678901234567890123456789012
      real*8 dxsnlab,dxsplab,ddxsnlab,ddxsplab,dxsnexlab,dxspexlab,
     +       dxsnxlab,dxspxlab,ddxsnxlab,ddxspxlab,ddxsnexlab,ddxspexlab
 
c /siginv/ inverse cross sections for HMS calculation
      common/siginv/ siginvn(0:2000),siginvp(0:2000) ! defined evergy 0.25 MeV to ndim_ebins
      real*8 siginvn,siginvp
 
c /nemiss/ number of ejectiles emitted in a given event,number of events
      common/nemiss/ nemiss, nevents
      integer nemiss,nevents
 
c /nhistory/ numscat is the number of scatterings prior to emission (not used yet)
      common/nhistory/ numscat(100)
      integer numscat
 
c /energies/
c binding = sepn energy if particle emitted;sepproj=binding en for proj in CN
c ucndump = energy to CN after preq,convmass=energy converted to mass in an event
c ecmproj,elabproj =projectile k.e. in cm and lab frames
      common/energies/binding,sepproj,ucndump,convmass,ecmproj,elabproj,
     +                 elabejecmax,ecnmax 
      real*8 binding,sepproj,ucndump,convmass,ecmproj,elabproj,
     +                 elabejecmax,ecnmax


c /nucmasses/ nuclear masses
c     common/nucmasses/ resmas(0:130,400),parmas(7),
c    +                  excessmass(0:130,400)
c     real*8 resmas,parmas,excessmass
      real*8 parmas
      common/nucmasses/ parmas(7)
 
c /partmasses/
c amejec,amresid = masses of ejectile and product nucleus
c zmproj=mass of projectile,zmfirstcn=mass of first composite nucleus
      common/partmasses/amejec, amresid, zmproj,zmfirstcn
      real*8 amejec, amresid, zmproj,zmfirstcn
 
c /laboption/ ikin=1,2 defines two kinematics options
      common/laboption/ikin
      integer ikin

c /ejectinfo/ lab ejectile particle energies,angles, as well as channel energy (eem)
      common/ejectinfo/eplab,thplab,phplab,eem
      real*8 eplab,thplab,phplab,eem
 
c /addvel/ vector addition velcities for decaying recoil, as well as final recoil
c energy,and angle
      common/addvel/xvadd,yvadd,zvadd,ereclab,threclab,phreclab   ! recoil vel vectors
      real*8 xvadd,yvadd,zvadd,ereclab,threclab,phreclab

c /momrec/ in ikin=2 kinematic option, recoil momentum calculated after preeq finished
      common/momrec/pzproj,pxejec,pyejec,pzejec
      real*8 pzproj,pxejec,pyejec,pzejec
 
c /sigreacxs/ reaction cross section
      common/sigreacxs/ sigreac
      real*8 sigreac
 
c /anztar/ A,Z,N of target  (and spin of target)
      common/anztar/ tartype, atar,ztar,antar,  ajtar
c /jztar/ A,Z,N of target (integers)
      common/jztar/ jatar,jztar,jntar
      real*8 atar,ztar,antar,tartype,ajtar
      integer jatar,jztar,jntar
 
c /print/ flag for printing
      common/iprint/ iprintdiag
      integer iprintdiag
 
c /const/ used in calculation   !vdepang used just in ang dist routines
      common/constmbc/ pi_g,amu,hbarc,zmnuc,zmf(2),vdep(2),vdepang,
     +                     vv2,zkf0(2),bb,rtar,bth2,adif
      real*8 pi_g,amu,hbarc,zmnuc,zmf,vdep,vdepang,vv2,zkf0
      real*8 bb,rtar,bth2,adif
 
c /isochar/isospin structure of p-h states
      common/isochar/isospin(200)
      character*4 isospin

      common/typechar/seltype,coltype,projtype
      character*4 seltype,coltype,projtype
 
 
c angles and momenta of selected particle and remaining p-h state:
      common /angle/ th1p, ph1p, th1rem, ph1rem, zkscat, zkrem
      real*8 th1p, ph1p, th1rem, ph1rem, zkscat, zkrem
 
c diagnostic arrays for phi-dependence
c      common /phidep/phin(0:ndim_ebins,ndanghms2),
c     +               phip(0:ndim_ebins,ndanghms2),
c     +               phin1(ndanghms2),phip1(ndanghms2)
c      real*8 phin,phip,phin1,phip1

c /badevents/ events where ucndump went slightly negative
      common /badevents1/ubad
      common /badevents2/nbad
      real*8 ubad
      integer nbad


c prints of j,k distributions
      common /probdist/probj(0:100),probjfinal(0:100)
      real*8 probj,probjfinal

      common /damph/amultdamprate   !this can be inputted to 
                                      !scale the damp rate for evaluation work
      real*8 amultdamprate

      common /resspec/uspec(0:ndim_zem,0:ndim_nem,0:ndim_ebins),
     + ujspec(0:ndim_zem,0:ndim_nem,0:ndim_ebins,0:ndim_jbins),
     + respop(0:ndim_zem,0:ndim_nem),
     + recspec(0:ndim_recbins,0:ndim_ebins,0:ndim_zem,0:ndim_nem)
      common /iresspec/
     +   jmaxujspec(0:ndim_zem,0:ndim_nem,0:ndim_ebins),
     +  maxerecspec(0:ndim_zem,0:ndim_nem,0:ndim_ebins)
      real*8 uspec,ujspec,respop,recspec
      integer jmaxujspec,maxerecspec
	
	common /inevdiag/ nev
	integer nev

! common for ran0c
	common / idumpar / idum
	integer  idum


!MCNP common for random numbers:
!c        floating-point entities on 32-bit computers.
!      implicit double precision (a-h,o-z)
!      parameter(iuo=6)
!      common /rn/ranb,rans,rani,ranj,rijk,rnfb,rnfs,rngb,rngs,rnmult,
!     1 rnr,rset(4),inif,nstrid
c        floating-point entities on 32-bit computers.
	integer iuo
      parameter(iuo=6)
      common /rn/ranb,rans,rani,ranj,rijk,rnfb,rnfs,rngb,rngs,rnmult,
     1 rnr,rset(4),inif,nstrid
      real*8 ranb,rans,rani,ranj,rijk,rnfb,rnfs,
     + rngb,rngs,rnmult,
     + rnr,rset,inif,nstrid


! ------ commons relate to tape10 read for OM ang momentum -------
        INTEGER ndim_id
        PARAMETER (ndim_id=8)      ! # ejectiles (id label)     [n,p,d,t,h,a,g,f]
	INTEGER ndim_ip      ! max # ejectiles (ip label) 
	PARAMETER (ndim_ip=8)      ! max # ejectiles (ip label) 
	INTEGER ndim_k   ! max # of energies in emission energy arrays
	PARAMETER (ndim_k= 250)    ! max # of energies in emission energy arrays

! transmission coefficient arrays:
	INTEGER ndim_etc    ! # trans co. energies
	PARAMETER (ndim_etc=80)    ! # trans co. energies
	INTEGER ndim_ltc    ! # trans co. l-values 
	PARAMETER (ndim_ltc=121)    ! # trans co. l-values 
	INTEGER ndim_ljtc
	PARAMETER (ndim_ljtc=306)   ! # comnuc-ordered j array on tape10


	COMMON/omecm/ecm
	REAL*8 ecm

	COMMON/omtitle/titletc
	CHARACTER*56  titletc                        !title from tape10
	COMMON/ompart/ particle(ndim_id)     !particle identifiers
	CHARACTER*8 particle            !particle identifiers
	COMMON/omspin/ xspin(ndim_id)        !array of ejectile spins
	REAL*8 xspin 




! in transmission coefficient read-in
	COMMON /omepsilon/epsilontc
	REAL*8 epsilontc  !ratio tl/t0 tc cut-off check
 
! projectile grid of lab energies and cross sections:
	COMMON/omexslproj/   exslproj(ndim_etc)  !proj lab en grid from tc readin
	REAL*8      exslproj            !proj lab en grid from tc readin
	COMMON/omxsrproj/  xsrproj(ndim_etc)   !proj reac xs grid from tc readin
	REAL*8      xsrproj             !proj reac xs grid from tc readin
	COMMON/omxseproj/   xseproj(ndim_etc)   !proj elas xs grid from tc readin
	REAL*8      xseproj             !proj elas xs grid from tc readin
	COMMON/omxstproj/   xstproj(ndim_etc)   !proj tot  xs grid from tc readin
	REAL*8      xstproj             !proj tot  xs grid from tc readin

! may be used in preequilibrium routines:
	COMMON/omeinver/   einver(ndim_etc+1,2) !lab energy grid n,p inv x/s
	REAL*8      einver               !lab energy grid n,p inv x/s
	COMMON/omsinver/   sinver(ndim_etc+1,2) !inv x/s for n,p 
	REAL*8      sinver               !inv x/s for n,p 
	COMMON/omninver/   ninver(2)            !# energies in preq inv arrays
	INTEGER     ninver               !# energies in preq inv arrays
	COMMON/ominta/idproj
	INTEGER  idproj       !projectile particle identfier (1=n,2=p,...,7=g)
                                               !(GNASH has 1.e-5)


	COMMON/omtccollapse/ 
     &         tccollapse(ndim_etc,0:ndim_ltc,ndim_id) !collapsed. tr.co.
	REAL*8 tccollapse                                 !collapsed. tr.co.
	COMMON/tc_splined/ 
     &         tc_splined(0:ndim_ltc,ndim_k,ndim_ip) !splined collapsed. tr.co.
	REAL*8 tc_splined                               !splined collapsed. tr.co.


	COMMON/omlmaxtc/ lmaxtc(ndim_etc,ndim_id)  !l max for tc>epsilontc for en
	INTEGER   lmaxtc                    !l max for tc>epsilontc for en 
	COMMON/omlmax_tcsplined/ 
     &         lmax_tcsplined(ndim_k,ndim_ip)   !l max for splined tc
	INTEGER   lmax_tcsplined                   !l max for splined tc
	COMMON/omintb/ lmax_inctcsplined
	INTEGER   lmax_inctcsplined    !l max for splined tc for incident energy
	COMMON/ometc/ etc(ndim_etc,ndim_id) !c.m. energy grid for trans co.
	REAL*8    etc                   !c.m. energy grid for trans co.
	COMMON/omnetc/   netc(ndim_id)     !# vals in cm energy grid for tc
	INTEGER     netc              !# vals in cm energy grid for tc


	COMMON/omtcinc_splined/tcinc_splined(0:ndim_ltc) 
!                      splined collapsed. tr.co. for projectile	
	REAL*8 tcinc_splined                !splined collapsed. tr.co. for projectile
 
! final quantities of interest:
	COMMON/omom_ldist/ om_ldist(0:ndim_ltc)  !l-dist
	REAL*8 om_ldist
	COMMON/omintc/ lmax_om
	INTEGER   lmax_om   !l max for l-dist
!-----------------------------------------------------------------------
