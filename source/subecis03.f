Ccc   * $Author: Capote $
Ccc   * $Date: 2005-12-07 08:22:34 $
Ccc   * $Id: subecis03.f,v 1.16 2005-12-07 08:22:34 Capote Exp $

      SUBROUTINE ECIS(Inpnam,Outnam)
C
C PARAMETER definitions
C
      INTEGER IDMX
      PARAMETER (IDMX = 25000000)
C
C COMMON variables
C
      REAL*8 DW(IDMX)
      INTEGER MR, MS, MW
      COMMON  DW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      CHARACTER*(*) Inpnam, Outnam
C
C Local variables
C
      CHARACTER*4 cw(2,IDMX)
      INTEGER nw(2,IDMX)
      REAL w
C
C
C 01/01/04                                                      ECIS03  ECIS-000
C USE CHARACTER*4 IF THE TYPE OF ARGUMENT IS CONTROLLED BY COMPILER     ECIS-001
C THE FUJITSU COMPILER GIVES AN "INFORMATION" DIAGNOSTIC FOR THE        ECIS-002
C EQUIVALENCE STATEMENT MIXING CHARACTER TYPE WITH OTHER TYPES.         ECIS-003
      EQUIVALENCE (DW,nw,cw,w)
C THE COMMON /INOUT/ ALLOWS TO CHANGE THE INPUT FILE "MR", THE OUTPUT   ECIS-010
C FILE "MW" AND SAVE FILE "MS" WITHOUT MODIFICATION OF THE SUBROUTINES. ECIS-011
C INPA, INPB AND INPC WRITE STILL WRITE "DESCRIPTION OF INPUT" ON FILE  ECIS-012
C 6. THESES VALUES ARE NOT SAVED ON TAPE MS.                            ECIS-013
      MR = 75
      MW = 76
      MS = 78
      OPEN (75,FILE = Inpnam,STATUS = 'OLD')
      OPEN (76,FILE = Outnam)
      OPEN (78,FILE = 'file78')
      OPEN (58,FILE = 'ecis03.cs')
      OPEN (55,FILE = 'ecis03.dat')
      OPEN (59,FILE = 'ecis03.ics')
      OPEN (60,FILE = 'file60')
      OPEN (61,FILE = 'file61')
      OPEN (62,FILE = 'file62')
      OPEN (63,FILE = 'ecis03.tlj')
      OPEN (64,FILE = 'ecis03.exp')
      OPEN (65,FILE = 'ecis03.leg')
      OPEN (91,FILE = 'file91')
      OPEN (85,FILE = 'ecis03.ang')
      OPEN (86,FILE = 'file86')
      OPEN (87,FILE = 'file87')
      OPEN (88,FILE = 'file88')
      OPEN (89,FILE = 'file89')
      OPEN (90,FILE = 'file90')
      OPEN (99,FILE = 'file99')
      CALL CALC(nw,cw,DW,IDMX)
      CLOSE (75)
      CLOSE (76)
      CLOSE (78,STATUS = 'delete')
      CLOSE (58)
      CLOSE (55)
      CLOSE (59)
      CLOSE (60,STATUS = 'delete')
      CLOSE (61,STATUS = 'delete')
      CLOSE (62,STATUS = 'delete')
      CLOSE (63)
      CLOSE (64)
      CLOSE (65)
      CLOSE (91,STATUS = 'delete')
      CLOSE (85)
      CLOSE (86,STATUS = 'delete')
      CLOSE (87,STATUS = 'delete')
      CLOSE (88,STATUS = 'delete')
      CLOSE (89,STATUS = 'delete')
      CLOSE (90,STATUS = 'delete')
      CLOSE (99,STATUS = 'delete')
      END
C 01/01/04                                                      ECIS03  HORA-000
      SUBROUTINE HORA
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Local variables
C
      INTEGER m0, m1, m2, n5, nh, nm, ns, nt, nx
C
C
C GIVES THE TIME ELAPSED SINCE THE FIRST CALL AND SINCE THE LAST CALL   HORA-002
C IT USES A FUNCTION WHICH RETURNS IN MILLISECONDS THE TIME LEFT FOR A  HORA-003
C RUN OF "MSEC" SECONDS (DEFAULT VALUE 3600).                           HORA-004
C***********************************************************************HORA-005
      DATA nx, m0, m2/0, 0, 0/
      IF (nx.NE.0) THEN
         CALL STIM(m1)
         n5 = m2 - m1
         nt = m0 - m1
         m2 = m1
         ns = nt/1000
         nt = nt - 1000*ns
         nm = ns/60
         ns = ns - 60*nm
         nh = nm/60
         nm = nm - 60*nh
         WRITE (MW,99005) nh, nm, ns, nt, n5
99005    FORMAT (' *** TOTAL TIME ***',I3,'H',I3,'MN',I3,'S',I4,' MS',
     &           10X,'DIFFERENCE SINCE LAST CALL',I9,' MILLISECONDS')
         RETURN
      ELSE
         CALL STIM(m0)
         m2 = m0
         nx = 1
         WRITE (MW,99010) m0
99010    FORMAT (' FIRST CALL TO HORA',10X,I10,' MILLISECONDS')
         RETURN
      ENDIF
      END
C 01/01/04                                                      ECIS03  STIM-000
      SUBROUTINE STIM(I)
C
C
C COMMON variables
C
      INTEGER MSEc
      COMMON /CNSEC / MSEc
C
C Dummy arguments
C
      INTEGER I
C
C Local variables
C
      REAL a(2), b
      REAL ETIME
      REAL FLOAT
      INTEGER INT
C
C
C RETURNS INTEGER VALUE OF CPU TIME LEFT FOR A JOB OF "MSEC" SECONDS    STIM-002
C IN MILLISECONDS.                                                      STIM-003
C***********************************************************************STIM-004
      b = ETIME(a)
      I = INT(1000.*(FLOAT(MSEc) - b))
      END
C 01/01/04                                                      ECIS03  MEMO-000
      SUBROUTINE MEMO(Name,Idmt,Nplace,Ix)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER Idmt, Ix, Nplace
      CHARACTER*4 Name
C
C Local variables
C
      INTEGER i
C
C
C CONTROL OF MEMORY ARRAY                                               MEMO-002
C INPUT:   NAME     NAME OF CALLING SUBROUTINE                          MEMO-003
C          IDMT     PREVIOUS SPACE                                      MEMO-004
C          NPLACE   REQUESTED SPACE                                     MEMO-005
C IX: CONTROL NUMBER IX=1     ABSOLUTE VALUES OF IDMT AND NPLACE        MEMO-006
C                    IX=2     RELATIVE VALUES OF IDMT AND NPLACE        MEMO-007
C***********************************************************************MEMO-008
      IF (Idmt.GE.Nplace) RETURN
      IF (Ix.NE.1) THEN
         IF (Ix.NE.2) WRITE (MW,99005) Ix
99005    FORMAT (' IX = ',I4,' NOT ALLOWED. USING IX=2'//)
         i = Nplace - Idmt
         WRITE (MW,99010) i
99010    FORMAT (' WORKING SPACE TOO SMALL':,I6,' MEMORIES MISSING'/)
      ELSE
         WRITE (MW,99015) Idmt, Nplace
99015    FORMAT (' NOT ENOUGH PLACE .....   ',I10,' MEMORIES ALLOWED',
     &           I10,' MEMORIES REQUESTED'/)
      ENDIF
      WRITE (MW,99020) Name
99020 FORMAT (' IN ',A4,'  ... STOP ...')
      STOP
      END
C 01/01/04                                                      ECIS03  CALC-000
      SUBROUTINE CALC(Nw,Cw,Dw,Idmx)
C MAIN SUBROUTINE OF THE PROGRAM                                        CALC-002
C W,NW,DW ARE THE WORKING SPACE IN EQUIVALENCE BY CALL,STARTING AS      CALC-003
C REAL*8. THEY ARE RESPECTIVELY REAL, INTEGER AND DOUBLE PRECISION.     CALC-004
C IDMX IS THE LENGTH OF DW.                                             CALC-005
C                                                                       CALC-006
C ADDRESSES IN THE WORKING FIELD DEFINED HERE (FOR OTHERS, SEE CALX)    CALC-007
C IN COMMON /DECOU/                                                     CALC-008
C 34- NT       HERE, ALSO REDUCED NUCLEAR MATRIX ELEMENTS               CALC-009
C 35- NIVQ     TABLE OF MULTIPOLES                                      CALC-010
C 36- NIVY     TABLE OF FORM FACTOR IDENTIFICATION IVY (FOR COMPUTATION)CALC-011
C 37- NIVZ     TABLE OF FORM FACTOR IDENTIFICATION IVZ (FOR USE)        CALC-012
C 38- NCOI     ADDRESS OF THE TABLE FOR DISCRETISATION OF CONTINUUM     CALC-013
C 39- MIPI     SAME AS NIPI FOR THE DISCRETISATION OF CONTINUUM         CALC-014
C 40- NXD      ADDRESS OF WEIGHTS AND STEPS OF CONTINUUM                CALC-015
C 41- MWV      SAME AS NWV FOR THE DISCRETISATION OF CONTINUUM          CALC-016
C 42- NIXT     TRANSMISSION COEFFICIENTS OF UNCOUPLED STATES            CALC-017
C 43- NTY      TEMPORARY RESULTS OF COMPOUND NUCLEUS FOR INTERPOLATION  CALC-018
C 44- NTX      PARTIAL REACTION CROSS SECTIONS AND COMPOUND NUCLEUS     CALC-019
C 45- NRY      COMPOUND NUCLEUS COEFFICIENTS                            CALC-020
C 46- NRCO     STRENGTH OF COULOMB CENTRAL POTENTIALS FOR CORRECTIONS   CALC-021
C 47- NRDO     STRENGTH OF COULOMB TRANSITION POTENTIALS FOR CORRECTIONSCALC-022
C 48- NVC1     REAL POTENTIALS                                          CALC-023
C 49- NVC2     IMAGINARY POTENTIALS                                     CALC-024
C 50- NNC      FIRST FREE ADDRESS AFTER COMPUTATION OF POTENTIALS       CALC-025
C 51- NCX      FIRST FREE ADDRESS FOR COMPUTATION OF POTENTIALS         CALC-026
C OTHER INTEGER DATA OF COMMON /DECOU/                                  CALC-027
C 52- IDMT     TOTAL WORKING FIELD LENGTH AS SINGLE PRECISION           CALC-028
C 53-98          SEE CALX                                               CALC-029
C 99- KXT      NUMBER OF PENETRABILITIES FOR UNCOUPLED STATES           CALC-030
C100- NRZ      NUMBER OF RESULTS TO SAVE FOR MINIMUM CHI2               CALC-031
C101- NTZ      NUMBER OF MEMORIES TO INITIALISE TO ZERO FOR SCATTERING  CALC-032
C              MATRIX AND COMPOUND NUCLEUS RESULTS                      CALC-033
C102- LMAX3    EFFECTIVE NUMBER OF COULOMB FUNCTIONS                    CALC-034
C103- IPM      NUMBER PF J VALUES USED FOR SCATTERING MATRIX (IN CAL1)  CALC-035
C105- IPK      NUMBER PF J VALUES USED FOR COMPOUND NUCLEUS (IN CAL1)   CALC-036
C106-111         SEE CALX                                               CALC-037
C                                                                       CALC-038
C IN COMMON /TITR/   TITLE:        COMMENT CARD REPRODUCED IN THE OUTPUTCALC-039
C IN COMMON /DCHI/   CHI2,CHI2M:   CHI-SQUARE AND MINIMUM CHI-SQUARE    CALC-040
C                    YY(3):        INDICATIONS FOR SEARCH   SEE FITE    CALC-041
C IN COMMON /DCONS/  CM,CHB:       NUCLEAR MASS AND H BAR               CALC-042
C                    CK,CMB,CCZ:   DERIVED CONSTANTS                    CALC-043
C FOR COMMONS /POTE1/ AND /POTE2/ SEE REDM                              CALC-044
C FOR COMMON /NCOMP/ SEE CALX, LECT AND COLF                            CALC-045
C                                                                       CALC-046
C ******** MEANING OF THE LOGICAL CONTROLS LO ********                  CALC-047
C                                                                       CALC-048
C LO(I+100)=.NOT.LO(I) FOR I=1,100                                      CALC-049
C LO(235+I)=LO(50+I) FOR I=1,15 DURING SEARCH IF LO(51) TO LO(65) ARE   CALC-050
C USED ONLY FOR COMPLETE OUTPUT                                         CALC-051
C THE VALUES OF THE FIRST 100 LO ARE READ IN CALX ON TWO DATA CARDS     CALC-052
C THE FIRST DATA CARD IS FOR 1-50,THE SECOND FOR 51-100                 CALC-053
C ONLY,THE VALUES LISTED ON THE INPUT DESCRIPTION ARE USED              CALC-054
C *** FOR THEIR MEANING, SEE THIS DESCRIPTION *****                     CALC-055
C EXCEPTION IF LO(36)=.TRUE.: ONLY THE FIRST CARD IS READ, THE PROGRAM  CALC-056
C DOES NOT TAKE THEM INTO ACCOUNT BUT CONTINUE A SEARCH SAVED ON TAPE NSCALC-057
C *** MEANING OF LO(I) FOR I GREATER THAN 200 ****                      CALC-058
C LO(201) IS TRUE IF THERE IS NO REAL SPIN-ORBIT POTENTIAL              CALC-059
C LO(202) IS TRUE IF THERE IS NO IMAGINARY SPIN-ORBIT POTENTIAL         CALC-060
C LO(203) IS TRUE IF THERE IS NO COULOMB SPIN-ORBIT POTENTIAL           CALC-061
C LO(204) IS TRUE IF CONVERGENCE IS OBTAINED IN THE ITERATION           CALC-062
C LO(205) IS TRUE IF CONVERGENCE IS OBTAINED FOR THIS EQUATION          CALC-063
C LO(206) IS TRUE WHEN THE ITERATION IS NOT THE LAST ONE PERMITTED      CALC-064
C LO(207) IS TRUE IF ALL THE COUPLINGS HAVE TO BE CALCULATED BEFOREHAND CALC-065
C LO(208) IS TRUE IF THE DIAGONAL COULOMB CORRECTIONS ARE NEEDED        CALC-066
C LO(209) IS TRUE FOR DIRAC POTENTIALS                                  CALC-067
C LO(210) IS TRUE IF DERIVATIVES ARE NEEDED                             CALC-068
C LO(211) IS TRUE IF NUCLEAR PARAMETERS ARE CHANGED IN SEARCH           CALC-069
C LO(212) IS TRUE IF SP.-ORB. OR COMP. NUCL. PARAM. IS CHANGED IN SEARCHCALC-070
C LO(213) IS TRUE IF DISPERSION RELATION IS CHANGED IN SEARCH           CALC-071
C LO(215) IS TRUE IF IT IS THE FIRST COMPUTATION FOR THIS ENERGY        CALC-072
C LO(216) IS TRUE FOR NO OUTPUT                                         CALC-073
C LO(217) IS TRUE FOR ALL THE CALCULATIONS EXCEPT THE FIRST             CALC-074
C LO(218) IS TRUE FOR LAST RESULTS                                      CALC-075
C LO(219) IS TRUE FOR RESULTS WITHOUT DOING THE CALCULATION AGAIN       CALC-076
C LO(220) IS TRUE FOR OUTPUT AND LAST CALCULATION IS THE BEST ONE       CALC-077
C LO(221) IS TRUE FOR OPTICAL MODEL WITHOUT COUPLING                    CALC-078
C LO(222) IS NOT USED                                                   CALC-079
C LO(223) IS TRUE IF LO(18) IS .TRUE. AND NO SPIN IN THE INITIAL STATE  CALC-080
C LO(224) IS TRUE FOR COMPOUND NUCLEUS OR PUNCH OF TRANSMISSION COEFF.  CALC-081
C LO(225) IS TRUE IN CAL1 FOR A CALL TO USUAL COUPLED EQUATIONS SUBR.   CALC-082
C LO(226) IS TRUE IF THERE ARE OBSERVABLES IN THE LABORATORY SYSTEM     CALC-083
C LO(227) IS TRUE FOR COULOMB CORRECTIONS WITH PURE REGULAR FUNCTIONS   CALC-084
C LO(228) IS TRUE FOR NO COPY OF UNCOUPLED FUNCTIONS AND PHASE-SHIFT    CALC-085
C LO(229) IS TRUE FOR REAL SPIN-ORBIT OR DIRAC EQUATION                 CALC-086
C LO(230) IS TRUE FOR IMAGINARY SPIN-ORBIT OR DIRAC EQUATION            CALC-087
C LO(231) IS TRUE IF LO(18)=.TRUE. WITH NON ZERO SPINS FOR GROUND STATE CALC-088
C LO(232) IS TRUE IF THE TOTAL SPIN IS TOO LARGE TO COMPUTE COMP. NUC.  CALC-089
C LO(233) IS TRUE STORE FISS. AND GAMMA TRANS. COEFF. FOR INTERPOLATION CALC-090
C LO(234) IS FREE                                                       CALC-091
C LO(235) IS FREE                                                       CALC-092
C LO(211) TO LO(220) ARE INITIALISED TO .FALSE. IN CALX                 CALC-093
C LO(216) TO LO(220) ARE INITIALISED TO .FALSE. IN EVAL                 CALC-094
C***********************************************************************CALC-095
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      REAL*8 ACN(20), ACOnv, BJM, CCZ, CHB, CHI2, CHI2m, CK, CM, CMB,
     &       CONj, EITer, H, YY(3)
      INTEGER IDMt, IMAx, INLs, INSl, INTc, INTv, INVc, INVd, INVt, IPK,
     &        IPM, IQM, IQMax, ISM, ITEmm, ITErm, ITX(16), ITXm, ITY(8),
     &        JDM, JIT, JTH, JTX, KAB, KBA, KBC, KCC, KE, KMAx, KMIn,
     &        KXT, LMAx1, LMAx2, LMAx3, LMD, LMX, MCC, MCM(2), MIPi, MR,
     &        MS, MS1, MS2, MW, MWV, NAM1, NBEt, NBEta, NBT1, NCC, NCOi,
     &        NCOj, NCOll, NCOlr, NCOls, NCOlt, NCOlx, NCOns, NCOnt,
     &        NCT(6), NCX, NDE, NDOnn, NDP, NDQ, NFA, NFAc, NFAm, NFG,
     &        NFIs, NFIss, NFM, NGAm, NIE, NIPh, NIPp, NISe, NIVq, NIVy,
     &        NIVz
      INTEGER NIW, NIXt, NJC, NJIt, NJMax, NLT, NNC, NNIv, NNVi, NNWi,
     &        NPAa, NPAd, NPAr, NPLace, NPOt, NPP, NPX, NRC, NRCo, NRD,
     &        NRDo, NREc, NREs, NRY, NRZ, NSCn, NSEc, NSM, NSP(3),
     &        NSPin, NT, NTGx, NTOt, NTX, NTY, NTZ, NVA, NVC1, NVC2,
     &        NWV, NXA, NXD, NXG, NXX
      CHARACTER*4 TITle(18)
      COMMON /DCHI  / CHI2, CHI2m, YY
      COMMON /DCONS / CM, CK, CHB, CMB, CCZ
      COMMON /DECOU / NJIt, NIPp, NPAa, NWV, NIPh, NSCn, NPAr, NNIv,
     &                NFIs, NGAm, NPOt, NBEta, NFM, NTGx, NDOnn, NRC,
     &                NIW, NDE, NISe, NNVi, NNWi, NCC, MCC, NXA, NAM1,
     &                NFAc, NFAm, NPAd, NFG, NXG, NSM, NREs, NXX, NT,
     &                NIVq, NIVy, NIVz, NCOi, MIPi, NXD, MWV, NIXt, NTY,
     &                NTX, NRY, NRCo, NRDo, NVC1, NVC2, NNC, NCX, IDMt,
     &                NCOll, NJMax, ITErm, NPP, JDM, JIT, NSEc, LMD,
     &                MCM, NCOls, NCOlt, KMAx, KMIn, NVA, NBEt, NBT1,
     &                LMX, LMAx1, NLT, ISM, IQM, IQMax, MS1, MS2, NCT,
     &                KBA, KAB, KBC, KCC, NJC, JTX, JTH, NCOlr, NREc,
     &                NTOt, NFA, LMAx2, KE, ITEmm, NPLace, KXT, NRZ,
     &                NTZ, LMAx3, IPM, IPK, BJM, EITer, ACOnv, CONj, H,
     &                NSPin
      COMMON /INOUT / MR, MW, MS
      COMMON /NCOMP / NSP, NFIss, NRD, NCOnt, NCOj, NCOns, NIE, NCOlx,
     &                NDP, NDQ, ACN
      COMMON /POTE1 / ITX, IMAx, INTc, INLs, INVc, INVd, ITXm
      COMMON /POTE2 / ITY, INVt, INTv, INSl, NPX
      COMMON /TITR  / TITle
C
C Dummy arguments
C
      INTEGER Idmx
      CHARACTER*4 Cw(2*Idmx)
      REAL*8 Dw(Idmx)
      INTEGER Nw(2,Idmx)
C
C Local variables
C
      REAL*8 cz
      CHARACTER*4 fin
      INTEGER i, im, it, k1, k2, m, n, n1, n2, nn, nsp1d
      LOGICAL lo(250)
      INTEGER MAX0
C
C
      DATA fin/'FIN '/
      IDMt = Idmx
C CONSTANTS COMPUTED FROM THE FUNDAMENTAL CONSTANTS, ATOMIC MASS, HBAR*CCALC-118
C AND ALPHA, AS GIVEN IN THE EUROPEAN PHYSICAL JOURNAL, PAGE 73, VOLUME CALC-119
C 15 (2000) REFERRING FOR THESE VALUES TO THE 1998 CODATA SET WHICH MAY CALC-120
C BE FOUND AT http://physics.nist.gov/constants                         CALC-121
C     CM=931.494013 +/- 0.000037 MeV                                    CALC-122
      CM = 931.494013D0
C     CHB=197.3269601 +/- 0.0000078 (*1.0E-9 eV*cm)                     CALC-124
      CHB = 197.3269601D0
C     CZ=137.03599976 +/- 0.00000050 without dimension                  CALC-126
      cz = 137.03599976D0
      CMB = CM/CHB
      CK = 2.D0*CM/CHB**2
      CCZ = CHB/cz
C MAIN INPUT                                                            CALC-131
  100 CHI2m = 1.D35
      CALL CALX(Nw,Cw,Dw,lo)
      IF (TITle(1).EQ.fin) RETURN
      nsp1d = NSP(1)
      IF (lo(36)) THEN
C CONTINUATION OF A PREVIOUS SEARCH                                     CALC-252
         CALL REST(1,Nw,Dw,lo,IDMt)
         IF (lo(177)) CALL HORA
         CALL STIM(k1)
C HANDLING OF VARIABLES                                                 CALC-243
         IF ((KE.EQ.1) .OR. (Nw(1,NIW+1).EQ.1))
     &       CALL FITE(KE,NTOt,NREc,Dw(NREs),Dw(NXX),Dw(NDE),Dw(NRC),
     &       Nw(1,NRC),Nw(1,NIW),Dw(NNC))
         GOTO 800
      ENDIF
  200 NSP(1) = nsp1d
      NSP(3) = NSP(1) - NSP(2)
      CALL COLF(NCOlx,NCOll,Nw,Dw(NWV),Dw(NFG),Dw(NXG),ISM,LMAx1,LMAx2,
     &          H,Nw(1,NT),Dw(NT),IDMt - NT,LMAx3,Nw(1,NNIv),KXT,lo)
C COMPUTATION OF NUCLEAR MATRIX ELEMENTS AND SPACE FOR FORM FACTORS     CALC-141
  300 IF (lo(61)) WRITE (61,99005) Dw(NWV), Dw(NWV + 11), Dw(NWV + 1),
     &                             Nw(2,2), NCOll
99005 FORMAT ('<RED.MAT.>',F10.2,F10.5,F10.2,2I5)
      CALL REDM(Nw(1,NNIv),Nw(1,NT),Dw(NT),Nw,NCOll,it,Nw(1,NBEta),
     &          Dw(NBEta),NBT1,Nw(1,NIPh),Nw(1,NPAr),Dw(NPAa),NVA,IQMax,
     &          NSPin,Dw(NFAc),NFA,NPP,im,IDMt - NT,lo)
      NIVq = NT + 3*it
      NIVy = NIVq + (3*im + 1)/2
      NIVz = NIVy + (7*INTc + 1)/2
      NCOi = NIVz + 2*INTv
      IF (.NOT.(lo(107) .OR. lo(217))) THEN
         NPOt = NCOi
         CALL EXTP(NPP,NCOls,NCOlx,Dw(NWV),Nw(1,NNIv),Nw(1,NT),
     &             Nw(1,NIVy),Nw(1,NIVq),Nw,Dw(NFAc),NFA,Dw(NPOt),
     &             Nw(1,NPOt),Nw(1,NPOt + 2),Nw(1,NIPp),Dw(NIPp),
     &             IDMt - NPOt,lo)
C PERMUTATION OF POTENTIALS AND INFORMATIONS ON TRANSITIONS             CALC-156
         n = NPOt - NT
         m = NPOt + Nw(2,NPOt + 1)
         IF (n + m.GT.IDMt) CALL MEMO('CALC',IDMt,n + m,1)
         nn = 2*n
         n1 = 2*NT - 2
         n2 = 2*m - 2
         DO i = 1, nn
            Cw(n2 + i) = Cw(n1 + i)
         ENDDO
         nn = nn + 2*Nw(2,NPOt + 1)
         n2 = n2 - 2*Nw(2,NPOt + 1)
         DO i = 1, nn
            Cw(n1 + i) = Cw(n2 + i)
         ENDDO
         NPOt = NT
         NT = NPOt + Nw(2,NPOt + 1)
         NIVq = NT + 3*it
         NIVy = NIVq + (3*im + 1)/2
         NIVz = NIVy + (7*INTc + 1)/2
      ENDIF
      NCOi = NIVz + 2*INTv
      MIPi = NCOi + 2*NCOnt
      NXD = MIPi
      MWV = NXD
      NIE = 0
      NIXt = MWV + 18*NIE
  400 CALL DISP(Nw,Dw(NWV),Nw(1,NIPp),Dw(NIPp),Nw(1,NPOt),Dw(NPOt),
     &          NCOlx - NCOnt,lo)
      IF (NCOnt.NE.0) THEN
         IF (.NOT.(lo(214) .OR. lo(215))) THEN
            CALL DISP(Nw(1,MIPi),Dw(MWV),Nw(1,NIPp),Dw(NIPp),Nw(1,NPOt),
     &                Dw(NPOt),NIE,lo)
         ELSE
            CALL CONU(0,Nw,Dw(NWV),Nw(1,MIPi),Dw(MWV),Nw(1,NCOi),Dw(NXD)
     &                ,Dw(NSCn),KXT,lo)
            NXD = MIPi + (11*NIE + 1)/2
            MWV = NXD + 3*NIE
            NIXt = MWV + 18*NIE
            IF (NIXt.GT.IDMt) CALL MEMO('CALC',IDMt,NIXt,1)
            NCOlt = NCOlx + NIE - NCOnt
            NSP(1) = NSP(1) + NCOlt - NCOlx
            NSP(3) = NSP(3) + NCOlt - NCOlx
            CALL CONU(1,Nw,Dw(NWV),Nw(1,MIPi),Dw(MWV),Nw(1,NCOi),Dw(NXD)
     &                ,Dw(NSCn),KXT,lo)
            CALL DISP(Nw(1,MIPi),Dw(MWV),Nw(1,NIPp),Dw(NIPp),Nw(1,NPOt),
     &                Dw(NPOt),NIE,lo)
         ENDIF
      ENDIF
  500 NDP = 2*NCOll + NSP(1) + 1
      NDQ = KBA + NSP(3) - NSP(1)
      NTY = NIXt + KXT
      NSM = NTY
      IF (lo(81) .AND. lo(233)) NSM = NSM +
     &                                KMAx*(KCC + 2 + NCOlt - NCOls)
      NTX = NSM + 2*NJMax*KBA
      NRY = NTX + NCOls + 1
      IF (lo(81)) NRY = NTX + NCOll + NCOlt + 3
      NRCo = NRY
      IF (lo(81)) NRCo = NRCo + KMAx*NCOls
      NRZ = NRCo - NSM
      NTZ = NRCo - NTY
      IF (lo(32)) NRCo = 2*NRCo - NSM
      NRDo = NRCo + 2*NPX
      IF (lo(100)) NRDo = NRCo + 2*NCOlt
      NVC1 = NRDo + 2*INTv
      NVC2 = NVC1 + ITY(2)*ISM
      NNC = NVC1 + ITX(1)*ISM
      IF (lo(100)) NNC = NVC1 + ITX(7)*ISM
      NCX = NVC1 + ITXm*ISM
      NPLace = MAX0(NPLace,NCX,NNC + ((NREc+1)*(2*NTOt+2+NREc)/2 + 1)/2)
  600 CALL GGDR(Nw,Dw(NWV),Dw(NSCn),lo)
      IF (.NOT.(lo(213))) THEN
         IF (lo(54)) WRITE (MW,99010) NPLace
99010    FORMAT (10X,'REQUIRED WORKING FIELD',I10)
         IF (NPLace.GT.IDMt) CALL MEMO('CALC',IDMt,NPLace,1)
         CALL STIM(k1)
      ENDIF
C MAIN COMPUTATION                                                      CALC-223
  700 CALL CAL1(Nw,Cw,Dw,lo)
      IF (lo(177)) CALL HORA
      IF (lo(218) .OR. lo(132)) THEN
         n = IDMt - NPLace
         WRITE (MW,99015) NPLace, n
99015    FORMAT (//' *** WORKSPACE USED IN THIS COMPUTATION',I10,
     &           '  ***',10X,I10,' MEMORIES NOT USED')
         IF (lo(35) .AND. lo(32) .AND. (KE.EQ.0))
     &       CALL REST(0,Nw,Dw,lo,IDMt)
         IF (lo(137)) GOTO 100
         CALL EVAL(Nw,Dw,CM,lo)
         KE = 0
         IF (.NOT.(lo(215))) GOTO 900
         GOTO 200
      ELSE
C AUTOMATIC SEARCH                                                      CALC-227
         CALL STIM(k2)
         IF (lo(34)) Nw(2,NIW) = -1 + Nw(1,NIW + 1) + (k1 - 10*NSEc)
     &                           /(k1 - k2)
         k1 = k2
         IF (.NOT.(Nw(1,NIW+1).GT.1 .OR. lo(76) .OR. lo(75))) THEN
C CHANGE OF CONTROLS IF FULL OUTPUT WAS NOT REQUESTED AT THE FIRST RUN  CALC-232
            DO i = 51, 58
               lo(i + 185) = lo(i)
               lo(i) = .FALSE.
               lo(i + 100) = .TRUE.
            ENDDO
            lo(216) = .TRUE.
         ENDIF
C IDENTIFICATION OF VARIABLES                                           CALC-238
         CALL VARI(1,Nw,Dw,lo)
C SAVE THE SEARCH ON TAPE NS.                                           CALC-240
         IF (lo(35) .AND. Nw(1,NIW + 1).GE.Nw(2,NIW))
     &       CALL REST(0,Nw,Dw,lo,IDMt)
         CALL FITE(KE,NTOt,NREc,Dw(NREs),Dw(NXX),Dw(NDE),Dw(NRC),
     &             Nw(1,NRC),Nw(1,NIW),Dw(NNC))
      ENDIF
C TRANSFORMATION OF VARIABLES INTO PARAMETERS                           CALC-246
  800 CALL VARI(0,Nw,Dw,lo)
      IF (KE.NE.1) THEN
         lo(211) = lo(52) .OR. lo(61) .OR. lo(211)
         lo(212) = lo(212) .OR. lo(10)
      ENDIF
  900 IF (lo(211)) GOTO 300
      IF (lo(213)) GOTO 400
      IF (lo(214)) THEN
         CALL CONU(1,Nw,Dw(NWV),Nw(1,MIPi),Dw(MWV),Nw(1,NCOi),Dw(NXD),
     &             Dw(NSCn),KXT,lo)
         CALL DISP(Nw(1,MIPi),Dw(MWV),Nw(1,NIPp),Dw(NIPp),Nw(1,NPOt),
     &             Dw(NPOt),NIE,lo)
         GOTO 500
      ELSE
         IF (.NOT.(lo(212))) GOTO 700
         GOTO 600
      ENDIF
      END
C 01/01/04                                                      ECIS03  CALX-000
      SUBROUTINE CALX(Nw,Cw,Dw,Lo)
C CALX AND THE SUBROUTINES CALLED BY IT READ ALL THE INPUT EXCEPT FOR   CALX-002
C REDUCED NUCLEAR MATRIX ELEMENTS AND EXTERNAL FORM FACTORS.            CALX-003
C NW,CW,DW ARE THE WORKING FIELD IN EQUIVALENCE BY CALL.                CALX-004
C LO IS THE TABLE OF LOGICAL CONTROLS (SEE CALC) .                      CALX-005
C                                                                       CALX-006
C USE OF SOME PARTS OF THE WORKING ARRAY (W,NW,DW):                     CALX-007
C  1:   IPI(11,NCOLX) INTEGER VALUES FOR THE DESCRIPTION OF CHANNELS.   CALX-008
C           FIRST INDEX:                                                CALX-009
C       1 - PARITY (0 FOR + AND 1 FOR -)                                CALX-010
C       2 - MULTIPLICITY OF INCIDENT PARTICLE                           CALX-011
C       3 - MULTIPLICITY OF THE TARGET                                  CALX-012
C       4 - PRODUCT OF CHARGES                                          CALX-013
C       5 - INDEX OF POTENTIAL                                          CALX-014
C       6,7,8,9 - BEGINNING AND END IN THE TWO PARTS OF TABLE MF-FM     CALX-015
C                           (SEE DEPH)                                  CALX-016
C      10 - MAXIMUM ANGULAR MOMENTUM                                    CALX-017
C      11 - INDEX OF POTENTIAL ENERGY DEPENDENT BY DISPERSION RELATIONS CALX-018
C  NIPP:    IPP(2,15,NPP)/PIP(15,NPP) DISPERSION PARAMETERS             CALX-019
C     1,1 - FIRST LEVEL USING THIS POTENTIAL BEFORE INPUT OF PARAMETERS CALX-020
C           REPLACED BY ADDRESS OF REFERENCE ENERGY IN WV (3 OR 12)     CALX-021
C     2,1 - N2 - POWER FOR LARGE NEGATIVE ENERGY CORRECTIONS            CALX-022
C     1,2 - NV - |NV| POWER FOR VOLUME POTENTIAL                        CALX-023
C     2,2 - NS - |NS| POWER FOR SURFACE POTENTIAL                       CALX-024
C             SUM OF TWO TERMS IF NV OR NS ARE NEGATIVE                 CALX-025
C             ABSENCE OF VOLUME OR SURFACE TERM IF NV OR NS ARE 0.      CALX-026
C       3 - ENERGY CORRESPONDING TO THE DEPTHS READ                     CALX-027
C       4 - FERMI ENERGY EF                                             CALX-028
C       5 - THRESHOLD ENERGY EP                                         CALX-029
C       6 - LARGE ENERGY STARTING VALUE ABOVE FERMI ENERGY EA           CALX-030
C       7 - EXPONENTIAL VARIATION OF REAL SPIN-ORBIT                    CALX-031
C       8 - LINEAR VARIATION OF IMAGINARY SPIN-ORBIT                    CALX-032
C       9 - BV PARAMETER FOR VOLUME POTENTIALS                          CALX-033
C      10 - STRENGTH OF LARGE POSITIVE ENERGY TERM IN VOLUME POTENTIAL  CALX-034
C           SECOND BV' PARAMETER FOR VOLUME POTENTIALS IF NV<0          CALX-035
C      11 - EXPONENTIAL DECREASE IN SQRT|E| FOR LARGE ENERGY TERMS OF   CALX-036
C           VOLUME POTENTIALS OR FRACTION IN THE FIRST TERM IF NV<0     CALX-037
C      12 - BS PARAMETER FOR SURFACE POTENTIALS                         CALX-038
C      13 - EXPONENTIAL DECREASE OF A SURFACE POTENTIAL OR SECOND BS'   CALX-039
C           PARAMETER FOR SURFACE POTENTIALS IF NS<0                    CALX-040
C      14 - NON-LOCALITY RANGE PARAMETER OF SURFACE POTENTIAL OR        CALX-041
C           FRACTION IN THE FIRST TERM IF NS<0                          CALX-042
C      15 - EXPONENTIAL VARIATION OF H.F. REAL VOLUME POTENTIAL         CALX-043
C  NWV:     WV(18,NCOLX) IBM-DOUBLE PRECISION VALUES FOR THE CHANNELS   CALX-044
C       1 - MASS OF INCIDENT PARTICLE                                   CALX-045
C       2 - MASS OF THE TARGET                                          CALX-046
C       3 - ENERGY IN THE CENTER OF MASS IN MEV                         CALX-047
C       4 - K WAVE NUMBER                                               CALX-048
C       5 - COULOMB PARAMETER                                           CALX-049
C       6 - SQUARE ROOT OF KF/KI (MODIFIED BY RATIO OF STEP SIZES)      CALX-050
C       7 - ENERGY IN THE CENTER OF MASS IN MEV ( FOR DIRAC EQUATION )  CALX-051
C       8 - SQUARE ROOT OF RATIO TO REDUCED UNITS                       CALX-052
C       9 - K WAVE NUMBER MULTIPLIED BY RATIO OF STEP SIZES             CALX-053
C      10 - REDUCED ENERGY TERM                                         CALX-054
C      11 - STEP SIZE FOR THIS LEVEL                                    CALX-055
C      12 - ENERGY IN THE LABORATORY SYSTEM IN MEV                      CALX-056
C      13,14,15,16,17,18 - DISPERSION CORRECTIONS (SEE DISP)            CALX-057
C                                                                       CALX-058
C ADDRESSES IN THE WORKING FIELD DEFINED HERE ( COMMON /DECOU/ )        CALX-059
C  3- NIPI=1   INTEGER VALUES FOR THE CHANNEL DESCRIPTION (SEE ABOVE)   CALX-060
C  5- NIPH     NUMBER OF PHONONS FOR THE HARMONIC VIBRATIONAL MODEL     CALX-061
C  1- NJIT     DATA FOR INTERPOLATION ON TOTAL SPIN (LIMIT/STEP)        CALX-062
C  4- NWV      IBM-DOUBLE PRECISION VALUES FOR THE CHANNELS (SEE ABOVE) CALX-063
C  2- NIPP     DISPERSION PARAMETERS (SEE ABOVE)                        CALX-064
C  7- NPAR     INDICATIONS FOR NUCLEAR PARAMETERS                       CALX-065
C  3- NPAA     VALUES OF NUCLEAR PARAMETERS                             CALX-066
C  6- NSCN     LEVEL DENSITY DESCRIPTION                                CALX-067
C  8- NNIV     ADDRESSES OF REDUCED NUCLEAR MATRIX ELEMENTS AND COULOMB CALX-068
C              INTEGRALS IN NIV(NCOLL,NCOLL,3)                          CALX-069
C  9- NFIS     FISSION DATA FOR COMPOUND NUCLEUS                        CALX-070
C 10- NGAM     GAMMA DATA FOR COMPOUND NUCLEUS                          CALX-071
C 11- NPOT     OPTICAL POTENTIAL PARAMETERS                             CALX-072
C 12- NBETA    DEFORMATION PARAMETERS                                   CALX-073
C 13- NFM      HELICITIES AND OBSERVABLES (SEE DEPH,LECD AND OBSE)      CALX-074
C 14- NTGX     BEGINNING OF CHI2 AND NORMALISATION OF DATA              CALX-075
C 15- NDONN    EXPERIMENTAL DATA                                        CALX-076
C 16- NRC      PERMANENT WORKING FIELD FOR THE SEARCH                   CALX-077
C 17- NIW      INTEGER WORKING FIELD FOR THE SEARCH                     CALX-078
C 18- NDE      SEARCH ACCURACIES                                        CALX-079
C 19- NISE     INDEXES OF THE VARIABLE PARAMETERS                       CALX-080
C 20- NNVI     TABLE OF ADDRESSES OF COUPLING COEFFICIENTS              CALX-081
C 21- NNWI     SAME AS NNVI FOR SYMMETRISED EQUATIONS                   CALX-082
C 22- NCC      TABLE OF ENERGIES, L*(L+1) AND L*S  (SEE QUAN)           CALX-083
C 23- MCC      SAME AS NCC FOR SYMMETRISED EQUATIONS                    CALX-084
C 24- NXA      TABLE OF COEFFICIENTS OF SYMMETRISATION                  CALX-085
C 25- NAM1     COMPUTATION OF OBSERVABLES (SEE OBSE)                    CALX-086
C 26- NFAC     TABLE OF LOG OF FACTORIALS FOR GEOMETRIC COEFFICIENTS    CALX-087
C 27- NFAM     MATCHING VALUES (SEE MTCH)                               CALX-088
C 28- NPAD     PADE APPROXIMANTS                                        CALX-089
C 29- NFG      COULOMB FUNCTIONS AND FINITE INTEGRALS                   CALX-090
C 30- NXG      COULOMB PHASES AND INFINITE INTEGRALS                    CALX-091
C 31- NSM      STANDARD AND HELICITY SCATTERING MATRIX ELEMENTS         CALX-092
C 32- NRES     FUNCTIONS FOR THE SEARCH                                 CALX-093
C 33- NXX      VARIABLES FOR THE SEARCH                                 CALX-094
C 34- NT       FIRST FREE ADDRESS                                       CALX-095
C 35-52          SEE CALC                                               CALX-096
C OTHER INTEGER DATA OF COMMON /DECOU/                                  CALX-097
C 53- NCOLL    NUMBER OF COUPLED CHANNELS                               CALX-098
C 54- NJMAX    MAXIMUM NUMBER OF J-VALUES                               CALX-099
C 55- ITERM    MAXIMUM NUMBER OF ITERATIONS                             CALX-100
C 56- NPP      NUMBER OF OPTICAL POTENTIALS                             CALX-101
C 57- JDM      MINIMUM NUMBER OF TOTAL SPIN                             CALX-102
C 58- JIT      NUMBER OF RATES OF INTERPOLATION ON TOTAL SPIN           CALX-103
C 59- NSEC     MAXIMUM NUMBER OF SECONDS FOR A JOB                      CALX-104
C 60- LMD      DIMENSION OF A TABLE OF COEFFICIENTS: 2 BUT 3 FOR DIRAC  CALX-105
C 61- MCM(1)   MAXIMUM ANGULAR MOMENTUM FOR CENTRAL COULOMB CORRECTIONS CALX-106
C 62- MCM(2)   MAXIMUM ANGULAR MOMENTUM FOR SPIN-ORBIT COULOMB CORRECT. CALX-107
C 63- NCOLS    NUMBER OF CHANNELS WITH ANGULAR DISTRIBUTIONS            CALX-108
C 64- NCOLT    NUMBER OF CHANNELS INCLUDING UNCOUPLED STATES            CALX-109
C 65- KMAX     MAXIMUM NUMBER OF J VALUES FOR COMPOUND NUCLEUS          CALX-110
C 66- KMIN     MINIMUM NUMBER OF J VALUES FOR COMPOUND NUCLEUS          CALX-111
C 67- NVA      NUMBER OF NUCLEAR PARAMETERS                             CALX-112
C 68- NBET     NUMBER OF DIFFERENT DEFORMATIONS (VIBRATIONS+ROTATIONS)  CALX-113
C 69- NBT1     NUMBER OF PHONONS (VIBRATIONS)                           CALX-114
C 70- LMX      DIFFERENCE BETWEEN NUMBER OF J-VALUES AND OF COUL. FUNCT.CALX-115
C 71- LMAX1    NUMBER OF L-VALUES FOR COULOMB FUNCTIONS                 CALX-116
C 72- NLT      MEMORIES NEEDED FOR LEGENDRE POLYNOMIALS                 CALX-117
C 73- ISM      NUMBER OF INTEGRATION STEPS                              CALX-118
C 74- IQM      MAXIMUM L-VALUE OF DEFORMATION IN ROTATIONAL MODEL       CALX-119
C 75- IQMAX    MAXIMUM L-EXPANSION IN ROTATIONAL MODEL                  CALX-120
C 76- MS1      LARGEST PARTICLE MULTIPLICITY                            CALX-121
C 77- MS2      LARGEST TARGET MULTIPLICITY                              CALX-122
C 78- NCT(6)   NUMBER OF EQUATIONS FOR EACH PARITY IN 1 AND 2           CALX-123
C              NUMBER OF SOLUTIONS FOR EACH PARITY IN 3 AND 4           CALX-124
C              NUMBER OF COMP. NUCL. COEFF. FOR EACH PARITY IN 5 AND 6  CALX-125
C 84- KBA      NUMBER OF INDEPENDENT AMPLITUDES WITHOUT UNCOUPLED STATESCALX-126
C 85- KAB      MAXIMUM NUMBER OF EQUATIONS                              CALX-127
C 86- KBC      MAXIMUM NUMBER OF SOLUTIONS                              CALX-128
C 87- KCC      NUMBER OF INDEPENDENT AMPLITUDES WITH UNCOUPLED STATES   CALX-129
C 88- NJC      MAXIMUM NUMBER OF OBSERVABLES AT EQUIDISTANT ANGLES      CALX-130
C 89- JTX      MAXIMUM NUMBER OF CALCULATED VALUES FOR A PLOT           CALX-131
C 90- JTH      MAXIMUM NUMBER OF ANGLES FOR A PLOT                      CALX-132
C 91- NCOLR    NUMBER OF EXPERIMENTAL ANGULAR DISTRIBUTIONS             CALX-133
C 92- NREC     NUMBER OF VARIABLES IN SEARCH                            CALX-134
C 93- NTOT     NUMBER OF EXPERIMENTAL DATA                              CALX-135
C 94- NFA      NUMBER OF LOGARITHMS OF FACTORIALS                       CALX-136
C 95- LMAX2    NUMBER OF L VALUES FOR COULOMB PHASES                    CALX-137
C 96- KE       CONTROL OF SEARCH (SEE FITE)                             CALX-138
C 97- ITEMM    MAXIMUM NUMBER OF ITERATIONS AT THE BEGINNING OF A RUN   CALX-139
C 98- NPLACE   MAXIMUM WORKING FIELD USED                               CALX-140
C 99-104          SEE CALC                                              CALX-141
C OTHER NON INTEGER DATA OF COMMON /DECOU/                              CALX-142
C105- H        STEP SIZE FOR INTEGRATION                                CALX-143
C106- BJM      CONVERGENCE COEFFICIENT OF IMAGINARY POTENTIAL           CALX-144
C107- EITER    CONVERGENCE CRITERION FOR S-MATRIX                       CALX-145
C108- ACONV    CONVERGENCE CRITERION FOR POTENTIAL AND FUNCTION         CALX-146
C109- CONJ     CONVERGENCE CRITERION FOR THE SCATTERING AMPLITUDES      CALX-147
C110- NSPIN    TWICE THE K-VALUE OF THE ROTATIONAL BAND                 CALX-148
C                                                                       CALX-149
C COMMON /NCOMP/NSP(1) NUMBER OF UNCOUPLED LEVELS FOR COMPOUND NUCLEUS  CALX-150
C                      INCLUDING DISCRETISATION OF CONTINUUM            CALX-151
C               NSP(2) NUMBER OF THESE LEVELS WITH ANGULAR DISTRIBUTION CALX-152
C               NSP(3) NUMBER OF THESE LEVELS WITHOUT ANGULAR DISTRIB.  CALX-153
C               NFISS  NUMBER OF FISSION TRANSMISSION COEFFICIENTS      CALX-154
C               NRD    NUMBER OF GAMMA TRANSMISSION COEFFICIENTS        CALX-155
C               NCONT: NUMBER OF CONTINUUM FOR COMPOUND NUCLEUS         CALX-156
C               NCOJ:  NUMBER OF SPINS OF THE TARGET FOR A CONTINUUM    CALX-157
C               NCONS: NUMBER OF LEVEL DENSITIES NEEDED                 CALX-158
C               NIE:   NUMBER OF UNCOUPLED STATES ADDED FOR DISCRET.    CALX-159
C               NCOLX: TOTAL NUMBER OF LEVELS WITHOUT DISCRETISATION    CALX-160
C               NDP:   ADDRESS OF FISSION AND GAMMA FINAL RESULTS       CALX-161
C               NDQ:   ADDRESS OF FISSION AND GAMMA INTERMEDIATE RESULTSCALX-162
C               ACN1:  RATIO SIZE/STEP FOR DISCRETISATION OF A CONTINUUMCALX-163
C               ACN2:  MAXIMUM NUMBER OF STEPS BY MEV FOR A CONTINUUM   CALX-164
C               AZ, ....: SEE LECT AND COLF                             CALX-165
C COMMON /TITR/ TITLE: COMMENT CARD REPRODUCED IN THE OUTPUT            CALX-166
C COMMON /ANGL/ THETA1,THETA2,DTHETA,DTHE    SEE LECT                   CALX-167
C COMMON /NCJL/ NCJ:   NUMBER OF FACTORISATIONS OF 1/(1-COS)            CALX-168
C               NL:   DIRECTIVES FOR EXPANSION WITH LEGENDRE POLYNOMIALSCALX-169
C COMMON /DCHI/ SEE CALC AND FITE                                       CALX-170
C***********************************************************************CALX-171
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      REAL*8 ACN1, ACN2, ACOnv, AZ(18), BJM, CCZ, CHB, CHI2, CHI2m, CK,
     &       CM, CMB, CONj, DTHe, DTHeta, EITer, H, THEta1, THEta2,
     &       YY(3)
      INTEGER IDMt, IPK, IPM, IQM, IQMax, ISM, ITEmm, ITErm, JDM, JIT,
     &        JTH, JTX, KAB, KBA, KBC, KCC, KE, KMAx, KMIn, KXT, LMAx1,
     &        LMAx2, LMAx3, LMD, LMX, MCC, MCM(2), MIPi, MR, MS, MS1,
     &        MS2, MSEc, MW, MWV, NAM1, NBEt, NBEta, NBT1, NCC, NCJ,
     &        NCOi, NCOj, NCOll, NCOlr, NCOls, NCOlt, NCOlx, NCOns,
     &        NCOnt, NCT(6), NCX, NDE, NDOnn, NDP, NDQ, NFA, NFAc, NFAm,
     &        NFG, NFIs, NFIss, NFM, NGAm, NIE, NIPh, NIPp, NISe, NIVq,
     &        NIVy, NIVz, NIW, NIXt, NJC, NJIt, NJMax, NL(3), NLT, NNC,
     &        NNIv
      INTEGER NNVi, NNWi, NPAa, NPAd, NPAr, NPLace, NPOt, NPP, NRC,
     &        NRCo, NRD, NRDo, NREc, NREs, NRY, NRZ, NSCn, NSEc, NSM,
     &        NSP(3), NSPin, NT, NTGx, NTOt, NTX, NTY, NTZ, NVA, NVC1,
     &        NVC2, NWV, NXA, NXD, NXG, NXX
      CHARACTER*4 TITle(18)
      COMMON /ANGL  / THEta1, THEta2, DTHeta, DTHe
      COMMON /CNSEC / MSEc
      COMMON /DCHI  / CHI2, CHI2m, YY
      COMMON /DCONS / CM, CK, CHB, CMB, CCZ
      COMMON /DECOU / NJIt, NIPp, NPAa, NWV, NIPh, NSCn, NPAr, NNIv,
     &                NFIs, NGAm, NPOt, NBEta, NFM, NTGx, NDOnn, NRC,
     &                NIW, NDE, NISe, NNVi, NNWi, NCC, MCC, NXA, NAM1,
     &                NFAc, NFAm, NPAd, NFG, NXG, NSM, NREs, NXX, NT,
     &                NIVq, NIVy, NIVz, NCOi, MIPi, NXD, MWV, NIXt, NTY,
     &                NTX, NRY, NRCo, NRDo, NVC1, NVC2, NNC, NCX, IDMt,
     &                NCOll, NJMax, ITErm, NPP, JDM, JIT, NSEc, LMD,
     &                MCM, NCOls, NCOlt, KMAx, KMIn, NVA, NBEt, NBT1,
     &                LMX, LMAx1, NLT, ISM, IQM, IQMax, MS1, MS2, NCT,
     &                KBA, KAB, KBC, KCC, NJC, JTX, JTH, NCOlr, NREc,
     &                NTOt, NFA, LMAx2, KE, ITEmm, NPLace, KXT, NRZ,
     &                NTZ, LMAx3, IPM, IPK, BJM, EITer, ACOnv, CONj, H,
     &                NSPin
      COMMON /INOUT / MR, MW, MS
      COMMON /NCJL  / NCJ, NL
      COMMON /NCOMP / NSP, NFIss, NRD, NCOnt, NCOj, NCOns, NIE, NCOlx,
     &                NDP, NDQ, ACN1, ACN2, AZ
      COMMON /TITR  / TITle
C
C Dummy arguments
C
c     CHARACTER*4 Cw(2,1)
      CHARACTER*4 Cw(2,*)
      REAL*8 Dw(*)
      LOGICAL Lo(250)
c     INTEGER Nw(2,5)
      INTEGER Nw(2,*)
C
C Local variables
C
      CHARACTER*4 desc(3), fin
      DOUBLE PRECISION DLOG
      INTEGER i, i1, j, jcal, k, kfit, ktgr, l, lml, lmz, m, mc1, mc2,
     &        mn, na, nam2, nb, nessai, nfit, ngr(2), ngrm, nimax, njx,
     &        njy, nl2, nl3, nmx, npr(2)
      INTEGER IABS, IDINT, MAX0, MIN0
      REAL*8 rm
C
C
      DATA fin, desc/'FIN ', 'DESC', 'RIPT', 'ION '/
  100 READ (MR,99005) TITle
99005 FORMAT (18A4)
      DO j = 1, 3
         IF (TITle(j).NE.desc(j)) GOTO 200
      ENDDO
      CALL INPA
      CALL INPB
      CALL INPC
      GOTO 100
  200 IF (TITle(1).EQ.fin) RETURN
      DO i = 1, 100
         Lo(i) = .FALSE.
      ENDDO
      READ (MR,99175) (Lo(i),i = 1,50)
      IF (Lo(7) .AND. Lo(10)) THEN
         WRITE (MW,99010)
99010    FORMAT (
     &      ' DISPERSION RELATIONS NOT ALLOWED WITH EXTERNAL POTENTIALS'
     &      /)
         GOTO 400
      ELSE
C IF LO(36)=.TRUE. RETURN TO RESTART A SEARCH SAVED ON TAPE 8           CALX-207
         IF (Lo(36)) RETURN
         READ (MR,99175) (Lo(i),i = 51,100)
         READ (MR,99180) NCOll, NJMax, ITErm, NPP, NCJ, ngr, npr, lmz,
     &                   JDM, lml, JIT, mn
C ELIMINATION OF CONTRADICTIONS BETWEEN LOGICAL CONTROLS                CALX-212
         IF (NCOll.LE.1) Lo(28) = .TRUE.
         IF (.NOT.Lo(31)) Lo(32) = .FALSE.
         IF (Lo(14)) Lo(13) = .TRUE.
         IF (Lo(19)) Lo(11) = .TRUE.
         IF (Lo(92)) ITErm = 1
         IF (Lo(18)) Lo(29) = .TRUE.
         IF (Lo(100)) Lo(29) = .FALSE.
         Lo(209) = Lo(99) .OR. Lo(100)
         IF (Lo(82)) Lo(84) = .FALSE.
         IF (Lo(82)) Lo(85) = .FALSE.
         IF (Lo(82)) Lo(86) = .FALSE.
         IF (Lo(82) .OR. Lo(84) .OR. Lo(85) .OR. Lo(86)) Lo(81) = .TRUE.
         Lo(44) = Lo(44) .AND. Lo(11)
         IF (Lo(99)) THEN
            Lo(11) = .FALSE.
            Lo(19) = .FALSE.
            IF (Lo(1)) Lo(3) = .FALSE.
            IF (.NOT.Lo(1)) Lo(2) = .FALSE.
            IF ((.NOT.Lo(10)) .OR. (.NOT.Lo(12))) Lo(20) = .FALSE.
         ENDIF
         LMD = 2
         Lo(224) = Lo(81) .OR. Lo(63)
         IF (Lo(100)) LMD = 3
         WRITE (MW,99015) IDMt
99015    FORMAT ('1',20X,
     &'E. C. I. S. CODE FOR COUPLED CHANNELS CALCULATIONS ( 2003 ) WORKI
     &NG FIELD LENGTH =',I10//24X,
     &'TO OBTAIN THE INPUT DESCRIPTION, PUNCH ''DESCRIPTION '' IN COLUMN
     &S 1-12 OF THE FIRST CARD'//)
         DO i = 1, 100
            Lo(100 + i) = .NOT.Lo(i)
         ENDDO
C OUTPUT OF LOGICAL CONTROLS                                            CALX-238
         IF (.NOT.(Lo(171))) THEN
            WRITE (MW,99020) (Lo(i),Lo(50 + i),i = 1,2), Lo(53), Lo(3),
     &                       Lo(54), Lo(55), Lo(4),
     &                       (Lo(i),Lo(51 + i),i = 5,7), Lo(8), Lo(9)
99020       FORMAT ('  1-',L2,
     &              ' - ROTATIONAL MODEL-(.F.: VIBRATIONAL MODEL).',8X,
     &              '| 51-',L2,' - OUTPUT OF POTENTIALS.'/'  2-',L2,
     &      ' - SECOND ORDER VIBRATIONAL MODEL-(.F.: FIRST ORDER) | 52-'
     &      ,L2,' - OUTPUT OF REDUCED NUCLEAR MATRIX ELEMENTS.'/9X,
     &      'OR CONSTRAINED ASYMMETRIC ROTATIONAL MODEL.',7X,'| 53-',L2,
     &      ' - OUTPUT OF THE NUMBER OF ITERATIONS.'/'  3-',L2,
     &      ' - ANHARMONIC VIBRATIONAL MODEL-(.F.: HARMONIC) OR   | 54-'
     &      ,L2,' - OUTPUT OF THE LENGTH USED IN THE WORKING FIELD.'/9X,
     &      'ASYMMETRIC ROTATIONAL MODEL-(.F.: SYMMETRIC).',5X,'| 55-',
     &      L2,' - OUTPUT OF C-MATRIX ELEMENTS AND COMPOUND NUCLEUS'/
     &      '  4-',L2,
     &      ' - PARAMETRISED SPIN-ORBIT DEFORMATION-(.F.:STANDARD)|',9X,
     &      'INTERMEDIATE RESULTS.'/'  5-',L2,
     &      ' - DIFFERENT DEFORMATION FOR EACH POTENTIAL(.F.:SAME)| 56-'
     &      ,L2,' - OUTPUT OF S-MATRIX ELEMENTS.'/'  6-',L2,
     &      ' - USE OF DEFORMATION LENGTHS.',23X,'| 57-',L2,
     &      ' - OUTPUT OF PHASE-SHIFTS AT EACH E.C.I.S. ITERATION.'/
     &      '  7-',L2,
     &      ' - NUCLEAR MATRIX ELEMENTS AND FORM FACTORS ON CARDS.| 58-'
     &      ,L2,' - OUTPUT OF THE COEFFICIENTS OF EACH FORM FACTOR.'/
     &      '  8-',L2,' - RELATIVISTIC KINEMATICS.',26X,'|',9X,
     &      'FOR ALL SETS OF EQUATIONS.'/'  9-',L2,
     &      ' - SYMMETRISED WOODS-SAXON FORM FOR NEGATIVE RADII.  |')
            WRITE (MW,99025) Lo(10), Lo(59),
     &                       (Lo(i),Lo(49 + i),i = 11,15), Lo(16),
     &                       Lo(17), Lo(65), Lo(18),
     &                       (Lo(i),Lo(47 + i),i = 19,20)
99025       FORMAT (' 10-',L2,' - DISPERSION RELATIONS FOR POTENTIALS.',
     &              9X,5X,'| 59-',L2,
     &     ' - TOTAL ELASTIC REACTION CROSS-SECTIONS WRITTEN ON FILE 58'
     &     /59X,'|',9X,
     &     'AND TOTAL INELASTIC REACTION CROSS-SECTIONS ON FILE 59.'/
     &     ' 11-',L2,' - DEFORMED COULOMB POTENTIAL.',23X,'| 60-',L2,
     &     ' - S-MATRIX ELEMENTS WRITTEN ON FILE 60.'/' 12-',L2,
     &     ' - DEFORMED IMAGINARY POTENTIAL.',21X,'| 61-',L2,
     &     ' - REDUCED NUCLEAR MATRIX ELEMENTS WRITTEN ON FILE 61.'/
     &     ' 13-',L2,' - DEFORMED REAL SPIN-ORBIT/TENSOR POTENTIAL.',8X,
     &     '| 62-',L2,' - POTENTIALS WRITTEN ON FILE 62.'/' 14-',L2,
     &     ' - DEFORMED IMAGINARY SPIN-ORBIT/TENSOR POTENTIAL.   | 63-',
     &     L2,' - PENETRABILITIES WRITTEN ON FILE 63.'/' 15-',L2,
     &     ' - REDUCED NUCLEAR MATRIX ELEMENTS READ FROM CARDS.  | 64-',
     &     L2,' - RESULTS FOR EXPERIMENTAL DATA ON FILE 64'/' 16-',L2,
     &     ' - HEAVY-ION DEFINITION OF RADII AND DEFORMATIONS.   |',9X,
     &     'AND AT EQUIDISTANT ANGLES WRITTEN ON FILE 66.'/' 17-',L2,
     &     ' - FOLDING MODEL.',36X,'| 65-',L2,
     &    ' - LEGENDRE EXPANSION FOR CROSS-SECTIONS WRITTEN ON FILE 65.'
     &    /' 18-',L2,' - PROJECTILE-TARGET ANTISYMMETRISATION.',13X,
     &    '|'/' 19-',L2,' - DEFORMED COULOMB SPIN-ORBIT POTENTIAL.',12X,
     &    '| 66-',L2,' - NO CALCULATION AT EQUIDISTANT ANGLES.'/' 20-',
     &    L2,
     &    ' - DISPERSION RELATIONS FOR TRANSITION FORM-FACTORS. | 67-',
     &    L2,' - NO PLOT OF EXPERIMENTAL DATA.')
            WRITE (MW,99030) (Lo(47 + i),Lo(i),i = 21,22),
     &                       (Lo(i),Lo(48 + i),i = 23,25), Lo(74),
     &                       (Lo(i),Lo(49 + i),i = 26,28), Lo(78)
99030       FORMAT (59X,'| 68-',L2,
     &             ' - NO PLOT OF CROSS-SECTIONS AT EQUIDISTANT ANGLES.'
     &             /' 21-',L2,
     &             ' - USUAL COUPLED EQUATIONS-(.F.: ITERATIONS).',8X,
     &             '| 69-',L2,
     &             ' - NO PLOT OF POLARISATIONS AT EQUIDISTANT ANGLES.'/
     &             ' 22-',L2,
     &          ' - NO USE OF PADE FOR CONVERGENCE OF THE ITERATIONS. |'
     &          /' 23-',L2,' - NO USE OF PADE WITHOUT CONVERGENCE.',15X,
     &          '| 71-',L2,' - DETAILED OUTPUT OF LOGICAL CONTROLS.'/
     &          ' 24-',L2,
     &      ' - COUPLING POTENTIALS COMPUTED AT EACH ITERATION.   | 72-'
     &      ,L2,' - NO OUTPUT OF EXPERIMENTAL DATA AS THEY ARE READ.'/
     &      ' 25-',L2,
     &      ' - COMPLETE CALCULATION UP TO THE END-(.F.: ONE ITE- | 73-'
     &      ,L2,' - NO OUTPUT OF EXTERNAL POTENTIALS AS THEY ARE READ.'/
     &      9X,'RATION ONLY AS SOON AS TWO ITERATIONS ARE ENOUGH).| 74-'
     &      ,L2,' - OUTPUT OF VARIATIONS IN STORAGE.'/' 26-',L2,
     &      ' - INTEGRATION STABILISED FOR LONG RANGE POTENTIAL.  | 75-'
     &      ,L2,' - NO COMPLETE OUTPUT AT THE FIRST RUN OF A SEARCH.'/
     &      ' 27-',L2,
     &     ' - NUMEROV''S METHOD FOR SINGLE EQUATIONS-(.F.: MODI- | 76-'
     &     ,L2,' - LO(51) TO LO(65) ARE ALWAY USED-(.F.: ONLY FOR'/9X,
     &     'FIED NUMEROV''S METHOD).',27X,'|',9X,
     &     'COMPLETE OUTPUT)'/' 28-',L2,
     &     ' - COMPUTATION UP TO J-CONVERGENCE-(F.: STOP WHEN    | 77-',
     &     L2,' - NO OUTPUT OF TIME DIFFERENCES DURING THE SEARCH.'/9X,
     &     'ALL THE INHOMOGENEOUS TERMS ARE NEGLIGIBLE).',6X,'| 78-',L2,
     &     ' - NO OUTPUT OF DIFFERENCES BETWEEN EXPERIMENTAL')
            WRITE (MW,99035) Lo(29), (Lo(i),Lo(50 + i),i = 31,37),
     &                       Lo(91), (Lo(i),Lo(51 + i),i = 41,42)
99035       FORMAT (' 29-',L2,' - NO DIAGONAL TERM IN SECOND MEMBERS.',
     &              15X,'|',9X,'AND CALCULATED VALUES.'/59X,'|'/' 31-',
     &              L2,
     &      ' - INPUT OF EXPERIMENTAL DATA AND CHI2 CALCULATION.  | 81-'
     &      ,L2,' - HAUSER-FESHBACH CORRECTIONS TO CROSS-SECTIONS.'/
     &      ' 32-',L2,' - AUTOMATIC SEARCH ON SOME PARAMETERS.',14X,
     &      '| 82-',L2,' - SIMPLEST COMPOUND NUCLEUS FORMALISM.'/' 33-',
     &      L2,' - SYMMETRISED CHI2 FOR CROSS-SECTIONS.',14X,'| 83-',L2,
     &      ' - NO ENGELBRETCH-WEIDENMULLER TRANSF. IN C.-N.'/' 34-',L2,
     &      ' - NUMBER OF EVALUATIONS LIMITED BY THE JOB CARD.    | 84-'
     &      ,L2,' - UNCOUPLED LEVELS FOR COMPOUND NUCLEUS.'/' 35-',L2,
     &      ' - SEARCH SAVED ON TAPE 8 IF ENDED BY LACK OF TIME.  | 85-'
     &      ,L2,' - FISSION DATA IN COMPOUND NUCLEUS.'/' 36-',L2,
     &      ' - RESTART A SEARCH FROM TAPE 8.',21X,'| 86-',L2,
     &      ' - GAMMA EMISSION DATA IN COMPOUND NUCLEUS.'/' 37-',L2,
     &      ' - NEXT CALCULATION CHANGING ENERGY AND/OR SOME',6X,
     &      '| 87-',L2,' - NO WIDTH FLUCTUATIONS.'/9X,'PARAMETERS.',39X,
     &      '|'/59X,'| 91-',L2,
     &      ' - EQUIDISTANT ANGLES IN THE LABORATORY SYSTEM.'/' 41-',L2,
     &      ' - FACTORISATION OF 1/(1-COS(THETA)) IN AMPLITUDES.  | 92-'
     &      ,L2,' - PURE DWBA CALCULATION.'/' 42-',L2,
     &     ' - SCHMIDT''S ORTHOGONAL. IN USUAL COUPLED EQUATIONS. | 93-'
     &     ,L2,' - NO RECOIL CORRECTION FOR REACTIONS.')
            WRITE (MW,99040) Lo(43), Lo(94), Lo(44), Lo(98),
     &                       (Lo(i),Lo(54 + i),i = 45,46)
99040       FORMAT (' 43-',L2,' - INTERPOLATION ON TOTAL SPIN.',22X,
     &              '| 94-',L2,
     &              ' - NON STANDARD OBSERVABLES AT EQUIDISTANT ANGLES.'
     &              /' 44-',L2,' - COULOMB CORRECTIONS.',30X,'| 98-',L2,
     &              ' - USE OF REST MASS IN DIRAC EQUATIONS.'/' 46-',L2,
     &      ' - ANGULAR MOMENTUM LIMIT FOR COULOMB CORRECTIONS.   | 99-'
     &      ,L2,' - SCHROEDINGER EQUIVALENT TO DIRAC EQUATION.'/' 46-',
     &      L2,' - RESTRICTED COULOMB CORRECTIONS.',19X,'|100-',L2,
     &      ' - COMPLETE DIRAC EQUATION.'/'1')
         ENDIF
         IF (Lo(171)) WRITE (MW,99045) (Lo(i),i = 1,100)
99045    FORMAT (//' **** FIRST CONTROL CARD ****',2X,'1 ',9(' 1'),
     &           ' 2 ',9(' 2'),' 3 ',9(' 3'),' 4 ',9(' 4'),' 5'/11X,
     &           5('  1 2 3 4 5 6 7 8 9 0')/11X,5(1X,10L2)
     &           //' *** SECOND CONTROL CARD ****',2X,'1 ',9(' 1'),
     &           ' 2 ',9(' 2'),' 3 ',9(' 3'),' 4 ',9(' 4'),' 5'/11X,
     &           5('  1 2 3 4 5 6 7 8 9 0')/11X,5(1X,10L2)/)
         WRITE (MW,99050) TITle
99050    FORMAT (10X,82('*')/10X,'*',80X,'*'/10X,'*',4X,18A4,4X,'*'/10X,
     &           '*',80X,'*'/10X,82('*')/)
         READ (MR,99055) H, rm, BJM, EITer, ACOnv, CONj
99055    FORMAT (7F10.3)
C DEFECT VALUES OF NJMAX,ITERM,NPP,NCJ,NPR,NGR,EITER,ACONV,CONJ         CALX-253
C FOR NPR AND NGR, SEE DEPH                                             CALX-254
         IF (NJMax.EQ.0) NJMax = 20
         IF (ITErm.EQ.0) ITErm = 20
         IF (NPP.EQ.0) NPP = 1
         IF (npr(1).EQ.0) npr(1) = 1
         IF (npr(2).EQ.0) npr(2) = 1
         IF (ngr(1).EQ.0) ngr(1) = 2
         IF (ngr(2).EQ.0) ngr(2) = 2
         IF (NCJ.LE.0) NCJ = 1
         IF (JIT.EQ.0) JIT = 1
         IF (Lo(143)) JIT = 0
         IF (mn.LE.0) mn = 1
         NJMax = mn*NJMax
         IF (EITer.EQ.0.D0) EITer = 1.D-5
         IF (ACOnv.EQ.0.D0) ACOnv = 1.D-5
         IF (CONj.EQ.0.D0) CONj = 1.D-5
         MSEc = 3600
         NSEc = 100
         IF (Lo(34)) READ (MR,99180) MSEc, NSEc
         IF (MSEc.EQ.0) MSEc = 3600
         IF (NSEc.EQ.0) NSEc = 100
         CALL HORA
C OUTPUT OF TITLE, MASSES, ETC..                                        CALX-276
         WRITE (MW,99060) NJMax, JDM, CONj, ngr, npr
99060    FORMAT (' MAXIMUM NUMBER OF J',I6,'  (MIN',I3,
     &           ') STOP WHEN MAXIMUM S-MATRIX ELEMENT IS LESS THAN',
     &           D18.4//' PLOT CONDITIONS FOR CROSS-SECTIONS',2I5,5X,
     &           'FOR POLARISATIONS',2I5/)
         IF (Lo(41)) WRITE (MW,99065) NCJ
99065    FORMAT (4X,I3,
     &           ' FACTORISATION OF 1/(1-COS(THETA)) IN THE AMPLITUDES')
         IF (lml.NE.0) WRITE (MW,99070) lml
99070    FORMAT (' ANGULAR MOMENTA LIMITED TO',I5)
         IF (Lo(121)) WRITE (MW,99075) ITErm, EITer, ACOnv
99075    FORMAT (10X,'ITERATION METHOD:  MAXIMUM NUMBER OF ITERATIONS',
     &           I10/10X,'CONVERGENCE CRITERION:',D15.2,' FOR S-MATRIX',
     &           D15.2,' FOR POTENTIALS AND FUNCTIONS'/)
         Lo(228) = Lo(21) .OR. Lo(29) .OR. BJM.NE.0.D0
         IF (BJM.NE.0.D0) WRITE (MW,99080) BJM
99080    FORMAT (' IMAGINARY POTENTIAL INCREASED WITH A FACTOR',F10.5,
     &           ' FOR BETTER CONVERGENCE')
         IF (Lo(21)) WRITE (MW,99085)
99085    FORMAT (' USUAL COUPLED EQUATIONS')
         IF (Lo(21) .AND. Lo(42)) WRITE (MW,99090) ITErm
99090    FORMAT (' SCHMIDT''S ORTHOGONALISATION EVERY',I5,'  STEPS')
         IF (Lo(32) .AND. Lo(34)) WRITE (MW,99095) MSEc, NSEc
99095    FORMAT (5X,I5,' MAXIMUM NUMBER OF SECONDS FOR A JOB'/5X,I5,
     &           ' HUNDREDTHS OF SECOND TO PRINT FINAL OUTPUT')
C INITIALISATION OF A SEARCH OR A SINGLE RUN                            CALX-286
         DO i = 211, 220
            Lo(i) = .FALSE.
         ENDDO
         Lo(215) = .TRUE.
C LIMITATION ON ANGULAR MOMENTUM FOR COULOMB CORRECTIONS                CALX-290
         MCM(1) = 3
         MCM(2) = 2
         IF (.NOT.(Lo(145))) THEN
            READ (MR,99180) mc1, mc2
            IF (mc1.GT.0) MCM(1) = MIN0(mc1,5)
            IF (mc2.GT.0) MCM(2) = MIN0(mc2,4)
            IF (mc1.LT.0) MCM(1) = 0
            IF (mc2.LT.0) MCM(2) = 0
            WRITE (MW,99100) MCM
99100       FORMAT (' COULOMB CORRECTIONS LIMITED TO ANGULAR MOMENTA',
     &              I2,' FOR CENTRAL TERM AND',I2,
     &              ' FOR SPIN-ORBIT TERM')
         ENDIF
         nl2 = 3*NJMax
         nl3 = 2*NJMax
C LEGENDRE POLYNOMIALS DATA                                             CALX-302
         IF (.NOT.(Lo(165))) THEN
            READ (MR,99180) NL
            IF (NL(1).EQ.0) NL(1) = 2
            IF (NL(2).NE.0) nl2 = NL(2)
            IF (NL(3).NE.0) nl3 = NL(3)
            IF (Lo(65)) WRITE (MW,99105) NL
99105       FORMAT (/
     &' INDICATIONS FOR EXPANSION OF CROSS-SECTIONS IN LEGENDRE POLYNOMI
     &ALS:',3I5)
         ENDIF
C COMPOUND NUCLEUS DATA                                                 CALX-309
         NSP(1) = 0
         NSP(2) = 0
         NSP(3) = 0
         NFIss = 0
         NRD = 0
         NCOnt = 0
         NCOns = 0
         IF (.NOT.(Lo(184) .AND. Lo(185) .AND. Lo(186))) THEN
            READ (MR,99110) NSP(1), NSP(2), NFIss, NRD, NCOnt, NCOj,
     &                      KMIn, KMAx, ACN1, ACN2
99110       FORMAT (8I5,2F10.5)
            IF (Lo(184)) NSP(1) = 0
            NSP(2) = MIN0(NSP(1),NSP(2))
            NSP(3) = NSP(1) - NSP(2)
            IF (NSP(3).LT.NCOnt) THEN
               WRITE (MW,99115) NSP(3), NCOnt
99115          FORMAT (
     &        ' NUMBER OF UNCOUPLED STATES WITHOUT ANGULAR DISTRIBUTION'
     &        ,I5,' LESS THAN THE NUMBER OF CONTINUA:',I5)
               GOTO 400
            ELSE
               IF (Lo(185)) NFIss = 0
               IF (Lo(186)) NRD = 0
               IF (NFIss.EQ.0) Lo(85) = .FALSE.
               Lo(185) = .NOT.Lo(85)
               IF (Lo(84) .OR. Lo(85) .OR. Lo(86)) WRITE (MW,99120) NSP,
     &             NFIss, NRD, NCOnt
99120          FORMAT (/' COMPOUND NUCLEUS INPUT:',I5,
     &                 ' UNCOUPLED STATES',I4,
     &                 ' WITH ANGULAR DISTRIBUTION AND',I4,
     &                 ' WITHOUT ANGULAR DISTRIBUTION'/24X,I5,
     &                 ' FISSION TRANSM. COEFF.'/24X,I5,
     &                 ' GAMMA TRANSM. COEFF.'/24X,I5,' CONTINUA')
               NCOns = NCOnt
               IF (Lo(86) .AND. NRD.EQ.0) NCOns = NCOns + 1
               IF (NCOnt.NE.0) THEN
                  IF (NCOj.LE.0) NCOj = 30
                  IF (ACN1.LE.1.D0) ACN1 = 8.D0
                  IF (ACN2.LE.1.D0) ACN2 = 8.D0
                  WRITE (MW,99125) NCOj, ACN1, ACN2
99125             FORMAT (
     &                ' MAXIMUM NUMBER OF SPIN VALUES IN THE CONTINUUM:'
     &                ,I5/' DISCRETISATION WITH:',2F10.5)
               ENDIF
            ENDIF
         ENDIF
         NCOlx = NCOll + NSP(1)
         NCOls = NCOll + NSP(2)
         NCOlt = NCOlx
         NIPh = (11*NCOlx + 1)/2 + 1
         NJIt = NIPh + NCOll
         IF (Lo(7)) NJIt = NIPh
         NWV = NJIt + JIT
         NIPp = NWV + 18*NCOlx
         NPAr = NIPp + 15*NPP
         NPLace = NPAr
         CALL MEMO('CALX',IDMt,NPLace,1)
C INTERPOLATION DATA                                                    CALX-348
         IF (.NOT.(Lo(143))) THEN
            k = NJIt
            READ (MR,99180) (Nw(1,NJIt + i - 1),Nw(2,NJIt + i - 1),
     &                      i = 1,JIT)
            WRITE (MW,99130) (Nw(1,NJIt + i - 1),Nw(2,NJIt + i - 1),
     &                       i = 1,JIT)
99130       FORMAT (' INTERPOLATION OF S-MATRIX',
     &              3(2X,'FROM',I6,'  BY STEPS OF',I4,'+1')
     &              /(26X,3(2X,'FROM',I6,'  BY STEPS OF',I4,'+1')))
            m = 0
            l = -1
            DO i = 1, JIT
               IF (Nw(1,NJIt + i - 1).LT.l) GOTO 300
               l = Nw(1,NJIt + i - 1)
               Nw(2,NJIt + i - 1) = Nw(2,NJIt + i - 1) - m
               m = m + Nw(2,NJIt + i - 1)
               k = k + 2
            ENDDO
            WRITE (MW,99135) (Nw(2,NJIt + i - 1),i = 1,JIT)
99135       FORMAT (' UNCUMULATED INCREASES  ',3(27X,I4)/(24X,3(27X,I4))
     &              )
         ENDIF
C INPUT OF LEVEL DESCRIPTIONS                                           CALX-362
         CALL LECL(NCOlx,NCOll,NPP,NCOnt,Nw,Nw(1,NIPh),Dw(NWV),
     &             Nw(1,NIPp),Nw(1,NPAr),Dw(NPAr),NVA,na,nb,nimax,NBEt,
     &             CM,IDMt - NPAr,Lo)
         NPAa = NPAr + na
         NSCn = NPAa + NVA + nb
         IF (KMIn.EQ.0) KMIn = IABS(Nw(2,1) - Nw(1,2))/2 + Nw(1,1)
         IF (KMAx.EQ.0) KMAx = NJMax
         Lo(233) = Lo(43) .AND.
     &             ((Nw(1,NJIt).LT.KMAx) .OR. (Nw(2,NJIt).NE.0))
C INPUT OF POTENTIALS, DEFORMATIONS ......                              CALX-370
         NBT1 = NBEt
         LMX = nimax/2 + 2
         LMAx1 = NJMax + LMX
         IF (lml.EQ.0) lml = LMAx1
         Nw(2,5) = lml
         NFIs = NSCn + 7*NCOns
         NGAm = NFIs + 2*NFIss
         NNIv = NGAm + NRD
         NPOt = NNIv + (3*NCOll*NCOll + 1)/2
         NBEta = NPOt + 34*NPP
         IF (Lo(7)) NBEta = NPOt
         IF (NBEta + 9*NBEt.GT.IDMt)
     &       CALL MEMO('CALX',IDMt,NBEta + 9*NBEt,1)
         IF (Dw(NWV + 4).EQ.0.) nl2 = nl3
         NLT = MAX0(nl2,nl3)
         IF (Lo(165)) NLT = 0
         CALL LECT(NBEt,Nw,Nw(1,NIPp),Dw(NIPp),Dw(NWV),Nw(1,NBEta),
     &             Dw(NBEta),Dw(NPOt),Dw(NFIs),Dw(NGAm),NPP,rm,ACOnv,
     &             IDMt - NBEta,H,NSPin,ISM,IQM,IQMax,Dw(NSCn),CK,CM,Lo)
         NFM = NBEta + 9*NBEt
         IF (Lo(74)) CALL HORA
C HELICITY AMPLITUDES AND OBSERVABLES                                   CALX-391
         njx = NCOll
         CALL DEPH(NCOll,NCOls,Dw(NWV),Nw,Nw(1,NFM),MS1,MS2,NCT,KCC,KBA,
     &             KAB,KBC,ktgr,ngr,npr,JTX,Nw(1,NNIv),NJC,njx,njy,
     &             IDMt - NFM,Lo)
         JTH = 0
         IF (Lo(166)) JTH = IDINT((THEta2 - THEta1)/DTHeta + 1.5D0)
         JTX = JTX*JTH
         ngrm = NFM + 5*KCC
         NNVi = NFM + 5*ktgr
         NREc = 0
         NTOt = 0
         IF (.NOT.(Lo(131))) THEN
C NUMBER OF PARAMETERS IN SEARCH AND EXPERIMENTAL DATA                  CALX-403
            READ (MR,99140) NCOlr, NREc, nfit, nessai, YY(1), YY(2)
99140       FORMAT (4I5,2F10.5)
C SEARCH CONDITIONS                                                     CALX-405
C DEFECT VALUES FOR NESSAI (MAXIMUM NUMBER OF EVALUATIONS) AND ECH      CALX-406
C NFIT IS THE NUMBER OF FUNCTIONS STORED FOR SEARCH BEYOND NREC+1       CALX-407
            IF (nessai.EQ.0) nessai = 100
            kfit = NREc + nfit + 1
            IF (YY(1).EQ.0.D0) YY(1) = 20.D0
            IF (YY(2).LT.1.D0) YY(2) = 1.D0
            YY(3) = 0.D0
            WRITE (MW,99145) NCOlr
99145       FORMAT (//5X,I5,'  EXPERIMENTAL ANGULAR DISTRIBUTIONS'/)
            IF (NCOlr.LE.0) THEN
               WRITE (MW,99150)
99150          FORMAT (
     &                ' THERE ARE NO EXPERIMENTAL DATA   ...  NO SEARCH'
     &                )
               Lo(31) = .FALSE.
               Lo(131) = .TRUE.
            ELSE
               ktgr = ktgr + NCOlr
               NTGx = NFM + 5*ktgr
               NDOnn = NTGx + 7*NCOlr
C EXPERIMENTAL DATA                                                     CALX-418
               IF (NDOnn.GT.IDMt) CALL MEMO('CALX',IDMt,NDOnn,1)
               CALL LECD(NCOls,NCOlt,NCOlr,Dw(NWV),Nw(1,NNVi),Nw(1,NTGx)
     &                   ,Dw(NTGx),Dw(NDOnn),ngr,NTOt,NREc,Dw(NDOnn),
     &                   Nw(1,NDOnn),nmx,kfit,nessai,YY,JTH,njy,
     &                   IDMt - NDOnn,Lo)
               JTX = MAX0(JTH,JTX)
               NNVi = NDOnn + 6*NTOt
               IF (Lo(132)) GOTO 250
               IF (NREc.GT.0) THEN
                  NDE = NNVi
                  NISe = NDE + NREc
                  NRC = NISe + nmx/2
                  NIW = NRC + MAX0(14 + NREc + kfit*(NTOt + NREc + 1),
     &                  (NREc*(NREc+5))/2)
                  IF (NIW.GT.IDMt) CALL MEMO('CALX',IDMt,NIW,1)
                  Nw(1,NIW) = kfit
                  Nw(2,NIW) = nessai
                  Nw(1,NIW + 1) = 1
                  NNVi = NIW + (kfit + 5)/2
                  i1 = 51
                  IF (Lo(76) .OR. Lo(175)) i1 = 59
                  DO i = i1, 65
                     Lo(i + 185) = Lo(i)
                     Lo(i) = .FALSE.
                     Lo(i + 100) = .TRUE.
                  ENDDO
                  Lo(216) = Lo(75)
                  GOTO 250
               ENDIF
            ENDIF
            IF (Lo(32)) WRITE (MW,99155)
99155       FORMAT (' NO PARAMETER IN SEARCH')
            Lo(32) = .FALSE.
            Lo(132) = .TRUE.
         ENDIF
  250    IF (Lo(74)) CALL HORA
         NNWi = NNVi
         IF (Lo(231)) NNWi = NNWi + (3*KAB*KAB + 1)/2
         NCC = NNWi + 2*KAB*KAB
         MCC = NCC
         IF (Lo(231)) MCC = MCC + 3*KAB
         NXA = MCC + 3*KAB
         NAM1 = NXA
         IF (Lo(231)) NAM1 = NAM1 + KBC*KBC
         nam2 = NAM1 + 4*(njy + 16)
         IF (nam2.GT.IDMt) CALL MEMO('CALX',IDMt,nam2,1)
C DO LOOPS AND CG-COEFFICIENTS FOR OBSERVABLES                          CALX-461
         CALL OBSE(Nw(1,ngrm),Cw(1,ngrm),ktgr - KCC,NCOlr,Nw,Cw(1,NAM1),
     &             Nw(1,NAM1),Cw(1,NAM1),Dw(nam2),Cw(1,nam2),Nw(1,nam2),
     &             jcal,IDMt - nam2,Lo)
         NFA = 4*LMAx1 + 10 - 2*NJMax
         NFAc = NAM1 + jcal
         NFAm = NFAc + NFA + 1
         NPAd = NFAm + KAB*(2*KBC + 8)
         IF (Lo(224)) NPAd = NFAm + KAB*(2*KAB + 8)
         NFG = NPAd + 2*ITErm*(KAB + 2)
         IF (Lo(21) .OR. Lo(22)) NFG = NPAd
         LMAx2 = LMAx1
         IF (Lo(208)) THEN
            LMAx1 = lmz + LMX
            IF (lmz.EQ.0) LMAx1 = LMAx2 - NJMax/2
            IF (lmz.LT.0) LMAx1 = LMAx2
            WRITE (MW,99160) LMAx2, LMAx1
99160       FORMAT (2X,I10,' COULOMB PHASES AND INDEFINITE INTEGRALS'/2X
     &              ,I10,' COULOMB FUNCTIONS AND FINITE INTEGRALS')
         ENDIF
         NXG = NFG + 4*njx*LMAx1
         NREs = NXG + njx*LMAx2
         KE = 0
         NXX = NREs + NTOt
         NT = NXX + NREc
         ITEmm = ITErm
         NPLace = NT
         IF (NPLace.GT.IDMt) CALL MEMO('CALX',IDMt,NPLace,1)
         Dw(NFAc) = 0.D0
         DO i = 1, NFA
            Dw(NFAc + i) = Dw(NFAc + i - 1) + DLOG(DFLOAT(i))
         ENDDO
         RETURN
      ENDIF
  300 WRITE (MW,99165) i, Nw(k,1), l
99165 FORMAT (2X,I3,'TH LIMIT OF INTERPOLATION',I6,
     &        ' SMALLER THAN PREVIOUS ONE',I6)
  400 WRITE (MW,99170)
99170 FORMAT (' IN CALX  ... STOP ...')
      STOP
99175 FORMAT (50L1)
99180 FORMAT (14I5)
      END
C 01/01/04                                                      ECIS03  INPA-000
      SUBROUTINE INPA
C
C
C
      WRITE (6,99005)
99005 FORMAT ('01/01/04',64X,'ECIS-000'/15X,
     &        'DESCRIPTION OF INPUT OF ECIS03',27X,'ECIS-001'/15X,
     &        '******************************',27X,'ECIS-002'/72X,
     &        'ECIS-003'/72X,'ECIS-004'/72X,
     &        'ECIS-005'/'CARDS READ IN SUBROUTINE CALX',43X,
     &        'ECIS-006'/'*****************************',43X,
     &        'ECIS-007'/72X,'ECIS-008'/'CARD 1',34X,'FORMAT (18A4)',
     &        19X,'ECIS-009'/'******',66X,'ECIS-010'/6X,
     &   'TITLE OF THE RUN WHICH WILL BE PRINTED AS HEADING OF RESULTS.'
     &   ,5X,'ECIS-011'/72X,'ECIS-012'/6X,
     &   'IF TITLE=''DESCRIPTION '' THIS INPUT DESCRIPTION IS LISTED.',
     &   9X,'ECIS-013'/9X,'(1829 LINES CORRECTLY PRINTED IN 31 PAGES)',
     &   21X,'ECIS-014'/10X,'AFTER THIS LISTING, GO BACK TO CARD 1.',
     &   24X,'ECIS-015'/72X,'ECIS-016'/6X,
     &   'IF TITLE=''FIN '' THE CALCULATION IS STOPPED.',23X,
     &   'ECIS-017'/72X,'ECIS-018'/11X,
     &   'THESE CONTROL WORDS MUST BE PUNCHED FROM COLUMN 1.',11X,
     &   'ECIS-019'/72X,'ECIS-020'/'CARD 2',34X,'FORMAT (50L1)',19X,
     &   'ECIS-021'/'******',66X,'ECIS-022'/6X,
     &  '50 FIRST LOGICAL CONTROLS LO. ENTER ''T'' IN THE CORRESPONDING'
     &  ,6X,'ECIS-023'/6X,'COLUMN FOR .TRUE. AND NOTHING FOR .FALSE..',
     &  24X,'ECIS-024'/72X,'ECIS-025'/' MODEL',66X,'ECIS-026'/7X,
     &  '1- LO(1)  ROTATIONAL MODEL-(INVERSE: VIBRATIONAL MODEL).',9X,
     &  'ECIS-027'/7X,
     &'2- LO(2)  SECOND ORDER VIBRATIONAL MODEL-(INVERSE: FIRST ORDER).
     &ECIS-028'/17X,
     &'OR CONSTRAINED ASYMMETRIC ROTATIONAL MODEL (BAND MIXINGECIS-029')
      WRITE (6,99010)
99010 FORMAT (17X,'PARAMETERS OF THE FIRST TWO 2+ COMPUTED FROM THE',7X,
     &        'ECIS-030'/17X,
     &        'QUADRUPOLE ''GAMMA'' IN THE DAVYDOV-FILIPPOV MODEL).',5X,
     &        'ECIS-031'/7X,
     &   '3- LO(3)  ANHARMONIC VIBRATIONAL MODEL-(INVERSE: HARMONIC) OR'
     &   ,4X,'ECIS-032'/17X,
     &   'ASYMMETRIC ROTATIONAL MODEL-(INVERSE: SYMMETRIC).',6X,
     &   'ECIS-033'/7X,
     &'4- LO(4)  PARAMETRISED SPIN-ORBIT DEFORMATION-(INVERSE: STANDARD)
     &ECIS-034'/7X,
     &'5- LO(5)  DIFFERENT DEFORMATION FOR EACH POTENTIAL-(INVERSE: SAME
     &ECIS-035'/17X,'DEFORMATION).',42X,'ECIS-036'/7X,
     &'6- LO(6)  DEFORMATION LENGTHS READ INSTEAD OF DEFORMATIONS FOR
     &ECIS-037'/17X,'WOODS-SAXON FORM FACTORS.',30X,'ECIS-038'/7X,
     &'7- LO(7)  NUCLEAR MATRIX ELEMENT AND FORM FACTORS READ ON CARDS.
     &ECIS-039'/17X,'THIS IS NOT ALLOWED FOR SCHROEDINGER EQUIVALENT OF'
     &,5X,'ECIS-040'/17X,
     &'DIRAC EQUATION. WITH SPIN IN SOME CHANNEL AND NO',7X,
     &'ECIS-041'/17X,'COULOMB SPIN-ORBIT, USE ALSO LO(46)=.TRUE..',12X,
     &'ECIS-042'/7X,
     &'8- LO(8)  RELATIVISTIC KINEMATICS (REDUCED MASS REPLACED BY',6X,
     &'ECIS-043'/17X,'SIMILAR FORMULA WITH RELATIVISTIC ENERGIES).',11X,
     &'ECIS-044'/7X,
     &'9- LO(9)  SYMMETRIC WOODS-SAXON FORM FACTORS WHEN THE RADIUS IS
     &ECIS-045'/17X,'NEGATIVE.',46X,'ECIS-046'/6X,
     &'10- LO(10) ENERGY DEPENDENT POTENTIALS BY DISPERSION RELATIONS.
     & ECIS-047'/17X,
     &'NOT ALLOWED WITH EXTERNAL POTENTIALS (LO(7)=.TRUE.).   ECIS-048'/
     &72X,'ECIS-049'/' INTERACTION',60X,'ECIS-050')
      WRITE (6,99015)
99015 FORMAT (6X,
     &'11- LO(11) DEFORMED COULOMB POTENTIAL. WITH LO(7)=.FALSE., IT IS
     & ECIS-051'/17X,'SET .FALSE. BY THE CODE IF NO CHARGE IS READ.',
     &10X,'ECIS-052'/6X,
     &'12- LO(12) DEFORMED IMAGINARY POTENTIAL (VOLUME AND SURFACE OR',
     &4X,'ECIS-053'/17X,'SCALAR AND VECTOR).',36X,'ECIS-054'/6X,
     &'13- LO(13) DEFORMED REAL SPIN-ORBIT OR TENSOR POTENTIAL. WITH',
     &5X,'ECIS-055'/17X,
     &'LO(7)=.FALSE., IT IS SET .FALSE. BY THE CODE IF NO',5X,
     &'ECIS-056'/17X,'NON ZERO SPIN AND NO RELATED POTENTIAL ARE READ.',
     &7X,'ECIS-057'/6X,
     &'14- LO(14) DEFORMED IMAGINARY SPIN-ORBIT OR TENSOR POTENTIAL. IF
     & ECIS-058'/17X,
     &'.TRUE., LO(13) IS SET .TRUE.. WITH LO(7)=.FALSE., IT ISECIS-059'/
     &17X,'SET .FALSE. BY THE CODE AS FOR LO(13).',17X,
     &'ECIS-060'/''/6X,
     &'15- LO(15) REDUCED NUCLEAR MATRIX ELEMENTS READ FROM CARDS.',7X,
     &'ECIS-061'/17X,
     &'IT IS NECESSARY FOR THE ANHARMONIC VIBRATIONAL MODEL.  ECIS-062'/
     &6X,
     &'16- LO(16) HEAVY-ION DEFINITION OF REDUCED RADII AND DEFORMATIONS
     &.ECIS-063'/17X,
     &'WHEN THERE ARE DIFFERENT MASSES IN DIFFERENT CHANNELS, ECIS-064'/
     &17X,'THE MASSES TO BE USED CAN BE INDICATED BY THE FIRST',4X,
     &'ECIS-065'/17X,
     &'INPUT, BUT ONLY THE MASSES OF THE FIRST LEVEL CAN BE   ECIS-066'/
     &17X,
     &'USED FOR THE BACK TRANSFORMATION OF THE RESULTS OF A   ECIS-067'/
     &17X,'SEARCH OR IN THE SUBROUTINE EVAL (LO(37)=.TRUE.).',6X,
     &'ECIS-068'/17X,
     &'IF LO(6)=.TRUE., ONLY COULOMB DEFORMATION LENGTHS ARE  ECIS-069')
      WRITE (6,99020)
99020 FORMAT (17X,'CHANGED.',47X,'ECIS-070'/6X,
     &'17- LO(17) FOLDING MODEL. WITH EXTERNAL FORM FACTORS THE FOLDING
     & ECIS-071'/17X,
     &'PARAMETERS ARE USED INDEPENDENTLY OF THIS LOGICAL.',5X,
     &'ECIS-072'/6X,
     &'18- LO(18) PROJECTILE-TARGET ANTISYMMETRISATION, VALID ONLY FOR
     & ECIS-073'/17X,
     &'SAME SPIN OF THE PARTICLE AND THE TARGET AND POSITIVE  ECIS-074'/
     &17X,'PARITY IN THE SCHROEDINGER FORMALISM. FOR SPIN 0,',6X,
     &'ECIS-075'/17X,
     &'THE S-MATRIX IS COMPUTED ONLY FOR EVEN TOTAL SPINS.',4X,
     &'ECIS-076'/17X,
     &'FOR SPIN NON 0., THE AMPLITUDES ARE SYMMETRISED BUT',4X,
     &'ECIS-077'/17X,'THIS DO NOT CORRECT THE LACK OF SYMMETRY OF THE',
     &8X,'ECIS-078'/17X,'INTERACTION BETWEEN PARTICLE AND TARGET.',15X,
     &'ECIS-079'/6X,
     &'19- LO(19) DEFORMED COULOMB SPIN-ORBIT POTENTIAL. IF .TRUE.,',6X,
     &'ECIS-080'/17X,
     &'LO(11) IS SET .TRUE.. WITH LO(7)=.FALSE., IT IS SET',4X,
     &'ECIS-081'/17X,
     &'.FALSE. BY THE CODE AS FOR LO(13). (NEEDS LO(13)=.TRUE.ECIS-082'/
     &17X,'WITH A REAL SPIN-ORBIT POTENTIAL, EVEN VERY SMALL)',5X,
     &'ECIS-083'/6X,
     &'20- LO(20) ENERGY DEPENDENCE OF TRANSITION FORM-FACTORS WHEN',6X,
     &'ECIS-084'/17X,
     &'LO(10)=.TRUE. . THIS DEPENDENCE IS THE GEOMETRIC MEAN  ECIS-085'/
     &17X,'VALUE OF THE DEPENDENCE OF THE LEVELS BETWEEN WHICH',4X,
     &'ECIS-086'/17X,
     &'THE TRANSITION FORM-FACTOR OCCURS. IT CANNOT BE USED   ECIS-087'/
     &17X,'WITH LO(12)=.FALSE. .',34X,'ECIS-088')
      WRITE (6,99025)
99025 FORMAT (
     &'  NOTE:  IN THE ROTATIONAL MODELS, THE OPTICAL POTENTIALS (FOR EL
     &ASTIC  ECIS-089'/
     &'  ****  SCATTERING) ARE ALWAYS DEFORMED. TO AVOID THIS, WHEN LO(1
     &1),',4X,'ECIS-090'/8X,
     &'LO(12),LO(13),LO(14) OR LO(19) IS .FALSE., USE LO(5)=.TRUE.',5X,
     &'ECIS-091'/8X,'AND ENTER 0. FOR THE CORRESPONDING DEFORMATIONS.',
     &16X,'ECIS-092'/72X,'ECIS-093'/' INTEGRATION',60X,'ECIS-094'/6X,
     &'21- LO(21) USUAL COUPLED EQUATIONS-(INVERSE: ITERATIONS).',9X,
     &'ECIS-095'/17X,
     &'NOT ALLOWED WITH DIRAC EQUATION. WHEN IT IS USED WITH  ECIS-096'/
     &17X,
     &'DEFORMED SPIN-ORBIT, THE DERIVATIVE TERMS ARE NOT TAKENECIS-097'/
     &17X,'INTO ACCOUNT AND THE COMPUTATION IS INCORRECT.',9X,
     &'ECIS-098'/6X,
     &'22- LO(22) NO USE OF PADE APPROXIMANTS FOR CONVERGENCE OF THE',
     &5X,'ECIS-099'/17X,'ITERATIONS.',44X,'ECIS-100'/6X,
     &'23- LO(23) NO USE OF PADE APPROXIMANT RESULTS AND SHIFT TO USUAL
     & ECIS-101'/17X,
     &'COUPLED EQUATIONS WHEN CONVERGENCE IS NOT OBTAINED.',4X,
     &'ECIS-102'/6X,
     &'24- LO(24) COMPUTATION OF COUPLING POTENTIALS AT EACH ITERATION.
     & ECIS-103'/17X,
     &'(SAVES SPACE BUT LOSES TIME, CHIEFLY IN ROTATIONAL',5X,
     &'ECIS-104'/17X,'MODEL).',48X,'ECIS-105'/6X,
     &'25- LO(25) COMPLETE CALCULATION UP TO THE END-(INVERSE: ONE',7X,
     &'ECIS-106'/17X,
     &'ITERATION ONLY AS SOON AS TWO ITERATIONS ARE ENOUGH).  ECIS-107'/
     &6X,
     &'26- LO(26) STABILISATION OF INTEGRATION FOR LONG RANGE CONSTANT
     & ECIS-108')
      WRITE (6,99030)
99030 FORMAT (17X,
     & 'POTENTIALS. AN ADDITIONAL TERM IN H**6 IS INTRODUCED INECIS-109'
     & /17X,
     & 'THE TRUNCATION IN SUCH A WAY THAT THE TERM IN H**6 OF  ECIS-110'
     & /17X,
     & 'THE TOTAL TRUNCATION ERROR CANCELS OUT FOR A CONSTANT  ECIS-111'
     & /17X,'POTENTIAL.',45X,'ECIS-112'/6X,
     & '27- LO(27) NUMEROV''S METHOD FOR SINGLE EQUATIONS-(INVERSE:',8X,
     & 'ECIS-113'/17X,
     & 'MODIFIED NUMEROV''S METHOD). FOR SINGLE EQUATION AND',4X,
     & 'ECIS-114'/17X,
     & 'CONSTANT POTENTIAL, TRUNCATION ERRORS ARE OF OPPOSITE  ECIS-115'
     & /17X,'SIGN.',50X,'ECIS-116'/6X,
     &'28- LO(28) COMPUTATION UP TO J-CONVERGENCE-(INVERSE: STOP WHEN AL
     &LECIS-117'/17X,
     &'THE INHOMOGENEOUS TERMS ARE NEGLIGIBLE). FOR ELASTIC   ECIS-118'/
     &17X,
     &'SCATTERING (ONLY ONE CHANNEL) LO(21) OR LO(28) MUST BE ECIS-119'/
     &17X,
     &'.TRUE.. IN THIS CASE LO(28) IS SET .TRUE. BY THE CODE. ECIS-120'/
     &''/6X,
     &'29- LO(29) NO DIAGONAL TERMS IN SECOND MEMBERS FOR ITERATIONS OF
     & ECIS-121'/17X,
     &'SCHROEDINGER EQUATIONS. (INVERSE: ALL COUPLINGS ARE IN ECIS-122'/
     &17X,
     &'SECOND MEMBERS. THE UNCOUPLED SOLUTIONS DO NOT DEPEND  ECIS-123'/
     &17X,
     &'ON THE CHANNEL SPIN BUT CONVERGENCE CAN BE SLOWER IN   ECIS-124'/
     &17X,'SOME PROBLEMS. NO EFFECT IN FIRST ORDER VIBRATIONAL',4X,
     &'ECIS-125'/17X,
     &'MODEL, NO USE IN DIRAC EQUATIONS: IF LO(100)=.TRUE.,   ECIS-126'/
     &17X,
     &'LO(29) IS SET .FALSE.). FOR CONVENIENCE, LO(29) IS SET ECIS-127'/
     &17X,'.FALSE. IF LO(18)=.TRUE. .',29X,'ECIS-128'/72X,
     &'ECIS-129'/' SEARCH',65X,'ECIS-130')
      WRITE (6,99035)
99035 FORMAT (6X,
     &'31- LO(31) INPUT OF EXPERIMENTAL DATA AND CALCULATION OF A CHI2.
     & ECIS-131'/17X,
     &'IT IS SET .FALSE. IF NO EXPERIMENTAL DATA ARE READ.',4X,
     &'ECIS-132'/6X,
     &'32- LO(32) AUTOMATIC SEARCH ON SOME PARAMETERS. IT IS SET .FALSE.
     & ECIS-133'/17X,'IF NO PARAMETERS ARE IN SEARCH.',24X,
     &'ECIS-134'/6X,
     &'33- LO(33) SYMMETRISED CHI2 FOR CROSS-SECTIONS WITH FIXED',9X,
     &'ECIS-135'/17X,'NORMALISATION-(INVERSE: USUAL CHI2). THE CHI2',
     &10X,'ECIS-136'/17X,'CONTRIBUTION IS MULTIPLIED BY THE RATIO OF',
     &13X,'ECIS-137'/17X,'EXPERIMENTAL TO CALCULATED VALUE.',22X,
     &'ECIS-138'/6X,
     &'34- LO(34) NUMBER OF EVALUATIONS IN THE SEARCH LIMITED BY THE JOB
     & ECIS-139'/17X,
     &'CARD. THIS OPTION CAN BE USED ONLY IF THE REMAINING',4X,
     &'ECIS-140'/17X,
     &'CPU TIME IS AVAILABLE TO THE CODE ON YOUR COMPUTER.',4X,
     &'ECIS-141'/17X,'A MAXIMUM RUNNING TIME MUST BE READ.',19X,
     &'ECIS-142'/6X,
     &'35- LO(35) SEARCH SAVED ON TAPE 8 IF CORRECTLY ENDED OR STOPPED B
     &YECIS-143'/17X,'THE NUMBER OF EVALUATIONS.',29X,'ECIS-144'/6X,
     &'36- LO(36) RESTART A SEARCH FROM TAPE 8.',26X,'ECIS-145'/6X,
     &'37- LO(37) NEXT CALCULATION CHANGING ONLY ENERGY AND SOME OPTICAL
     & ECIS-146'/17X,'PARAMETERS.',44X,'ECIS-147'/72X,
     &'ECIS-148'/' LONG RANGE INTERACTION',49X,'ECIS-149'/6X,
     &'41- LO(41) FACTORISATION OF 1/(1-COS(THETA)) IN THE AMPLITUDES. I
     &TECIS-150'/17X,
     &'IS NEEDED FOR DIRAC EQUATION OR WITH SPIN-ORBIT COULOMBECIS-151'/
     &17X,'POTENTIAL.',45X,'ECIS-152')
      WRITE (6,99040)
99040 FORMAT (6X,
     &   '42- LO(42) SCHMIDT''S ORTHOGONALISATION OF SOLUTIONS IN USUAL'
     &   ,6X,'ECIS-153'/17X,'COUPLED EQUATIONS.',37X,'ECIS-154'/6X,
     &   '43- LO(43) INTERPOLATION ON TOTAL SPIN.',27X,'ECIS-155'/6X,
     &'44- LO(44) COULOMB CORRECTIONS. LO(44) IS SET .FALSE. IF LO(11) I
     &SECIS-156'/17X,
     &'.FALSE. . OUTSIDE THE DIRAC FORMALISM IT IS BETTER TO  ECIS-157'/
     &17X,'USE ALSO LO(29)=.TRUE..',32X,'ECIS-158'/6X,
     &'45- LO(45) LIMITATION ON THE ANGULAR MOMENTA FOR COULOMB',10X,
     &'ECIS-159'/17X,
     &'CORRECTIONS. DEFAULT OPTIONS ARE 3 FOR CENTRAL TERM',4X,
     &'ECIS-160'/17X,'AND 2 FOR SPIN-ORBIT TERM. MAXIMUM VALUES ARE',
     &10X,'ECIS-161'/17X,'RESPECTIVELY 5 AND 4.',34X,'ECIS-162'/6X,
     &'46- LO(46) RESTRICTED COULOMB CORRECTIONS. (SAVES STORAGE).',7X,
     &'ECIS-163'/17X,
     &'IF LO(44)=.FALSE. THE DIAGONAL CORRECTIONS USED IN',5X,
     &'ECIS-164'/17X,'DIRAC FORMALISM OR FOR THE COULOMB SPIN-ORBIT ARE'
     &,6X,'ECIS-165'/17X,
     &'SUPPRESSED. IF LO(44)=.TRUE. INDICATIONS FOR THESE',5X,
     &'ECIS-166'/17X,'RESTRICTIONS BETWEEN CHANNELS WILL BE READ.',12X,
     &'ECIS-167'/
     &'  NOTE:  IF LO(36)=.TRUE. A SEARCH SAVED ON TAPE 8 IS RESTARTED;'
     &,8X,'ECIS-168'/
     &'  ****  NO OTHER LOGICAL CONTROL FROM THIS CARD IS TAKEN INTO ACC
     &OUNT.  ECIS-169'/8X,
     &'INSTEAD OF THE FOLLOWING CARDS, GO TO ''RESTART INPUT: CARDS',5X,
     &'ECIS-170'/8X,'READ IN SUBROUTINE REST''.',39X,'ECIS-171'/72X,
     &'ECIS-172'/'CARD 3',34X,'FORMAT (50L1)',19X,'ECIS-173'/'******',
     &66X,'ECIS-174')
      WRITE (6,99045)
99045 FORMAT (6X,
     &        'LOGICAL CONTROLS FROM 51 TO 100 (AS FOR PREVIOUS CARD).',
     &        11X,'ECIS-175'/72X,
     &        'ECIS-176'/' PRINTING IN COMPLETE OUTPUT',44X,
     &        'ECIS-177'/7X,'1- LO(51) OUTPUT OF POTENTIALS.',34X,
     &        'ECIS-178'/7X,
     &        '2- LO(52) OUTPUT OF REDUCED NUCLEAR MATRIX ELEMENTS.',
     &        13X,'ECIS-179'/7X,
     &        '3- LO(53) OUTPUT OF THE NUMBER OF ITERATIONS.',20X,
     &        'ECIS-180'/''/7X,
     &       '4- LO(54) OUTPUT OF THE LENGTH USED IN THE WORKING FIELD.'
     &       ,8X,'ECIS-181'/7X,
     &   '5- LO(55) OUTPUT OF C-MATRIX ELEMENTS AND OF COMPOUND NUCLEUS'
     &   ,4X,'ECIS-182'/17X,'INTERMEDIATE RESULTS.',34X,'ECIS-183'/7X,
     &   '6- LO(56) OUTPUT OF S-MATRIX ELEMENTS',28X,'ECIS-184'/7X,
     &   '7- LO(57) OUTPUT OF PHASE-SHIFTS AT EACH E.C.I.S. ITERATION.',
     &   5X,'ECIS-185'/7X,
     &'8- LO(58) OUTPUT OF THE COEFFICIENTS OF EACH FORM FACTOR FOR ALL
     &ECIS-186'/17X,'SETS OF EQUATIONS.',37X,'ECIS-187'/
     &'  NOTE:  IN A SEARCH, LO(51) TO LO(58) ARE USED FOR THE COMPLETE
     &RESULTSECIS-188'/
     &'  ****  (AT THE FIRST CALCULATION IF LO(75)=.FALSE. AND AT THE EN
     &D OF   ECIS-189'/8X,'THE SEARCH).',52X,'ECIS-190'/72X,
     &'ECIS-191'/' PUNCH AND RESULTS IN LAST OUTPUT',39X,'ECIS-192'/7X,
     &'9- LO(59) FOR NEUTRON SCATTERING, TOTAL REACTION, ELASTIC AND',
     &4X,'ECIS-193'/17X,
     &'REACTION CROSS-SECTION WRITTEN ON FILE 58. FOR CHARGED ECIS-194'/
     &17X,
     &'PARTICLES, REACTION CROSS-SECTION WRITTEN ON FILE 58.  ECIS-195'/
     &17X,'INELASTIC CROSS-SECTIONS WRITTEN ON FILE 59.',11X,'ECIS-196')
      WRITE (6,99050)
99050 FORMAT (6X,'10- LO(60) S-MATRIX ELEMENTS WRITTEN ON FILE 60.',18X,
     &        'ECIS-197'/6X,
     &  '11- LO(61) REDUCED NUCLEAR MATRIX ELEMENTS WRITTEN ON FILE 61.'
     &  ,4X,'ECIS-198'/6X,'12- LO(62) POTENTIALS WRITTEN ON FILE 62.',
     &  25X,'ECIS-199'/6X,
     &'13- LO(63) PENETRABILITIES WRITTEN ON FILE 63. WITH ITERATIONS,
     & ECIS-200'/17X,'THE CODE COMPUTES ALL THE SOLUTIONS.',19X,
     &'ECIS-201'/6X,
     &'14- LO(64) RESULTS FOR EXPERIMENTAL DATA ON FILE 64 AND AT',8X,
     &'ECIS-202'/17X,'EQUIDISTANT ANGLES WRITTEN ON FILE 66.',17X,
     &'ECIS-203'/6X,
     &'15- LO(65) COEFFICIENTS OF THE EXPANSION IN LEGENDRE POLYNOMIALS
     & ECIS-204'/17X,'WRITTEN ON FILE 65.',36X,'ECIS-205'/
     &'  NOTE:  IN A SEARCH,LO(59) TO LO(65) ARE USED ONLY IN THE LAST R
     &ESULT. ECIS-206'/
     &'  ****  THERE ARE INTRODUCED FOR NEUTRON SCATTERING, IN PECULIAR,
     & ON THEECIS-207'/8X,
     &'SUGGESTION OF E. BAUGE, R. CAPOTE AND A. KONING. FOE EACH RUN,  E
     &CIS-208'/8X,
     &'THE FIRST LINE (FORMAT A10,,F10.2,F10.5,F10.2,2I5) WITH THE',5X,
     &'ECIS-209'/4X,
     &'1-10  IDENTIFICATION <CROSS-S.>, <INE.C.S.>, <S-MATRIX>, <RED.MAT
     &.>,ECIS-210'/10X,'<POTENTI.>, <TLJ',5X,
     &'>, <EXP.DAT.>, <LEGENDRE>, <ANG.DIS.> FORECIS-211'/10X,
     &'FILES 58 TO 66.',47X,'ECIS-212'/3X,
     &'11-20 THE MASS OF THE INCIDENT PARTICLE.',29X,'ECIS-213'/3X,
     &'21-30 THE ENERGY IN THE LABORATORY SYSTEM.',27X,'ECIS-214'/3X,
     &'31-40 THE MASS OF THE TARGET.',40X,'ECIS-215'/3X,
     &'41-45 THE PRODUCT OF CHARGES.',40X,'ECIS-216')
      WRITE (6,99055)
99055 FORMAT (3X,
     &'46-50 THE NUMBER OF LINES OR THE NUMBER OF SUBSETS WHICH ARE HEAD
     &ED  ECIS-217'/9X,
     &'BY SOME INDICATIONS INCLUDING THEIR OWN NUMBER OF LINES, EXCEPTEC
     &IS-218'/9X,
     &'FOR 61 AND 62. FOR 61, IT IS THE NUMBER OF COUPLED STATES AND  EC
     &IS-219'/9X,
     &'THE REMAINING OF THE OUTPUT CAN BE USED BY THE PROGRAM.',8X,
     &'ECIS-220'/9X,
     &'FOR 62, IT IS THE NUMBER OF FORM-FACTORS AND THE REMAINING OF  EC
     &IS-221'/9X,
     &'THE OUTPUT CAN ALSO BE USED BY THE PROGRAM, REPLACING THE',6X,
     &'ECIS-222'/9X,'IDENTIFICATIONS BY THE SUITABLE INPUT.',25X,
     &'ECIS-223'/72X,'ECIS-224'/' PRINTING IN THE LAST RESULT',44X,
     &'ECIS-225'/6X,'16- LO(66) NO CALCULATION AT EQUIDISTANT ANGLES.',
     &18X,'ECIS-226'/6X,'17- LO(67) NO PLOT OF EXPERIMENTAL DATA.',26X,
     &'ECIS-227'/6X,
     &'18- LO(68) NO PLOT OF CROSS-SECTIONS AT EQUIDISTANT ANGLES.',7X,
     &'ECIS-228'/6X,
     &'19- LO(69) NO PLOT OF POLARISATIONS AT EQUIDISTANT ANGLES.',8X,
     &'ECIS-229'/72X,
     &'ECIS-230'/' PRINTING AT THE BEGINNING AND IN A SEARCH',30X,
     &'ECIS-231'/6X,'21- LO(71) DETAILED OUTPUT OF LOGICAL CONTROLS.',
     &19X,'ECIS-232'/6X,
     &'22- LO(72) NO OUTPUT OF EXPERIMENTAL DATA WHEN THEY ARE READ.',
     &5X,'ECIS-233'/6X,
     &'23- LO(73) NO OUTPUT OF EXTERNAL POTENTIALS WHEN THEY ARE READ.
     & ECIS-234'/6X,
     &'24- LO(74) OUTPUT OF TIME IN DIFFERENT STEPS OF COMPUTATION.',6X,
     &'ECIS-235'/6X,
     &'25- LO(75) NO COMPLETE OUTPUT AT THE FIRST RUN OF A SEARCH.',7X,
     &'ECIS-236')
      WRITE (6,99060)
99060 FORMAT (6X,
     &  '26- LO(76) LO(51) TO LO(65) ARE ALWAYS USED-(INVERSE: ONLY FOR'
     &  ,4X,'ECIS-237'/17X,'COMPLETE OUTPUT).',38X,'ECIS-238'/6X,
     &  '27- LO(77) NO OUTPUT OF TIME DIFFERENCES DURING THE SEARCH.',
     &  7X,'ECIS-239'/6X,
     &  '28- LO(78) NO OUTPUT OF DIFFERENCES BETWEEN EXPERIMENTAL AND',
     &  6X,'ECIS-240'/17X,'CALCULATED VALUES.',37X,'ECIS-241'/72X,
     &  'ECIS-242'/''/' COMPOUND NUCLEUS',55X,'ECIS-243'/6X,
     &  '31- LO(81) HAUSER-FESHBACH CORRECTIONS TO CROSS-SECTIONS.',9X,
     &  'ECIS-244'/17X,
     & 'WITH ITERATIONS, THE CODE COMPUTES ALL THE SOLUTIONS.  ECIS-245'
     & /17X,
     & 'IF LO(82), LO(84), LO(85) OR LO(86) IS .TRUE., LO(81)  ECIS-246'
     & /17X,'IS SET .TRUE..',41X,'ECIS-247'/6X,
     & '32- LO(82) OLD SIMPLIFIED COMPOUND NUCLEUS (EXCLUDES UNCOUPLED',
     & 4X,'ECIS-248'/17X,
     & 'STATES, FISSION AND GAMMAS; LO(84), LO(85), LO(86) ARE ECIS-249'
     & /17X,'SET .FALSE.).',42X,'ECIS-250'/6X,
     &'33- LO(83) NO ENGELBRETCH-WEIDENMULLER TRANSFORMATION IN COMPOUND
     & ECIS-251'/17X,'NUCLEUS.',47X,'ECIS-252'/6X,
     &'34- LO(84) UNCOUPLED LEVELS FOR COMPOUND NUCLEUS. IT IS SET',7X,
     &'ECIS-253'/17X,'.FALSE. IF NONE ARE READ.',30X,'ECIS-254'/6X,
     &'35- LO(85) FISSION TRANSMISSION COEFFICIENTS (TO BE READ FROM',
     &5X,'ECIS-255'/17X,
     &'CARDS) FOR COMPOUND NUCLEUS. IT IS SET .FALSE. IF NONE ECIS-256'/
     &17X,'ARE READ.',46X,'ECIS-257'/6X,
     &'36- LO(86) GAMMA EMISSION IN COMPOUND NUCLEUS.',20X,
     &'ECIS-258'/6X,'37- LO(87) NO WIDTH FLUCTUATIONS.',33X,
     &'ECIS-259'/72X,'ECIS-260')
      WRITE (6,99065)
99065 FORMAT (' MISCELLANEOUS',58X,'ECIS-261'/6X,
     &    '41- LO(91) ANGULAR DISTRIBUTION AT EQUIDISTANT ANGLES IN THE'
     &    ,6X,'ECIS-262'/17X,'LABORATORY SYSTEM',38X,'ECIS-263'/6X,
     &    '42- LO(92) PURE DWBA CALCULATION.',33X,'ECIS-264'/6X,
     &    '43- LO(93) NO RECOIL CORRECTION FOR REACTIONS.',20X,
     &    'ECIS-265'/6X,
     &    '44- LO(94) NON STANDARD OBSERVABLES AT EQUIDISTANT ANGLES.',
     &    8X,'ECIS-266'/6X,
     &    '48- LO(98) USE OF REST MASS IN DIRAC EQUATION.',20X,
     &    'ECIS-267'/6X,
     &'49- LO(99) SCHROEDINGER EQUIVALENT TO DIRAC EQUATION. DIFFUSENESS
     & ECIS-268'/17X,
     &'OF COULOMB POTENTIALS MUST BE 0. LO(11) AND LO(19) ARE ECIS-269'/
     &17X,'SET .FALSE.. NO ASYMMETRIC ROTATIONAL MODEL AND NO',5X,
     &'ECIS-270'/17X,'SECOND ORDER VIBRATIONAL MODEL: THE CORRESPONDING'
     &,6X,'ECIS-271'/17X,'LOGICAL ARE SET .FALSE..',31X,'ECIS-272'/6X,
     &'50- LO(100) COMPLETE DIRAC EQUATION.',30X,'ECIS-273'/72X,
     &'ECIS-274'/'CARD 4',34X,'FORMAT (14I5)',19X,'ECIS-275'/'******',
     &66X,'ECIS-276'/7X,
     &'1- 5   NCOLL  NUMBER OF NUCLEAR STATES. IT DOES NOT INCLUDE THE
     &ECIS-277'/21X,
     &'NUMBER OF UNCOUPLED STATES FOR COMPOUND NUCLEUS.   ECIS-278'/7X,
     &'6-10   NJMAX  MAXIMUM NUMBER OF CHANNEL SPIN. (DEFAULT OPTION 20)
     &ECIS-279'/21X,
     &'THE MAXIMUM VALUE OF THE TOTAL ANGULAR MOMENTUM J  ECIS-280'/21X,
     &'WILL BE NJMAX-1 WHEN IT IS INTEGER OR NJMAX-.5 WHENECIS-281'/21X,
     &'IT IS HALF-INTEGER.',32X,'ECIS-282'/6X,
     &'11-15   ITERM  MAXIMUM NUMBER OF ECIS ITERATIONS. (DEFAULT OPTION
     & ECIS-283')
      WRITE (6,99070)
99070 FORMAT (21X,'20). MUST BE 1 FOR DWBA CALCULATIONS.',14X,
     &        'ECIS-284'/6X,'16-20   NPP',4X,
     &     'NUMBER OF OPTICAL POTENTIALS. (DEFAULT OPTION 1).  ECIS-285'
     &     /21X,'THE FIRST ONE IS DEFORMED WHEN THE FORM FACTORS',4X,
     &     'ECIS-286'/21X,'ARE NOT READ ON CARDS.',29X,'ECIS-287'/6X,
     &     '21-25   NCJ',4X,
     &     'NUMBER OF FACTORISATIONS OF 1/(1-COS(THETA)) IN',4X,
     &     'ECIS-288'/21X,'THE AMPLITUDES. (DEFAULT OPTION 1).',16X,
     &     'ECIS-289'/6X,
     &'26-30   NGR(1) NUMBER OF DECADES IN LOGARITHMIC SCALE IN PLOTS OF
     & ECIS-290'/21X,'ELASTIC CROSS-SECTIONS IN THE STANDARD OPTION',6X,
     &'ECIS-291'/21X,'(DEFAULT OPTION 2). FOR CHARGED PARTICLES, THE',
     &5X,'ECIS-292'/21X,
     &'CROSS-SECTION DIVIDED BY RUTHERFORD''S CROSS-SECTIONECIS-293'/21X
     &,'IS PLOTTED.',40X,'ECIS-294'/6X,
     &'31-35   NGR(2) AS NGR(1),FOR INELASTIC CHANNELS.(DEFAULT OPTION 2
     &)ECIS-295'/6X,
     &'36-40   NPR(1) PLOT INDICATIONS FOR ELASTIC POLARISATIONS AT',6X,
     &'ECIS-296'/21X,'EQUIDISTANT ANGLES. IF THERE ARE N DIFFERENT',7X,
     &'ECIS-297'/21X,
     &'ANGULAR DISTRIBUTIONS OF POLARISATIONS, NPR(1) IS  ECIS-298'/21X,
     &'THE SUM FOR I=1 TO N OF K(I)*(2**(I-1)) WHERE',6X,'ECIS-299'/21X,
     &'K(I)=1 FOR A PLOT AND 0 FOR NO PLOT OF THE I-TH',4X,
     &'ECIS-300'/21X,'DISTRIBUTION.(DEFAULT OPTION 1)',20X,
     &'ECIS-301'/14X,'STANDARD OPTIONS: SPIN 0 - NO POLARISATION.',15X,
     &'ECIS-302'/32X,'SPIN 1/2 - VECTOR POLARISATION.',9X,
     &'ECIS-303'/32X,'SPIN >1/2 - IT11, T20, T21, T22.',8X,
     &'ECIS-304'/'')
      WRITE (6,99075)
99075 FORMAT (6X,
     &'41-45   NPR(2) AS NPR(1),FOR INELASTIC CHANNELS.(DEFAULT OPTION 1
     &)ECIS-305'/14X,'STANDARD OPTIONS: SPIN 0 - NO POLARISATION.',15X,
     &'ECIS-306'/22X,
     &'SPIN 1/2 - VECT. ANA. POWER, VECT. POL., SPIN-FLIPECIS-307'/22X,
     &'SPIN >1/2 - IT11, VECT. POL., T20, T21, T22.',6X,'ECIS-308'/6X,
     &'46-50   LMZ',4X,
     &'NUMBER OF J VALUES FOR WHICH THE RADIAL EQUATIONS  ECIS-309'/21X,
     &'ARE SOLVED WHEN COULOMB CORRECTIONS ARE USED. THIS ECIS-310'/21X,
     &'NUMBER CAN BE AUTOMATICALLY DECREASED IF THE',7X,'ECIS-311'/21X,
     &'IRREGULAR FUNCTIONS ARE TOO LARGE. THE ASYMPTOTIC  ECIS-312'/21X,
     &'REGION WHERE THE PHASE-SHIFTS ARE COMPUTED',9X,'ECIS-313'/21X,
     &'ANALYTICALLY IS ABOVE THIS VALUE. THE BEST VALUE OFECIS-314'/21X,
     &'LMZ IS THE MAXIMUM VALUE OF J NEEDED BY THE SAME   ECIS-315'/21X,
     &'COMPUTATION WITHOUT CHARGE AND WITHOUT ANOMALOUS   ECIS-316'/21X,
     &'MAGNETIC MOMENT. (DEFAULT OPTION NJMAX/2, BUT ENTERECIS-317'/21X,
     &'A NEGATIVE VALUE IF YOU WANT TO USE NJMAX).',8X,'ECIS-318'/6X,
     &'51-55   JDM',4X,'TOTAL SPIN ABOVE WHICH STOP OR REDUCTION TO ONE'
     &,4X,'ECIS-319'/21X,
     &'ITERATION CAN OCCUR. (LIMITS LO(25),LO(28)=.FALSE.)ECIS-320'/6X,
     &'56-60   LML',4X,
     &'MAXIMUM ANGULAR MOMENTUM (DEFAULT OPTION MAXIMUM). ECIS-321'/21X,
     &'WITHOUT LONG RANGE INTERACTION, A LIMIT IS GIVEN   ECIS-322'/21X,
     &'FOR EACH LEVEL SUCH THAT THE REGULAR COULOMB',7X,'ECIS-323'/21X,
     &'FUNCTION IS LARGER THAN 1.D-30 AT MATCHING RADIUS. ECIS-324')
      WRITE (6,99080)
99080 FORMAT (6X,'61-65   JIT',4X,
     &     'NUMBER OF RATES OF INTERPOLATION FOR TOTAL SPIN.   ECIS-325'
     &     /21X,'(DEFAULT VALUE 1).',33X,'ECIS-326'/6X,'66-70   MN',5X,
     &     'MULTIPLICATIVE FACTOR FOR NJMAX READ IN COLUMNS',4X,
     &     'ECIS-327'/21X,'6-10 ALLOWING TO USE MORE THAN NJMAX>10**5.',
     &     8X,'ECIS-328'/21X,'(DEFAULT VALUE 1)',34X,'ECIS-329'/
     &'  NOTE:  IF LO(94)=.TRUE. NGR AND NPR ARE NOT TAKEN INTO ACCOUNT
     &IN',5X,'ECIS-330'/
     &'  ****  COMPUTATIONS AT EQUIDISTANT ANGLES BECAUSE SUCH INDICATIO
     &NS WILLECIS-331'/8X,
     &'BE READ AGAIN, BUT NGR IS ALWAYS USED FOR PLOTS OF EXPERIMENTAL E
     &CIS-332'/8X,'CROSS-SECTIONS.',49X,'ECIS-333'/72X,
     &'ECIS-334'/'CARD 5',34X,'FORMAT (7F10.5)',17X,'ECIS-335'/'******',
     &66X,'ECIS-336'/8X,'1-10   H',5X,
     &'INTEGRATION STEP SIZE IN FERMIS. (DEFAULT OPTION   ECIS-337'/21X,
     &'MIN(0.5/WAVE NUMBER, 0.5*MIN(DIFFUSENESSES)),',6X,'ECIS-338'/21X,
     &'WITHOUT THE DIFFUSENESSES IF LO(7)=.TRUE.).',8X,'ECIS-339'/7X,
     &'11-20   RM',4X,
     &'MATCHING RADIUS.(IF LO(7)=.TRUE. DEFAULT OPTION 20.ECIS-340'/21X,
     &'IF LO(7)=.FALSE., FOR EACH NON ZERO POTENTIAL, THE ECIS-341'/21X,
     &'RADIUS WHERE ITS ABSOLUTE VALUE IS (ACONV*ECM/WAVE ECIS-342'/21X,
     &'NUMBER) IS COMPUTED AND RM IS THE LARGEST OF THEM. ECIS-343'/21X,
     &'FOR COULOMB FORM FACTORS, RADIUS+10*DIFFUSENESS IS ECIS-344'/21X,
     &'USED)',46X,'ECIS-345'/7X,
     &'21-30   BJM   COEFFICIENT OF THE IMAGINARY POTENTIAL TO BE ADDED
     &ECIS-346')
      WRITE (6,99085)
99085 FORMAT (21X,'TO THE UNCOUPLED EQUATIONS AND REMOVED IN THE',6X,
     &        'ECIS-347'/21X,
     &        'SECOND MEMBER TO ACCELERATE CONVERGENCE FOR',8X,
     &        'ECIS-348'/21X,'SCHROEDINGER EQUATIONS.',28X,
     &        'ECIS-349'/7X,
     &'31-40   EITER CONVERGENCE CRITERION FOR S-MATRIX IN THE ITERATION
     &ECIS-350'/21X,'(DEFAULT OPTION 1.E-5).',28X,'ECIS-351'/7X,
     &'41-50   ACONV VALUE BELOW WHICH FUNCTIONS AND POTENTIALS ARE',5X,
     &'ECIS-352'/21X,'NEGLECTED IN ITERATIONS.(DEFAULT OPTION 1.E-5).',
     &4X,'ECIS-353'/21X,'ACONV IS ALSO USED IN THE DEFAULT VALUE OF RM.'
     &,5X,'ECIS-354'/7X,
     &'51-60   CONJ  CONVERGENCE CRITERION FOR J VALUES.',16X,
     &'ECIS-355'/21X,'(DEFAULT OPTION 1.E-5).',28X,'ECIS-356'/72X,
     &'ECIS-357'/'LIMITATION OF JOB TIME',18X,'FORMAT (14I5)',19X,
     &'ECIS-358'/'**********************',50X,'ECIS-359'/
     &'  IF LO(34) IS .TRUE., OTHERWISE GO TO ''LIMITATION TO COULOMB CO
     &RR... '' ECIS-360'/7X,
     &'1- 5   MSEC   TIME ALLOWED FOR THE JOB IN SECONDS, USED ONLY FOR
     &ECIS-361'/21X,
     &'A SEARCH LIMITED BY THIS TIME. (DEFAULT VALUE 3600)ECIS-362'/7X,
     &'6-10   NSEC   TIME NEEDED AT THE END OF A SEARCH TO PRINT FINAL
     &ECIS-363'/21X,
     &'RESULTS IN HUNDREDTHS OF SECOND.(DEFAULT VALUE 100)ECIS-364'/72X,
     &'ECIS-365'/''/'LIMITATION TO COULOMB CORRECTIONS',7X,
     &'FORMAT (14I5)',19X,'ECIS-366'/'*********************************'
     &,39X,'ECIS-367'/
     &'  IF LO(45) IS .TRUE., OTHERWISE GO TO ''LEGENDRE EXPANSION DATA'
     &'',8X,'ECIS-368')
      WRITE (6,99090)
99090 FORMAT (7X,
     &'1- 5   MCM(1)  MAXIMUM ANGULAR MOMENTUM FOR THE COMPUTATION OF
     &ECIS-369'/22X,'THE CORRECTIONS DUE TO THE COULOMB POTENTIAL.',5X,
     &'ECIS-370'/22X,'(DEFAULT OPTION 3, VALUE LIMITED TO 5).',11X,
     &'ECIS-371'/7X,
     &'6-10   MCM(2)  SAME FOR THE SPIN-ORBIT COULOMB POTENTIAL.',8X,
     &'ECIS-372'/22X,'(DEFAULT OPTION 2, VALUE LIMITED TO 4).',11X,
     &'ECIS-373'/
     &' NOTE:  ENTER A NEGATIVE VALUE TO USE 0. A BLANK OR 0 IS REPLACED
     & BY',4X,'ECIS-374'/' *****  THE DEFAULT OPTIONS DESCRIBED ABOVE.',
     &28X,'ECIS-375'/72X,'ECIS-376'/'LEGENDRE EXPANSION DATA',17X,
     &'FORMAT (14I5)',19X,'ECIS-377'/'***********************',49X,
     &'ECIS-378'/
     &'  IF LO(65) IS .TRUE., OTHERWISE GO TO ''COMPOUND NUCLEUS DATA''.
     &',9X,'ECIS-379'/7X,
     &'1- 5   NL(1)  POWER OF (1-COS(THETA)) FOR THE EXPANSION IN',7X,
     &'ECIS-380'/21X,
     &'LEGENDRE POLYNOMIALS OF THE INTERFERENCE BETWEEN   ECIS-381'/21X,
     &'COULOMB AND NUCLEAR ELASTIC SCATTERING. POWER OF   ECIS-382'/21X,
     &'(1-COS(THETA)**2) IF LO(18) IS .TRUE..',13X,'ECIS-383'/21X,
     &'(DEFAULT OPTION 2).',32X,'ECIS-384'/7X,
     &'6-10   NL(2)  NUMBER OF LEGENDRE POLYNOMIALS FOR ELASTIC',9X,
     &'ECIS-385'/21X,
     &'SCATTERING OF CHARGED PARTICLES. (DEFAULT OPTION   ECIS-386'/21X,
     &'1.5 NUMBER OBTAINED WITHOUT COULOMB AMPLITUDE).',4X,
     &'ECIS-387'/6X,
     &'11-15   NL(3)  NUMBER OF LEGENDRE POLYNOMIALS FOR ELASTIC',9X,
     &'ECIS-388'/21X,'SCATTERING OF UNCHARGED PARTICLES, INELASTIC',7X,
     &'ECIS-389')
      WRITE (6,99095)
99095 FORMAT (21X,
     &     'SCATTERING AND COMPOUND NUCLEUS. (DEFAULT OPTION   ECIS-390'
     &     /21X,'MAXIMUM NUMBER).',35X,'ECIS-391'/72X,
     &     'ECIS-392'/'COMPOUND NUCLEUS DATA',19X,'FORMAT (8I5,2F10.5)',
     &     13X,'ECIS-393'/'*********************',51X,'ECIS-394'/
     &     '  IF LO(84) OR LO(85) OR LO(86) IS .TRUE., OTHERWISE GO TO',
     &     14X,'ECIS-395'/'  ''INTERPOLATION ON TOTAL SPIN''.',40X,
     &     'ECIS-396'/7X,
     &    '1- 5   NSP(1) NUMBER OF UNCOUPLED STATES AND CONTINUA. IF IS'
     &    ,5X,'ECIS-397'/21X,
     &    'REPLACED BY MIN(NSP(1),NSP(2)). IF IT IS ZERO,',5X,
     &    'ECIS-398'/21X,'LO(84)=.FALSE.',37X,'ECIS-399'/7X,
     &    '6-10   NSP(2) NUMBER OF UNCOUPLED STATES WITH ANGULAR',12X,
     &    'ECIS-400'/21X,'DISTRIBUTION. THEY MUST BE THE FIRST GIVEN.',
     &    8X,'ECIS-401'/6X,
     &'11-15   NFISS  NUMBER OF FISSION DATA. IF NFISS=0, LO(85)=.FALSE.
     & ECIS-402'/6X,'16-20   NRD',4X,
     &'NUMBER OF GAMMA TRANSMISSION FACTORS. IF IT IS 0,  ECIS-403'/21X,
     &'THESE COEFFICIENTS ARE COMPUTED.',19X,'ECIS-404'/6X,
     &'21-25   NCONT  NUMBER OF CONTINUA. THEY MUST BE THE LAST GIVEN,
     & ECIS-405'/21X,
     &'NO ANGULAR DISTRIBUTION CAN BE REQUESTED FOR THEM. ECIS-406'/6X,
     &'26-30   NCOJ   NUMBER OF VALUES OF THE SPIN OF THE RESIDUAL',7X,
     &'ECIS-407'/21X,'NUCLEUS FOR THE CONTINUA. (DEFAULT OPTION 30).',
     &5X,'ECIS-408'/6X,
     &'31-35   KMIN   MINIMUM NUMBER OF J VALUES FOR COMPOUND NUCLEUS',
     &4X,'ECIS-409'/21X,'(DEFAULT OPTION: MINIMUM VALUE FOR S WAVES IN',
     &6X,'ECIS-410'/21X,'ENTRANCE CHANNEL).',33X,'ECIS-411')
      WRITE (6,99100)
99100 FORMAT (6X,
     &  '36-40   KMAX   MAXIMUM NUMBER OF J VALUES FOR COMPOUND NUCLEUS'
     &  ,4X,'ECIS-412'/21X,'(DEFAULT OPTION NJMAX).',28X,'ECIS-413'/6X,
     &  '41-50   ACN1   RATIO ENERGY/STEP FOR THE DISCRETISATION OF THE'
     &  ,4X,'ECIS-414'/21X,
     &  'CONTINUA AT LARGE ENERGY . (DEFAULT OPTION 8.).',4X,
     &  'ECIS-415'/6X,
     &'51-60   ACN2   NUMBER OF STEPS PER MEV FOR THE DISCRETISATION OF
     & ECIS-416'/21X,
     &'THE CONTINUA AT LOW ENERGY. (DEFAULT OPTION 8.).   ECIS-417'/
     &'  NOTE:  THE SHIFT FROM THE USE OF ACN1 TO ACN2 OCCURS BELOW THE
     &ENERGY ECIS-418'/
     &'  ****  ACN1/ACN2. BELOW THIS ENERGY, THE INTERVAL IS DIVIDED IN
     &EQUAL  ECIS-419'/4X,
     &'STEPS WITH A MINIMUM OF TWO STEPS. CALCULATIONS ARE DONE WITH THE
     &   ECIS-420'/4X,'ENERGY OF THE MIDDLE OF THE STEP.',35X,
     &'ECIS-421'/9X,
     &'WITHOUT KMIN THE CALCULATION CAN STOP BEFORE ANY SIGNIFICANT   EC
     &IS-422'/4X,
     &'RESULT. WITH INTERPOLATION ON TOTAL SPIN BELOW KMAX, A HUGE STORA
     &GE ECIS-423'/4X,
     &'ARRAY, PROPORTIONAL TO KMAX, IS NEEDED FOR UNCOUPLED STATES WITH'
     &,4X,'ECIS-424'/4X,'ANGULAR DISTRIBUTION.',47X,'ECIS-425'/''/9X,
     &'COMPOUND NUCLEUS CALCULATION IS STOPPED AT THE J VALUE LARGER  EC
     &IS-426'/4X,
     &'THAN KMIN ONE FOR WHICH THE LARGEST COMPOUND NUCLEUS CONTRIBUTION
     & ISECIS-427'/4X,
     &'LESS THAN CONJ**2. THE CODE CANNOT DEAL WITH VERY LARGE J VALUES.
     &   ECIS-428'/72X,'ECIS-429'/'INTERPOLATION ON TOTAL SPIN',13X,
     &'FORMAT (14I5)',19X,'ECIS-430')
      WRITE (6,99105)
99105 FORMAT ('***************************',45X,'ECIS-431'/
     &'  IF LO(43) IS .TRUE., OTHERWISE GO TO  ''CARDS READ IN SUBROUTIN
     &E LECT''.ECIS-432'/8X,'1- 5   LS(1) FIRST LIMIT.',39X,
     &'ECIS-433'/8X,'6-10   LD(1) NUMBER OF VALUES SKIPPED.',26X,
     &'ECIS-434'/7X,'11-15   LS(2) SECOND LIMIT.',38X,'ECIS-435'/7X,
     &'16-20   LD(2) NUMBER OF VALUES SKIPPED.',26X,'ECIS-436'/3X,
     &'....................  UP TO LS(JIT) AND LD(JIT)   ...............
     &....ECIS-437'/7X,
     &'THE CALCULATION IS STOPPED IF VALUES LS DECREASE. THE VALUES LD
     &ECIS-438'/
     &' ARE CHANGED TO BE USED CUMULATIVELY IN THE PROGRAM. IF LO(18)=.T
     &RUE.,  ECIS-439'/
     &' AND THE SPINS IN THE GROUND STATE ARE BOTH ZERO, THE VALUES LD R
     &EAD AREECIS-440'/' MULTIPLIED BY 2.',55X,'ECIS-441'/72X,
     &'ECIS-442'/72X,'ECIS-443'/'CARDS READ IN SUBROUTINE LECL',43X,
     &'ECIS-444'/'*****************************',43X,'ECIS-445'/72X,
     &'ECIS-446'/'FOR EACH NUCLEAR STATE:',49X,
     &'ECIS-447'/'***********************',49X,'ECIS-448'/6X,
     &'BEGINNING WITH THE GROUND-STATE AND INCLUDING UNCOUPLED STATES FO
     &RECIS-449'/6X,
     &'COMPOUND NUCLEUS CALCULATION WHICH MUST BE AT THE END.',12X,
     &'ECIS-450'/6X,
     &'THE BEST ORDER IS THE ONE OF DECREASING COUPLING STRENGTH.',8X,
     &'ECIS-451'/72X,'ECIS-452'/'NUCLEAR STATES -SPINS AND MASSES -',6X,
     &'FORMAT (F5.2,2I2,A1,5F10.5)',5X,
     &'ECIS-453'/'***********************************',37X,'ECIS-454')
      WRITE (6,99110)
99110 FORMAT (7X,
     &      '1- 5   SP2: SPIN OF THE TARGET (2*SP2+1 KEPT IN IPI(3,I)).'
     &      ,7X,'ECIS-455'/7X,
     &      '6- 7   N:   FURTHER DESCRIPTION OF THE STATE.',20X,
     &      'ECIS-456'/14X,
     &'IN THE ROTATIONAL MODEL, MUST BE NON-ZERO FOR THE MEMBER  ECIS-45
     &7'/22X,'OF A VIBRATIONAL BAND.',28X,'ECIS-458'/14X,
     &'IN THE VIBRATIONAL MODEL, CAN BE NON-ZERO FOR THE GROUND  ECIS-45
     &9'/22X,'STATE TO AVOID THE INPUT OF NEXT CARD.',12X,
     &'ECIS-460'/14X,
     &'NOT USED IF LO(3) = .TRUE. (ANHARMONIC VIBRATIONAL  MODEL ECIS-46
     &1'/22X,
     &'OR ASYMMETRIC ROTATIONAL MODEL), IF LO(7) = .TRUE.ECIS-462'/22X,
     &'(EXTERNAL POTENTIALS) AND UNCOUPLED STATES.',7X,'ECIS-463'/7X,
     &'8- 9   K:   OPTICAL POTENTIAL. (DEFAULT OPTION,1 FOR GROUND-STATE
     &ECIS-464'/19X,'AND SAME AS LAST ONE FOR EXCITED STATE).',13X,
     &'ECIS-465'/9X,
     &'10   SPI: PARITY OF THE NUCLEAR STATE: ''+'' OR ''-'' BUT ONLY ''
     &-'' ECIS-466'/19X,
     &'IS NEEDED (''+'' FOR A BLANK OR ANY OTHER CHARACTER).  ECIS-467'/
     &19X,'THIS DATA IS KEPT AS 0 OR 1 IN IPI(1,I).',13X,'ECIS-468'/6X,
     &'11-20   ENERGY OF THE PROJECTILE IN THE LABORATORY SYSTEM IN MEV
     & ECIS-469'/14X,
     &'FOR THE GROUND STATE. EXCITATION ENERGY FOR THE OTHERS.   ECIS-47
     &0'/6X,
     &'21-30   SP1: SPIN OF THE PARTICLE (2*SP1+1 KEPT IN IPI(2,I)).',
     &5X,'ECIS-471'/6X,
     &'31-40   WV(1,I):   MASS OF THE PROJECTILE IN A.M.U.  .',12X,
     &'ECIS-472'/19X,
     &'IF THIS VALUE IS NOT ZERO FOR AN EXCITED STATE, THE  ECIS-473')
      WRITE (6,99115)
99115 FORMAT (19X,
     &   'SPIN OF THE PROJECTILE, ITS MASS AND THE PRODUCT OF  ECIS-474'
     &   /19X,
     &   'CHARGES READ ON THIS CARD ARE TAKEN INTO ACCOUNT. IF ECIS-475'
     &   /19X,
     &   'THIS MASS IS ZERO, VALUES OF SP1, SP2, SP3, WV(1,I)  ECIS-476'
     &   /19X,'AND WV(2,I) ARE TAKEN FROM THE PRECEDING LEVEL.',6X,
     &   'ECIS-477'/6X,
     &   '41-50   WV(2,I):   MASS OF THE TARGET IN A.M.U.  .',16X,
     &   'ECIS-478'/6X,
     &   '51-60   SP3: PRODUCT OF THE CHARGES OF THE TARGET AND OF THE',
     &   6X,'ECIS-479'/19X,'PARTICLE (SP3 KEPT IN IPI(4,IV)).',20X,
     &   'ECIS-480'/
     &'  NOTE:  ONLY THIS CARD IS READ FOR UNCOUPLED STATES AND CONTINUA
     &',7X,'ECIS-481'/'  ****  USED FOR COMPOUND NUCLEUS CALCULATION.',
     &26X,'ECIS-482'/72X,'ECIS-483'/''/
     &'DESCRIPTION OF VIBRATIONS  (IF N IS NOT 0 IN ROTATIONAL MODEL OR
     &N IS 0 ECIS-484'/
     &'*************************  IN VIBRATIONAL MODEL AND LO(3)=LO(7)=.
     &FALSE.)ECIS-485'/72X,'ECIS-486'/'NUMBER OF PHONONS',23X,
     &'FORMAT (14I5)',19X,'ECIS-487'/'*****************',55X,
     &'ECIS-488'/7X,'1- 5   IPH(I)  DESCRIPTION OF THE STATE.',25X,
     &'ECIS-489'/14X,'IN THE VIBRATIONAL MODEL: 0 FOR GROUND STATE',14X,
     &'ECIS-490'/22X,'1 OR 2 FOR PURE 1 OR 2-PHONONS STATE',14X,
     &'ECIS-491'/22X,'3 FOR A MIXTURE OF 1 AND 2-PHONONS STATES.',8X,
     &'ECIS-492'/14X,'IN THE ROTATIONAL MODEL: 0 FOR GROUND-STATE BAND',
     &10X,'ECIS-493'/39X,'1 FOR VIBRATIONAL BAND',11X,'ECIS-494'/39X,
     &'2 FOR A MIXTURE OF THEM',10X,'ECIS-495')
      WRITE (6,99120)
99120 FORMAT (7X,
     &'6-10   ROTATIONAL MODEL: NUMBER OF THE VIBRATION IN THE ORDER OF
     &ECIS-496'/14X,'INPUT. (SEE ''CARDS READ IN LECT'')',25X,
     &'ECIS-497'/14X,
     &'VIBRATIONAL MODEL: NUMBER OF THE PHONON OF THE ONE-PHONON ECIS-49
     &8'/14X,'STATE OR OF THE FIRST PHONON OF THE TWO-PHONONS STATE.',
     &4X,'ECIS-499'/6X,
     &'11-15   VIBRATIONAL MODEL: NUMBER OF THE SECOND PHONON OF THE',
     &5X,'ECIS-500'/14X,'TWO-PHONONS STATE.',40X,'ECIS-501'/6X,
     &'16-20   VIBRATIONAL MODEL: NUMBER OF THE ONE-PHONON COMPONENT OF
     & ECIS-502'/14X,'A MIXED STATE.',44X,'ECIS-503'/
     &'  NOTE:  THE TOTAL NUMBER OF PHONONS WILL BE THE LARGEST NUMBER R
     &EAD',4X,'ECIS-504'/'  ****  IN THE COLUMNS 6 TO 20.',41X,
     &'ECIS-505'/72X,'ECIS-506'/'PHONONS MIXING PARAMETER',16X,
     &'FORMAT (7F10.5)',17X,'ECIS-507'/'************************',48X,
     &'ECIS-508'/
     &'  IF IPH IS 3 (VIBRATIONAL MODEL) OR IPH IS 2 (ROTATIONAL MODEL)'
     &,8X,'ECIS-509'/7X,'1-10   BT IN DEGREES.',44X,'ECIS-510'/6X,
     &'THE NUCLEAR STATE IS:  COS(BT)*(1 PHONON) + SIN(BT)*(2 PHONONS).
     & ECIS-511'/14X,
     &'OR:  COS(BT)*(VIBR. BAND) + SIN(BT)*(GROUND BAND).',8X,
     &'ECIS-512'/72X,'ECIS-513'/'FOR ASYMMETRIC ROTATIONAL MODEL',41X,
     &'ECIS-514'/'*******************************',41X,
     &'ECIS-515'/' IF LO(1)=LO(3)=.TRUE.',50X,'ECIS-516'/5X,
     &'THERE ARE N=SP(*,4)/2 BAND MIXING PARAMETERS BETWEEN THE N+1 BAND
     &S ECIS-517'/
     &'  DEFINED AS ATAN(A(2*I)/A(2*I-2)) WHERE A(I) IS THE AMPLITUDE OF
     & BAND IECIS-518')
      WRITE (6,99125)
99125 FORMAT (5X,
     &'IF N IS NOT 0 AND THE REDUCED MATRIX ELEMENTS ARE NOT READ ON CAR
     &DSECIS-519'/72X,'ECIS-520'/'MIXING PARAMETERS',23X,
     &'FORMAT (7F10.5)',17X,'ECIS-521'/'*****************',55X,
     &'ECIS-522'/7X,'1-10   BT(1)  IN DEGREES.',40X,'ECIS-523'/6X,
     &'11-20   BT(2)  IN DEGREES.',40X,'ECIS-524'/6X,
     &'21-30   BT(3)  IN DEGREES.',40X,'ECIS-525'/6X,
     &'31-40   BT(4)  IN DEGREES.',40X,'ECIS-526'/6X,
     &'41-50   BT(5)  IN DEGREES.',40X,'ECIS-527'/6X,
     &'51-60   .................',41X,'ECIS-528'/6X,
     &'THE NUCLEAR STATE IS:   COS(BT(1))*Y(AI,0) + SIN(BT(1))*COS(BT(2)
     &)ECIS-529'/6X,
     &'*(Y(AI,2)+S*Y(AI,-2))*SQRT(0.5) + SIN(BT(1))*SIN(BT(2))*COS(BT(3)
     &)ECIS-530'/6X,
     &'*(Y(AI,4)+S*Y(AI,-4))*SQRT(0.5) + ....... WHERE S=(-)**(AI+SPI).
     & ECIS-531'/
     &'  NOTE: FOR UNNATURAL PARITY STATES (SPI=-), BT(1) WILL BE IGNORE
     &D IN   ECIS-532'/
     &'  **** THE CALCULATION AND REPLACED BY 90. DEGREES.',21X,
     &'ECIS-533'/8X,
     &'IF LO(15)=.TRUE., ALL THE NUCLEAR PARAMETERS (QUANTITIES GIVEN  E
     &CIS-534'/4X,
     &'IN DEGREES) HAVE TO BE READ IN ORDER TO AVOID A CHANGE IN THIS PA
     &RT ECIS-535'/4X,
     &'OF INPUT WHEN SHIFTING LO(15) FROM .FALSE. TO .TRUE..  THEY ARE N
     &OT ECIS-536'/4X,'USED AND CANNOT BE IN SEARCH.',39X,
     &'ECIS-537'/72X,'ECIS-538'/72X,
     &'ECIS-539'/'CARDS READ IN SUBROUTINE LECT',43X,
     &'ECIS-540'/'*****************************',43X,'ECIS-541'/72X,
     &'ECIS-542'/''/'PHONON DESCRIPTIONS',21X,'FORMAT (2I5,F10.5,I5)',
     &11X,'ECIS-543')
      WRITE (6,99130)
99130 FORMAT ('*******************',53X,
     &        'ECIS-544'/'FOR EVERY PHONON INVOLVED',47X,'ECIS-545'/7X,
     &   '1- 5   NBTA(9,*) = L ANGULAR MOMENTUM USED ALSO FOR HEAVY ION'
     &   ,4X,'ECIS-546'/7X,
     &'6-10   NBTA(10,*) = K MAGNETIC QUANTUM NUMBER OF THE VIBRATION IN
     &ECIS-547'/21X,
     &'ROTATIONAL MODEL. IN THE VIBRATIONAL MODEL, MUST BEECIS-548'/21X,
     &'ZERO TO USE THIS PHONON IN L=0 SECOND ORDER TERMS. ECIS-549'/6X,
     &'11-20   BETA(1,*)   PHONON AMPLITUDE FOR THE REAL POTENTIAL.',6X,
     &'ECIS-550'/6X,
     &'21-25   IK   LEVEL OF WHICH THE MASSES ARE USED FOR HEAVY-ION',
     &5X,'ECIS-551'/21X,'CORRECTIONS. (DEFAULT OPTION IK=1).',16X,
     &'ECIS-552'/72X,'ECIS-553'/
     &'PHONON AMPLITUDES OF OTHER POTENTIALS   FORMAT (7F10.5)',17X,
     &'ECIS-554'/'*************************************',35X,
     &'ECIS-555'/6X,
     &'IF DEFORMATIONS ARE NOT THE SAME FOR ALL POTENTIALS (LO(5)=.TRUE.
     &)ECIS-556'/7X,'1-10   BETA(2,*) FOR VOLUME IMAGINARY POTENTIAL.',
     &17X,'ECIS-557'/6X,'11-20   BETA(3,*) FOR SURFACE REAL POTENTIAL.',
     &21X,'ECIS-558'/6X,
     &'21-30   BETA(4,*) FOR SURFACE IMAGINARY POTENTIAL.',16X,
     &'ECIS-559'/6X,'31-40   BETA(5,*) FOR REAL SPIN-ORBIT.',28X,
     &'ECIS-560'/6X,'41-50   BETA(6,*) FOR IMAGINARY SPIN-ORBIT.',23X,
     &'ECIS-561'/6X,'51-60   BETA(7,*) FOR COULOMB POTENTIAL.',26X,
     &'ECIS-562'/6X,
     &'61-70   BETA(8,*) FOR COULOMB SPIN-ORBIT POTENTIAL.',15X,
     &'ECIS-563'/
     &'  NOTE:  IF LO(5)=.FALSE., BETA(I,*)=BETA(1,*) FOR I=2,8.',15X,
     &'ECIS-564'/'  ****',66X,'ECIS-565')
      WRITE (6,99135)
99135 FORMAT (72X,'ECIS-566'/'DEFORMATIONS OF ROTATIONAL MODEL',8X,
     &        'FORMAT (2I5,F10.5,I5)',11X,
     &        'ECIS-567'/'********************************',40X,
     &        'ECIS-568'/
     &' ONLY IF LO(1)=.TRUE. AND LO(7)=.FALSE., OTHERWISE GO TO ''OPTICA
     &L MODEL ECIS-569'/' PARAMETERS''.',59X,'ECIS-570'/7X,'1- 5   IQM',
     &4X,'LARGEST ORDER OF DEFORMATION.',22X,'ECIS-571'/7X,
     &'6-10   IQMAX  MAXIMUM L-VALUE OF MULTIPOLE EXPANSION.',12X,
     &'ECIS-572'/6X,
     &'11-20   ASPIN, THE K-VALUE OF THE BAND, USED ONLY IN SYMMETRIC',
     &4X,'ECIS-573'/21X,'ROTATIONAL MODEL.',34X,'ECIS-574'/6X,
     &'21-25   IK',5X,
     &'LEVEL OF WHICH THE MASSES ARE USED FOR HEAVY-ION   ECIS-575'/21X,
     &'CORRECTIONS. (DEFAULT OPTION IK=1).',16X,'ECIS-576'/
     &'  NOTE:  IN THE ASYMMETRIC ROTATIONAL MODEL IQM IS LIMITED TO 35'
     &,8X,'ECIS-577'/'  ****  AND IQMAX IS LIMITED TO 8.',38X,
     &'ECIS-578'/72X,'ECIS-579'/
     &'DEFORMATIONS OF REAL VOLUME POTENTIAL   FORMAT (7F10.5)',17X,
     &'ECIS-580'/'*************************************',35X,
     &'ECIS-581'/4X,'IQ = IQM/2 VALUES FOR SYMMETRIC ROTATIONAL MODEL',
     &20X,'ECIS-582'/4X,
     &'IQ = IQM-1 VALUES FOR ASYMMETRIC ROTATIONAL MODEL',19X,
     &'ECIS-583'/7X,
     &'1-10   BETA(1,1)  DEFORMATION OF THE REAL POTENTIAL.',13X,
     &'ECIS-584'/6X,
     &'11-20   BETA(1,2)  DEFORMATION OF THE REAL POTENTIAL.',13X,
     &'ECIS-585'/6X,
     &'21-30   BETA(1,3)  DEFORMATION OF THE REAL POTENTIAL.',13X,
     &'ECIS-586'/6X,
     &'31-40   BETA(1,4)  DEFORMATION OF THE REAL POTENTIAL.',13X,
     &'ECIS-587')
      WRITE (6,99140)
99140 FORMAT (6X,'41-50   BETA(1,5)  DEFORMATION OF THE REAL POTENTIAL.'
     &        ,13X,'ECIS-588'/'...............................',41X,
     &        'ECIS-589'/6X,'EVENTUALLY, ON NEXT CARD:',9X,
     &        'FORMAT (7F10.5)',17X,'ECIS-590'/7X,
     &        '1-10   BETA(1,8)  DEFORMATION OF THE REAL POTENTIAL.',
     &        13X,'ECIS-591'/6X,
     &      '11-20   BETA(1,9)  DEFORMATION OF THE REAL POTENTIAL. ....'
     &      ,8X,'ECIS-592'/6X,'..... AND SO ON UP TO BETA(1,IQ).',33X,
     &      'ECIS-593'/72X,
     &      'ECIS-594'/'DEFORMATIONS FOR OTHER POTENTIALS',7X,
     &      'FORMAT (7F10.5)',17X,
     &      'ECIS-595'/'*********************************',39X,
     &      'ECIS-596'/6X,
     &'IF DEFORMATIONS ARE NOT THE SAME FOR ALL POTENTIALS (LO(5)=.TRUE.
     &)ECIS-597'/7X,
     &'1-10   BETA(2,I) DEFORMATION OF THE VOLUME IMAGINARY POTENTIAL.
     &ECIS-598'/6X,
     &'11-20   BETA(3,I) DEFORMATION OF THE SURFACE REAL POTENTIAL.',6X,
     &'ECIS-599'/6X,
     &'21-30   BETA(4,I) DEFORMATION OF THE SURFACE IMAGINARY POTENTIAL.
     & ECIS-600'/6X,
     &'31-40   BETA(5,I) DEFORMATION FOR THE REAL SPIN-ORBIT.',12X,
     &'ECIS-601'/''/6X,
     &'41-50   BETA(6,I) DEFORMATION FOR THE IMAGINARY SPIN-ORBIT.',7X,
     &'ECIS-602'/6X,
     &'51-60   BETA(7,I) DEFORMATION FOR THE COULOMB POTENTIAL.',10X,
     &'ECIS-603'/6X,
     &'61-70   BETA(8,I) DEFORMATION FOR THE COULOMB SPIN-ORBIT.',9X,
     &'ECIS-604'/' THERE ARE IQ SUCH CARDS',48X,'ECIS-605'/
     &'  NOTE:  IF LO(5)=.FALSE., BETA(I,J)=BETA(1,J) FOR I=2,6 AND J=1,
     &IQ.',4X,'ECIS-606'/'  ****',66X,'ECIS-607'/72X,'ECIS-608')
      END
C 01/01/04                                                      ECIS03  INPB-000
      SUBROUTINE INPB
C
C
C
      WRITE (6,99005)
99005 FORMAT ('EXPLANATION OF DEFORMATIONS OF THE ROTATIONAL MODEL:',
     &        20X,'ECIS-609'/
     &        '****************************************************',
     &        20X,'ECIS-610'/
     &        'FOR SYMMETRIC ROTATIONAL MODEL  (LO(3)=.FALSE.)',25X,
     &        'ECIS-611'/7X,
     &        'THE ORDER OF DEFORMATION IS L=2, 4, 6, ... AND SO ON.',
     &        12X,'ECIS-612'/7X,
     &        'THE RADIAL DEPENDENCE OF POTENTIALS IS:',26X,
     &        'ECIS-613'/10X,
     &        'R = R0*(1 + BETA(*,1)*Y(2,0).+ BETA(*,2)*Y(4,0) + .....)'
     &        ,6X,'ECIS-614'/10X,'ODD ORDER DEFORMATIONS ARE NOT READ.',
     &        26X,'ECIS-615'/72X,'ECIS-616'/
     &        'FOR THE ASYMMETRIC ROTATIONAL MODEL (LO(3)=.TRUE.)',22X,
     &        'ECIS-617'/7X,
     &'THE ORDER OF DEFORMATIONS ARE (L,K)=(2,0), (2,2), (4,0), (4,2),
     &ECIS-618'/10X,
     &'(4,4), (6,0) .... AND SO ON. THERE ARE LIMITED TO (8,8).',6X,
     &'ECIS-619'/7X,'THE RADIAL DEPENDENCE OF POTENTIALS IS:',26X,
     &'ECIS-620'/10X,
     &'R = R0*(1 + BETA(*,1)*(COS(BETA(*,2))*Y(2,0)+SIN(BETA(*,2))*  ECI
     &S-621'/10X,
     &'(Y(2,2)+Y(2,-2))*SQRT(0.5)) + BETA(*,3)*(COS(BETA(*,4))*Y(4,0)ECI
     &S-622'/10X,
     &'+SIN(BETA(*,4)*(COS(BETA(*,5))*(Y(4,2)+Y(4,-2))*SQRT(0.5))',4X,
     &'ECIS-623'/10X,
     &'+SIN(BETA(*,5))*(Y(4,4)+Y(4,-4))*SQRT(0.5)) + ..............  ECI
     &S-624'/3X,
     &'THE ''GAMMA'' TYPE BETAS AS BETA(*,I) FOR I=2,4,5,7... ARE IN DEG
     &REES. ECIS-625'/3X,
     &'*****************************************************************
     &*** ECIS-626'/
     &'FOR THE CONSTRAINED ASYMMETRIC ROTATIONAL MODEL, WHEN LO(2)=.TRUE
     &., THE ECIS-627')
      WRITE (6,99010)
99010 FORMAT (7X,
     &'BAND MIXING COEFFICIENTS ARE CALCULATED FROM ''GAMMA''=BETA(*,2)
     &  ECIS-628'/7X,
     &'IN THE DAVYDOV-FILIPPOV MODEL. THE SEQUENCE OF STATES MUST BE',
     &4X,'ECIS-629'/7X,
     &'THE GROUND STATE, THE FIRST 2+, THE SECOND 2+,THE OTHER STATES
     &ECIS-630'/7X,
     &'DESCRIBED AS IN THE GENERAL CASE (THERE CAN BE ONLY THE GROUND
     &ECIS-631'/7X,
     &'STATE AND THE FIRST 2+). THE MIXING PARAMETER OF THE FIRST 2+',
     &4X,'ECIS-632'/7X,
     &'STATE IS USED AS ''GAMMA'' VALUE INSTEAD OF BETA(1,2), BUT THE',
     &5X,'ECIS-633'/7X,
     &'DIFFERENCES BETWEEN BETA(I,3) ARE KEPT. THE MIXING PARAMETER',5X,
     &'ECIS-634'/7X,
     &'OF THE SECOND 2+ STATE IS IGNORED. IN A SEARCH, THE INDEX 4001
     &ECIS-635'/7X,
     &'SHOULD BE USED INSTEAD OF 2002 OR 3011 FOR ''GAMMA''.',14X,
     &'ECIS-636'/72X,
     &'ECIS-637'/'DEFORMATIONS OF ANHARMONIC VIBRATIONAL MODEL',28X,
     &'ECIS-638'/'********************************************',28X,
     &'ECIS-639'/
     &'  NOTE:  IN THIS MODEL, THERE IS AN UNIQUE RATIO 1/SQRT(4*PI) FOR
     & ANY   ECIS-640'/
     &'  ****  ORDER OF DEFORMATION. TO BE CONSISTENT WITH THE HARMONIC'
     &,8X,'ECIS-641'/8X,
     &'VIBRATIONAL MODEL, THE DEFORMATIONS INDICATED BELOW SHOULD BE   E
     &CIS-642'/8X,
     &'BETA, BETA**2/SQRT(4*PI) AND BETA**3/(4*PI) RESPECTIVELY.',7X,
     &'ECIS-643'/72X,'ECIS-644'/'DEFORMATIONS',28X,'FORMAT (7F10.5)',
     &17X,'ECIS-645'/'************',60X,'ECIS-646'/
     &' ONLY IF LO(1)=.FALSE. AND .LO(3)=.TRUE., LO(5) OR LO(16)=.TRUE.,
     &',7X,'ECIS-647')
      WRITE (6,99015)
99015 FORMAT (' OTHERWISE GO TO ''OPTICAL MODEL PARAMETERS''.',28X,
     &        'ECIS-648'/7X,'1-10   BETA(1,*) FOR CENTRAL POTENTIAL.',
     &        26X,'ECIS-649'/6X,
     &        '11-20   BETA(2,*) FOR VOLUME IMAGINARY POTENTIAL.',17X,
     &        'ECIS-650'/6X,
     &        '21-30   BETA(3,*) FOR SURFACE REAL POTENTIAL.',21X,
     &        'ECIS-651'/6X,
     &        '31-40   BETA(4,*) FOR SURFACE IMAGINARY POTENTIAL.',16X,
     &        'ECIS-652'/6X,'41-50   BETA(5,*) FOR REAL SPIN-ORBIT.',
     &        28X,'ECIS-653'/6X,
     &        '51-60   BETA(6,*) FOR IMAGINARY SPIN-ORBIT.',23X,
     &        'ECIS-654'/6X,'61-70   BETA(7,*) FOR COULOMB POTENTIAL.',
     &        26X,'ECIS-655'/72X,'ECIS-656'/'  NEXT CARD:',28X,
     &        'FORMAT (7F10.5)',17X,'ECIS-657'/'  **********',60X,
     &        'ECIS-658'/7X,
     &        '1-10   BETA(8,*) FOR COULOMB SPIN-ORBIT POTENTIAL.',15X,
     &        'ECIS-659'/
     &'THERE ARE FOUR SETS OF SUCH CARDS, ONE FOR EACH ORDER OF DEFORMAT
     &ION.   ECIS-660'/72X,'ECIS-661'/''/'ANGULAR MOMENTA',25X,
     &'FORMAT (14I5)',19X,'ECIS-662'/'***************',57X,'ECIS-663'/
     &' ONLY IF LO(16)=.TRUE., OTHERWISE GO TO ''DEFORMATIONS''.(IF LO(6
     &)=.TRUE.,ECIS-664'/
     &'HEAVY-ION DEFINITION DO NOT CHANGE NON COULOMB DEFORMATION LENGTH
     &S).',4X,'ECIS-665'/8X,
     &'1- 5  FOR ZEROTH ORDER (DEFAULT 2). (NOT USED)',18X,
     &'ECIS-666'/8X,'6-10  FOR FIRST ORDER (DEFAULT 2).',30X,
     &'ECIS-667'/7X,'11-15  FOR SECOND ORDER (DEFAULT 2).',29X,
     &'ECIS-668'/7X,'16-20  FOR THIRD ORDER (DEFAULT 2).',30X,
     &'ECIS-669'/7X,
     &'21-25  IK   LEVEL OF WHICH THE MASSES ARE USED FOR HEAVY-ION',5X,
     &'ECIS-670')
      WRITE (6,99020)
99020 FORMAT (14X,'CORRECTIONS. (DEFAULT OPTION IK=1).',23X,
     &        'ECIS-671'/9X,'ENTER A NEGATIVE VALUE IF YOU WANT 0.',26X,
     &        'ECIS-672'/72X,'ECIS-673'/'OPTICAL POTENTIAL PARAMETERS',
     &        44X,'ECIS-674'/'****************************',44X,
     &        'ECIS-675'/
     &'NPP LOOPS TO ''EQUIDISTANT ANGLES'' IF LO(7)=.FALSE. AND LO(10)=.
     &FALSE.   ECIS-676'/
     &'  IF LO(7)=.TRUE. AND LO(10)=.TRUE. GO TO ''DISPERSION PARAMETERS
     &'' IN',4X,'ECIS-677'/
     &'  THIS LOOP, IF LO(7)=.TRUE. AND LO(10)=.FALSE. SKIP THEM.',14X,
     &'ECIS-678'/72X,'ECIS-679'/
     &'THE PROGRAM SEARCHES TO WHICH NUCLEAR LEVEL THE POTENTIAL BELONGS
     &. IF   ECIS-680'/
     &'  NONE IS FOUND, A WARNING IS PRINTED AND THE FIRST ONE IS CHOSEN
     &.',6X,'ECIS-681'/72X,'ECIS-682'/'VOLUME OR SCALAR REAL POTENTIAL',
     &9X,'FORMAT (3F10.5)',17X,
     &'ECIS-683'/'*******************************',41X,'ECIS-684'/7X,
     &'1-10   VAL(1)   DEPTH IN MEV.',36X,'ECIS-685'/6X,
     &'11-20   VAL(2)   REDUCED RADIUS IN FERMIS.',24X,'ECIS-686'/6X,
     &'21-30   VAL(3)   DIFFUSENESS IN FERMIS.',27X,'ECIS-687'/72X,
     &'ECIS-688'/'VOLUME OR SCALAR IMAGINARY POTENTIAL',4X,
     &'FORMAT (3F10.5)',17X,
     &'ECIS-689'/'************************************',36X,
     &'ECIS-690'/7X,'1-10   VAL(4)   DEPTH IN MEV.',36X,'ECIS-691'/6X,
     &'11-20   VAL(5)   REDUCED RADIUS IN FERMIS.',24X,'ECIS-692'/6X,
     &'21-30   VAL(6)   DIFFUSENESS IN FERMIS.',27X,'ECIS-693'/72X,
     &'ECIS-694'/'SURFACE OR VECTOR REAL POTENTIAL',8X,
     &'FORMAT (3F10.5)',17X,'ECIS-695')
      WRITE (6,99025)
99025 FORMAT ('********************************',40X,'ECIS-696'/7X,
     &        '1-10   VAL(7)   DEPTH IN MEV.',36X,'ECIS-697'/6X,
     &        '11-20   VAL(8)   REDUCED RADIUS IN FERMIS.',24X,
     &        'ECIS-698'/6X,'21-30   VAL(9)   DIFFUSENESS IN FERMIS.',
     &        27X,'ECIS-699'/72X,'ECIS-700'/
     &        'SURFACE OR VECTOR IMAGINARY POTENTIAL   FORMAT (3F10.5)',
     &        17X,'ECIS-701'/'*************************************',
     &        35X,'ECIS-702'/7X,'1-10   VAL(10)  DEPTH IN MEV.',36X,
     &        'ECIS-703'/6X,'11-20   VAL(11)  REDUCED RADIUS IN FERMIS.'
     &        ,24X,'ECIS-704'/6X,
     &        '21-30   VAL(12)  DIFFUSENESS IN FERMIS.',27X,
     &        'ECIS-705'/72X,
     &        'ECIS-706'/'SPIN-ORBIT OR TENSOR REAL POTENTIAL',5X,
     &        'FORMAT (3F10.5)',17X,
     &        'ECIS-707'/'***********************************',37X,
     &        'ECIS-708'/7X,'1-10   VAL(13)  DEPTH IN MEV.',36X,
     &        'ECIS-709'/6X,'11-20   VAL(14)  REDUCED RADIUS IN FERMIS.'
     &        ,24X,'ECIS-710'/6X,
     &        '21-30   VAL(15)  DIFFUSENESS IN FERMIS.',27X,
     &        'ECIS-711'/72X,'ECIS-712'/
     &        'SPIN-ORBIT/TENSOR IMAGINARY POTENTIAL   FORMAT (3F10.5)',
     &        17X,'ECIS-713'/'*************************************',
     &        35X,'ECIS-714'/7X,'1-10   VAL(16)  DEPTH IN MEV.',36X,
     &        'ECIS-715'/6X,'11-20   VAL(17)  REDUCED RADIUS IN FERMIS.'
     &        ,24X,'ECIS-716'/6X,
     &        '21-30   VAL(18)  DIFFUSENESS IN FERMIS.',27X,'ECIS-717'/
     &        '  NOTE:  THE SPIN-ORBIT OPERATOR IS ALWAYS 2*(L.S)',22X,
     &        'ECIS-718'/
     &    '  ****  FOR SPIN 1/2 PARTICLE, THE DEPTH IS THE USUAL VALUE.'
     &    ,12X,'ECIS-719')
      WRITE (6,99030)
99030 FORMAT (8X,
     &'FOR SPIN 1 PARTICLE, THE DEPTH IS THE HALF OF THE USUAL VALUE.  E
     &CIS-720'/72X,'ECIS-721'/''/'COULOMB POTENTIAL',23X,
     &'FORMAT (3F10.5)',17X,'ECIS-722'/'*****************',55X,
     &'ECIS-723'/7X,'1-10   VAL(20)  REDUCED COULOMB RADIUS IN FERMIS.',
     &16X,'ECIS-724'/6X,
     &'11-20   VAL(21)  DIFFUSENESS OF A WOODS-SAXON CHARGE DISTRIBUTION
     &.ECIS-725'/6X,
     &'21-30   VAL(25)  THIRD PARAMETER OF A FERMI CHARGE DISTRIBUTION.
     & ECIS-726'/72X,'ECIS-727'/'SPIN-ORBIT COULOMB POTENTIAL',12X,
     &'FORMAT (3F10.5)',17X,'ECIS-728'/'****************************',
     &44X,'ECIS-729'/7X,
     &'1-10   VAL(22)  ANOMALOUS MAGNETIC MOMENT (LESS HALF CHARGE IN
     &ECIS-730'/14X,
     &'DIRAC FORMALISM) MULTIPLIED BY THE CHARGE OF THE TARGET.  ECIS-73
     &1'/6X,'11-20   VAL(23)  REDUCED RADIUS IN FERMIS.',24X,
     &'ECIS-732'/6X,'21-30   VAL(24)  DIFFUSENESS IN FERMIS.',27X,
     &'ECIS-733'/
     &'  NOTE:  IF VAL(21)=0. OR VAL(24)=0. A HOMOGENEOUS CHARGE DISTRIB
     &UTION  ECIS-734'/
     &'  ****  IS USED. THE PRODUCT OF CHARGES IS COPIED INTO VAL(19).',
     &9X,'ECIS-735'/9X,
     &'WHEN THE DIFFUSENESS OF THE CHARGE IS NOT ZERO, THE WOODS-SAXONEC
     &IS-736'/8X,
     &'FORM FACTOR IS MULTIPLIED BY 1+VAL(25)*R**2. THE SAME PARAMETER E
     &CIS-737'/8X,
     &'VAL(25) IS USED FOR THESE TWO LAST POTENTIALS, IF THEIR',9X,
     &'ECIS-738'/8X,'DIFFUSENESS IS NOT ZERO.',40X,'ECIS-739'/9X,
     &'IF LO(9)=.TRUE., ENTER A NEGATIVE RADIUS TO USE A SYMMETRIC',4X,
     &'ECIS-740')
      WRITE (6,99035)
99035 FORMAT (8X,'WOODS-SAXON FORM FACTOR.',40X,'ECIS-741'/9X,
     &'IF A DIFFUSENESS OR THE RADIUS OF A COULOMB POTENTIAL WITHOUT  EC
     &IS-742'/8X,
     &'DIFFUSENESS IS NEGATIVE, ITS ABSOLUTE VALUE IS TAKEN INTO',7X,
     &'ECIS-743'/8X,'ACCOUNT IN SUBROUTINE ROTP AND A MESSAGE PRINTED.',
     &15X,'ECIS-744'/72X,'ECIS-745'/
     &'*** END OF DO-LOOP FOR POTENTIALS WITHOUT FOLDING AND DISPERSION
     &***',4X,
     &'ECIS-746'/'*** RELATIONS (LO(10)=.FALSE. AND LO(17)=.FALSE.) ***'
     &,19X,'ECIS-747'/72X,'ECIS-748'/'FOLDING FOR REAL POTENTIALS',13X,
     &'FORMAT (3F10.5)',17X,'ECIS-749'/'***************************',
     &45X,'ECIS-750'/
     &' ONLY IF LO(17)=.TRUE., OTHERWISE GO TO ''DISPERSION PARAMETERS''
     &.',8X,'ECIS-751'/7X,'1-10   VAL(26) ''V'' PARAMETER',37X,
     &'ECIS-752'/6X,'11-20   VAL(27) ''R'' PARAMETER',37X,'ECIS-753'/6X,
     &'21-30   VAL(28) ''A'' PARAMETER',37X,'ECIS-754'/72X,
     &'ECIS-755'/'FOLDING FOR IMAGINARY POTENTIALS',8X,
     &'FORMAT (3F10.5)',17X,
     &'ECIS-756'/'********************************',40X,'ECIS-757'/7X,
     &'1-10   VAL(29) ''V'' PARAMETER.',36X,'ECIS-758'/6X,
     &'11-20   VAL(30) ''R'' PARAMETER.',36X,'ECIS-759'/6X,
     &'21-30   VAL(31) ''A'' PARAMETER.',36X,'ECIS-760'/72X,
     &'ECIS-761'/'FOLDING FOR COULOMB POTENTIALS',10X,'FORMAT (3F10.5)',
     &17X,'ECIS-762'/'******************************',42X,'ECIS-763'/7X,
     &'1-10   VAL(32) ''V'' PARAMETER.',36X,'ECIS-764'/6X,
     &'11-20   VAL(33) ''R'' PARAMETER.',36X,'ECIS-765')
      WRITE (6,99040)
99040 FORMAT (6X,'21-30   VAL(34) ''A'' PARAMETER.',36X,'ECIS-766'/72X,
     &        'ECIS-767'/
     &'EXPLANATION OF FOLDING PARAMETERS:  THE FOLDING FUNCTIONS ARE NOR
     &MALISEDECIS-768'/
     &'**********************************  TO 1.  TO FOLD AN OPTICAL POT
     &ENTIAL,ECIS-769'/4X,
     &'ENTER THE TRUE CHARGE, THE DEPTH OF CENTRAL POTENTIAL EQUAL TO TH
     &E  ECIS-770'/4X,
     &'DEPTH OF THE NUCLEON POTENTIAL MULTIPLIED BY THE NUMBER OF NUCLEO
     &NS ECIS-771'/4X,
     &'IN THE PROJECTILE, AND THE DEPTH OF OF SPIN-ORBIT POTENTIAL EQUAL
     & TOECIS-772'/4X,
     &'THE DEPTH OF THE NUCLEON SPIN-ORBIT POTENTIAL DIVIDED BY THE NUMB
     &ER ECIS-773'/4X,'OF NUCLEONS IN THE PROJECTILE.',38X,
     &'ECIS-774'/6X,'''V''=0',4X,'NO FOLDING.',46X,'ECIS-775'/6X,
     &'''A''=0',4X,'GAUSSIAN FORM FACTOR WITH THE RANGE ''R''.',17X,
     &'ECIS-776'/6X,'''R''=0',4X,
     &'HULTHEN FORM FACTOR (EXP(-R/''V'')-EXP(-R/''A''))/R.',9X,
     &'ECIS-777'/15X,
     &'REDUCED TO YUKAWA FORM FACTOR EXP(-R/''V'')/R IF ''A''=0.',4X,
     &'ECIS-778'/6X,
     &'OTHERWISE  SAXON FORM FACTOR 1/(1+EXP((R-''R'')/''A'').',15X,
     &'ECIS-779'/6X,
     &'IF A FOLDING PARAMETER IS NEGATIVE, THE ABSOLUTE VALUE IS TAKEN
     & ECIS-780'/4X,
     &'INTO ACCOUNT IN SUBROUTINE FOLD AND A MESSAGE PRINTED.',14X,
     &'ECIS-781'/6X,
     &'ALL THE DERIVATIVES OF POTENTIALS NEEDED ARE OBTAINED BY NUMERICA
     &LECIS-782'/4X,'DERIVATION AFTER FOLDING.',43X,'ECIS-783'/72X,
     &'ECIS-784'/''/'DISPERSION PARAMETERS',19X,'FORMAT (2I5,6F10.5)',
     &13X,'ECIS-785'/'*********************',51X,'ECIS-786')
      WRITE (6,99045)
99045 FORMAT (
     &' ONLY IF LO(10)=.TRUE., OTHERWISE GO TO ''END OF DO-LOOP FOR POTE
     &NTIALS''.ECIS-787'/4X,
     &'1- 5   IPP(1,1)  1 ENERGIES IN LABORATORY SYSTEM, ANYTHING FOR',
     &6X,'ECIS-788'/21X,'CENTER OF MASS ENERGY.',29X,'ECIS-789'/4X,
     &'6-10   IPP(2,1)  N2 POWER IN LARGE NEGATIVE ENERGY CORRECTION TER
     &M. ECIS-790'/21X,'MUST BE EVEN AND POSITIVE. IF 0, TERM NOT USED.'
     &,4X,'ECIS-791'/3X,'11-20   PIP(3)',4X,
     &'ENERGY FOR WHICH THE IMAGINARY DEPTHS ARE READ.',4X,
     &'ECIS-792'/21X,
     &'(DEFAULT OPTION: ENERGY OF THE FIRST LEVEL USING   ECIS-793'/21X,
     &'THIS POTENTIAL).',35X,'ECIS-794'/3X,'21-30   PIP(4)',4X,
     &'EF FERMI ENERGY. (DEFAULT OPTION -6.8 MEV).',8X,'ECIS-795'/3X,
     &'31-40   PIP(5)',4X,
     &'EP THRESHOLD ENERGY. (DEFAULT OPTION FERMI ENERGY).ECIS-796'/3X,
     &'41-50   PIP(6)',4X,
     &'EA LARGE ENERGY STARTING VALUE ABOVE FERMI ENERGY. ECIS-797'/21X,
     &'(DEFAULT OPTION 60 MEV).',27X,'ECIS-798'/3X,'51-60   PIP(7)',4X,
     &'AVSO EXPONENTIAL DECREASE OF REAL SPIN-ORBIT.',6X,'ECIS-799'/3X,
     &'61-70   PIP(8)',4X,
     &'AWSO LINEAR DECREASE OF IMAGINARY SPIN-ORBIT.',6X,'ECIS-800'/72X,
     &'ECIS-801'/'NEXT CARD',31X,'FORMAT (2I5,6F10.5)',13X,
     &'ECIS-802'/'*********',63X,'ECIS-803'/4X,
     &'1- 5   IPP(1,2)  NV WITH |NV| POWER FOR VOLUME OR SCALAR POTENTIA
     &L. ECIS-804'/4X,
     &'6-10   IPP(2,2)  NS WITH |NS| POWER FOR SURFACE OR VECTOR POTENTI
     &AL.ECIS-805'/3X,'11-20   PIP(9)',4X,
     &'BV CONSTANT FOR VOLUME OR SCALAR POTENTIAL.',8X,'ECIS-806')
      WRITE (6,99050)
99050 FORMAT (3X,
     &'21-30   PIP(10)   ALP COEFFICIENT OF LARGE POSITIVE ENERGY TERM I
     &N   ECIS-807'/21X,'VOLUME POTENTIAL. (DEFAULT OPTION 1.65).',11X,
     &'ECIS-808'/21X,
     &'SECOND BV'' PARAMETER FOR VOLUME POTENTIALS IF NV<0 ECIS-809'/21X
     &,'(DEFAULT OPTION 2*BV).',29X,'ECIS-810'/3X,
     &'31-40   PIP(11)   CV EXPONENTIAL DECREASE IN SQRT|E| FOR LARGE',
     &7X,'ECIS-811'/21X,'ENERGY TERMS OF VOLUME POTENTIALS OR',15X,
     &'ECIS-812'/21X,'FV FRACTION OF THE FIRST TERM IF NV<0.',13X,
     &'ECIS-813'/3X,
     &'41-50   PIP(12)   BS CONSTANT FOR SURFACE OR VECTOR POTENTIAL.',
     &7X,'ECIS-814'/3X,
     &'51-60   PIP(13)   CS EXPONENTIAL DECREASE OF A SURFACE POTENTIAL.
     &',4X,'ECIS-815'/21X,'(DEFAULT OPTION 0.0036). IF NS IS NEGATIVE',
     &9X,'ECIS-816'/21X,'BS'' SECOND CONSTANT FOR SURFACE OR VECTOR',
     &10X,'ECIS-817'/21X,'POTENTIAL FOR NS<0 (DEFAULT OPTION 2*BW).',
     &10X,'ECIS-818'/3X,
     &'61-70   PIP(14)   CR NON-LOCALITY RANGE PARAMETER OF SURFACE',9X,
     &'ECIS-819'/21X,
     &'POTENTIAL OR FRACTION IN THE FIRST TERM IF NS<0.   ECIS-820'/72X,
     &'ECIS-821'/'NEXT CARD',31X,'FORMAT (7F10.5)',17X,
     &'ECIS-822'/'*********',63X,'ECIS-823'/4X,
     &'1-10   PIP(15)   AHF EXPONENTIAL DECREASE OF H.F. REAL VOLUME',
     &7X,'ECIS-824'/21X,
     &'POTENTIAL WHICH NEEDS THE SAME GEOMETRY FOR REAL   ECIS-825'/21X,
     &'AND IMAGINARY VOLUME POTENTIAL.',20X,'ECIS-826'/72X,
     &'ECIS-827'/'EXPLANATION OF DISPERSION PARAMETERS:',35X,
     &'ECIS-828'/'*************************************',35X,'ECIS-829')
      WRITE (6,99055)
99055 FORMAT (
     &'FOR POSITIVE VALUES OF NV: THE VOLUME IMAGINARY POTENTIAL AT THE
     &ENERGY ECIS-830'/
     &'************************** E IS ASSUMED TO BE SUCH THAT ''V(2*EF-
     &E)=V(E)''ECIS-831'/4X,
     &'WITH ''V(E)=V*(E-EF)**NV/((E-EF)**NV+BV**NV)'' WITH ADDITION FOR'
     &,6X,'ECIS-832'/4X,
     &'E>EF+EA OF ''ALP*[SQRT(E)+.5*(EF+EA)**(3/2)/E-1.5*SQRT(EF+EA)]''
     &AND  ECIS-833'/4X,
     &'FOR E<EF-EA OF ''-V(E)*(EF-E-EA)**N2/((EF-E-EA)**N2+EA**N2)'' WHE
     &RE   ECIS-834'/4X,
     &'V(E) WAS GIVEN ABOVE; THESE EXPRESSION CAN BE DAMPED BY A FACTOR'
     &,4X,'ECIS-835'/4X,
     &'''EXP[-CV*SQRT(E-EF-EA)]'' AND ''EXP[-CV*SQRT(EF-EA-E)]'' RESPECT
     &IVELY. ECIS-836'/4X,
     &'THE VALUE OF ''V'' IS SUCH THAT THIS GIVES THE STRENGTH READ AT T
     &HE   ECIS-837'/4X,
     &'ENERGY PIP(3). THE REAL VOLUME POTENTIAL WITH THE SAME GEOMETRY,'
     &,4X,'ECIS-838'/4X,
     &'OBTAINED BY DISPERSION RELATION (AS DESCRIBED BY C. MAHAUX AND',
     &6X,'ECIS-839'/4X,
     &'R. SARTOR IN NUCL. PHYS A528 (1991) 253), IS ADDED TO THE REAL',
     &6X,'ECIS-840'/4X,'POTENTIAL.',58X,'ECIS-841'/
     &'FOR POSITIVE VALUES OF NS: THE SURFACE IMAGINARY POTENTIAL ''W(E)
     &'' IN THEECIS-842'/
     &'************************** SCHROEDINGER FORMALISM IS ASSUMED TO H
     &AVE THEECIS-843'/4X,
     &'SAME ENERGY DEPENDENCE AS ''V(E)'' GIVEN ABOVE MULTIPLIED BY',
     &10X,'ECIS-844'/4X,
     &'''EXP[-CS*|E-EF|-CR*(E-EF)]''. THE NON-LOCALITY RANGE PARAMETER '
     &'CR''  ECIS-845'/4X,
     &'IS THE INVERSE OF ''EB'' GIVEN BY EQUATIONS (3.17) AND (3.18) OF'
     &,6X,'ECIS-846')
      WRITE (6,99060)
99060 FORMAT (4X,
     &  'C. MAHAUX AND R. SARTOR IN NUCL. PHYS A458 (1986) 25. THE REAL'
     &  ,6X,'ECIS-847'/''/4X,
     &'SURFACE POTENTIAL WITH THE SAME GEOMETRY, OBTAINED BY DISPERSION'
     &,4X,'ECIS-848'/4X,
     &'RELATION IS ADDED TO THE REAL POTENTIAL. THERE IS NOT THE DEFAULT
     &   ECIS-849'/4X,'OPTION CR=.0125 TO ALLOW TO USE 0.',34X,
     &'ECIS-850'/
     &'FOR NEGATIVE VALUES OF NV: THE VOLUME IMAGINARY POTENTIAL IS ASSU
     &MED TO ECIS-851'/
     &'************************** BE THE SUM OF TWO TERMS SIMILAR TO ''V
     &(E)''',4X,'ECIS-852'/4X,
     &'USED FOR POSITIVE VALUES, WITH THE POWER |NV| AND THE PARAMETERS
     &BV ECIS-853'/4X,
     &'AND BV'' RESPECTIVELY. THE STRENGTHS ARE SUCH THAT THE FIRST TERM
     & IS ECIS-854'/4X,'FV TIMES THE VALUE READ AT THE ENERGY PIP(3).',
     &23X,'ECIS-855'/
     &'FOR NEGATIVE VALUES OF NS: THE SURFACE IMAGINARY POTENTIAL IS THE
     &',7X,'ECIS-856'/
     &'************************** DIFFERENCE OF TWO TERMS SIMILAR TO THO
     &SE USEDECIS-857'/4X,
     &'FOR POSITIVE VALUES OF NV, WITH THE POWER |NS|, THE PARAMETERS BS
     &,  ECIS-858'/4X,'BS'' RESPECTIVELY AND THE SAME STRENGTH.',29X,
     &'ECIS-859'/6X,
     &'THE VECTOR DISPERSIVE POTENTIAL OF THE DIRAC FORMALISM IS TREATED
     & ECIS-860'/4X,'AS THE SCALAR ONE WITHOUT LARGE ENERGY TERMS.',23X,
     &'ECIS-861'/6X,
     &'THE POWERS NV, NS AND N2 MUST BE EVEN. INPUT OF 0 SUPPRESSES THE
     & ECIS-862'/4X,
     &'USE OF DISPERSION RELATION FOR THE CORRESPONDING POTENTIAL.',9X,
     &'ECIS-863'/72X,'ECIS-864')
      WRITE (6,99065)
99065 FORMAT (6X,'******  END OF DO-LOOP FOR POTENTIALS ******',22X,
     &        'ECIS-865'/72X,'ECIS-866'/'EQUIDISTANT ANGLES',22X,
     &        'FORMAT (7F10.5)',17X,'ECIS-867'/'******************',54X,
     &        'ECIS-868'/
     &' ONLY IF LO(66)=.FALSE., OTHERWISE GO TO ''SPIN-ORBIT PARAMETRISA
     &TION''.  ECIS-869'/7X,'1-10   THETA1   FIRST ANGLE.',37X,
     &'ECIS-870'/6X,'11-20   DTHETA   STEP. (DEFAULT OPTION 1.)',24X,
     &'ECIS-871'/6X,'21-30   THETA2   LAST ANGLE.',38X,'ECIS-872'/6X,
     &'31-40   DTHE',5X,
     &'AVERAGING ANGLE. VALUES LISTED ARE 1/3 OF THE SUMECIS-873'/23X,
     &'OF VALUES AT THETA AND THETA+/-DTHE.',13X,'ECIS-874'/72X,
     &'ECIS-875'/'SPIN-ORBIT PARAMETRISATION',14X,'FORMAT (7F10.5)',17X,
     &'ECIS-876'/'**************************',46X,'ECIS-877'/
     &' ONLY IF LO(4)=.TRUE., OTHERWISE GO TO ''HAUSER-FESHBACH CORRECTI
     &ONS''.   ECIS-878'/7X,'1-10   AZ1.',54X,'ECIS-879'/6X,
     &'11-20   AZ2.',8X,'(THESE PARAMETERS ARE IN AN ARRAY',13X,
     &'ECIS-880'/6X,'21-30   AZ3.',54X,'ECIS-881'/6X,'31-40   AZ4.',8X,
     &'AZ(16) FROM AZ(1) TO AZ(6) FOR THE SEARCH)',4X,'ECIS-882'/6X,
     &'41-50   AZ5.',54X,'ECIS-883'/6X,'51-60   AZ6.',54X,
     &'ECIS-884'/'  NOTE: THE UNPARAMETRISED SPIN-ORBIT DEFORMATION IS:'
     &,19X,'ECIS-885'/'  ****   AZ1=AZ4=0.,  AZ2=AZ3=AZ5=AZ6=1.',32X,
     &'ECIS-886'/8X,'THE SPIN-ORBIT DEFORMATION MULTIPLIED BY X IS:',
     &18X,'ECIS-887'/10X,'AZ1=AZ4=0., AZ2=1., AZ3=AZ5=AZ6=X .',27X,
     &'ECIS-888'/8X,'THE ''INCORRECT'' SPIN-ORBIT DEFORMATION IS:',22X,
     &'ECIS-889')
      WRITE (6,99070)
99070 FORMAT (10X,'AZ1=AZ2=AZ5=AZ6=0., AZ3=AZ4=0.5 .',29X,'ECIS-890'/8X,
     &'FOR THE MOST GENERAL PARAMETRISATION OF DEFORMED SPIN-ORBIT SEE E
     &CIS-891'/7X,'COMMENT CARDS IN SUBROUTINE QUAN.',32X,
     &'ECIS-892'/72X,'ECIS-893'/'HAUSER-FESHBACH CORRECTIONS',13X,
     &'FORMAT (7F10.5)',17X,'ECIS-894'/'***************************',
     &45X,'ECIS-895'/
     &' ONLY IF LO(81)=.TRUE., OTHERWISE GO TO ''CARDS READ IN SUBROUTIN
     &E DEPH''.ECIS-896'/6X,
     &'1-10   BZ1.   SQUARE ROOT OF ELASTIC ENHANCEMENT.',17X,
     &'ECIS-897'/20X,'(DEFAULT OPTION 1.4142).',28X,'ECIS-898'/5X,
     &'11-20   BZ2.   IF LO(82)=.TRUE., SPIN CUT-OFF PARAMETER (DEFAULT
     &  ECIS-899'/20X,
     &'OPTION 3.5). IF LO(82)=.FALSE., PARTICLE DEGREES OF ECIS-900'/20X
     &,'FREEDOM.',44X,'ECIS-901'/5X,
     &'21-30   BZ3.   SQUARE ROOT OF LEVEL DENSITY PARAMETER.',13X,
     &'ECIS-902'/20X,'(DEFAULT OPTION 100.). IF LO(82)=LO(87)=.FALSE.,',
     &4X,'ECIS-903'/20X,
     &'PARAMETER BZ3 IN MOLDAUER''S FORMULA GIVEN BELOW.',4X,
     &'ECIS-904'/20X,'(DEFAULT OPTION 1.212).',29X,'ECIS-905'/''/5X,
     &'31-40   BZ4.   IF LO(82)=LO(87)=.FALSE., PARAMETER BZ4 IN MOL-',
     &5X,'ECIS-906'/20X,
     &'DAUER''S FORMULA GIVEN BELOW. (DEFAULT OPTION 0.78). ECIS-907'/5X
     &,'41-50   BZ5.   IF LO(82)=LO(87)=.FALSE., PARAMETER BZ5 IN MOL-',
     &5X,'ECIS-908'/20X,
     &'DAUER''S FORMULA GIVEN BELOW. (DEFAULT OPTION 0.228).ECIS-909'/
     &'  NOTE:  THE PENETRABILITIES, WHICH ARE PROBABILITIES OF COMPOUND
     &',7X,'ECIS-910')
      WRITE (6,99075)
99075 FORMAT (
     &'  ****  NUCLEUS FORMATION, ARE RELATED TO PARTIAL CROSS-SECTIONS
     &MINUS  ECIS-911'/8X,
     &'THE REACTION CROSS-SECTION TO THE CHANNELS TAKEN INTO ACCOUNT.  E
     &CIS-912'/9X,
     &'IF LO(82)=.TRUE., DENOTING BY TI AND TF THE PENETRABILITIES',4X,
     &'ECIS-913'/8X,
     &'DEFINED ABOVE FOR THE INCOMING AND THE OUTGOING CHANNELS, THE   E
     &CIS-914'/8X,
     &'HAUSER-FESHBACH CORRECTION IS: TI*TF/(4*(SUM ON ALL THE T)+',5X,
     &'ECIS-915'/8X,
     &'+BZ3**2*(2*J+1)*EXP(-(J*J+J)/(2*BZ2**2)) FOR INELASTIC CHANNELS,E
     &CIS-916'/8X,'MULTIPLIED BY BZ1**2 FOR THE ELASTIC ONE.',23X,
     &'ECIS-917'/8X,
     &'FOR THE SEARCH, THESE QUANTITIES ARE IN AZ FROM AZ(7) TO AZ(9). E
     &CIS-918'/9X,
     &'FOR LO(82)=.FALSE.: WITHOUT FLUCTUATIONS (LO(87)=.TRUE.), BZ1  EC
     &IS-919'/8X,
     &'IS USED AND CAN BE IN SEARCH; WITH FLUCTUATIONS (LO(87)=.FALSE.)E
     &CIS-920'/8X,
     &'THE GIVEN VALUE OF BZ2 IS USED IF BZ2 IS NOT 0; IF BZ2=0., THE  E
     &CIS-921'/8X,
     &'CHANNEL DEGREE OF FREEDOM PARAMETER, FORMULA (1) IN P.A.',8X,
     &'ECIS-922'/8X,
     &'MOLDAUER, NUCLEAR PHYSICS A344 (1980), PAGE 185-195, WHICH IS:  E
     &CIS-923'/12X,
     &'1.78D0+(TL**1.212D0-0.78D0)*DEXP(-0.228D0*SUM ON TL)',8X,
     &'ECIS-924'/8X,'IS GENERALISED BY THE EXPRESSION:',31X,
     &'ECIS-925'/12X,'1.D0+BZ4+(TL**BZ3-BZ4)*DEXP(-BZ5*SUM ON TL)',17X,
     &'ECIS-926'/8X,
     &'IF LO(82)=.TRUE. BZ1 AND BZ2 CAN BE IN SEARCH; IF LO(82)=.FALSE.E
     &CIS-927'/8X,
     &'AND LO(87)=.TRUE. BZ3 CAN BE IN SEARCH; IF LO(82)=LO(87)=.FALSE.E
     &CIS-928')
      WRITE (6,99080)
99080 FORMAT (8X,
     &'BZ2 CAN BE IN SEARCH, BUT IF BZ2=0., BZ3, BZ4 AND BZ5 CAN ALSO  E
     &CIS-929'/8X,'BE IN SEARCH.',51X,'ECIS-930'/72X,
     &'ECIS-931'/'FISSION DATA',28X,'FORMAT (7F10.5)',17X,
     &'ECIS-932'/'************',60X,'ECIS-933'/
     &'IF LO(82)=.TRUE., GO TO ''CARDS READ IN SUBROUTINE DEPH''.',16X,
     &'ECIS-934'/
     &'IF LO(85)=.FALSE., GO TO ''GIANT DIPOLE RESONANCE DESCRIPTION''.'
     &,10X,'ECIS-935'/6X,'1-10   FISS(1,*)  TRANSMISSION COEFFICIENT',
     &24X,'ECIS-936'/5X,
     &'11-20   FISS(2,*)  DEGREES OF FREEDOM. IF <.5, IT IS REPLACED BY
     &0.ECIS-937'/
     &'  THERE ARE NFISS SUCH CARDS. THE FIRST COEFFICIENT IS FOR THE SM
     &ALLEST ECIS-938'/
     &'TOTAL J VALUE OF THE SYSTEM AND THE SAME PARITY OF THE GROUND STA
     &TE. THEECIS-939'/
     &'SECOND ONE IS FOR THE OPPOSITE PARITY. THE FOLLOWING ONES ARE FOR
     & HIGHERECIS-940'/'J VALUES, WITH THE SAME ORDER FOR PARITIES.',
     &29X,'ECIS-941'/72X,'ECIS-942'/'GIANT DIPOLE RESONANCE DESCRIPTION'
     &,6X,'FORMAT (7F10.5)',17X,
     &'ECIS-943'/'**********************************',38X,'ECIS-944'/
     &'  ONLY IF LO(86)=.TRUE., OTHERWISE GO TO ''LEVEL DENSITY FOR CONT
     &INUUM''. ECIS-945'/3X,
     &'IF NRD IS NOT 0, GO TO ''GAMMA TRANSMISSION FACTORS''.',17X,
     &'ECIS-946'/7X,
     &'DATA TO COMPUTE THE (NEUTRON, GAMMA) CROSS-SECTION WHEN THE GIANT
     &ECIS-947'/3X,
     &'DIPOLE RESONANCE MODEL IS USED (SEE E. LYNN, ''THE THEORY OF NEUT
     &RON  ECIS-948'/3X,
     &'RESONANCE REACTIONS'', PAGES 321/326 AND A. GILBERT AND A.G.W.',
     &8X,'ECIS-949')
      WRITE (6,99085)
99085 FORMAT (3X,
     &'CAMERON, CAN. JOUR. OF PHYSICS 43, 1446, 1965, PAGES 1475/1476).'
     &,5X,'ECIS-950'/6X,
     &'1-10   TGO   SLOW S-WAVE NEUTRON GAMMA WIDTHS/SPACING FOR',9X,
     &'ECIS-951'/19X,'NORMALISATION. IF TGO=0, LO(86) IS SET .FALSE.',
     &7X,'ECIS-952'/5X,'11-20   BN',4X,
     &'NEUTRON SEPARATION ENERGY.(DEFAULT OPTION 8.).',7X,'ECIS-953'/5X,
     &'21-30   FNUG  RADIATIVE DEGREES OF FREEDOM.',24X,'ECIS-954'/19X,
     &'IF LESS THAN 1., IT IS REPLACED BY FNUG=20.',10X,'ECIS-955'/5X,
     &'31-40   EGD   ENERGY OF THE GIANT DIPOLE RESONANCE.',16X,
     &'ECIS-956'/19X,'(DEFAULT OPTION 163*(N*Z)**2/(N+Z)**(4/3).).',9X,
     &'ECIS-957'/19X,'THE STRONG ABSORPTION MODEL ID USED IF EGD < 0.',
     &6X,'ECIS-958'/19X,'(SIMPLE BEHAVIOUR AS E**3 INSTEAD OF RESONANCE'
     &,7X,'ECIS-959'/19X,'WITH A FACTOR E**4)',34X,'ECIS-960'/5X,
     &'41-50   GGD   RESONANCE WIDTH. (DEFAULT OPTION 5.).',16X,
     &'ECIS-961'/4X,
     &'FOR THE SEARCH, THESE QUANTITIES ARE IN AZ FROM AZ(12) TO AZ(16).
     &   ECIS-962'/72X,'ECIS-963'/''/'GAMMA TRANSMISSION FACTORS',14X,
     &'FORMAT (7F10.5)',17X,'ECIS-964'/'**************************',46X,
     &'ECIS-965'/' ONLY IF LO(86)=.TRUE. AND NRD IS NOT 0.',32X,
     &'ECIS-966'/6X,'1-10   GAM(1) FOR L=0.',44X,'ECIS-967'/5X,
     &'11-20   GAM(2) FOR L=1.',44X,'ECIS-968'/5X,
     &'.......................',44X,'ECIS-969'/5X,
     &'61-70   GAM(7) FOR L=6.',44X,
     &'ECIS-970'/'  UP TO GAM(NRD), EVENTUALLY ON OTHERS CARDS.',27X,
     &'ECIS-971'/72X,'ECIS-972')
      WRITE (6,99090)
99090 FORMAT ('LEVEL DENSITY OF COMPOUND NUCLEUS',7X,'FORMAT (7F10.5)',
     &        17X,'ECIS-973'/'*********************************',39X,
     &        'ECIS-974'/3X,
     &'IF THERE ARE GAMMA TRANSMISSION PARAMETERS COMPUTED WITH THE GIAN
     &T   ECIS-975'/
     &'DIPOLE RESONANCE MODEL (LO(86)=.TRUE. AND NRD=0 IN ''COMPOUND NUC
     &LEUS',4X,'ECIS-976'/
     &'DATA''),  OR CONTINUA (NCONT NOT 0 IN ''COMPOUND NUCLEUS DATA''),
     & OTHERWISEECIS-977'/'GO TO ''CARDS READ IN SUBROUTINE DEPH''.',
     &34X,'ECIS-978'/3X,
     &'FOR THE TOTAL RESIDUAL NUCLEUS NEEDED FOR THE GAMMA GIANT RESONAN
     &CE, ECIS-979'/
     &'FOLLOWED BY THE RESIDUAL NUCLEUS OF EACH CONTINUUM:',21X,
     &'ECIS-980'/6X,
     &'1-10   SCN(7,I) Z:   CHARGE OF THE COMPOUND NUCLEUS',15X,
     &'ECIS-981'/5X,
     &'11-20   SCN(1,I) SA:  LEVEL DENSITY PARAMETER FOR S-WAVE RESONANC
     &E ECIS-982'/27X,
     &'SPACING. (DEFAULT OPTION (.0091*(SHELL CORR. ECIS-983'/27X,
     &'-.23*ND)+.143)*NA WHERE NA IS THE TOTAL',6X,'ECIS-984'/27X,
     &'NUMBER OF NUCLEONS, ND THE MINIMUM DISTANCE  ECIS-985'/27X,
     &'TO A MAGIC NUMBER FOR PROTONS OR NEUTRONS ANDECIS-986'/27X,
     &'SHELL CORRECTIONS ARE GIVEN BY COOK: SEE',5X,'ECIS-987'/27X,
     &'TABLES AND REFERENCES IN SUBROUTINE LDEN).   ECIS-988'/5X,
     &'21-30   SCN(2,I) UX:  MATCHING ENERGY FOR THE TWO DENSITY FORMULA
     &  ECIS-989'/27X,'SHIFTED BY PAIRING ENERGY. (DEFAULT VALUE',4X,
     &'ECIS-990'/27X,'2.5+150/NA).',33X,'ECIS-991'/5X,
     &'31-40   SCN(3,I) TAU: NUCLEAR TEMPERATURE. (DEFAULT OPTION',9X,
     &'ECIS-992')
      WRITE (6,99095)
99095 FORMAT (27X,'1/TAU=SQRT(SA/UX)-1.5/UX).',19X,'ECIS-993'/5X,
     &   '41-50   SCN(4,I) SG:  SPIN CUT OFF PARAMETER. (DEFAULT OPTION'
     &   ,6X,'ECIS-994'/27X,'FORMULA (11) OF GILBERT AND CAMERON).',8X,
     &   'ECIS-995'/5X,
     &'51-60   SCN(5,I) E0:  ENERGY SHIFT. (DEFAULT OPTION FORMULA (28)
     &OFECIS-996'/27X,'GILBERT AND CAMERON).',24X,'ECIS-997'/5X,
     &'61-70   SCN(6,I) EX:  MATCHING ENERGY BETWEEN THE TWO DENSITY',
     &6X,'ECIS-998'/27X,'FORMULAE. (DEFAULT OPTION UX+PAIRING WITH',4X,
     &'ECIS-999'/27X,'PAIRING GIVEN BY COOK)',23X,'ECIS1000'/
     &'  NOTE:  THE DIMENSIONS OF THE ARRAY SCN ARE 7 AND NCONS. SCN(J,I
     &)',6X,'ECIS1001'/
     &'  ****  CAN BE SEARCHED FOR J=1 TO 6. IF SCN(J,I) IS 0., IT IS RE
     &PLACED ECIS1002'/8X,
     &'BY THE DEFAULT OPTION COMPUTED WITH THE SCN(J,K) FOR K<I. IF',4X,
     &'ECIS1003'/8X,
     &'SCN(3,I) IS NEGATIVE, IT IS REPLACED BY THE DEFAULT OPTION',6X,
     &'ECIS1004'/8X,
     &'COMPUTED WITH DEFAULT OPTIONS FOR SA AND UX. AFTER REPLACEMENT, E
     &CIS1005'/8X,
     &'DENSITY PARAMETERS USED, WHICH MUST BE TAKEN INTO ACCOUNT FOR A E
     &CIS1006'/8X,
     &'SEARCH OR A CHANGE USING LO(37)=.TRUE. ARE LISTED AT THE END.   E
     &CIS1007'/72X,'ECIS1008'/72X,
     &'ECIS1009'/'CARDS READ IN SUBROUTINE DEPH',43X,
     &'ECIS1010'/'*****************************',43X,'ECIS1011'/72X,
     &'ECIS1012'/'NUMBER OF OBSERVABLES BY CHANNEL',8X,'FORMAT (14I5)',
     &19X,'ECIS1013'/'********************************',40X,'ECIS1014')
      WRITE (6,99100)
99100 FORMAT (4X,
     &'(NON-STANDARD OBSERVABLES) ONLY IF LO(94)=.TRUE. AND LO(66)=.FALS
     &E.,ECIS1015'/4X,
     &'OTHERWISE GO TO ''RESTRICTED COULOMB CORRECTIONS''.',19X,
     &'ECIS1016'/7X,
     &'1- 5   NUMBER OF OBSERVABLES FOR THE ELASTIC SCATTERING.',9X,
     &'ECIS1017'/7X,
     &'6-10   NUMBER OF OBSERVABLES FOR THE FIRST EXCITED STATE.',8X,
     &'ECIS1018'/6X,
     &'11-15   NUMBER OF OBSERVABLES FOR THE SECOND EXCITED STATE.',7X,
     &'ECIS1019'/6X,
     &'16-20   NUMBER OF OBSERVABLES FOR THE THIRD EXCITED STATE.',8X,
     &'ECIS1020'/6X,'21-25   ...........',47X,'ECIS1021'/14X,
     &'UP TO THE LAST COUPLED CHANNEL (NCOLL VALUES).',12X,
     &'ECIS1022'/72X,'ECIS1023'/''/'FOR EACH COUPLED STATE',50X,
     &'ECIS1024'/'**********************',50X,'ECIS1025'/72X,
     &'ECIS1026'/'OBSERVABLE IDENTIFICATIONS',14X,'FORMAT (14I5)',19X,
     &'ECIS1027'/'**************************',46X,'ECIS1028'/7X,
     &'1- 5   FIRST OBSERVABLE WHICH MUST BE THE CROSS-SECTION (ENTER A
     &ECIS1029'/14X,'BLANK OR 0) .',45X,'ECIS1030'/7X,
     &'6-10   SECOND OBSERVABLE.',40X,'ECIS1031'/6X,
     &'11-15   THIRD OBSERVABLE.',41X,'ECIS1032'/6X,
     &'16-20   FOURTH OBSERVABLE.',40X,'ECIS1033'/6X,
     &'21-25   FIFTH OBSERVABLE.',41X,'ECIS1034'/6X,
     &'26-30   ...........',47X,'ECIS1035'/14X,
     &'UP TO THE LAST OBSERVABLE.',32X,'ECIS1036'/72X,'ECIS1037'/3X,
     &'STANDARD DESCRIPTION  0   CROSS-SECTION.',29X,'ECIS1038'/3X,
     &'********************  1   CROSS-SECTION / RUTHERFORD''S CROSS-SEC
     &TION.ECIS1039')
      WRITE (6,99105)
99105 FORMAT (25X,'2   VECTOR ANALYSING POWER.',20X,'ECIS1040'/6X,'3',
     &        5X,'VECTOR POLARISATION.',40X,'ECIS1041'/12X,
     &'(NOTE A RATIO SQRT(2.) WITH IT11 FOR SPIN 1/2 FOR 2 AND 3). ECIS1
     &042'/6X,'4',5X,'T20 .',55X,'ECIS1043'/6X,'5',5X,'T21 .',55X,
     &'ECIS1044'/6X,'6',5X,'T22 .',55X,'ECIS1045'/6X,'7',5X,
     &'KYY OR D  DEFINED AS -A(1100 1100)-A(1100 1-100)',12X,
     &'ECIS1046'/6X,'8',5X,
     &'KXX OR R  DEFINED AS  A(1100 1100)-A(1100 1-100)',12X,
     &'ECIS1047'/6X,'9',5X,'KZZ OR A'' DEFINED AS  A(1000 1000)',26X,
     &'ECIS1048'/5X,'10',5X,
     &'KXZ OR R'' DEFINED AS -SQRT(2.) A(1100 1000)',17X,'ECIS1049'/5X,
     &'11',5X,'KZX OR A  DEFINED AS -SQRT(2.) A(1000 1100)',17X,
     &'ECIS1050'/5X,'12',5X,
     &'SPIN-FLIP :  (A(0000,0000)+A(1100,1100)+A(1100,1-100))/2',4X,
     &'ECIS1051'/5X,'13',5X,'VECTOR ANALYSING POWER OF THE TARGET',24X,
     &'ECIS1052'/10X,
     &'(NOTE A RATIO SQRT(2.) WITH IT11 FOR SPIN 1/2 FOR 2, 3 AND 13)ECI
     &S1053'/5X,'14',5X,'AYY  DEFINED AS -A(1111 0000)-A(111-1 0000)',
     &17X,'ECIS1054'/5X,'15',5X,
     &'AXX  DEFINED AS  A(1111 0000)-A(111-1 0000)',17X,'ECIS1055'/5X,
     &'16',5X,'AZZ  DEFINED AS  A(1010 0000)',31X,'ECIS1056'/5X,'17',5X,
     &'AXZ  DEFINED AS -SQRT(2.) A(1110 0000)',22X,'ECIS1057'/5X,'18',
     &5X,'AZX  DEFINED AS -SQRT(2.) A(1011 0000)',22X,'ECIS1058'/5X,
     &'19',5X,
     &'RESERVED FOR A SET OF EXPERIMENTAL DATA WHICH ARE REACTION  ECIS1
     &059'/17X,'CROSS-SECTIONS. SEE ''CARDS READ IN SUBROUTINE LECD''',
     &4X,'ECIS1060')
      WRITE (6,99110)
99110 FORMAT (12X,'NOTE THAT 12 AND 19 WERE PREVIOUSLY 7 AND 8.',16X,
     &        'ECIS1061'/72X,'ECIS1062'/4X,'NON STANDARD DESCRIPTION',
     &        4X,'ENTER A NEGATIVE VALUE, DIFFERENT FOR   ECIS1063'/4X,
     &        '************************',4X,
     &        'DIFFERENT OBSERVABLES. THE DESCRIPTION  ECIS1064'/32X,
     &        'WILL BE READ IN SUBROUTINE OBSE.',8X,'ECIS1065'/10X,
     &        'CROSS-SECTIONS MUST BE BEFORE POLARISATIONS.',18X,
     &        'ECIS1066'/72X,'ECIS1067'/'PLOT INDICATIONS',24X,
     &        'FORMAT (14I5)',19X,'ECIS1068'/'****************',56X,
     &        'ECIS1069'/7X,
     &'1- 5   NUMBER OF DECADES IN LOGARITHMIC SCALES FOR CROSS-SECTION.
     &ECIS1070'/7X,'6-10   INDICATION FOR SECOND OBSERVABLE.',25X,
     &'ECIS1071'/6X,'11-15   INDICATION FOR THIRD OBSERVABLE.',26X,
     &'ECIS1072'/6X,'16-20   ...................',39X,'ECIS1073'/14X,
     &'UP TO THE LAST OBSERVABLE.',32X,'ECIS1074'/6X,
     &'INDICATIONS FOR POLARISATIONS ARE ''1'' FOR PLOT AND ''0'' FOR NO
     & PLOTECIS1075'/72X,'ECIS1076'/6X,
     &'******  END OF DO-LOOP FOR NUCLEAR STATES ******',18X,
     &'ECIS1077'/72X,'ECIS1078'/'RESTRICTED COULOMB CORRECTIONS',10X,
     &'FORMAT (14I5)',19X,'ECIS1079'/'******************************',
     &42X,'ECIS1080'/4X,
     &'IF LO(44) AND LO(46)=.TRUE., OTHERWISE GO TO ''CARDS READ IN',9X,
     &'ECIS1081'/'  SUBROUTINE CALX''.  FOR EACH NUCLEAR LEVEL:',28X,
     &'ECIS1082'/''/10X,
     &'1- 5   NIV(I,J,3) BETWEEN LEVEL I AND LEVEL J FOR J=1.',8X,
     &'ECIS1083'/10X,
     &'6-10   NIV(I,J,3) BETWEEN LEVEL I AND LEVEL J FOR J=2.',8X,
     &'ECIS1084')
      WRITE (6,99115)
99115 FORMAT (9X,'11-15   .........................',30X,'ECIS1085'/17X,
     &        'ENTER ''1'' FOR COULOMB CORRECTION AND ''0'' FOR NONE.',
     &        5X,'ECIS1086'/4X,
     &'ONLY VALUES FOR J SMALLER THAN OR EQUAL TO I ARE TAKEN INTO ACCOU
     &NT.ECIS1087'/9X,'THERE ARE NCOLL SUCH CARDS.',36X,'ECIS1088'/72X,
     &'ECIS1089'/72X,'ECIS1090'/'CARDS READ IN SUBROUTINE CALX',43X,
     &'ECIS1091'/'*****************************',43X,'ECIS1092'/
     &' ONLY IF LO(31)=.TRUE., OTHERWISE GO TO ''CARDS READ IN SUBROUTIN
     &E OBSE''.ECIS1093'/72X,'ECIS1094'/'CHI2 CONDITIONS',25X,
     &'FORMAT (4I5,2F10.5)',13X,'ECIS1095'/'***************',57X,
     &'ECIS1096'/7X,
     &'1- 5   NCOLR  NUMBER OF ANGULAR DISTRIBUTIONS. IF SOME OF THEM
     &ECIS1097'/21X,
     &'ARE SUMS ON SEVERAL LEVELS, THEY ACCOUNT FOR THEIR ECIS1098'/21X,
     &'NUMBER OF LEVELS IN NCOLR.',25X,'ECIS1099'/7X,
     &'6-10   NREC   NUMBER OF PARAMETERS IN SEARCH.',20X,'ECIS1100'/6X,
     &'11-15   NFIT   NUMBER OF FUNCTIONS KEPT IN THE SEARCH BEYOND THE
     & ECIS1101'/21X,'MINIMUM NUMBER WHICH IS NREC+1 .',19X,
     &'ECIS1102'/6X,
     &'16-20   NESSAI MAXIMUM NUMBER OF EVALUATIONS. (DEFAULT OPTION 100
     &)ECIS1103'/21X,'THIS VALUE IS NOT USED WHEN LO(34)=.TRUE..',9X,
     &'ECIS1104'/6X,'21-30   ECH',4X,
     &'SEARCH SCALE. (DEFAULT OPTION 20.).',16X,'ECIS1105'/21X,
     &'IN THE PRELIMINARY RUNS, VARIABLES ARE CHANGED BY  ECIS1106'/21X,
     &'THE PRODUCT OF THIS NUMBER WITH THEIR ACCURACY. IN ECIS1107')
      WRITE (6,99120)
99120 FORMAT (21X,'THE OTHERS RUNS, THE CHANGE OF ANY VARIABLE IS',5X,
     &        'ECIS1108'/21X,'LIMITED BY TWICE THIS VALUE.',23X,
     &        'ECIS1109'/6X,'31-40   RAP',4X,
     &     'RATIO OF INCREASE FOR THE SEARCH SCALE AFTER A RUN ECIS1110'
     &     /21X,
     &     'FOR WHICH THE CHI2 DECREASED. (DEFAULT OPTION 1.)  ECIS1111'
     &     /21X,
     &     'THE VALUE OF ECH IS THE PRODUCT BY RAP OF THE LAST ECIS1112'
     &     /21X,
     &     'MAXIMUM CHANGE OF PARAMETER WHICH GAVE A LOWER CHI2ECIS1113'
     &     /21X,
     &     'THE VALUE 1 LEADS SAFELY TO THE MINIMUM. A VALUE   ECIS1114'
     &     /21X,
     &     'LARGER THAN 1. LEADS QUICKER TOWARDS THE MINIMUM.  ECIS1115'
     &     /21X,'A VALUE LESS THAN 1. IS REPLACED BY 1.',13X,
     &     'ECIS1116'/72X,'ECIS1117'/72X,
     &     'ECIS1118'/'CARDS READ IN SUBROUTINE LECD',43X,
     &     'ECIS1119'/'*****************************',43X,'ECIS1120'/
     &' ONLY IF NCOLR IS NOT 0, OTHERWISE GO TO ''CARDS READ IN SUBROUTI
     &NE OBSE''ECIS1121'/
     &'THE ANGULAR DISTRIBUTIONS CAN BE READ IN ANY ORDER.',21X,
     &'ECIS1122'/72X,'ECIS1123'/'FOR EACH ANGULAR DISTRIBUTION',43X,
     &'ECIS1124'/'*****************************',43X,'ECIS1125'/72X,
     &'ECIS1126'/'IDENTIFICATION',26X,
     &'FORMAT (L1,I1,I3,2I5,5X,3F10.5) ECIS1127'/'**************',58X,
     &'ECIS1128'/10X,
     &'1   LX LOGICAL. IF LX=.TRUE. THE EXPERIMENTAL ERRORS ARE',6X,
     &'ECIS1129'/14X,'PERCENTAGES. LX IS SET .FALSE. IF THE OBSERVABLE',
     &10X,'ECIS1130'/14X,'IDENTIFICATION IS NOT 0, 1 OR 19.',25X,
     &'ECIS1131'/10X,
     &'2   1 IF THE ANGLES ARE IN THE LABORATORY SYSTEM, 0 OTHERWISE.ECI
     &S1132')
      WRITE (6,99125)
99125 FORMAT (7X,'3- 5   NT   NUMBER OF ANGLES.',36X,'ECIS1133'/7X,
     &        '6-10   NUMBER OF THE NUCLEAR STATE.',30X,'ECIS1134'/6X,
     &'11-15   OBSERVABLE IDENTIFICATION. (SEE COMMENTS ON ''OBSERVABLE
     &  ECIS1135'/14X,
     &'IDENTIFICATION'' IN ''CARDS READ IN SUBROUTINE DEPH'').',6X,
     &'ECIS1136'/6X,
     &'21-30   WEIGHT OF THIS OBSERVABLE IN CHI2. (DEFAULT OPTION 1.)',
     &4X,'ECIS1137'/6X,
     &'31-40   EXPERIMENTAL NORMALISATION OF DATA. (DEFAULT OPTION 1.)
     & ECIS1138'/6X,
     &'41-50   ERROR ON EXPERIMENTAL NORMALISATION. (IF 0., THE',10X,
     &'ECIS1139'/14X,'NORMALISATION IS FIXED).',34X,'ECIS1140'/''/16X,
     &'THE EXPERIMENTAL VALUES AND THEIR ERRORS ARE DIVIDED BY ECIS1141'
     &/14X,
     &'THE ''RENORMALISATION PARAMETER''. IF THE NORMALISATION IS  ECIS1
     &142'/14X,
     &'FIXED, THIS PARAMETER IS THE ''EXPERIMENTAL NORMALISATION''.ECIS1
     &143'/14X,'IF THE NORMALISATION IS NOT FIXED, THE SQUARE OF THE',
     &6X,'ECIS1144'/14X,
     &'DIFFERENCE BETWEEN THE ''EXPERIMENTAL NORMALISATION'' AND   ECIS1
     &145'/14X,'THIS PARAMETER DIVIDED BY THE ''ERROR ON EXPERIMENTAL',
     &6X,'ECIS1146'/14X,
     &'NORMALISATION'' IS ADDED TO THE CHI2 FOR THIS OBSERVABLE   ECIS11
     &47'/14X,'FOLLOWING THE DEFINITION OF THE CHI2. THE ''CALCULATED',
     &5X,'ECIS1148'/14X,
     &'NORMALISATION'' IS THE VALUE OF THE ''RENORMALISATION',7X,
     &'ECIS1149'/14X,
     &'PARAMETER'' WHICH MINIMISES THE CHI2. EXPERIMENTAL VALUES  ECIS11
     &50'/14X,'AND ERRORS ARE DIVIDED BY IT.',29X,'ECIS1151')
      WRITE (6,99130)
99130 FORMAT (16X,'IF FOR TWO SUCCESSIVE ANGULAR DISTRIBUTIONS, BOTH',
     &        7X,'ECIS1152'/14X,
     &        'CROSS-SECTIONS OR POLARISATIONS, THE ''ERRORS ON',11X,
     &        'ECIS1153'/14X,
     &'EXPERIMENTAL NORMALISATIONS'' ARE NON-0 AND THE SAME AND   ECIS11
     &54'/14X,
     &'THE TWO ''EXPERIMENTAL NORMALISATION'' ARE IDENTICAL, THE   ECIS1
     &155'/14X,'RENORMALISATION PARAMETERS ARE THE SAME FOR THESE TWO',
     &5X,'ECIS1156'/14X,
     &'ANGULAR DISTRIBUTIONS AND ONE VALUE IS ADDED TO THE CHI2  ECIS115
     &7'/14X,'FOR EACH ONE.',45X,'ECIS1158'/
     &'  NOTE:  IF NT=0, THE ANGULAR DISTRIBUTION DESCRIBED HERE IS NOT'
     &,8X,'ECIS1159'/
     &'  ****  EXPERIMENTALLY SEPARATED FROM THE FOLLOWING ONE. IT CANNO
     &T',6X,'ECIS1160'/8X,
     &'HAPPEN FOR THE LAST ANGULAR DISTRIBUTION AND THE OBSERVABLES',4X,
     &'ECIS1161'/8X,
     &'MUST BE OF THE SAME KIND (IF NOT, THE PROGRAM STOPS).',11X,
     &'ECIS1162'/8X,
     &'ANGULAR DISTRIBUTION IS ATTRIBUTED TO THE LEVEL READ WITHOUT',4X,
     &'ECIS1163'/8X,'NT=0 WHICH CAN BE ANY OF THEM.',34X,'ECIS1164'/12X,
     &'THE PROGRAM STOPS ALSO IF THE CHANNEL NUMBER IS TOO LARGE   ECIS1
     &165'/8X,'OR IF THE OBSERVABLE IDENTIFICATION IS LARGER THAN 19.',
     &10X,'ECIS1166'/72X,'ECIS1167'/'DATA CARD FOR EACH ANGLE',16X,
     &'FORMAT (6F10.5)',17X,'ECIS1168'/'************************',48X,
     &'ECIS1169'/7X,'1-10   ANGLE IN DEGREES.',41X,'ECIS1170'/6X,
     &'11-20   EXPERIMENTAL VALUE.',39X,'ECIS1171'/6X,
     &'21-30   EXPERIMENTAL ERROR.',39X,'ECIS1172')
      WRITE (6,99135)
99135 FORMAT (6X,
     &'31-40   WIDTH OF DETECTOR. (IF NON 0.,THREE CALCULATIONS ARE DONE
     & ECIS1173'/14X,
     &'AT THE EXPERIMENTAL ANGLE AND AT PLUS AND MINUS THIS',6X,
     &'ECIS1174'/14X,
     &'WIDTH, THE CALCULATED VALUE WILL BE THE MEAN VALUE).',6X,
     &'ECIS1175'/6X,
     &'41-50   ANGULAR ERROR. (IF NON 0. AND THE WIDTH OF DETECTOR NON 0
     &.ECIS1176'/14X,
     &'THE EXPERIMENTAL ERROR IS INCREASED TO TAKE INTO ACCOUNT  ECIS117
     &7'/14X,'THE SLOPE OF THE CALCULATED CURVE).',23X,'ECIS1178'/
     &'  NOTE:  IF THE OBSERVABLE IDENTIFICATION IS 19, THE SET OF EXPER
     &IMENTALECIS1179'/
     &'  ****  VALUES ARE TOTAL CROSS-SECTIONS OF WHICH THE CHANNEL IS R
     &EAD IN ECIS1180'/8X,
     &'FLOATING VALUE INSTEAD OF THE ANGLE. FOR CHANNEL 0., IT IS THE  E
     &CIS1181'/8X,
     &'TOTAL REACTION CROSS-SECTION, NOT TAKING INTO ACCOUNT THE',7X,
     &'ECIS1182'/8X,
     &'COULOMB SCATTERING. FOR CHANNEL -1., IT IS THE TOTAL',12X,
     &'ECIS1183'/8X,
     &'CROSS-SECTION AS DEFINED FOR NEUTRONS. WEIGHT AND EXPERIMENTAL  E
     &CIS1184'/8X,
     &'NORMALISATION ARE TAKEN INTO ACCOUNT. FOR COMPOUND NUCLEUS,',5X,
     &'ECIS1185'/8X,
     &'UNCOUPLED LEVELS, CONTINUA, FISSION AND GAMMA CROSS-SECTIONS',4X,
     &'ECIS1186'/8X,'FOLLOW THE COUPLED STATES.',38X,'ECIS1187'/72X,
     &'ECIS1188'/72X,'ECIS1189'/'CARDS READ IN SUBROUTINE CALX',43X,
     &'ECIS1190'/'*****************************',43X,'ECIS1191'/
     &' ONLY IF LO(31)=.TRUE., OTHERWISE GO TO ''CARDS READ IN SUBROUTIN
     &E OBSE''.ECIS1192'/72X,'ECIS1193')
      WRITE (6,99140)
99140 FORMAT ('SEARCH ACCURACIES',23X,'FORMAT (7F10.3)',17X,
     &        'ECIS1194'/'*****************',55X,'ECIS1195'/
     &' ONLY IF LO(32)=.TRUE. AND NEITHER NCOLR AND NREC IS 0, OTHERWISE
     & GO TO ECIS1196'/' ''CARDS READ IN SUBROUTINE OBSE''.',39X,
     &'ECIS1197'/''/7X,'1-10   SEARCH ACCURACY FOR THE FIRST VARIABLE.'
     &,19X,'ECIS1198'/6X,
     &'11-20   SEARCH ACCURACY FOR THE SECOND VARIABLE.',18X,
     &'ECIS1199'/6X,'21-30   SEARCH ACCURACY FOR THE THIRD VARIABLE.',
     &19X,'ECIS1200'/6X,'31-40   ....................',38X,
     &'ECIS1201'/14X,'UP TO NREC VALUES.',40X,'ECIS1202'/6X,
     &'THE SEARCH ACCURACIES CANNOT BE 0..THERE IS NO DEFAULT OPTION.',
     &4X,'ECIS1203'/
     &'  THEY REFER TO VALUES USED IN THE PROGRAM AS REAL RADII OR',13X,
     &'ECIS1204'/'  DEFORMATIONS CHANGED FOR HEAVY IONS.',34X,
     &'ECIS1205'/72X,'ECIS1206'/'INDICES OF VARIABLES',20X,
     &'FORMAT (14I5)',19X,'ECIS1207'/'********************',52X,
     &'ECIS1208'/7X,'1- 5   INDEX OF THE FIRST VARIABLE.',30X,
     &'ECIS1209'/7X,'6-10   INDEX OF THE SECOND VARIABLE.',29X,
     &'ECIS1210'/6X,'11-15   INDEX OF THE THIRD VARIABLE.',30X,
     &'ECIS1211'/6X,'16-20   ....................',38X,'ECIS1212'/14X,
     &'UP TO NREC VALUES.',40X,'ECIS1213'/72X,'ECIS1214'/4X,
     &'INDEX SPECIFICATIONS:',47X,'ECIS1215'/4X,'*********************',
     &47X,'ECIS1216'/7X,
     &'1-1000   OPTICAL MODEL AND FOLDING PARAMETERS VAL(I).(SEE, ABOVE,
     &ECIS1217'/16X,
     &'OPTICAL POTENTIAL PARAMETERS). POSSIBLE VALUES 1 TO',5X,
     &'ECIS1218')
      END
C 01/01/04                                                      ECIS03  INPC-000
      SUBROUTINE INPC
C
C
C
      WRITE (6,99005)
99005 FORMAT (16X,
     &'34*NPP. PARAMETERS OF EXTERNAL FORM FACTORS IN THE ORDERECIS1219'
     &/16X,
     &'DEFINED WHEN THEY ARE READ. ONLY FLOATING VALUES CAN BE ECIS1220'
     &/16X,
     &'IN SEARCH POSSIBLE VALUES 1 TO 1000. ABOVE, ADD 9000.   ECIS1221'
     &/16X,
     &'CHOOSING SEARCH ACCURACIES, NOTE THAT REDUCED RADII ARE ECIS1222'
     &/16X,'NOT USED BUT ONLY RADII.',32X,'ECIS1223'/4X,
     &'1001-2000   DEFORMATIONS FOR A GIVEN POTENTIAL. POSSIBLE VALUES 1
     &001ECIS1224'/16X,
     &'TO 1008.(NOT THE ANGLES OF ASYMMETRIC ROTATIONAL MODEL) ECIS1225'
     &/4X,
     &'2001-3000   DEFORMATIONS FOR A GIVEN MULTIPOLE. POSSIBLE VALUES 2
     &001ECIS1226'/16X,
     &'TO 2000+NBET WHERE NBET IS THE TOTAL NUMBER OF PHONONS  ECIS1227'
     &/16X,'AND DEFORMATIONS AS LISTED IN THE OUTPUT.',15X,
     &'ECIS1228'/4X,
     &'3001-4000   INDIVIDUAL DEFORMATION. (THE UNIT OF THE INDEX IS THE
     &   ECIS1229'/16X,
     &'POTENTIAL, THE TENTH IS THE DEFORMATION). TO SIMPLIFY   ECIS1230'
     &/16X,
     &'NOTATIONS, POSSIBLE VALUE ARE 3001 TO 3000+10*NBET WITH ECIS1231'
     &/16X,
     &'NBET DEFINED ABOVE. VALUES 3XX9 AND 3XX0 ARE EXCLUDED.  ECIS1232'
     &/16X,
     &'NOTE THAT DEFORMATION LENGTHS ARE USED IN THE SEARCH IF ECIS1233'
     &/16X,'LO(6)=.TRUE..',43X,'ECIS1234'/4X,
     &'4001-5000   NUCLEAR MODEL PARAMETERS. (IN THE ORDER OF INPUT).',
     &6X,'ECIS1235'/4X,
     &'5001-6000   REDUCED NUCLEAR MATRIX ELEMENTS. (ORDER OF INPUT IF T
     &HEYECIS1236'/16X,
     &'ARE READ ON CARDS, OR ORDER OF COMPUTATION AS LISTED).  ECIS1237'
     &)
      WRITE (6,99010)
99010 FORMAT (4X,
     &'6001-7000   SPIN-ORBIT PARAMETRISATION, HAUSER-FESHBACH CORRECTIO
     &NS.ECIS1238'/16X,
     &'AND COMPOUND NUCLEUS PARAMETERS. POSSIBLE VALUES ARE:   ECIS1239'
     &/16X,'6001-6006 FOR SPIN-ORBIT PARAMETRISATION,',15X,
     &'ECIS1240'/16X,'6007-6011 FOR HAUSER-FESHBACH CORRECTIONS,',14X,
     &'ECIS1241'/16X,'6012-6016 FOR GIANT DIPOLE RESONANCE PARAMETERS,',
     &8X,'ECIS1242'/16X,
     &'(IN A TEST, 6015 WAS USELESS FOR LO(87)=.FALSE., 6014   ECIS1243'
     &/16X,'AND 6015 IF LO(97=.TRUE.)',31X,'ECIS1244'/16X,
     &'6017-6016+6*NCONS FOR LEVEL DENSITY PARAMETERS IN ORDER ECIS1245'
     &/16X,
     &'GIVEN BY SCN(6,NCONS), SKIPPING THE CHARGE. ONLY VALUES ECIS1246'
     &/16X,'PRINTED AS USED VALUES CAN BE CHANGED.',18X,'ECIS1247'/16X,
     &'(IN A TEST, SCN(5,I) WAS USELESS FOR GAMMA, SCN(1,I),   ECIS1248'
     &/16X,'SCN(2,I) AND SCN(6,I) FOR A CONTINUUM)',18X,'ECIS1249'/16X,
     &'6016+6*NCONS-6016+6*NCONS+NRD GAMMA TRANSMISSION COEFF. ECIS1250'
     &/16X,'6016+6*NCONS+NRD-6016+6*NCONS+NRD+2*NFISS FISSION',7X,
     &'ECIS1251'/16X,'TRANSMISSION COEFFICIENTS.',30X,'ECIS1252'/4X,
     &'7001-8000   DISPERSION PARAMETER FROM PIP(4,*) TO PIP(15,*) WITHO
     &UT ECIS1253'/16X,
     &'POSSIBILITY TO CHANGE THE DESCRIPTION INDUCED BY THE',4X,
     &'ECIS1254'/16X,'INTEGER VALUES IPP(*,1,*), IPP(*,2,*) AN ENERGY',
     &9X,'ECIS1255'/16X,
     &'REFERENCE PIP(3,*). POSSIBLE VALUES FROM 7001 TO',8X,
     &'ECIS1256'/16X,'7000+12*NPP.',44X,'ECIS1257'/'')
      WRITE (6,99015)
99015 FORMAT (3X,
     &'10001-99999  TO CONTINUE 1-1000 WHEN THERE ARE MORE THAN 1000 VAL
     &UES ECIS1258'/16X,
     &'WITH EXTERNAL FORM FACTORS. USE THE NUMBER OF THE',7X,
     &'ECIS1259'/16X,'LISTING INCREASED BY 9000.',30X,'ECIS1260'/
     &'  NOTE:  ANY NEGATIVE NUMBER -K IN THE CARD ABOVE MEANS THAT K VA
     &RIABLESECIS1261'/
     &'  ****  WILL BE KEPT PROPORTIONAL IN THE SEARCH. THIS VALUE IS RE
     &PLACED ECIS1262'/8X,
     &'BY -*ADDRESS WHERE K FOLLOWED BY K INDICES OF PARAMETERS IS',5X,
     &'ECIS1263'/8X,'STORED',58X,'ECIS1264'/72X,
     &'ECIS1265'/'LINKS BETWEEN VARIABLES',17X,'FORMAT (14I5)',19X,
     &'ECIS1266'/'***********************',49X,'ECIS1267'/4X,
     &'FOR EVERY NEGATIVE VALUE -K IN THE PRECEDING CARD:',18X,
     &'ECIS1268'/7X,'1- 5   INDEX OF THE FIRST VARIABLE.',30X,
     &'ECIS1269'/7X,'6-10   INDEX OF THE SECOND VARIABLE.',29X,
     &'ECIS1270'/6X,'11-15   INDEX OF THE THIRD VARIABLE.',30X,
     &'ECIS1271'/6X,'16-20   ..................',40X,'ECIS1272'/14X,
     &'UP TO K INDICES.',42X,'ECIS1273'/72X,'ECIS1274'/72X,
     &'ECIS1275'/'CARDS READ IN SUBROUTINE OBSE',43X,
     &'ECIS1276'/'*****************************',43X,'ECIS1277'/
     &' ONLY IF THERE IS ANY NON STANDARD OBSERVABLE (IDENTIFIED BY A NE
     &GATIVE ECIS1278'/
     &' NUMBER), OTHERWISE GO TO ''CARDS READ IN SUBROUTINE REDM''.',
     &14X,'ECIS1279'/72X,'ECIS1280'/'FOR EACH NON STANDARD OBSERVABLE',
     &40X,'ECIS1281'/'********************************',40X,
     &'ECIS1282'/72X,'ECIS1283')
      WRITE (6,99020)
99020 FORMAT ('DEFINITION AND NAME',21X,'FORMAT (2L1,I1,I2,I5,5A4)',7X,
     &        'ECIS1284'/'*******************',53X,'ECIS1285'/10X,
     &        '1   LT1  ''T'' FOR AN OBSERVABLE DEFINED WITH AN AXIS',
     &        11X,'ECIS1286'/19X,
     &   'PERPENDICULAR TO THE REACTION PLANE. THE DESCRIPTION ECIS1287'
     &   /19X,'IS CHANGED BY A ROTATION R(PI/2,PI/2,PI/2) TO THE',4X,
     &   'ECIS1288'/19X,
     &   'DEFINITION WITH RESPECT TO THE DIRECTION OF PARTICLE ECIS1289'
     &   /19X,'(HELICITY). USE A BLANK FOR THE USUAL HELICITY',7X,
     &   'ECIS1290'/19X,'DESCRIPTION.',41X,'ECIS1291'/10X,
     &'2   LT2  ''T'' IF THE OBSERVABLE IS NOT COMPLETELY DEFINED BY   E
     &CIS1292'/19X,'TENSORS. SEE NOTE BELOW ''QUANTUM NUMBERS''.',11X,
     &'ECIS1293'/10X,
     &'3   BLANK OR 0 FOR OBSERVABLE IN THE CENTER OF MASS SYSTEM.   ECI
     &S1294'/14X,'1',10X,'FOR OBSERVABLE IN THE LABORATORY SYSTEM.',7X,
     &'ECIS1295'/14X,'2',10X,
     &'FOR OBSERVABLE DEFINED WITH RESPECT TO THE',5X,'ECIS1296'/30X,
     &'INCIDENT BEAM.',28X,'ECIS1297'/7X,
     &'4- 5   KX   POSITIVE NUMBER, IDENTIFICATION OF THE OBSERVABLE',
     &4X,'ECIS1298'/19X,'READ WITH -KX.',39X,'ECIS1299'/7X,'6-10   K',
     &4X,'NUMBER OF COMPONENTS OF THE DESCRIPTION.',13X,'ECIS1300'/6X,
     &'11-30   NAME OF THE OBSERVABLE WHICH WILL BE USED IN THE OUTPUT.
     & ECIS1301'/72X,'ECIS1302'/'QUANTUM NUMBERS',25X,'FORMAT (8I5)',
     &20X,'ECIS1303'/'***************',57X,'ECIS1304'/7X,
     &'1- 5   TENSOR ORDER OF THE INCOMING PARTICLE.',20X,'ECIS1305')
      WRITE (6,99025)
99025 FORMAT (7X,'6-10   RELATED MAGNETIC QUANTUM NUMBER.',26X,
     &        'ECIS1306'/6X,
     &        '11-15   TENSOR ORDER OF THE INITIAL NUCLEUS.',22X,
     &        'ECIS1307'/6X,'16-20   RELATED MAGNETIC QUANTUM NUMBER.',
     &        26X,'ECIS1308'/6X,
     &        '21-25   TENSOR ORDER OF THE OUTGOING PARTICLE.',20X,
     &        'ECIS1309'/6X,'26-30   RELATED QUANTUM NUMBER.',35X,
     &        'ECIS1310'/6X,'31-35   TENSOR ORDER OF THE FINAL NUCLEUS.'
     &        ,24X,'ECIS1311'/6X,'36-40   RELATED QUANTUM NUMBER.',35X,
     &        'ECIS1312'/4X,'THERE ARE K SUCH CARDS.',45X,'ECIS1313'/
     &'  NOTE:  IF LT2=.TRUE., SOME COUPLES (TENSOR ORDER, MAGNETIC QUAN
     &TUM',4X,'ECIS1314'/
     &'  ****  NUMBER) CAN BE REPLACED BY NON TENSOR NOTATION (MI, MF).
     &IN THISECIS1315'/8X,
     &'CASE, USE (MI-S-1) AND (MF-S-1) WHERE S IS THE SPIN OF PARTICLE E
     &CIS1316'/8X,'OR TARGET.',54X,'ECIS1317'/72X,
     &'ECIS1318'/''/'COEFFICIENTS OF COMPONENTS',14X,'FORMAT (6F10.5)',
     &17X,'ECIS1319'/'**************************',46X,'ECIS1320'/7X,
     &'1-10   COEFFICIENT OF THE FIRST COMPONENT.',23X,'ECIS1321'/6X,
     &'11-20   COEFFICIENT OF THE SECOND COMPONENT.',22X,'ECIS1322'/6X,
     &'21-30   ...................',39X,'ECIS1323'/14X,
     &'UP TO K VALUES.',43X,'ECIS1324'/72X,
     &'ECIS1325'/'IMAGINARY PART OF COEFFICIENTS',10X,'FORMAT (6F10.5)',
     &17X,'ECIS1326'/'******************************',42X,'ECIS1327'/
     &' ONLY IF LT1=.TRUE. OR LT2=.TRUE., OTHERWISE GO TO NEXT OBSERVABL
     &E.',5X,'ECIS1328'/7X,
     &'1-10   IMAGINARY PART FOR THE FIRST COMPONENT.',19X,'ECIS1329')
      WRITE (6,99030)
99030 FORMAT (6X,'11-20   IMAGINARY PART FOR THE SECOND COMPONENT.',18X,
     &        'ECIS1330'/6X,'21-30   ....................',38X,
     &        'ECIS1331'/14X,'UP TO K VALUES.',43X,'ECIS1332'/
     &'  NOTE:  THE QUANTUM NUMBERS ARE CHECKED AND ERRORS CAN STOP THE'
     &,8X,'ECIS1333'/
     &'  ****  PROGRAM (TOO LARGE MAGNETIC QUANTUM NUMBERS, NEGATIVE TEN
     &SOR',4X,'ECIS1334'/8X,
     &'ORDER, ODD SUM OF MAGNETIC QUANTUM NUMBERS FOR OBSERVABLE',7X,
     &'ECIS1335'/8X,
     &'DEFINED WITH THE AXIS PERPENDICULAR TO THE REACTION PLANE).',5X,
     &'ECIS1336'/9X,'THE OBSERVABLES CAN BE READ IN ANY ORDER.',22X,
     &'ECIS1337'/9X,
     &'POLARISATION OF THE TARGET IS DESCRIBED IN THE SYSTEM OF THE   EC
     &IS1338'/8X,'PARTICLE.',55X,'ECIS1339'/72X,'ECIS1340'/72X,
     &'ECIS1341'/'CARDS READ IN SUBROUTINE REDM',43X,
     &'ECIS1342'/'******************************',42X,'ECIS1343'/6X,
     &'IF LO(7)=.TRUE. OR LO(15)=.TRUE.. OTHERWISE GO TO ''CARDS READ IN
     &  ECIS1344'/3X,'SUBROUTINE EVAL''.',52X,'ECIS1345'/72X,
     &'ECIS1346'/6X,
     &'IN THE SUBROUTINE REDM, THERE IS THE FOLLOWING DO LOOP:',11X,
     &'ECIS1347'/10X,'DO 16 I1=1,NCOLL',46X,'ECIS1348'/10X,
     &'DO 15 I2=I1,NCOLL',45X,'ECIS1349'/10X,'.........',53X,
     &'ECIS1350'/7X,'15 CONTINUE',54X,'ECIS1351'/7X,'16 CONTINUE',54X,
     &'ECIS1352'/6X,'INSIDE WHICH MUST BE READ:',40X,'ECIS1353'/72X,
     &'ECIS1354'/'LOOP CONTROL AND NUMBER CARD',12X,'FORMAT (3I5)',20X,
     &'ECIS1355'/'****************************',44X,'ECIS1356')
      WRITE (6,99035)
99035 FORMAT (7X,
     &'1- 5   J1 WHICH MUST BE EQUAL TO I1. (IF NOT THE RUN IS STOPPED).
     &ECIS1357'/7X,
     &'6-10   J2 WHICH MUST BE EQUAL TO I2. (IF NOT THE RUN IS STOPPED).
     &ECIS1358'/6X,
     &'11-15   K  NUMBER OF REDUCED NUCLEAR MATRIX ELEMENTS.',13X,
     &'ECIS1359'/72X,'ECIS1360'/'REDUCED NUCLEAR MATRIX ELEMENTS',9X,
     &'FORMAT (4I5,F20.12)',13X,
     &'ECIS1361'/'*******************************',41X,
     &'ECIS1362'/'IF K IS NOT 0:',58X,'ECIS1363'/7X,
     &'1- 5   FORM FACTOR IDENTIFICATION.',31X,'ECIS1364'/7X,
     &'6-10   MULTIPOLARITY. (IF TRIANGULAR RELATION  OR PARITY IS',6X,
     &'ECIS1365'/18X,'TRANSGRESSED THE RUN IS STOPPED). ENTER L FOR A',
     &7X,'ECIS1366'/18X,'MAGNETIC MULTIPOLE TRANSITION BM(L-1).',16X,
     &'ECIS1367'/6X,
     &'11-15   2*S WHERE S IS THE TRANSFER OF SPIN. S CAN BE NOT 0 EVEN
     & ECIS1368'/18X,
     &'IF LO(7)=.FALSE. (IF LO(7)=.TRUE. THE RUN IS STOPPED  ECIS1369'/
     &18X,'WHEN TRIANGULAR RELATION IS NOT FULFILLED).',11X,
     &'ECIS1370'/14X,
     &'INDICATION FOR EXISTENCE OF MAGNETIC MULTIPOLE COULOMB',4X,
     &'ECIS1371'/18X,
     &'FORM FACTOR FOR THE TARGET, WITH S=0: ENTER ''-1''.',5X,
     &'ECIS1372'/18X,'THIS FORM FACTOR INCLUDES NO CENTRAL AND NO',11X,
     &'ECIS1373'/18X,'SPIN-ORBIT CONTRIBUTION.',30X,'ECIS1374'/6X,
     &'16-20   2*J WHERE J IS THE TRANSFER OF TOTAL SPIN IF THE VALUE',
     &4X,'ECIS1375'/18X,
     &'GIVEN FOR 2*S IS NOT ''0'' OR ''-1''. IN THIS CASE THE',4X,
     &'ECIS1376'/18X,
     &'CALCULATION IS STOPPED IF THERE IS NOT A TRIANGULAR   ECIS1377')
      WRITE (6,99040)
99040 FORMAT (18X,'RELATION BETWEEN L, S AND J.',26X,'ECIS1378'/''/14X,
     &'INDICATION FOR EXISTENCE OF AN ASSOCIATED SPIN-ORBIT FORM ECIS137
     &9'/18X,'FACTOR WHEN 2*S IS ''0'': ENTER ''1'' IF THERE IS ONE,',
     &4X,'ECIS1380'/18X,'''0'' OR A BLANK IF THERE IS NONE.',22X,
     &'ECIS1381'/6X,
     &'21-40   VALUE. THE RATIO BETWEEN A MAGNETIC MULTIPOLE COULOMB',
     &5X,'ECIS1382'/18X,
     &'EXCITATION BM(L-1) AND AN ELECTRIC ONE BE(L) IS',7X,
     &'ECIS1383'/18X,
     &'SQRT(BM(L-1)/BE(L)) (SQRT(.01106*BM(L-1)/BE(L)) IF',4X,
     &'ECIS1384'/18X,
     &'BM(L-1) IS EXPRESSED IN NUCLEAR MAGNETONS SQUARES.',4X,
     &'ECIS1385'/8X,'THERE ARE K SUCH CARDS.',41X,'ECIS1386'/72X,
     &'ECIS1387'/4X,'FORM FACTOR IDENTIFICATION',42X,'ECIS1388'/4X,
     &'**************************',42X,'ECIS1389'/6X,
     &'FOR ANHARMONIC VIBRATIONAL MODEL: THE ORDER OF DERIVATIVE.',8X,
     &'ECIS1390'/13X,'(FROM 0 TO 3).',45X,'ECIS1391'/6X,
     &'FOR HARMONIC VIBRATIONAL MODEL:',35X,'ECIS1392'/13X,
     &'FIRST ORDER:  K1, NUMBER OF THE PHONON IS ORDER OF INPUT.  ECIS13
     &93'/13X,'SECOND ORDER: K1+K2*(NBT1+1)  WHERE K1 AND K2 ARE THE',
     &6X,'ECIS1394'/17X,
     &'NUMBER OF THE PHONONS IN THE ORDER OF INPUT, WITH K2   ECIS1395'/
     &17X,
     &'LARGER THAN K1 AND NBT1 THE TOTAL NUMBER OF PHONONS.   ECIS1396'/
     &72X,'ECIS1397'/6X,
     &'FOR SYMMETRIC ROTATIONAL MODEL: 1+L WHERE L IS THE MULTIPOLARITY
     & ECIS1398'/13X,'MULTIPLIED BY 1000 PLUS THE IDENTIFICATION OF THE'
     &,10X,'ECIS1399')
      WRITE (6,99045)
99045 FORMAT (13X,'VIBRATIONAL BAND AS IN HARMONIC VIBRATIONAL MODEL.',
     &        9X,'ECIS1400'/13X,
     &'A L=0 OR L=1 VIBRATION TERM GENERATE A MONOPOLE OR DIPOLE  ECIS14
     &01'/13X,'CORRECTION TERM.',43X,'ECIS1402'/6X,
     &'FOR ASYMMETRIC ROTATIONAL MODEL: DEFINED AS 1000* THE ''ORDER OF
     &  ECIS1403'/13X,
     &'DEFORMATION''. (SEE ''DEFORMATIONS OF ROTATIONAL MODELS'').   ECI
     &S1404'/72X,'ECIS1405'/6X,
     &'FOR EXTERNAL FORM FACTOR MODEL: IF THE FORM FACTOR IDENTIFICATION
     & ECIS1406'/13X,
     &'IS BLANK OR ZERO, AN IDENTIFICATION IS DEFINED IN SEQUENCE ECIS14
     &07'/13X,
     &'A NEGATIVE VALUE INDICATES THAT THERE IS A CORRECTION TERM ECIS14
     &08'/13X,
     &'TO BE ADDED IN SUCH A WAY THAT THE INTEGRAL OF THE SUM WITHECIS14
     &09'/13X,
     &'R**(L+2) VANISHES (L BEING THE ANGULAR MOMENTUM RELATED TO ECIS14
     &10'/13X,
     &'THIS FORM FACTOR). IF THE FORM FACTOR IDENTIFICATION IS NONECIS14
     &11'/13X,
     &'ZERO, ITS ABSOLUTE VALUE MUST BE IN SEQUENCE OR REFER TO A ECIS14
     &12'/13X,'FORM FACTOR ALREADY DEFINED WITH THE SAME SIGN.',12X,
     &'ECIS1413'/72X,'ECIS1414'/
     &'  NOTE ON REDUCED MATRIX ELEMENTS:  THE SPIN ANGULAR DESCRIPTION
     &FOR A  ECIS1415'/
     &'  ********************************  PARTIAL WAVE WITH TOTAL SPIN
     &JJ AND ECIS1416'/
     &'  WITH QUANTUM NUMBERS L1 AND J1 FOR THE PARTICLE, I1 FOR THE TAR
     &GET IS ECIS1417'/
     &'  ((I**L1*Y(L1) , S1)J1 ,I1)JJ. THE INTERACTION FOR THE TRANSFER
     &OF',5X,'ECIS1418')
      WRITE (6,99050)
99050 FORMAT (
     &'  ANGULAR MOMENTUM L, OF SPIN S AND OF TOTAL SPIN J, IS THE SCALA
     &R',6X,'ECIS1419'/
     &'  PRODUCT OF A TENSOR OPERATOR Q(J)NUCLEAR FOR THE TARGET BY THE
     &TENSOR ECIS1420'/
     &'  PRODUCT OF (I**L*Y(L) , Q(S)PAR)J FOR THE PARTICLE.',19X,
     &'ECIS1421'/4X,
     &'(((L2,S2)J2,I2)JJ|(Q(L),Q(S))J.Q(J)|((L1,S1)J1,I1)JJ) =',13X,
     &'ECIS1422'/
     &'  (-)**(JJ+I2+J1+(L1+L2+L)/2)) * C9J(L2,L1,L,S2,S1,S,J2,J1,J) *',
     &9X,'ECIS1423'/
     &'  C6J(J2,J,J1,I1,JJ,I2) * C3J(L1,L,L2,0,0,0) * SQRT((2J+1)*(2L+1)
     &*',6X,'ECIS1424'/
     &'  (2S+1)(2L1+1)*(2L2+1)*(2J1+1)*(2J2+1)) /COMPUTED IN SUBROUTINE
     &QUAN/  ECIS1425'/
     &'  * (S2||Q(S)||S1)/(2S+1) * (I2||Q(J)||I1) * (4*PI)**(-1/2) /WHIC
     &H IS   ECIS1426'/
     &'  THE REDUCED NUCLEAR MATRIX ELEMENT READ HERE, EXCEPT FOR THE SQ
     &UARE   ECIS1427'/'  ROOT WHICH IS INCLUDED IN FORM FACTORS/.',30X,
     &'ECIS1428'/72X,'ECIS1429'/4X,
     &'THIS MATRIX ELEMENT IS REAL AND SYMMETRIC WHEN THE ''REDUCED NUCL
     &EAR ECIS1430'/
     &'  MATRIX ELEMENT'' IS SUCH THAT  (S2,I2 || Q(S) Q(J) ||S1,I1) =',
     &10X,'ECIS1431'/
     &'  (-)**(I2+S2-I1-S1+S+J) * (S1,I1 || Q(S) Q(J) ||S2,I2). IN MACRO
     &SCOPIC ECIS1432'/
     &'  MODELS, S=0 AND THE PHASE BECOMES (-)**(I2-I1)*(PRODUCT OF PARI
     &TIES). ECIS1433'/4X,
     &'A FACTOR I**(-L) MUST BE TAKEN INTO ACCOUNT IN THE DEFINITION OF'
     &,4X,'ECIS1434'/
     &'  Q(J)NUCLEAR AND A PHASE I INTRODUCED FOR NEGATIVE PARITY STATES
     &.',6X,'ECIS1435')
      WRITE (6,99055)
99055 FORMAT (4X,
     &'WHEN S=0, (S2|| ||S1) = SQRT(2*S1+1) IS COMPUTED IN SUBROUTINE QU
     &AN ECIS1436'/4X,
     &'THE FACTOR (2S+1) INTRODUCED IN QUAN TO USE THE SAME REDUCED MATR
     &IX ECIS1437'/'  ELEMENT WHEN TARGET AND PARTICLE ARE EXCHANGED.',
     &23X,'ECIS1438'/''/4X,
     &'FOR A MAGNETIC MULTIPOLE COULOMB TRANSITION BM(L-1), THE FORM FAC
     &TORECIS1439'/
     &'  IS THE ONE OF AN ELECTRIC MULTIPOLE TRANSITION BE(L) DIVIDED BY
     &',7X,'ECIS1440'/
     &'  MR(M*C/HBAR)**2, WHERE M AND MR AND MP ARE ATOMIC AND REDUCED M
     &ASSES  ECIS1441'/'  RESPECTIVELY.',57X,'ECIS1442'/72X,
     &'ECIS1443'/72X,'ECIS1444'/'CARDS READ IN SUBROUTINE EXTP',43X,
     &'ECIS1445'/'*****************************',43X,'ECIS1446'/
     &'  IF (LO(7)=.TRUE., OTHERWISE GO TO ''CARDS READ IN SUBROUTINE EV
     &AL''.',4X,'ECIS1447'/72X,'ECIS1448'/'IDENTIFICATION',26X,
     &'FORMAT (12I5)',19X,'ECIS1449'/'**************',58X,'ECIS1450'/7X,
     &'1- 5   L1',4X,'LEVEL I.',44X,'ECIS1451'/7X,'6-10   L2',4X,
     &'LEVEL IP.',43X,'ECIS1452'/6X,'11-15   ML',4X,
     &'SEQUENCE NUMBER OF THE FORM FACTOR IN THE TABLE OF  ECIS1453'/20X
     &,'REDUCED NUCLEAR MATRIX ELEMENTS BETWEEN LEVEL I AND ECIS1454'/20
     &X,'LEVEL IP. IT MUST BE 0 FOR POTENTIALS. USE THE',6X,
     &'ECIS1455'/20X,
     &'VALUE -ML TO ENTER THE CORRECTION TERM TO THE FORM  ECIS1456'/20X
     &,'FACTOR READ WITH ML.',32X,'ECIS1457'/6X,
     &'16-20   ITYP =  1 REAL VOLUME OR SCALAR POTENTIAL',17X,
     &'ECIS1458'/22X,'2 IMAGINARY VOLUME OR SCALAR POTENTIAL',12X,
     &'ECIS1459')
      WRITE (6,99060)
99060 FORMAT (22X,'3 REAL SURFACE OR VECTOR POTENTIAL',16X,
     &        'ECIS1460'/22X,'4 IMAGINARY SURFACE OR VECTOR POTENTIAL',
     &        11X,'ECIS1461'/22X,
     &        '5 REAL SPIN-ORBIT OR TENSOR POTENTIAL',13X,
     &        'ECIS1462'/22X,
     &        '6 IMAGINARY SPIN-ORBIT OR TENSOR POTENTIAL',8X,
     &        'ECIS1463'/22X,'7 COULOMB POTENTIAL',31X,'ECIS1464'/22X,
     &        '8 COULOMB SPIN-ORBIT POTENTIAL',20X,'ECIS1465'/6X,
     &'21-25   L1X   NON POSITIVE OR L1 OF THE FORM FACTOR TO BE COPIED
     & ECIS1466'/20X,'INTO THE NEW ONE.',35X,'ECIS1467'/6X,
     &'26-30   L2X   L2 OF THE FORM FACTOR TO BE COPIED IF L1X IS NOT',
     &4X,'ECIS1468'/20X,'POSITIVE.',43X,'ECIS1469'/6X,
     &'31-35   MLX   SAME FOR ML IF L1X IS NOT POSITIVE.',17X,
     &'ECIS1470'/6X,
     &'36-40   ITYPX SAME FOR ITYP IF L1X IS NOT POSITIVE, MUST BE EQUAL
     & ECIS1471'/20X,'TO ITYP.',44X,'ECIS1472'/20X,
     &'NEGATIVE NUMBER FOR STANDARD FORM FACTORS WITH NON  ECIS1473'/20X
     &,'POSITIVE VALUE OF L1X IN COLUMNS 21-30:',13X,'ECIS1474'/24X,
     &'-1  WOODS-SAXON POTENTIAL.',22X,'ECIS1475'/24X,
     &'-2  FIRST DERIVATIVE OF WOODS-SAXON POTENTIAL.  ECIS1476'/24X,
     &'-3  SECOND DERIVATIVE OF WOODS-SAXON POTENTIAL. ECIS1477'/24X,
     &'-4  THIRD DERIVATIVE OF WOODS-SAXON POTENTIAL.  ECIS1478'/12X,
     &'(THE N TH DERIVATIVE IS ALWAYS DIVIDED BY FACT(N)*SQRT(4*PI)ECIS1
     &479'/17X,'AND MULTIPLIED BY R**N ONLY IF LO(6)=.FALSE.)',10X,
     &'ECIS1480'/24X,'-5  DEFORMED WOODS-SAXON POTENTIAL.',13X,
     &'ECIS1481'/24X,
     &'-6  DERIVATIVE OF DEFORMED WOODS-SAXON POTENTIALECIS1482')
      WRITE (6,99065)
99065 FORMAT (24X,'-7  LAGUERRE POLYNOMIAL.',24X,'ECIS1483'/24X,
     &        '-8  SOLUTION IN REAL WOODS-SAXON POTENTIAL.',5X,
     &        'ECIS1484'/24X,'-9  BESSEL EXPANSION.',27X,'ECIS1485'/24X,
     &        '-10 EXPANSION WITH LAGUERRE POLYNOMIALS.',8X,
     &        'ECIS1486'/20X,
     &  '(SEE BELOW ''SPECIAL MEANING OF L1X, L2X AND MLX ..'')ECIS1487'
     &  /6X,
     &  '41-45   NST   CHANNEL OF WHICH THE STEP SIZE IS USED (DEFAULT',
     &  5X,'ECIS1488'/20X,
     &  'VALUE: THE CHANNEL WHICH USES IT FOR A CENTRAL',6X,
     &  'ECIS1489'/20X,
     &  'POTENTIAL, 1 FOR A TRANSITION POTENTIAL). IF NST IS ECIS1490'/
     &  20X,
     &  'NEGATIVE FOR A STANDARD FORM FACTOR WITH ITYPX=-1 TOECIS1491'/
     &  20X,'ITYPX=-6, USE OF A REDUCED RADIUS, TAKING INTO',6X,
     &  'ECIS1492'/20X,'ACCOUNT LO(16) (HEAVY-ION DEFINITION) AND LO(6)'
     &  ,5X,'ECIS1493'/20X,'(USE OF DEFORMATION LENGTHS).',23X,
     &  'ECIS1494'/6X,
     &'46-50   NFOLD 0 FOR NO FOLDING OR ADDRESS OF FOLDING PARAMETERS
     & ECIS1495'/20X,
     &'IN THEIR LIST READ BELOW. NFOLD CAN BE DIFFERENT FORECIS1496'/''
     &/20X,
     &'A COPIED FORM FACTOR AND ALLOWS THE FOLDING WITH A  ECIS1497'/20X
     &,'DIFFERENT MULTIPOLARITY. IT CAN BE USED WITH A',6X,
     &'ECIS1498'/20X,'FORM FACTOR GIVEN BY POINTS.',24X,'ECIS1499'/6X,
     &'51-55   NINT  IF NOT 0, THE STRENGTH IS THE INTEGRAL OF THIS FORM
     & ECIS1500'/20X,
     &'FACTOR WITH R**(L+2) WHERE L IS THE RELEVANT ANGULARECIS1501'/20X
     &,'MOMENTUM. WHEN NINT, IS A POSITIVE NUMBER, THE',6X,
     &'ECIS1502'/20X,'INTEGRAL WITH R**(L+1) HAS TO BE GIVEN; WITH A',
     &6X,'ECIS1503')
      WRITE (6,99070)
99070 FORMAT (20X,
     &    'NEGATIVE INTEGER, THE USUAL STRENGTH HAS TO BE GIVENECIS1504'
     &    /20X,'AND IS REPLACED BY THIS INTEGRAL AT ITS FIRST',7X,
     &    'ECIS1505'/20X,
     &    'CALCULATION. FOR SPIN-ORBIT POTENTIALS, IT IS THE   ECIS1506'
     &    /20X,
     &    'INTEGRAL OF THE FORM FACTOR WITHOUT DERIVATION. THISECIS1507'
     &    /20X,'STRENGTH IS OF THE SAME SIGN AS THE DEPTH OF THE',4X,
     &    'ECIS1508'/20X,
     &    'STANDARD DESCRIPTION. FOR COULOMB POTENTIALS, THIS  ECIS1509'
     &    /20X,'STRENGTH IS THE LAST VALUE MULTIPLIED BY',12X,
     &    'ECIS1510'/20X,
     &    '(2*L+1)*R**(L+1)/1.43998 . IF NST IS NEGATIVE FOR A ECIS1511'
     &    /20X,
     &    'FORM FACTOR COPIED, INPUT OF A MULTIPLICATION FACTORECIS1512'
     &    /20X,'IN NEXT CARD.',39X,'ECIS1513'/72X,'ECIS1514'/
     &'MEANING OF L1X, L2X AND MLX FOR NEGATIVE VALUES OF ITYPX (COLUMNS
     & 36-40)ECIS1515'/
     &'*****************************************************************
     &*******ECIS1516'/6X,
     &'21-25   L1X   -L1X IS THE MAGNETIC QUANTUM NUMBER OF THE VIBRATIO
     &NECIS1517'/20X,'WHEN ITYPX=-6.',38X,'ECIS1518'/20X,
     &'-L1X IS THE NUMBER OF NODES WHEN ITYPX=-7 OR -8',5X,
     &'ECIS1519'/20X,'(USED ONLY WHEN MLX=0 OR MLX=1).',20X,
     &'ECIS1520'/20X,
     &'-L1X IS THE ORDER OF DERIVATION OF BESSEL FUNCTIONS ECIS1521'/20X
     &,'OR LAGUERRE POLYNOMIALS WHEN ITYPX=-9 OR -10.',7X,'ECIS1522'/6X,
     &'26-30   L2X   NUMBER OF DEFORMATIONS WHEN ITYPX=-5 OR -6.',9X,
     &'ECIS1523'/20X,
     &'A DIVISION FACTOR FOR THE STEPS IN COMPUTING BOUND  ECIS1524')
      WRITE (6,99075)
99075 FORMAT (20X,'FUNCTION (DEFAULT VALUE 4) WHEN ITYPX=-8.',11X,
     &        'ECIS1525'/20X,
     &    'NUMBER OF BESSEL FUNCTIONS OR LAGUERRE POLYNOMIALS  ECIS1526'
     &    /20X,'WHEN ITYPX=-9 OR -10.',31X,'ECIS1527'/6X,
     &  '31-35   MLX   ANGULAR MOMENTUM OF THE VIBRATION WHEN ITYPX=-6.'
     &  ,4X,'ECIS1528'/20X,
     &  'NUMBER OF BOUND FUNCTIONS WHEN ITYPX=-7 OR -8:',6X,
     &  'ECIS1529'/20X,
     &  '=0 OR 1 FOR ONE FUNCTION WITH THE QUANTUM NUMBERS OFECIS1530'/
     &  31X,'THE TRANSITION,',26X,'ECIS1531'/20X,
     &  '=2 FOR TWO FUNCTIONS WITH THE SAME ITYPX,',11X,'ECIS1532'/20X,
     &  '=3 WHEN ITYPX=-8 FOR A LAGUERRE POLYNOMIAL FOR THE  ECIS1533'/
     &  31X,'SECOND FUNCTION.',25X,'ECIS1534'/20X,
     &  'L-VALUE OF BESSEL FUNCTIONS OR LAGUERRE POLYNOMIALS ECIS1535'/
     &  20X,'WHEN ITYPX=-9 OR -10 (DEFAULT OPTION: ANGULAR',7X,
     &  'ECIS1536'/20X,
     &  'MOMENTUM OF THE FORM FACTOR, ENTER A NEGATIVE VALUE ECIS1537'/
     &  20X,'TO USE 0).',42X,
     &  'ECIS1538'/'  ERRORS IN THIS CARD STOP THE PROGRAM.',33X,
     &  'ECIS1539'/72X,'ECIS1540'/
     &'  NOTE:  IF THERE IS NO SPIN FOR THE PARTICLE IN ALL THE CHANNELS
     &, THE  ECIS1541'/
     &'  ****  SPIN-ORBIT POTENTIALS (ITYP = 5 , 6 AND 8) ARE NOT READ,
     &BUT',4X,'ECIS1542'/8X,
     &'THEY ARE REQUIRED AS SOON AS THERE IS AT LEAST A NON SPIN-0',5X,
     &'ECIS1543'/8X,
     &'PARTICLE AT LEAST FOR ONE LEVEL. FOR THE TRANSITIONS WITH A',5X,
     &'ECIS1544'/8X,
     &'TRANSFER OF SPIN S WHICH IS NOT ZERO THERE ARE NO SPIN-ORBIT',4X,
     &'ECIS1545')
      WRITE (6,99080)
99080 FORMAT (8X,
     &      'POTENTIALS (NO TENSOR TERM IN DIRAC FORMALISM). THERE IS A'
     &      ,6X,'ECIS1546'/8X,
     &      'COULOMB POTENTIAL FOR INTEGRAL SPIN TRANSFER EVEN FOR L=0.'
     &      ,6X,'ECIS1547'/9X,
     &'VOLUME AND SURFACE POTENTIALS ARE READ SEPARATELY EXCEPT FOR   EC
     &IS1548'/8X,
     &'ITYPX=-7 AND -8. IN THE DIRAC FORMALISM ITYPX=-7 AND ITYPX=-8   E
     &CIS1549'/8X,
     &'CANNOT BE USED. FOR MAGNETIC COULOMB INTERACTION, ONLY THE',6X,
     &'ECIS1550'/8X,
     &'COULOMB POTENTIAL IS READ. THE FORM FACTORS WITH ITYPX=-5 TO -9 E
     &CIS1551'/8X,
     &'CAN BE COPIED ONLY IF THEY INVOLVE THE SAME MULTIPOLARITY. THEREE
     &CIS1552'/8X,
     &'IS NO LIMITATION FOR ITYPX=-7 AND -8 IF THEY INVOLVE TWO BOUND  E
     &CIS1553'/8X,
     &'FUNCTIONS. THE COPIED FORM FACTORS CAN BE FOLDED DIFFERENTLY.   E
     &CIS1554'/72X,
     &'ECIS1555'/''/' ALLOWED VALUES OF ITYPX FOR STANDARD POTENTIALS',
     &24X,'ECIS1556'/' ***********************************************',
     &24X,'ECIS1557'/' *** ML = 0 ******',54X,'ECIS1558'/' ITYPX =',4X,
     &'-1',4X,'-2',4X,'-3',4X,'-4',4X,'-5',4X,'-6',4X,'-7',4X,
     &'-8  -9,-10',8X,'ECIS1559'/' ITYP = 1   YES   NO',4X,'NO',4X,'NO',
     &4X,'YES   NO',4X,'NO',4X,'NO   YES',10X,
     &'ECIS1560'/' ITYP = 2   YES   NO',4X,'NO',4X,'NO',4X,'YES   NO',
     &4X,'NO',4X,'NO   YES',10X,'ECIS1561'/' ITYP = 3   YES   NO',4X,
     &'NO',4X,'NO',4X,'YES   NO',4X,'NO',4X,'NO   YES',10X,
     &'ECIS1562'/' ITYP = 4   YES   NO',4X,'NO',4X,'NO',4X,'YES   NO',
     &4X,'NO',4X,'NO   YES',10X,'ECIS1563')
      WRITE (6,99085)
99085 FORMAT (' ITYP = 5   YES   NO',4X,'NO',4X,'NO',4X,'YES   NO',4X,
     &        'NO',4X,'NO   YES',10X,'ECIS1564'/' ITYP = 6   YES   NO',
     &        4X,'NO',4X,'NO',4X,'YES   NO',4X,'NO',4X,'NO   YES',10X,
     &        'ECIS1565'/' ITYP = 7   YES   NO',4X,'NO',4X,'NO',4X,
     &        'YES   NO',4X,'NO',4X,'NO   YES',10X,
     &        'ECIS1566'/' ITYP = 8   YES   NO',4X,'NO',4X,'NO',4X,
     &        'YES   NO',4X,'NO',4X,'NO   YES',10X,
     &        'ECIS1567'/' **** ML IS NOT 0 ****',50X,
     &        'ECIS1568'/' ITYPX =',4X,'-1',4X,'-2',4X,'-3',4X,'-4',4X,
     &        '-5',4X,'-6',4X,'-7',4X,'-8  -9,-10',8X,'ECIS1569'/
     &  ' ITYP = 1   YES   YES   YES   YES   YES   YES   YES   YES  YES'
     &  ,10X,'ECIS1570'/
     &  ' ITYP = 2   YES   YES   YES   YES   YES   YES   YES   YES  YES'
     &  ,10X,
     &  'ECIS1571'/' ITYP = 3   YES   YES   YES   YES   YES   YES   NO',
     &  4X,'NO   YES',10X,
     &  'ECIS1572'/' ITYP = 4   YES   YES   YES   YES   YES   YES   NO',
     &  4X,'NO   YES',10X,
     &  'ECIS1573'/' ITYP = 5   YES   YES   YES   YES   YES   YES   NO',
     &  4X,'NO   YES',10X,
     &  'ECIS1574'/' ITYP = 6   YES   YES   YES   YES   YES   YES   NO',
     &  4X,'NO   YES',10X,'ECIS1575'/' ITYP = 7   NO',4X,
     &  'YES   YES   YES   YES   YES   NO',4X,'NO   YES',10X,
     &  'ECIS1576'/' ITYP = 8   NO',4X,
     &  'YES   YES   YES   YES   YES   NO',4X,'NO   YES',10X,
     &  'ECIS1577'/72X,'ECIS1578'/' NUMBER OF PARAMETERS TO STORE:',41X,
     &  'ECIS1579'/12X,'10',4X,'10',4X,'10',4X,'10  11+L2X 13+L2X 11',
     &  4X,'22   13+L2X',7X,'ECIS1580'/
     &  ' THERE IS ONE MORE FOR COULOMB POTENTIALS AND ITYPX=-1 TO -6.',
     &  11X,'ECIS1581')
      WRITE (6,99090)
99090 FORMAT (' THERE ARE 5 MORE PARAMETERS FOR ITYPX=-7 AND MLX=2.',
     &        20X,'ECIS1582'/
     &' THERE ARE 16 OR 6 MORE PARAMETERS FOR ITYPX=-8 AND MLX=2 OR MLX=
     &3.',5X,'ECIS1583'/72X,'ECIS1584'/'STRENGTH AND SCALING FACTOR',
     &13X,'FORMAT (7F10.5)',17X,
     &'ECIS1585'/'***************************',45X,'ECIS1586'/
     &'  IF ITYPX IS NEGATIVE GO TO ''PARAMETERS OF STANDARD FORM FACTOR
     &S''.',5X,'ECIS1587'/
     &'  THEN IF L1X IS POSITIVE GO BACK TO ''IDENTIFICATION'' CARD.',
     &13X,'ECIS1588'/10X,
     &'1   .TRUE. TO ALLOW EXTRAPOLATION BEYOND THE LAST POINT. IF ITECI
     &S1589'/14X,'IS .FALSE., VALUES BEYOND THE LAST POINT WILL BE 0.',
     &7X,'ECIS1590'/7X,
     &'2-10   MULTIPLICATIVE FACTOR FOR THE STRENGTH (DEFAULT VALUE 1.).
     &ECIS1591'/6X,
     &'11-20   MULTIPLICATIVE FACTOR FOR THE STEP SIZE (DEFAULT VALUE 1.
     &)ECIS1592'/72X,'ECIS1593'/'NUMERICAL VALUES OF THE POTENTIALS',6X,
     &'FORMAT (2(F10.5,F20.10),A4)',5X,
     &'ECIS1594'/'**********************************',38X,'ECIS1595'/7X,
     &'1-10   REXT  RADIUS.',45X,'ECIS1596'/6X,
     &'11-30   FEXT  VALUE AT REXT.',38X,'ECIS1597'/6X,
     &'31-40   REXT  RADIUS.',45X,'ECIS1598'/6X,
     &'41-60   FEXT  VALUE AT REXT.',38X,'ECIS1599'/6X,
     &'61-64   LAST  CONTROL WORD WHICH MUST BE ''LAST'' FOR THE LAST PO
     &INTECIS1600'/7X,
     &'IF THIS CONTROL WORD IS NOT ''LAST'' GO TO NEXT SUCH CARD.',9X,
     &'ECIS1601'/
     &'  NOTE:  THE GIVEN RADII MUST BE IN INCREASING ORDER AND THEIR NU
     &MBER   ECIS1602')
      WRITE (6,99095)
99095 FORMAT (
     &'  ***** EVEN. MANY POINTS ARE NEEDED FOR COULOMB POTENTIAL FOR WH
     &ICH THEECIS1603'/8X,
     &'EXTRAPOLATION DOES NOT WORK WELL. IF ITS DEPTH IS GIVEN BY THE  E
     &CIS1604'/8X,
     &'INTEGRAL, (NINT NOT 0), THESE VALUES DESCRIBE THE CHARGE',8X,
     &'ECIS1605'/8X,'DISTRIBUTION.',51X,'ECIS1606'/9X,
     &'THE SIGN OF THE POTENTIALS IS THE ONE OF THEIR DEPTH WHEN',6X,
     &'ECIS1607'/8X,
     &'WOODS-SAXON FORM FACTORS ARE USED FOR SCHROEDINGER EQUATIONS ANDE
     &CIS1608'/8X,'FOR DIRAC EQUATION.',45X,'ECIS1609'/9X,
     &'THE SPIN-ORBIT ''CENTRAL'' HAVE TO BE GIVEN AS 1/R D/DR(V(R))',
     &4X,'ECIS1610'/8X,
     &'EXCEPT IF ITS STRENGTH IS DEFINED BY ITS INTEGRAL OR IS FOLDED. E
     &CIS1611'/9X,
     &'THE SPIN-ORBIT TRANSITION POTENTIALS HAVE TO BE GIVEN AS V(R), EC
     &IS1612'/8X,
     &'FROM WHICH 1/R D/DR(V(R)) AND V(R)/R**2 ARE INTERNALLY COMPUTED.E
     &CIS1613'/72X,'ECIS1614'/''/'MULTIPLICATIVE FACTOR',19X,
     &'FORMAT (7F10.5)',17X,'ECIS1615'/'*********************',51X,
     &'ECIS1616'/
     &'  IF NINT IS NOT NEGATIVE FOR A COPIED FORM FACTOR GO BACK TO',
     &11X,'ECIS1617'/'''IDENTIFICATION'' CARD.',50X,'ECIS1618'/7X,
     &'1-10   MULTIPLICATIVE FACTOR FOR THE STRENGTH (MUST NOT BE 0.).
     &ECIS1619'/72X,'ECIS1620'/'PARAMETERS OF STANDARD FORM FACTORS',
     &37X,'ECIS1621'/'***********************************',37X,
     &'ECIS1622'/
     &' ONLY IF L1X IS NOT POSITIVE AND ITYPX IS NEGATIVE, OTHERWISE GO
     &TO',5X,'ECIS1623'/' NEXT ''IDENTIFICATION CARD''.',44X,
     &'ECIS1624'/72X,'ECIS1625')
      WRITE (6,99100)
99100 FORMAT ('IF ITYPX=-1 TO -6:',54X,'ECIS1626'/'******************',
     &        54X,'ECIS1627'/72X,
     &        'ECIS1628'/'PARAMETERS OF THE POTENTIAL',13X,
     &        'FORMAT (7F10.5)',17X,
     &        'ECIS1629'/'***************************',45X,
     &        'ECIS1630'/7X,'1-10   DEPTH OF POTENTIAL.',39X,
     &        'ECIS1631'/14X,
     &        'PRODUCT OF DEPTH AND DEFORMATION FOR A TRANSITION FORM',
     &        4X,'ECIS1632'/18X,'FACTOR.',47X,'ECIS1633'/14X,
     &        'PRODUCT OF CHARGES FOR COULOMB POTENTIAL.',17X,
     &        'ECIS1634'/14X,
     &'PRODUCT OF CHARGES AND DEFORMATION FOR COULOMB TRANSITION ECIS163
     &5'/18X,'FORM FACTOR.',42X,'ECIS1636'/6X,
     &'11-20   RADIUS OF VOLUME POTENTIAL.',31X,'ECIS1637'/6X,
     &'21-30   DIFFUSENESS OF VOLUME POTENTIAL.',26X,'ECIS1638'/6X,
     &'31-40   EXPONENTIATION FACTOR (THE FORM FACTOR IS AT THE POWER',
     &4X,'ECIS1639'/18X,'1+THIS VALUE).',40X,'ECIS1640'/6X,
     &'41-50   THIRD PARAMETER OF A FERMI CHARGE DISTRIBUTION FOR A',6X,
     &'ECIS1641'/14X,'COULOMB POTENTIAL.',40X,'ECIS1642'/72X,
     &'ECIS1643'/'DEFORMATIONS FOR ITYPX=-5 OR -6',9X,'FORMAT (7F10.5)',
     &17X,'ECIS1644'/'*******************************',41X,
     &'ECIS1645'/7X,'1-10   DEFORMATION FOR L=1.',38X,'ECIS1646'/6X,
     &'11-20   DEFORMATION FOR L=2.',38X,'ECIS1647'/6X,
     &'21-30   DEFORMATION FOR L=3.',38X,'ECIS1648'/6X,
     &'31-40   DEFORMATION FOR L=4.',38X,'ECIS1649'/6X,
     &'41-50   .......... AND SO ON UP TO L2X ....',23X,'ECIS1650'/
     &'  NOTE:  ODD AND EVEN DEFORMATIONS ARE USED, STARTING BY L=1.',
     &11X,'ECIS1651')
      WRITE (6,99105)
99105 FORMAT (
     &'  ****  THE RADII MUST BE VALUES ALREADY MULTIPLIED BY A**(1/3).'
     &,8X,'ECIS1652'/8X,
     &'NO CHECK IS DONE ON PRODUCT OF CHARGES WHEN THEY ARE READ OR TO E
     &CIS1653'/8X,'PREVENT A SEARCH ON THEM.',39X,'ECIS1654'/72X,
     &'ECIS1655'/'IF ITYPX=-7 OR -8:',54X,
     &'ECIS1656'/'******************',54X,'ECIS1657'/72X,
     &'ECIS1658'/'QUANTUM NUMBERS',25X,'FORMAT (12I5)',19X,
     &'ECIS1659'/'***************',57X,'ECIS1660'/
     &'IF MLX=0 OR MLX=1, THE NUMBER OF NODES IS L2X AND THE QUANTUM NUM
     &BERS   ECIS1661'/
     &'ARE THOSE OF THE TRANSITION. IN THIS CASE, GO TO NEXT CARD.',13X,
     &'ECIS1662'/'IF MLX=2 OR MLX=3:',54X,'ECIS1663'/7X,
     &'1- 5   NP: NUMBER OF NODES OF THE FIRST BOUND FUNCTION.',10X,
     &'ECIS1664'/7X,
     &'6-10   LP: ANGULAR MOMENTUM OF THE FIRST BOUND FUNCTION.',9X,
     &'ECIS1665'/6X,
     &'11-15   SP: VALUE OF 2*S FOR THE FIRST BOUND FUNCTION.',12X,
     &'ECIS1666'/6X,
     &'16-20   JP: VALUE OF 2*J FOR THE FIRST BOUND FUNCTION.',12X,
     &'ECIS1667'/6X,
     &'21-25   NH: NUMBER OF NODES OF THE SECOND BOUND FUNCTION.',9X,
     &'ECIS1668'/6X,
     &'26-30   LH: ANGULAR MOMENTUM OF THE SECOND BOUND FUNCTION.',8X,
     &'ECIS1669'/6X,
     &'31-35   SH: VALUE OF 2*S FOR THE SECOND BOUND FUNCTION.',11X,
     &'ECIS1670'/6X,
     &'36-40   JH: VALUE OF 2*J FOR THE SECOND BOUND FUNCTION.',11X,
     &'ECIS1671'/6X,
     &'41-45   NVC NOT 0 TO TAKE INTO ACCOUNT PARTICLE-HOLE COUPLING',
     &5X,'ECIS1672'/18X,'(USED ONLY WITH SP=1 AND SH=1).',23X,
     &'ECIS1673'/72X,'ECIS1674'/'')
      WRITE (6,99110)
99110 FORMAT ('FOR ITYPX=-7:',27X,'FORMAT (7F10.5)',17X,
     &        'ECIS1675'/'*************',59X,'ECIS1676'/7X,
     &       '1-10   OSCILLATOR PARAMETER FOR THE FIRST BOUND FUNCTION.'
     &       ,8X,'ECIS1677'/6X,
     &     '11-20   OSCILLATOR PARAMETER FOR THE SECOND BOUND FUNCTION.'
     &     ,7X,'ECIS1678'/
     &'FOR MLX=0 OR 1 OR ITYPX=-8 WITH MLX=3, ONLY THE FIRST PARAMETER I
     &S READ.ECIS1679'/
     &'FOR MLX=2, IF THE SECOND PARAMETER IS 0., THE FIRST ONE IS COPIED
     &.',6X,'ECIS1680'/72X,'ECIS1681'/'FOR ITYPX=-8:',27X,
     &'FORMAT (7F10.5)',17X,'ECIS1682'/'*************',59X,
     &'ECIS1683'/7X,
     &'1-10   BINDING ENERGY. IF THIS VALUE IS NEGATIVE, THE BOUND STATE
     &ECIS1684'/14X,'IS REPLACED BY A SCATTERING STATE NORMALISED TO',
     &11X,'ECIS1685'/14X,'SIN(KR+DELTA) AT INFINITY.',32X,'ECIS1686'/6X,
     &'11-20   TOTAL MASS.',47X,'ECIS1687'/6X,
     &'21-30   MASS OF BOUND PARTICLE (DEFAULT VALUE 1.).',16X,
     &'ECIS1688'/6X,'31-40   PRODUCT OF CHARGES.',39X,'ECIS1689'/6X,
     &'41-50   REAL POTENTIAL FOR UNBOUND STATES OR STARTING VALUE FOR
     & ECIS1690'/14X,
     &'THE SEARCH ON BOUND STATE (DEFAULT VALUES 35 MEV).',8X,
     &'ECIS1691'/6X,'51-60   REDUCED RADIUS OF REAL POTENTIAL.',25X,
     &'ECIS1692'/6X,'61-70   DIFFUSENESS OF REAL POTENTIAL.',28X,
     &'ECIS1693'/72X,'ECIS1694'/'ON NEXT CARD:',27X,'FORMAT (7F10.5)',
     &17X,'ECIS1695'/'*************',59X,'ECIS1696'/7X,
     &'1-10   DEPTH OF SPIN-ORBIT POTENTIAL.',28X,'ECIS1697'/6X,
     &'11-20   REDUCED RADIUS OF SPIN-ORBIT POTENTIAL.',19X,'ECIS1698')
      WRITE (6,99115)
99115 FORMAT (6X,'21-30   DIFFUSENESS OF SPIN-ORBIT POTENTIAL.',22X,
     &        'ECIS1699'/6X,
     &        '31-40   REDUCED RADIUS OF COULOMB POTENTIAL.',22X,
     &        'ECIS1700'/'FOR MLX=2, GO BACK TO ''FOR ITYPX=-8:''.',34X,
     &        'ECIS1701'/
     &'FOR MLX=3, GO BACK TO ''FOR ITYPX=-7:'' TO READ ONE OSCILLATOR PA
     &RAMETER. ECIS1702'/'  NOTE:  REDUCED RADII ARE USED FOR ITYPX=-8.'
     &,27X,'ECIS1703'/
     &'  ****  USING THE PRODUCT OF TWO BOUND FUNCTIONS, THEIR COUPLING
     &TO THE ECIS1704'/8X,
     &'ANGULAR MOMENTUM OF THE TRANSITION IS COMPUTED BY THE CODE ONLY E
     &CIS1705'/8X,
     &'IF THEIR SPINS ARE BOTH 1/2 AND THE NUCLEAR MATRIX ELEMENT',6X,
     &'ECIS1706'/8X,
     &'SHOULD BE THE STRENGTH OF THE INTERACTION. FOR SPINS NOT 1/2,   E
     &CIS1707'/8X,
     &'THIS COUPLING SHOULD BE INCLUDED IN THE NUCLEAR MATRIX ELEMENT. E
     &CIS1708'/72X,'ECIS1709'/'IF ITYPX=-9 OR -10:',53X,
     &'ECIS1710'/'*******************',53X,'ECIS1711'/72X,
     &'ECIS1712'/'STRENGTHS',31X,'FORMAT (7F10.5)',17X,
     &'ECIS1713'/'*********',63X,'ECIS1714'/8X,
     &'1-10   STRENGTH OF THE INTEGRAL WITH R**(L+2). (FOR COULOMB',5X,
     &'ECIS1715'/15X,'POTENTIALS AND COUPLINGS, GIVE THE DESCRIPTION OF'
     &,8X,'ECIS1716'/15X,
     &'CHARGE DENSITY OR TRANSITION. THE STRENGTH MUST BE',7X,
     &'ECIS1717'/15X,
     &'GIVEN. FOR POTENTIALS, IT IS THE PRODUCT OF CHARGES).',4X,
     &'ECIS1718'/7X,
     &'11-20   FOR ITYPX=-9, RADIAL EXTENSION OF BESSEL FUNCTION',8X,
     &'ECIS1719'/15X,'(DEFAULT VALUE MATCHING RADIUS).',25X,'ECIS1720')
      WRITE (6,99120)
99120 FORMAT (15X,'FOR ITYPX=-10, PARAMETER B OF LAGUERRE POLYNOMIAL',
     &        8X,'ECIS1721'/15X,
     &        '(DEFAULT VALUE 1). THE POTENTIAL IS SUM ON N OF',10X,
     &        'ECIS1722'/15X,
     &        'X**L L(L+1/2,N,X**2) EXP(-x**2/2) WHERE X=R/B.',11X,
     &        'ECIS1723'/7X,
     &'21-30   STRENGTH OF FIRST BESSEL FUNCTION/LAGUERRE POLYNOMIAL.
     &ECIS1724'/7X,
     &'31-40   STRENGTH OF SECOND BESSEL FUNCTION/LAGUERRE POLYNOMIAL.
     &ECIS1725'/7X,
     &'41-50   STRENGTH OF THIRD BESSEL FUNCTION/LAGUERRE POLYNOMIAL.
     &ECIS1726'/7X,
     &'51-60   STRENGTH OF FOURTH BESSEL FUNCTION/LAGUERRE POLYNOMIAL.
     &ECIS1727'/7X,
     &'61-70   STRENGTH OF FIFTH BESSEL FUNCTION/LAGUERRE POLYNOMIAL.
     &ECIS1728'/72X,'ECIS1729'/' EVENTUALLY, ON NEXT CARD:',14X,
     &'FORMAT (7F10.5)',17X,'ECIS1730'/' *************************',46X,
     &'ECIS1731'/8X,
     &'1-10   STRENGTH OF SIXTH BESSEL FUNCTION/LAGUERRE POLYNOMIAL.   E
     &CIS1732'/7X,
     &'11-20   STRENGTH OF SEVENTH BESSEL FUNCTION/LAGUERRE POLYNOMIAL.
     &ECIS1733'/7X,'21-30   .......... AND SO ON UP TO L2X ....',22X,
     &'ECIS1734'/''/
     &'  NOTE:  WITH BESSEL FUNCTION OR LAGUERRE POLYNOMIAL OR LAGUERRE'
     &,8X,'ECIS1735'/
     &'  ****  POLYNOMIALS, GIVE THE SPIN-ORBIT V(R) AND NEVER 1/R D/DR
     &V(R).  ECIS1736'/
     &'  THE LAGUERRE POLYNOMIALS ARE X**L EXP(-X**2) L^(L+1/2)_N(2X**2)
     & WHERE ECIS1737'/
     &'  X=R/B (UNNORMALISED POLYNOMIALS AS DEFINED IN BATEMAN OR ABRAMO
     &WITZ,  ECIS1738'/
     &'  WITH A PARAMETER B INVERSE OF THE HARMONIC OSCILLATOR PARAMETER
     &).',5X,'ECIS1739')
      WRITE (6,99125)
99125 FORMAT (5X,'THE PROGRAM STOPS IF FORM FACTORS ARE MISSING.',21X,
     &        'ECIS1740'/72X,'ECIS1741'/'FOLDING PARAMETERS',22X,
     &        'FORMAT (7E10.5)',17X,'ECIS1742'/'******************',54X,
     &        'ECIS1743'/
     &'  IF THE MAXIMUM POSITIVE VALUE OF ''NFOLD'' READ IN COLUMNS 46-5
     &0 OF THE ECIS1744'/'IDENTIFICATION CARDS IS N, READ N TIMES:',32X,
     &'ECIS1745'/8X,'1-10   VAL(25) ''V'' PARAMETER',36X,'ECIS1746'/7X,
     &'11-20   VAL(26) ''R'' PARAMETER',36X,'ECIS1747'/7X,
     &'21-30   VAL(27) ''A'' PARAMETER',36X,'ECIS1748'/
     &'FOR EXPLANATIONS, SEE ''CARDS READ IN SUBROUTINE LECT''.',18X,
     &'ECIS1749'/72X,'ECIS1750'/72X,
     &'ECIS1751'/'CARDS READ IN SUBROUTINE EVAL',43X,
     &'ECIS1752'/'*****************************',43X,'ECIS1753'/3X,
     &'IF LO(37)=.TRUE., OTHERWISE GO TO THE BEGINNING OF ANOTHER DATA S
     &ET. ECIS1754'/72X,'ECIS1755'/'NUMBER OF CHANGES',23X,
     &'FORMAT (2L1,I3,I5,F10.5)',8X,'ECIS1756'/'*****************',55X,
     &'ECIS1757'/10X,'1   LO(37)',5X,
     &'.TRUE. FOR OTHER CALLS TO THIS SUBROUTINE',6X,'ECIS1758'/25X,
     &'.FALSE. FOR THE LAST CALL.',21X,'ECIS1759'/10X,'2   LX',9X,
     &'.TRUE. TO READ ANOTHER TITLE',19X,'ECIS1760'/7X,'3- 5   NIN',8X,
     &'NUMBER OF PARAMETERS TO CHANGE.',16X,'ECIS1761'/7X,'6-10   NEX',
     &8X,'INDICATION FOR THE USE OF THE VALUES TO BE READECIS1762'/27X,
     &'>0  INCREMENTS',31X,'ECIS1763'/27X,'=0  NEW VALUES',31X,
     &'ECIS1764'/27X,'<0  PERCENTAGE OF INCREASE',19X,'ECIS1765')
      WRITE (6,99130)
99130 FORMAT (6X,'11-20   ECH',8X,
     &        'NEW SEARCH SCALE. (DEFAULT OPTION 20.)',9X,
     &        'ECIS1766'/72X,'ECIS1767'/'CARD 1',34X,'FORMAT (18A4)',
     &        19X,'ECIS1768'/'******',66X,'ECIS1769'/
     &'IF LX=.TRUE.  NEW TITLE WHICH WILL BE PRINTED AS HEADING OF RESUL
     &TS.',4X,'ECIS1770'/72X,'ECIS1771'/'IDENTIFICATIONS',25X,
     &'FORMAT (14I5)',19X,'ECIS1772'/'***************',57X,
     &'ECIS1773'/7X,'1- 5   INDEX OF FIRST PARAMETER.',33X,
     &'ECIS1774'/7X,'6-10   INDEX OF SECOND PARAMETER.',32X,
     &'ECIS1775'/6X,'11-15   ........................',34X,
     &'ECIS1776'/10X,
     &'UP TO NIN VALUES, EVENTUALLY ON OTHER CARDS, STARTING IN 1-5. ECI
     &S1777'/3X,'NOTE:  A NEGATIVE VALUE IS REPLACED BY ZERO.',25X,
     &'ECIS1778'/3X,'****   INDEX ZERO IS THE TOTAL ENERGY.',31X,
     &'ECIS1779'/10X,
     &'THE OTHER INDICES ARE THE SAME AS THE ONES USED FOR SEARCH,   ECI
     &S1780'/9X,'WITH THE LIMITATIONS ALREADY DESCRIBED.',24X,
     &'ECIS1781'/72X,'ECIS1782'/'NEW VALUES',30X,'FORMAT (7F10.5)',17X,
     &'ECIS1783'/'**********',62X,'ECIS1784'/7X,
     &'1-10   FIRST NEW PARAMETER.',38X,'ECIS1785'/6X,
     &'11-20   SECOND NEW PARAMETER.',37X,'ECIS1786'/6X,
     &'21-30   ....................',38X,'ECIS1787'/
     &'  IF LO(37)=.TRUE. GO AGAIN TO ''CARDS READ IN SUBROUTINE EVAL''.
     &',9X,'ECIS1788'/
     &'  IF LO(37)=.FALSE. GO TO THE BEGINNING OF NEXT DATA SET.',15X,
     &'ECIS1789'/
     &'  NOTE:  THERE ARE DIFFERENT USES OF THIS POSSIBILITY:',18X,
     &'ECIS1790')
      WRITE (6,99135)
99135 FORMAT (
     &'  *****  1) AS A SEARCH STOPS USUALLY BEFORE THE MINIMUM, IT CAN
     &BE',5X,'ECIS1791'/8X,
     &'REFINED BY USING NEX POSITIVE AND INTRODUCING AN INCREMENT ''0.''
     & ECIS1792'/8X,'FOR ANY PARAMETER, IN SEARCH OR NOT IN SEARCH.',
     &18X,'ECIS1793'/''/9X,
     &'2) WHEN SEARCHING THE MINIMUM OF THE CHI2 AS A FUNCTION OF SOMEEC
     &IS1794'/8X,
     &'FIXED PARAMETER. THE NEXT SEARCH STARTS WITH THE VALUES OF THE  E
     &CIS1795'/8X,'PARAMETERS IN SEARCH OBTAINED IN THE LAST SEARCH.',
     &15X,'ECIS1796'/9X,
     &'3) WHEN SOME RESULT MUST BE OBTAINED FOR DIFFERENT VALUES OF   EC
     &IS1797'/8X,'THE PARAMETERS.',49X,'ECIS1798'/72X,'ECIS1799'/72X,
     &'ECIS1800'/'RESTART INPUT: CARDS READ IN SUBROUTINE REST',28X,
     &'ECIS1801'/'********************************************',28X,
     &'ECIS1802'/72X,'ECIS1803'/'RESTART CONDITIONS',22X,
     &'FORMAT (L1,I4,I5,2F10.5)',8X,'ECIS1804'/'******************',54X,
     &'ECIS1805'/10X,
     &'1   LO(35)  THE ONLY CONTROL WHICH CAN BE CHANGED, ALL THE',4X,
     &'ECIS1806'/14X,'OTHERS BEING THOSE OF LAST RUN.',27X,
     &'ECIS1807'/7X,'2- 5   NEW MAXIMUM NUMBER OF EVALUATIONS.',24X,
     &'ECIS1808'/7X,
     &'6-10   NEW VALUE OF NSEC. (DEFAULT VALUE: THE OLD ONE).',10X,
     &'ECIS1809'/6X,'11-20   NEW VALUE OF ECH.',41X,'ECIS1810'/6X,
     &'11-20   NEW VALUE OF RAP.',41X,'ECIS1811'/14X,
     &'IF THEY ARE LESS THAN 1., ECH OR RAP ARE NOT CHANGED.',5X,
     &'ECIS1812'/72X,'ECIS1813'/72X,'ECIS1814')
      WRITE (6,99140)
99140 FORMAT (
     &'*****************************************************************
     &*******ECIS1815'/72X,'ECIS1816'/30X,'*******************',23X,
     &'ECIS1817'/30X,'*  NEXT DATA SET  *',23X,'ECIS1818'/30X,
     &'*******************',23X,'ECIS1819'/72X,'ECIS1820'/6X,
     &'''FIN'' IN COLUMNS 1-3 TO STOP THE JOB WITHOUT DIAGNOSTIC.',10X,
     &'ECIS1821'/72X,'ECIS1822'/7X,
     &'FOR ANY TROUBLE, WRITE (AND EVEN SEND LISTINGS) TO',15X,
     &'ECIS1823'/5X,
     &'JACQUES RAYNAL/SERVICE DE PHYSIQUE THEORIQUE/C.E.-SACLAY',11X,
     &'ECIS1824'/15X,'91191 GIF-SUR-YVETTE CEDEX/FRANCE',24X,
     &'ECIS1825'/72X,'ECIS1826'/5X,'FAX: (33)(1) 69.08-81-20',43X,
     &'ECIS1827'/5X,'E-MAIL: RAYNAL@SPHT.SACLAY.CEA.FR',34X,
     &'ECIS1828'/72X,'ECIS1829')
      END
C 01/01/04                                                      ECIS03  LECL-000
      SUBROUTINE LECL(Ncolx,Ncoll,Npp,Ncont,Ipi,Iph,Wv,Ipp,Npa,Pa,Nva,
     &                Na,Nb,Nimax,Nbet,Cm,Idt,Lo)
C INPUT OF LEVEL DESCRIPTIONS.                                          LECL-003
C INPUT VARIABLES:   NCOLX:  TOTAL NUMBER OF NUCLEAR STATES             LECL-004
C                    NCOLL:  NUMBER OF COUPLED NUCLEAR STATES           LECL-005
C                    NPP:    NUMBER OF OPTICAL POTENTIALS               LECL-006
C                    NCONT:  NUMBER OF CONTINUUM FOR COMPOUND NUCLEUS   LECL-007
C                    CM:     NUCLEAR MASS IN MEV                        LECL-008
C                    IDT:    FREE SPACE IN NPA,PA                       LECL-009
C                    LO:     LOGICAL CONTROLS. FOR 1, 2, 3, 7, 8, 15,   LECL-010
C                            18 AND 100 SEE DESCRIPTION OF INPUT.       LECL-011
C             101, 102, 103 AND 115 ARE OPPOSITE OF 1, 2, 3 AND 15      LECL-012
C             LO(209)=.TRUE.  FOR DIRAC POTENTIALS                      LECL-013
C OUTPUT VARIABLES:  IPI(J,*) FOR J = 1, 2, 3, 4, 5 AND 11:  SEE CALX   LECL-014
C                    IPH(2,J):  FOR VIBRATIONAL MODEL, NUMBER OF PHONONSLECL-015
C                        FOR I=1, J=1,NCOLL. IF IPH(1,J) IS 3, THE STATELECL-016
C                        IS A MIXTURE OF 1 AND 2-PHONONS STATES.        LECL-017
C                               FOR ROTATIONAL MODEL, IPH(1,J) IS 1 FOR LECL-018
C                        A VIBRATIONAL BAND AND 2 FOR A MIXTURE WITH    LECL-019
C                        THE GROUND STATE BAND.                         LECL-020
C                               ADDRESS OF THE DESCRIPTION OF MIXED     LECL-021
C                        MIXED STATES IN IPH(2,J).                      LECL-022
C                    WV(J,*) FOR J = 1, 2, 3 AND 12:  SEE CALX          LECL-023
C                    NPA,PA: STORAGE OF NUCLEAR PARAMETERS EQUIVALENT   LECL-024
C                            BY CALL                                    LECL-025
C                    IPP(1,J): FIRST LEVEL USING POTENTIAL J (TEMPORARY)LECL-026
C                    NVA:    NUMBER OF NUCLEAR PARAMETERS               LECL-027
C                    NA:     NUMBER OF INTEGER PARAMETER INFORMATIONS   LECL-028
C                    NB:     STORAGE IN ROAM FOR ASYMMETRIC ROTATION    LECL-029
C                    NIMAX:  TWICE MAXIMUM SUM OF SPINS TARGET+PARTICLE LECL-030
C                    NBET:   NUMBER OF DIFFERENT PHONONS                LECL-031
C                    LO:     LOGICAL CONTROLS: DEFINED FOR IDENTICAL    LECL-032
C                            PARTICLE AND TARGET, LO(223)=.TRUE. FOR NO LECL-033
C                            SPIN IN THE GROUND STATE AND LO(231)=.TRUE.LECL-034
C                            FOR NON ZERO SPINS IN THE GROUND STATE     LECL-035
C IN COMMON /POTE2/  NPX:    NUMBER OF POT. WITH DISP. (TEMPORARY)      LECL-036
C***********************************************************************LECL-037
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER INSl, INTv, INVt, ITY(8), MR, MS, MW, NPX
      COMMON /INOUT / MR, MW, MS
      COMMON /POTE2 / ITY, INVt, INTv, INSl, NPX
C
C Dummy arguments
C
      REAL*8 Cm
      INTEGER Idt, Na, Nb, Nbet, Ncoll, Ncolx, Ncont, Nimax, Npp, Nva
      INTEGER Iph(2,Ncoll), Ipi(11,Ncolx), Ipp(30,Npp), Npa(2,1)
      LOGICAL Lo(250)
      REAL*8 Pa(1), Wv(18,Ncolx)
C
C Local variables
C
      REAL*8 am3, amred, b1, bm3, c1, c3, e, sp1, sp2, sp3
      DOUBLE PRECISION DCOS, DSIN, DSQRT
      INTEGER i, i2, i3, iv, j, k, m, n, nnpa, nnva
      INTEGER IDINT, MAX0
      CHARACTER*1 sigm, spi
C
C
      DATA sigm/'-'/
C OUTPUT OF NUCLEAR MODEL                                               LECL-046
      IF (Lo(7)) THEN
         WRITE (MW,99005)
99005    FORMAT (/' EXTERNAL FORM FACTOR MODEL'/)
      ELSEIF (Lo(1)) THEN
         IF (Lo(103)) WRITE (MW,99010)
99010    FORMAT (/' SYMMETRIC ROTATIONAL MODEL'/)
         IF (Lo(3)) WRITE (MW,99015)
99015    FORMAT (/' ASYMMETRIC ROTATIONAL MODEL'/)
      ELSEIF (Lo(3)) THEN
         WRITE (MW,99020)
99020    FORMAT (/' ANHARMONIC VIBRATIONAL MODEL'/)
         IF (Lo(115)) THEN
            WRITE (MW,99025)
99025       FORMAT (
     & ' THE NUCLEAR REDUCED MATRIX ELEMENTS MUST BE READ IN THIS MODEL'
     & )
            GOTO 600
         ENDIF
      ELSE
         IF (Lo(102)) WRITE (MW,99030)
99030    FORMAT (/' FIRST ORDER VIBRATIONAL MODEL'/)
         IF (Lo(2)) WRITE (MW,99035)
99035    FORMAT (/' SECOND ORDER VIBRATIONAL MODEL'/)
      ENDIF
C INPUT OF CHANNEL DESCRIPTION                                          LECL-060
      Nva = 0
      Na = 0
      Nb = 0
      Nbet = 0
      Nimax = 0
      DO iv = 1, Npp
         Ipp(1,iv) = -1
      ENDDO
      DO iv = 1, Ncolx
         READ (MR,99040) sp2, n, k, spi, e, sp1, Wv(1,iv), Wv(2,iv), sp3
99040    FORMAT (F5.2,2I2,A1,5F10.5)
         Ipi(2,iv) = 1 + IDINT(2.00001D0*sp1)
         Ipi(3,iv) = 1 + IDINT(2.00001D0*sp2)
         Ipi(4,iv) = IDINT(sp3)
         IF (iv.NE.1) THEN
            IF (Wv(1,iv).EQ.0.D0) THEN
               Wv(1,iv) = Wv(1,iv - 1)
               Wv(2,iv) = Wv(2,iv - 1)
               Ipi(2,iv) = Ipi(2,iv - 1)
               Ipi(4,iv) = Ipi(4,iv - 1)
               sp2 = 0.5D0*DFLOAT(Ipi(3,iv) - 1)
               sp3 = Ipi(4,iv)
            ELSE
               amred = Wv(1,iv)*Wv(2,iv)/(Wv(1,iv) + Wv(2,iv))
               am3 = Wv(2,iv)**.33333333333333D0
               bm3 = Wv(1,iv)**.33333333333333D0
               WRITE (MW,99120) Wv(2,iv), sp3, am3, Wv(1,iv), amred,
     &                          sp1, bm3
            ENDIF
            Wv(3,iv) = Wv(3,1) - e
            IF ((Ncont + iv.LE.Ncolx) .AND. Lo(8)) Wv(2,iv) = Wv(1,1)
     &          + Wv(2,1) - Wv(1,iv) + e/Cm
            IF (k.EQ.0) k = Ipi(5,iv - 1)
            IF (Lo(8)) THEN
               Wv(12,iv) = Wv(3,iv)
     &                     *(Wv(3,iv)/(2.D0*Cm) + Wv(1,iv) + Wv(2,iv))
     &                     /Wv(2,iv)
            ELSE
               Wv(12,iv) = Wv(3,iv)*(Wv(1,iv) + Wv(2,iv))/Wv(2,iv)
            ENDIF
         ELSE
            Wv(12,1) = e
            IF (k.EQ.0) k = 1
            IF (Lo(18) .AND.
     &          ((Ipi(3,1).NE.Ipi(2,1)) .OR. (spi.EQ.sigm) .OR. Lo(100))
     &          ) GOTO 200
            Lo(223) = Lo(18) .AND. Ipi(2,1)*Ipi(3,1).EQ.1
            Lo(231) = Lo(18) .AND. Ipi(2,1)*Ipi(3,1).NE.1
            amred = Wv(1,1)*Wv(2,1)/(Wv(1,1) + Wv(2,1))
            IF (Lo(8)) THEN
C RELATIVISTIC C.-M. ENERGY ECM=SQRT((M1+M2)**2+2*M2*ELAB))-M1-M2       LECL-084
               Wv(3,1) = Cm*(DSQRT((Wv(1,1)+Wv(2,1))**2 + 2.D0*Wv(2,1)*e
     &                   /Cm) - Wv(1,1) - Wv(2,1))
            ELSE
               Wv(3,1) = e*Wv(2,1)/(Wv(1,1) + Wv(2,1))
            ENDIF
            am3 = Wv(2,1)**.33333333333333D0
            bm3 = Wv(1,1)**.33333333333333D0
            WRITE (MW,99120) Wv(2,1), sp3, am3, Wv(1,1), amred, sp1, bm3
            WRITE (MW,99045) e, Wv(3,1)
99045       FORMAT (10X,'ENERGY(LAB) =',D15.6,' MEV',10X,
     &              'ENERGY(C. M.) =',D15.6,' MEV'/)
            e = 0.D0
         ENDIF
         IF (Lo(209) .AND. Ipi(2,iv).NE.2) GOTO 300
         IF (k.GT.Npp .OR. k.LE.0) GOTO 400
         Ipi(5,iv) = k
         IF (Ipp(1,k).EQ. - 1) Ipp(1,k) = iv
         Nimax = MAX0(Nimax,Ipi(2,iv) + Ipi(3,iv))
         Ipi(1,iv) = 0
         IF (spi.EQ.sigm) Ipi(1,iv) = 1
         IF (iv.LE.Ncoll) THEN
            IF (.NOT.(Lo(7))) THEN
               nnpa = 0
               nnva = 0
               IF (.NOT.(Lo(1) .AND. n.EQ.0 .OR. (Lo(101).AND.(n.NE.0
     &             .OR.Lo(3))))) THEN
C INPUT OF PHONONS IN HARMONIC VIBRATIONAL OR SYMMETRIC ROTATIONAL MODELLECL-132
                  READ (MR,99050) Iph(1,iv), Iph(2,iv), i2, i3
99050             FORMAT (14I5)
                  Nbet = MAX0(Nbet,Iph(2,iv),i2,i3)
                  m = Iph(1,iv) + 1
                  IF (m.EQ.1) GOTO 20
                  IF (m.EQ.2) THEN
C 1 PHONON STATE                                                        LECL-146
                     IF (Lo(101)) WRITE (MW,99055) iv, sp2, spi, e, k,
     &                   Iph(2,iv)
99055                FORMAT (' N =',I3,' -   SPIN =',F4.1,A1,
     &                       ' EXCITATION ENERGY =',F8.4,' MEV',10X,
     &                       'POTENTIAL',I5,6X,
     &                       ' PHONON STATE WITH PHONON',I3)
                     IF (Lo(1)) WRITE (MW,99060) iv, sp2, spi, e, k,
     &                                 Iph(2,iv)
99060                FORMAT (' N =',I3,' -   SPIN =',F4.1,A1,
     &                       ' EXCITATION ENERGY =',F8.4,' MEV',10X,
     &                       'POTENTIAL',I5,6X,
     &                       'VIBRATIONAL BAND OF PHONON',I3)
                     GOTO 100
                  ELSEIF (m.EQ.3 .OR. m.EQ.4) THEN
                     nnpa = Iph(1,iv) - 1
                     nnva = m - 2
                     IF (Lo(103)) nnva = nnva + 1
                     GOTO 50
                  ENDIF
               ENDIF
C GROUND STATE                                                          LECL-137
               Iph(1,iv) = 0
               IF (Lo(1)) THEN
                  WRITE (MW,99065) iv, sp2, spi, e, k
99065             FORMAT (' N =',I3,' -   SPIN =',F4.1,A1,
     &                    ' EXCITATION ENERGY =',F8.4,' MEV',10X,
     &                    'POTENTIAL',I5,6X,'GROUND STATE BAND')
                  IF (Lo(103)) GOTO 100
                  nnva = (Ipi(3,iv) - 1)/4
                  GOTO 50
               ENDIF
            ENDIF
   20       WRITE (MW,99125) iv, sp2, spi, e, k
C UNCOUPLED STATES FOR COMPOUND NUCLEUS                                 LECL-121
         ELSEIF (Ncont + iv.GT.Ncolx) THEN
C CONTINUUM FOR COMPOUND NUCLEUS                                        LECL-125
            WRITE (MW,99070) iv, sp2, spi, e, k
99070       FORMAT (' N =',I3,' -   SPIN =',F4.1,A1,
     &              ' EXCITATION ENERGY =',F8.4,' MEV',10X,'POTENTIAL',
     &              I5,6X,'***** START OF A CONTINUUM *****')
         ELSE
            WRITE (MW,99075) iv, sp2, spi, e, k
99075       FORMAT (' N =',I3,' -   SPIN =',F4.1,A1,
     &              ' EXCITATION ENERGY =',F8.4,' MEV',10X,'POTENTIAL',
     &              I5,6X,'***** UNCOUPLED STATE *****')
         ENDIF
         GOTO 100
   50    IF (Na + Nva + nnpa + 2.GT.Idt)
     &       CALL MEMO('LECL',Na + Nva + nnpa + 2,Idt,2)
         IF ((Nva.NE.0) .AND. (nnpa.NE.0)) THEN
            DO i = Nva, 1, -1
               Pa(nnpa + Na + i) = Pa(Na + i)
            ENDDO
         ENDIF
         IF (.NOT.(Lo(3))) THEN
            WRITE (MW,99125) iv, sp2, spi, e, k
C 2 PHONON STATE                                                        LECL-159
            Na = Na + 1
            Npa(1,Na) = Iph(2,iv)
            IF (.NOT.(Lo(1))) THEN
               Iph(2,iv) = Na
               Npa(2,Na) = i2
               IF (m.EQ.4) THEN
C MIXTURE OF 1 PHONON AND 2 PHONON STATE - INPUT OF MIXING PARAMETER    LECL-168
                  Na = Na + 1
                  Npa(1,Na) = i3
               ELSE
                  WRITE (MW,99080) Npa(1,Na), Npa(2,Na)
99080             FORMAT (23X,'2 PHONONS STATE, WITH PHONONS',I3,' AND',
     &                    I3)
                  GOTO 100
               ENDIF
            ENDIF
            Nva = Nva + 1
            Npa(2,Na) = Nva
            READ (MR,99130) Pa(Na + Nva)
            b1 = 0.0174532925199433D0*Pa(Na + Nva)
            c1 = DCOS(b1)
            c3 = DSIN(b1)
            IF (Lo(101)) WRITE (MW,99085) Pa(Na + Nva), c3,
     &                          Npa(1,Na - 1), i2, c1, i3
99085       FORMAT (23X,'MIXING OF 1 AND 2 PHONON STATES WITH',F9.3,
     &              ' DEGREES'/23X,F10.5,
     &              ' 2 PHONONS STATE, WITH PHONONS',I3,' AND',I3,
     &              '  + ',F10.5,' 1 PHONON STATE WITH PHONON',I3)
            IF (Lo(1)) WRITE (MW,99090) Pa(Na + Nva), c3, Npa(1,Na), c1
99090       FORMAT (23X,'MIXING OF VIBRATIONAL AND GROUND BANDS WITH',
     &              F9.3,' DEGREES'/23X,F10.5,
     &              ' VIBRATIONAL BAND OF PHONON',I3,' AND',F10.5,
     &              ' GROUND STATE BAND')
C ASYMMETRIC ROTATIONAL MODEL - INPUT OF MIXING PARAMETERS              LECL-180
         ELSEIF (.NOT.(Lo(101))) THEN
            Iph(1,iv) = nnva
            Iph(2,iv) = Nva
            Nb = Nb + nnva + 1
            IF (nnva.NE.0) THEN
               READ (MR,99130) (Pa(Na + Nva + j),j = 1,nnva)
               WRITE (MW,99095) (Pa(Na + Nva + j),j = 1,nnva)
99095          FORMAT (23X,'BAND MIXING COEFF.',5F10.5)
               Nva = Nva + nnva
            ENDIF
         ENDIF
  100 ENDDO
      IF (Lo(1) .AND. Lo(2) .AND. Lo(3)) Nva = MAX0(Nva,5)
      NPX = 0
      DO i = 1, Ncoll
         Ipi(11,i) = Ipi(5,i)
         IF (Lo(10)) Ipi(11,i) = i
         NPX = MAX0(NPX,Ipi(11,i))
      ENDDO
      RETURN
  200 WRITE (MW,99100)
99100 FORMAT (
     &' PROJECTILE-TARGET ANTISYMMETRISATION VALID ONLY FOR SPIN OF PART
     &ICLE EQUAL TO SPIN OF TARGET AND POSITIVE PARITY'/49X,
     &'AND SCHROEDINGER FORMALISM')
      GOTO 600
  300 sp1 = 0.5D0*DFLOAT(Ipi(2,iv))
      WRITE (MW,99105) sp1
99105 FORMAT (' PARTICLE SPIN',F5.1,' NOT ALLOWED FOR DIRAC EQUATION')
      GOTO 500
  400 WRITE (MW,99110) k, Npp
99110 FORMAT (' POTENTIAL',I3,' WILL NOT BE READ.TOTAL NUMBER IS:',I3)
  500 WRITE (MW,99125) iv, sp2, spi, e, k
  600 WRITE (MW,99115)
99115 FORMAT (/' IN LECL  ... STOP ...')
      STOP
99120 FORMAT (/' TARGET',14X,'MASS =',F10.5,11X,'PRODUCT OF CHARGES =',
     &        F6.0,11X,'AT**1/3 =',D15.6/' INCIDENT PARTICLE',3X,
     &        'MASS =',F10.5,3X,'REDUCED MASS =',D15.6,3X,'SPIN =',F4.1,
     &        3X,'AP**1/3 =',D15.6)
99125 FORMAT (' N =',I3,' -   SPIN =',F4.1,A1,' EXCITATION ENERGY =',
     &        F8.4,' MEV',10X,'POTENTIAL',I5)
99130 FORMAT (7F10.5)
      END
C 01/01/04                                                      ECIS03  LECT-000
      SUBROUTINE LECT(Nbet,Ipi,Ipp,Pip,Wv,Nbta,Beta,Val,Fiss,Gam,Npp,Rm,
     &                Aconv,Idt,H,Nspin,Ism,Iqm,Iqmax,Scn,Ck,Cm,Lo)
C LECT READS ALL INPUT EXCEPT THE 5 FIRST DATA CARDS,THE LEVELS, THE    LECT-003
C EXPERIMENTAL DATA,THE SEARCH CONDITIONS,THE NUCLEAR REDUCED MATRIX    LECT-004
C ELEMENTS AND THE FORM FACTORS.                                        LECT-005
C INPUT VARIABLES:  NBET:     NUMBER OF PHONONS                         LECT-006
C                   IPI(J,*): MULTIPLICITY OF PARTICLE FOR J=2          LECT-007
C                             PRODUCT OF CHARGES FOR J=4                LECT-008
C                   IPP(1,*): FIRST LEVEL USING A POTENTIAL             LECT-009
C                   WV(J,*):  FOR J = 1, 2, 3, 12: SEE CALX             LECT-010
C                   NPP:      NUMBER OF OPTICAL POTENTIALS              LECT-011
C                   RM:       MATCHING RADIUS (VALUE READ)              LECT-012
C                   ACONV:    CONVERGENCE PARAMETER FOR POTENTIALS.     LECT-013
C                   IDT:      LENGTH FREE FOR BETA                      LECT-014
C                   H:        INTEGRATION STEP (VALUE READ)             LECT-015
C                   CK:       2*CM/(H BAR)**2                           LECT-016
C                   CM:       NUCLEAR MASS IN MEV                       LECT-017
C                   LO:       LOGICAL CONTROLS. FOR 1, 3, 4, 5, 6, 7, 8,LECT-018
C                             10, 11, 12, 13, 14, 16, 17, 19, 44, 46,   LECT-019
C                             66, 81, 82, 85, 86 AND 99, SEE DESCRIPTIONLECT-020
C                             OF INPUT. 101-200, ARE OPPOSITE TO 1-100. LECT-021
C                   LO(209)=.TRUE. DIRAC POTENTIALS                     LECT-022
C INPUT VARIABLE BY COMMON                                              LECT-023
C /NCOMP/           NFISS:    NUMBER OF FISSION TRANSM. COEFFICIENTS    LECT-024
C                   NRD:      NUMBER OF GAMMA TRANSMISSION COEFFICIENTS LECT-025
C                   NCONT:    NUMBER OF CONTINUUM FOR COMPOUND NUCLEUS  LECT-026
C                   NCONS:    NUMBER OF LEVEL DENSITIES NEEDED          LECT-027
C                   NCOLX:    TOTAL NUMBER OF DISCRETE LEVELS           LECT-028
C OUTPUT VARIABLES: NBET:     NUMBER OF PHONONS PLUS DEFORMATIONS       LECT-029
C                   IPP,PIP:  EQUIVALENT BY CALL: DISPERSION PARAMETERS LECT-030
C                   NBTA(J,I) QUANTUM NUMBERS OF DEFORM. FOR J=17,18    LECT-031
C                   BETA(J,I) NUCLEAR DEFORMATION FOR POTENTIAL J=1,8   LECT-032
C                   VAL(I,N)  (25 OPTICAL +9 FOLDING PARAMETERS)* NPP   LECT-033
C                   FISS:     FISSION DATA FOR COMPOUND NUCLEUS         LECT-034
C                   GAM:      GAMMA DATA FOR COMPOUND NUCLEUS           LECT-035
C                   RM:       MATCHING RADIUS (DEFAULT OPTION)          LECT-036
C                   H:        INTEGRATION STEP (DEFAULT OPTION)         LECT-037
C                   NSPIN:    TWICE THE K-VALUE OF THE ROTATIONAL BAND  LECT-038
C                   ISM:      NUMBER OF INTEGRATION STEPS               LECT-039
C                   IQM:      MAXIMUM L-VALUE OF DEF. IN ROTAT. MODEL   LECT-040
C                   IQMAX:    MAXIMUM L-EXPANSION IN ROTATIONAL MODEL   LECT-041
C                   SCN:      DESCRIPTIONS OF LEVEL DENSITIES           LECT-042
C                   LO(201)=.TRUE. NO REAL SPIN-ORBIT POTENTIAL         LECT-043
C                   LO(202)=.TRUE. NO IMAGINARY SPIN-ORBIT POTENTIAL    LECT-044
C                   LO(203)=.TRUE. NO COULOMB SPIN-ORBIT POTENTIAL      LECT-045
C                   LO(208)=.TRUE. DIAGONAL COULOMB CORRECT. ARE NEEDED LECT-046
C                   LO(229)=.TRUE. REAL SPIN-ORBIT OR DIRAC EQUATION    LECT-047
C                   LO(230)=.TRUE. IMAG. SPIN-ORBIT OR DIRAC EQUATION   LECT-048
C OUTPUT VARIABLE BY COMMON   (SEE INPUT DESCRIPTION FOR MOST OF THEM)  LECT-049
C /ANGL/            THETA1,THETA2,DTHETA,DTHE: INDICATIONS FOR OUTPUT ATLECT-050
C                             EQUIDISTANT ANGLES.                       LECT-051
C /NCOMP/           AZ(6):    DEFORMED SPIN-ORBIT PARAMETERS            LECT-052
C                             SEE ALSO COMMENT IN SUBROUTINE QUAN       LECT-053
C                   BZ(5):    HAUSER-FESHBACH AND MOLDAUER'S PARAMETERS LECT-054
C                   TG0,BN,FNUG,EGD,GGD:  MOLDAUER'S DATA FOR GIANT     LECT-055
C                                         RESONANCE                     LECT-056
C***********************************************************************LECT-057
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      REAL*8 ACN1, ACN2, AZ(6), BN, BZ(5), DTHe, DTHeta, EGD, FNUg, GGD,
     &       SGSq, TG0, TG1, THEta1, THEta2
      INTEGER MR, MS, MW, NCOj, NCOlx, NCOns, NCOnt, NDP, NDQ, NFIss,
     &        NIE, NRD, NSP(3)
      COMMON /ANGL  / THEta1, THEta2, DTHeta, DTHe
      COMMON /INOUT / MR, MW, MS
      COMMON /NCOMP / NSP, NFIss, NRD, NCOnt, NCOj, NCOns, NIE, NCOlx,
     &                NDP, NDQ, ACN1, ACN2, AZ, BZ, TG0, BN, FNUg, EGD,
     &                GGD, TG1, SGSq
C
C Dummy arguments
C
      REAL*8 Aconv, Ck, Cm, H, Rm
      INTEGER Idt, Iqm, Iqmax, Ism, Nbet, Npp, Nspin
      REAL*8 Beta(9,1), Fiss(2,1), Gam(1), Pip(15,1), Scn(7,1),
     &       Val(34,1), Wv(18,1)
      INTEGER Ipi(11,*), Ipp(2,15,1), Nbta(18,1)
      LOGICAL Lo(250)
C
C Local variables
C
      CHARACTER*4 aleg(6), bleg(2), cleg(6)
      REAL*8 am3, aspin, bm3, cm3, dm3, ro(6), w1, w2, w3, x2
      DOUBLE PRECISION DABS, DLOG, DMAX1, DMIN1, DSQRT
      INTEGER i, i1, ij, ip, ippip, iq, j, j1, jq, k, l, m, na
      INTEGER IDINT, MIN0
      LOGICAL lt(6)
C
C
      DATA bleg, cleg/'NOT ', '    ', ' VOL', 'UME ', ' SCA', 'LAR ',
     &     ' VEC', 'TOR '/
      IF (Lo(8)) THEN
         x2 = DSQRT(0.125D0*Ck*Wv(3,1)
     &        *(Wv(3,1)/Cm + 2.D0*Wv(1,1) + 2.D0*Wv(2,1))
     &        *(Wv(3,1)/Cm + 2.D0*Wv(1,1))*(Wv(3,1)/Cm + 2.D0*Wv(2,1)))
     &        /(Wv(3,1)/Cm + Wv(1,1) + Wv(2,1))
      ELSE
         x2 = DSQRT(Ck*Wv(3,1)*Wv(1,1)*Wv(2,1)/(Wv(1,1) + Wv(2,1)))
      ENDIF
      Iqm = 0
      IF (Nbet.NE.0) THEN
C INPUT OF PHONON DEFORMATIONS IN VIBRATIONAL AND ROTATIONAL MODELS     LECT-077
         DO i = 1, Nbet
            READ (MR,99210) Nbta(17,i), Nbta(18,i), Beta(1,i), k
            DO j = 2, 8
               Beta(j,i) = Beta(1,i)
            ENDDO
            IF (Lo(5)) READ (MR,99215) (Beta(j,i),j = 2,8)
            WRITE (MW,99005) i, Nbta(17,i), Nbta(18,i),
     &                       (Beta(j,i),j = 1,8)
99005       FORMAT (10X,'PHONON',I3,5X,'L =',I3,5X,'K =',I3,5X,'BETA =',
     &              8F8.5)
            IF (.NOT.(Lo(116))) THEN
               IF (k.EQ.0) k = 1
               k = MIN0(k,NCOlx)
               am3 = Wv(2,k)**.33333333333333D0
               bm3 = Wv(1,k)**.33333333333333D0
               cm3 = am3/(am3 + bm3)
               dm3 = 1.D0
               IF (Lo(6)) dm3 = cm3
               DO j = 1, 6
                  Beta(j,i) = Beta(j,i)*cm3/dm3
               ENDDO
               Beta(7,i) = Beta(7,i)*cm3**Nbta(17,i)/dm3
               Beta(8,i) = Beta(8,i)*cm3**Nbta(17,i)/dm3
               WRITE (MW,99010) k, (Beta(j,i),j = 1,8)
99010          FORMAT (12X,'AFTER HEAVY ION CORRECTION I =',I2,
     &                 '  BETA =',8F8.5)
            ENDIF
         ENDDO
      ENDIF
      IF (.NOT.(Lo(7))) THEN
         IF (.NOT.(Lo(101))) THEN
C INPUT OF DEFORMATIONS FOR THE ROTATIONAL MODEL                        LECT-100
            READ (MR,99210) Iqm, Iqmax, aspin, k
            Nspin = IDINT(2.D0*aspin + 0.1D0)
            iq = Nbet + 1
            jq = Nbet + Iqm/2
            IF (.NOT.(Lo(103))) THEN
               jq = Nbet + Iqm
               IF ((Iqm.GT.35) .OR. (Iqmax.GT.8)) THEN
                  WRITE (MW,99015) Iqm, Iqmax
99015             FORMAT (' IQM =',I3,' OR IQMAX =',I3,
     &' ARE LARGER THAN THE MAXIMUM VALUES 35 OR 8 OF THE ASYMMETRIC ROT
     &ATIONAL MODEL')
                  GOTO 700
               ENDIF
            ENDIF
            IF (9*jq.GT.Idt) CALL MEMO('LECT',Idt,9*jq,2)
            READ (MR,99215) (Beta(1,i),i = iq,jq)
            m = 0
            l = 0
            DO i = iq, jq
               IF (Lo(3)) THEN
                  m = m + 2
                  IF (m.GT.l) THEN
                     l = l + 2
                     m = 0
                  ENDIF
               ELSE
                  l = 2*(i - Nbet)
               ENDIF
               Nbta(17,i) = l
               Nbta(18,i) = m
               DO j = 2, 8
                  Beta(j,i) = Beta(1,i)
               ENDDO
            ENDDO
            IF (Lo(5)) READ (MR,99215) ((Beta(j,i),j = 2,8),i = iq,jq)
            WRITE (MW,99020) Iqmax, aspin
99020       FORMAT (/10X,'MULTIPOLE EXPANSION UP TO IQMAX =',I3,20X,
     &              'K =',F7.2,' BAND')
            WRITE (MW,99220) (i,Nbta(17,i),Nbta(18,i),(Beta(j,i),j = 1,8
     &                       ),i = iq,jq)
            IF (.NOT.(Lo(116))) THEN
               IF (k.EQ.0) k = 1
               k = MIN0(k,NCOlx)
               am3 = Wv(2,k)**.33333333333333D0
               bm3 = Wv(1,k)**.33333333333333D0
               cm3 = am3/(am3 + bm3)
               dm3 = 1.D0
               IF (Lo(6)) dm3 = cm3
               DO i = iq, jq
                  IF (Nbta(18,i).EQ.0) THEN
                     DO k = 1, 6
                        Beta(k,i) = Beta(k,i)*cm3/dm3
                     ENDDO
                     Beta(7,i) = Beta(7,i)*cm3**Nbta(17,i)/dm3
                     Beta(8,i) = Beta(8,i)*cm3**Nbta(17,i)/dm3
                  ENDIF
               ENDDO
               WRITE (MW,99225) k
               WRITE (MW,99220) (i,Nbta(17,i),Nbta(18,i),(Beta(j,i),j =
     &                          1,8),i = iq,jq)
            ENDIF
            Nbet = jq
C ANHARMONIC VIBRATIONAL MODEL WITH DIFFERENT DEFORMATIONS              LECT-149
         ELSEIF (.NOT.(Lo(103))) THEN
            IF (36.GT.Idt) CALL MEMO('LECT',Idt,36,2)
            WRITE (MW,99025)
99025       FORMAT (/10X,'RATIOS OF ANHARMONIC DEFORMATIONS'/25X,'V',9X,
     &              'W',8X,'VS',8X,'WS',7X,'VSO',7X,'WSO',6X,
     &              'COUL S.O. COUL')
            DO i = 1, 4
               DO j = 1, 8
                  Beta(j,i) = 1.D0
               ENDDO
               Nbta(17,i) = 0
               Nbta(18,i) = 0
               IF (Lo(5)) READ (MR,99215) (Beta(j,i),j = 1,8)
               WRITE (MW,99030) i, Nbta(17,i), (Beta(j,i),j = 1,8)
99030          FORMAT (' ORDER',I3,6X,I3,2X,8F10.5)
            ENDDO
            Nbet = 4
            IF (.NOT.(Lo(116))) THEN
               READ (MR,99035) (Nbta(17,j),j = 1,4), k
99035          FORMAT (14I5)
               IF (k.EQ.0) k = 1
               k = MIN0(k,NCOlx)
               am3 = Wv(2,k)**.33333333333333D0
               bm3 = Wv(1,k)**.33333333333333D0
               cm3 = am3/(am3 + bm3)
               dm3 = 1.D0
               IF (Lo(6)) dm3 = cm3
               WRITE (MW,99225) k
               DO i = 2, 4
                  IF (Nbta(17,i).EQ.0) Nbta(17,i) = 2
                  IF (Nbta(17,i).LT.0) Nbta(17,i) = 0
                  DO j = 1, 6
                     Beta(j,i) = Beta(j,i)*(cm3/dm3)**(i - 1)
                  ENDDO
                  Beta(7,i) = Beta(7,i)*(cm3**Nbta(17,i)/dm3)**(i - 1)
                  Beta(8,i) = Beta(8,i)*(cm3**Nbta(17,i)/dm3)**(i - 1)
                  WRITE (MW,99040) i, Nbta(17,i), (Beta(j,i),j = 1,8)
99040             FORMAT (' ORDER',I3,'  IQ =',I3,2X,8F10.5)
               ENDDO
            ENDIF
         ENDIF
      ENDIF
C INPUT OF OPTICAL MODEL PARAMETERS                                     LECT-179
      w2 = 10.D20
      Lo(201) = .TRUE.
      Lo(202) = .TRUE.
      Lo(203) = .TRUE.
      Lo(208) = .FALSE.
      lt(4) = .TRUE.
      lt(6) = .TRUE.
      w1 = 0.D0
      w3 = x2/(Aconv*Wv(3,1))
      DO ip = 1, Npp
         ij = Ipp(1,1,ip)
         IF (ij.EQ. - 1) THEN
            Ipp(1,1,ip) = 1
            WRITE (MW,99045) ip
99045       FORMAT (/' ***** NO STATE FOR THE POTENTIAL',I3,
     &              ' *** WE USE THE GROUND STATE'/)
            ij = 1
         ENDIF
         IF (.NOT.(Lo(7))) THEN
            am3 = Wv(2,ij)**.33333333333333D0
            IF (Lo(16)) am3 = am3 + Wv(1,ij)**.33333333333333D0
            WRITE (MW,99050) ip, am3
99050       FORMAT (//' OPTICAL POTENTIALS  **',I3,
     &              ' **     REDUCED RADIUS MULTIPLIED BY  ',D15.6/)
            DO i = 1, 6
               aleg(i) = bleg(2)
               READ (MR,99230) Val(3*i - 2,ip), ro(i), Val(3*i,ip)
               Val(3*i - 1,ip) = am3*ro(i)
               IF (Val(3*i - 2,ip).NE.0.D0) THEN
                  w1 = DMAX1(w1,Val(3*i - 1,ip)
     &                 + DLOG(w3*DABS(Val(3*i-2,ip)))*Val(3*i,ip))
                  w2 = DMIN1(w2,Val(3*i,ip))
               ENDIF
            ENDDO
            lt(1) = Ipi(2,ij).EQ.1 .OR. Val(13,ip).EQ.0.D0
            lt(2) = Ipi(2,ij).EQ.1 .OR. Val(16,ip).EQ.0.D0
            Lo(201) = Lo(201) .AND. lt(1)
            Lo(202) = Lo(202) .AND. lt(2)
C OUTPUT OF OPTICAL PARAMETERS                                          LECT-212
            IF (Lo(112)) aleg(2) = bleg(1)
            IF (lt(1) .OR. Lo(113)) aleg(5) = bleg(1)
            IF (lt(2) .OR. Lo(114)) aleg(6) = bleg(1)
            aleg(4) = aleg(2)
            WRITE (MW,99055) (aleg(i),Val(3*i - 2,ip),Val(3*i - 1,ip),
     &                       ro(i),Val(3*i,ip),i = 1,6)
99055       FORMAT (2X,A4,'DEFORMED  VOLUME/SCALAR REAL POTENTIAL'/14X,
     &              'DEPTH',F12.6,' MEV   RADIUS',F10.6,
     &              ' FERMI (REDUCED VALUE',F9.6,')    DIFFUSENESS',
     &              F9.6,' FERMI'//2X,A4,
     &              'DEFORMED  VOLUME/SCALAR IMAGINARY POTENTIAL'/14X,
     &              'DEPTH',F12.6,' MEV   RADIUS',F10.6,
     &              ' FERMI (REDUCED VALUE',F9.6,')    DIFFUSENESS',
     &              F9.6,' FERMI'//2X,A4,
     &              'DEFORMED  SURFACE/VECTOR REAL POTENTIAL'/14X,
     &              'DEPTH',F12.6,' MEV   RADIUS',F10.6,
     &              ' FERMI (REDUCED VALUE',F9.6,')    DIFFUSENESS',
     &              F9.6,' FERMI'//2X,A4,
     &              'DEFORMED  SURFACE/VECTOR IMAGINARY POTENTIAL'/14X,
     &              'DEPTH',F12.6,' MEV   RADIUS',F10.6,
     &              ' FERMI (REDUCED VALUE',F9.6,')    DIFFUSENESS',
     &              F9.6,' FERMI'//2X,A4,
     &              'DEFORMED  REAL SPIN-ORBIT/TENSOR POTENTIAL'/14X,
     &              'DEPTH',F12.6,' MEV   RADIUS',F10.6,
     &              ' FERMI (REDUCED VALUE',F9.6,')    DIFFUSENESS',
     &              F9.6,' FERMI'//2X,A4,
     &              'DEFORMED  IMAGINARY SPIN-ORBIT/TENSOR POTENTIAL'/14
     &              X,'DEPTH',F12.6,' MEV   RADIUS',F10.6,
     &              ' FERMI (REDUCED VALUE',F9.6,')    DIFFUSENESS',
     &              F9.6,' FERMI')
            READ (MR,99230) ro(1), Val(21,ip), Val(25,ip)
            READ (MR,99230) Val(22,ip), ro(2), Val(24,ip)
            IF (Lo(99)) Val(21,ip) = 0.D0
            IF (Lo(99)) Val(24,ip) = 0.D0
            Val(19,ip) = Ipi(4,ij)
            Val(20,ip) = am3*ro(1)
            lt(3) = Val(19,ip).EQ.0.D0
            lt(4) = lt(3) .AND. lt(4)
            aleg(1) = bleg(2)
            IF (lt(3) .OR. Lo(111)) aleg(1) = bleg(1)
            Val(23,ip) = am3*ro(2)
            lt(5) = Val(22,ip).EQ.0 .OR. Ipi(2,ij).EQ.1
            Lo(203) = Lo(203) .AND. lt(5)
            lt(6) = lt(5) .AND. lt(6)
            aleg(2) = bleg(2)
            IF (lt(5) .OR. Lo(119)) aleg(2) = bleg(1)
            WRITE (MW,99060) (aleg(i),Val(3*i + 16,ip),Val(3*i + 17,ip),
     &                       ro(i),Val(3*i + 18,ip),i = 1,2), Val(25,ip)
99060       FORMAT (/2X,A4,
     &              'DEFORMED  COULOMB POTENTIAL'/' PRODUCT OF CHARGES',
     &              F9.0,10X,'RADIUS',F10.6,' FERMI (REDUCED VALUE',
     &              F9.6,')    DIFFUSENESS',F9.6,' FERMI'//2X,A4,
     &              'DEFORMED  SPIN-ORBIT COULOMB POTENTIAL'/14X,
     &              'DEPTH',F12.6,' MEV   RADIUS',F10.6,
     &              ' FERMI (REDUCED VALUE',F9.6,')    DIFFUSENESS',
     &              F9.6,' FERMI'/14X,'THIRD CHARGE PARAMETER',F9.6)
            Lo(208) = Lo(208) .OR. Val(22,ip).NE.0. .OR.
     &                (Lo(209) .AND. Val(19,ip).NE.0.)
            w1 = DMAX1(w1,Val(20,ip) + 10.D0*Val(21,ip),Val(23,ip)
     &           + 10.D0*Val(24,ip))
            IF (Val(21,ip).NE.0.D0) w2 = DMIN1(w2,Val(21,ip))
            IF (Val(24,ip).NE.0.D0) w2 = DMIN1(w2,Val(24,ip))
            IF (.NOT.(Lo(117))) THEN
C INPUT OF FOLDING PARAMETERS                                           LECT-244
               READ (MR,99230) (Val(i,ip),i = 26,34)
               WRITE (MW,99065) (Val(i,ip),i = 26,34)
99065          FORMAT (/' *** FOLDING MODEL ***'/' REAL PART      V =',
     &                 F10.4,6X,'R =',F10.4,6X,'A =',
     &                 F10.4/' IMAGINARY PART V =',F10.4,6X,'R =',F10.4,
     &                 6X,'A =',F10.4/' COULOMB PART   V =',F10.4,6X,
     &                 'R =',F10.4,6X,'A =',F10.4/)
            ENDIF
         ENDIF
         IF (.NOT.(Lo(110))) THEN
C INPUT OF DISPERSION PARAMETERS                                        LECT-248
            READ (MR,99235) ippip, Ipp(2,1,ip), (Pip(j,ip),j = 3,8)
            READ (MR,99235) Ipp(1,2,ip), Ipp(2,2,ip),
     &                      (Pip(j,ip),j = 9,14)
            READ (MR,99230) Pip(15,ip)
            IF (MOD(Ipp(2,1,ip),2).NE.0 .OR. MOD(Ipp(1,2,ip),2)
     &          .NE.0 .OR. MOD(Ipp(2,2,ip),2).NE.0) GOTO 100
            IF ((Ipp(1,2,ip).NE.0 .AND. Val(4,ip).EQ.0.D0) .OR.
     &          (Ipp(2,2,ip).NE.0 .AND. Val(10,ip).EQ.0.D0)) GOTO 200
            IF (Pip(7,ip).NE.0.D0 .AND. Val(13,ip).EQ.0.D0) GOTO 300
            IF (Pip(8,ip).NE.0.D0 .AND. Val(16,ip).EQ.0.D0) GOTO 400
            IF (Pip(15,ip).NE.0.D0 .AND. Val(1,ip).EQ.0.D0) GOTO 500
            IF (ippip.EQ.1) THEN
               Ipp(1,1,ip) = -Ipp(1,1,ip)
               WRITE (MW,99070)
99070          FORMAT (' USE OF LABORATORY ENERGIES')
            ELSE
               ippip = 0
               WRITE (MW,99075)
99075          FORMAT (' USE OF CENTER OF MASS ENERGIES')
            ENDIF
            IF (Pip(3,ip).EQ.0.D0) Pip(3,ip) = Wv(9*ippip + 3,ij)
            IF (Pip(4,ip).EQ.0.D0) Pip(4,ip) = -6.8D0
            IF (Pip(5,ip).EQ.0.D0) Pip(5,ip) = Pip(4,ip)
            WRITE (MW,99080) (Pip(i,ip),i = 3,5)
99080       FORMAT (' IMAGINARY DEPTHS READ FOR',F12.6,
     &              ' MEV   FERMI ENERGY:',F12.6,
     &              ' MEV   TRESHOLD ENERGY:',F12.6)
            IF (Pip(7,ip).NE.0.D0) WRITE (MW,99085) Val(13,ip),
     &          Pip(7,ip), Pip(3,ip)
99085       FORMAT (
     &             ' EXPONENTIAL DECREASE OF REAL SPIN-ORBIT POTENTIAL:'
     &             ,3X,F12.6,'*EXP(-',F10.6,'(E-',F10.6,')) MEV')
            IF (Pip(8,ip).NE.0.D0) WRITE (MW,99090) Val(16,ip),
     &          Pip(8,ip), Pip(3,ip)
99090       FORMAT (
     &             ' LINEAR DECREASE OF IMAGINARY SPIN-ORBIT POTENTIAL:'
     &             ,3X,F12.6,'-',F10.6,'*(E-',F10.6,') MEV')
            IF (Pip(15,ip).NE.0.D0) WRITE (MW,99095) Val(1,ip),
     &          Pip(15,ip), Pip(3,ip)
99095       FORMAT (' EXPONENTIAL DECREASE OF HARTREE-FOCK POTENTIAL:',
     &              6X,F12.6,'*EXP(-',F10.6,'(E-',F10.6,')) MEV')
            i1 = 1
            IF (Lo(209)) i1 = 3
            IF (Ipp(1,2,ip).LT.0) THEN
               WRITE (MW,99245) cleg(i1), cleg(i1 + 1), Ipp(1,2,ip),
     &                          Pip(9,ip), Pip(10,ip), Pip(11,ip)
            ELSE
               WRITE (MW,99240) cleg(i1), cleg(i1 + 1), Ipp(1,2,ip),
     &                          Pip(9,ip)
               IF (Ipp(2,1,ip).NE.0 .OR. Pip(10,ip).NE.0.D0)
     &             WRITE (MW,99100) Pip(4,ip), Pip(6,ip), Ipp(2,1,ip),
     &                              Pip(10,ip), Pip(11,ip)
99100          FORMAT (' FOR ENERGIES ''E'' SUCH THAT |',F12.6,
     &                 '-''E''| >',F12.6,
     &                 ' MEV'/' CORRECTIONS WITH POWER',I3,
     &                 ' FOR NEGATIVES ENERGIES AND COEFFICIENT',F12.6,
     &                 ' FOR POSITIVE ENERGIES'/15X,'DAMPING FACTOR',
     &                 F12.6)
            ENDIF
            IF (Lo(209)) THEN
               IF (Ipp(2,2,ip).GE.0) WRITE (MW,99240) cleg(5), cleg(6),
     &             Ipp(2,2,ip), Pip(12,ip)
               IF (Ipp(2,2,ip).LT.0) WRITE (MW,99245) cleg(5), cleg(6),
     &             Ipp(2,2,ip), Pip(12,ip), Pip(13,ip), Pip(14,ip)
            ELSEIF (Ipp(2,2,ip).LT.0) THEN
               IF (Pip(13,ip).EQ.0.D0) Pip(13,ip) = 2.D0*Pip(12,ip)
               WRITE (MW,99105) Ipp(2,2,ip), Pip(12,ip), Pip(13,ip)
99105          FORMAT (' SURFACE:   POWER =',I3,5X,'DIFFERENCE OF B1 =',
     &                 F10.4,5X,'AND B2 =',F10.4)
            ELSE
               WRITE (MW,99110) Ipp(2,2,ip), Pip(12,ip), Pip(13,ip),
     &                          Pip(14,ip)
99110          FORMAT (' SURFACE:   POWER =',I3,5X,'B =',F10.4,5X,
     &                 ' DECREASING RATE =',F10.6,5X,
     &                 ' NON LOCALITY PARAMETER =',F10.4)
            ENDIF
         ENDIF
      ENDDO
      IF (Lo(99)) Lo(202) = .FALSE.
      IF (.NOT.(Lo(107))) THEN
         DO ij = 1, NCOlx
            lt(4) = lt(4) .AND. Ipi(4,ij).EQ.0.
            lt(6) = lt(6) .AND. Ipi(2,ij).EQ.1
            Lo(202) = Lo(202) .AND. Ipi(2,ij).EQ.1
         ENDDO
         w1 = 20.D0
         Lo(201) = Lo(202)
         Lo(203) = Lo(202) .OR. lt(6)
         Lo(208) = Lo(209) .OR. (.NOT.Lo(203))
      ENDIF
      Lo(201) = Lo(201) .AND. Lo(202)
      Lo(229) = (.NOT.Lo(201)) .OR. Lo(209)
      Lo(230) = (.NOT.Lo(202)) .OR. Lo(209)
      Lo(13) = .NOT.(Lo(113) .OR. Lo(201))
      Lo(14) = .NOT.(Lo(114) .OR. Lo(202))
      Lo(11) = .NOT.(Lo(111) .OR. lt(4))
      Lo(19) = .NOT.(Lo(119) .OR. lt(6))
      IF (Lo(19)) Lo(11) = .TRUE.
      Lo(208) = Lo(208) .OR. Lo(44)
      IF (Lo(144) .AND. Lo(46)) Lo(208) = .FALSE.
C DEFAULT VALUE OF MATCHING RADIUS: MAX(R*A**1/3+10*A)                  LECT-316
C DEFAULT VALUE FOR INTEGRATION STEP: MIN(MIN(A)/2,1/(2*K))             LECT-317
      IF (Rm.LE.0.D0) Rm = w1
      IF (H.LE.0.D0) H = DMIN1(w2/2.D0,0.5D0/x2)
      Ism = IDINT(Rm/H + 0.5D0)
      H = DFLOAT(Ism)
      H = Rm/H
      Rm = H*Ism
      WRITE (MW,99115) H, Rm
99115 FORMAT (/' INTEGRATION STEP SIZE =',F8.5,10X,'MATCHING RADIUS =',
     &        F8.3,' FERMI')
      IF (.NOT.(Lo(66))) THEN
C INPUT OF LIMITS FOR CALCULATION AT EQUIDISTANT ANGLES                 LECT-326
         READ (MR,99215) THEta1, DTHeta, THEta2, DTHe
         IF (DTHeta.EQ.0.D0) DTHeta = 1.D0
         IF ((THEta2 - THEta1)*DTHeta.LT.0.D0) DTHeta = -DTHeta
         WRITE (MW,99120) THEta1, DTHeta, THEta2, DTHe
99120    FORMAT (/' SCATTERING ANGLES FROM',F7.3,' IN STEPS OF',F7.3,
     &           ' UP TO',F8.3,' DEGREES   AVERAGED WITH +/-',F8.3,
     &           ' DEGREES'/)
      ENDIF
C INPUT OF DEFORMED SPIN-ORBIT PARAMETERS                               LECT-331
      AZ(1) = 0.D0
      AZ(2) = 1.D0
      AZ(3) = 1.D0
      AZ(4) = 0.D0
      AZ(5) = 1.D0
      AZ(6) = 1.D0
      IF (.NOT.(Lo(104))) THEN
         READ (MR,99215) AZ
         WRITE (MW,99125) AZ
99125    FORMAT (10X,'****** AZ ******',D15.8)
      ENDIF
      IF (.NOT.(Lo(181))) THEN
         READ (MR,99215) BZ
         IF (BZ(1).EQ.0.D0) BZ(1) = 1.4142D0
         IF (Lo(182)) THEN
            IF (BZ(3).EQ.0.D0) BZ(3) = 1.212D0
            IF (BZ(4).EQ.0.D0) BZ(4) = 0.78D0
            IF (BZ(5).EQ.0.D0) BZ(5) = 0.228D0
            WRITE (MW,99130) (BZ(i),i = 1,5)
99130       FORMAT (/
     & ' SQUARE ROOT OF ELASTIC ENHANCEMENT FACTOR WITHOUT FLUCTUATIONS'
     & ,7X,D15.8/' PARTICLE WIDTH FLUCTUATION DEGREE OF FREEDOM',25X,
     & D15.8/' PARAMETERS OF MOLDAUER''S FORMULA',22X,3D15.8)
            IF (.NOT.(Lo(185))) THEN
               WRITE (MW,99135) NFIss
99135          FORMAT (/I5,' FISSION DATA')
               DO i = 1, NFIss
                  READ (MR,99215) Fiss(1,i), Fiss(2,i)
                  IF (Fiss(2,i).LT.0.5D0) Fiss(2,i) = 0.D0
                  WRITE (MW,99140) Fiss(1,i), Fiss(2,i)
99140             FORMAT (10X,2D15.8)
               ENDDO
            ENDIF
            IF (.NOT.(Lo(186))) THEN
               WRITE (MW,99145)
99145          FORMAT (/' GAMMA DATA')
               IF (NRD.GT.0) THEN
                  READ (MR,99215) (Gam(i),i = 1,NRD)
                  WRITE (MW,99150) (Gam(i),i = 1,NRD)
99150             FORMAT (8D15.8)
               ELSE
                  READ (MR,99215) TG0, BN, FNUg, EGD, GGD
                  READ (MR,99215) Scn(7,1), (Scn(i,1),i = 1,6)
                  IF (BN.EQ.0.D0) BN = 8.D0
                  IF (FNUg.LT.1.D0) FNUg = 20.D0
                  IF (TG0.EQ.0.D0) Lo(86) = .FALSE.
                  WRITE (MW,99155) TG0, BN, FNUg, EGD, GGD
99155             FORMAT (5X,'TG0:',D13.6,6X,'BN:',D13.6,4X,'FNUG:',
     &                    D13.6,5X,'EGD:',D13.6,5X,'GGD:',D13.6)
                  WRITE (MW,99160)
99160             FORMAT (' DENSITY OF STATES GIVEN BY')
                  j = 1
                  WRITE (MW,99250) j, (Scn(i,j),i = 1,7)
                  na = IDINT(Wv(2,1) + Wv(1,1) + .5D0)
                  CALL LDEN(na,Scn(1,1))
               ENDIF
            ENDIF
            IF (NCOnt.NE.0) THEN
               WRITE (MW,99165)
99165          FORMAT (' DENSITY OF STATES FOR CONTINUUM GIVEN BY')
               j1 = 1 + NCOns - NCOnt
               DO j = j1, NCOns
                  READ (MR,99215) Scn(7,j), (Scn(i,j),i = 1,6)
                  WRITE (MW,99250) j, (Scn(i,j),i = 1,7)
                  na = IDINT(Wv(2,NCOlx + j - NCOns) + .5D0)
                  CALL LDEN(na,Scn(1,j))
               ENDDO
            ENDIF
         ELSE
            IF (BZ(2).EQ.0.D0) BZ(2) = 3.5D0
            IF (BZ(3).EQ.0.D0) BZ(3) = 100.D0
            WRITE (MW,99170) (BZ(i),i = 1,3)
99170       FORMAT (/' SQUARE ROOT OF ELASTIC ENHANCEMENT FACTOR',8X,
     &              D15.8/' SPIN CUT-OFF PARAMETER',27X,
     &              D15.8/' SQUARE ROOT OF LEVEL DENSITY PARAMETER',11X,
     &              D15.8)
         ENDIF
      ENDIF
      DO i = 1, 100
         Lo(i + 100) = .NOT.Lo(i)
      ENDDO
      RETURN
  100 WRITE (MW,99175) ip, Ipp(1,2,ip), Ipp(2,2,ip), Ipp(2,1,ip)
99175 FORMAT (' FOR DISPERSION RELATIONS OF POTENTIAL',I3,
     &        ' ALL THE FOLLOWING INTEGERS MUST BE EVEN'/10X,'NV =',I4,
     &        10X,'NS =',I4,10X,'N2 =',I4)
      GOTO 700
  200 WRITE (MW,99180) ip, (Ipp(i,2,ip),Val(6*i - 2,ip),i = 1,2)
99180 FORMAT (' THE POTENTIAL',I4,
     &' CANNOT BE USED FOR DISPERSION RELATIONS BECAUSE AN IMAGINARY STR
     &ENGTH IS 0:'/10X,'NV =',I3,'  WV =',D13.6,10X,'NS =',I3,'  WS =',
     &D13.6)
      GOTO 600
  300 WRITE (MW,99185) ip, ip, Pip(7,ip), Val(13,ip)
99185 FORMAT (' THE POTENTIAL',I4,
     &' CANNOT BE USED WITH VARIATION OF THE REAL SPIN-ORBIT OF WHICH TH
     &E STRENGTH IS 0':/10X,'PIP(7,',I2,') =',D13.6,'  VLS =',D13.6)
      GOTO 600
  400 WRITE (MW,99190) ip, ip, Pip(8,ip), Val(16,ip)
99190 FORMAT (' THE POTENTIAL',I4,
     &' CANNOT BE USED WITH VARIATION OF THE IMAGINARY SPIN-ORBIT OF WHI
     &CH THE STRENGTH IS 0':/10X,'PIP(8,',I2,') =',D13.6,'  WLS =',
     &D13.6)
      GOTO 600
  500 WRITE (MW,99195) ip, ip, Pip(15,ip), Val(1,ip)
99195 FORMAT (' THE POTENTIAL',I4,
     &' CANNOT BE USED WITH VARIATION OF THE HARTREE-FOCK POTENTIAL OF W
     &HICH THE STRENGTH IS 0':/10X,'PIP(15,',I2,') =',D13.6,'  V =',
     &D13.6)
  600 WRITE (MW,99200)
99200 FORMAT (' GIVE VALUES FOR ANOTHER ENERGY'/)
  700 WRITE (MW,99205)
99205 FORMAT (//' IN LECT  ... STOP ...')
      STOP
99210 FORMAT (2I5,F10.5,I5)
99215 FORMAT (7F10.5)
99220 FORMAT (/' BETA(I,J) FOR  L   K ',8X,'V',9X,'W',8X,'VS',8X,'WS',
     &        7X,'VSO',7X,'WSO',6X,
     &        'COUL S.O. COUL'/(5X,I5,5X,I2,2X,I2,2X,8F10.5))
99225 FORMAT (/10X,'AFTER HEAVY ION CORRECTION I =',I3/)
99230 FORMAT (3F10.5)
99235 FORMAT (2I5,6F10.5)
99240 FORMAT (2A4,':   POWER =',I3,5X,'B =',F10.4)
99245 FORMAT (2A4,':   POWER =',I3,5X,'SUM OF B1 =',F10.4,5X,'AND B2 =',
     &        F10.4,5X,'CONTRIBUTION OF B1 =',F10.5)
99250 FORMAT (' READ VALUES'/(1X,I3,'  SA:',D13.6,6X,'UX:',D13.6,5X,
     &        'TAU:',D13.6,6X,'SG:',D13.6/28X,'E0:',D13.6,6X,'EX:',
     &        D13.6,7X,'Z:',F5.0))
      END
C 01/01/04                                                      ECIS03  LDEN-000
      SUBROUTINE LDEN(Na,Scn)
C COMPOUND NUCLEUS PREPARATORY COMPUTATIONS ADDED BY MOLDAUER WITH PRSL LDEN-002
C INPUT VARIABLES: NA:      TOTAL MASS OF THE COMPOUND NUCLEUS          LDEN-003
C                  SCN:     DESCRIPTIONS OF LEVEL DENSITIES             LDEN-004
C OUTPUT VARIABLES:                                                     LDEN-005
C IN SCN:  1-SA  2-UX   3-TAU  4-SG   5-E0   6-EX   7-NZ                LDEN-006
C DATA PZ, PN, SZ AND SN ARE THE ONE USED BY THE CODE GNASH             LDEN-007
C***********************************************************************LDEN-008
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER Na
      REAL*8 Scn(7)
C
C Local variables
C
      REAL*8 aa, e0, ex, pr, sa, sc, sg, tau, ux
      DOUBLE PRECISION DABS, DBLE, DLOG, DSQRT
      INTEGER IABS, IDINT, MIN0
      INTEGER j, nd, nn, nz
      REAL*4 pn(150), pz(100), sn(150), sz(100)
C
C
      DATA pz/0., 5.05, 0., 4.50, 0., 3.95, 0., 3.40, 0., 2.90, 0.,
     &     2.46, 0., 2.09, 0., 1.62, 0., 1.62, 0., 1.83, 0., 1.73, 0.,
     &     1.35, 0., 1.54, 0., 1.28, 0.26, 0.88, 0.19, 1.35, -.05, 1.52,
     &     -.09, 1.17, .04, 1.24, 0.29, 1.09, .26, 1.17, .23, 1.15,
     &     -.08, 1.35, 0.34, 1.05, .28, 1.27, 0., 1.05, 0., 1., .09,
     &     1.2, .2, 1.4, .93, 1., -.2, 1.19, .09, .97, 0., .92, .11,
     &     .68, .05, .68, -.22, .79, .09, .69, .01, .72, 0., .4, .16,
     &     .73, 0., .46, .17, .89, 0., .79, 0., .89, 0., .81, -.06, .69,
     &     -.2, .71, -.12, .72, 0., .77, 2*0./
      DATA pn/0., 5.25, 0., 4.70, 0., 4.15, 0., 3.58, 0., 3.05, 0.,
     &     2.67, 0., 1.8, 0., 1.67, 0., 1.86, 0., 2.04, 0., 1.64, 0.,
     &     1.44, 0., 1.54, 0., 1.3, 0., 1.27, 0., 1.29, .08, 1.41, -.08,
     &     1.5, -.05, 2.24, -.47, 1.43, -.15, 1.44, .06, 1.56, .25,
     &     1.57, -.16, 1.46, 0., .93, .01, .62, -.5, 1.42, .13, 1.52,
     &     -.65, .8, -.08, 1.29, -.47, 1.25, -.44, .97, .08, 1.65, -.11,
     &     1.26, -.46, 1.06, 0.22, 1.55, -.07, 1.37, 0.1, 1.2, -.27,
     &     .92, -.35, 1.19, 0., 1.05, -.25, 1.61, -.21, .9, -.21, .74,
     &     -.38, .72, -.34, .92, -.26, .94, .01, .65, -.36, .83, .11,
     &     .67, .05, 1., .51, 1.04, .33, .68, -.27, .81, .09, .75, .17,
     &     .86, .14, 1.1, -.22, .84, -.47, .48, .02, .88, .24, .52, .27,
     &     .41, -.05, .38, .15, .67, 0., .61, 0., .78, 0., .67, 0., .67,
     &     0., .79, 0., .6, .04, .64, -.06, .45, .05, .26, -.22, .39,
     &     0., .39/
      DATA sz/.19, .38, .57, .75, .94, 1.13, 1.32, 1.51, 1.70, 2.10,
     &     2.91, 4.17, 5.72, 7.8, 8.97, 9.7, 10.1, 10.7, 11.38, 12.07,
     &     12.55, 13.24, 13.93, 14.71, 15.53, 16.37, 17.36, 18.6, 18.7,
     &     18.01, 17.87, 17.08, 16.6, 16.75, 16.5, 16.35, 16.22, 16.41,
     &     16.89, 16.43, 16.68, 16.73, 17.45, 17.29, 17.44, 17.82,
     &     18.62, 18.27, 19.39, 19.91, 19.14, 18.26, 17.4, 16.42, 15.77,
     &     14.37, 13.91, 13.1, 13.11, 11.43, 10.89, 10.75, 10.62, 10.41,
     &     10.21, 9.85, 9.47, 9.03, 8.61, 8.13, 7.46, 7.48, 7.2, 7.13,
     &     7.06, 6.78, 6.64, 6.64, 7.68, 7.89, 8.41, 8.49, 7.88, 6.3,
     &     5.47, 4.78, 4.37, 4.17, 4.13, 4.32, 4.55, 5.04, 5.28, 6.06,
     &     6.28, 6.87, 7.20, 7.74, 2*0./
      DATA sn/0.62, 1.24, 1.85, 2.47, 3.09, 3.71, 4.33, 4.95, 5.56,
     &     6.18, 6.8, 7.53, 7.55, 7.21, 7.44, 8.07, 8.94, 9.81, 10.6,
     &     11.39, 12.54, 13.68, 14.34, 14.19, 13.83, 13.5, 13., 12.13,
     &     12.6, 13.26, 14.13, 14.92, 15.52, 16.38, 17.16, 17.55, 18.03,
     &     17.59, 19.03, 18.71, 18.8, 18.99, 18.46, 18.25, 17.76, 17.38,
     &     16.72, 15.62, 14.38, 12.88, 13.23, 13.81, 14.9, 14.86, 15.76,
     &     16.2, 17.62, 17.73, 18.16, 18.67, 19.69, 19.51, 20.17, 19.48,
     &     19.98, 19.83, 20.2, 19.72, 19.87, 19.24, 18.44, 17.61, 17.1,
     &     16.16, 15.9, 15.33, 14.76, 13.54, 12.63, 10.65, 10.1, 8.89,
     &     10.25, 9.79, 11.39, 11.72, 12.43, 12.96, 13.43, 13.37, 12.96,
     &     12.11, 11.92, 11., 10.8, 10.42, 10.39, 9.69, 9.27, 8.93,
     &     8.57, 8.02, 7.59, 7.33, 7.23, 7.05, 7.42, 6.75, 6.6, 6.38,
     &     6.36, 6.49, 6.25, 5.85, 5.48, 4.53, 4.3, 3.39, 2.35, 1.66,
     &     .81, 0.46, -.96, -1.69, -2.53, -3.16, -1.87, -.41, .71, 1.66,
     &     2.62, 3.22, 3.76, 4.1, 4.46, 4.83, 5.09, 5.18, 5.17, 5.1,
     &     5.01, 4.97, 5.09, 5.03, 4.93, 5.28, 5.49, 5.50, 5.37, 5.30/
      nz = IDINT(Scn(7) + .1D0)
      IF (nz.LE.0) nz = Na/2
      nn = Na - nz
      aa = Na
      sc = 0.D0
      pr = 0.D0
C SA GIVEN BY P. J. BRANCAZIO AND A. G. W. CAMERON, CANADIAN JOURNAL OF LDEN-058
C PHYSICS 47 (1969) 1029.                                               LDEN-059
      IF (nz.LE.100 .AND. nn.LE.150) THEN
         sc = DBLE(sn(nn) - sz(nz))
         pr = DBLE(pn(nn) + pz(nz))
         nd = MIN0(IABS(nz - 2),IABS(nz - 8),IABS(nz - 20),IABS(nz - 28)
     &        ,IABS(nz - 50),IABS(nz - 82),IABS(nz - 126),IABS(nn - 2),
     &        IABS(nn - 8),IABS(nn - 20),IABS(nn - 28),IABS(nn - 50),
     &        IABS(nn - 82),IABS(nn - 126),IABS(nn - 184))
      ENDIF
      sa = DABS((.0091D0*(sc-.23D0*DFLOAT(nd)) + .143D0)*aa)
      IF (Scn(1).EQ.0.D0) Scn(1) = sa
      ux = 2.5D0 + 150.D0/aa
      IF (Scn(2).EQ.0.D0) Scn(2) = ux
      tau = 1.D0/(DSQRT(Scn(1)/Scn(2)) - 1.5D0/Scn(2))
      IF (tau.LE.0.D0) THEN
         Scn(3) = 1.D0/(DSQRT(sa/ux) - 1.5D0/ux)
         WRITE (MW,99005) tau, Scn(3)
99005    FORMAT (5X,'TEMPERATURE',F10.5,' REPLACED BY',F10.5)
      ENDIF
      IF (Scn(3).EQ.0.D0) Scn(3) = tau
      sg = DSQRT(0.0888D0*DSQRT(Scn(1)*Scn(2))*aa**0.666666667D0)
      IF (Scn(4).EQ.0.D0) Scn(4) = sg
      ex = DABS(Scn(2) + pr)
      e0 = ex - Scn(3)
     &     *(2.D0*DSQRT(Scn(1)*Scn(2)) + DLOG(Scn(3)/(16.9705627D0*Scn
     &     (1)**.25D0*Scn(2)**1.25D0*Scn(4))))
      IF (Scn(5).EQ.0.D0) Scn(5) = e0
      IF (Scn(6).EQ.0.D0) Scn(6) = ex
      WRITE (MW,99010) (Scn(j),j = 1,7)
99010 FORMAT (' USED VALUES'/(4X,'  SA:',D13.6,6X,'UX:',D13.6,5X,'TAU:',
     &        D13.6,6X,'SG:',D13.6/28X,'E0:',D13.6,6X,'EX:',D13.6,7X,
     &        'Z:',F5.0))
      RETURN
      END
C 01/01/04                                                      ECIS03  DEPH-000
      SUBROUTINE DEPH(Ncoll,Ncols,Wv,Ipi,Mf,Ms1,Ms2,Nct,Kcc,Kba,Kab,Kbc,
     &                Ktgr,Ngr,Npr,Jtx,Niv,Njc,Njx,Njy,Nmax,Lo)
C HELICITY QUANTUM NUMBERS AND CHOICE OF OBSERVABLES FOR THE OUTPUT     DEPH-003
C INPUT VARIABLES: NCOLL:  NUMBER OF COUPLED NUCLEAR LEVELS             DEPH-004
C                  NCOLS:  NUMBER OF LEVELS WITH ANGULAR DISTRIBUTION   DEPH-005
C                  WV,IPI:     SEE CALX                                 DEPH-006
C                  NGR:    INDICATION FOR PLOTS OF CROSS-SECTION: NUMBERDEPH-007
C                          OF POWERS OF 10 BY 100 POINTS                DEPH-008
C                  NPR:    INDICATIONS FOR PLOTS OF POLARISATIONS:      DEPH-009
C                          1 FIRST ONE,2 SECOND,3 FIRST AND SECOND ..ETCDEPH-010
C          ON A BINARY BASIS. THE FIRST VALUE OF NGR AND NPR IS FOR THE DEPH-011
C          GROUND STATE AND THE SECOND ONE FOR THE EXCITED STATES       DEPH-012
C                  NMAX:   MAXIMUM NUMBER OF AMPLITUDES                 DEPH-013
C                  LO:     LOGICAL CONTROLS                             DEPH-014
C OUTPUT VARIABLES:MF:     TABLE OF QUANTUM NUMBERS AND OBSERVABLES     DEPH-015
C                  IPI(J=5 TO 8,I): BEGINNING AND END FOR EACH LEVEL IN DEPH-016
C                       THE TWO PARTS OF THE TABLE MF                   DEPH-017
C                  MS1,MS2:   LARGEST PARTICLE AND TARGET MULTIPLICITIESDEPH-018
C                  NCT:   NUMBER OF EQUATIONS FOR EACH PARITY IN 1 AND 2DEPH-019
C                         NUMBER OF SOLUTIONS FOR EACH PARITY IN 3 AND 4DEPH-020
C                         NUMBER OF COMP. NUCL. COEFF. IN 5 AND 6       DEPH-021
C                  KCC:   NUMBER OF INDEPENDENT COMPOUND NUCLEUS COEFF. DEPH-022
C                  KBA:   NUMBER OF INDEPENDENT COUPLED AMPLITUDES      DEPH-023
C                  KAB:   MAXIMUM NUMBER OF COUPLED EQUATIONS           DEPH-024
C                  KBC:   MAXIMUM NUMBER OF SOLUTIONS NEEDED            DEPH-025
C                  KTGR:  LENGTH OF THE TABLE MF                        DEPH-026
C                  JTX:   MAXIMUM NUMBER OF KINDS OF POLARISATION       DEPH-027
C                  NIV(*,*,3): ADDRESS OF COULOMB INTEGRALS             DEPH-028
C                  NJC:    1+MAXIMUM NUMBER OF OBSERV. AT EQUID. ANGLES DEPH-029
C                  NJX:    NUMBER OF SETS OF COULOMB FUNCT. AND INTEGRALDEPH-030
C                  NJY:    MAXIMUM LABEL OF NON STANDARD OBSERVABLE     DEPH-031
C                                                                       DEPH-032
C   **** TABLE MF **** FIRST PART                                       DEPH-033
C FOR EACH INDEPENDENT AMPLITUDE (WITH RESPECT TO PARITY ONLY)          DEPH-034
C  MF(1,*)  HELICITY OF THE OUTGOING PARTICLE                           DEPH-035
C  MF(2,*)  HELICITY OF THE RESIDUAL TARGET                             DEPH-036
C  MF(3,*)  HELICITY OF THE INCOMING PARTICLE                           DEPH-037
C  MF(4,*)  HELICITY OF THE TARGET                                      DEPH-038
C    THESE HELICITIES ARE NUMBERED FROM THE LOWEST VALUE                DEPH-039
C  MF(5,*)  TWICE THE MAGNETIC QUANTUM NUMBER OF THE ROTATION MATRIX    DEPH-040
C    ELEMENTS RELATED TO THE INITIAL STATE                              DEPH-041
C  MF(6,*)  TWICE THE MAGNETIC QUANTUM NUMBER OF THE ROTATION MATRIX    DEPH-042
C    ELEMENTS FOR THE FINAL STATE; HOWEVER, WITH ABSOLUTE VALUE 99999 ITDEPH-043
C    INDICATES THAT THE LAST COMPUTED MATRIX ELEMENTS CAN BE USED WITH  DEPH-044
C    THE SIGN OF MF(10,*). A RE-ORDERING OF THE HELICITIES HAS BEEN DONEDEPH-045
C  MF(7,*)  DIRECT ADDRESS OF THE AMPLITUDE IN AN ONE-ROW MATRIX        DEPH-046
C  MF(8,*)  DIRECT ADDRESS OF PARITY RELATED AMPLITUDE OR 0 IF THERE IS DEPH-047
C    NONE                                                               DEPH-048
C  MF(9,*)  RELATIVE SIGN BETWEEN THE AMPLITUDES MF(7,*) AND MF(8,*)    DEPH-049
C  MF(10,*) RELATIVE SIGN FOR ROTATION MATRIX ELEMENTS FOR MF(6,*)=99999DEPH-050
C***********************************************************************DEPH-051
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER Jtx, Kab, Kba, Kbc, Kcc, Ktgr, Ms1, Ms2, Ncoll, Ncols,
     &        Njc, Njx, Njy, Nmax
      INTEGER Ipi(11,*), Mf(10,1), Nct(6), Ngr(2), Niv(Ncoll,Ncoll,3),
     &        Npr(2)
      LOGICAL Lo(250)
      REAL*8 Wv(18,1)
C
C Local variables
C
      INTEGER i, i1, i2, i3, i4, ip, ix, iy, j, j1, j2, j3, j4, ja, jt,
     &        k1, ki, kk, kk1, kk2, kx, l, m1, m2, m3, m4, mi, mj, n,
     &        ni, nj
      INTEGER IABS, MAX0
C
C
      Njc = 2
      Njy = 0
      Jtx = 0
      Nct(5) = 0
      Nct(6) = 0
      Kcc = 0
      Ms1 = 0
      Ms2 = 0
      ni = Ipi(2,1)
      mi = Ipi(3,1)
C LOOP ON THE NUCLEAR LEVELS                                            DEPH-067
      DO i = 1, Ncols
         ip = MOD(Ipi(1,i) + Ipi(1,1),2)
         ki = Kcc + 1
         Ipi(6,i) = ki
         nj = Ipi(2,i)
         mj = Ipi(3,i)
         Ms1 = MAX0(Ms1,nj)
         Ms2 = MAX0(Ms2,mj)
         DO i1 = 1, nj
            j1 = nj + 1 - i1
            DO i2 = 1, mj
               j2 = mj + 1 - i2
               DO i3 = 1, ni
                  j3 = ni + 1 - i3
                  DO i4 = 1, mi
                     j4 = mi + 1 - i4
                     IF (Kcc.GE.ki) THEN
C SEARCH FOR PARITY CONJUGATE AMONG THE AMPLITUDES ALREADY OBTAINED     DEPH-085
                        DO j = ki, Kcc
                           IF ((Mf(1,j).EQ.j1) .AND. (Mf(2,j).EQ.j2)
     &                         .AND. (Mf(3,j).EQ.j3) .AND.
     &                         (Mf(4,j).EQ.j4)) GOTO 2
                        ENDDO
                     ENDIF
C NEW AMPLITUDE                                                         DEPH-094
                     Kcc = Kcc + 1
                     IF (5*Kcc.GE.Nmax) CALL MEMO('DEPH',Nmax,5*Kcc,2)
                     Mf(1,Kcc) = i1
                     Mf(2,Kcc) = i2
                     Mf(3,Kcc) = i3
                     Mf(4,Kcc) = i4
                     Mf(5,Kcc) = 2*(Mf(3,Kcc) - Mf(4,Kcc)) - Ipi(2,1)
     &                           + Ipi(3,1)
                     Mf(6,Kcc) = 2*(Mf(1,Kcc) - Mf(2,Kcc)) - Ipi(2,i)
     &                           + Ipi(3,i)
                     Mf(7,Kcc) = i1 + nj*(i2 - 1 + mj*(i4 - 1 + mi*(i3-1
     &                           )))
                     Mf(8,Kcc) = 0
                     Mf(9,Kcc) = 0
                     Mf(10,Kcc) = 0
                     IF (Kcc.GT.ki) THEN
C SEARCH FOR RELATED ROTATION MATRIX ELEMENTS                           DEPH-108
                        kk = Kcc - 1
                        m1 = IABS(Mf(5,Kcc) + Mf(6,Kcc))/2
                        m2 = IABS(Mf(5,Kcc) - Mf(6,Kcc))/2
                        DO j = ki, kk
                           IF (Mf(6,j).NE.99999) THEN
                              m3 = IABS(Mf(5,j) + Mf(6,j))/2
                              m4 = IABS(Mf(5,j) - Mf(6,j))/2
                              IF (m1.EQ.m3 .AND. m2.EQ.m4) THEN
                                 Mf(10,Kcc)
     &                              = 1 - MOD(IABS(Mf(5,j) - Mf(5,Kcc)
     &                              + Mf(6,Kcc) - Mf(6,j))/2,4)
                                 Mf(6,Kcc) = 99999
                                 ja = j + 1
                                 IF (ja.NE.Kcc) THEN
C PERMUTATION OF AMPLITUDES                                             DEPH-121
                                    DO m1 = 1, 10
                                       m2 = Mf(m1,Kcc)
                                       DO m3 = ja, Kcc
                                         m4 = Kcc + ja - m3
                                         Mf(m1,m4) = Mf(m1,m4 - 1)
                                       ENDDO
                                       Mf(m1,ja) = m2
                                    ENDDO
                                 ENDIF
                                 GOTO 5
                              ENDIF
                           ENDIF
                        ENDDO
                     ENDIF
                     GOTO 5
    2                Mf(8,j) = i1 + nj*(i2 - 1 + mj*(i4 - 1 + mi*(i3-1))
     &                         )
                     Mf(9,j) = 1 - 2*MOD(ip + j1 + i2 + j3 + i4,2)
    5             ENDDO
               ENDDO
            ENDDO
         ENDDO
         Ipi(7,i) = Kcc
C COMPUTATION OF THE NUMBER OF COUPLED EQUATIONS                        DEPH-135
         l = nj*mj
         kk1 = l/2
         kk2 = l - kk1
         IF (kk1.NE.kk2) THEN
            n = mj/2 + nj/2 + Ipi(1,i)
            IF (2*(n/2).NE.n) THEN
               kk1 = kk1 + 1
               kk2 = kk1 - 1
            ENDIF
         ENDIF
         Nct(5) = Nct(5) + kk2
         Nct(6) = Nct(6) + kk1
         IF (i.EQ.1) THEN
            Nct(3) = Nct(5)
            Nct(4) = Nct(6)
         ENDIF
         IF (i.EQ.Ncoll) THEN
            Nct(1) = Nct(5)
            Nct(2) = Nct(6)
            Kab = MAX0(Nct(1),Nct(2))
            Kbc = MAX0(Nct(3),Nct(4))
            IF (Nct(4).EQ.0) Kab = Nct(1)
            IF (Nct(3).EQ.0) Kab = Nct(2)
            Kba = Kcc
         ENDIF
      ENDDO
      IF (Kba.EQ.Kcc) WRITE (MW,99005) Kbc, Kab, Kba
99005 FORMAT (/5X,I3,' SOLUTIONS',I10,' COUPLED EQUATIONS',I10,
     &        ' INDEPENDENT AMPLITUDES'/)
      IF (Kba.NE.Kcc) WRITE (MW,99010) Kbc, Kab, Kba, Kcc
99010 FORMAT (/5X,I3,' SOLUTIONS',I10,' COUPLED EQUATIONS',I10,
     &        ' INDEPENDENT AMPLITUDES',I10,' SETS OF COMPOUND COEFF.'/)
      Ktgr = Kcc
      Ipi(9,Ncols) = Ipi(7,Ncols)
      IF (.NOT.(Lo(66))) THEN
C***********************************************************************DEPH-163
C   **** TABLE MF-FM **** SECOND PART                                   DEPH-164
C  THIS PART OF THE TABLE IS PROLONGATED IN LECD FOR EACH ANGULAR       DEPH-165
C  DISTRIBUTION AND WILL BE UPDATED BY OBSE      - FOR EACH OBSERVABLE  DEPH-166
C  MF(1,*)             LEVEL                                            DEPH-167
C  MF(2,*)             KIND OF OBSERVABLE: 0 FOR CROSS-SECTION, 1 FOR   DEPH-168
C                      C.-S./RUTH.,-2 AND -3 FOR VECTOR ANALYSING POWER DEPH-169
C                      AND POLARISATION FOR SPINS NOT GREATER THAN 1    DEPH-170
C  MF(3,I), MF(4,I)    BEGINNING AND END OF THE DESCRIPTION IN AM (OBSE)DEPH-171
C  MF(5,*)             INDICATION FOR PLOTS                             DEPH-172
C  MF(6,*) TO M(10,*)  CONTAINS THE LEGEND   (IN OBSE)                  DEPH-173
C  ****STANDARD OPTIONS****                                             DEPH-174
C FOR ALL STATES : CROSS SECTION                                        DEPH-175
C FOR GROUND STATE WITH CHARGED PARTICLES: CROSS SECTION DIVIDED BY     DEPH-176
C       RUTHERFORD'S CROSS-SECTION                                      DEPH-177
C FOR SPIN 1/2 - GROUND STATE  POLARISATION                             DEPH-178
C FOR SPIN 1/2 EXCITED STATES  VECT. ANA. POWER,POLAR. AND SPIN-FLIP    DEPH-179
C FOR SPIN LARGER THAN 1/2  GROUND STATE IT11,T20,T21 AND T22           DEPH-180
C FOR EXCITED STATES,IT11,VECT. POLAR.,T20,T21,T22                      DEPH-181
C  *** NON-STANDARD OPTIONS ***                                         DEPH-182
C  THE FIRST ONE MUST BE THE CROSS-SECTION                              DEPH-183
C ANY OBSERVABLE NOT DESCRIBED BELOW IS IDENTIFIED BY A NEGATIVE NUMBER DEPH-184
C  OF WHICH THE POSITIVE VALUE MUST BE FOUND BY OBSE                    DEPH-185
C  FOLLOWED BY THE DESCRIPTION OF THE OBSERVABLE                        DEPH-186
C **** STANDARD DESCRIPTIONS ****                                       DEPH-187
C 0  CROSS SECTION                                                      DEPH-188
C  1  CROSS SECTION DIVIDED BY RUTHERFORD'S CROSS SECTION               DEPH-189
C  2  VECTOR ANALYSING POWER                                            DEPH-190
C  3  VECTOR POLARISATION                                               DEPH-191
C  4  T20     5  T21     6  T22                                         DEPH-192
C  7  KYY OR D  DEFINED AS -A(1100 1100)-A(1100 1-100)                  DEPH-193
C  8  KXX OR R  DEFINED AS  A(1100 1100)-A(1100 1-100)                  DEPH-194
C  9  KZZ OR A' DEFINED AS  A(1000 1000)                                DEPH-195
C 10  KXZ OR R' DEFINED AS -SQRT(2.) A(1100 1000)                       DEPH-196
C 11  KZX OR A  DEFINED AS -SQRT(2.) A(1000 1100)                       DEPH-197
C 12  SPIN-FLIP :  (A(0000,0000)+A(1100,1100)+A(1100,1-100))/2          DEPH-198
C 13  VECTOR ANALYSING POWER OF THE TARGET                              DEPH-199
C   (NOTE A RATIO SQRT(2.) WITH IT11 FOR SPIN 1/2 FOR 2, 3 AND 13)      DEPH-200
C 14  AYY  DEFINED AS -A(1111 0000)-A(111-1 0000)                       DEPH-201
C 15  AXX  DEFINED AS  A(1111 0000)-A(111-1 0000)                       DEPH-202
C 16  AZZ  DEFINED AS  A(1010 0000)                                     DEPH-203
C 17  AXZ  DEFINED AS -SQRT(2.) A(1110 0000)                            DEPH-204
C 18  AZX  DEFINED AS -SQRT(2.) A(1011 0000)                            DEPH-205
C 19  RESERVED FOR A SET OF EXPERIMENTAL DATA WHICH ARE REACTION        DEPH-206
C          CROSS-SECTIONS. SEE "CARDS READ IN SUBROUTINE LECD"          DEPH-207
C***********************************************************************DEPH-208
         kx = Kcc
         iy = 1
         IF (.NOT.(Lo(194))) THEN
            READ (MR,99060) (Ipi(9,i),i = 1,Ncoll)
            WRITE (MW,99015) (i,Ipi(9,i),i = 1,Ncoll)
99015       FORMAT (/' EQUIDISTANT ANGLES OUTPUT'//
     &              (10X,'CHANNEL',I3,5X,I3,' OBSERVABLES'))
         ENDIF
         DO i = 1, Ncoll
            IF (.NOT.(Lo(94))) THEN
C THERE MUST BE AT LEAST PLACE TO STORE SIX OBSERVABLES                 DEPH-216
               IF (5*kx + 30.GE.Nmax) CALL MEMO('DEPH',Nmax,5*kx + 30,2)
               kx = kx + 1
               Ipi(9,i) = 1
               Mf(2,kx) = 0
               IF ((i.EQ.1) .AND. (Ipi(4,1).NE.0)) THEN
                  Ipi(9,1) = 2
                  kx = kx + 1
                  Mf(2,kx) = 1
               ENDIF
               Mf(5,kx) = Ngr(iy)
               IF (ni.NE.1) THEN
                  Ipi(9,i) = Ipi(9,i) + 1
                  kx = kx + 1
                  Mf(2,kx) = 2
                  ix = Npr(iy)/2
                  Mf(5,kx) = Npr(1) - 2*ix
                  IF (ni.GT.2) THEN
                     Ipi(9,i) = Ipi(9,i) + 3
                     DO l = 4, 6
                        kx = kx + 1
                        Mf(2,kx) = l
                        Mf(5,kx) = MOD(ix,2)
                        ix = ix/2
                     ENDDO
                  ELSEIF (i.NE.1) THEN
                     IF (Ipi(2,i).LE.3) THEN
                        IF (Ipi(2,i).EQ.1) GOTO 20
                        Ipi(9,i) = Ipi(9,i) + 1
                        kx = kx + 1
                        Mf(2,kx) = 3
                        Mf(5,kx) = MOD(ix,2)
                        ix = ix/2
                     ENDIF
                     kx = kx + 1
                     Mf(2,kx) = 12
                     Mf(5,kx) = MOD(ix,2)
                     Ipi(9,i) = Ipi(9,i) + 1
                  ENDIF
               ENDIF
            ENDIF
   20       k1 = Ktgr + 1
            Ipi(8,i) = k1
            Ktgr = Ktgr + Ipi(9,i)
            Ipi(9,i) = Ktgr
            IF (5*Ktgr.GE.Nmax) CALL MEMO('DEPH',Nmax,5*Ktgr,2)
            DO j = k1, Ktgr
               Mf(1,j) = i
            ENDDO
            IF (.NOT.(Lo(194))) THEN
               READ (MR,99060) (Mf(2,j),j = k1,Ktgr)
               IF (Mf(2,k1).NE.0) WRITE (MW,99020)
99020          FORMAT (
     &        ' THE FIRST OBSERVABLE MUST BE THE CROSS SECTION: LABEL 0'
     &        )
               READ (MR,99060) (Mf(5,j),j = k1,Ktgr)
               Mf(2,k1) = 0
               WRITE (MW,99025) i, (Mf(2,j),j = k1,Ktgr)
99025          FORMAT (' OBSERVABLES FOR CHANNEL',I3,'  : ',
     &                 18I5/(24X,18I5))
               WRITE (MW,99030) (Mf(5,j),j = k1,Ktgr)
99030          FORMAT (12X,'GRAPH INFORMATION: ',18I5/(24X,18I5))
               DO j = k1, Ktgr
                  IF (Mf(2,j).GT.18) GOTO 100
               ENDDO
            ENDIF
            jt = 0
            DO j = k1, Ktgr
               Njy = MAX0(Njy, - Mf(2,j))
               IF (Mf(2,j).NE.0 .AND. Mf(2,j).NE.1) jt = jt + 1
            ENDDO
            Jtx = MAX0(Jtx,jt)
            Njc = MAX0(Njc,Ktgr - k1 + 2)
            iy = 2
         ENDDO
         IF (Lo(81)) Njc = MAX0(Njc + 2,6)
      ENDIF
      iy = 0
      IF (Lo(44)) iy = 1
      IF (Lo(46) .AND. Lo(44)) WRITE (MW,99035)
99035 FORMAT (/' COULOMB CORRECTIONS ( 1=YES, 0=NO)')
      DO i = 1, Ncoll
         IF (Lo(46) .AND. Lo(44)) THEN
            READ (MR,99060) (Niv(i,j,3),j = 1,Ncoll)
            WRITE (MW,99040) i, (j,Niv(i,j,3),j = 1,Ncoll)
99040       FORMAT (' I =',I2,4X,10(' J =',I2,':',I1,2X)
     &              /(10X,10(' J =',I2,':',I1,2X)))
         ELSE
            DO j = 1, Ncoll
               Niv(i,j,3) = iy
            ENDDO
            IF (Lo(208)) Niv(i,i,3) = 1
         ENDIF
      ENDDO
      nj = Njx
      DO i = 1, Ncoll
         DO j = 1, i
            l = Niv(i,j,3)
            Niv(i,j,3) = 0
C NO COUL. CORR. WITH DIFF. PARTICLE MASS, CHARGES OR A CLOSED CHANNEL  DEPH-296
            IF (l.NE.0 .AND. Ipi(4,i).EQ.Ipi(4,j) .AND. Wv(1,i)
     &          .EQ.Wv(1,j) .AND. Wv(3,i).GE.0. .AND. Wv(3,j).GE.0.)
     &          THEN
               Njx = Njx + 1
               Niv(i,j,3) = Njx
            ENDIF
            Niv(j,i,3) = Niv(i,j,3)
         ENDDO
      ENDDO
      IF (nj.EQ.Njx) RETURN
      WRITE (MW,99045)
99045 FORMAT (/' STORAGE OF COULOMB CORRECTIONS')
      DO i = 1, Ncoll
         WRITE (MW,99050) i, (Niv(i,j,3),j,j = 1,Ncoll)
99050    FORMAT (' I =',I2,2X,6(I6,' FOR J =',I2)
     &           /(10X,6(I6,' FOR J =',I2)))
      ENDDO
      RETURN
  100 WRITE (MW,99055)
99055 FORMAT (//
     &' THE STANDARD OBSERVABLES ARE ONLY 19 FOR ANY OTHER GIVE A NEGATI
     &VE INTEGER'///' IN DEPH  ... STOP ...')
      STOP
99060 FORMAT (14I5)
      END
C 01/01/04                                                      ECIS03  LECD-000
      SUBROUTINE LECD(Ncoll,Ncolt,Ncolr,Wv,Mf,Mfm,Fm,Donn,Np,Ntot,Nrec,
     &                Dw,Nw,Nmx,Kfit,Nessai,Yy,Jtx,Njy,Nmax,Lo)
C INPUT OF EXPERIMENTAL DATA AND SEARCH INFORMATIONS                    LECD-003
C INPUT VARIABLES: NCOLL: NUMBER OF NUCLEAR LEVELS WITH ANGULAR DISTRIB.LECD-004
C                  NCOLT: NUMBER OF TOTAL CROSS-SECTIONS                LECD-005
C                  NCOLR: NUMBER OF ANGULAR DISTRIBUTIONS               LECD-006
C                  WV(3,*):  ENERGY IN THE CENTER OF MASS IN MEV        LECD-007
C                  NP:    INDICATIONS FOR PLOTS OF CROSS-SECTION        LECD-008
C                  NREC:  NUMBER OF PARAMETERS IN SEARCH                LECD-009
C                  JTX:   MAXIMUM NUMBER OF ANGLES FOR A GRAPH          LECD-010
C                  NMAX:  MAXIMUM NUMBER OF DATA FOR THE WORKING SPACE  LECD-011
C                  LO:    LOGICAL CONTROLS. IF LO(72)=.TRUE. NO OUTPUT OLECD-012
C                         EXPERIMENTAL DATA                             LECD-013
C OUTPUT VARIABLES:JTX:   MAXIMUM NUMBER OF ANGLES FOR A GRAPH          LECD-014
C                  NJY:   MAXIMUM INDEX OF NON STANDARD OBSERVABLE      LECD-015
C                  MF:    CONTINUATION OF THE SECOND PART OF MF AS      LECD-016
C                         DESCRIBED IN DEPH                             LECD-017
C                  MFM,FM:IN EQUIVALENCE BY CALL: MFM(1,*) CHANNEL,     LECD-018
C                         MFM(2,*), MFM(3,*) BEGINNING AND END OF DATA, LECD-019
C                         MFM(4,*) INDICATION C.M./LAB AS 0/1,          LECD-020
C                         FM(3,*) WEIGHT,                               LECD-021
C                         FM(4,*) AND FM(5,*) NORM AND ITS ERROR,       LECD-022
C                         FM(6,*) PLACE FOR CALCULATED NORMALISATION,   LECD-023
C                         FM(7,*) PLACE FOR CALCULATED CHI2.            LECD-024
C                  DONN:  EXPERIMENTAL DATA: ANGLE, VALUE, ERROR,       LECD-025
C                         ANGULAR WIDTH AND PLACE FOR CORRECTED ERROR   LECD-026
C                  NTOT:  NUMBER OF EXPERIMENTAL DATA                   LECD-027
C                  DW:    ACCURACY OF PARAMETERS IN SEARCH              LECD-028
C                  NW:    INDEXES OF PARAMETERS IN SEARCH               LECD-029
C                  NMX:   NUMBER OF INDEXES                             LECD-030
C      IF THE NUMBER OF DATA FOR AN OBSERVABLE IS 0,IT IS SUMMED        LECD-031
C      WITH THE NEXT OBSERVABLE WHICH MUST BE OF THE SAME KIND          LECD-032
C***********************************************************************LECD-033
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER Jtx, Kfit, Ncoll, Ncolr, Ncolt, Nessai, Njy, Nmax, Nmx,
     &        Nrec, Ntot
      REAL*8 Donn(6,1), Dw(Nmax), Fm(7,Ncolr), Wv(18,1), Yy(3)
      LOGICAL Lo(250)
      INTEGER Mf(10,Ncolr), Mfm(14,Ncolr), Np(2), Nw(2*Nmax)
C
C Local variables
C
      INTEGER i, iv, j, k, mf2, nclr, nise, ns, nt
      INTEGER IDINT, MAX0, MIN0
      LOGICAL lt, lx
C
C
      lt = .TRUE.
      Ntot = 0
      nclr = 0
      Nmx = Nrec + 1
      DO iv = 1, Ncolr
C INPUT OF THE DEFINITION OF THE ANGULAR DISTRIBUTION                   LECD-044
         lx = .FALSE.
         READ (MR,99005) lx, Mfm(4,iv), nt, Mfm(1,iv), Mf(2,iv),
     &                   (Fm(j,iv),j = 3,5)
99005    FORMAT (L1,I1,I3,2I5,5X,3F10.5)
         IF (Mfm(1,iv).GT.Ncoll) GOTO 100
         IF (Wv(3,Mfm(1,iv)).LE.0.D0) GOTO 200
         IF (Mf(2,iv).GT.19) GOTO 300
         IF (Fm(3,iv).EQ.0.D0) Fm(3,iv) = 1.D0
         IF (Fm(4,iv).EQ.0.D0) Fm(4,iv) = 1.D0
         Fm(6,iv) = 1.D0
         Fm(7,iv) = 0.D0
         Mf(1,iv) = Mfm(1,iv)
         Jtx = MAX0(Jtx,nt)
         Njy = MAX0(Njy, - Mf(2,iv))
         Mf(5,iv) = 1
         mf2 = MIN0(2,Mfm(1,iv))
         IF (Mf(2,iv).EQ.0 .OR. Mf(2,iv).EQ.1) Mf(5,iv) = Np(mf2)
         IF (Lo(172) .AND. nt.EQ.0) WRITE (MW,99010) iv, nt, Mfm(1,iv),
     &       Mf(2,iv)
99010    FORMAT (/'  ANG. DISTR.',I3,I9,' DATA   LEVEL =',I3,5X,
     &           'KIND =',I3,' UNRESOLVED WITH THE FOLLOWING ONE'/)
         IF (.NOT.lt .AND. (Mf(2,iv).NE.Mf(2,iv-1))) GOTO 400
         lt = nt.NE.0
         ns = Ntot + 1
         Ntot = Ntot + nt
         Mfm(2,iv) = ns
         Mfm(3,iv) = Ntot
         IF (lt) THEN
            nclr = nclr + 1
            IF (Lo(172)) WRITE (MW,99015) iv, nt, Mfm(1,iv), Mf(2,iv),
     &                          (Fm(i,iv),i = 3,5)
99015       FORMAT (/'  ANG. DISTR.',I3,I9,' DATA   LEVEL =',I3,5X,
     &              'KIND =',I3//5X,'WEIGHT',D12.4,5X,'NORM',D12.4,
     &              '  WITH ERROR',D12.4//23X,'ANGLE',14X,'VALUE',15X,
     &              'ERROR',12X,'ANG. WIDTH',10X,'ANG. ERROR'/)
            IF (Lo(172) .AND. (Mf(2,iv).EQ.19)) WRITE (MW,99020)
99020       FORMAT (' THESE DATA ARE TOTAL CROSS-SECTIONS')
            lx = lx .AND.
     &           (Mf(2,iv).EQ.0 .OR. Mf(2,iv).EQ.1 .OR. Mf(2,iv).EQ.19)
            IF (Lo(172) .AND. lx) WRITE (MW,99025)
99025       FORMAT (' INPUT OF PERCENTAGE ERRORS')
            IF (Lo(172) .AND. Mfm(4,iv).EQ.1) WRITE (MW,99030)
99030       FORMAT (' ANGLES IN THE LABORATORY SYSTEM')
            IF (3*Ntot + 3.GE.Nmax) CALL MEMO('LECD',Nmax,3*Ntot + 3,2)
C INPUT OF THE ANGULAR DISTRIBUTION DATA                                LECD-076
            DO i = ns, Ntot
               READ (MR,99105) (Donn(j,i),j = 1,5)
               IF (lx) Donn(3,i) = Donn(2,i)*Donn(3,i)*.01D0
               Donn(6,i) = Donn(3,i)
               IF (Lo(172)) WRITE (MW,99035) i, (Donn(j,i),j = 1,5)
99035          FORMAT (5X,I5,5D20.6)
            ENDDO
            IF (Mf(2,iv).GE.19) THEN
C CHECK OF TOTAL CROSS-SECTION DATA                                     LECD-084
               DO i = ns, Ntot
                  j = IDINT(Donn(1,i) + .1D0)
                  IF (j.LT.0 .OR. j.GT.Ncolt + 2) GOTO 500
                  IF (j.GT.0 .AND. j.LE.Ncolt .AND. Wv(3,j).LE.0.D0)
     &                GOTO 600
C                  IF (Lo(181)) GOTO 500
                  IF (Lo(185) .AND. j.EQ.Ncolt + 1) GOTO 500
                  IF (Lo(186) .AND. j.EQ.Ncolt + 2) GOTO 500
               ENDDO
            ENDIF
            IF (Fm(5,iv).NE.0.) THEN
               Ntot = Ntot + 1
C NORMALISATION AS A DATA FOR THE SEARCH                                LECD-095
               Donn(2,Ntot) = Fm(4,iv)
               Donn(3,Ntot) = Fm(5,iv)
               IF (Lo(172)) WRITE (MW,99040) Ntot, Donn(2,Ntot),
     &                             Donn(3,Ntot)
99040          FORMAT (5X,I5,' DATA WHICH IS A NORMALISATION',D20.6,
     &                 ' WITH ERROR',D20.6)
            ENDIF
         ENDIF
      ENDDO
      IF (Lo(172) .AND. (Ncolr.NE.nclr)) WRITE (MW,99045) nclr, Ncolr
99045 FORMAT (/5X,I5,' DIFFERENT ANGULAR DISTRIBUTIONS INSTEAD OF',I5/)
      IF (.NOT.(Lo(132) .OR. (Nrec.EQ.0))) THEN
         WRITE (MW,99050) Nrec, Kfit, Nessai, Yy(1), Yy(2)
99050    FORMAT (//5X,I5,' PARAMETERS IN SEARCH'/5X,I5,
     &           ' RESULTS STORED'/5X,I5,' RUNS    STARTING SCALE',
     &           F10.2/12X,'MULTIPLICATION FACTOR',F10.2/)
         nise = 12*Ntot + 2*Nrec
         IF (nise + Nmx.GE.2*Nmax) CALL MEMO('LECD',Nmax,(nise + Nmx)/2,
     &       2)
         READ (MR,99105) (Dw(6*Ntot + i),i = 1,Nrec)
         READ (MR,99110) (Nw(nise + i),i = 1,Nrec)
         WRITE (MW,99055) (i,Nw(nise + i),Dw(6*Ntot + i),i = 1,Nrec)
99055    FORMAT (5X,I5,5X,I5,5X,F15.8)
         DO i = 1, Nrec
C A NEGATIVE VALUE -K INSTEAD OF INDEXES OF PARAMETERS MEANS THAT K     LECD-109
C PARAMETERS WILL BE KEPT PROPORTIONAL - INPUT OF THEIR INDEXES         LECD-110
            k = -Nw(nise + i)
            IF (k.GE.0) THEN
               Nw(nise + Nmx) = k
               IF (nise + Nmx + k.GE.2*Nmax)
     &             CALL MEMO('LECD',Nmax,(nise + Nmx + k)/2,2)
               READ (MR,99110) (Nw(nise + Nmx + j),j = 1,k)
               WRITE (MW,99060) i, (Nw(nise + Nmx + j),j = 1,k)
99060          FORMAT (5X,I5,' VARIABLE DEFINED AS',20I5/(18X,20I5))
               Nw(nise + i) = -Nmx
               Nmx = Nmx + k + 1
            ENDIF
         ENDDO
      ENDIF
      IF (lt) RETURN
      WRITE (MW,99065)
99065 FORMAT (//'  THE LAST ANGULAR DISTRIBUTION INCLUDE NO DATA')
      GOTO 700
  100 WRITE (MW,99070) Mfm(1,iv)
99070 FORMAT (//' LEVEL NUMBER',I4,' TOO LARGE')
      GOTO 700
  200 WRITE (MW,99075) Mfm(1,iv)
99075 FORMAT (//' LEVEL',I4,' CLOSED')
      GOTO 700
  300 WRITE (MW,99080)
99080 FORMAT (//' THERE ARE ONLY 20 KIND OF PROGRAMMED OBSERVABLES'//
     &'  FOR OTHER KINDS, INTRODUCE A NEGATIVE NUMBER  AND,LATER,THEIR D
     &ESCRIPTION')
      GOTO 700
  400 WRITE (MW,99085) Mf(2,iv), Mf(2,iv - 1)
99085 FORMAT (//' THE KIND =',I3,
     &        ' OF THIS OBSERVABLE IS NOT THE SAME AS THE KIND =',I3,
     &        ' OF THE PREVIOUS ONE WHICH WAS EMPTY')
      GOTO 700
  500 WRITE (MW,99090) Donn(1,i), i
99090 FORMAT (' ANGULAR DATA',F10.5,' FOR',I4,
     &        ' DATA NOT ALLOWED FOR TOTAL CROSS-SECTION')
      GOTO 700
  600 WRITE (MW,99095) Donn(1,i), i
99095 FORMAT (' ANGULAR DATA',F10.5,' FOR',I4,
     &        ' DATA NOT ALLOWED FOR CLOSED CHANNEL')
  700 WRITE (MW,99100)
99100 FORMAT (//' IN LECD  ... STOP ...')
      STOP
99105 FORMAT (7F10.5)
99110 FORMAT (14I5)
      END
C 01/01/04                                                      ECIS03  OBSE-000
      SUBROUTINE OBSE(Mf,Cmf,Nt,Ncolr,Ipi,Am,Itx,Itz,Bm,Cbm,Nx,Jcal,Jtn,
     &                Lo)
C COMPUTES FOR EACH OBSERVABLE ALL THE INDICATIONS FOR DO LOOPS AND THE OBSE-003
C GEOMETRICAL COEFFICIENTS NEEDED IN SCAT                               OBSE-004
C INPUT VARIABLES: MF,CMF: INFORMATIONS COMING FROM DEPH AND LECD       OBSE-005
C                  NT:     NUMBER OF ROWS OF MF                         OBSE-006
C                  NCOLR:  NUMBER OF EXPERIMENTAL ANGULAR DISTRIBUTIONS OBSE-007
C                  IPI(J=2,3,I): MULTIPLICITY OF PARTICLE AND TARGET    OBSE-008
C                  JTN:    LENGTH AVAILABLE IN AM                       OBSE-009
C                  LO:     LOGICAL CONTROLS                             OBSE-010
C      THE SUBROUTINE RETURNS LO(226)=.TRUE. IF THERE IS AN OBSERVABLE  OBSE-011
C  NOT IN THE CENTER OF MASS SYSTEM.                                    OBSE-012
C OUTPUT VARIABLES:AM:   CHARACTER*4 FOR TRANSFER, SEE DESCRIPTION BELOWOBSE-013
C                  JCAL:   LENGTH OF AM                                 OBSE-014
C                  MF,CMF: EQU. BY CALL, SECOND PART UPDATED (SEE DEPH) OBSE-015
C WORKING FIELDS:  BM(9,*), CBM AND NX(18,*) IN EQUIVALENCE BY CALL     OBSE-016
C                  THE RESULTS ARE STORED AFTER THE WORKING FIELD       OBSE-017
C                  AND COPIED IN AM BEFORE RETURN.                      OBSE-018
C                  ITX(6,*) AND ITZ(6,*) TO STORE LEGENDS,              OBSE-019
C                           IN EQUIVALENCE WITH AM                      OBSE-020
C***********************************************************************OBSE-021
C  THE FIRST PART OF THE AM TABLE IS SETS OF 10 D. P. INDICATIONS,EACH  OBSE-022
C     OF THEM RELATED TO A SINGLE "A" - THE 8 FIRST ARE INDICATIONS FOR OBSE-023
C     THE 4 DO LOOPS, 9 IS A SET OF 6 LOGICAL IN A BINARY CODE AND INDI-OBSE-024
C     CATION FOR CHANGE OF FRAME FOR THE PARTICLE AND THE TARGET UNDER  OBSE-025
C     THE FORM N1+1000*N2, 10 IS THE AMPLITUDE.                         OBSE-026
C  THE SECOND PART ARE TENSOR OPERATOR MATRIX ELEMENTS.                 OBSE-027
C       INDICATIONS FOR A DO LOOP ARE 4 INTEGER                         OBSE-028
C        IM: LOWER BOUND                                                OBSE-029
C        IP: UPPER BOUND                                                OBSE-030
C        NM: DIFFERENCE OF MAGNETIC QUANTUM NUMBERS                     OBSE-031
C        IL: WHEN ADDED TO THE INDEX OF THE DO LOOP,ADDRESS OF THE      OBSE-032
C             MATRIX ELEMENT FROM THE TOP OF TABLE AM                   OBSE-033
C       THE 4 FIRST LOGICALS  ARE .TRUE. IF THERE IS A TENSOR OPERATOR  OBSE-034
C        FOR THE RELATED DO LOOP,.FALSE. FOR IDENTITY OPERATOR.         OBSE-035
C        THE FIFTH IS .TRUE. FOR NO TENSOR OPERATOR AT ALL              OBSE-036
C        THE SIXTH IS .TRUE. FOR PURE IMAGINARY COEFFICIENT             OBSE-037
C       INDICATION FOR CHANGE OF FRAME ARE                              OBSE-038
C            1 FOR LABORATORY SYSTEM                                    OBSE-039
C            2 FOR AXIS ALONG THE INCIDENT DIRECTION                    OBSE-040
C***********************************************************************OBSE-041
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER Jcal, Jtn, Ncolr, Nt
      CHARACTER*4 Am(2,1), Cbm(2,9,1), Cmf(10,Nt), Itz(7,21)
      REAL*8 Bm(9,*)
      INTEGER Ipi(11,*), Itx(7,21), Mf(10,Nt), Nx(18,*)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 c1, c2, cx(24), d1, d2, e1, e2, e3, f1, f2, f3, fj, fs
      DOUBLE PRECISION DABS, DSQRT
      INTEGER i, i1, i2, i5, ia1, ia2, ical, ij, ik, il, im, inm, is,
     &        iv, iy(2,20), j, j1, j2, j3, j4, ji, jnm, jts, k, k1, k2,
     &        k3, k4, k5, k6, ki, kit, klt, knx, kt, kx, kz, l, l1, li,
     &        lt3, m, m1, m2, m3, m4, m5, ma, mc, mt(4), mx(8,24), n,
     &        n1, ncal, nm, nz(2)
      INTEGER IABS, MAX0, MIN0
      CHARACTER*4 iz(5,20)
      LOGICAL lt1, lt2, lz(6)
C
C
      DATA iy/4*1, 2*2, 2*3, 2*4, 2*5, 2*6, 7, 8, 9, 10, 2*11, 2*12,
     &     2*13, 14, 16, 2*17, 18, 19, 20, 21, 2*22, 2*23, 2*24, 2*1/
      DATA cx/6*1.D0, 2* - 1.D0, 1.D0, -1.D0, 1.D0,
     &     2* - 1.4142136573791504D0, 3*.5D0, 1.4142136999999999D0,
     &     2* - 1.D0, 1.D0, -1.D0, 1.D0, 2* - 1.4142136573791504D0/
      DATA mx, jts/8*0, 2*1, 10*0, 2*1, 2*0, 2, 7*0, 2, 1, 6*0, 2*2,
     &     6*0, 2*1, 2*0, 2*1, 2*0, 2*1, 2*0, 1, -1, 2*0, 2*1, 2*0, 2*1,
     &     2*0, 2*1, 2*0, 1, -1, 2*0, 1, 3*0, 1, 3*0, 2*1, 2*0, 1, 3*0,
     &     1, 3*0, 2*1, 10*0, 2*1, 2*0, 2*1, 2*0, 2*1, 2*0, 1, -1, 4*0,
     &     2*1, 4*0, 4*1, 4*0, 3*1, -1, 4*0, 4*1, 4*0, 3*1, -1, 4*0, 1,
     &     0, 1, 5*0, 3*1, 5*0, 1, 0, 2*1, 5*0/
      DATA iz/'   C', 'ROSS', '-SEC', 'TION', '    ', '   C', '. S.',
     &     '/RUT', 'HER.', '    ', '   A', 'SYM.', ' OR ', 'IT11',
     &     2*'    ', 'VECT', '. PO', 'LAR.', 4*'    ', ' T20', 4*'    ',
     &     ' T21', 4*'    ', ' T22', 3*'    ', 'KYY', 'OR D', 3*'    ',
     &     'KXX ', 'OR R', 2*'    ', '   K', 'ZZ O', 'R A''', 3*'',
     &     'KZX ', 'OR A', 2*'    ', '   K', 'XZ O', 'R R''', 2*'    ',
     &     '   S', 'PIN-', 'FLIP', 2*'    ', 'TARG', 'ET A', 'SYM.',
     &     4*'    ', ' AYY', 4*'    ', ' AXX', 4*'    ', ' AZZ',
     &     4*'    ', ' AXZ', 4*'    ', ' AZX', 2*'    ', ' TOT', 'AL C',
     &     '.-S.', '    '/
      IF (Jtn.LT.270) CALL MEMO('OBSE',Jtn,270,2)
C TRANSFER OF STANDARD DESCRIPTIONS                                     OBSE-067
      DO i = 1, 24
         DO j = 1, 8
            Nx(j + 6,i) = mx(j,i)
         ENDDO
         Bm(3,i) = cx(i)
      ENDDO
      DO i = 1, 20
         Itx(1,i) = iy(1,i)
         Itx(2,i) = iy(2,i)
         DO j = 3, 7
            Itz(j,i) = iz(j - 2,i)
         ENDDO
      ENDDO
      Lo(226) = .FALSE.
      kit = 20
      knx = 24
      Jcal = 0
      mt(1) = Ipi(2,1)
      mt(2) = Ipi(3,1)
C VERIFICATION OF INDICATIONS ALREADY IN MF(1,I)                        OBSE-084
      DO i = 1, Nt
         IF (Mf(2,i).GT.18) THEN
            IF (Mf(2,i).EQ.19 .AND. Nt - i.GE.Ncolr) GOTO 1800
            IF (Mf(2,i).GT.19) GOTO 1900
         ENDIF
         Mf(6,i) = 0
      ENDDO
      IF (Lo(194) .AND. Lo(131)) GOTO 1500
C SEARCH FOR NON STANDARD OBSERVABLES                                   OBSE-091
  100 DO l = 1, Nt
         IF (Mf(2,l).LT.0) GOTO 200
      ENDDO
      GOTO 1500
  200 kz = kit
      kit = kit + 1
C INPUT OF THE DESCRIPTION OF NON STANDARD OBSERVABLES                  OBSE-098
      lt1 = .FALSE.
      lt2 = .FALSE.
      READ (MR,99005) lt1, lt2, lt3, kx, k, (Itz(j,kit),j = 3,7)
99005 FORMAT (2L1,I1,I2,I5,5A4)
      k1 = knx + 1
      knx = knx + k
      IF (9*knx.GT.Jtn) CALL MEMO('OBSE',Jtn,9*knx,2)
      READ (MR,99010) ((Nx(j,i),j = 7,14),i = k1,knx)
99010 FORMAT (8I5)
      READ (MR,99110) (Bm(3,i),i = k1,knx)
      IF (lt1 .OR. lt2) READ (MR,99110) (Bm(1,i),i = k1,knx)
  300 k2 = k1
      WRITE (MW,99015) kx, (Itz(j,kit),j = 3,7), k
99015 FORMAT (/' OBSERVABLE',I3,' LABELLED',5X,5A4,10X,I3,' COMPONENTS')
      IF (lt1) WRITE (MW,99020)
99020 FORMAT (
     &       ' DEFINED WITH AN AXIS PERPENDICULAR TO THE REACTION PLANE'
     &       )
      IF (lt3.EQ.1) WRITE (MW,99025)
99025 FORMAT (' DEFINED IN THE LABORATORY SYSTEM')
      IF (lt3.EQ.2) WRITE (MW,99030)
99030 FORMAT (' DEFINED WITH RESPECT TO THE INCIDENT BEAM')
      IF (.NOT.lt2) GOTO 900
C OUTPUT OF THE DESCRIPTION NOT COMPLETELY IN TENSOR NOTATION           OBSE-114
C IF LT2=.TRUE. , OBSERVABLES CAN BE DEFINED AS MATRIX ELEMENTS         OBSE-115
C (MI,MF). IN THIS CASE,THE VALUES READ ARE (MI-S-1,MF-S-1) INSTEAD OF  OBSE-116
C THE QUANTUM NUMBERS OF TENSOR OPERATOR.                               OBSE-117
      WRITE (MW,99035)
99035 FORMAT (' NOT COMPLETELY DEFINED BY TENSORS')
  400 k3 = MIN0(k2 + 5,knx)
      WRITE (MW,99115) ((Nx(i,j),i = 11,14),j = k2,k3)
      WRITE (MW,99040) (Bm(3,i),i = k2,k3)
99040 FORMAT (6(' +',F8.4,'*M',9X))
      WRITE (MW,99120) ((Nx(i,j),i = 7,10),j = k2,k3)
      WRITE (MW,99125) (Bm(1,i),i = k2,k3)
      k2 = k3 + 1
      IF (k2.LE.knx) GOTO 400
      iv = Mf(1,l)
      mt(3) = Ipi(2,iv)
      mt(4) = Ipi(3,iv)
      klt = 1
C SEARCH FOR NON TENSOR DESCRIPTION - PSEUDO-LOOP FOR IJ                OBSE-130
      ij = 1
  500 k2 = k1
      k6 = knx
  600 IF (k2.LE.k6) THEN
         DO k = k2, k6
            IF (Nx(2*ij + 5,k).LT.0) GOTO 700
         ENDDO
      ENDIF
      IF (k6.EQ.knx) GOTO 800
      GOTO 1100
C RECURRENCE COMPUTATION OF (-)**(S-MF)*<S S MI -MF|L M>/SQRT(2*S+1)    OBSE-140
C STARTING WITH THE MINIMUM VALUE OF L                                  OBSE-141
  700 m1 = mt(ij) + Nx(2*ij + 5,k)
      m2 = mt(ij) + Nx(2*ij + 6,k)
      IF (m1.LT.0 .OR. m2.LT.0) THEN
         WRITE (MW,99045) Nx(2*ij + 5,k), Nx(2*ij + 6,k), mt(ij)
99045    FORMAT (' NON TENSOR INDICATIONS',I4,' AND',I4,
     &           ' INCORRECT FOR (2*S+1) =',I3)
         GOTO 2500
      ELSE
         m4 = m1 - m2
         m3 = IABS(m4) + 1
         m5 = mt(ij)
         e2 = 0.D0
         e3 = 1.D0
         c1 = DFLOAT(m1 + m2 - mt(ij) + 1)
         d2 = 0.D0
         c2 = 0.D0
         DO m = m3, m5
            IF (m.NE.m3) THEN
               e1 = e2
               e2 = e3
               d1 = d2
               f1 = DFLOAT(((m-1)**2 - m4**2)*(mt(ij)**2 - (m-1)**2))
               f2 = DFLOAT((2*m - 1)*(2*m - 3))
               d2 = DSQRT(f1/f2)
               e3 = (c1*e2 - d1*e1)/d2
            ENDIF
            knx = knx + 1
            DO ji = 7, 14
               Nx(ji,knx) = Nx(ji,k)
            ENDDO
            Nx(2*ij + 5,knx) = m - 1
            Nx(2*ij + 6,knx) = m4
            c2 = c2 + e3*e3
            Bm(1,knx) = e3
         ENDDO
C NORMALISATION AND SIGN GIVEN BY COEFFICIENT FOR MAXIMUM VALUE OF L    OBSE-169
         c2 = c2*DFLOAT(mt(ij))
         c2 = 1.D0/DSQRT(c2)
         IF (e3.LT.0.D0) c2 = -c2
         IF (MOD(Nx(2*ij+6,k),2).EQ.0) c2 = -c2
         DO m = m3, m5
            ji = knx + m - m5
            Bm(3,ji) = Bm(3,k)*Bm(1,ji)*c2
            Bm(1,ji) = Bm(1,k)*Bm(1,ji)*c2
         ENDDO
         Bm(3,k) = 0.D0
         Bm(1,k) = 0.D0
         k2 = k + 1
         GOTO 600
      ENDIF
  800 ij = ij + 1
      IF (ij.LE.4) GOTO 500
      k2 = k1
      lt2 = .FALSE.
      IF (.NOT.(lt1)) THEN
C IF AXIS OF QUANTIFICATION NOT IN VERTICAL PLANE, TAKE IMAGINARY       OBSE-187
C AMPLITUDE FOR PURE IMAGINARY TENSORS                                  OBSE-188
         DO k = k1, knx
            m1 = Nx(7,k) + Nx(9,k) + Nx(11,k) + Nx(13,k)
            IF (MOD(m1,2).NE.0) Bm(3,k) = Bm(1,k)
         ENDDO
      ENDIF
  900 IF (lt1) GOTO 1300
C THE FIRST NON ZERO MAGNETIC QUANTUM NUMBER MUST BE POSITIVE           OBSE-194
      DO k4 = k1, knx
         Bm(1,k4) = 0.D0
         DO j = 8, 14, 2
            IF (Nx(j,k4).LT.0) GOTO 950
            IF (Nx(j,k4).NE.0) GOTO 1000
         ENDDO
         GOTO 1000
  950    ik = 0
         DO j = 8, 14, 2
            ik = ik + Nx(j - 1,k4) + Nx(j,k4)
            Nx(j,k4) = -Nx(j,k4)
         ENDDO
         IF (2*(ik/2).NE.ik) Bm(3,k4) = -Bm(3,k4)
 1000 ENDDO
      klt = 2
C REDUCTION OF THE DESCRIPTION                                          OBSE-208
C FOR CHANGE INTO TENSORS IF KLT=1, FOR HERE IF KLT=2                   OBSE-209
C FOR CHANGE TO AXIS IN THE REACTION PLANE IF KLT=3                     OBSE-210
 1100 IF (k1.GT.knx) THEN
         WRITE (MW,99050)
99050    FORMAT (' ZERO OBSERVABLE')
         GOTO 2500
      ELSE
         DO k4 = k1, knx
            IF (DABS(Bm(3,k4)) + DABS(Bm(1,k4)).LT..1D-6) GOTO 1200
            k5 = k4 - 1
            IF (k1.LE.k5) THEN
               DO j = k1, k5
                  DO i = 7, 14
                     IF (Nx(i,j).NE.Nx(i,k4)) GOTO 1110
                  ENDDO
                  GOTO 1150
 1110          ENDDO
            ENDIF
         ENDDO
         IF (klt.EQ.1) GOTO 800
         IF (klt.EQ.2) GOTO 1300
         IF (klt.EQ.3) THEN
            ij = ij + 2
            IF (ij.LE.13) GOTO 1400
            DO j1 = k1, knx
               m1 = Nx(7,j1) + Nx(9,j1) + Nx(11,j1) + Nx(13,j1)
               m2 = Nx(8,j1) + Nx(10,j1) + Nx(12,j1) + Nx(14,j1) + 4*m1
               m3 = m2/2
               IF (2*(m1/2).EQ.m1) THEN
                  IF (2*m3.NE.m2) Bm(3,j1) = -Bm(1,j1)
               ELSEIF (2*m3.EQ.m2) THEN
                  Bm(3,j1) = Bm(1,j1)
               ENDIF
               IF (2*(m3/2).NE.m3) Bm(3,j1) = -Bm(3,j1)
            ENDDO
            lt1 = .FALSE.
            WRITE (MW,99055)
99055       FORMAT (//' AFTER TRANSFORMATION'/)
            k = knx + 1 - k1
            GOTO 300
         ENDIF
 1150    Bm(3,j) = Bm(3,j) + Bm(3,k4)
         Bm(1,j) = Bm(1,j) + Bm(1,k4)
      ENDIF
 1200 knx = knx - 1
      IF (knx.GE.k4) THEN
         DO k = k4, knx
            DO j = 7, 14
               Nx(j,k) = Nx(j,k + 1)
            ENDDO
            Bm(1,k) = Bm(1,k + 1)
            Bm(3,k) = Bm(3,k + 1)
         ENDDO
      ENDIF
      GOTO 1100
C OUTPUT OF THE DESCRIPTION                                             OBSE-234
 1300 k3 = MIN0(k2 + 5,knx)
      WRITE (MW,99115) ((Nx(i,j),i = 11,14),j = k2,k3)
      WRITE (MW,99060) (Bm(3,i),i = k2,k3)
99060 FORMAT (6(' +',F8.4,'*A',9X))
      WRITE (MW,99120) ((Nx(i,j),i = 7,10),j = k2,k3)
      IF (lt1) WRITE (MW,99125) (Bm(1,i),i = k2,k3)
      k2 = k3 + 1
      IF (k2.LE.knx) GOTO 1300
      DO k = k1, knx
         DO i = 8, 14, 2
            IF (IABS(Nx(i,k)).GT.Nx(i - 1,k) .OR. Nx(i - 1,k).LT.0)
     &          GOTO 2000
         ENDDO
      ENDDO
      IF (.NOT.lt1) THEN
C STORAGE OF THE DESCRIPTION                                            OBSE-331
         l1 = 0
         Itx(1,kit) = k1
         Itx(2,kit) = knx
         DO i = 1, Nt
            IF (Mf(2,i).EQ. - kx) THEN
               Mf(2,i) = kz
               Mf(6,i) = lt3
               l1 = l1 + 1
            ENDIF
         ENDDO
         IF (l1.EQ.0) WRITE (MW,99065) kx
99065    FORMAT (' THE OBSERVABLE READ WITH NUMBER',I4,' IS NOT USED')
         GOTO 100
      ELSE
C CHANGE FROM VERTICAL AXIS OF QUANTIFICATION TO HELICITY DESCRIPTION   OBSE-248
C BY THE ROTATION R(PI/2,PI/2,PI/2)                                     OBSE-249
         DO i = k1, knx
            m1 = IABS(Nx(8,i)) + IABS(Nx(10,i)) + IABS(Nx(12,i))
     &           + IABS(Nx(14,i))
            m2 = m1/2
            IF (2*m2.NE.m1) GOTO 2100
            IF (2*(m2/2).NE.m2) THEN
               Bm(3,i) = -Bm(3,i)
               Bm(1,i) = -Bm(1,i)
            ENDIF
            IF (m1.EQ.0) Bm(1,i) = 0.D0
         ENDDO
         klt = 3
C PSEUDO-LOOP ON IJ TO 50                                               OBSE-260
         ij = 7
      ENDIF
 1400 j1 = knx
      DO k3 = k1, knx
         k = Nx(ij,k3)
         n1 = k + Nx(ij + 1,k3) + 1
         n = 2*k + 1
         e3 = 1.D0
         IF (k.NE.0) THEN
C ROTATION MATRIX ELEMENTS FOR PI/2                                     OBSE-269
            DO i = 1, k
               e3 = e3*.5D0
            ENDDO
         ENDIF
         c1 = 0.D0
         e2 = 0.D0
         fj = DFLOAT(k)
         fs = -fj
         DO i = 1, n1
            IF (i.NE.1) THEN
               c2 = c1
               c1 = DSQRT(DFLOAT((i-1)*(1+n-i)))
               e1 = e2
               e2 = e3
               e3 = (2.D0*fj*e2 - e1*c2)/c1
               fs = fs + 1.D0
            ENDIF
            f2 = 0.D0
         ENDDO
         f3 = e3
         d1 = 0.D0
         DO j = 1, n
            IF (j.NE.1) THEN
               d2 = d1
               d1 = DSQRT(DFLOAT((j-1)*(1+n-j)))
               f1 = f2
               f2 = f3
               f3 = (2.D0*fs*f2 - f1*d2)/d1
            ENDIF
            j1 = j1 + 1
            IF (9*j1.GT.Jtn) CALL MEMO('OBSE',Jtn,9*j1,2)
            DO l = 7, 14
               Nx(l,j1) = Nx(l,k3)
            ENDDO
            Bm(3,j1) = f3*Bm(3,k3)
            Bm(1,j1) = f3*Bm(1,k3)
            Nx(ij + 1,j1) = j - 1 - k
         ENDDO
      ENDDO
C REDUCTION OF THE DESCRIPTION                                          OBSE-302
      j2 = k1 - 1
      j3 = knx + 1
      DO j4 = j3, j1
         j2 = j2 + 1
         DO l = 7, 14
            Nx(l,j2) = Nx(l,j4)
         ENDDO
         Bm(3,j2) = Bm(3,j4)
         Bm(1,j2) = Bm(1,j4)
      ENDDO
      knx = j2
      GOTO 1100
C COMPUTATION OF ALL THE INDICATIONS NEEDED FOR THE OBSERVABLES         OBSE-343
C (BEGINNING AND END OF DO LOOPS,GEOMETRICAL COEFFICIENTS ...)          OBSE-344
 1500 DO i = 1, Nt
         i1 = Mf(2,i) + 1
         Mf(3,i) = Itx(1,i1)
         Mf(4,i) = Itx(2,i1)
      ENDDO
      lt1 = .FALSE.
 1600 lt1 = .NOT.lt1
C LT1=.TRUE.  FIRST PASSAGE: NUMBER OF INFORMATIONS NEEDED FOR DO LOOPS OBSE-351
C LT1=.FALSE. SECOND ONE: COMPUTATION OF GEOMETRICAL COEFFICIENTS WHICH OBSE-352
C ARE STORED AFTER THE INDICATIONS FOR DO LOOPS                         OBSE-353
      ical = 0
      ncal = 0
      DO i = 1, Nt
         iv = Mf(1,i)
         mt(3) = Ipi(2,iv)
         mt(4) = Ipi(3,iv)
         IF (Mf(2,i).GT.0 .AND. Mf(2,i).NE.19) THEN
            IF (Mf(2,i).NE.1) THEN
               IF ((Mf(2,i).EQ.2 .AND. mt(1).LE.3) .OR.
     &             (Mf(2,i).EQ.3 .AND. mt(3).LE.3)) THEN
                  Mf(2,i) = -Mf(2,i)
                  IF (.NOT.((Mf(2,i).EQ.-2.AND.mt(1).EQ.0) .OR.
     &                (Mf(2,i).EQ.-3.AND.mt(3).EQ.0))) GOTO 1700
                  GOTO 2300
               ELSE
                  IF (i.NE.1) THEN
                     i1 = i - 1
                     DO j = 1, i1
                        IF (Mf(1,i).EQ.Mf(1,j) .AND. Mf(2,i).EQ.Mf(2,j))
     &                      GOTO 1610
                     ENDDO
                  ENDIF
                  i1 = Mf(3,i)
                  i2 = Mf(4,i)
                  DO ki = i1, i2
                     kt = 0
                     DO l = 1, 4
                        k = Nx(2*l + 5,ki)
                        nm = Nx(2*l + 6,ki)
                        kt = kt + k
                        IF (k.GT.mt(l)) GOTO 2400
                        IF (ical.NE.0) THEN
                           DO n = 1, ical
                              IF (mt(l).EQ.Nx(15,n) .AND. k.EQ.Nx(16,n)
     &                            .AND. nm.EQ.Nx(17,n)) GOTO 1602
                           ENDDO
                        ENDIF
                        ical = ical + 1
                        IF (9*ical.GT.Jtn)
     &                      CALL MEMO('OBSE',Jtn,9*ical,2)
                        Nx(15,ical) = mt(l)
                        Nx(16,ical) = k
                        Nx(17,ical) = nm
                        Nx(18,ical) = Jcal
                        IF (lt1) GOTO 1604
                        il = mt(l)
                        Nx(1,ical) = MAX0(1,1 + nm)
                        Nx(2,ical) = MIN0(il,il + nm)
                        Nx(3,ical) = nm
                        Nx(4,ical) = Jcal - Nx(1,ical) + 1
                        IF (Nx(16,ical).NE.0) THEN
C RECURRENCE COMPUTATION OF GEOMETRICAL COEFFICIENTS                    OBSE-406
                           f3 = DSQRT(DFLOAT(2*k + 1))
                           DO j = 1, k
                              f3 = -
     &                             f3*DSQRT(DFLOAT(il - j)/DFLOAT(il + j
     &                             ))
                           ENDDO
                           jnm = nm
                           inm = IABS(jnm)
                           IF (jnm.NE.0) THEN
                              IF (inm.NE.jnm .AND. 2*(inm/2).NE.inm)
     &                            f3 = -f3
                              DO j = 1, inm
                                 f3 = f3*DSQRT(DFLOAT((k+j)*(k-j+1))
     &                                /DFLOAT(j*(il-j)))
                              ENDDO
                           ENDIF
                           Jcal = Jcal + 1
                           is = Nx(2,ical) - Nx(1,ical)
                           IF (Jcal + is.GT.jts)
     &                         CALL MEMO('OBSE',jts,Jcal + is,2)
                           Bm(Jcal,kx) = f3
                           IF (is.GE.1) THEN
                              f2 = 0.D0
                              d1 = k*(k + 1) - (il + 1)*(inm - 1)
                              c2 = 0.D0
                              DO j = 1, is
                                 c1 = c2
                                 c2 = DSQRT
     &                                (DFLOAT(j*(il-j)*(j+inm)*(il-j-
     &                                inm)))
                                 d1 = d1 +
     &                                DFLOAT(2*(2*j - 2 - il + inm))
                                 f1 = f2
                                 f2 = f3
                                 f3 = -(d1*f2 + c1*f1)/c2
                                 Jcal = Jcal + 1
                                 Bm(Jcal,kx) = f3
                              ENDDO
                           ENDIF
                        ENDIF
                        n = ical
 1602                   IF (.NOT.(lt1)) THEN
                           DO ma = 1, 4
                              mc = 20*ncal + 4*l + ma - 4
                              Nx(mc,kx) = Nx(ma,n)
                           ENDDO
                           lz(l) = Nx(16,n).NE.0
                        ENDIF
 1604                ENDDO
                     IF (.NOT.(lt1)) THEN
                        lz(5) = kt.EQ.0
                        lz(6) = 2*(kt/2).NE.kt
                        nz(1) = 0
                        nz(2) = 0
                        IF (lz(4)) nz(2) = Mf(6,i)
                        IF (lz(3) .OR. lz(4)) nz(1) = Mf(6,i)
                        Lo(226) = Lo(226) .OR. nz(1).NE.0
                        ia1 = 0
                        ia2 = 1
                        DO li = 1, 6
                           IF (lz(li)) ia1 = ia1 + ia2
                           ia2 = 2*ia2
                        ENDDO
                        Nx(20*ncal + 17,kx) = ia1
                        Nx(20*ncal + 18,kx) = nz(1) + 1000*nz(2)
                        Bm(10*ncal + 10,kx) = Bm(3,ki)
                        DO li = 2, 4, 2
                           IF (lz(li)) THEN
                              im = Nx(20*ncal + 4*li - 3,kx)
                              Nx(20*ncal + 4*li - 3,kx) = mt(li)
     &                           - Nx(20*ncal + 4*li - 2,kx) + 1
                              Nx(20*ncal + 4*li - 2,kx) = mt(li)
     &                           - im + 1
                              Nx(20*ncal + 4*li - 1,kx)
     &                           = -Nx(20*ncal + 4*li - 1,kx)
                              Nx(20*ncal + 4*li,kx)
     &                           = Nx(20*ncal + 4*li,kx)
     &                           + im + Nx(20*ncal + 4*li - 2,kx)
                           ENDIF
                        ENDDO
                     ENDIF
                     ncal = ncal + 1
                  ENDDO
                  IF (.NOT.(lt1)) THEN
                     Mf(4,i) = ncal
                     Mf(3,i) = ncal + i1 - i2
                  ENDIF
                  GOTO 1700
               ENDIF
 1610          Mf(3,i) = Mf(3,j)
               Mf(4,i) = Mf(4,j)
            ELSEIF (iv.NE.1) THEN
               GOTO 2200
            ENDIF
         ENDIF
 1700 ENDDO
      IF (.NOT.lt1) THEN
C STORAGE OF LEGENDS AND COPY OF RESULTS                                OBSE-477
         DO i = 1, Nt
            i5 = IABS(Mf(2,i)) + 1
            DO j = 3, 7
               Cmf(j + 3,i) = Itz(j,i5)
            ENDDO
         ENDDO
         DO i = 1, Jcal
            Am(1,i) = Cbm(1,i,kx)
            Am(2,i) = Cbm(2,i,kx)
         ENDDO
         RETURN
      ELSE
         kx = MAX0(knx,ical) + 1
         Jcal = 10*ncal
         jts = Jtn - 18*(kx - 1)
         IF (Jcal.GT.jts) CALL MEMO('OBSE',jts,Jcal,2)
         GOTO 1600
      ENDIF
 1800 WRITE (MW,99070) i, Mf(2,i)
99070 FORMAT (' THE',I4,'TH OBSERVABLE, OF KIND',I2,
     &        ' MUST BE FOR EXPERIMENTAL DATA')
      GOTO 2500
 1900 WRITE (MW,99075) i, Mf(2,i)
99075 FORMAT (' THE',I4,'TH OBSERVABLE, OF KIND',I2,' IS NOT DEFINED')
      GOTO 2500
 2000 WRITE (MW,99080) Nx(2*i - 1,k1), Nx(2*i,k1)
99080 FORMAT (/
     &    ' TOO LARGE MAGNETIC QUANTUM NUMBER OR NEGATIVE MULTIPOLARITY'
     &    ,2I6)
      GOTO 2500
 2100 WRITE (MW,99085)
99085 FORMAT (
     &   ' THE SUM OF MAGNETIC QUANTUM NUMBERS IS ODD FOR ONE COMPONENT'
     &   )
      GOTO 2500
 2200 WRITE (MW,99090) Mf(1,i)
99090 FORMAT (
     &' NO CROSS SECTION DIVIDED BY RUTHERFORD''S FOR THE INELASTIC CHAN
     &NEL',I3)
      GOTO 2500
 2300 WRITE (MW,99095) Mf(1,i)
99095 FORMAT (' NO POLARISATION FOR A ZERO SPIN IN THE CHANNEL',I3)
      GOTO 2500
 2400 WRITE (MW,99100) mt(l), Mf(2,i), l, k
99100 FORMAT (5X,I5,' IS A TOO SMALL SPIN IN CHANNEL',I4,
     &        ' AND PARTICLE',I4,' FOR A POLARISATION OF TENSOR ORDER',
     &        I4)
 2500 WRITE (MW,99105)
99105 FORMAT (//' IN OBSE  ... STOP ...')
      STOP
99110 FORMAT (6F10.5)
99115 FORMAT (/6(11X,4I2,2X))
99120 FORMAT (6(11X,4I2,2X))
99125 FORMAT (' IMAGINARY PARTS'/6(1X,F8.5,12X))
      END
C 01/01/04                                                      ECIS03  COLF-000
      SUBROUTINE COLF(Ncolt,Ncoll,Ipi,Wv,Fg,Xg,Ism,Lmax1,Lmax2,H,Iexp,Z,
     &                Lm,Lmax3,Niv,Kxt,Lo)
C COULOMB FUNCTIONS AT THE MATCHING POINT RM=ISM*H                      COLF-003
C INPUT VARIABLES: NCOLT:   NUMBER OF NUCLEAR STATES (COUPLED OR NOT)   COLF-004
C                           AND CONTINUA FOR COMPOUND NUCLEUS           COLF-005
C                  NCOLL:   NUMBER OF COUPLED STATES                    COLF-006
C                  IPI(J,*):PRODUCT OF CHARGES FOR J=4                  COLF-007
C                  WV(J,*): MASS OF PARTICLE AND TARGET FOR J=1,2       COLF-008
C                           CENTER OF MASS ENERGY IN MEV FOR J=3        COLF-009
C                  ISM:     NUMBER OF POINTS FOR INTEGRATION            COLF-010
C                  LMAX1:   MAXIMUM NUMBER OF COULOMB FUNCTIONS         COLF-011
C                  LMAX2:   MAXIMUM NUMBER OF COULOMB PHASE SHIFTS      COLF-012
C                  H:       INTEGRATION STEP SIZE IN FERMIS             COLF-013
C                  LM:      LENGTH OF WORKING SPACE AS SINGLE PRECISION COLF-014
C                  NIV(*,*,3): ADDRESSES OF COULOMB INTEGRALS           COLF-015
C                  LO:      LOGICAL CONTROLS                            COLF-016
C FOR COMMON /NCOMP/ SEE CALX, LECT AND COLF                            COLF-017
C IN COMMON /NCOMP/NRD,NFISS: NUMBER OF GAMMA AND FISSION TRANSMISSION  COLF-018
C                             COEFFICIENTS READ IN LECT                 COLF-019
C                  TG0,BN,FNUG,EGD,GGD:  NEUTRON BINDING ENERGY         COLF-020
C                           GIANT DIPOLE RESONANCE ENERGY AND WIDTH ....COLF-021
C IN COMMON /DCONT/  XE,XM,XN:      RELATIVISTIC ENERGY AND MASS (COLF) COLF-022
C                    XZ:            CONVERSION FACTOR TO MILLIBARNS     COLF-023
C OUTPUT VARIABLES:WV(4,*): WAVE NUMBER IN 1/FERMI                     COLF-024
C                  WV(5,*): COULOMB PARAMETER                           COLF-025
C                  WV(6,*): SQUARE ROOT OF RATIOS OF WAVE NUMBERS       COLF-026
C                           (MODIFIED BY STEP SIZES)                    COLF-027
C                  WV(7,*): RELATIVISTIC ENERGY                         COLF-028
C                  WV(8,*): STEP SIZE TIMES RATIO OF WAVE NUMBER TO     COLF-029
C                                SQUARE ROOT OF NON RELATIVISTIC ENERGY COLF-030
C                  WV(9,*): WAVE NUMBER MULTIPLIES BY RATIO OF STEPS    COLF-031
C                  WV(10,*):SQUARE OF THE PRODUCT OF WAVE NUMBER BY THE COLF-032
C                                STEP SIZE                              COLF-033
C                  WV(11,*):STEP SIZE FOR THE LEVEL                     COLF-034
C TO TAKE INTO ACCOUNT RECOIL WHEN THE MASSES ARE NOT THE SAME IN ALL   COLF-035
C THE CHANNELS, THE WV(8,*) AND WV(9,*) ARE MULTIPLIED BY A SCALE FACTORCOLF-036
C X=(INITIAL TARGET MASS)/(TARGET MASS) AND WV(10,*) IS MULTIPLIED BY   COLF-037
C ITS SQUARE. ALWAYS WV(10,*)=(H*WV(9,*))**2.                           COLF-038
C                  FG(M,I=1 TO 4,IV): F,FP,G,GP FOR L=M-1 AND IV=1,NCOLLCOLF-039
C                   AND INTEGRALS OF F*F,F*G,G*F AND G*G/R**2 FROM RM TOCOLF-040
C                   INFINITY IF LO(44)=.TRUE. FOR IV GREATER THAN NCOLL COLF-041
C                  XG(M,IV): SIGMA(M-1)-SIGMA(0) FOR IV=1,NCOLL         COLF-042
C                   AND INTEGRALS OF F*F/R**2 FROM ZERO TO INFINITY     COLF-043
C                   IF LO(44)=.TRUE. FOR IV GREATER THAN NCOLL          COLF-044
C                  KXT:   TOTAL NUMBER OF PENETRABILITIES               COLF-045
C                  KXT:   NUMBER OF PENETRABILITIES FOR UNCOUPLED STATESCOLF-046
C                  LMAX3: EFFECTIVE MAXIMUM NUMBER OF COULOMB FUNCTIONS COLF-047
C                  IPI(J,I): FOR I=NCOLL+1 TO NCOLT, MAXIMUM L+1 AND    COLF-048
C                   STARTING ADDRESS OF PENETRABILITIES IN 7 AND 9      COLF-049
C WORKING FIELD IN FCOU: IEXP(I), I=1,LMAX1  POWERS OF 10 FOR LARGE     COLF-050
C                    VALUES OF FUNCTIONS (MULTIPLES OF 10**30)          COLF-051
C WORKING FIELD IN CORI:  Z  SEE IN CORI                                COLF-052
C***********************************************************************COLF-053
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      REAL*8 CCZ, CHB, CK, CM, CMB, XE, XM, XN, XZ
      INTEGER MR, MS, MW
      COMMON /DCONS / CM, CK, CHB, CMB, CCZ
      COMMON /DCONT / XE, XM, XN, XZ
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      REAL*8 H
      INTEGER Ism, Kxt, Lm, Lmax1, Lmax2, Lmax3, Ncoll, Ncolt
      REAL*8 Fg(Lmax1,4,1), Wv(18,1), Xg(Lmax2,1), Z(1)
      INTEGER Iexp(1), Ipi(11,*), Niv(Ncoll,Ncoll,3)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 amr, amrd, amt, ej, eta, g, hpc, hrec, rau, rec, rm, si,
     &       sj, wsk2, xi, xj
      DOUBLE PRECISION DABS, DATAN2, DSQRT
      INTEGER i, j, k, lmx1, lx, ly
      INTEGER IDINT, MIN0
C
C
      Kxt = 0
      XM = CM*Wv(1,1)*Wv(2,1)/(Wv(1,1) + Wv(2,1))
      IF (Lo(98)) XM = CM*Wv(1,1)
      IF (.NOT.Lo(209)) WRITE (MW,99005)
99005 FORMAT (/
     &' LEVEL       WAVE NUMBER  COULOMB PARAMETER   SQRT(K OUT/K IN)
     &REL. ENHANC.      REDUCED MASS       STEP SIZE')
      IF (Lo(209)) WRITE (MW,99010) XM
99010 FORMAT (/
     &' LEVEL       WAVE NUMBER  COULOMB PARAMETER   SQRT(K OUT/K IN)
     &REL. ENERGY        STEP SIZE  ** MASS =',F15.8,' **')
      XN = CHB**2/(2.D0*XM)
C CHECK OF THE LENGTH OF WORKING FIELD FOR IEXP                         COLF-067
      IF (Lm.LT.Lmax1) CALL MEMO('COLF',Lm,Lmax1,2)
      amrd = XM/CM
      amr = Wv(3,1)/CM + Wv(1,1) + Wv(2,1)
      Lmax3 = Lmax1
C WAVE NUMBER,COULOMB PARAMETER AND CALL TO COULOMB SUBROUTINES         COLF-072
      DO i = 1, Ncolt
         rec = 1.D0
         IF (Lo(193) .AND. Wv(1,1).NE.Wv(1,i)) rec = Wv(2,1)/Wv(2,i)
         hrec = H*rec
         rm = Ism*H
         Wv(11,i) = hrec
         IF (Lo(8)) THEN
            amt = Wv(2,i)
            IF (.NOT.(Lo(209))) THEN
C REDUCED MASS REPLACED BY REDUCED ENERGY (H.V. GERAMB'S SUGGESTION)    COLF-085
C FOR RELATIVISTIC CONVENTIONAL SCHROEDINGER EQUATION                   COLF-086
               IF (Lo(44)) amt = Wv(2,1)
               amrd = (amr**4 - (Wv(1,i)**2 - amt**2)**2)/(4.D0*amr**3)
            ENDIF
            wsk2 = 0.125D0*CK*Wv(3,i)
     &             *(Wv(3,i)/CM + 2.D0*Wv(1,i) + 2.D0*amt)
     &             *(Wv(3,i)/CM + 2.D0*Wv(1,i))*(Wv(3,i)/CM + 2.D0*amt)
     &             /amr**2
         ELSE
            amrd = Wv(1,i)*Wv(2,i)/(Wv(1,i) + Wv(2,i))
            wsk2 = CK*Wv(3,i)*amrd
         ENDIF
         Wv(4,i) = DSQRT(DABS(wsk2))
         Wv(9,i) = Wv(4,i)*rec
         Wv(6,i) = DSQRT(Wv(9,i)/Wv(9,1))
         Wv(8,i) = hrec*DSQRT(CK*amrd)
         Wv(10,i) = hrec*hrec*wsk2
         IF (Lo(209)) THEN
            hpc = CHB*Wv(4,i)
            Wv(7,i) = DSQRT(hpc**2 + XM**2)
            Wv(5,i) = CCZ*Ipi(4,i)/Wv(4,i)*Wv(7,i)/CHB**2
            IF (i.LE.Ncoll) WRITE (MW,99020) i, (Wv(j,i),j = 4,7), hrec
         ELSE
            Wv(5,i) = 0.5D0*CK*CCZ*amrd*Ipi(4,i)/Wv(4,i)
            g = amrd*(Wv(1,i) + Wv(2,i))/(Wv(1,i)*Wv(2,i))
            IF (i.LE.Ncoll) WRITE (MW,99020) i, (Wv(j,i),j = 4,6), g,
     &                             amrd, hrec
         ENDIF
         IF (DABS(Wv(5,i)).GT.400.D0) Wv(5,i) = 400.D0*Wv(5,i)
     &       /DABS(Wv(5,i))
         IF (i.GT.Ncoll) THEN
            ly = 0
            IF (Wv(3,i).GT.0.) ly = MIN0(IDINT(4.D0 + 3.3D0*DSQRT(Wv(3,i
     &                              ))),Lmax1)
            Ipi(10,i) = ly - 1
            Ipi(8,i) = Kxt
            Kxt = Kxt + ly*Ipi(2,i)
         ELSE
            rau = rm*Wv(9,i)
            eta = Wv(5,i)
            IF (Wv(3,i).GT.0.) THEN
               lx = Lmax1
               CALL FCOU(lx - 1,eta,rau,Fg(1,1,i),Fg(1,2,i),Fg(1,3,i),
     &                   Fg(1,4,i),Iexp,Xg(1,i))
            ELSE
               CALL COCL(Fg(1,1,i),Fg(1,2,i),Fg(1,3,i),Fg(1,4,i),Xg(1,i)
     &                   ,eta,rau,Lmax1 - 1)
            ENDIF
            Ipi(10,i) = Ipi(10,1)
            IF (wsk2.GE.0.D0) THEN
C COMPUTATION OF COULOMB PHASE-SHIFTS                                   COLF-125
               lmx1 = Lmax3
C CORRECTION OF LARGE VALUE AND SEARCH FOR MAXIMUM EFFECTIVE NUMBER     COLF-127
C OF COULOMB FUNCTIONS                                                  COLF-128
               DO j = 1, lmx1
                  IF (Iexp(j).NE.0) THEN
                     IF (Lo(208) .OR. Iexp(j).GT.15)
     &                   Lmax3 = MIN0(Lmax3,j)
                     Fg(j,1,i) = Fg(j,1,i)*1.D-15
                     Fg(j,2,i) = Fg(j,2,i)*1.D-15
                     Fg(j,3,i) = Fg(j,3,i)*1.D15
                     Fg(j,4,i) = Fg(j,4,i)*1.D15
                  ENDIF
               ENDDO
               IF (lmx1.NE.Lmax3) WRITE (MW,99015) lmx1, Lmax3
99015          FORMAT (
     &                ' NUMBER OF FINITE COULOMB INTEGRALS REDUCED FROM'
     &                ,I6,' TO',I6)
               IF (.NOT.Lo(208)) Ipi(10,i) = MIN0(Lmax3 - 1,Ipi(10,1))
C COMPUTATION OF COULOMB INTEGRALS                                      COLF-139
               xi = Xg(1,i)
               si = Wv(9,i)
               DO j = 1, i
                  k = Niv(i,j,3)
                  IF (k.NE.0) THEN
                     xj = Xg(1,j)
                     ej = Wv(5,j)
                     sj = Wv(9,j)
                     CALL CORI(eta,ej,si,sj,rm,Xg(1,k),xi,xj,Fg(1,1,i),
     &                         Fg(1,1,j),Z,Lmax1,Lmax2,Lm,Lmax3,
     &                         Fg(1,1,k))
                  ENDIF
               ENDDO
            ENDIF
         ENDIF
      ENDDO
      XZ = 10.D0/DFLOAT(Ipi(2,1)*Ipi(3,1))/Wv(4,1)**2
      DO i = 1, Ncoll
         Xg(1,i) = 0.D0
         DO j = 2, Lmax2
            Xg(j,i) = Xg(j - 1,i) + DATAN2(Wv(5,i),DFLOAT(j - 1))
         ENDDO
      ENDDO
      XE = Wv(7,1)
      RETURN
99020 FORMAT (1X,I5,6F18.10)
      END
C 01/01/04                                                      ECIS03  COCL-000
      SUBROUTINE COCL(G,Gd,F,Fd,Sigma,Eta,R,L)
C COMPUTATION OF LOGARITHMIC DERIVATIVE AT THE MATCHING RADIUS OF       COCL-002
C INCREASING AND DECREASING SOLUTIONS WITH WRONSKIAN EQUAL TO UNITY     COCL-003
C FOR CLOSED CHANNELS.                                                  COCL-004
C FOR NEGATIVE VALUES OF ETA, THE LOGARITHMIC DERIVATIVE OF THE         COCL-005
C DECREASING SOLUTION IS COMPUTED, THE LOGARITHMIC DERIVATIVE OF THE    COCL-006
C INCREASING FUNCTION IS ASSUMED OPPOSITE. IF A NEGATIVE ETA DIFFERS    COCL-007
C BY LESS THAN 1/4 PERCENT OF AN INTEGER THE NEXT INTEGER VALUE IS      COCL-008
C USED (LAGUERRE POLYNOMIAL); IN OTHER CASES, C BACKWARDS INTEGRATION   COCL-009
C STARTING BEYOND THE OSCILLATIONS ESTIMATED UP TO 2*|ETA|.             COCL-010
C                                                                       COCL-011
C INPUT VARIABLES: ETA: COULOMB PARAMETER; ETA >= 0                     COCL-012
C                  R:   |K|*R VALUE                                     COCL-013
C                  L:   MAXIMUM L VALUE                                 COCL-014
C OUTPUT VARIABLES: SIGMA(I)=0 FOR I = 1 TO L+1                         COCL-015
C       F(I):  DECREASING SOLUTION AT (ETA,RHO) FOR I = 1 TO L+1        COCL-016
C       FD(I): DERIVATIVE OF F(I) FOR I = 1 TO L+1                      COCL-017
C       G(I):  INCREASING SOLUTION FOR I = 1 TO L+1                     COCL-018
C       GD(I): DERIVATIVE OF F(I) FOR I = 1 TO L+1                      COCL-019
C       SIGMA(I) RETIRNS 0.                                             COCL-020
C THE FUNCTIONS ARE RENORMALISED TO F=G AND SUCH THAT  F*GD-G*FD=1      COCL-021
C***********************************************************************COCL-022
      IMPLICIT REAL*8(a - h,O - z)
C
C
C Dummy arguments
C
      REAL*8 Eta, R
      INTEGER L
      REAL*8 F(1), Fd(1), G(1), Gd(1), Sigma(1)
C
C Local variables
C
      REAL*8 a, al, am, b, c, ce, d, et2, ff, ffm, fp, gama, gg, gp, h,
     &       psr, r2, rp, rr, s(7), u, u0, u1, u2, up, uu, v, v0, v1,
     &       v2, v3, vp, x, xm, xn, xn1, xx, y, z
      DOUBLE PRECISION DABS, DEXP, DLOG, DMAX1, DMIN1, DSQRT
      INTEGER i, j, k, ll, lp, m, mp, n
      INTEGER IDINT, MIN0
C
C
      DATA gama/0.577215664901533D0/
C FOR L=0                                                               COCL-026
      IF (Eta.LE. - 1.D-6) THEN
         lp = IDINT( - Eta + .5D0)
         IF (DABS((DFLOAT(lp)+Eta)/Eta).LT..0025D0) THEN
            ff = 1.D0
            fp = 1.D0
            mp = L + 50 - IDINT(5.D0*Eta)
            DO m = mp, 1, -1
               ffm = DFLOAT(m)
               a = Eta/ffm
               b = a + ffm/R
               z = fp + b*ff
               fp = b*z - (a*a - 1.D0)*ff
               ff = z
               IF (DABS(ff).GE.1.D0) THEN
                  fp = fp/ff
                  ff = 1.D0
               ENDIF
               IF (m.LE.L + 1) THEN
                  gp = 1.D0
                  IF (fp.NE.0.D0) gp = -fp
                  gg = 1.D0
                  IF (ff.NE.0.D0) gg = ff
                  x = DSQRT(DABS(gp*ff - gg*fp))
                  F(m) = ff/x
                  Fd(m) = fp/x
                  G(m) = gg/x
                  Gd(m) = gp/x
               ENDIF
            ENDDO
         ELSE
            ll = MIN0(L,IDINT( - Eta))
            rp = DMAX1( - 2.D0*Eta - R,0.D0)
            DO m = 0, ll
               al = m*(m + 1)
               h = DMIN1(.001953125D0,R/DFLOAT(4 + m))
               n = IDINT(1.D0 + (40.D0 + rp)/h)
               rr = R + DFLOAT(n)*h
               v2 = h**2*(1.D0 + al/rr**2 + 2.D0*Eta/rr)/12.D0
               rr = R + DFLOAT(n - 1)*h
               v3 = h**2*(1.D0 + al/rr**2 + 2.D0*Eta/rr)/12.D0
               s(6) = DEXP( - h)
               s(7) = 1.D0
               DO i = n - 2, -3, -1
                  DO j = 1, 6
                     s(j) = s(j + 1)/s(7)
                  ENDDO
                  v1 = v2
                  v2 = v3
                  rr = R + DFLOAT(i)*h
                  v3 = h**2*(1.D0 + al/rr**2 + 2.D0*Eta/rr)/12.D0
                  s(7) = (s(6)*(2.D0 + 10.D0*v2) - s(5)*(1.D0 - v1))
     &                   /(1.D0 - v3)
               ENDDO
               fp = ((s(1) - s(7))/60.D0 + .15D0*(s(6) - s(2))
     &              + .75D0*(s(3) - s(5)))/h
               ff = s(4)
               gp = 1.D0
               IF (fp.NE.0.D0) gp = -fp
               gg = 1.D0
               IF (ff.NE.0.D0) gg = ff
               x = DSQRT(DABS(gp*ff - gg*fp))
               F(m + 1) = ff/x
               Fd(m + 1) = fp/x
               G(m + 1) = gg/x
               Gd(m + 1) = gp/x
            ENDDO
            IF (ll.NE.L) THEN
               fp = Fd(ll + 1)/F(ll + 1)
               DO m = ll + 1, L
                  xm = DFLOAT(m)
                  a = Eta/xm
                  b = a + xm/R
                  fp = (a*a - 1.D0)/(b - Fd(m)/F(m)) - b
                  x = DSQRT(DABS(2.D0*fp))
                  F(m + 1) = 1.D0/x
                  Fd(m + 1) = fp/x
                  G(m + 1) = 1.D0/x
                  Gd(m + 1) = -fp/x
               ENDDO
            ENDIF
         ENDIF
      ELSE
         IF (Eta.LE.1.D-6) THEN
C NO COULOMB POTENTIAL                                                  COCL-029
            fp = -1.D0
            gp = 1.D0
         ELSEIF ((Eta + 1.D0)*R.LE.8.D0) THEN
C SERIES EXPANSION                                                      COCL-034
            r2 = -R*R
            et2 = Eta + Eta
            u0 = 0.D0
            u1 = R
            v0 = 1.D0
            v1 = 0.D0
            u = u0 + u1
            v = v0 + v1
            up = 1.D0
            vp = 0.D0
            DO n = 2, 10000
               xn = DFLOAT(n)
               xn1 = xn*(xn - 1.D0)
               u2 = (et2*R*u1 - r2*u0)/xn1
               u = u + u2
               v2 = (et2*R*v1 - r2*v0 - et2*(2.D0*xn - 1.D0)*u2)/xn1
               v = v + v2
               up = up + xn*u2/R
               vp = vp + xn*v2/R
               IF (DABS(u2).LE.1.D-16*DABS(u)) THEN
                  IF (DABS(v2).LE.1.D-16*DABS(v)) GOTO 20
               ENDIF
               u0 = u1
               u1 = u2
               v0 = v1
               v1 = v2
            ENDDO
   20       xx = DABS(Eta)
            IF (xx.LT.1.D-8) THEN
               psr = gama - 1.D0
            ELSE
               y = xx
               k = 0
               IF (xx.LE.7.5D0) k = IDINT(8.5D0 - xx)
               x = 1.D0 + xx + DFLOAT(k)
               uu = 1.D0/x**2
               psr = DLOG(x) - .5D0/x - uu/12.D0 + uu**2/120.D0 -
     &               uu**3/252.D0 + uu**4/240.D0 - uu**5/132.D0 +
     &               uu**6*691.D0/32760.D0
               IF (k.NE.0) THEN
                  DO i = 1, k
                     psr = psr - 1.D0/(x - DFLOAT(i))
                  ENDDO
               ENDIF
               psr = psr - .5D0/y + 2.D0*gama - 1.D0
            ENDIF
            ce = et2*(psr + DLOG(2.D0*R))
            fp = (vp + up*ce + et2*u/R)/(v + u*ce)
         ELSEIF (R.LT.10.D0*(Eta + 1.D0)) THEN
C LONG RANGE INTEGRATION                                                COCL-091
            h = DMIN1(.001953125D0,.25D0*R)
            n = 1 + IDINT(10.D0/h)
            s(6) = DEXP( - h)
            s(7) = 1.D0
            v2 = h**2*(1.D0 + 2.D0*Eta/(R + h*DFLOAT(n)))/12.D0
            v3 = h**2*(1.D0 + 2.D0*Eta/(R + h*DFLOAT(n-1)))/12.D0
            DO i = n - 2, -3, -1
               DO j = 1, 6
                  s(j) = s(j + 1)/s(7)
               ENDDO
               v1 = v2
               v2 = v3
               v3 = h**2*(1.D0 + 2.D0*Eta/(R + h*DFLOAT(i)))/12.D0
               s(7) = (s(6)*(2.D0 + 10.D0*v2) - s(5)*(1.D0 - v1))
     &                /(1.D0 - v3)
            ENDDO
            fp = ((s(1) - s(7))/60.D0 + .15D0*(s(6) - s(2))
     &           + .75D0*(s(3) - s(5)))/h/s(4)
         ELSE
C ASYMPTOTIC EXPANSION                                                  COCL-079
            c = 1.D0/R
            a = 1.D0
            b = a
            d = 0.D0
            DO m = 1, 26
               am = DFLOAT(m)
               a = -a*0.5D0*(Eta + am - 1.D0)*(Eta + am)*c/am
               b = b + a
               d = d - a*am*c
            ENDDO
            fp = d/b - 1.D0 - Eta/R
         ENDIF
         xx = 1.D0
         mp = L + 25 + IDINT(5.D0*DABS(Eta))
         DO m = mp, 1, -1
            xm = DFLOAT(m)
            a = Eta/xm
            b = a + xm/R
            xx = -(a*a - 1.D0)/(b + xx) + b
            IF (m.LE.L) Gd(m) = xx
         ENDDO
         DO m = 1, L + 1
            x = DSQRT(DABS(Gd(m) - fp))
            xm = DFLOAT(m)
            F(m) = 1.D0/x
            Fd(m) = fp/x
            G(m) = 1.D0/x
            Gd(m) = Gd(m)/x
            a = Eta/xm
            b = a + xm/R
            fp = (a*a - 1.D0)/(b - Fd(m)/F(m)) - b
         ENDDO
      ENDIF
      DO m = 0, L
         Sigma(m + 1) = 0.D0
      ENDDO
      END
C 01/01/04                                                      ECIS03  FCOU-000
      SUBROUTINE FCOU(L,Eta,Ro,F,Fp,G,Gp,Iexp,Sigma)
COULOMB FUNCTIONS FOR RHO > 0 AND -500 < ETA < 500   EX - DFCOUL        FCOU-002
C  FOR THE MATHEMATICAL DESCRIPTION SEE CHR. BARDIN ET. AL. CEA-N-906   FCOU-003
C  OR BARDIN ET AL. COMP. PHYSICS COMM. VOL 3 (1972) PAGES 73-87        FCOU-004
C  NUMERICAL ACCURACY: AT LEAST 8 SIGNIFICANT DIGITS, AN EXCEPTION IS   FCOU-005
C  THE REGION -8 < ETA < -6 AND RO < 125/6                              FCOU-006
C THE CALCULATION OF PHASE-SHIFTS HAS BEEN SUPPRESSED EXCEPT FOR L=0    FCOU-007
      IMPLICIT REAL*8(a - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      REAL*8 Eta, Ro
      INTEGER L
      REAL*8 F(1), Fp(1), G(1), Gp(1), Sigma(1)
      INTEGER Iexp(1)
C
C Local variables
C
      REAL*8 a, b, etac, f1, fact, factp, fi, fl, fp1, fpi, fpl, fptest,
     &       ftest, g1, gp1, roinf, sigma1, xm, zag, zig
      DOUBLE PRECISION DABS, DLOG10, DSQRT
      INTEGER i1, i2, iexp1, ind, indice, j, l1, lin, linf, lmax
      INTEGER IDINT
C
C
      IF (Ro.GT.0.D0 .AND. DABS(Eta).LE.500.D0) THEN
         CALL FCZ0(Eta,Ro,f1,fp1,g1,gp1,iexp1,sigma1)
         F(1) = f1
         Fp(1) = fp1
         G(1) = g1
         Gp(1) = gp1
         Iexp(1) = iexp1
         Sigma(1) = sigma1
         IF (L.LE.0) RETURN
         linf = 0
         lin = 1
         ind = 0
         l1 = L + 1
         etac = Eta*Eta
         IF (.NOT.((Eta.GT.0.D0.AND.Ro.LT.Eta+Eta.OR.Ro.LT.Eta+DSQRT(
     &       etac+1.D0)))) THEN
            IF (Ro.LT.Eta + DSQRT(etac + DFLOAT(L*(L+1)))) THEN
   10          roinf = Eta + DSQRT(etac + DFLOAT(linf*(linf+1)))
               IF (Ro.LT.roinf) THEN
                  ind = 1
               ELSEIF (linf.LT.L) THEN
                  linf = linf + 1
                  GOTO 10
               ENDIF
               lin = linf + 1
            ENDIF
            xm = 1.D0
            IF (ind.EQ.0) lin = l1
            DO j = 2, lin
               zig = (DSQRT(etac + xm*xm))/xm
               zag = Eta/xm + xm/Ro
               F(j) = (zag*F(j - 1) - Fp(j - 1))/zig
               Fp(j) = zig*F(j - 1) - zag*F(j)
               G(j) = (zag*G(j - 1) - Gp(j - 1))/zig
               Gp(j) = zig*G(j - 1) - zag*G(j)
               Iexp(j) = Iexp(1)
               xm = xm + 1.D0
            ENDDO
            IF (ind.EQ.0) RETURN
         ENDIF
         ftest = F(lin)
         fptest = Fp(lin)
         lmax = linf + 25 + IDINT(5.D0*DABS(Eta))
         IF (lmax.LT.L) lmax = L
         fi = 1.D0
         fpi = 1.D0
   50    xm = DFLOAT(lmax + 1)
         zig = (DSQRT(etac + xm*xm))/xm
         zag = Eta/xm + xm/Ro
         fl = (zag*fi + fpi)/zig
         fpl = zag*fl - zig*fi
         IF (DABS(fl).GE.1.D15 .OR. DABS(fpl).GE.1.D15) THEN
            fl = fl*1.D-15
            fpl = fpl*1.D-15
         ENDIF
         fi = fl
         fpi = fpl
         IF (lmax.LE.L) THEN
            F(lmax + 1) = fl
            Fp(lmax + 1) = fpl
            IF (lmax.GT.linf) THEN
               lmax = lmax - 1
               GOTO 50
            ELSE
               fact = ftest/F(lin)
               factp = fptest/Fp(lin)
               indice = Iexp(1)/15
               xm = DFLOAT(linf)
               DO j = lin, l1
                  F(j) = F(j)*fact
                  Fp(j) = Fp(j)*factp
                  IF (j.NE.1) THEN
                     zig = (DSQRT(etac + xm*xm))/xm
                     zag = Eta/xm + xm/Ro
                     G(j) = (zag*G(j - 1) - Gp(j - 1))/zig
                     Gp(j) = zig*G(j - 1) - zag*G(j)
                     IF (DABS(G(j)).GE.1.D15 .OR. DABS(Gp(j)).GE.1.D15)
     &                   THEN
                        G(j) = G(j)/1.D15
                        Gp(j) = Gp(j)/1.D15
                        indice = indice + 1
                     ENDIF
                     Iexp(j) = indice*15
                     a = DLOG10(DABS(Fp(j))) + DLOG10(DABS(G(j)))
                     b = 0.D0
                     IF (a.GE.0.D0) b = 1.D0
                     i1 = IDINT(b + a)
                     i2 = IDINT(b + DLOG10(DABS(Gp(j)))
     &                    + DLOG10(DABS(F(j))))
                     F(j) = F(j)*1.D1**( - i2)
                     Fp(j) = Fp(j)*1.D1**( - i1)
                  ENDIF
                  xm = xm + 1.D0
               ENDDO
               RETURN
            ENDIF
         ELSE
            lmax = lmax - 1
            GOTO 50
         ENDIF
      ELSE
         WRITE (MW,99005) Eta, Ro
99005    FORMAT ('  FCOU   ***  ETA =',1P,D13.5,',  RHO =',D13.5,
     &           '   ARGUMENT OUT OFF RANGE')
         STOP
      ENDIF
      END
C 01/01/04                                                      ECIS03  FCZ0-000
      SUBROUTINE FCZ0(Eta,Ro,F0,Fp0,G0,Gp0,Iexp,Sigma)
C THE LOWER LIMIT OF RICCATI METHOD FOR POSITIVE ETA HAS BEEN CHANGED   FCZ0-002
C FROM 30. TO 28. TO AVOID AN OVERFLOW IN THE NORMALISATION             FCZ0-003
      IMPLICIT REAL*8(a - H,O - Z)
C
C
C Dummy arguments
C
      REAL*8 Eta, F0, Fp0, G0, Gp0, Ro, Sigma
      INTEGER Iexp
C
C Local variables
C
      REAL*8 a, a0, a1, a2, am11, am21, ap11, ap12, ap21, ap22, b, b0,
     &       b1, b2, b4, bd, bm11, bm21, borne, bp11, bp21, etap, pi,
     &       pieta, r4, ro2, rs, s, sa, sb, t, tm1, tp1, u, u0, u1, u2,
     &       up, x, xn, xn1, z1, z1p, z2, z2p
      DOUBLE PRECISION DABS, DCOS, DEXP, DSIN, DSQRT
      INTEGER i, n
      INTEGER IDINT
      REAL*8 SIGM
C
C
      Sigma = SIGM(Eta)
      Iexp = 0
      IF (Eta.GT.28.D0 .OR. Eta.LT. - 8.D0) THEN
         CALL YFRI(Eta,Ro,F0,Fp0,G0,Gp0,Iexp,Sigma)
         RETURN
      ELSEIF (Eta.NE.0.D0) THEN
         borne = 1.666666666666667D0*DABS(Eta) + 7.5D0
         IF (Ro.LT.borne) THEN
            IF (Eta.GE.10.D0) THEN
               IF (Eta.GT.(5.D0*Ro + 6.D1)/7.D0) GOTO 50
            ELSEIF (Eta.GT.0.D0) THEN
               IF (Ro.LT.2.D0) GOTO 50
            ENDIF
C RS=-1 FOR NORMALISATION AT THE ORIGIN,RS=1 A RO=END                   FCZ0-024
            IF (Eta.LT.2.5) THEN
               rs = -1.D0
C          CLENSHAW AT THE ORIGIN                                       FCZ0-030
               IF (Eta.LT.0) THEN
                  n = IDINT( - 0.5D0*Eta + 5.D0)
               ELSE
                  n = IDINT(Eta/5.D0 + 5.D0)
               ENDIF
            ELSE
               rs = 1.D0
               CALL YFAS(Eta,borne,F0,Fp0,G0,Gp0,Sigma)
               n = IDINT(Eta/5.D0 + 5.D0)
            ENDIF
            n = 10*(n/2 + 1)
            tm1 = 1.D0
            t = 2.D0*Ro/borne - 1.D0
            x = t + t
            DO i = 1, n
               tp1 = x*t - tm1
               tm1 = t
               t = tp1
            ENDDO
            t = tm1
            a1 = 1.D-30
            a2 = 0.D0
            b1 = 0.D0
            b2 = a1
            s = 1.D0
            sa = 0.D0
            sb = 0.D0
            z1 = 0.D0
            z1p = 0.D0
            ap12 = 0.D0
            ap11 = 0.D0
            bp11 = 0.D0
            z2 = 0.D0
            z2p = 0.D0
            ap22 = 0.D0
            ap21 = 0.D0
            bp21 = 0.D0
            a0 = 8.D0*Eta/borne - 1.D0
            bd = 4.D0/(borne*borne)
            b0 = bd*DFLOAT(n + 2)
            b4 = bd*DFLOAT(n - 1)
            r4 = 4.D0*DFLOAT(n)
C          BACKWARDS RECURRENCE                                         FCZ0-066
   20       am11 = a0*(a1 - ap11) + ap12 - b0*b1 - b4*bp11
            am21 = a0*(a2 - ap21) + ap22 - b0*b2 - b4*bp21
            sa = sa + s*a1
            sb = sb + s*a2
            z1 = z1 + a1*t
            z1p = z1p + b1*t
            z2 = z2 + a2*t
            z2p = z2p + b2*t
            IF (r4.EQ.0.D0) THEN
               a = ap21 - am21
               b = am11 - ap11
               sa = a*sa + b*sb
               a1 = a*a1 + b*a2
               b1 = a*b1 + b*b2
               z1 = a*z1 + b*z2
               z1p = a*z1p + b*z2p
               sa = (sa - 0.5D0*a1)/t
               z1 = z1 - 0.5D0*a1
               z1p = z1p - 0.5D0*b1
               IF (rs.LT.0.D0) THEN
                  pieta = 3.141592653589793D0*Eta
                  s = DEXP(pieta)
                  s = DEXP( - pieta/2.D0)*DSQRT(2.D0*pieta/(s - 1.D0/s))
     &                /sa
               ELSE
                  s = F0/(borne*sa)
               ENDIF
               F0 = s*Ro*z1
               Fp0 = s*(z1 + Ro*z1p/borne)
               CALL YFIR(Eta,Ro,G0,Gp0,Sigma)
               GOTO 99999
            ELSE
               bm11 = r4*a1 + bp11
               ap12 = ap11
               ap11 = a1
               a1 = am11
               bp11 = b1
               b1 = bm11
               bm21 = r4*a2 + bp21
               ap22 = ap21
               ap21 = a2
               a2 = am21
               bp21 = b2
               b2 = bm21
               b4 = b4 - bd
               b0 = b0 - bd
               r4 = r4 - 4.D0
               s = s*rs
               tm1 = x*t - tp1
               tp1 = t
               t = tm1
               GOTO 20
            ENDIF
         ELSE
            CALL YFAS(Eta,Ro,F0,Fp0,G0,Gp0,Sigma)
            RETURN
         ENDIF
C   REGULAR SERIES AT THE ORIGIN                                        FCZ0-115
   50    pi = 3.141592653589793D0
         ro2 = Ro*Ro
         etap = Eta + Eta
         pieta = pi*Eta
         b = DEXP(pieta)
         b = DEXP(0.5D0*pieta)*DSQRT((b - 1.D0/b)/(2.D0*pieta))
         u0 = 0.D0
         u1 = Ro
         u = u0 + u1
         up = 1.D0
         xn = 2.D0
         DO n = 2, 10000
            xn1 = xn*(xn - 1.D0)
            u2 = (etap*Ro*u1 - ro2*u0)/xn1
            u = u + u2
            up = up + xn*u2/Ro
            IF (DABS(u1) + DABS(u2).LT.1.D-10*DABS(u)) GOTO 100
            u0 = u1
            u1 = u2
            xn = xn + 1.D0
         ENDDO
  100    F0 = u/b
         Fp0 = up/b
         CALL YFIR(Eta,Ro,G0,Gp0,Sigma)
      ELSE
         F0 = DSIN(Ro)
         G0 = DCOS(Ro)
         Fp0 = G0
         Gp0 = -F0
         RETURN
      ENDIF
99999 END
C 01/01/04                                                      ECIS03  YFRI-000
      SUBROUTINE YFRI(Eta,Rau,Fo,Fpo,Go,Gpo,Idiv,Sigma)
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C Dummy arguments
C
      REAL*8 Eta, Fo, Fpo, Go, Gpo, Rau, Sigma
      INTEGER Idiv
C
C Local variables
C
      DOUBLE PRECISION DABS, DATAN2, DCOS, DEXP, DLOG, DSIN, DSQRT
      REAL*8 et, et0, et1, et2, et3, et4, et5, eta2, etac, etad, etaro,
     &       etr0, fi, fip, g61, g610, g611, g62, g63, g64, g65, g66,
     &       g67, g68, g69, g81, g810, g811, g812, g813, g814, g815,
     &       g82, g83, g84, g85, g86, g87, g88, g89, gp61, gp62, gp63,
     &       gp64, gp65, gp66, gp81, gp82, gp83, gp84, gp85, gp86, gp87,
     &       gp88, ho, hpo, psi, psip, q(5), qp(5), rau0, ro, ru, rx, s,
     &       t, tr1, tr2, tr3, tr4, tr5, tr6, tr7, tr8, tra, trb, trc,
     &       trd, tre, u
      INTEGER IDINT
      INTEGER ig, ind, indg, jnd, n, nn
      REAL*8 u0, u1, u2, u3, unr, v1, v2, v3, x, x2, x3, xn, xn1, xxx
C
C
C        COEFFICIENTS RICCATI                                           YFRI-004
      DATA g61, g62, g63, g64, g65, g66, g67, g68, g69, g610,
     &     g611/1.1590576171875D-2, 3.863525390625D-2,
     &     4.6600341796875D-2, 4.8583984375D-2, 1.15651448567708D0,
     &     5.6874755859375D0, 1.323888288225445D1, 1.713083224826384D1,
     &     1.269003295898436D1, 5.05523681640625D0, 8.42539464010415D-1/
      DATA g81, g82, g83, g84, g85, g86, g87, g88, g89, g810, g811,
     &     g812, g813, g814, g815/1.851092066083633D-2,
     &     8.63842964172363D-2, 1.564757823944092D-1,
     &     1.430139541625977D-1, 1.924622058868408D-1,
     &     8.500803152720129D0, 7.265429720878595D1,
     &     3.057942376817972D2, 7.699689544836672D2,
     &     1.254157054424285D3, 1.361719536066055D3,
     &     9.831831171035763D2, 4.547869927883148D2,
     &     1.222640538215636D2, 1.455524450256709D1/
      DATA gp61, gp62, gp63, gp64, gp65, gp66/0.289764404296875D-1,
     &     0.2318115234375D0, 0.8056640625D0, 1.6015625D0, 0.3046875D0,
     &     5.625D0/
      DATA gp81, gp82, gp83, gp84, gp85, gp86, gp87,
     &     gp88/0.647882223129272D-1, 0.6910743713378906D0,
     &     0.3322952270507811D1, 0.94830322265625D1, 17.696533203125D0,
     &     34.787109375D0, 50.203125D0, 78.75D0/
      DATA q/0.4959570165D-1, 0.8888888889D-2, 0.2455199181D-2,
     &     0.9108958061D-3, 0.2534684115D-3/
      DATA qp, ho, hpo/0.1728260369D0, 0.3174603174D-3, 0.3581214850D-2,
     &     0.3117824680D-3, 0.9073966427D-3, 2*0.D0/
      etac = Eta*Eta
      eta2 = Eta + Eta
      etaro = Eta*Rau
      ind = 0
      jnd = 0
      ig = 0
      Idiv = 0
      IF (Eta.GT.0.D0) THEN
         IF (DABS(Rau - eta2).LE.1.D-9) GOTO 300
         IF (Rau.LT.eta2) THEN
            IF (etaro.LE.12.D0) THEN
               nn = 1
            ELSE
               tra = eta2 - 6.75D0*(Eta**0.4D0)
               IF (Rau.GT.tra) THEN
                  ind = 1
                  jnd = 1
                  ro = Rau
                  Rau = tra
                  rau0 = tra
               ENDIF
C             RICCATI   1                                               YFRI-049
               x = Rau/eta2
               u = (1.D0 - x)/x
               x2 = x*x
               ru = DSQRT(u)
               rx = DSQRT(x)
               tre = 1.D0/(u*ru*eta2)
               trb = tre*tre
               fi = (DSQRT((1.D0-x)*x) + DATAN2(rx,DSQRT(1.D0-rx*rx))
     &              - 1.570796326794897D0)*eta2
               tr1 = -0.25D0*DLOG(u)
               tr2 = -((9.D0*u + 6.D0)*u + 5.D0)/48.D0
               tr3 = ((((-3.D0*u-4.D0)*u+6.D0)*u + 12.D0)*u + 5.D0)
     &               /64.D0
               tr4 = -((((((u+2.D0)*945.D0*u+1395.D0)*u+12300.D0)*u+
     &               25191.D0)*u + 19890.D0)*u + 5525.D0)/46080.D0
               tr5 = ((((((((-27.D0*u-72.D0)*u-68.D0)*u+360.D0)*u+
     &               2190.D0)*u+4808.D0)*u+5148.D0)*u + 2712.D0)
     &               *u + 565.D0)/2048.D0
               tr6 = -
     &               ((((((((((g61*u+g62)*u+g63)*u+g64)*u+g65)*u+g66)*u+
     &               g67)*u+g68)*u+g69)*u + g610)*u + g611)
               tr7 = ((((((((((((-81.D0*u-324.D0)*u-486.D0)*u-404.D0)*u+
     &               4509.D0)*u+52344.D0)*u+233436.D0)*u+567864.D0)
     &               *u+838521.D0)*u+775884.D0)*u+441450.D0)
     &               *u + 141660.D0)*u + 19675.D0)/6144.D0
               tr8 = (((((((((((((g81*u+g82)*u+g83)*u+g84)*u+g85)*u+g86)
     &               *u+g87)*u+g88)*u+g89)*u+g810)*u+g811)*u+g812)
     &               *u + g813)*u + g814)*u + g815
               fi = fi + tre*(tr2 + trb*(tr4 + trb*(tr6+trb*tr8)))
               psi = -fi
               tra = tr1 + trb*(tr3 + trb*(tr5 + trb*tr7))
               fi = fi + tra
               psi = psi + tra
               fip = ru*eta2
               tra = 1.D0/(x2*u)
               tr1 = 0.25D0
               tre = tre/(x2*x2*u)
               trb = trb/(x2*x2)
               tr2 = -(8.D0*x - 3.D0)/32.D0
               tr3 = ((24.D0*x - 12.D0)*x + 3.D0)/64.D0
               tr4 = (((-1536.D0*x+704.D0)*x - 336.D0)*x + 63.D0)
     &               /2048.D0
               tr5 = ((((1920.D0*x-576.D0)*x+504.D0)*x - 180.D0)
     &               *x + 27.D0)/1024.D0
               tr6 = ((((-gp66*x+gp65)*x-gp64)*x + gp63)*x - gp62)
     &               *x + gp61
               tr7 = -
     &               ((((((-40320.D0*x-10560.D0)*x-13248.D0)*x+7560.D0)*
     &               x-3132.D0)*x + 756.D0)*x - 81.D0)/2048.D0
               tr8 = -
     &               (((((((gp88*x+gp87)*x+gp86)*x-gp85)*x+gp84)*x-gp83)
     &               *x + gp82)*x - gp81)
               fip = fip + tre*(tr2 + trb*(tr4 + trb*(tr6+trb*tr8)))
               psip = -fip
               tra = tra*(tr1 + trb*(tr3 + trb*(tr5+trb*tr7)))
               fip = fip + tra
               psip = psip + tra
               xxx = 34.588776394910686D0
               indg = IDINT(psi/xxx)
               Idiv = 15*indg
               IF (indg.NE.0) THEN
                  psi = psi - xxx*indg
                  fi = fi + xxx*indg
               ENDIF
               Fo = 0.5D0*DEXP(fi)
               Go = DEXP(psi)
               Fpo = Fo*fip/eta2
               Gpo = Go*psip/eta2
               IF (jnd.EQ.0) RETURN
               Rau = ro
               Go = Fo
               Gpo = Fpo
               GOTO 100
            ENDIF
         ELSEIF (Rau.EQ.eta2) THEN
            GOTO 300
         ELSE
            IF (Rau - eta2.GE.2.D1*(Eta**0.25D0)) GOTO 400
            nn = 0
         ENDIF
      ELSE
         IF ( - etaro.GE.14.0625D0) GOTO 400
         nn = 1
      ENDIF
      CALL YFCL(Eta,Rau,Fo,Fpo,Go,Gpo,Sigma,Idiv,nn)
      RETURN
  100 x = rau0 - ro
      x2 = x*x
      x3 = x*x2
      unr = 1.D0/rau0
      etr0 = 1.D0 - 2.D0*Eta*unr
      u0 = Go
      u1 = -x*Gpo
      u2 = -0.5D0*etr0*x2*u0
      s = u0 + u1 + u2
      v1 = u1/x
      v2 = 2.D0*u2/x
      t = v1 + v2
      xn = 3.D0
      DO n = 3, 10000
         xn1 = xn - 1.D0
         xn1 = xn*xn1
         u3 = x*u2*unr*(1.D0 - 2.D0/xn) - etr0*u1*x2/xn1 + x3*u0*unr/xn1
         s = s + u3
         v3 = xn*u3/x
         t = t + v3
         IF (DABS(u3).LE.1.D-10*DABS(s)) THEN
            IF (DABS(v3).LE.1.D-10*DABS(t)) GOTO 200
         ENDIF
         u0 = u1
         u1 = u2
         u2 = u3
         xn = xn + 1.D0
      ENDDO
  200 IF (ig.EQ.0) THEN
         ho = s
         hpo = -t
      ELSE
         Go = s
         Gpo = -t
         Fo = ho
         Fpo = hpo
         RETURN
      ENDIF
  300 et0 = Eta**(0.1666666666666667D0)
      etad = etac*etac
      et = Eta**(0.6666666666666667D0)
      et1 = et*et
      et2 = et1*et1
      et3 = et2*et
      et4 = etad*et
      et5 = et4*et
      Fo = 1.D0 - q(1)/et1 - q(2)/etac - q(3)/et3 - q(4)/etad - q(5)/et5
      Go = 1.D0 + q(1)/et1 - q(2)/etac + q(3)/et3 - q(4)/etad + q(5)/et5
      Fpo = 1.D0 + qp(1)/et + qp(2)/etac + qp(3)/et2 + qp(4)
     &      /etad + qp(5)/et4
      Gpo = 1.D0 - qp(1)/et + qp(2)/etac - qp(3)/et2 + qp(4)
     &      /etad - qp(5)/et4
      Fo = 0.7063326373D0*et0*Fo
      Go = 1.223404016D0*et0*Go
      Fpo = 0.4086957323D0*Fpo/et0
      Gpo = -0.7078817734D0*Gpo/et0
      Idiv = 0
      IF (ind.EQ.0) RETURN
      ig = 1
      rau0 = eta2
      GOTO 100
C        RICCATI 2 ET 3                                                 YFRI-166
  400 x = eta2/Rau
      x2 = x*x
      u = 1.D0 - x
      ru = DSQRT(u)
      u3 = u*u*u
      trd = 1.D0/(u3*eta2*eta2)
      trc = x2*trd
      tre = 1.D0/(u*ru*eta2)
      fi = -0.25D0*DLOG(u)
      trb = trd/64.D0
      tr3 = (((3.D0*u-4.D0)*u - 6.D0)*u + 12.D0)*u - 5.D0
      tr5 = ((((((((-27.D0*u+72.D0)*u-68.D0)*u-360.D0)*u+2190.D0)*u-
     &      4808.D0)*u+5148.D0)*u - 2712.D0)*u + 565.D0)/32.D0
      tr7 = ((((((((((((81.D0*u-324.D0)*u+486.D0)*u-404.D0)*u-4509.D0)*u
     &      +52344.D0)*u-233436.D0)*u+567864.D0)*u-838521.D0)
     &      *u+775884.D0)*u-441450.D0)*u + 141660.D0)*u - 19675.D0)
     &      /96.D0
      fi = fi + trb*(tr3 + trd*(tr5 + trd*tr7))
      fip = 0.25D0/u
      trb = 3.D0*trc/(64.D0*u)
      tr3 = (4.D0 - x)*x - 8.D0
      tr5 = ((((9.D0*x-60.D0)*x+168.D0)*x - 192.D0)*x + 640.D0)/16.D0
      tr7 = ((((((-27.D0*x+252.D0)*x-1044.D0)*x+2520.D0)*x-4416.D0)
     &      *x - 3520.D0)*x - 13440.D0)/32.D0
      fip = fip + trb*(tr3 + trc*(tr5 + trc*tr7))
      tra = DABS((ru - 1.D0)/(ru + 1.D0))
      psi = (0.5D0*DLOG(tra) + ru/x)*eta2 + 0.785398163397448D0
      tr2 = -((9.D0*u - 6.D0)*u + 5.D0)/48.D0
      tr4 = ((((((u-2.D0)*945.D0*u+1395.D0)*u-12300.D0)*u+25191.D0)
     &      *u - 19890.D0)*u + 5525.D0)/46080.D0
      tr6 = (((((((((-g61*u+g62)*u-g63)*u+g64)*u-g65)*u+g66)*u-g67)*u+
     &      g68)*u - g69)*u + g610)*u - g611
      tr8 = (((((((((((((g81*u-g82)*u+g83)*u-g84)*u+g85)*u-g86)*u+g87)*u
     &      -g88)*u+g89)*u-g810)*u+g811)*u-g812)*u + g813)*u - g814)
     &      *u + g815
      psi = psi + tre*(tr2 + trd*(tr4 + trd*(tr6+trd*tr8)))
      psip = -ru*eta2/x2
      trb = tre*x/u
      tr2 = (3.D0*x - 8.D0)/32.D0
      tr4 = -(((63.D0*x-336.D0)*x + 704.D0)*x - 1536.D0)/2048.D0
      tr6 = ((((gp61*x-gp62)*x+gp63)*x - gp64)*x + gp65)*x - gp66
      tr8 = ((((((-gp81*x+gp82)*x-gp83)*x+gp84)*x-gp85)*x + gp86)
     &      *x + gp87)*x + gp88
      psip = psip + trb*(tr2 + trc*(tr4 + trc*(tr6+trc*tr8)))
      tra = DEXP(fi)
      Fo = tra*DSIN(psi)
      Go = tra*DCOS(psi)
      IF (Eta.LE.0.D0) THEN
         tra = Fo
         Fo = -Go
         Go = tra
      ENDIF
      tra = -eta2/(Rau*Rau)
      Fpo = (fip*Fo + psip*Go)*tra
      Gpo = (fip*Go - psip*Fo)*tra
      END
C 01/01/04                                                      ECIS03  YFCL-000
      SUBROUTINE YFCL(Eta,Ro,U,Up,V,Vp,Sigma,Idiv,Nn)
      IMPLICIT REAL*8(A - H,O - z)
C
C
C Dummy arguments
C
      REAL*8 Eta, Ro, Sigma, U, Up, V, Vp
      INTEGER Idiv, Nn
C
C Local variables
C
      REAL*8 c0i, c0r, c1i, c1r, c2i, c2r, ci, cr, d4, di, dm1i, dm1r,
     &       dp1i, dp1r, dr, e2, ei, em1i, em1r, ep1i, ep1r, er, etap,
     &       gi, gpi, gpr, gr, p, pi, pieta, pp, r, ro2, sci, scr, scz,
     &       t, tm1, tp1, u0, u1, u2, v0, v1, v2, w, wp, xn, xn1, z, z1
      DOUBLE PRECISION DABS, DCOS, DEXP, DLOG, DSIN, DSQRT
      INTEGER i, j, m, n
      INTEGER IDINT
      REAL*8 PSI
C
C
      Idiv = 0
      etap = Eta + Eta
      ro2 = Ro*Ro
      IF (Nn.EQ.1) THEN
C          SERIES AT THE ORIGIN                                         YFCL-096
         pi = 3.141592653589793D0
         pieta = pi*Eta
         IF (DABS(pieta).LE.36.D0) THEN
            p = DSQRT((DEXP(2.D0*pieta) - 1.D0)/(2.D0*pieta))
         ELSEIF (pieta.GT.0.D0) THEN
            z = 34.588776394910686D0
            Idiv = IDINT(pieta/z)
            p = DEXP(pieta - Idiv*z)/DSQRT(pieta + pieta)
            Idiv = 15*Idiv
         ELSE
            p = 1.D0/DSQRT( - pieta - pieta)
         ENDIF
         z1 = etap*(PSI(Eta) + .6931471805599453D0)
         u0 = 0.D0
         u1 = Ro
         v0 = 1.D0
         v1 = z1*Ro
         U = u0 + u1
         V = v0 + v1
         Up = 1.D0
         Vp = z1
         xn = 2.D0
         DO n = 2, 10000
            xn1 = xn*(xn - 1.D0)
            u2 = (etap*Ro*u1 - ro2*u0)/xn1
            U = U + u2
            v2 = (etap*Ro*v1 - ro2*v0 - etap*(xn + xn - 1.D0)*u2)/xn1
            V = V + v2
            Up = Up + xn*u2/Ro
            Vp = Vp + xn*v2/Ro
            IF (DABS(u2).LE.1.D-14*DABS(U)) THEN
               IF (DABS(v2).LE.1.D-14*DABS(V)) GOTO 50
            ENDIF
            u0 = u1
            u1 = u2
            v0 = v1
            v1 = v2
            xn = xn + 1.D0
         ENDDO
   50    pp = V + etap*U*DLOG(Ro)
         w = U/p
         wp = Up/p
         V = p*pp
         Vp = p*(Vp + etap*(Up*DLOG(Ro) + U/Ro))
         U = w
         Up = wp
      ELSE
C          CLENSHAW ASYMPTOTIC                                          YFCL-007
         e2 = Eta*Eta
         m = IDINT(40.D0 + Eta/4.D0)
         m = 2*(m/2)
         i = 1
         r = DFLOAT(m)
         d4 = 4.D0*r
         tm1 = 1.D0
         t = 4.D0*Eta/Ro - 1.D0
         z = t + t
         DO j = 1, m
            tp1 = z*t - tm1
            tm1 = t
            t = tp1
         ENDDO
         t = tm1
         gr = 0.D0
         gpr = 0.D0
         scr = 0.D0
         ep1r = 0.D0
         er = 0.D0
         dp1r = 0.D0
         dr = 1.D-25
         c1r = r + 1.D0
         c0r = e2 - r*(r + 1.D0)
         gi = 0.D0
         gpi = 0.D0
         sci = 0.D0
         ep1i = 0.D0
         ei = 0.D0
         dp1i = 0.D0
         di = 0.D0
         c1i = -3.D0*Eta
         c0i = -(r + r + 1.D0)*Eta
C          BACKWARDS RECURRENCE                                         YFCL-040
  100    scz = c0r*c0r + c0i*c0i
         c2r = c1r*dr - c1i*di + 0.5D0*(dp1r + er + ep1r) - Eta*dp1i
         c2i = c1r*di + c1i*dr + 0.5D0*(dp1i + ei + ep1i) + Eta*dp1r
         cr = (c2r*c0r + c2i*c0i)/scz
         ci = (c0r*c2i - c0i*c2r)/scz
         gr = gr + cr*t
         gpr = gpr + dr*t
         scr = scr + i*cr
         gi = gi + ci*t
         gpi = gpi + di*t
         sci = sci + i*ci
         IF (r.EQ.0.D0) THEN
            scr = scr - 0.5D0*cr
            gr = gr - 0.5D0*cr
            gpr = gpr - 0.5D0*dr
            sci = sci - 0.5D0*ci
            gi = gi - 0.5D0*ci
            gpi = gpi - 0.5D0*di
            z = Sigma + Ro - Eta*DLOG(Ro + Ro)
            scz = scr*scr + sci*sci
            cr = DCOS(z)
            ci = DSIN(z)
            dr = (cr*scr + ci*sci)/scz
            di = (ci*scr - cr*sci)/scz
            sci = 1.D0 - Eta/Ro
            scr = etap/ro2
            cr = -gi*sci - gpr*scr
            ci = gr*sci - gpi*scr
            Vp = dr*cr - di*ci
            Up = dr*ci + di*cr
            V = dr*gr - di*gi
            U = dr*gi + di*gr
            RETURN
         ELSE
            em1r = d4*dr + ep1r
            dm1r = d4*cr + dp1r
            ep1r = er
            er = em1r
            dp1r = dr
            dr = dm1r
            em1i = d4*di + ep1i
            dm1i = d4*ci + dp1i
            ep1i = ei
            ei = em1i
            dp1i = di
            di = dm1i
            tm1 = z*t - tp1
            tp1 = t
            t = tm1
            c0r = c0r + r + r
            c0i = c0i + etap
            c1r = c1r - 1.D0
            i = -i
            d4 = d4 - 4.D0
            r = r - 1.D0
            GOTO 100
         ENDIF
      ENDIF
      END
C 01/01/04                                                      ECIS03  YFAS-000
      SUBROUTINE YFAS(Eta,Rau,Fo,Fpo,Go,Gpo,Sigo)
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C Dummy arguments
C
      REAL*8 Eta, Fo, Fpo, Go, Gpo, Rau, Sigo
C
C Local variables
C
      REAL*8 an, bn, denom, etac, gs, gs1, gt, gt1, ps, ps1, pt, pt1,
     &       rau2, sf, sg, spf, spg, tetao, tra, trb
      DOUBLE PRECISION DABS, DCOS, DLOG, DSIN
      INTEGER n
C
C
C          ASYMPTOTIC EXPANSIONS                                        YFAS-003
      trb = 0.D0
      rau2 = Rau + Rau
      etac = Eta*Eta
      n = 0
      ps = 1.D0
      gs = 0.D0
      pt = 0.D0
      gt = 1.D0 - Eta/Rau
      sf = ps
      sg = gs
      spf = pt
      spg = gt
  100 denom = DFLOAT(n + 1)*rau2
      an = DFLOAT(n + n + 1)*Eta/denom
      bn = (etac - DFLOAT(n*(n+1)))/denom
      ps1 = an*ps - bn*pt
      gs1 = an*gs - bn*gt - ps1/Rau
      pt1 = an*pt + bn*ps
      gt1 = an*gt + bn*gs - pt1/Rau
      sf = sf + ps1
      sg = sg + gs1
      spf = spf + pt1
      spg = spg + gt1
      n = n + 1
      IF (DABS(ps1).GT.trb) trb = DABS(ps1)
      IF (DABS(ps1).LT.1.D-10*trb .OR. bn.LT. - 1.D0) THEN
         tetao = Rau - Eta*DLOG(rau2) + Sigo
         tra = DSIN(tetao)
         trb = DCOS(tetao)
         Go = sf*trb - spf*tra
         Gpo = sg*trb - spg*tra
         Fo = spf*trb + sf*tra
         Fpo = spg*trb + sg*tra
      ELSE
         ps = ps1
         gs = gs1
         pt = pt1
         gt = gt1
         GOTO 100
      ENDIF
      END
C 01/01/04                                                      ECIS03  YFIR-000
      SUBROUTINE YFIR(Eta,Ro,G0,Gp0,Sigma)
C  IRREGULAR COULOMB FUNCTION                                           YFIR-002
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C Dummy arguments
C
      REAL*8 Eta, G0, Gp0, Ro, Sigma
C
C Local variables
C
      REAL*8 b, c1, etap, etr0, f0, fp0, gp, pi, pieta, pieta2, rau0,
     &       ro2, s, t, u, u0, u1, u2, u3, unr, up, v, v0, v1, v2, v3,
     &       vp, x, x2, x3, xn, xn1
      DOUBLE PRECISION DABS, DEXP, DLOG, DSQRT
      INTEGER n
      REAL*8 PSI
C
C
      IF (Eta.LE.0.D0) THEN
         IF (Ro.LE.0.5D0*Eta + 9.D0) GOTO 200
      ELSEIF ((Ro.LE.(54.D0-Eta)/80.D0) .OR.
     &        (Eta.LE.22.D0 .AND. Ro.LE.(30.D0-Eta)/20.D0) .OR.
     &        (Eta.LE.18.D0 .AND. Ro.LE.0.075D0*(26.D0-Eta)) .OR.
     &        (Eta.LE.10.D0 .AND. Ro.LE..15D0*(18.D0-Eta)) .OR.
     &        (Eta.LE.3.D0 .AND. Ro.LE.2.25D0 + 7.35D0*(3.D0-Eta))) THEN
         GOTO 200
      ENDIF
C   TAYLOR SERIES STARTING FROM RAU0                                    YFIR-009
      rau0 = 1.666666666666667D0*DABS(Eta) + 7.5D0
      CALL YFAS(Eta,rau0,f0,fp0,G0,Gp0,Sigma)
      x = rau0 - Ro
      x2 = x*x
      x3 = x*x2
      unr = 1.D0/rau0
      etr0 = 1.D0 - 2.D0*Eta*unr
      u0 = G0
      u1 = -x*Gp0
      u2 = -0.5D0*etr0*x2*u0
      s = u0 + u1 + u2
      v1 = u1/x
      v2 = 2.D0*u2/x
      t = v1 + v2
      xn = 3.D0
      DO n = 3, 10000
         xn1 = xn - 1.D0
         xn1 = xn*xn1
         u3 = x*u2*unr*(1.D0 - 2.D0/xn) - etr0*u1*x2/xn1 + x3*u0*unr/xn1
         s = s + u3
         v3 = xn*u3/x
         t = t + v3
         IF (DABS(u3).LE.1.D-11*DABS(s)) THEN
            IF (DABS(v3).LE.1.D-11*DABS(t)) GOTO 100
         ENDIF
         u0 = u1
         u1 = u2
         u2 = u3
         xn = xn + 1.D0
      ENDDO
  100 G0 = s
      Gp0 = -t
      RETURN
C   SERIES AT THE ORIGIN                                                YFIR-041
  200 pi = 3.141592653589793D0
      ro2 = Ro*Ro
      etap = Eta + Eta
      pieta = pi*Eta
      pieta2 = 0.5D0*pieta
      b = DEXP(pieta)
      b = DEXP(pieta2)*DSQRT((b - 1.D0/b)/(2.D0*pieta))
      c1 = etap*(PSI(Eta) + .6931471805599453D0)
      u0 = 0.D0
      u1 = Ro
      v0 = 1.D0
      v1 = c1*Ro
      u = u0 + u1
      v = v0 + v1
      up = 1.D0
      vp = c1
      xn = 2.D0
      DO n = 2, 10000
         xn1 = xn*(xn - 1.D0)
         u2 = (etap*Ro*u1 - ro2*u0)/xn1
         u = u + u2
         v2 = (etap*Ro*v1 - ro2*v0 - etap*(xn + xn - 1.D0)*u2)/xn1
         v = v + v2
         up = up + xn*u2/Ro
         vp = vp + xn*v2/Ro
         IF (DABS(u2).LE.1.D-14*DABS(u)) THEN
            IF (DABS(v2).LE.1.D-14*DABS(v)) GOTO 300
         ENDIF
         u0 = u1
         u1 = u2
         v0 = v1
         v1 = v2
         xn = xn + 1.D0
      ENDDO
  300 gp = v + etap*u*DLOG(Ro)
      G0 = b*gp
      Gp0 = b*(vp + etap*(up*DLOG(Ro) + u/Ro))
      RETURN
      END
C 01/01/04                                                      ECIS03  SIGM-000
      FUNCTION SIGM(Eta)
C  COULOMB PHASE SHIFT SIGMA0                                           SIGM-002
      IMPLICIT REAL*8(A - H,O - z)
C
C
C Dummy arguments
C
      REAL*8 Eta
      REAL*8 SIGM
C
C Local variables
C
      REAL*8 c(2,13), c1, c2, c3, c4, c5, c6, c7, e, x, y, z
      DOUBLE PRECISION DABS, DATAN2, DLOG, DSIN, DSQRT
      INTEGER i, j, l
C
C
      DATA c1, c2, c3, c4, c5, c6, c7, c/8.333333333333333D-2,
     &     -2.777777777777778D-3, 7.936507936507937D-4,
     &     -5.952380952380952D-4, 8.417508417508417D-4,
     &     -1.917526917526918D-3, 6.41025641025641D-3, 1.D-16, 1.4D-15,
     &     -5.4D-15, -2.07D-14, 5.1D-13, -3.6968D-12, 7.7823D-12,
     &     1.043427D-10, -1.1812746D-9, 5.0020075D-9, 6.116095D-9,
     &     -2.056338417D-7, 1.133027232D-6, -1.2504934821D-6,
     &     -2.01348547807D-5, 1.280502823882D-4, -2.152416741149D-4,
     &     -1.1651675918591D-3, 7.218943246663D-3, -9.621971527877D-3,
     &     -4.21977345555443D-2, .1665386113822915D0,
     &     -4.20026350340952D-2, -.6558780715202538D0,
     &     .5772156649015329D0, 1.D0/
      IF (DABS(Eta).GT.1.D-16) THEN
         e = Eta*Eta
         IF (e.GT.1.D0) THEN
            l = 1
            IF (e.LT.64.D0) l = 2.D0 + DSQRT(64.D0 - e)
            z = l
            x = DSQRT(z*z + e)
            y = DATAN2(Eta,z)
            e = 1.D0/(z*z + e)
            SIGM = Eta*(DLOG(x) - 1.D0) + (z - .5D0)
     &             *y - (c1*DSIN(y) + e*(c2*DSIN(3.D0*y)
     &             + e*(c3*DSIN(5.D0*y)
     &             +e*(c4*DSIN(7.D0*y)+e*(c5*DSIN(9.D0*y)
     &             +e*(c6*DSIN(11.D0*y)+e*c7*DSIN(13.D0*y)))))))/x
            IF (l.NE.1) THEN
               j = l - 1
               DO i = 1, j
                  z = z - 1.D0
                  SIGM = SIGM - DATAN2(Eta,z)
               ENDDO
            ENDIF
         ELSE
            x = c(1,1)
            y = c(2,1)
            DO i = 2, 13
               x = c(1,i) - e*x
               y = c(2,i) - e*y
            ENDDO
            SIGM = -DATAN2(Eta*x,y)
         ENDIF
      ELSE
         SIGM = -c(1,13)*Eta
      ENDIF
      END
C 01/01/04                                                      ECIS03  PSI_-000
      FUNCTION PSI(Eta)
C  REAL PART OF PSI(1-I*ETA)-PSI(1)-PSI(I)                              PSI_-002
C  WITH PSI(Z) = LOGARITHMIC DERIVATIVE OF THE GAMMA FUNCTION           PSI_-003
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C Dummy arguments
C
      REAL*8 Eta
      REAL*8 PSI
C
C Local variables
C
      REAL*8 b(13), c, c1, c2, c3, c4, c5, c6, e, x, y
      DOUBLE PRECISION DABS, DATAN, DCOS, DLOG, DSQRT
      INTEGER i, j, l
      INTEGER IDINT
C
C
      DATA c/.5772156649015329D0/, c1/8.333333333333333D-2/,
     &     c2/ - 8.333333333333333D-3/, c3/3.968253968253968D-3/,
     &     c4/ - 4.166666666666667D-3/, c5/7.575757575757576D-3/,
     &     c6/ - 2.109279609279609D-2/, b/7.450711789835428D-9,
     &     2.980350351465228D-8, 1.192199259653110D-7,
     &     4.769329867878064D-7, 1.908212716553938D-6,
     &     7.637197637899762D-6, 3.058823630702049D-5,
     &     1.227133475784893D-4, 4.941886041194665D-4,
     &     2.008392826082234D-3, 8.349277381922945D-3,
     &     3.692775514337036D-2, 2.020569031595948D-1/
      IF (DABS(Eta).GT.1.D-8) THEN
         e = Eta*Eta
         IF (e.GT..25D0) THEN
            l = 1
            IF (e.LT.64.D0) l = 2 + IDINT(DSQRT(64.D0 - e))
            x = DSQRT(l*l + e)
            y = DATAN(Eta/l)
            e = 1.D0/(l*l + e)
            PSI = DLOG(x) - .5D0*l*e -
     &            e*(c1*DCOS(2.D0*y) + e*(c2*DCOS(4.D0*y)
     &            + e*(c3*DCOS(6.D0*y)
     &            +e*(c4*DCOS(8.D0*y)+e*(c5*DCOS(10.D0*y)
     &            +e*(c6*DCOS(12.D0*y)+e*c1*DCOS(14.D0*y)))))))
     &            + c + c - 1.D0
            IF (l.NE.1) THEN
               j = l - 1
               e = Eta*Eta
               DO i = 1, j
                  PSI = PSI - 1.D0/(DFLOAT(i) + e/DFLOAT(i))
               ENDDO
            ENDIF
         ELSE
            x = b(1)
            DO i = 2, 13
               x = b(i) - e*x
            ENDDO
            PSI = c - 1.D0/(1.D0 + e) + e*x
         ENDIF
      ELSE
         PSI = c - 1.D0
      ENDIF
      END
C 01/01/04                                                      ECIS03  CORI-000
      SUBROUTINE CORI(Ei,Ef,S1,S2,Rr,T,Ssi,Ssf,Fgi,Fgf,Z,Lm1,Lm2,Lm3,Lm,
     &                W)
C    COMPUTATION OF THE INTEGRALS FROM RS TO INFINITY OF PRODUCTS OF    CORI-003
C REGULAR OR IRREGULAR COULOMB FUNCTIONS OF SAME L-VALUE DIVIDED BY R**2CORI-004
C FOR L=0 TO L=LM-1 AND OF REGULAR FUNCTIONS OF SAME L DIVIDED BY R**2  CORI-005
C L=0 TO L=LM2-1.CALLS CORZ IF THERE IS NO CHARGE.                      CORI-006
C INPUT VARIABLES:  EI,EF:  COULOMB PARAMETERS.                         CORI-007
C                   S1,S2:  WAVE NUMBERS.                               CORI-008
C                   RR:     MATCHING RADIUS.                            CORI-009
C                   SSI,SSF:COULOMB PHASE-SHIFTS FOR L=0.               CORI-010
C                   FGI,FGF:REGULAR AND IRREGULAR COULOMB FUNCTIONS.    CORI-011
C                   LM1:    MAXIMUM NUMBER OF INTEGRALS FROM RS TO INF. CORI-012
C                   LM2:    NUMBER OF INTEGRALS FROM 0 TO INFINITY      CORI-013
C                   LM3:    DIMENSION OF WORKING SPACE(SINGLE PRECISION)CORI-014
C                   LM:     ACTUAL NUMBER OF INTEGRALS FROM RS TO INF.  CORI-015
C OUTPUT:VARIABLES: T:      INTEGRALS FROM 0 TO INFINITY FOR PRODUCTS OFCORI-016
C                           REGULAR FUNCTIONS.                          CORI-017
C                   W:      INTEGRALS FROM RS TO INFINITY.              CORI-018
C WORKING SPACE:    Z:      FOR THE COMPUTATION OF HYPERGEOMETRIC F3.   CORI-019
C***********************************************************************CORI-020
      IMPLICIT REAL*8(a - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      REAL*8 Ef, Ei, Rr, S1, S2, Ssf, Ssi
      INTEGER Lm, Lm1, Lm2, Lm3
      REAL*8 Fgf(Lm1,2), Fgi(Lm1,2), T(4), W(Lm1,4), Z(4,2)
C
C Local variables
C
      REAL*8 a, a1, a2, a3, a4, a5, a6, a7, a8, a9, az(2), b1, b2, b3,
     &       b4, b5, b6, b7, b8, b9, c1, c2, c3, c4, c5, cc(4,4), cx,
     &       dt, dx, dy, eif, ex, ff, fi, fs, pi, rm, rs, sf, si, sif,
     &       x1(4), x2(4), x3(4), x4(4), y(4,4), zi, zr
      DOUBLE PRECISION DABS, DATAN, DCOS, DEXP, DLOG, DMAX1, DSIN, DSQRT
      INTEGER i, in, j, j1, j2, k, k1, k2, l, li, ln, lx, m, n
      INTEGER IDINT, MAX0, MIN0
      LOGICAL ll(4)
C
C
      DATA pi/3.141592653589793D0/
      si = S1*Rr
      sf = S2*Rr
      IF (Ei.EQ.0.) THEN
         CALL CORZ(si,sf,T,Fgi,Fgf,Lm1,Lm2,Lm,W)
         RETURN
C COMPUTATION OF SOME CONSTANTS                                         CORI-030
      ELSEIF (si.GT.2.2D0*sf) THEN
         WRITE (MW,99005) Ef, Ei
99005    FORMAT (' TOO LARGE RATIO EF/EI =',F15.6,'/',F15.6,5X,
     &           'IN CORI')
         GOTO 300
      ELSE
         rs = DSQRT(si*sf)
         fs = DSQRT(sf/si)
         fi = Ei**2
         ff = Ef**2
         eif = Ei*Ef
         ex = Ef - Ei
         sif = si/sf + sf/si
         cx = fi*si**2 + ff*sf**2
         dx = fi*si**2 - ff*sf**2
         IF (DABS(dx).GT.1.D-10) THEN
            dt = si**2 - sf**2
            dy = (fi*si**4 - ff*sf**4)/(si*sf)
            IF (DABS(dt).GE.1.D-10) THEN
               dx = dx/dt
               dy = dy/dt
               dt = 1.D0
            ENDIF
         ELSE
            dt = 1.D0
            dx = 0.D0
            dy = eif
         ENDIF
         rm = DMAX1((5.D0*DABS(Ei) + 22.5D0)*fs,(5.D0*DABS(Ef) + 22.5D0)
     &        /fs,.18D0*eif)/3.D0
         IF (rm.LT.rs) rm = rs
C COMPUTATION OF INTEGRALS FROM RS TO INFINITY FOR L=0 AND L=1          CORI-055
         CALL COR0(Ei,Ef,Ssi,Ssf,zr,zi,Z,Lm3,rm,rs,fs,fi,ff,ex,cc)
C COMPUTATION OF INTEGRALS FROM 0 TO INFINITY FOR L=0 AND L=1           CORI-057
         a1 = DSQRT(1.D0 + fi)
         b1 = DSQRT(1.D0 + ff)
         IF (Ei.NE.Ef .OR. si.NE.sf) THEN
C COMPUTATION OF I(0,0,1) AND I(1,1,1)                                  CORI-075
C  I(L,L,1) = 2*(SI*SF)**(1/2)/(SI+SF)**2 * EXP( PI*SIGN(SF-SI)*EX/2) * CORI-076
C REAL PART OF (|SF-SI|/(SF+SI))**(I*EX)*GAMMA(-I*EX)*EXP(I*(XEF-XEI))* CORI-077
C   2F1(L+1-I*EI,L+1+I*EF;1+I*EF-I*EI;((SF-SI)/(SF+SI))**2)             CORI-078
C  WHERE EX=EF-EI.                                                      CORI-079
            a2 = ex**2
            b2 = ((si - sf)/(si + sf))**2
            a3 = 2.D0*DEXP(zr - pi*.5D0*ex)/(si + sf)**2*rs
            IF (sf.GT.si) a3 = a3*DEXP(pi*ex)
            a4 = zi + Ssf - Ssi + .5D0*DLOG(b2)*ex
            a5 = a3*DCOS(a4)
            a6 = a3*DSIN(a4)
            a3 = a5
            a4 = a6
            a7 = 0.D0
            DO l = 1, 2
               az(l) = a3
               a8 = 0.D0
               DO n = 1, 500
                  a8 = a8 + 1.D0
                  b3 = (a7 + a8)**2 + eif
                  b4 = (a7 + a8)*ex
                  b7 = b2/(a8*(a8**2 + a2))
                  b5 = (b3*a8 + b4*ex)*b7
                  b6 = (a8*b4 - ex*b3)*b7
                  a9 = a3*b5 - a4*b6
                  a4 = a3*b6 + a4*b5
                  a3 = a9
                  az(l) = az(l) + a3
                  IF (DABS(a3) + DABS(a4).LT.DABS(az(l))*1.D-16) GOTO 10
               ENDDO
               li = l - 1
               WRITE (MW,99010) li, li, Ei, Ef, az(l), a3, a4
99010          FORMAT (' NO CONVERGENCE WITH 500 TERMS FOR I(',I1,',',
     &                 I1,') WITH EI =',F15.6,31X,'AND EF =',F15.6,5X,
     &                 'IN CORH'/5X,'VALUE =',D15.8,5X,'LAST TERM =',
     &                 2D16.8/' ... CONTINUE ...')
   10          b3 = 1.D0 + eif
               b5 = (1.D0 - b2)/DSQRT(b3*b3 + ex*ex)
               a7 = 1.D0
               a3 = b5*(a5*b3 - a6*ex)
               a4 = b5*(a6*b3 + a5*ex)
            ENDDO
C COMPUTATION OF I(0,0,2) AND I(1,1,2) . ONLY THE FIRST IS NEEDED       CORI-113
C   FOR BACKWARD RECURRENCE                                             CORI-114
C I(L,L,2) = PI/(2*SH(PI*EX)*( (Y/SI-1/(Y*SF))/(2*L+1)+((SI-SF)/(SF*SI))CORI-115
C  *EXP(-PI*EX/2) * REAL PART OF EXP(I*(XEI-XEF))*((SI-SF)/2)**(-I*EX)  CORI-116
C  *SF**(I*EF)*SI**(-I*EI)*F3(-L+I*EI,-L-I*EF,L+1+I*EI,L+1-I*EF,2-I*EX; CORI-117
C  (SI-SF)/(2*SI),(SF-SI)/(2*SF))                                       CORI-118
C    WHERE  Y=EXP(PI*EX/2)*(SI/SF)**L*|GAMMA(L+1+I*EF)/GAMMA(L+1+I*EI)| CORI-119
            a2 = ex/(2.D0*Ef)
            a3 = -a2*(si - sf)/(2.D0*sf)
            a4 = a2*(si - sf)/(2.D0*si)
            ll(1) = DFLOAT(Lm2)*DABS(ex).GT.3.D0*DABS(Ei + Ef)
            ll(2) = .NOT.ll(1)
            b3 = DEXP( - zr)/ex/DSQRT(1.D0 + ex**2)
            b4 = Ssi - Ssf - zi + DATAN(ex) - .5D0*pi + Ef*DLOG(sf)
     &           - Ei*DLOG(si) - ex*DLOG(.5D0*DABS(si - sf))
            IF (sf.GT.si) b3 = b3*DEXP(ex*pi)
            a5 = b3*DCOS(b4)
            a6 = b3*DSIN(b4)
            b5 = a5
            b6 = a6
            b2 = DSQRT(Ef/Ei*(DEXP(-2.D0*pi*Ei) - 1.D0)
     &           /(DEXP(-2.D0*pi*Ef) - 1.D0))
            a7 = DEXP( - .5D0*pi*ex)
            a8 = pi*a7**2/(1.D0 - a7**4)*rs
            a7 = a7*(sf - si)/(sf*si)
            a9 = 0.D0
            Z(1,1) = 1.D0
            Z(2,1) = 0.D0
            Z(3,1) = 1.D0
            Z(4,1) = 0.D0
            DO l = 1, 2
               li = l - 1
               T(l) = b5
               c1 = 0.D0
               n = 0
   20          n = n + 1
               IF (4*n.GT.Lm3) CALL MEMO('CORI',Lm3,4*n,2)
               c1 = c1 + 1.D0
               b3 = c1 + 1.D0
               b4 = b3**2 + ex**2
               b9 = (b5*b3 - ex*b6)/(b4*a2)
               b6 = (b5*ex + b6*b3)/(b4*a2)
               b5 = b9
               b3 = (a9 + c1)*(c1 - a9 - 1.D0) - fi
               b4 = Ei*(2.D0*c1 - 1.D0)
               Z(1,n + 1) = (Z(1,n)*b3 - Z(2,n)*b4)*a4/c1
               Z(2,n + 1) = (Z(1,n)*b4 + Z(2,n)*b3)*a4/c1
               b3 = (a9 + c1)*(c1 - a9 - 1.D0) - ff
               b4 = -Ef*(2.D0*c1 - 1.D0)
               Z(3,n + 1) = (Z(3,n)*b3 - Z(4,n)*b4)*a3/c1
               Z(4,n + 1) = (Z(3,n)*b4 + Z(4,n)*b3)*a3/c1
               b7 = Z(1,n + 1)
               b8 = Z(2,n + 1)
               DO j = 1, n
                  m = n + 2 - j
                  b7 = b7 + Z(1,j)*Z(3,m) - Z(2,j)*Z(4,m)
                  b8 = b8 + Z(2,j)*Z(3,m) + Z(1,j)*Z(4,m)
               ENDDO
               IF (DABS(b7) + DABS(b8).GT.1.D30) GOTO 400
               b7 = b7*b5 - b8*b6
               T(l) = T(l) + b7
               IF (DABS(b7).GT.DABS(T(l))*1.D-16) GOTO 20
               T(l) = a8*(a7*T(l) + (b2/si - 1.D0/(b2*sf))/(2.D0*a9 +
     &                1.D0))
               IF (ll(1)) GOTO 50
               a9 = 1.D0
               b2 = b2*sf/si*b1/a1
               b4 = b1*a1
               b3 = (1.D0 + eif)/b4
               b4 = -ex/b4
               b5 = b3*a5 - b4*a6
               b6 = b3*a6 + b4*a5
            ENDDO
         ELSE
C WHEN EI=EF=E   I(L,L,2)=(PI-PI*COTH(PI*E)-1/E+SUM ON N FROM 0 TO L OF CORI-061
C                2*E/(N**2+E**2))/2/(2*L+1)                             CORI-062
            a2 = pi*.5D0
            b2 = DEXP( - 2.D0*pi*Ei)
            IF (Ei.NE.0.D0) a2 = a2 - .5D0*pi*(b2 + 1.D0)/(1.D0 - b2)
     &                           + .5D0/Ei
            b3 = 0.D0
            DO i = 1, Lm2
               b2 = b3
               b3 = b3 + 1.D0
               T(i) = a2/(b2 + b3)
               a2 = a2 + Ei/(b3**2 + fi)
            ENDDO
            ll(1) = .TRUE.
            ll(2) = .TRUE.
         ENDIF
C COMP. OF THE INTEGRALS FROM 0 TO INFINITY                             CORI-182
C UPWARDS RECURRENCES FOR THE OTHER INTEGRALS:  STARTING VALUES         CORI-183
   50    DO j = 1, 4
            W(1,j) = cc(j,3)
            W(2,j) = cc(j,4)
            x2(j) = cc(j,1)/rs
            x3(j) = cc(j,2)/rs
         ENDDO
         rm = rs**2
         in = 1
         lx = Lm
         IF (.NOT.ll(1)) lx = MAX0(lx,Lm2)
         ll(3) = ll(1)
         i = 2
         IF (.NOT.(ll(1))) THEN
            c4 = az(1)
            c5 = az(2)
         ENDIF
      ENDIF
  100 i = i + 1
      a2 = a1
      b2 = b1
      a = DFLOAT(i - 1)
      a1 = DSQRT(a**2 + fi)
      b1 = DSQRT(a**2 + ff)
      ll(4) = i.GT.Lm
  200 a9 = (a - 1.D0)**2*dt + dx
      a3 = (2.D0*a - 3.D0)*(a**2*dt + dx)*a2*b2
      a4 = -(2.D0*a - 1.D0)
     &     *(dx*cx/rm + dy*((a-1.D0)**2 + a**2) + dt*(a*a - a)**2*sif)
      a5 = (2.D0*a + 1.D0)*a9*a1*b1
      c1 = dt*(2.D0*a - 1.D0)*(Ei*si + Ef*sf)*a2*b2/(a - 1.D0)
      c2 = dt*(a - .5D0)*(b2**2*((a-1.D0)*Ef*sf - (a+1.D0)*Ei*si)
     &     *sf/si + a2**2*((a-1.D0)*Ei*si - (a+1.D0)*Ef*sf)*si/sf)
     &     /(a - 1.D0)
      a6 = a*a2*b2
      a7 = -(2.D0*a - 1.D0)*(eif + (a - 1.D0)*a*sif*.5D0)
      a8 = (a - 1.D0)*a1*b1
      IF (.NOT.(ll(4))) THEN
         b6 = (a - .5D0)/(rm*rs*(a - 1.D0)**2)
         b3 = -2.D0*rm*dx*b6*a2*b2
         b4 = b6*a9*sf*(2.D0*(a*a - a)*a + (a + 1.D0)*Ei*si - (a - 1.D0)
     &        *Ef*sf)*b2
         b5 = b6*a9*si*(2.D0*(a*a - a)*a + (a + 1.D0)*Ef*sf - (a - 1.D0)
     &        *Ei*si)*a2
         b6 = -b6*(a9*(2.D0*(a*a-a)**2*(2.D0*a-1.D0) + (Ei*si+Ef*sf)*(a-
     &        1.D0)*(a+1.D0)*(2.D0*a-1.D0) + 2.D0*eif*rm*a) - (a - 1.D0)
     &        *(cx*dx + (a-1.D0)*((a+1.D0)*cx*dt-2.D0*rm*dy)))
         b9 = (a - .5D0)*a/rs
         b7 = b9*b2/si
         b8 = b9*a2/sf
         b9 = b9*( - (2.D0*a - 1.D0)*(a - 1.D0) - (Ei*si + Ef*sf))/rm
      ENDIF
      IF (in.NE.1) THEN
         IF (.NOT.(ll(3))) THEN
            x4(1) = -a6/(a7 + a8*x4(1))
            x4(3) = x4(1)*x4(2)
            x4(2) = -(a4*x4(3) + a5*x4(4)*x4(1) + c1 + c2*x4(1))/a3
            x4(4) = x4(3)
            IF (lx.LE.Lm2) T(lx) = x4(3)/x4(2)
         ENDIF
         IF (.NOT.(ll(4))) THEN
C DOWNWARD RECURRENCE FOR F(EI) AND F(EF)                               CORI-286
            DO j = 1, 4
               x1(j) = x2(j)
               x2(j) = x3(j)
            ENDDO
            x3(1) = ((2.D0*a - 1.D0)*(Ei + (a-1.D0)*a/si)*x2(1)
     &              - (a - 1.D0)*a1*x1(1))/(a*a2)
            x3(2) = ((2.D0*a - 1.D0)*(Ef + (a-1.D0)*a/sf)*x2(2)
     &              - (a - 1.D0)*b1*x1(2))/(a*b2)
C DOWNWARDS RECURRENCE FOR (1,2;L)                                      CORI-294
            x3(4) = -(a7*x2(4) + a8*x1(4) + b7*x2(1)*x3(2) + b8*x3(1)
     &              *x2(2) + b9*x2(1)*x2(2))/a6
C DOWNWARD RECURRENCE FOR (0,2;L)                                       CORI-297
            x3(3) = -(a4*x2(3) + a5*x1(3) + c1*x3(4) + c2*x2(4)
     &              + b3*x3(1)*x3(2) + b4*x2(1)*x3(2) + b5*x3(1)*x2(2)
     &              + b6*x2(1)*x2(2))/a3
            i = lx - 1
            IF (i.LE.Lm) W(i,1) = x3(3)
            IF (DABS(x3(1)).LT.1.D10) THEN
               IF (DABS(x3(2)).LT.1.D10) GOTO 250
               x2(2) = x2(2)*1.D-20
               x3(2) = x3(2)*1.D-20
            ELSE
               x3(1) = x3(1)*1.D-20
               x2(1) = x2(1)*1.D-20
            ENDIF
            DO j = 3, 4
               x3(j) = x3(j)*1.D-20
               x2(j) = x2(j)*1.D-20
            ENDDO
            IF (i.LE.Lm) THEN
               DO j = i, Lm
                  W(j,1) = W(j,1)*1.D-20
               ENDDO
            ENDIF
         ENDIF
  250    IF (lx.LE.2) THEN
            IF (.NOT.(ll(2))) THEN
C COMPUTATION OF THE MIXTURE OF THE DECREASING SOLUTION OF HOMOGENEOUS  CORI-317
C EQUATION  (S2/S1)**L * |GAMMA(L+1+I*E2)/GAMMA(L+1+I*E1)|/(2*L+1)      CORI-318
C WHERE S2 IS THE SMALLER OF THE TWO VALUES SI AND SF.                  CORI-319
               a1 = x4(2)*az(1)
               a2 = T(1) - a1
               a3 = 0.D0
               DO i = 2, Lm2
                  a3 = a3 + 1.D0
                  a1 = T(i)*a1
                  a4 = sf*DSQRT((a3**2 + ff)/(a3**2 + fi))/si
                  IF (si.GT.sf) THEN
                     a2 = a2*a4
                  ELSE
                     a2 = a2/a4
                  ENDIF
                  T(i) = a1 + a2/(2.D0*a3 + 1.D0)
               ENDDO
            ENDIF
C THE VALUES OBTAINED ARE UNNORMALISED INTEGRALS FROM RS TO 0.          CORI-332
C NORMALISATION AND TRANSFORMATION TO INTEGRAL FROM RS TO INFINITY      CORI-333
            a1 = Fgi(1,1)*Fgf(1,1)/(x3(1)*x3(2))
            DO j = 1, Lm
               W(j,1) = a1*W(j,1) + T(j)
            ENDDO
            IF (S1.NE.S2) WRITE (MW,99015) cc(1,3), W(1,1), cc(1,4),
     &                           W(2,1)
99015       FORMAT (
     &' INTEGRALS WITH REGULAR FUNCTIONS: (L+1)       DIRECT       BACKW
     &ARDS RECURRENCE'/37X,'1',2D20.10/37X,'2',2D20.10)
C UPWARDS RECURRENCES FOR THE OTHER INTEGRALS:  STARTING VALUES         CORI-338
            RETURN
         ENDIF
      ELSE
         IF (.NOT.(ll(3))) THEN
            T(i) = -(a3*T(i - 2) + a4*T(i - 1) + c1*c4 + c2*c5)/a5
            c3 = c4
            c4 = c5
            c5 = -(a6*c3 + a7*c4)/a8
         ENDIF
         IF (.NOT.(ll(4))) THEN
            DO j = 1, 4
               j1 = MOD(j + 1,2) + i - 2
               j2 = (j + 1)/2 + i - 3
               DO k = 1, 4
                  k1 = MOD(k + 1,2)*2 + 1
                  k2 = 2*((k + 1)/2) - 1
                  y(k,j) = Fgi(j1,k1)*Fgf(j2,k2)
               ENDDO
            ENDDO
C RECURRENCE FOR (0,2;L)                                                CORI-243
            DO j = 1, 4
               x1(j) = x2(j)
               x2(j) = x3(j)
               W(i,j) = -(b3*y(j,1) + b4*y(j,2) + b5*y(j,3) + b6*y(j,4)
     &                  + a3*W(i - 2,j) + a4*W(i - 1,j) + c1*x1(j)
     &                  + c2*x2(j))/a5
            ENDDO
            DO j = 1, 4
               x3(j) = -(b7*y(j,2) + b8*y(j,3) + b9*y(j,4) + a6*x1(j)
     &                 + a7*x2(j))/a8
            ENDDO
         ENDIF
         IF (i.LT.lx) GOTO 100
         ln = MAX0(Lm,IDINT(rs)) + 50
         lx = ln
         IF (.NOT.ll(2)) lx = MAX0(lx,Lm2 + 6*MIN0(IDINT((si+sf)/DABS(si
     &                        -sf)),500))
         ll(3) = ll(2)
         in = 2
         x4(1) = 1.D0
         x4(2) = 0.D0
         x4(3) = 0.D0
         x4(4) = 0.D0
         a1 = lx - 1
         a2 = DSQRT(a1**2 + fi)
         b2 = DSQRT(a1**2 + ff)
         DO j = 1, 4
            x2(j) = 0.D0
            x3(j) = 0.D0
         ENDDO
         x3(1) = 1.D-20
         x3(2) = 1.D-20
      ENDIF
      lx = lx - 1
      a = lx
      a1 = a2
      b1 = b2
      a3 = DFLOAT(lx - 1)
      ll(4) = lx.GT.ln
      a2 = DSQRT(a3**2 + fi)
      b2 = DSQRT(a3**2 + ff)
      GOTO 200
  300 WRITE (MW,99020)
99020 FORMAT (//' IN CORI  ... STOP ...')
      STOP
  400 WRITE (MW,99025) n, li, li, Ei, Ef, T(l), b5, b6
99025 FORMAT (' THE',I4,' TERM IS TOO LARGE IN THE COMPUTATION OF I(',
     &        I1,',',I1,',2)    WITH EI =',F15.6,5X,'AND EF =',F15.6,5X,
     &        'IN CORH'/5X,'VALUE =',D15.8,5X,'LAST TERM =',2D16.8)
      GOTO 300
      END
C 01/01/04                                                      ECIS03  COR0-000
      SUBROUTINE COR0(Ei,Ef,Ssi,Ssf,Zr,Zi,Z,Lm3,Rm,Rs,Fs,Fi,Ff,Ex,Cc)
C    COMPUTATION OF THE INTEGRALS FROM RS TO INFINITY OF PRODUCTS OF    COR0-002
C REGULAR OR IRREGULAR COULOMB FUNCTIONS OF L=0 AND L=1 DIVIDED BY R**2 COR0-003
C INPUT VARIABLES: EI,EF:  COULOMB PARAMETERS.                          COR0-004
C                  SSI,SSF:COULOMB PHASE-SHIFTS FOR L=0.                COR0-005
C                  LM3:    DIMENSION OF WORKING SPACE(SINGLE PRECISION) COR0-006
C                  LM:     ACTUAL NUMBER OF INTEGRALS FROM RS TO INF.   COR0-007
C                  RM:     ACTUAL MATCHING RADIUS FOR INTEGRALS.        COR0-008
C                  RS:     NEEDED MATCHING RADIUS FOR INTEGRALS.        COR0-009
C                  FS:     SQUARE ROOT OF RATIO OF WAVE NUMBERS.        COR0-010
C                  FI,FF:  SQUARES OF COULOMB PARAMETERS.               COR0-011
C                  EX:     DIFFERENCE OF COULOMB PARAMETERS.            COR0-012
C OUTPUT VARIABLES:CC:     INTEGRALS FROM RS TO INFINITY.               COR0-013
C                  ZR,ZI:  REAL, IMAGINARY PART OF LOG(GAMMA(0.,EI-EF)) COR0-014
C WORKING SPACE:   Z:      FOR THE COMPUTATION OF F AND G.              COR0-015
C***********************************************************************COR0-016
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C Dummy arguments
C
      REAL*8 Ef, Ei, Ex, Ff, Fi, Fs, Rm, Rs, Ssf, Ssi, Zi, Zr
      INTEGER Lm3
      REAL*8 Cc(4,4), Z(4,2)
C
C Local variables
C
      REAL*8 a1, a2, a3, a4, a5, a6, a7, a8, a9, absc(20), b(7), b1, b2,
     &       b3, b4, b5, b6, b7, b8, b9, c(2,2,2), c1, c2, c3, c4,
     &       p(20), pi, x1(4), x2(4), x3(4), x4(4), x5(4), y(4,4)
      DOUBLE PRECISION DABS, DATAN, DCOS, DEXP, DLOG, DMAX1, DMIN1,
     &                 DSIGN, DSIN, DSQRT
      INTEGER i, i1, ie(2), ii, il, it, j, k, l, m, n
      INTEGER IDINT, MIN0
C
C
      DATA pi/3.141592653589793D0/
      DATA b/.8333333333333333D-01, -.2777777777777778D-2,
     &     .79365079365079365D-3, -.5952380952380952D-3,
     &     .84175084175D-3, -.19175269D-2, .641D-02/
      DATA absc(1), p(1)/0.88114514472040D-03, 0.22606385492666D-02/
      DATA absc(2), p(2)/0.46368806502715D-02, 0.52491422655764D-02/
      DATA absc(3), p(3)/0.11370025008113D-01, 0.82105291909539D-02/
      DATA absc(4), p(4)/0.21041590393104D-01, 0.11122924597084D-01/
      DATA absc(5), p(5)/0.33593595860662D-01, 0.13968503490012D-01/
      DATA absc(6), p(6)/0.48950596515563D-01, 0.16730097641274D-01/
      DATA absc(7), p(7)/0.67020248393870D-01, 0.19391083987236D-01/
      DATA absc(8), p(8)/0.87693884583344D-01, 0.21935454092836D-01/
      DATA absc(9), p(9)/0.11084717428674D+00, 0.24347903817536D-01/
      DATA absc(10), p(10)/0.13634087240504D+00, 0.26613923491968D-01/
      DATA absc(11), p(11)/0.16402165769291D+00, 0.28719884549696D-01/
      DATA absc(12), p(12)/0.19372305516601D+00, 0.30653121246465D-01/
      DATA absc(13), p(13)/0.22526643745244D+00, 0.32402006728300D-01/
      DATA absc(14), p(14)/0.25846209915691D+00, 0.33956022907617D-01/
      DATA absc(15), p(15)/0.29311039781420D+00, 0.35305823695643D-01/
      DATA absc(16), p(16)/0.32900295458712D+00, 0.36443291197902D-01/
      DATA absc(17), p(17)/0.36592390749637D+00, 0.37361584528984D-01/
      DATA absc(18), p(18)/0.40365120964931D+00, 0.38055180950313D-01/
      DATA absc(19), p(19)/0.44195796466237D+00, 0.38519909082124D-01/
      DATA absc(20), p(20)/0.48061379124697D+00, 0.38752973989212D-01/
C COMPUTATION OF THE INTEGRALS FROM RM TO INFINITY FOR L=0,1 BY         COR0-044
C RAWITSCHER'S METHOD. (COMP. PHYSICS COMM., VOL.11,183,1976)           COR0-045
C EXPANSIONS OF COULOMB WAVE FUNCTIONS ARE Z(N,2*M-1)+I*Z(N,2*M)=G+I*F  COR0-046
C   N=1: L=0,E=EI     N=2: L=0,E=EF     N=3: L=1,E=EI     N=4: L=1,E=EF COR0-047
      a1 = Rm/Fs
      b1 = Rm*Fs
      x1(1) = a1 - Ei*DLOG(2.D0*a1) + Ssi
      x1(3) = b1 - Ef*DLOG(2.D0*b1) + Ssf
      x1(2) = x1(1) + DATAN(Ei) - .5D0*pi
      x1(4) = x1(3) + DATAN(Ef) - .5D0*pi
C FIRST TERM OF ASYMPTOTIC EXPANSION OF H(+/-) FOR L=0,1                COR0-054
      DO i = 1, 4
         x5(i) = 0.D0
         Z(i,1) = DCOS(x1(i))
         Z(i,2) = DSIN(x1(i))
      ENDDO
      x1(1) = -a1 - b1
      x2(1) = Ei + Ef
      x1(2) = b1 - a1
      x2(2) = -Ex
      IF (DABS(x1(2)).LT.1.D-8) x1(2) = 0.D0
      IF (x1(2).NE.0.D0) THEN
C COMPUTATION OF LOG(GAMMA(0.,EI-EF))                                   COR0-065
         b2 = -DATAN(Ex/11.D0)
         b3 = 121.D0 + Ex**2
         a2 = .5D0*DLOG(b3)
         Zr = .91893853320467274D0 + 10.5D0*a2 + Ex*b2 - 11.D0 -
     &        DLOG(DABS(Ex))
         Zi = 10.5D0*b2 + Ex - Ex*a2 + 0.5D0*pi
         IF (Ex.LT.0.D0) Zi = Zi - pi
         a2 = 11.D0/b3
         b2 = Ex/b3
         a3 = a2**2 - b2**2
         b3 = 2.D0*a2*b2
         DO i = 1, 7
            Zr = Zr + b(i)*a2
            Zi = Zi + b(i)*b2
            c1 = a2*a3 - b2*b3
            b2 = a2*b3 + b2*a3
            a2 = c1
         ENDDO
         DO i = 1, 10
            a2 = DFLOAT(i)
            Zr = Zr - .5D0*DLOG(a2**2 + Ex**2)
            Zi = Zi + DATAN(Ex/a2)
         ENDDO
      ENDIF
      IF (DABS(x1(2)).LE.2.D0) THEN
C COMPUTATION OF THE FIRST CONFLUENT HYPERGEOMETRIC FUNCTION            COR0-087
         IF (x1(2).EQ.0.D0) THEN
            x5(4) = -.5D0*pi
            x5(2) = 0.D0
         ELSE
            IF (DABS(x2(2)).LT.1.D-3) THEN
C EXPANSION FOR SMALL EX                                                COR0-095
               a2 = DLOG(DABS(x1(2)))
               b2 = pi*.5D0
               IF (x1(2).LT.0.D0) b2 = -b2
               a3 = a2*
     &              (1.D0 + Ex*(b2 - Ex*((a2**2-3.D0*b2**2)/6.D0+Ex*b2*
     &              (a2**2-b2**2)/6.D0)))
               b3 = b2 -
     &              Ex*((a2**2 - b2**2)/2.D0 + Ex*(b2*(3.D0*a2**2-b2**2)
     &              /6.D0 - Ex*(a2**4-6.D0*a2**2*b2**2+b2**4)/24.D0))
               a2 = .5772156649015329D0 - .400685634386331D0*Ex**2
               b2 = -Ex*(.822467033424113D0 - 0.270580808427784D0*Ex**2)
               a4 = a2*
     &              (1.D0 + Ex*(b2 - Ex*((a2**2-3.D0*b2**2)/6.D0+Ex*b2*
     &              (a2**2-b2**2)/6.D0)))
               b4 = b2 -
     &              Ex*((a2**2 - b2**2)/2.D0 + Ex*(b2*(3.D0*a2**2-b2**2)
     &              /6.D0 - Ex*(a2**4-6.D0*a2**2*b2**2+b2**4)/24.D0))
               x5(2) = -a3 - a4 - Ex*(a3*b4 + b3*a4)
               x5(4) = -b3 - b4 + Ex*(a3*a4 - b3*b4)
            ELSE
               a2 = DEXP( - DSIGN(0.5D0*pi,x1(2))*x2(2) + Zr)
               b2 = DSIGN(Zi,x2(2)) + x2(2)*DLOG(DABS(x1(2)))
               x5(2) = a2*DCOS(b2)
               x5(4) = a2*DSIN(b2) - 1.D0/x2(2)
            ENDIF
            a2 = x5(2)
            b2 = x5(4)
            a3 = 1.D0
            b3 = 0.D0
            DO j = 1, 1000
               b4 = j
               c1 = -x1(2)*(b4*b3 - Ex*a3)/(b4**2 + Ex**2)
               b3 = x1(2)*(b4*a3 + Ex*b3)/(b4**2 + Ex**2)
               a3 = c1
               c2 = ( - x1(2)*b2 + a3)/b4
               b2 = (x1(2)*a2 + b3)/b4
               a2 = c2
               x5(2) = x5(2) + a2
               x5(4) = x5(4) + b2
               IF (DABS(a2) + DABS(b2)
     &             .LT.1.D-12*(DABS(x5(2)) + DABS(x5(4)))) GOTO 100
            ENDDO
         ENDIF
      ENDIF
  100 DO j = 1, 16
         y(j,1) = 0.D0
      ENDDO
      n = IDINT(DMIN1(a1 + DSQRT(a1**2-Fi),b1 + DSQRT(b1**2-Ff)) + 2.D0)
      a3 = 0.D0
      b3 = 0.D0
C LOOP OF THE ASYMPTOTIC EXPANSION                                      COR0-135
      DO i = 1, n
         IF (8*i.GT.Lm3) CALL MEMO('COR0',Lm3,8*i,2)
         a4 = DFLOAT(i) - 2
         IF (i.NE.1) THEN
            IF (i.NE.2) THEN
               b4 = 1.D0 - .5D0/a4
               x3(1) = Ei*b4/a1
               x3(2) = x3(1)
               x3(3) = Ef*b4/b1
               x3(4) = x3(3)
               x4(1) = (Fi - a4*(a4 - 1.D0))/(2.D0*a4*a1)
               x4(2) = (Fi - (a4 + 1.D0)*(a4 - 2.D0))/(2.D0*a4*a1)
               x4(3) = (Ff - a4*(a4 - 1.D0))/(2.D0*a4*b1)
               x4(4) = (Ff - (a4 + 1.D0)*(a4 - 2.D0))/(2.D0*a4*b1)
C NEW TERM OF ASYMPTOTIC EXPANSION                                      COR0-150
               DO j = 1, 4
                  Z(j,2*i - 3) = Z(j,2*i - 5)*x3(j) - Z(j,2*i - 4)*x4(j)
                  Z(j,2*i - 2) = Z(j,2*i - 5)*x4(j) + Z(j,2*i - 4)*x3(j)
               ENDDO
            ENDIF
            DO j = 1, 8
               c(j,1,1) = 0.D0
            ENDDO
C PRODUCT OF THE ASYMPTOTIC EXPANSIONS IN C(1,N,M)+I*C(2,N,M)           COR0-156
C  N=1: H0(+)(EI)*H0(+)(EF)     N=2: H1(+)(EI)*H1(+)(EF)                COR0-157
C  M=1: HL(+)(EI)*HL(+)(EF)     M=2: HL(+)(EI)*HL(+)(EF)*               COR0-158
            i1 = i - 1
            DO j = 1, i1
               m = i - j
               DO l = 1, 2
                  c(1,l,1) = c(1,l,1) + Z(l,2*j - 1)*Z(l + 2,2*m - 1)
     &                       - Z(l,2*j)*Z(l + 2,2*m)
                  c(2,l,1) = c(2,l,1) + Z(l,2*j - 1)*Z(l + 2,2*m)
     &                       + Z(l,2*j)*Z(l + 2,2*m - 1)
                  c(1,l,2) = c(1,l,2) + Z(l,2*j - 1)*Z(l + 2,2*m - 1)
     &                       + Z(l,2*j)*Z(l + 2,2*m)
                  c(2,l,2) = c(2,l,2) - Z(l,2*j - 1)*Z(l + 2,2*m)
     &                       + Z(l,2*j)*Z(l + 2,2*m - 1)
               ENDDO
            ENDDO
         ENDIF
         b4 = a4 + 2.D0
         a5 = 0.D0
         b5 = 0.D0
C INTEGRATION FROM RS TO INFINITY                                       COR0-171
         DO m = 1, 2
C TRANSFER OF PREVIOUS INTEGRALS                                        COR0-173
            x4(m) = x5(m)*Rm
            x4(m + 2) = x5(m + 2)*Rm
            IF (DABS(x1(m)).LE.2.D0 .AND. m.EQ.2) THEN
C TAYLOR EXPANSION OF CONFLUENT HYPERGEOMETRIC FUNCTION                 COR0-222
               IF (i.EQ.1) GOTO 150
               a7 = 1.D0 + x1(m)*x5(m + 2)
               b7 = -x1(m)*x5(m)
               a9 = ((b4 - 1.D0)**2 + x2(m)**2)
               x5(m) = (a7*(b4 - 1.D0) + x2(m)*b7)/a9
               x5(m + 2) = (b7*(b4 - 1.D0) - x2(m)*a7)/a9
            ELSE
C PADE METHOD FOR OMEGA FUNCTION                                        COR0-177
C INSTEAD OF FORMULA (44), WE COMPUTE I*K*R*OMEGA IN TERMS OF I*K*R     COR0-178
               a9 = b4**2 + (x2(m) + x1(m))**2
               a6 = b4/a9
               b6 = -(x2(m) + x1(m))/a9
               a7 = -b6*x1(m)
               b7 = a6*x1(m)
               a8 = a6
               b8 = b6 + 1.D0/x1(m)
               b9 = 1.D0
C STEED'S ALGORITHM                                                     COR0-187
               DO j = 1, 1000
                  c2 = b7 + x1(m)/b9
                  a9 = (a7**2 + c2**2)*b9
                  c1 = a7/a9
                  c2 = -c2/a9
                  c3 = -(c2*x1(m) + 1.D0)*a8 - c1*x1(m)*b8
                  c4 = c1*x1(m)*a8 - b8*(c2*x1(m) + 1.D0)
                  a7 = 1.D0 + c1*(b4 + b9) - c2*x2(m)
                  b7 = c1*x2(m) + (b4 + b9)*c2
                  a9 = a7**2 + b7**2
                  a7 = a7/a9
                  b7 = -b7/a9
                  a8 = (a7 - 1.D0)*c3 - b7*c4
                  b8 = (a7 - 1.D0)*c4 + b7*c3
                  b9 = b9 + 1.D0
                  IF (DABS(c3) + DABS(c4) + DABS(a8) + DABS(b8)
     &                .LT.1.D-12*(DABS(b6) + DABS(a6))) GOTO 110
                  a6 = a6 + a8 + c3
                  b6 = b6 + b8 + c4
               ENDDO
  110          x5(m) = 0.D0
               x5(m + 2) = 0.D0
               j = j + 1
C DIRECT COMPUTATION OF PADE APPROXIMANT FOR MORE PRECISION             COR0-210
               DO k = 1, j
                  c1 = 1.D0 + b9*x5(m)
                  c2 = b9*x5(m + 2)
                  a9 = c1**2 + c2**2
                  b9 = b9 - 1.D0
                  a7 = ((b4 + b9)*c1 + x2(m)*c2)/a9
                  b7 = x1(m) + (c1*x2(m) - c2*(b4 + b9))/a9
                  a9 = a7**2 + b7**2
                  x5(m) = a7/a9
                  x5(m + 2) = -b7/a9
               ENDDO
            ENDIF
            IF (i.NE.1) THEN
C STORAGE OF INTEGRALS TO A FACTOR R IN Y(J,M)                          COR0-230
C  J=1 AND J=2  REAL AND IMAGINARY PARTS OF INTEGRAL OF H0(EI)*H0(EF)   COR0-231
C  J=3 AND J=4  REAL AND IMAGINARY PARTS OF INTEGRAL OF H1(EI)*H1(EF)   COR0-232
C  M=1 AND M=2 FOR H*H   M=3 AND M=4 FOR H*H*                           COR0-233
C  M=1 AND M=3 FOR 1/R   M=2 AND M=4 FOR 1/R**2                         COR0-234
               DO j = 1, 2
                  a6 = c(1,j,m)*x4(m) - c(2,j,m)*x4(m + 2)
                  b6 = c(1,j,m)*x4(m + 2) + c(2,j,m)*x4(m)
                  a5 = DMAX1(a5,a6**2 + b6**2)
                  y(2*j - 1,2*m - 1) = y(2*j - 1,2*m - 1) + a6
                  y(2*j,2*m - 1) = y(2*j,2*m - 1) + b6
                  a3 = DMAX1(a3,y(2*j - 1,2*m - 1)**2 + y(2*j,2*m - 1)
     &                 **2)
                  a6 = c(1,j,m)*x5(m) - c(2,j,m)*x5(m + 2)
                  b6 = c(1,j,m)*x5(m + 2) + c(2,j,m)*x5(m)
                  b5 = DMAX1(b5,a6**2 + b6**2)
                  y(2*j - 1,2*m) = y(2*j - 1,2*m) + a6
                  y(2*j,2*m) = y(2*j,2*m) + b6
                  b3 = DMAX1(b3,y(2*j - 1,2*m)**2 + y(2*j,2*m)**2)
               ENDDO
            ENDIF
  150    ENDDO
         IF (i.NE.1 .AND. a5.LT.a3*1.D-30 .AND. b5.LT.b3*1.D-30)
     &       GOTO 200
      ENDDO
  200 a1 = 2.D0*Rm
C TRANSFORMATION FROM H(+/-) TO F AND G                                 COR0-252
      DO i = 1, 4
         Cc(1,i) = (y(2*i - 1,3) - y(2*i - 1,1))/a1
         Cc(4,i) = (y(2*i - 1,3) + y(2*i - 1,1))/a1
         Cc(3,i) = (y(2*i,1) + y(2*i,3))/a1
         Cc(2,i) = (y(2*i,1) - y(2*i,3))/a1
      ENDDO
      IF (Rm.NE.Rs) THEN
C IF RM IS NOT RS, 40 POINTS GAUSS INTEGRATION FROM RS TO RM            COR0-259
C EACH GAUSS INTEGRATION IS FOR VARIATION OF R LESS THAN 20.            COR0-260
         il = 1 + IDINT(DABS(Rm - Rs)*.05D0)
         a1 = DFLOAT(il)
         a1 = (Rm - Rs)/a1
         a2 = Rm
         DO it = 1, il
            a3 = a2 - a1
            DO ii = 1, 40
               i = MIN0(ii,41 - ii)
               a4 = absc(i)
               IF (i.NE.ii) a4 = 1.D0 - a4
               a5 = a3 + a1*a4
               CALL FCOU(1,Ei,a5/Fs,y,y(1,3),y(3,1),y(3,3),ie,x1)
               CALL FCOU(1,Ef,a5*Fs,y(1,2),y(1,4),y(3,2),y(3,4),ie,x1)
               DO m = 1, 2
                  DO j = 1, 2
                     DO l = 1, 2
                        a6 = p(i)*y(2*j + m - 2,1)*y(2*l + m - 2,2)
     &                       /a5*a1
                        Cc(2*l + j - 2,m) = Cc(2*l + j - 2,m) + a6
                        Cc(2*l + j - 2,m + 2) = Cc(2*l + j - 2,m + 2)
     &                     + a6/a5
                     ENDDO
                  ENDDO
               ENDDO
            ENDDO
            a2 = a3
         ENDDO
      ENDIF
      END
C 01/01/04                                                      ECIS03  CORZ-000
      SUBROUTINE CORZ(Xi,Xf,T,Fgi,Fgf,Lm1,Lm2,Lm,W)
C    COMPUTATION OF THE INTEGRALS FROM 1 TO INFINITY OF PRODUCTS OF     CORZ-002
C REGULAR OR IRREGULAR BESSEL FUNCTIONS OF SAME L-VALUE AND ARGUMENT    CORZ-003
C XI*R AND XF*R RESPECTIVELY, DIVIDED BY R**3 FOR L=1 TO LM, AND OF     CORZ-004
C INTEGRALS FROM 0 TO INFINITY OF REGULAR FUNCTIONS OF THESE ARGUMENTS  CORZ-005
C DIVIDED BY R**3.                                                      CORZ-006
C    THE LIMIT OF STABILITY OF THE UPWARDS RECURRENCE HAS               CORZ-007
C     BEEN FOUND TO BE   LM2*(1-XI/XF) < 3 .                            CORZ-008
C INPUT VARIABLES:                                                      CORZ-009
C     XI,XF   WAVE NUMBERS MULTIPLIED BY THE MATCHING RADIUS            CORZ-010
C     FGI,FGF REGULAR AND IRREGULAR BESSEL FUNCTIONS.                   CORZ-011
C     LM1     MAXIMUM NUMBER OF INTEGRALS FROM 1 TO INFINITY.           CORZ-012
C     LM2     NUMBER OF INTEGRALS FROM 0 TO INFINITY.                   CORZ-013
C     LM      ACTUAL NUMBER OF INTEGRALS FROM 1 TO INFINITY.            CORZ-014
C OUTPUT VARIABLES:                                                     CORZ-015
C     W       INTEGRALS FROM 1 TO INFINITY.                             CORZ-016
C     T       INTEGRALS FROM 0 TO INFINITY.                             CORZ-017
C***********************************************************************CORZ-018
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C Dummy arguments
C
      INTEGER Lm, Lm1, Lm2
      REAL*8 Xf, Xi
      REAL*8 Fgf(Lm1,3), Fgi(Lm1,3), T(3), W(Lm1,4)
C
C Local variables
C
      REAL*8 a1, a2, a3, a4, a5, b(4), b1, b2, b3, c(2), c1, c2, c3,
     &       d(2), d1, d2, d3, x, xx
      DOUBLE PRECISION DABS, DCOS, DLOG, DMAX1, DSIN
      INTEGER i, j, k, lk, ln
      INTEGER IDINT, MAX0
C
C
C INTEGRALS FROM 0 TO INFINITY.                                         CORZ-021
C THE RECURRENCE RELATION STARTS FROM L=0 WITH L*(0,3;L)=1/3 FOR L=0    CORZ-022
      T(1) = 1.D0/3.D0
      IF (Xi.NE.Xf) THEN
         x = Xi/Xf
         IF (x.GT.1.D0) x = 1.D0/x
C (0,3;L) = X**L GT(1/2) GT(L+1)/2/GT(L+3/2) 2F1(L,-1/2;L+3/2;X**2)     CORZ-033
         IF (x.GE..9D0) THEN
C ANALYTIC CONTINUATION OF THE 2F1 FUNCTION - ERDELYI,.... 15.3.11      CORZ-047
            a1 = 1.D0 - x**2
            a2 = x*a1**2/16.D0
            a3 = DLOG(a1/4.D0) + 2.D0
            T(2) = x*(2.D0 + a1)/8.D0 + a2*a3
            a4 = 0.D0
            DO j = 1, 2000
               a4 = a4 + 1.D0
               a3 = a3 - .5D0/((a4 + .5D0)*a4)
               a2 = a2*a1*(a4 + .5D0)/a4
               a5 = a2*a3
               T(2) = T(2) + a5
               IF (DABS(a5).LT.1.D-15*DABS(T(2))) GOTO 50
            ENDDO
         ELSE
C DIRECT EXPANSION OF THE 2F1 FUNCTION                                  CORZ-035
            a1 = x**2
            T(2) = x/3.D0
            a2 = T(2)
            a3 = 0.D0
            DO j = 1, 2000
               a3 = a3 + 1.D0
               a2 = a2*a1*(a3 - 1.5D0)/(a3 + 1.5D0)
               T(2) = T(2) + a2
               IF (DABS(a2).LT.1.D-15*DABS(T(2))) GOTO 50
            ENDDO
         ENDIF
C RECURRENCE RELATION FOR  (0,3;L) :                                    CORZ-061
C  2*(L-1)*(0,3;L-1)-(2*L+1)*(X+1/X)*(0,3;L)+2*(L+2)*(0,3;L+1)=0        CORZ-062
C UPWARDS RECURRENCE                                                    CORZ-063
   50    a1 = x + 1.D0/x
         xx = Lm2*(1 - x)
         IF (xx.GT.3.D0) THEN
C DOWNWARDS RECURRENCE                                                  CORZ-073
            lk = 4*Lm2
            a2 = DFLOAT(lk - 1)
            a3 = a2/(a2 + 2.D0)
            DO i = 3, lk
               j = lk - i + 3
               a2 = a2 - 1.D0
               a3 = a2/((a2 + 1.5D0)*a1 - (a2 + 3.D0)*a3)
               IF (j.LE.Lm2) T(j) = a3
            ENDDO
            DO i = 3, Lm2
               T(i) = T(i)*T(i - 1)
            ENDDO
         ELSE
            T(3) = .5D0*(a1*T(2) - T(1))
            a2 = 0.D0
            DO i = 4, Lm2
               a2 = a2 + 1.D0
               T(i) = ((a2 + 1.5D0)*a1*T(i - 1) - a2*T(i - 2))
     &                /(a2 + 3.D0)
            ENDDO
         ENDIF
      ELSE
C WHEN KI=KF   (0,3;L)=1/(2*L*(L+1))                                    CORZ-025
         a1 = 0.D0
         DO i = 2, Lm2
            a1 = a1 + 1.D0
            T(i) = .5D0/(a1*(a1 + 1.D0))
         ENDDO
      ENDIF
      b(1) = Xi + Xf
      b(2) = Xi - Xf
C COMPUTATION OF THE INTEGRALS FROM 1 TO INFINITY OF EXP(I*B*R)/R**3 DR CORZ-087
      DO i = 1, 2
         IF (b(i).GE.5.D0) THEN
C USE OF PADE APPROXIMANT                                               CORZ-090
            a1 = 0.D0
            a2 = 0.D0
            a3 = 21.D0
            DO j = 1, 20
               a3 = a3 - 1.D0
               a2 = a2 - b(i)
               b1 = a1**2 + a2**2
               b2 = a1*a3/b1 + 1.D0
               b3 = -a2*a3/b1
               b1 = b2**2 + b3**2
               a1 = b2*(a3 + 2.D0)/b1
               a2 = -b3*(a3 + 2.D0)/b1
            ENDDO
            a2 = a2 - b(i)
            b1 = a1**2 + a2**2
            c(i) = (DCOS(b(i))*a1 + DSIN(b(i))*a2)/b1
            d(i) = (DSIN(b(i))*a1 - DCOS(b(i))*a2)/b1
         ELSEIF (b(i).EQ.0.D0) THEN
            c(i) = .5D0
            d(i) = 0.D0
         ELSE
C USE OF THE TAYLOR EXPANSION                                           CORZ-109
            a1 = DABS(b(i))
            c(i) = .5D0*(1.D0 - a1**2*(.922784335098467D0 - DLOG(a1)))
            d(i) = a1*(1.D0 - .78539816339744831D0*a1)
            a2 = a1**2/2.D0
            a3 = 0.D0
            DO j = 2, 20
               a3 = a3 + 1.D0
               a2 = a2*a1/(2.D0*a3 + 1.D0)
               d(i) = d(i) + a2/(2.D0*a3 - 1.D0)
               a2 = -a2*a1/(2.D0*a3 + 2.D0)
               c(i) = c(i) + a2/(2.D0*a3)
               IF (DABS(a2).LT.1.D-16) GOTO 60
            ENDDO
   60       IF (a1.NE.b(i)) d(i) = -d(i)
         ENDIF
      ENDDO
C STORAGE OF THE TWO FIRST INTEGRALS                                    CORZ-128
      a1 = 2.D0*Xi*Xf
      DO i = 1, 2
         W(i,1) = (c(2) - c(1))/a1
         W(i,2) = (d(1) - d(2))/a1
         W(i,3) = (d(1) + d(2))/a1
         W(i,4) = (c(2) + c(1))/a1
         IF (i.NE.2) THEN
            c(1) = c(1)*b(2)**2 + DCOS(b(1)) + b(1)*DSIN(b(1))
            d(1) = d(1)*b(2)**2 + DSIN(b(1)) - b(1)*DCOS(b(1))
            c(2) = c(2)*b(1)**2 + DCOS(b(2)) + b(2)*DSIN(b(2))
            d(2) = d(2)*b(1)**2 + DSIN(b(2)) - b(2)*DCOS(b(2))
            a1 = 2.D0*a1**2
         ENDIF
      ENDDO
C UPWARDS RECURRENCE                                                    CORZ-142
      a1 = Xi/Xf + Xf/Xi
      a2 = 2.D0*Xi*Xf
      a3 = 2.D0
      DO j = 3, Lm
         a3 = a3 + 1.D0
         b(2) = (Fgi(j - 2,3)*Fgf(j - 2,1) - Fgi(j,3)*Fgf(j,1))/a2
         b(3) = (Fgi(j - 2,1)*Fgf(j - 2,3) - Fgi(j,1)*Fgf(j,3))/a2
         b(4) = (Fgi(j - 2,3)*Fgf(j - 2,3) - Fgi(j,3)*Fgf(j,3))/a2
         DO i = 2, 4
            W(j,i) = ((a3 - 1.5D0)*a1*W(j - 1,i) - (a3 - 3.D0)
     &               *W(j - 2,i) - b(i))/a3
         ENDDO
      ENDDO
      ln = MAX0(Lm,IDINT(DMAX1(Xi,Xf))) + 50
      b2 = 0.D0
      b3 = 0.D0
      c2 = 0.D0
      c3 = 1.D-15
      d2 = 0.D0
      d3 = 1.D-15
      a3 = ln
      DO i = 2, ln
         j = ln - i + 2
         a3 = a3 - 1.D0
         b1 = b2
         b2 = b3
         c1 = c2
         c2 = c3
         d1 = d2
         d2 = d3
         c3 = (2.D0*a3 + 3.D0)*c2/Xi - c1
         d3 = (2.D0*a3 + 3.D0)*d2/Xf - d1
         b3 = ((a3 + 1.5D0)*a1*b2 - (a3 + 3.D0)*b1 - (c3*d3 - c1*d1)/a2)
     &        /a3
         IF (j.LE.Lm) W(j,1) = b3
         IF (d3.LT.1.D15) THEN
            IF (c3.LT.1.D15) GOTO 100
            c2 = c2*1.D-30
            c3 = c3*1.D-30
         ELSE
            d2 = d2*1.D-30
            d3 = d3*1.D-30
         ENDIF
         b2 = b2*1.D-30
         b3 = b3*1.D-30
         IF (j.LE.Lm) THEN
            DO k = j, Lm
               W(k,1) = W(k,1)*1.D-30
            ENDDO
         ENDIF
  100 ENDDO
      a1 = Fgi(2,1)*Fgf(2,1)/(c3*d3)
      DO i = 2, Lm
         W(i,1) = W(i,1)*a1 + T(i)
      ENDDO
      END
C 01/01/04                                                      ECIS03  REDM-000
      SUBROUTINE REDM(Niv,Iq,T,Ipi,Ncoll,It,Nbeta,Beta,Nbt1,Iph,Nvar,
     &                Var,Nva,Iqmax,Nspin,Fac,Nfa,Npp,Im,Idt,Lo)
C REDUCED NUCLEAR MATRIX ELEMENTS                                       REDM-003
C INPUT VARIABLES: IPI(I,J):PARITY OF NUCLEAR STATES FOR J=1            REDM-004
C                          MULTIPLICITY OF THE PART. AND TARGET FOR J=2,REDM-005
C                  NCOLL:  NUMBER OF COUPLED STATES                     REDM-006
C                  NBETA,BETA:  DEFORMATIONS, EQUIVALENT BY CALL        REDM-007
C                  NBT1:   NUMBER OF PHONONS                            REDM-008
C                  IPH:    USED FOR VIBRATIONAL MODEL    SEE VIBM       REDM-009
C                  NVAR,VAR:    PARAMETERS FOR SOME MODELS              REDM-010
C                  NVA:    NUMBER OF THESE PARAMETERS                   REDM-011
C                  IQMAX,NSPIN: SEE ROTM                                REDM-012
C                  FAC,NFA: TABLE OF LOG OF FACTORIALS AND THEIR NUMBER REDM-013
C                  NPP:    NUMBER OF OPTICAL POTENTIALS                 REDM-014
C                  IDT:    LENGTH AVAILABLE IN THIS SUBROUTINE          REDM-015
C                  LO:     LOGICAL CONTROLS                             REDM-016
C OUTPUT VARIABLES:IM:     NUMBER OF NUCLEAR MULTIPOLES                 REDM-017
C                  NIV(I1,I2,K): FIRST I OF T(3,I) FOR THE PAIR OF      REDM-018
C             NUCLEAR STATES I1,I2 FOR K=1 AND LAST ONE FOR K=2         REDM-019
C                  IQ(6,I),T(3,I) ARE EQUIVALENT BY CALL                REDM-020
C             - THE FIRST 6*"IT" DATA (FOR A GIVEN I) ARE               REDM-021
C               1) REFERENCE TO TABLE OF FORM FACTORS                   REDM-022
C               2) REFERENCE TO TABLE OF ANGULAR MOMENTA                REDM-023
C               3) ADDRESS OF THE ASSOCIATED SPIN-ORBIT FORM FACTOR OR 0REDM-024
C               4) UNUSED                                               REDM-025
C               5-6) THE REDUCED NUCLEAR MATRIX ELEMENT MULTIPLIED BY   REDM-026
C                (-)**(L/2) WHERE L IS THE TRANSFERRED ANGULAR MOMENTUM REDM-027
C             - THE NEXT 3*"IM" DATA ARE TABLE OF ANGULAR MOMENTA       REDM-028
C               1) L  TRANSFERRED ANGULAR MOMENTUM                      REDM-029
C               2) 2*S WHERE S IS THE TRANSFER OF SPIN                  REDM-030
C               3) 2*J WHERE J IS THE TRANSFER OF TOTAL SPIN OR 0 IF S=0REDM-031
C             - THE FOLLOWING 7*"INTC" ARE THE TABLE IVY OF FORM FACTOR REDM-032
C                     INDEPENDENT OF DISPERSION RELATIONS.              REDM-033
C               1) FORM FACTOR CONTROL NUMBER                           REDM-034
C               2) REFERENCE TO THE TABLE OF MULTIPOLES                 REDM-035
C               3) 0 OR ADDRESS OF THE FIRST SPIN-ORBIT FORM FACTOR     REDM-036
C               4) 0 OR ADDRESS OF TEMPORARY COULOMB FORM FACTOR        REDM-037
C               5) 0 OR ADDRESS OF TEMPORARY COULOMB SPIN-ORBIT         REDM-038
C               6) 0 OR ADDRESS OF CORRECTION TERM (POSITIVE FOR        REDM-039
C                       CORRECTED TERM, NEGATIVE FOR CORRECTION TERM)   REDM-040
C               7) ANGULAR MOMENTUM                                     REDM-041
C             - THE FOLLOWING 4*"INTV" ARE THE TABLE IVZ OF FORM FACTOR REDM-042
C                     DEPENDENT OF DISPERSION RELATIONS.                REDM-043
C               1) ADDRESS OF COMPUTATION (WITHOUT DISPERSION RELATIONS)REDM-044
C               2) FORM FACTOR CONTROL NUMBER WITH RESPECT TO DISPERSIONREDM-045
C               3) 0 OR ADDRESS OF THE FIRST SPIN-ORBIT FORM FACTOR     REDM-046
C               4) ANGULAR MOMENTUM                                     REDM-047
C IN COMMON /POTE1/ RELATED TO COMPUTATION OF POTENTIALS AND TABLE IVY  REDM-048
C                  ITX(16):STARTING ADDRESS OF DIFFERENT FORM FACTORS.  REDM-049
C                      FOR SCHROED. EQUATION, ITX(I)+1 IS THE STARTING  REDM-050
C                      ADDRESS OF THE POTENTIAL READ IN EXTP WITH ITYP=IREDM-051
C                      FOR DIRAC EQUATIONS, ITX(1)=0                    REDM-052
C                      ITX(2)+1=ADDRESS OFF FIRST TRANSITION FORM FACTORREDM-053
C                      ITX(7)=ADDRESS OF LAST TRANSITION FORM FACTOR    REDM-054
C                      ITX(3)=ADDRESS OF LAST TEMPORARY CENTRAL POTEN.  REDM-055
C                      ITX(4)=ITX(7)-24,ITX(5)=ITX(3)-11,ITX(6)=ITX(2)-4REDM-056
C       ALL ARE USED FOR SCHROEDINGER, THE FIRST 8 FOR DIRAC            REDM-057
C                  IMAX:   MAXIMUM ANGULAR MOMENTUM                     REDM-058
C                  INTC:   NUMBER OF FORM FACTORS WITHOUT DEFORMED      REDM-059
C                             SPIN-ORBIT INCLUDING CORRECTION TERMS     REDM-060
C                  INLS:   NUMBER OF SPIN-ORBIT FORM FACTORS NOT TAKING REDM-061
C                             INTO ACCOUNT MULTIPLICATION BY 2.         REDM-062
C                  INVC:   NUMBER OF COULOMB TRANSITION FORM FACTORS    REDM-063
C                  INVD:   IDEM FOR COULOMB SPIN-ORBIT                  REDM-064
C                  ITXM:   TOTAL NUMBER OF FORM FACTORS                 REDM-065
C IN COMMON /POTE2/ RELATED TO USE OF POTENTIALS AND TABLE IVZ          REDM-066
C                  ITY(8):STARTING ADDRESS OF REAL AND IMAGINARY,       REDM-067
C                      CENTRAL AND SPIN-ORBIT, POTENTIAL AND TRANSITION REDM-068
C                      FORM FACTORS FOR SCHROEDINGER EQUATIONS.         REDM-069
C       ALL ARE USED FOR SCHROEDINGER, ITY(2) AND ITY(5) ONLY FOR DIRAC REDM-070
C                  INVT:   NUMBER OF FORM FACTORS WITHOUT DEFORMED      REDM-071
C                             SPIN-ORBIT AND CORRECTION TERMS           REDM-072
C                  INTV:   SAME AS INVT, TAKING INTO ACCOUNT DISPERSION REDM-073
C                  INSL:   SAME AS INLS, WITHOUT CORRECTION TERMS       REDM-074
C                  NPX:    SAME AS NPP, TAKING INTO ACCOUNT DISPERSION  REDM-075
C IF LO(15)=.TRUE. THE REDUCED MATRIX ELEMENTS ARE READ AT THE FIRST    REDM-076
C CALL AND THE PARAMETERS "VAR" ARE NOT USED - IN ANY CASE WHERE "VAR"  REDM-077
C ARE NOT USED,THE SUBROUTINE IS SKIPPED.                               REDM-078
C IF LO(61)=.TRUE. THE MATRIX ELEMENTS ARE PUNCHED AT THE LAST CALL     REDM-079
C OF A SEARCH IN THIS SUBROUTINE.                                       REDM-080
C***********************************************************************REDM-081
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER IMAx, INLs, INSl, INTc, INTv, INVc, INVd, INVt, ITX(16),
     &        ITXm, ITY(8), MR, MS, MW, NPX
      COMMON /INOUT / MR, MW, MS
      COMMON /POTE1 / ITX, IMAx, INTc, INLs, INVc, INVd, ITXm
      COMMON /POTE2 / ITY, INVt, INTv, INSl, NPX
C
C Dummy arguments
C
      INTEGER Idt, Im, Iqmax, It, Nbt1, Ncoll, Nfa, Npp, Nspin, Nva
      REAL*8 Beta(9,Nbt1), Fac(Nfa), T(3,1), Var(Nva)
      INTEGER Iph(2,Ncoll), Ipi(11,*), Iq(6,1), Nbeta(18,Nbt1),
     &        Niv(Ncoll,Ncoll,2), Nvar(2,1)
      LOGICAL Lo(250)
C
C Local variables
C
      INTEGER i, i1, i2, ii, ij, ijl, ijs, il, ipq, iqp, iqy, iqz, is,
     &        itm, itn, itp, j, j1, j2, jil, jis, k, k1, k2, kk, l, m,
     &        n, nj, nm, nn, nps, ns, ntc, nv
      INTEGER IABS, MAX0
      LOGICAL lt
C
C
      IF (.NOT.(Lo(220))) THEN
         IF (Lo(7) .OR. Lo(15)) THEN
C INPUT OF NUCLEAR MATRIX ELEMENTS FROM CARDS                           REDM-106
            IF (Lo(217)) GOTO 100
            It = 0
            i = 0
            nps = 1
            IF ((Lo(201) .AND. Lo(203)) .OR. Lo(113)) nps = 0
            DO i1 = 1, Ncoll
               DO i2 = i1, Ncoll
                  Niv(i1,i2,1) = It + 1
                  READ (MR,99125) j1, j2, k
                  WRITE (MW,99005) j1, j2, k
99005             FORMAT (' FOR I =',I4,'  AND IP =',I4,I8,
     &                    ' REDUCED MATRIX ELEMENTS')
                  IF ((j1.NE.i1) .OR. (j2.NE.i2)) GOTO 200
                  IF (k.NE.0) THEN
                     ijl = IABS(Ipi(3,i1) - Ipi(3,i2))
                     jil = (Ipi(3,i1) + Ipi(3,i2))
                     ijs = IABS(Ipi(2,i1) - Ipi(2,i2))
                     jis = Ipi(2,i1) + Ipi(2,i2)
                     IF (2*(It + k).GT.Idt)
     &                   CALL MEMO('REDM',Idt,2*(It + k),2)
                     DO k1 = 1, k
                        It = It + 1
                        READ (MR,99010) j, Iq(2,It), nn, m, T(3,It)
99010                   FORMAT (4I5,F20.12)
                        IF (nn.EQ. - 1 .AND. Lo(111)) GOTO 300
                        n = nn
                        IF (nn.EQ. - 1) n = 0
                        IF (MOD(Iq(2,It) + Ipi(1,i1) + Ipi(1,i2),2)
     &                      .NE.0) GOTO 400
                        IF ((n.GT.jis) .OR. (n.LT.ijs) .OR.
     &                      (MOD(jis+n,2).NE.0)) GOTO 500
                        IF (Lo(7)) THEN
                           IF (j.NE.0) THEN
                              IF (IABS(j) - i.LT.1) THEN
                                 IF (It.EQ.1) GOTO 2
                                 DO ii = 2, It
                                    IF (j.EQ.Iq(1,ii - 1)) GOTO 2
                                 ENDDO
                                 GOTO 1100
                              ELSEIF (IABS(j) - i.NE.1) THEN
                                 GOTO 1000
                              ENDIF
                           ENDIF
                           i = i + 1
                           IF (j.EQ.0) j = i
                        ELSEIF (Lo(1)) THEN
                           iqp = j/1000
                           IF (Lo(3)) THEN
                              iqy = Iq(2,It)/2 + 1
                              iqz = (iqy*(iqy - 1))/2
                              IF (iqp.LE.iqz .OR. iqp.GT.iqz + iqy)
     &                            GOTO 900
                           ELSEIF (iqp.NE.1 + Iq(2,It)) THEN
                              GOTO 800
                           ENDIF
                        ELSEIF (Lo(3)) THEN
                           IF (j.LT.0 .OR. j.GT.3) GOTO 700
                        ELSE
                           iqp = j/(Nbt1 + 1)
                           ipq = MOD(j,Nbt1 + 1)
                           IF ((ipq.LE.0) .OR. (MAX0(ipq,iqp).GT.Nbt1)
     &                         .OR. (iqp.LT.0)) GOTO 600
                        ENDIF
    2                   Iq(1,It) = j
                        IF (n.EQ.0) THEN
                           IF ((m.LT.0) .OR. (m.GT.nps)) GOTO 1300
                           Iq(3,It) = 10*m
                           nm = 2*Iq(2,It)
                        ELSE
                           IF (2*Iq(2,It).LT.IABS(n - m) .OR. 2*Iq(2,It)
     &                         .GT.n + m .OR. MOD(n + m,2).NE.0)
     &                         GOTO 1200
                           nm = m
                           Iq(3,It) = 10*m + 10000*n
                        ENDIF
                        IF (nm.LT.ijl .OR. nm.GT.jil) GOTO 1400
                        IF (nn.EQ. - 1) Iq(3,It) = Iq(3,It) + 1
                        WRITE (MW,99015) Iq(1,It), Iq(2,It), nn, m,
     &                         T(3,It)
99015                   FORMAT (10X,'FORM FACTOR =',I4,' L =',I4,4X,
     &                          '2*S =',I4,4X,'2*J =',I4,4X,
     &                          ' REDUCED MATRIX ELEMENT',D20.6)
                     ENDDO
                  ENDIF
                  Niv(i1,i2,2) = It
               ENDDO
            ENDDO
C STANDARD COMPUTATION OF THE REDUCED MATRIX ELEMENTS IN T(3,I)         REDM-091
C WITH FORM FACTOR IDENTIFICATION IN IQ(1,I), MULTIPOLE IN IQ(2,I)      REDM-092
C AND 0 OR 1 IN IQ(3,I) IF SPIN-ORBIT IS NOT OR IS DEFORMED.            REDM-093
C THEY ARE CALLED AT THE FIRST RUN OR IF "VAR" HAS BEEN CHANGED         REDM-094
         ELSEIF (Lo(1)) THEN
            IF (Lo(3)) THEN
               CALL ROAM(Niv,Iq,T,Ipi,Ncoll,It,Beta,Iph,Var,Var(Nva + 1)
     &                   ,Iqmax,Fac,Nfa,Idt,Lo)
            ELSE
               CALL ROTM(Niv,Iq,T,Ipi,Ncoll,Iph,Nbeta,Nvar,Var,Nva,It,
     &                   Iqmax,Nspin,Fac,Nfa,Idt,Lo)
            ENDIF
         ELSE
            CALL VIBM(Niv,Iq,T,Ipi,Ncoll,It,Iph,Nvar,Var,Nva,Nbeta,Nbt1,
     &                Fac,Nfa,Idt,Lo)
         ENDIF
         k = Niv(Ncoll,Ncoll,2)
         DO i1 = 1, Ncoll
            DO i2 = i1, Ncoll
               Niv(i2,i1,1) = Niv(i1,i2,1)
               Niv(i2,i1,2) = Niv(i1,i2,2)
            ENDDO
         ENDDO
C CHECK THAT THERE IS ENOUGH PLACE                                      REDM-180
         IF (7*It.GT.Idt) CALL MEMO('REDM',Idt,7*It,2)
         Im = 0
         INVt = 0
         INTv = 0
         INLs = 0
         INSl = 0
         INVc = 0
         INVd = 0
         INTc = 0
         IMAx = 0
C TABLE OF MULTIPOLES                                                   REDM-191
         IF (It.NE.0) THEN
            itn = 6*It
            DO j = 1, It
               is = Iq(3,j)/10000
               ij = MOD(Iq(3,j),1000)/10
               il = MOD(Iq(3,j),10)
               IF (is.EQ.0) ij = 2*Iq(2,j)
               IF (ij.EQ.0) is = 2*Iq(2,j)
               IF (il.EQ.1) is = -2
               IF (is.NE.0) Iq(3,j) = 0
               IF (Im.NE.0) THEN
                  DO k = 1, Im, 3
                     IF ((Iq(itn+k,1).EQ.Iq(2,j)) .AND.
     &                   (Iq(itn+k+1,1).EQ.is) .AND.
     &                   (Iq(itn+k+2,1).EQ.ij)) GOTO 10
                  ENDDO
               ENDIF
               Iq(itn + Im + 1,1) = Iq(2,j)
               Iq(itn + Im + 2,1) = is
               Iq(itn + Im + 3,1) = ij
               IMAx = MAX0(IMAx,Iq(2,j))
               Im = Im + 3
               Iq(2,j) = Im/3
               GOTO 20
   10          Iq(2,j) = 1 + k/3
   20       ENDDO
            itm = itn + Im + MOD(Im,2)
C TABLE OF FORM FACTORS                                                 REDM-217
C LT IS TRUE IF THE MULTIPOLE ORDER MATTERS FOR FORM FACTORS            REDM-218
            lt = (Lo(1) .OR. Lo(11) .OR. Lo(17) .OR. Lo(19)) .AND.
     &           Lo(107)
            DO j = 1, It
               IF (INVt.NE.0) THEN
                  DO l = 1, INVt, 7
                     IF (Iq(itm + l,1).EQ.Iq(1,j)) THEN
                        IF (.NOT.(lt .AND. (Iq(itm+l+1,1).NE.Iq(2,j))))
     &                      THEN
                           Iq(1,j) = 1 + l/7
                           Iq(itm + l + 2,1)
     &                        = MAX0(Iq(3,j),Iq(itm + l + 2,1))
                           GOTO 40
                        ENDIF
                     ENDIF
                  ENDDO
               ENDIF
               k = Iq(2,j)
               k1 = Iq(itn + 3*k - 2,1)
               Iq(itm + INVt + 1,1) = Iq(1,j)
               Iq(itm + INVt + 2,1) = k
               Iq(itm + INVt + 3,1) = Iq(3,j)
               Iq(itm + INVt + 4,1) = 0
               Iq(itm + INVt + 5,1) = 0
               Iq(itm + INVt + 6,1) = 0
               Iq(itm + INVt + 7,1) = k1
               IF ((Iq(1,j).LT.0) .OR.
     &             ((Iq(1,j).GT.1000) .AND. (k1.LE.1) .AND.
     &             (MOD(Iq(1,j),1000).NE.0))) Iq(itm + INVt + 6,1) = 1
               IF (Lo(11) .AND. (MOD(Iq(itn+3*k-1,1),2).EQ.0))
     &             Iq(itm + INVt + 4,1) = 1
               IF (Lo(19)) Iq(itm + INVt + 5,1) = Iq(itm + INVt + 3,1)
               INVt = INVt + 7
               Iq(1,j) = INVt/7
   40       ENDDO
C SEARCH ON CORRECTION TERMS                                            REDM-245
            INTc = INVt
            DO j = 1, INVt, 7
               IF (Iq(itm + j + 5,1).NE.0) THEN
                  k1 = itm + j - 1
                  DO l = 1, 7
                     Iq(itm + INTc + l,1) = Iq(k1 + l,1)
                  ENDDO
                  Iq(itm + INTc + 6,1) = -(1 + j/7)
                  INTc = INTc + 7
                  Iq(k1 + 6,1) = INTc/7
               ENDIF
            ENDDO
            DO j = 1, INTc, 7
               IF (Iq(itm + j + 3,1).NE.0) THEN
                  INVc = INVc + 1
                  Iq(itm + j + 3,1) = INVc
               ENDIF
               IF ((Iq(itm+j+2,1).NE.0) .OR. (Iq(itm+j+4,1).NE.0)) THEN
                  INLs = INLs + 1
                  Iq(itm + j + 2,1) = INLs
                  IF (Iq(itm + j + 4,1).NE.0) THEN
                     INVd = INVd + 1
                     Iq(itm + j + 4,1) = INVd
                  ENDIF
               ENDIF
            ENDDO
            itp = itm + INTc + MOD(INTc,2)
            ntc = INVt/7
            DO j = 1, ntc
               Iq(itp + 4*j - 3,1) = j
               Iq(itp + 4*j - 2,1) = 0
               Iq(itp + 4*j - 1,1) = Iq(itm + 7*j - 4,1)
               Iq(itp + 4*j,1) = Iq(itm + 7*j,1)
            ENDDO
            INTv = 4*ntc
            IF (.NOT.(Lo(120))) THEN
               DO i1 = 1, Ncoll
                  DO i2 = i1, Ncoll
                     k1 = Niv(i1,i2,1)
                     k2 = Niv(i1,i2,2)
                     IF (k1.LE.k2) THEN
                        kk = i1*(Ncoll + 1) + i2
                        DO k = k1, k2
                           j = Iq(1,k)
                           IF (Iq(itp + 4*j - 2,1).NE.0) THEN
                              DO l = 1, 4
                                 Iq(itp + INTv + l,1)
     &                              = Iq(itp + 4*j + l - 4,1)
                              ENDDO
                              Iq(itp + INTv + 2,1) = kk
                              INTv = INTv + 4
                              Iq(1,k) = INTv/4
                           ELSE
                              Iq(itp + 4*j - 2,1) = kk
                           ENDIF
                        ENDDO
                     ENDIF
                  ENDDO
               ENDDO
            ENDIF
            Im = Im/3
            INTv = INTv/4
            INVt = INVt/7
            INTc = INTc/7
            INSl = 0
            DO j = 1, INTv
               l = Iq(itp + 4*j - 1,1)
               INSl = MAX0(INSl,l)
               DO k = 1, It
                  IF (Iq(1,k).EQ.j) Iq(3,k) = l
               ENDDO
            ENDDO
         ENDIF
C NUMBER OF REAL AND IMAGINARY FORM FACTORS                             REDM-308
         nv = INTc
         IF (Lo(13) .OR. Lo(19)) nv = nv + 2*INLs
         ITY(1) = 0
         Lo(221) = Im.EQ.0
         IF (Lo(100)) THEN
            ITY(5) = 0
            ITX(1) = 0
            ITX(2) = 14*Ncoll
            ITY(2) = ITX(2)
            ITX(7) = ITX(2) + 4*(INTv + INSl)
            ITX(3) = ITX(7) + 24*Npp
            ITX(4) = ITX(7) - 24
            ITX(5) = ITX(3) - 11
            ITX(6) = ITX(2) - 4
            ITXm = ITX(3) + 11*INTc
         ELSE
            ITY(3) = NPX
            ITY(5) = ITY(3) + NPX
            IF (Lo(201) .AND. Lo(203)) ITY(5) = ITY(3)
            ITY(7) = ITY(5) + INTv
            ITY(2) = ITY(7) + 2*INSl
            ITY(4) = ITY(2) + NPX
            ITY(6) = ITY(4) + NPX
            IF (Lo(201) .AND. Lo(203)) ITY(6) = ITY(4)
            ITY(8) = ITY(6) + INTv
            IF (Lo(112)) ITY(8) = ITY(6)
            ITX(1) = ITY(8) + 2*INSl
            IF (Lo(114)) ITX(1) = ITY(8)
            IF (Lo(112)) ITX(1) = ITY(6)
            ITX(5) = ITX(1) + Npp
            ITX(9) = ITX(5) + Npp
            IF (Lo(201) .AND. Lo(203)) ITX(9) = ITX(5)
            ITX(13) = ITX(9) + INTc
            ITX(2) = ITX(13) + 2*INLs
            ITX(6) = ITX(2) + Npp
            ITX(10) = ITX(6) + Npp
            IF (Lo(201) .AND. Lo(203)) ITX(10) = ITX(6)
            ITX(14) = ITX(10) + INTc
            ITX(7) = ITX(14) + 2*INLs
            IF (Lo(114)) ITX(7) = ITX(14)
            IF (Lo(112)) ITX(7) = ITX(10)
            ITX(8) = ITX(7) + Npp
            ITX(3) = ITX(8) + Npp
            ITX(4) = ITX(3) + Npp
            ITX(11) = ITX(4) + Npp
            ITX(12) = ITX(11) + INTc
            ITX(15) = ITX(12) + INTc
            IF (Lo(112)) ITX(15) = ITX(12)
            ITX(16) = ITX(15) + INVc
            ITXm = ITX(16) + 2*INVd + INTc
         ENDIF
      ENDIF
  100 IF (Lo(152) .AND. Lo(161)) RETURN
C REDUCED MATRIX ELEMENTS PUNCHED ON CARDS ON REQUEST                   REDM-360
C OUTPUT OF REDUCED MATRIX ELEMENTS ON REQUEST                          REDM-361
      It = Niv(Ncoll,Ncoll,2)
      itm = 6*It - 3
      itn = itm + 3*Im - 4 + MOD(Im,2)
      IF (Lo(52)) WRITE (MW,99020)
99020 FORMAT (//' NUCLEAR REDUCED MATRIX ELEMENTS'/)
      DO i1 = 1, Ncoll
         DO i2 = i1, Ncoll
            k1 = Niv(i1,i2,1)
            k2 = Niv(i1,i2,2)
            IF (Lo(52)) WRITE (MW,99025) i1, i2, k1, k2
99025       FORMAT (/' STATE',I3,'  WITH STATE',I3,10X,' FROM',I4,' TO',
     &              I4/)
            k = k2 - k1 + 1
            IF (Lo(61)) WRITE (61,99125) i1, i2, k
            IF (k.NE.0) THEN
               DO k = k1, k2
                  IF (Lo(52)) WRITE (MW,99030) k, (Iq(j,k),j = 1,3),
     &                               T(3,k)
99030             FORMAT (10X,'N =',I3,3X,'FORM FACTOR =',I3,3X,
     &                    'MULT. =',I3,3X,'SP.-O. =',I3,6X,
     &                    'MATRIX ELEMENT',D15.6)
                  IF (.NOT.(Lo(161))) THEN
                     n = Iq(1,k)
                     m = Iq(2,k)
                     nm = Iq(itn + 7*n + 1,1)
                     ns = Iq(itm + 3*m + 2,1)
                     nj = Iq(itm + 3*m + 3,1)
                     IF (ns.LE.0) nj = 0
                     IF (ns.EQ. - 2) ns = -1
                     IF (nj.EQ.0 .AND. Iq(3,k).NE.0) nj = 1
                     WRITE (61,99035) nm, Iq(itm + 3*m + 1,1), ns, nj,
     &                                T(3,k)
99035                FORMAT (4I5,F20.12)
                  ENDIF
               ENDDO
            ENDIF
         ENDDO
      ENDDO
      IF (It.EQ.0 .OR. Lo(152)) RETURN
      WRITE (MW,99040) (i,(Iq(itm+3*i+j,1),j = 1,3),i = 1,Im)
99040 FORMAT (//5X,' CORRESPONDENCE TO MULTIPOLES'//
     &        (20X,'N =',I3,5X,'L =',I3,5X,'2*S =',I3,5X,'2*J =',I3))
      WRITE (MW,99045) (i,(Iq(itn+7*i+j,1),j = 1,7),i = 1,INTc)
99045 FORMAT (//4X,
     &        ' CORRESPONDENCE TO FORM FACTORS IN THEIR COMPUTATION'//
     &        (10X,'N =',I3,4X,'F.F. =',I6,4X,'MULT. =',I4,4X,
     &        'SP.-O. =',I4,4X,'COUL =',I4,4X,'SPDO =',I4,4X,'COR =',I4,
     &        4X,'L =',I4))
      itp = itn + 7*INTc + 3 + MOD(INTc,2)
      WRITE (MW,99050) (i,(Iq(itp+4*i+j,1),j = 1,4),i = 1,INTv)
99050 FORMAT (//4X,' CORRESPONDENCE TO FORM FACTORS IN THEIR USE'//
     &        (10X,'N =',I3,4X,'ABOVE =',I4,4X,'DISP. =',I4,4X,
     &        'SP.-O. =',I4,4X,'L =',I4))
      RETURN
  200 WRITE (MW,99055) j1, j2, i1, i2
99055 FORMAT (//
     &        ' INCORRECT ORDER OF INPUT FOR REDUCED MATRIX ELEMENTS :',
     &        2I6,' INSTEAD OF',2I6)
      GOTO 1500
  300 WRITE (MW,99060) nn
99060 FORMAT (//
     &' A MAGNETIC COULOMB INTERACTION CANNOT BE USED IF THE COULOMB INT
     &ERACTION IS NOT DEFORMED:',I3)
      GOTO 1500
  400 WRITE (MW,99065) Iq(2,It), Ipi(1,i1), Ipi(1,i2)
99065 FORMAT (/' MULTIPOLE ORDER',I4,' NOT OF THE SAME PARITY AS',2I4)
      GOTO 1500
  500 WRITE (MW,99070)
99070 FORMAT (' ERROR FOR HARMONIC VIBRATIONAL MODEL')
      GOTO 1500
  600 WRITE (MW,99075)
99075 FORMAT (' ERROR FOR ANHARMONIC VIBRATIONAL MODEL')
      GOTO 1500
  700 WRITE (MW,99080)
99080 FORMAT (' ERROR FOR SYMMETRIC ROTATIONAL MODEL')
      GOTO 1500
  800 WRITE (MW,99085)
99085 FORMAT (' ERROR FOR ASYMMETRIC ROTATIONAL MODEL')
      GOTO 1500
  900 WRITE (MW,99090) n, ijs, jis
99090 FORMAT (/' 2*S =',I4,' INCORRECT BETWEEN CHANNELS WITH 2*S =',2I4)
      GOTO 1500
 1000 WRITE (MW,99095) i, j
99095 FORMAT (/' LAST FORM FACTOR IDENTIFICATION',I3,
     &        '  NEW FORM FACTOR IDENTIFICATION',I3,'  TOO LARGE')
      GOTO 1500
 1100 WRITE (MW,99100) j
99100 FORMAT (/' LAST FORM FACTOR IDENTIFICATION',I3,
     &        '  WAS NOT ALREADY READ WITH THIS SIGN')
      GOTO 1500
 1200 WRITE (MW,99105) m, Iq(2,It), n
99105 FORMAT (/' 2*J =',I4,' INCORRECT WITH L =',I4,' AND 2*S =',I4)
      GOTO 1500
 1300 WRITE (MW,99110) m, nps
99110 FORMAT (/' J-VALUE =',I4,
     &        '  USED AS DEFORMED SPIN-ORBIT CONTROL INCORRECT. LIMIT:',
     &        I2)
      GOTO 1500
 1400 WRITE (MW,99115) nm, ijl, jil
99115 FORMAT (/' 2*TRANSFER OF ANG. MOMENTUM',I4,' NOT BETWEEN',I4,
     &        ' AND',I4)
 1500 WRITE (MW,99120)
99120 FORMAT (//' IN REDM  ... STOP ...')
      STOP
99125 FORMAT (3I5)
      END
C 01/01/04                                                      ECIS03  VICM-000
      SUBROUTINE VIBM(Niv,Iq,T,Ipi,Ncoll,It,Iph,Nvar,Var,Nva,Nbta,Nbt1,
     &                Fac,Nfa,Idt,Lo)
C NUCLEAR REDUCED MATRIX ELEMENTS FOR THE HARMONIC VIBRATIONAL MODEL    VICM-003
C THE CONTROL NUMBER FOR FORM FACTOR IS I FOR BETA(I) AND I+J*(NBT1+1)  VICM-004
C FOR BETA(I)*BETA(J) WITH J LARGER THAN I IN THE HARMONIC VIBRATIONAL  VICM-005
C MODEL (ORDER OF DERIVATIVE IN THE ANHARMONIC VIBRATIONAL MODEL)       VICM-006
C FOR ARGUMENTS NIV TO IT AND FAC TO LO    SEE REDM                     VICM-007
C INPUT VARIABLES: IPH(I): NUMBER OF PHONONS(0,1,2 PHONONS OR 3 FOR     VICM-008
C             MIXTURE OF 1 AND 2 PHONONS STATES)                        VICM-009
C                  IPH(NCOLL+I) FOR I=1,NCOLL: ADDRESS OF THE DESCRIP-  VICM-010
C             TION OF TWO PHONONS AND MIXED STATES WHICH ARE IN THE SAMEVICM-011
C             TABLE IPH FOR I LARGER THAN 2*NCOLL.                      VICM-012
C                  NVAR,VAR:  1 AND 2 PHONONS MIXING COEFFICIENTS       VICM-013
C                  NVA:  NUMBER OF 1 AND 2 PHONONS MIXING COEFFICIENTS  VICM-014
C                  RBTA(I,J)   ANGULAR MOMENTUM OF PHONONS FOR I=9      VICM-015
C                        0 FOR I=10 TO BE USED IN SECOND ORDER MONOPOLE VICM-016
C                        CORRECTION, ANYTHING NOT TO BE USED            VICM-017
C                  NBT1: NUMBER OF PHONONS                              VICM-018
C                                                                       VICM-019
C  THE DEFORMATIONS BETA AND FACTORS 1/SQRT(4*PI) ARE NOT INCLUDED IN   VICM-020
C THE MATRIX ELEMENTS WHICH ARE COMPUTED HERE. THE FULL EXPRESSIONS ARE:VICM-021
C (0||Q2||0) = SUM ON BETA**2/(4*PI) WITH IQ=0                          VICM-022
C (0||Q1||I) = (-)**I BETA(I)/SQRT(4*PI) WITH IQ=I                      VICM-023
C (I||Q1||0) SAME VALUE WITHOUT (-)**I                                  VICM-024
C (IP||Q2||I) = (-)**I BETA(I)*BETA(IP)*DJCG(I,IP,0,0|IQ,0)/(2*PI)      VICM-025
C    PLUS SUM ON BETA**2*SQRT(2*I+1)/(4*PI) WITH IQ=0 WHEN I=IP         VICM-026
C (0||Q2||L1,L2,I) = (-)**I BETA(L1)*BETA(L2) DJCG(L1,L2,0,0|I,0)/      VICM-027
C    (2*PI*SQRT(1+DELTA(L1,L2)))   WITH IQ=I                            VICM-028
C (L1,L2,I||Q2||0) SAME VALUE WITHOUT (-)**I                            VICM-029
C (IP||Q1||L1,L2,I) = (-)**IQ BETA(*)*(DELTA(IQ,L1)*DELTA(IP,L2)+(-)**  VICM-030
C    (IP+I+IQ)*DELTA(IQ,L2)*DELTA(IP,L1)) * SQRT((2*I+1)/((2*IQ+1)*     VICM-031
C    (1+DELTA(L1,L2))*SQRT(4*PI))                                       VICM-032
C (L1,L2,I||Q1||IP) SAME EXPRESSION BUT WITH (-)**IP+I+IQ  IN FRONT     VICM-033
C (L3,L4,IP||Q2||L1,L2,I)  SUM ON BETA**2*(DELTA(L1,L3)*DELTA(L2,L4)+   VICM-034
C    (-)**(L1+L2-I)*DELTA(L1,L4)*DELTA(L2,L3)) * SQRT(2*IP+1)/(4*PI*SQRTVICM-035
C    ((1+DELTA(L1,L2))*(1+DELTA(L3,L4))) WITH IQ=0,WHEN I=IP            VICM-036
C    PLUS,WHEN TWO PHONONS ARE IDENTICAL,SUM WITH ALL THE POSSIBLE VA-  VICM-037
C    LUES FOR IQ OF BETA(L5)*BETA(L6)*DJCG(L5,L6,0,0|IQ,0)*DJ6J(L6,IP,  VICM-038
C    L7,I,L5,IQ) * SQRT((2*I+1)*(2*IP+1))/(2*PI*SQRT((1+DELTA(L1,L2)*(1+VICM-039
C    DELTA(L3,L4))   WHERE  L7 IS THE COMMON PHONON ,L5 AND L6 THE OTHERVICM-040
C    PHONONS IN I AND IP, MULTIPLIED BY THE PHASE                       VICM-041
C      *(-)**(IP-L1) IF L1=L3,        *(-)**(L3) IF L1=L4,              VICM-042
C      *(-)**(IP+L1-I) IF L2=L3,      *(-)**(L1+L3+L4-I) IF L2=L4.      VICM-043
C (J||L=IQ||I) IS MULTIPLIED BY A PHASE (-)**((IQ+IPI(I)-IPI(J))/2)     VICM-044
C AND THE FACTORS BETA/SQRT(4*PI) ARE SHIFTED ON THE FORM FACTORS       VICM-045
C***********************************************************************VICM-046
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER Idt, It, Nbt1, Ncoll, Nfa, Nva
      REAL*8 Fac(1), T(3,1), Var(Nva)
      INTEGER Iph(2,Ncoll), Ipi(11,*), Iq(6,1), Nbta(18,1),
     &        Niv(Ncoll,Ncoll,2), Nvar(2,7)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 aa(2,2), aq, ax, ay, b(4), fs, t0, t3, tkq, w1
      DOUBLE PRECISION DABS, DCOS, DSIN, DSQRT
      REAL*8 DJ6J, DJCG
      INTEGER i, i1, i2, ia(6,4), imax, imin, it1, itf, iti, ivar, j,
     &        j1, j2, ja1, ja2, jvar, k, k1, k2, k3, l, l1, l2, lb1,
     &        lb2, lb3, lb4, m, n1, n2, nsp
      INTEGER IABS, MAX0, MIN0
      LOGICAL lib(4)
C
C
      It = 1
      nsp = 0
      IF (Lo(13) .OR. Lo(19)) nsp = 10
      DO i1 = 1, Ncoll
         aa(1,1) = 1.D0
         aa(1,2) = 0.D0
         IF (Iph(1,i1).GT.2) THEN
            jvar = Iph(2,i1) + 1
            ivar = Nvar(2,jvar)
            ay = 1.74532925D-02*Var(ivar)
            aa(1,1) = DCOS(ay)
            aa(1,2) = DSIN(ay)
            IF (.NOT.Lo(217)) WRITE (MW,99005) i1, Var(ivar), aa(1,1),
     &                               aa(1,2)
99005       FORMAT (' STATE',I4,F15.5,' DEGREES      AMPLITUDES =',
     &              F15.7,'  1 PHONON AND',F15.7,'  2 PHONONS')
         ENDIF
         aa(2,1) = aa(1,1)
         aa(2,2) = aa(1,2)
         DO i2 = i1, Ncoll
            IF (i1.NE.i2) THEN
               aa(2,1) = 1.D0
               aa(2,2) = 0.D0
               IF (Iph(1,i2).GT.2) THEN
                  ivar = Iph(2,i2) + 1
                  jvar = Nvar(2,ivar)
                  IF (jvar.GT.Nva) GOTO 100
                  ay = 1.74532925D-02*Var(jvar)
                  aa(2,1) = DCOS(ay)
                  aa(2,2) = DSIN(ay)
               ENDIF
            ENDIF
            Niv(i1,i2,1) = It
            l1 = Iph(1,i1)
            ax = aa(1,1)
            IF (l1.GT.2) l1 = 1
            IF (DABS(ax).LT.1.D-6) GOTO 80
   20       l2 = Iph(1,i2)
            IF (l2.GT.2) l2 = 1
            ay = ax*aa(2,1)
            IF (DABS(ay).LT.1.D-6) GOTO 60
   40       i = l1 + l2 + 1
            IF (i.EQ.3 .AND. l1.NE.l2) i = 6
            IF (l1.GT.l2) THEN
               j1 = i2
               j2 = i1
C  TRANSPOSITION                                                        VICM-095
               ay = ay*DFLOAT
     &              (1 - MOD(Ipi(3,i1) + Ipi(3,i2) + 2*(Ipi(1,i1)
     &              +Ipi(1,i2)+1),4))
            ELSE
               j1 = i1
               j2 = i2
            ENDIF
            IF (i.EQ.2) THEN
C  (IP||Q||0)  WITH IP=J2                                               VICM-112
               IF (2*It.GT.Idt) CALL MEMO('VIBM',Idt,2*It,2)
               n2 = Iph(2,j2)
               IF (Iph(1,j2).GT.2) n2 = Nvar(1,n2 + 1)
               IF ((Ipi(3,j2).NE.(2*Nbta(17,n2)+1)) .OR.
     &             (Ipi(3,j1).NE.1)) GOTO 200
               Iq(1,It) = n2
               Iq(2,It) = Nbta(17,n2)
               Iq(3,It) = nsp
               T(3,It) = ay
               IF (MOD(IABS(Iq(2,It)+Ipi(1,j1)-Ipi(1,j2)),4).NE.0)
     &             T(3,It) = -T(3,It)
               It = It + 1
            ELSEIF (i.EQ.3) THEN
C  (IP||Q||I)                                                           VICM-124
               IF (.NOT.(Lo(102))) THEN
                  n1 = Iph(2,j1)
                  IF (Iph(1,j1).GT.2) n1 = Nvar(1,n1 + 1)
                  n2 = Iph(2,j2)
                  IF (Iph(1,j2).GT.2) n2 = Nvar(1,n2 + 1)
                  IF ((Ipi(3,j2).NE.(2*Nbta(17,n2)+1)) .OR.
     &                (Ipi(3,j1).NE.(2*Nbta(17,n1)+1))) GOTO 200
                  IF (n1.EQ.n2) THEN
                     aq = DSQRT(DFLOAT(2*Nbta(17,n1) + 1))
                     DO l = 1, Nbt1
                        IF (Nbta(18,l).EQ.0) THEN
                           IF (2*It.GT.Idt) CALL MEMO('VIBM',Idt,2*It,2)
                           Iq(1,It) = l*(Nbt1 + 2)
                           Iq(2,It) = 0
                           Iq(3,It) = nsp
                           T(3,It) = aq*ay
                           It = It + 1
                        ENDIF
                     ENDDO
                  ENDIF
C FACTOR 2 FOR NON IDENTICAL PHONONS ADDED ON THE 10/03/81              VICM-143
                  k1 = IABS(Nbta(17,n2) - Nbta(17,n1)) + 1
                  k2 = Nbta(17,n2) + Nbta(17,n1) + 1
                  fs = DFLOAT
     &                 (2*(1 - 2*MOD(Nbta(17,n1)+IABS(Ipi(1,j1)-Ipi(1,
     &                 j2)+k1-1)/2,2)))
                  DO k = k1, k2, 2
                     IF (2*It.GT.Idt) CALL MEMO('VIBM',Idt,2*It,2)
                     j = k - 1
                     aq = fs*DJCG(Ipi(3,j1) - 1,Ipi(3,j2) - 1,2*j,0,0,
     &                    Fac,Nfa)
                     Iq(1,It) = MAX0(n1,n2)*(Nbt1 + 1) + MIN0(n1,n2)
                     Iq(2,It) = j
                     Iq(3,It) = nsp
                     T(3,It) = aq*ay
                     fs = -fs
                     It = It + 1
                  ENDDO
               ENDIF
            ELSEIF (i.EQ.4) THEN
C  (L1,L2,IP||Q||I) WITH I=J1 AND IP=J2                                 VICM-159
               i = Iph(2,j2)
               lb1 = Nvar(1,i)
               lb2 = Nvar(2,i)
               n1 = Iph(2,j1)
               IF (Iph(1,j1).GT.2) n1 = Nvar(1,n1 + 1)
               IF (Ipi(3,j1).NE.(2*Nbta(17,n1) + 1)) GOTO 200
               lib(1) = lb1.EQ.n1
               lib(2) = lb2.EQ.n1
               IF (2*It.GT.Idt) CALL MEMO('VIBM',Idt,2*It,2)
               IF (lib(1) .AND. lib(2)) THEN
                  IF (MOD(Ipi(3,j2),4).EQ.1) THEN
                     Iq(1,It) = n1
                     Iq(2,It) = Nbta(17,n1)
                     Iq(3,It) = nsp
                     T(3,It) = DSQRT(2.D0)
     &                         *ay*DFLOAT(1 - MOD(IABS(Ipi(1,j1)
     &                         -Ipi(1,j2)+Iq(2,It)),4))
                     T(3,It) = T(3,It)
     &                         *DSQRT(DFLOAT(Ipi(3,j2))/DFLOAT(2*Iq(2,
     &                         It) + 1))
                     It = It + 1
                  ENDIF
               ELSEIF (lib(2)) THEN
                  Iq(1,It) = lb1
                  Iq(2,It) = Nbta(17,lb1)
                  Iq(3,It) = nsp
                  T(3,It) = ay*DFLOAT(1 - MOD(IABS(Ipi(3,j1)+Ipi(3,j2)-2
     &                      +Ipi(1,j1)-Ipi(1,j2)-Iq(2,It)),4))
                  T(3,It) = T(3,It)
     &                      *DSQRT(DFLOAT(Ipi(3,j2))/DFLOAT(2*Iq(2,It)
     &                      + 1))
                  It = It + 1
               ELSEIF (lib(1)) THEN
                  Iq(1,It) = lb2
                  Iq(2,It) = Nbta(17,lb2)
                  Iq(3,It) = nsp
                  T(3,It) = ay*DFLOAT(1 - 2*MOD(IABS(Ipi(1,j1)-Ipi(1,j2)
     &                      +Iq(2,It))/2,2))
                  T(3,It) = T(3,It)
     &                      *DSQRT(DFLOAT(Ipi(3,j2))/DFLOAT(2*Iq(2,It)
     &                      + 1))
                  It = It + 1
               ENDIF
            ELSEIF (i.EQ.5) THEN
C  (L3,L4,IP||Q||L1,L2,I)                                               VICM-191
               IF (.NOT.(Lo(102))) THEN
                  i = Iph(2,i1)
                  lb1 = Nvar(1,i)
                  lb2 = Nvar(2,i)
                  i = Iph(2,i2)
                  lb3 = Nvar(1,i)
                  lb4 = Nvar(2,i)
                  lib(1) = lb1.NE.lb3
                  lib(2) = lb2.NE.lb4
                  lib(3) = lb1.NE.lb4
                  lib(4) = lb2.NE.lb3
                  IF (.NOT.(lib(1) .AND. lib(2) .AND. lib(3) .AND.
     &                lib(4))) THEN
                     ja1 = (Ipi(3,j1) - 1)/2
                     ja2 = (Ipi(3,j2) - 1)/2
                     ia(1,1) = Nbta(17,lb2)
                     ia(2,1) = Nbta(17,lb4)
                     ia(1,2) = Nbta(17,lb1)
                     ia(2,2) = Nbta(17,lb3)
                     ia(1,3) = ia(1,1)
                     ia(2,3) = ia(2,2)
                     ia(1,4) = ia(1,2)
                     ia(2,4) = ia(2,1)
                     ia(3,1) = ia(1,2)
                     ia(3,2) = ia(1,1)
                     ia(3,3) = ia(1,2)
                     ia(3,4) = ia(1,1)
                     ia(6,1) = MAX0(lb2,lb4)*(Nbt1 + 1) + MIN0(lb2,lb4)
                     ia(6,2) = MAX0(lb1,lb3)*(Nbt1 + 1) + MIN0(lb1,lb3)
                     ia(6,3) = MAX0(lb2,lb3)*(Nbt1 + 1) + MIN0(lb2,lb3)
                     ia(6,4) = MAX0(lb1,lb4)*(Nbt1 + 1) + MIN0(lb1,lb4)
                     imin = 1000
                     imax = 0
                     DO i = 1, 4
                        IF (.NOT.(lib(i))) THEN
                           ia(4,i) = IABS(ia(1,i) - ia(2,i))
                           ia(5,i) = ia(1,i) + ia(2,i)
                           IF (ia(4,i).LT.imin) imin = ia(4,i)
                           IF (ia(5,i).GT.imax) imax = ia(5,i)
                        ENDIF
                     ENDDO
                     b(1) = DFLOAT(1 - 2*MOD(ja2 + ia(1,2),2))
                     b(2) = DFLOAT(1 - 2*MOD(ia(1,2) + ia(2,2) + ia(2,1)
     &                      + ja1,2))
                     b(3) = DFLOAT(1 - 2*MOD(ia(2,2),2))
                     b(4) = DFLOAT(1 - 2*MOD(ja2 + ja1 + ia(1,2),2))
                     t0 = DSQRT(DFLOAT((2*ja1+1)*(2*ja2+1)))*2.D0
                     IF (lb1.EQ.lb2) t0 = DSQRT(0.5D0)*t0
                     IF (lb3.EQ.lb4) t0 = DSQRT(0.5D0)*t0
                     IF (ja1.EQ.ja2) THEN
                        tkq = 0.D0
                        IF ((lb1.EQ.lb3) .AND. (lb2.EQ.lb4)) tkq = 1.D0
                        IF ((lb1.EQ.lb4) .AND. (lb2.EQ.lb3)) tkq = tkq +
     &                      DFLOAT(1 - 2*MOD(ja1 + ia(1,1) + ia(1,2),2))
                        IF (tkq.NE.0.D0) THEN
                           IF (lb1.EQ.lb2) tkq = 0.5D0*tkq
                           DO l = 1, Nbt1
                              IF (Nbta(18,l).EQ.0) THEN
                                 IF (2*It.GT.Idt)
     &                               CALL MEMO('VIBM',Idt,2*It,2)
                                 Iq(1,It) = l*(Nbt1 + 2)
                                 Iq(2,It) = 0
                                 Iq(3,It) = nsp
                                 T(3,It) = tkq*DSQRT(2.D0*ja1 + 1.D0)*ay
                                 It = It + 1
                              ENDIF
                           ENDDO
                        ENDIF
                     ENDIF
                     imin = MAX0(imin,IABS(ja1 - ja2)) + 1
                     imax = MIN0(imax,ja1 + ja2) + 1
                     DO m = imin, imax
                        j = m - 1
                        DO k = 1, 4
                           IF (.NOT.(lib(k) .OR. (j.LT.ia(4,k)) .OR. (j
     &                         .GT.ia(5,k)) .OR. (MOD(j+ia(5,k),2).NE.0)
     &                         )) THEN
                              IF (2*It.GT.Idt)
     &                            CALL MEMO('VIBM',Idt,2*It,2)
                              t3 = b(k)
     &                             *DJ6J(2*ia(1,k),2*ia(2,k),2*j,2*ja2,
     &                             2*ja1,2*ia(3,k),Fac,Nfa)
     &                             *DJCG(2*ia(1,k),2*ia(2,k),2*j,0,0,
     &                             Fac,Nfa)
     &                             *DFLOAT(1 - MOD(IABS(Ipi(1,j1)
     &                             -Ipi(1,j2)+j),4))
                              IF (DABS(t3).GE.1.D-6) THEN
                                 Iq(1,It) = ia(6,k)
                                 Iq(2,It) = j
                                 Iq(3,It) = nsp
                                 T(3,It) = t3*t0*ay
                                 It = It + 1
                              ENDIF
                           ENDIF
                        ENDDO
                     ENDDO
                  ENDIF
               ENDIF
            ELSEIF (i.EQ.6) THEN
C  (L1,L2,IP||Q||0) WITH IP=J2                                          VICM-274
               IF (.NOT.(Lo(102))) THEN
                  k3 = (Ipi(3,j2) - 1)/2
                  Iq(2,It) = k3
                  i = Iph(2,j2)
                  k1 = Nvar(1,i)
                  k2 = Nvar(2,i)
                  Iq(1,It) = MAX0(k1,k2)*(Nbt1 + 1) + MIN0(k1,k2)
                  Iq(3,It) = nsp
                  w1 = 2.D0
                  IF (k1.EQ.k2) w1 = DSQRT(w1)
                  T(3,It) = ay*DJCG(2*Nbta(17,k1),2*Nbta(17,k2),
     &                      Ipi(3,j2) - 1,0,0,Fac,Nfa)
     &                      *DFLOAT(1 - MOD(IABS(Ipi(1,j1)-Ipi(1,j2)+k3)
     &                      ,4))*w1
                  It = It + 1
               ENDIF
            ELSE
C  (0||Q||0)                                                            VICM-099
               IF ((Ipi(3,j1).NE.1) .OR. (Ipi(3,j2).NE.1)) GOTO 200
               IF (.NOT.(Lo(102))) THEN
                  DO l = 1, Nbt1
                     IF (Nbta(18,l).EQ.0) THEN
                        IF (2*It.GT.Idt) CALL MEMO('VIBM',Idt,2*It,2)
                        Iq(1,It) = l*(Nbt1 + 2)
                        Iq(2,It) = 0
                        Iq(3,It) = nsp
                        T(3,It) = ay
                        It = It + 1
                     ENDIF
                  ENDDO
               ENDIF
            ENDIF
   60       IF ((aa(2,2).NE.0.D0) .AND. (l2.NE.2)) THEN
               l2 = 2
               ay = ax*aa(2,2)
               GOTO 40
            ENDIF
   80       IF ((aa(1,2).EQ.0.) .OR. (l1.EQ.2)) THEN
               iti = Niv(i1,i2,1)
               IF (iti.NE.It) THEN
                  itf = It - 1
                  IF (itf.NE.iti) THEN
                     it1 = iti + 1
                     It = iti
                     DO i = it1, itf
                        DO j = iti, It
                           IF ((Iq(1,i).EQ.Iq(1,j)) .AND.
     &                         (Iq(2,i).EQ.Iq(2,j)) .AND.
     &                         (Iq(3,i).EQ.Iq(3,j))) THEN
                              T(3,j) = T(3,j) + T(3,i)
                              GOTO 82
                           ENDIF
                        ENDDO
                        It = It + 1
                        DO k = 1, 3
                           Iq(k,It) = Iq(k,i)
                        ENDDO
                        T(3,It) = T(3,i)
   82                ENDDO
                     It = It + 1
                  ENDIF
                  itf = It - 1
                  DO i = iti, itf
                     IF (It.LE.i) GOTO 90
   84                IF (DABS(T(3,i)).LE.1.D-12) THEN
                        it1 = i + 1
                        It = It - 1
                        IF (it1.GT.It) GOTO 90
                        DO j = it1, It
                           DO k = 1, 3
                              Iq(k,j - 1) = Iq(k,j)
                           ENDDO
                           T(3,j - 1) = T(3,j)
                        ENDDO
                        GOTO 84
                     ENDIF
                  ENDDO
               ENDIF
   90          Niv(i1,i2,2) = It - 1
            ELSE
               l1 = 2
               ax = aa(1,2)
               GOTO 20
            ENDIF
         ENDDO
      ENDDO
      It = It - 1
      RETURN
  100 WRITE (MW,99010) jvar, Nva
99010 FORMAT (' NUMBER OF VARIABLES USED:',I5,5X,
     &        'EXCEEDS NUMBER OF VARIABLES READ:',I6)
      GOTO 300
  200 WRITE (MW,99015) i1, i2
99015 FORMAT (' INCORRECT DESCRIPTION OF LEVEL',I3,'  OR',I3)
  300 WRITE (MW,99020)
99020 FORMAT (//' IN VIBM  ... STOP ...')
      STOP
      END
C 01/01/04                                                      ECIS03  ROTM-000
      SUBROUTINE ROTM(Niv,Iq,T,Ipi,Ncoll,Iph,Nbta,Nvar,Var,Nva,It,Iqmax,
     &                Nspin,Fac,Nfa,Idt,Lo)
C NUCLEAR REDUCED MATRIX ELEMENTS FOR THE SYMMETRIC ROTATIONAL MODEL    ROTM-003
C THE CONTROL NUMBER FOR THE FORM FACTOR WITH THE VIBRATION N1 AND THE  ROTM-004
C MULTIPOLARITY L IS 1000*(L+1)+N1                                      ROTM-005
C FOR ARGUMENTS NIV TO IT AND FAC TO LO    SEE REDM                     ROTM-006
C SPECIAL INPUT: IQMAX: MAXIMUM MULTIPOLE EXPANSION                     ROTM-007
C                NSPIN: TWICE GROUND STATE BAND VALUE K                 ROTM-008
C                IPI:   DESCRIPTION OF LEVELS                           ROTM-009
C                NBTA:  DESCRIPTION OF VIBRATIONAL BANDS                ROTM-010
C                NVAR,VAR:   MIXTURE COEFFICIENTS OF BANDS              ROTM-011
C                NVA:   NUMBER OF VALUES OF VAR                         ROTM-012
C                                                                       ROTM-013
C    (IP||Q||I)   = SQRT(2*I+1) * CG(I,IQ,IP,K,0,K)                     ROTM-014
C   (IP+V||Q||I)  = SQRT(2*I+1) * CG(I,IQ,IP,K,V,K+V)                   ROTM-015
C  (IP+V||Q||I+V) = SQRT(2*I+1) * CG(I,IQ,IP,K+V,0,K+V)                 ROTM-016
C***********************************************************************ROTM-017
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER Idt, Iqmax, It, Ncoll, Nfa, Nspin, Nva
      REAL*8 Fac(1), T(3,1), Var(Nva)
      INTEGER Iph(2,Ncoll), Ipi(11,Ncoll), Iq(6,1), Nbta(18,1),
     &        Niv(Ncoll,Ncoll,2), Nvar(2,1)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 aa(2,2), ax, ay
      DOUBLE PRECISION DABS, DCOS, DSIN, DSQRT
      REAL*8 DJCG
      INTEGER i, i1, i2, ia1, ia2, iq1, iq2, iqz, it1, itf, iti, ivar,
     &        j, jvar, k, l1, l2, n3, nsj, nsp
      INTEGER IABS, MAX0, MIN0
C
C
      It = 1
      nsp = 0
      IF (Lo(13) .OR. Lo(19)) nsp = 10
      DO i1 = 1, Ncoll
         ia1 = Ipi(3,i1) - 1
         aa(1,1) = 1.D0
         aa(1,2) = 0.D0
         IF (Iph(1,i1).GT.1) THEN
            jvar = Iph(2,i1)
            ivar = Nvar(2,jvar)
            ay = 1.74532925D-02*Var(ivar)
            aa(1,1) = DCOS(ay)
            aa(1,2) = DSIN(ay)
            IF (.NOT.Lo(217)) WRITE (MW,99005) i1, Var(ivar), aa(1,1),
     &                               aa(1,2)
99005       FORMAT (' STATE',I4,F15.5,' DEGREES      AMPLITUDES =',
     &              F15.7,' GROUND STATE BAND AND',F15.5,
     &              ' VIBRATIONAL BAND')
         ENDIF
         aa(2,1) = aa(1,1)
         aa(2,2) = aa(1,2)
         DO i2 = i1, Ncoll
            ia2 = Ipi(3,i2) - 1
            IF (i1.NE.i2) THEN
               aa(2,1) = 1.D0
               aa(2,2) = 0.D0
               IF (Iph(1,i2).GT.1) THEN
                  ivar = Iph(2,i2)
                  jvar = Nvar(2,ivar)
                  IF (jvar.GT.Nva) GOTO 100
                  ay = 1.74532925D-02*Var(jvar)
                  aa(2,1) = DCOS(ay)
                  aa(2,2) = DSIN(ay)
               ENDIF
            ENDIF
            Niv(i1,i2,1) = It
            l1 = Iph(1,i1)
            ax = aa(1,1)
            IF (l1.GT.1) l1 = 0
            IF (DABS(ax).LT.1.D-6) GOTO 80
   20       l2 = Iph(1,i2)
            IF (l2.GT.1) l2 = 0
            ay = ax*aa(2,1)
            IF (DABS(ay).LT.1.D-6) GOTO 60
   40       IF (l1.NE.l2) THEN
               IF (l1.GT.l2) THEN
C  TRANSPOSITION                                                        ROTM-085
                  ay = ay*DFLOAT
     &                 (1 - MOD(Ipi(3,i1) + Ipi(3,i2) + 2*(Ipi(1,i1)
     &                 +Ipi(1,i2)+1),4))
                  n3 = Iph(2,i1)
               ELSE
                  n3 = Iph(2,i2)
               ENDIF
C 0 PHONONS -1 PHONON                                                   ROTM-089
               nsj = 2*Nbta(18,n3)
               IF (MOD(Ipi(1,i1) + Ipi(1,i2) + Nbta(17,n3),2).NE.0)
     &             GOTO 400
               IF (IABS(nsj + Nspin).GT.ia2) GOTO 300
               iq1 = (ia1 + ia2)/2
               iq2 = MAX0(IABS(nsj),IABS(ia1 - ia2))/2
               IF (MOD(iq2 + Nbta(17,n3),2).NE.0) iq2 = iq2 + 1
               IF (iq2.LE.iq1) THEN
                  DO iqz = iq2, iq1, 2
                     IF (3*It.GT.Idt) CALL MEMO('ROTM',Idt,3*It,2)
                     Iq(1,It) = 1000*(iqz + 1) + n3
                     Iq(2,It) = iqz
                     Iq(3,It) = nsp
                     T(3,It) = DFLOAT(1 - MOD(iqz + Ipi(1,i1) + Ipi(1,i2
     &                         ),4))*DSQRT(ia1 + 1.D0)
     &                         *DJCG(ia1,2*iqz,ia2,Nspin,nsj,Fac,Nfa)*ay
                     IF (DABS(T(3,It)).GT.1.D-6) It = It + 1
                  ENDDO
               ENDIF
            ELSE
               nsj = Nspin
               IF (l1.NE.0) THEN
                  n3 = Iph(2,i1)
                  IF (n3.NE.Iph(2,i2)) GOTO 60
                  nsj = 2*Nbta(18,n3) + nsj
               ENDIF
               IF (Ipi(1,i1).NE.Ipi(1,i2)) GOTO 200
               IF ((IABS(nsj).GT.ia2) .OR. (IABS(nsj).GT.ia1)) GOTO 300
               iq1 = MIN0(Iqmax,(ia1 + ia2)/2)
               iq2 = MAX0(2,IABS(ia1 - ia2)/2)
               IF (2*(iq2/2).NE.iq2) iq2 = iq2 + 1
               IF (iq2.LE.iq1) THEN
                  DO iqz = iq2, iq1, 2
                     IF (2*It.GT.Idt) CALL MEMO('ROTM',Idt,2*It,2)
                     Iq(1,It) = 1000*(iqz + 1)
                     Iq(2,It) = iqz
                     Iq(3,It) = nsp
                     T(3,It) = DFLOAT(1 - MOD(iqz,4))*DSQRT(ia1 + 1.D0)
     &                         *DJCG(ia1,2*iqz,ia2,nsj,0,Fac,Nfa)*ay
                     IF (DABS(T(3,It)).GT.1.D-6) It = It + 1
                  ENDDO
               ENDIF
            ENDIF
   60       IF ((aa(2,2).NE.0.D0) .AND. (l2.NE.1)) THEN
               l2 = 1
               ay = ax*aa(2,2)
               GOTO 40
            ENDIF
   80       IF ((aa(1,2).EQ.0.D0) .OR. (l1.EQ.1)) THEN
               iti = Niv(i1,i2,1)
               IF (iti.NE.It) THEN
                  itf = It - 1
                  IF (itf.NE.iti) THEN
                     it1 = iti + 1
                     It = iti
                     DO i = it1, itf
                        DO j = iti, It
                           IF ((Iq(1,i).EQ.Iq(1,j)) .AND.
     &                         (Iq(2,i).EQ.Iq(2,j)) .AND.
     &                         (Iq(3,i).EQ.Iq(3,j))) THEN
                              T(3,j) = T(3,j) + T(3,i)
                              GOTO 82
                           ENDIF
                        ENDDO
                        It = It + 1
                        DO k = 1, 3
                           Iq(k,It) = Iq(k,i)
                        ENDDO
                        T(3,It) = T(3,i)
   82                ENDDO
                     It = It + 1
                  ENDIF
                  itf = It - 1
                  DO i = iti, itf
                     IF (It.LE.i) GOTO 90
   84                IF (DABS(T(3,i)).LE.1.D-12) THEN
                        it1 = i + 1
                        It = It - 1
                        IF (it1.GT.It) GOTO 90
                        DO j = it1, It
                           DO k = 1, 3
                              Iq(k,j - 1) = Iq(k,j)
                           ENDDO
                           T(3,j - 1) = T(3,j)
                        ENDDO
                        GOTO 84
                     ENDIF
                  ENDDO
               ENDIF
   90          Niv(i1,i2,2) = It - 1
            ELSE
               l1 = 1
               ax = aa(1,2)
               GOTO 20
            ENDIF
         ENDDO
      ENDDO
      It = It - 1
      RETURN
  100 WRITE (MW,99010) jvar, Nva
99010 FORMAT (' NUMBER OF VARIABLES USED:',I5,5X,
     &        'EXCEEDS NUMBER OF VARIABLES READ:',I6)
      GOTO 500
  200 WRITE (MW,99015) i1, i2
99015 FORMAT (/' PARITIES OF STATES',I4,'  AND',I4,
     &        '  INCORRECT FOR THE ROTATIONAL MODEL')
      GOTO 500
  300 WRITE (MW,99020) i1, i2
99020 FORMAT (' TOO LARGE MAGNETIC QUANTUM NUMBER BETWEEN LEVELS',I4,
     &        ' AND',I4)
      GOTO 500
  400 WRITE (MW,99025) i1, i2, n3
99025 FORMAT (/' PARITIES OF STATES',I4,'  AND',I4,
     &        '  INCORRECT FOR THE ROTATIONAL MODEL WITH THE VIBRATION',
     &        I4)
  500 WRITE (MW,99030)
99030 FORMAT (//' IN ROTM  ... STOP ...')
      STOP
      END
C 01/01/04                                                      ECIS03  ROAM-000
      SUBROUTINE ROAM(Niv,Iq,T,Ipi,Ncoll,It,Beta,Iph,Var,Va,Iqmax,Fac,
     &                Nfa,Idt,Lo)
C NUCLEAR REDUCED MATRIX ELEMENTS FOR THE ASYMMETRIC ROTATIONAL MODEL   ROAM-003
C THE CONTROL NUMBER FOR FORM FACTOR (L=2,K=0) IS 2,FOR (L=2,K=2) IS 3, ROAM-004
C    FOR (L=4,K=0) IS 4,FOR (L=4,K=2) IS 2  ... AND SO ON...            ROAM-005
C FOR ARGUMENTS NIV TO IT AND FAC TO LO    SEE REDM                     ROAM-006
C SPECIAL INPUT: BETA:  DEFORMATIONS.THE GAMMA PARAMETER BETA(*,2) IS   ROAM-007
C                       RELATED TO THE BAND MIXING PARAM. IF LO(2)=.TRUEROAM-008
C                IPH(I,2):NUMBER OF NUCLEAR PARAMETERS IN IPH(I,1)      ROAM-009
C                       THEIR ADDRESS IN IPH(I,2)                       ROAM-010
C                VAR:   BAND MIXING COEFFICIENTS                        ROAM-011
C                VA:    WORKING SPACE FOR AMPLITUDES (PERMANENT)        ROAM-012
C                IQMAX: MAXIMUM ORDER OF MULTIPOLE EXPANSION            ROAM-013
C                                                                       ROAM-014
C  (IP||Q(IQ,KQ)||I) = SQRT(2*I+1) *CG(I,IQ,IP,K,KQ,KP)                 ROAM-015
C***********************************************************************ROAM-016
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER Idt, Iqmax, It, Ncoll, Nfa
      REAL*8 Beta(9,3), Fac(1), T(3,1), Va(5), Var(1)
      INTEGER Iph(2,Ncoll), Ipi(11,*), Iq(6,1), Niv(Ncoll,Ncoll,2)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 b, fq, fs, g, g1, g2, g3, g4, g5, g6
      DOUBLE PRECISION DABS, DCOS, DSIN, DSQRT
      REAL*8 DJCG
      INTEGER i, i1, i2, ia1, ia2, iq1, iq2, iqy, iqz, ivar, k, k1, k2,
     &        l1, lm, mq, mqz, mt, mv, mx, n, n1, nsp, nt, nv, nx
      INTEGER IABS, MAX0, MIN0
C
C
      ivar = 0
      i2 = 1
      IF (.NOT.(Lo(102))) THEN
C VAR(1) IS THE ANGLE GAMMA OF DAVYDOV AND FILIPPOV MODEL               ROAM-025
C THE SECOND LEVEL MUST BE A THE FIRST 2+ AND THE THIRD ONE,IF PRESENT, ROAM-026
C THE SECOND 2+ .THEIR MIXING COEFFICIENTS ARE COMPUTED FROM VAR(1).    ROAM-027
C THERE CAN BE ANY NUMBER OF LEVELS AFTER THE THIRD ONE.                ROAM-028
         g = Var(1) - Beta(1,2)
         IF (.NOT.Lo(216)) WRITE (MW,99005) g, (Beta(i,2),i = 1,8)
99005    FORMAT (/
     &' FOR CONSTRAINED ASYMMETRIC ROTATIONAL MODEL THE BETA(I,2) ARE IN
     &CREASED BY',F10.5//23X,'V',9X,'W',8X,'VS',8X,'WS',7X,'VSO',7X,
     &'WSO',6X,'COUL S.O. COUL'/' INITIAL VALUES ',8F10.5)
         DO i = 1, 8
            Beta(i,2) = Beta(i,2) + g
         ENDDO
         IF (.NOT.Lo(216)) WRITE (MW,99010) (Beta(i,2),i = 1,8)
99010    FORMAT (' MODIFIED VALUES',8F10.5)
         g = 0.0174532925199433D0*Var(1)
         g1 = DSIN(g)
         g2 = DCOS(g)
         g3 = DSIN(3.D0*g)
         g4 = DCOS(3.D0*g)
         g = DSQRT(9.D0 - 8.D0*g3*g3)
         g5 = -(g1*g3 + 3.D0*g2*g4 + g)
         g6 = 3.D0*g1*g4 - g2*g3
         Va(1) = 1.D0
         IF (Ncoll.NE.1) THEN
            g = DSQRT(g6*g6 + g5*g5)
            Va(2) = g5/g
            Va(3) = g6/g
            IF (Ncoll.NE.2) THEN
               Va(4) = -Va(3)
               Va(5) = Va(2)
            ENDIF
         ENDIF
         i2 = MIN0(Ncoll,3)
         DO i1 = 1, i2
            IF (i1.EQ.1 .AND. Ipi(3,i1).NE.1) GOTO 200
            IF (i1.NE.1) THEN
               IF (Ipi(3,i1).NE.5) GOTO 200
               IF (.NOT.Lo(216)) WRITE (MW,99035) i1, Va(2*i1 - 2),
     &                                  Va(2*i1 - 1)
            ENDIF
         ENDDO
         ivar = i2 - 1
         i2 = 4
         IF (i2.GT.Ncoll) GOTO 100
      ENDIF
C LEVELS NOT RELATED TO THE GAMMA DEFORMATION                           ROAM-060
      DO i1 = i2, Ncoll
         IF (Ipi(3,i1).EQ.3) GOTO 400
         ivar = Iph(2,i1)
         IF (MOD(Ipi(3,i1),4).NE.1) Var(ivar + 1) = 90.D0
         k1 = ivar + i1
         Va(k1) = 1.D0
         IF (Iph(1,i1).NE.0) THEN
            k2 = k1 + Iph(1,i1) - 1
            DO k = k1, k2
               ivar = ivar + 1
               g = 0.0174532925199433D0*Var(ivar)
               Va(k + 1) = Va(k)*DSIN(g)
               Va(k) = Va(k)*DCOS(g)
            ENDDO
            IF (.NOT.Lo(216)) WRITE (MW,99035) i1, (Va(k),k = k1,k2),
     &                               Va(k2 + 1)
         ENDIF
      ENDDO
C COMPUTATION OF RED. MAT. ELE. FOR I=/<IP AT THE FIRST CALL            ROAM-076
  100 It = 1
      nsp = 0
      IF (Lo(13) .OR. Lo(19)) nsp = 10
      DO i1 = 1, Ncoll
         nt = Iph(1,i1) + 1
         nv = Iph(2,i1) + i1 - 1
         ia1 = Ipi(3,i1) - 1
         nx = ia1/2 - 2*(ia1/4)
         DO i2 = i1, Ncoll
            IF (Ipi(1,i1).NE.Ipi(1,i2)) GOTO 300
            Niv(i1,i2,1) = It
            mt = Iph(1,i2) + 1
            mv = Iph(2,i2) + i2 - 1
            ia2 = Ipi(3,i2) - 1
            mx = ia2/2 - 2*(ia2/4)
            iq1 = MIN0(Iqmax,(ia1 + ia2)/2,8)
            iq2 = MAX0(2,2*((IABS(ia1-ia2)/2+1)/2))
            IF (iq2.LE.iq1) THEN
C COMPUTATION OF REDUCED MATRIX ELEMENTS                                ROAM-095
               DO iqz = iq2, iq1, 2
                  fs = DFLOAT(iqz - 4*((iqz+2)/4) + 1)
                  iqy = iqz/2 + 1
                  DO mqz = 1, iqy
                     IF (2*It.GT.Idt) CALL MEMO('ROAM',Idt,2*It,2)
                     Iq(1,It) = 1000*((iqy*(iqy-1))/2 + mqz)
                     b = 0.D0
                     Iq(2,It) = iqz
                     Iq(3,It) = nsp
                     mq = 2*mqz - 2
                     DO n1 = 1, nt
                        IF (n1.NE.nx) THEN
                           n = 2*n1 - 2
                           lm = n - mq
                           IF (IABS(lm).LT.2*mt) THEN
                              l1 = 1 + IABS(lm)/2
                              fq = DJCG(ia1,2*iqz,ia2,2*n, - 2*mq,Fac,
     &                             Nfa)*Va(nv + n1)*Va(mv + l1)
                              IF (lm.LT.0 .AND. mx.EQ.1) fq = -fq
                              IF (mq*n*lm.NE.0) fq = .7071068D0*fq
                              b = b + fq
                              IF (n*mq.NE.0) THEN
                                 lm = mq + n
                                 IF (lm.LT.2*mt) THEN
                                    l1 = 1 + lm/2
                                    fq = DJCG(ia1,2*iqz,ia2,2*n,2*mq,
     &                                 Fac,Nfa)*Va(nv + n1)*Va(mv + l1)
                                    IF (mq*n*lm.NE.0) fq = .7071068D0*fq
                                    b = b + fq
                                 ENDIF
                              ENDIF
                           ENDIF
                        ENDIF
                     ENDDO
                     IF (mq.NE.0) b = .7071068D0*b
                     T(3,It) = DSQRT(DFLOAT(ia1 + 1))*b*fs
                     IF (DABS(T(3,It)).GT.1.D-6) It = It + 1
                  ENDDO
               ENDDO
            ENDIF
            Niv(i1,i2,2) = It - 1
         ENDDO
      ENDDO
      It = It - 1
      RETURN
  200 WRITE (MW,99015)
99015 FORMAT (/
     &' LEVEL ORDER INCORRECT FOR LINK BETWEEN DEFORMATION AND BAND MIXI
     &NG'/' USE 0+-2+-2+ AND THEN THE OTHER LEVELS')
      GOTO 500
  300 WRITE (MW,99020) i1, i2
99020 FORMAT (/' PARITIES OF STATES',I4,'  AND',I4,
     &        '  INCORRECT FOR THE ROTATIONAL MODEL')
      GOTO 500
  400 WRITE (MW,99025)
99025 FORMAT (/' NO SPIN-1 STATE IN THIS MODEL')
  500 WRITE (MW,99030)
99030 FORMAT (//' IN ROAM  ... STOP ...')
      STOP
99035 FORMAT (/' BAND MIXING COEFFICIENTS FOR THE LEVEL',I4/(6D20.7))
      END
C 01/01/04                                                      ECIS03  DJCG-000
      FUNCTION DJCG(J1,J2,J3,M1,M2,Fac,Nfa)
C CLEBSCH-GORDAN COEFFICIENTS ( J1  J2  M1  M2 | J3  M1+M2 )            DJCG-002
C THE ARGUMENTS J1,J2,J3,M1 AND M2 ARE INTEGER DOUBLED VALUES           DJCG-003
C FAC IS A TABLE OF LOGARITHM OF FACTORIALS AND NFA ITS LENGTH.         DJCG-004
C***********************************************************************DJCG-005
      IMPLICIT REAL*8(A - F)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER J1, J2, J3, M1, M2, Nfa
      REAL*8 DJCG
      REAL*8 Fac(1)
C
C Local variables
C
      REAL*8 a1, a2, a4
      DOUBLE PRECISION DEXP, DSQRT
      INTEGER i, i1, i2, iq, ix1, ix2, ix3, iy1, iy2, iy3, iz1, iz2,
     &        iz3, k, k1, k2, k3, k4, kc, l1, l2, l3, l4, lw1, lw2, lz1,
     &        lz2, m3, n1, n2, n3, n4, n5, nx, nxy
      INTEGER IABS, MAX0, MIN0
C
C
      DJCG = 0.D0
      m3 = M1 + M2
      IF (J1 + J2 + J3.LE.2*Nfa) THEN
         IF ((J1.LT.0) .OR. (J2.LT.0) .OR. (J3.LT.0)) THEN
            WRITE (MW,99005)
99005       FORMAT (' NEGATIVE ANGULAR MOMENTUM IN DJCG')
            RETURN
         ELSE
            iy1 = J1 + M1 + 2
            ix1 = iy1/2
            iy2 = J2 + M2 + 2
            ix2 = iy2/2
            iy3 = J3 - m3 + 2
            ix3 = iy3/2
            IF ((ix1.LE.0) .OR. (ix2.LE.0) .OR. (ix3.LE.0)) RETURN
            IF ((2*ix1.NE.iy1) .OR. (2*ix2.NE.iy2) .OR. (2*ix3.NE.iy3))
     &          THEN
               WRITE (MW,99010)
99010          FORMAT (
     &' INTEGER/HALF-INTEGER RULE BETWEEN QUANTUM NUMBERS TRANSGRESSED I
     &N DJCG')
               RETURN
            ELSE
               iy1 = ix1 - M1
               iy2 = ix2 - M2
               iy3 = ix3 + m3
               IF ((iy1.LE.0) .OR. (iy2.LE.0) .OR. (iy3.LE.0)) RETURN
C AT THIS POINT IX1,IX2,IX3 ARE TWICE J+M AND IY1,IY2,IY3 TWICE J-M     DJCG-025
C SEARCH FOR A ZERO ARGUMENT                                            DJCG-026
               IF (J3.EQ.0) THEN
C J1,J2 OR J3  IS ZERO                                                  DJCG-069
                  IF (J1.NE.J2) RETURN
                  a1 = DFLOAT(J1 + 1)
                  DJCG = 1.D0/DSQRT(a1)
                  IF (MOD(iy1,2).EQ.0) DJCG = -DJCG
                  RETURN
               ELSE
                  IF ((J1.EQ.0) .OR. (J2.EQ.0)) THEN
                     IF (J1 + J2.NE.J3) RETURN
                     DJCG = 1.D0
                     RETURN
                  ELSE
                     IF (m3.EQ.0) THEN
C M1,M2 OR M3 IS ZERO; IF THE OTHERS M ARE LARGER THAN 1/2,GENERAL CASE DJCG-078
                        IF (IABS(M1).LT.1) THEN
C ALL THE M ARE ZEROS                                                   DJCG-084
                           n5 = ix1 + ix2 + ix3 - 1
                           IF (2*(n5/2).NE.n5) RETURN
                           n2 = ix1 + ix2 - ix3
                           n3 = ix2 + ix3 - ix1
                           n4 = ix3 + ix1 - ix2
                           a1 = Fac(2*ix3) - Fac(2*ix3 - 1)
                           kc = 1
                           GOTO 10
                        ELSEIF (IABS(M1).EQ.1) THEN
C ONE M IS ZERO AND THE OTHERS +-1/2  FORMULA OF DCGS                   DJCG-093
                           iq = ix3 - 1
                           iz1 = ix1 + ix2 - 2
                           iz2 = ix1 - iy2
                           lz1 = J1
                           lz2 = J2
                           lw2 = M2
                           lw1 = iy1
                           GOTO 5
                        ENDIF
                     ELSEIF (M2.EQ.0) THEN
                        IF (IABS(M1).LE.1) THEN
                           iq = ix2 - 1
                           iz1 = ix1 + ix3 - 2
                           iz2 = ix3 - iy1
                           lz1 = J1
                           lz2 = J3
                           lw2 = M1
                           lw1 = iy3
                           GOTO 5
                        ENDIF
                     ELSEIF (M1.EQ.0) THEN
                        IF (IABS(m3).LE.1) THEN
                           iq = ix1 - 1
                           iz1 = ix2 + ix3 - 2
                           iz2 = ix2 - iy3
                           lz1 = J2
                           lz2 = J3
                           lw2 = -m3
                           lw1 = iy2
                           GOTO 5
                        ENDIF
                     ENDIF
C GENERAL CASE                                                          DJCG-032
                     nx = ix1 + ix2 + ix3
                     iz1 = nx - ix1 - iy1
                     iz2 = nx - ix2 - iy2
                     iz3 = nx - ix3 - iy3
                     IF ((iz1.LE.0) .OR. (iz2.LE.0) .OR. (iz3.LE.0))
     &                   RETURN
                     nxy = nx - 1
                     i1 = ix2 - iy3
                     i2 = iy1 - ix3
C K1 AND K2 ARE THE LIMITS OF THE SUM                                   DJCG-041
C M1,M2,M3,K1,K3,K4 HAVE THEIR FACTORIALS IN THE DENOMINATOR            DJCG-042
C NXY=J1+J2+J3+1      IZ1,IZ2,IZ3  ARE J1+J2-J3                         DJCG-043
                     k1 = MAX0(i1,i2,0) + 1
                     k2 = MIN0(iy1,ix2,iz3)
                     k3 = k1 - i1
                     k4 = k1 - i2
                     n1 = iy1 - k1 + 1
                     n2 = ix2 - k1 + 1
                     n3 = iz3 - k1 + 1
                     DJCG = DEXP
     &                      (0.5D0*(Fac(ix3+iy3) - Fac(ix3+iy3-1) - Fac
     &                      (nxy) + Fac(iz1) + Fac(iz2) + Fac(iz3)
     &                      + Fac(ix1) + Fac(ix2) + Fac(ix3) + Fac(iy1)
     &                      + Fac(iy2) + Fac(iy3)) - Fac(n1) - Fac(n2)
     &                      - Fac(n3) - Fac(k1) - Fac(k3) - Fac(k4))
                     IF (2*(k1/2).EQ.k1) DJCG = -DJCG
                     IF (k1.NE.k2) THEN
                        a4 = DJCG
                        k = k2 - k1
                        k3 = k2 - i1
                        k4 = k2 - i2
                        n1 = iy1 - k2
                        n2 = ix2 - k2
                        n3 = iz3 - k2
C K2,K3,K4,N1,N2,N3 ARE THE ARGUMENTS OF THE FACTORIALS IN THE LAST TERMDJCG-063
                        DO i = 1, k
                           a1 = DFLOAT((k2 - i)*(k3 - i)*(k4 - i))
                           a2 = DFLOAT((n1 + i)*(n2 + i)*(n3 + i))
                           DJCG = a4 - DJCG*a2/a1
                        ENDDO
                     ENDIF
                     RETURN
                  ENDIF
    5             n2 = iz1 - iq + 1
                  n3 = iq + iz2 + 1
                  n4 = iq - iz2 + 1
                  IF (n2.LT.1 .OR. n3.LT.1 .OR. n4.LT.1) RETURN
                  n5 = iz1 + iq + 2
                  a1 = Fac(J3 + 2) - Fac(J3 + 1) - Fac(lz1 + 2)
     &                 + Fac(lz1 + 1) - Fac(lz2 + 2) + Fac(lz2 + 1)
                  kc = 2
               ENDIF
C SIMPLE FORMULA                                                        DJCG-124
   10          IF (n5 - 1.LE.Nfa) THEN
                  l1 = (n5 + 1)/2
                  l2 = (n2 + 1)/2
                  l3 = (n3 + 1)/2
                  l4 = (n4 + 1)/2
                  DJCG = DEXP
     &                   (0.5D0*(a1 + Fac(n2) + Fac(n3) + Fac(n4) - Fac
     &                   (n5)) + Fac(l1) - Fac(l2) - Fac(l3) - Fac(l4))
                  IF (kc.EQ.2) THEN
                     IF (lw2.GT.0) l4 = l4 + n5 + 1
                     DJCG = 2.D0*DJCG
                     IF (MOD(l4 + lw1 + ix1 - iy2,2).NE.0) DJCG = -DJCG
                     RETURN
                  ELSE
                     IF (MOD(l1 + ix1 - ix2,2).EQ.0) DJCG = -DJCG
                     RETURN
                  ENDIF
               ENDIF
            ENDIF
         ENDIF
      ENDIF
      WRITE (MW,99015)
99015 FORMAT (' FACTORIAL TOO LARGE IN DJCG')
      RETURN
      END
C 01/01/04                                                      ECIS03  DJ6J-000
      FUNCTION DJ6J(J1,J2,J3,J4,J5,J6,Fac,Nfa)
C                       ( J1  J2  J3 )                                  DJ6J-002
C 6-J COEFFICIENTS      )            (                                  DJ6J-003
C                       ( J4  J5  J6 )                                  DJ6J-004
C THE ARGUMENTS J1,J2,J3,J4,J5 AND J6 ARE INTEGER DOUBLED VALUES        DJ6J-005
C FAC IS A TABLE OF LOGARITHM OF FACTORIALS AND NFA ITS LENGTH.         DJ6J-006
C***********************************************************************DJ6J-007
      IMPLICIT REAL*8(A - F)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER J1, J2, J3, J4, J5, J6, Nfa
      REAL*8 DJ6J
      REAL*8 Fac(1)
C
C Local variables
C
      REAL*8 a1, a2, a3
      DOUBLE PRECISION DEXP, DSQRT
      INTEGER i, i1, ia(3,4), ix(6), ix1, ix2, ix3, iy(4), iz1, iz2,
     &        iz3, k, k1, k2, l1, l2, l3, l4, m1, m2, m3, n, n1, n2, n3
      INTEGER IABS, MAX0, MIN0
C
C
      DATA ia/1, 2, 3, 1, 5, 6, 4, 2, 6, 4, 5, 3/
      DJ6J = 0.D0
      ix(1) = J1
      ix(2) = J2
      ix(3) = J3
      ix(4) = J4
      ix(5) = J5
      ix(6) = J6
C  THE ARGUMENTS MULTIPLIED BY 2 ARE IN THE TABLE IX                    DJ6J-019
C SEARCH FOR A ZERO ARGUMENT                                            DJ6J-020
      DO i = 1, 6
         IF (ix(i).LT.0) GOTO 1000
         IF (ix(i).EQ.0) THEN
            IF (i.EQ.1) GOTO 100
            IF (i.EQ.2) GOTO 200
            IF (i.EQ.3) GOTO 300
            IF (i.EQ.4) GOTO 400
            IF (i.EQ.5) GOTO 500
            IF (i.EQ.6) GOTO 600
         ENDIF
      ENDDO
C GENERAL CASE                                                          DJ6J-025
C CHECK OF THE TRIANGULAR RELATIONS AND COMPUTATION OF DELTA            DJ6J-026
      DO k = 1, 4
         iz1 = ia(1,k)
         iz2 = ia(2,k)
         iz3 = ia(3,k)
         ix1 = ix(iz1)
         ix2 = ix(iz2)
         ix3 = ix(iz3)
         n = ix1 + ix2 + ix3 + 2
         i1 = n/2
         IF (2*i1.NE.n) GOTO 800
         IF (i1.GT.Nfa) GOTO 900
         n1 = i1 - ix3
         n2 = i1 - ix2
         n3 = i1 - ix1
         IF ((i1.LE.0) .OR. (n1.LE.0) .OR. (n2.LE.0) .OR. (n3.LE.0))
     &       GOTO 1100
         iy(k) = i1 + 1
         DJ6J = DJ6J + Fac(n1) - Fac(i1 + 1) + Fac(n2) + Fac(n3)
      ENDDO
      n1 = (ix(1) + ix(2) + ix(4) + ix(5))/2
      n2 = (ix(1) + ix(3) + ix(4) + ix(6))/2
      n3 = (ix(2) + ix(3) + ix(5) + ix(6))/2
C K1 AND K2 ARE THE LIMITS OF THE SUM                                   DJ6J-047
C K1,L1,L2,L3,L4,M1,M2,M3 ARE FOR THE FACTORIALS OF THE FIRST TERM      DJ6J-048
      k1 = MAX0(iy(1),iy(2),iy(3),iy(4))
      k2 = MIN0(n1,n2,n3) + 2
      l1 = k1 - iy(1) + 1
      l2 = k1 - iy(2) + 1
      l3 = k1 - iy(3) + 1
      l4 = k1 - iy(4) + 1
      m1 = n1 - k1 + 3
      m2 = n2 - k1 + 3
      m3 = n3 - k1 + 3
      DJ6J = DEXP(.5D0*DJ6J + Fac(k1) - Fac(l1) - Fac(l2) - Fac(l3)
     &       - Fac(l4) - Fac(m1) - Fac(m2) - Fac(m3))
      IF (2*(k1/2).NE.k1) DJ6J = -DJ6J
      IF (k2.NE.k1) THEN
         a2 = DJ6J
         k = k2 - k1
   50    a1 = DFLOAT((m1 - k)*(m2 - k)*(m3 - k))
         k = k - 1
         a3 = DFLOAT((l1 + k)*(l2 + k)*(l3 + k)*(l4 + k))
         DJ6J = a2 - DFLOAT(k1 + k)*a1*DJ6J/a3
         IF (k.GT.0) GOTO 50
      ENDIF
      RETURN
C ONE QUANTUM NUMBER IS ZERO;CHECK OF TRIANGULAR RELATIONS              DJ6J-070
  100 IF (ix(2).NE.ix(3) .OR. ix(5).NE.ix(6)) GOTO 1100
      ix(6) = ix(4)
      ix(1) = ix(2)
      ix(4) = ix(5)
      GOTO 700
  200 IF (ix(1).NE.ix(3) .OR. ix(4).NE.ix(6)) GOTO 1100
      ix(6) = ix(5)
      GOTO 700
  300 IF (ix(1).NE.ix(2) .OR. ix(4).NE.ix(5)) GOTO 1100
      IF (ix(4).EQ.ix(5)) GOTO 700
      GOTO 1100
  400 IF (ix(2).NE.ix(6) .OR. ix(3).NE.ix(5)) GOTO 1100
      ix(6) = ix(1)
      ix(1) = ix(5)
      ix(4) = ix(2)
      GOTO 700
  500 IF (ix(1).NE.ix(6) .OR. ix(3).NE.ix(4)) GOTO 1100
      ix(6) = ix(2)
      GOTO 700
  600 IF (ix(1).NE.ix(5) .OR. ix(2).NE.ix(4)) GOTO 1100
      ix(6) = ix(3)
C VALUE OF THE 6-J COEFFICIENT WITH AN ARGUMENT ZERO                    DJ6J-092
  700 IF (MIN0(ix(1),ix(4),ix(6)).LT.0) GOTO 1000
      IF (ix(6).GT.ix(1) + ix(4) .OR. ix(6).LT.IABS(ix(1) - ix(4)))
     &    GOTO 1100
      IF (MAX0(ix(1),ix(4)).GT.Nfa) GOTO 900
      k = ix(1) + ix(4) + ix(6)
      n = k/2
      IF (2*n.EQ.k) THEN
         DJ6J = DFLOAT(1 - 2*MOD(n,2))
     &          /DSQRT(DFLOAT((ix(1)+1)*(ix(4)+1)))
         RETURN
      ENDIF
  800 WRITE (MW,99005)
99005 FORMAT (
     &' INTEGER/HALF-INTEGER RULE BETWEEN QUANTUM NUMBERS TRANSGRESSED I
     &N DJ6J')
      GOTO 1100
  900 WRITE (MW,99010)
99010 FORMAT (' FACTORIAL TOO LARGE IN DJ6J')
      GOTO 1100
 1000 WRITE (MW,99015)
99015 FORMAT (' NEGATIVE ANGULAR MOMENTUM IN DJ6J')
 1100 DJ6J = 0.D0
      RETURN
      END
C 01/01/04                                                      ECIS03  DJ9J-000
      FUNCTION DJ9J(J1,J2,J3,J4,J5,J6,J7,J8,J9,Aa,Ito)
C COMPUTATION OF                                                        DJ9J-002
C                                     | J1  J2  J3 |                    DJ9J-003
C                                     |            |                    DJ9J-004
C   9J(J1,J2,J3,J4,J5,J6,J7,J8,J9) =  | J4  J5  J6 |                    DJ9J-005
C                                     |            |                    DJ9J-006
C                                     | J7  J8  J9 |                    DJ9J-007
C                                                                       DJ9J-008
C THE ARGUMENTS ARE INTEGER DOUBLE VALUES                               DJ9J-009
C AA IS A WORKING SPACE AND ITO ITS LENGTH                              DJ9J-010
C***********************************************************************DJ9J-011
      IMPLICIT REAL*8(A - F)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER Ito, J1, J2, J3, J4, J5, J6, J7, J8, J9
      REAL*8 Aa(1)
      REAL*8 DJ9J
C
C Local variables
C
      REAL*8 af, at, az
      DOUBLE PRECISION DSQRT
      INTEGER i, ia(5,3), ia1, ia2, ia4, ia5, ib(3), ib1, ib2, ib3, ii,
     &        ij, itx, ix(9), j(5), jf(3), js(3), jt, jx(3,3), k, k1,
     &        k2, k3, kf, kt
      INTEGER IABS, MAX0, MIN0
C
C
      EQUIVALENCE (ix(1),jx(1,1))
      EQUIVALENCE (ib(1),ib1)
      EQUIVALENCE (ib(2),ib2)
      EQUIVALENCE (ib(3),ib3)
      DATA ia/1, 2, 3, 6, 9, 6, 4, 5, 8, 2, 8, 9, 7, 1, 4/
      DJ9J = 0.D0
      ix(1) = J1
      ix(2) = J2
      ix(3) = J3
      ix(4) = J4
      ix(5) = J5
      ix(6) = J6
      ix(7) = J7
      ix(8) = J8
      ix(9) = J9
      DO i = 1, 3
         DO k = 1, 3
            IF (jx(k,i).LT.0) GOTO 300
         ENDDO
C CHECK OF TRIANGULAR RELATIONS                                         DJ9J-031
         IF (MOD(jx(1,i) + jx(2,i) + jx(3,i),2).NE.0 .OR.
     &       MOD(jx(i,1) + jx(i,2) + jx(i,3),2).NE.0) GOTO 100
         IF (IABS(jx(1,i) - jx(2,i)).GT.jx(3,i) .OR. jx(1,i) + jx(2,i)
     &       .LT.jx(3,i)) RETURN
         IF (IABS(jx(i,1) - jx(i,2)).GT.jx(i,3) .OR. jx(i,1) + jx(i,2)
     &       .LT.jx(i,3)) RETURN
      ENDDO
C SEARCH OF THE CONFIGURATION FOR WHICH THE SUM ON PRODUCTS OF 6-J      DJ9J-039
C COEFFICIENTS IS THE SMALLEST ONE                                      DJ9J-040
      k1 = MIN0(ix(3),ix(5),ix(7))
      k2 = MIN0(ix(2),ix(4),ix(9))
      k3 = MIN0(ix(1),ix(6),ix(8))
      kt = MAX0(k1,k2,k3)
      IF (kt.NE.k1) THEN
         IF (k2.GT.k3) THEN
            DO i = 1, 3
               ii = ix(i + 6)
               ix(i + 6) = ix(i + 3)
               ix(i + 3) = ix(i)
               ix(i) = ii
            ENDDO
         ELSE
            DO i = 1, 3
               ii = ix(i)
               ix(i) = ix(i + 3)
               ix(i + 3) = ix(i + 6)
               ix(i + 6) = ii
            ENDDO
         ENDIF
      ENDIF
      DO k = 1, 3
         ia1 = ia(1,k)
         ia2 = ia(2,k)
         ia4 = ia(4,k)
         ia5 = ia(5,k)
         js(k) = MAX0(IABS(ix(ia1) - ix(ia5)),IABS(ix(ia4) - ix(ia2)))
     &           + 1
         jf(k) = MIN0(ix(ia1) + ix(ia5),ix(ia2) + ix(ia4)) + 1
      ENDDO
      kf = MIN0(jf(1),jf(2),jf(3))
      kt = 2 + (kf - MAX0(js(1),js(2),js(3)))/2
C LOOP ON THE THREE 6-J COEFFICIENTS                                    DJ9J-067
      itx = 0
      az = 1.D0
      DO k = 1, 3
         ij = itx
         ib(k) = itx + (jf(k) - kf)/2
         DO i = 1, 5
            ia1 = ia(i,k)
            j(i) = ix(ia1)
         ENDDO
         jt = 2 + (jf(k) - js(k))/2
         itx = itx + jt
         IF (itx.GT.Ito) GOTO 200
         at = DFLOAT(jf(k))
         CALL DX6J(Aa(1 + ij),at,j,jt)
         az = az*at*DFLOAT(j(3) + 1)
      ENDDO
C SUMMATION ON PRODUCTS OF 6-J                                          DJ9J-082
      af = DFLOAT(kf)
      DO i = 2, kt
         DJ9J = DJ9J + af*Aa(i + ib1)*Aa(i + ib2)*Aa(i + ib3)
         af = af - 2.D0
      ENDDO
C NORMALISATION                                                         DJ9J-087
      DJ9J = DJ9J/DSQRT(az)
      RETURN
  100 WRITE (MW,99005)
99005 FORMAT (
     &' INTEGER/HALF-INTEGER RULE BETWEEN QUANTUM NUMBERS TRANSGRESSED I
     &N DJ9J')
      RETURN
  200 WRITE (MW,99010)
99010 FORMAT (' TOO MANY 6-J NEEDED IN DJ9J')
      RETURN
  300 WRITE (MW,99015)
99015 FORMAT (' NEGATIVE ANGULAR MOMENTUM IN DJ9J')
      RETURN
      END
C 01/01/04                                                      ECIS03  DX6J-000
      SUBROUTINE DX6J(Aa,At,J,Jt)
C  RECURRENCE COMPUTATION OF UNNORMALISED                               DX6J-002
C                       ( J(1)  J(2)  J(3) )                            DX6J-003
C 6-J COEFFICIENTS      )                  (                            DX6J-004
C                       ( J(4)  J(5)   JJ  )                            DX6J-005
C FOR ALL VALUES OF JJ.  THE ARGUMENTS J ARE INTEGER DOUBLED VALUES.    DX6J-006
C INPUT DATA:  JT:   NUMBER OF 6J COEFFICIENTS PLUS ONE                 DX6J-007
C              AT:   JJ+1 FOR MAXIMUM VALUE OF JJ (USUAL 2J+1)          DX6J-008
C OUTPUT DATA: AA:   UNNORMALISED 6J COEFFICIENTS IN AA(2) TO AA(JT)    DX6J-009
C                    STARTING FROM THE LARGEST VALUE OF JJ; AA(1)=0     DX6J-010
C              AT:   NORMALISATION: THE VALUES AA MUST BE DIVIDED BY    DX6J-011
C                      (-)**(J(1)+J(2)+J(4)+J(5))*SQRT((J(3)+1)*AT)     DX6J-012
C***********************************************************************DX6J-013
      IMPLICIT REAL*8(A - F)
C
C
C Dummy arguments
C
      REAL*8 At
      INTEGER Jt
      REAL*8 Aa(2)
      INTEGER J(5)
C
C Local variables
C
      REAL*8 al, bk, bk1, bk2, bk3, bk4, c1, c2, d1, d2, d4
      DOUBLE PRECISION DSQRT
      INTEGER i, ii
C
C
      Aa(1) = 0.D0
      Aa(2) = 1.D0
      IF (Jt.LE.2) RETURN
      al = At
      c2 = 0.D0
      bk1 = DFLOAT(J(1) - J(5))**2
      bk3 = DFLOAT(J(2) - J(4))**2
      bk2 = DFLOAT(J(1) + J(5) + 2)**2
      bk4 = DFLOAT(J(2) + J(4) + 2)**2
      d1 = DFLOAT(J(1) - J(5))*DFLOAT(J(1) + J(5) + 2)
     &     *DFLOAT(J(4) - J(2))*DFLOAT(J(2) + J(4) + 2)/16.D0
      d2 = (bk1 + bk2 + bk3 + bk4 - DFLOAT(4*J(3)*(J(3)+2)))/8.D0 - 1.D0
      bk = (al + 1.D0)**2
      DO i = 3, Jt
         c1 = c2
         bk = bk - al*4.D0
         c2 = .03125D0*DSQRT((bk3 - bk)*(bk1 - bk)*(bk2 - bk)*(bk4 - bk)
     &        )
         d4 = .5D0*(al + .5D0*bk - 1.D0)
         Aa(i) = -(al*(d1 + (d2-d4)*d4)*Aa(i - 1) + (al - 1.D0)
     &           *c1*Aa(i - 2))/(c2*(al + 1.D0))
         al = al - 2.D0
         At = At + al*Aa(i)*Aa(i)
         IF (At.GE.1.D12) THEN
            At = At*1.D-24
            DO ii = 2, i
               Aa(ii) = Aa(ii)*1.D-12
            ENDDO
         ENDIF
      ENDDO
      END
C 01/01/04                                                      ECIS03  EXTP-000
      SUBROUTINE EXTP(Npp,Ncoll,Ncolt,Wv,Niv,Iq,Ivy,Ivq,Ipi,Fac,Nfa,Va,
     &                Nva,Ll,Ipp,Pip,Idt,Lo)
C INPUT AND SETUP OF EXTERNAL FORM FACTORS, ELASTIC AND TRANSITIONS     EXTP-003
C INPUT : NPP:  NUMBER OF DIFFERENT ELASTIC CHANNEL POTENTIALS          EXTP-004
C         NCOLL:NUMBER OF COUPLED NUCLEAR STATES                        EXTP-005
C         NCOLT:NUMBER OF NUCLEAR STATES INCLUDING UNCOUPLED ONES       EXTP-006
C         WV:   MASSES OF PARTICLE AND TARGET IN WV(1,*) AND WV(2,*)    EXTP-007
C         NIV:  ADDRESSES IN TABLE OF NUCLEAR MATRIX ELEMENTS (SEE REDM)EXTP-008
C         IQ:   TABLE OF REDUCED NUCLEAR MATRIX ELEMENTS (SEE REDM)     EXTP-009
C         IVY:  TABLE OF FORM FACTORS  (SEE REDM)                       EXTP-010
C         IVQ:  TABLE OF ANGULAR MOMENTA (SEE REDM)                     EXTP-011
C         IPI(5,*): REFERENCE TO POTENTIALS                             EXTP-012
C         FAC:  TABLE OF LOGARITHM OF FACTORIALS                        EXTP-013
C         NFA:  LENGTH OF FAC                                           EXTP-014
C         IPP,PIP: DISPERSION RELATIONS, EQUIVALENT BY CALL             EXTP-015
C         IDT:  SIZE OF AVAILABLE WORKING SPACE                         EXTP-016
C         LO:   LOGICAL CONTROLS                                        EXTP-017
C IN COMMON /POTE1/   SEE REDM                                          EXTP-018
C OUTPUT: VA:   FOR OPTICAL MODEL PARAMETERS READ HERE                  EXTP-019
C         NVA:  IN EQUIVALENCE BY CALL WITH VA                          EXTP-020
C         LL:   ADDRESSES IN VA IN EQUIVALENCE WITH NVA(1,3)            EXTP-021
C           NVA(1) FIRST ADDRESS AFTER LL                               EXTP-022
C           NVA(2) NUMBER OF SETS OF FOLDING PARAMETERS                 EXTP-023
C           NVA(3) FIRST ADDRESS OF FOLDING PARAMETERS                  EXTP-024
C           NVA(4) LAST ADDRESS OF FOLDING PARAMETERS                   EXTP-025
C           LL(1,ITYP,K) FIRST ADDRESS OF PARAMETERS WHICH CAN BE VARIEDEXTP-026
C             FOR ITYP AND FORM FACTOR K, 1 FOR FORM FACTORS NOT USED   EXTP-027
C           LL(2,ITYP,K) LAST ADDRESS FOR ITYP AND FORM FACTOR K, -1 FOREXTP-028
C             FORM FACTORS NOT USED                                     EXTP-029
C                                                                       EXTP-030
C ITYP 1 REAL VOLUME OR DIRAC SCALAR POTENTIAL                          EXTP-031
C      2 IMAGINARY VOLUME OR DIRAC SCALAR POTENTIAL                     EXTP-032
C      3 REAL SURFACE OR DIRAC VECTOR POTENTIAL                         EXTP-033
C      4 IMAGINARY SURFACE OR DIRAC VECTOR POTENTIAL                    EXTP-034
C      5 REAL SPIN-ORBIT OR DIRAC TENSOR POTENTIAL                      EXTP-035
C      6 IMAGINARY SPIN-ORBIT OR DIRAC TENSOR POTENTIAL                 EXTP-036
C      7 COULOMB POTENTIAL                                              EXTP-037
C      8 COULOMB SPIN-ORBIT POTENTIAL                                   EXTP-038
C                                                                       EXTP-039
C L1,L2 CONTROLS THE LEVEL TO POTENTIAL ASSIGNMENT                      EXTP-040
C ML    IS 0 FOR THE POTENTIAL OR THE PLACE OF THE TRANSITION FORM      EXTP-041
C       FACTOR IN THE SEQUENCE OF REDUCED MATRIX ELEMENTS.              EXTP-042
C       THE FORM FACTORS CONTAIN THE DEFORMATION.                       EXTP-043
C L1X,L2X,MLX  FORM FACTOR COPIED TO L1,L2,ML                           EXTP-044
C                                                                       EXTP-045
C THE SPIN-ORBIT TRANSITION FORM FACTOR TO BE READ IS THE SECOND ONE    EXTP-046
C MULTIPLIED BY R**2. (MULTIPOLE OF AN ORDINARY WOODS-SAXON POTENTIAL)  EXTP-047
C                                                                       EXTP-048
C ITYPX  -1  WOODS-SAXON POTENTIAL                                      EXTP-049
C        -2  FIRST DERIVATIVE   MULTIPLIED BY R/SQRT(4*PI)              EXTP-050
C        -3  SECOND DERIVATIVE  MULTIPLIED BY R**2/(8*PI)               EXTP-051
C        -4  THIRD DERIVATIVE   MULTIPLIED BY R**3/(48*PI**(3/2))       EXTP-052
C        -5  DEFORMED WOODS-SAXON POTENTIAL                             EXTP-053
C        -6  DERIVATIVE OF DEFORMED WOODS-SAXON POTENTIAL               EXTP-054
C        -7  LAGUERRE POLYNOMIAL                                        EXTP-055
C        -8  SOLUTION IN REAL WOODS-SAXON POTENTIAL                     EXTP-056
C        -9  BESSEL EXPANSION                                           EXTP-057
C       -10  LAGUERRE EXPANSION                                         EXTP-058
C L2X GIVES THE NUMBER OF DEFORMATIONS, OF NODES, OF BESSEL FUNCTIONS,  EXTP-059
C                      OF LAGUERRE POLYNOMIALS                          EXTP-060
C MLX IS THE L-VALUE OF BESSEL OR LAGUERRE EXPANSION, OR NUMBER OF BOUNDEXTP-061
C FUNCTIONS: =0 OR 1 FOR ONE WITH THE QUANTUM NUMBERS OF THE TRANSITION,EXTP-062
C            =2 FOR TWO FUNCTIONS WITH THE SAME ITYPX,                  EXTP-063
C            =3 WHEN ITYPX=-8 FOR LAGUERRE POLYNOMIAL AS THE SECOND ONE.EXTP-064
C MLX AND -L1X ARE QUANTUM NUMBERS OF VIBRATIONAL BAND                  EXTP-065
C -L1X GIVES THE MULTIPLICATION OF STEP IN COMPUTING BOUND FUNCTION     EXTP-066
C -L1X IS THE ORDER OF DERIVATION OF BESSEL OR LAGUERRE EXPANSION.      EXTP-067
C                                                                       EXTP-068
C ALLOWED VALUES OF ITYPX FOR STANDARD POTENTIALS                       EXTP-069
C ***********************************************                       EXTP-070
C **** ML IS 0 ****                                                     EXTP-071
C ITYPX =    -1       -2,-4    -5       -6       -7,-8    -9,-10        EXTP-072
C ITYP = 1   YES      NO       YES      NO       NO       YES           EXTP-073
C ITYP = 2   YES      NO       YES      NO       NO       YES           EXTP-074
C ITYP = 3   YES      NO       YES      NO       NO       YES           EXTP-075
C ITYP = 4   YES      NO       YES      NO       NO       YES           EXTP-076
C ITYP = 5   YES      NO       YES      NO       NO       YES           EXTP-077
C ITYP = 6   YES      NO       YES      NO       NO       YES           EXTP-078
C ITYP = 7   YES      NO       YES      NO       NO       YES           EXTP-079
C ITYP = 8   YES      NO       YES      NO       NO       YES           EXTP-080
C **** ML IS NOT 0 ****                                                 EXTP-081
C ITYP = 1   YES      YES      YES      YES      YES      YES           EXTP-082
C ITYP = 2   YES      YES      YES      YES      YES      YES           EXTP-083
C ITYP = 3   YES      YES      YES      YES      NO       YES           EXTP-084
C ITYP = 4   YES      YES      YES      YES      NO       YES           EXTP-085
C ITYP = 5   YES      YES      YES      YES      NO       YES           EXTP-086
C ITYP = 6   YES      YES      YES      YES      NO       YES           EXTP-087
C ITYP = 7   NO       YES      YES      YES      NO       YES           EXTP-088
C ITYP = 8   NO       YES      YES      YES      NO       YES           EXTP-089
C NUMBER OF PARAMETERS TO STORE                                         EXTP-090
C ITYPX = -1,-4       -5        -6        -7        -8        -9,-10    EXTP-091
C INTEGER 6           7         8         15        15        9         EXTP-092
C REAL*8  4           4+L2X     4+L2X     1         23        2+L2X     EXTP-093
C THE ODD NUMBER OF INTEGER NEEDED IS ROUNDED TO NEXT EVEN VALUE        EXTP-094
C THERE IS ONE MORE FOR COULOMB POTENTIALS AND ITYPX=-1 TO -6.          EXTP-095
C THERE ARE 5 MORE PARAMETERS FOR ITYPX=-7 AND MLX=2.                   EXTP-096
C THERE ARE 16 OR 6 MORE PARAMETERS FOR ITYPX=-8 AND MLX=2 OR MLX=3.    EXTP-097
C***********************************************************************EXTP-098
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER IMAx, INLs, INTc, INVc, INVd, ITX(16), ITXm, MR, MS, MW
      COMMON /INOUT / MR, MW, MS
      COMMON /POTE1 / ITX, IMAx, INTc, INLs, INVc, INVd, ITXm
C
C Dummy arguments
C
      INTEGER Idt, Ncoll, Ncolt, Nfa, Npp
      REAL*8 Fac(1), Pip(15,1), Va(150), Wv(18,1)
      INTEGER Ipi(11,*), Ipp(2,15,1), Iq(6,1), Ivq(3,1), Ivy(7,1),
     &        Ll(2,8,1), Niv(Ncoll,Ncoll,2), Nva(300)
      LOGICAL Lo(250)
C
C Local variables
C
      CHARACTER*8 aa(3,8)
      REAL*8 DCGS
      DOUBLE PRECISION DSQRT
      REAL*8 ex, ey
      INTEGER i, ityp, itypx, itypy, ityw, ityz, itz(10), j, k, l, l1,
     &        l1x, l2, l2x, lx, lxx, ly, lyy, lz, lzx, mint, ml, mlx,
     &        mly, nfold, nm, nm1, nm2, nm3, nma, nmb, nmc, nmd, nna,
     &        npx, nst, ntot, nvc, nvn
      INTEGER IABS, MAX0
      CHARACTER*4 ierm, last
C
C
      DATA aa/'      RE', 'AL VOLUM', 'E/SCALAR', ' IMAGINA',
     &     'RY VOLUM', 'E/SCALAR', '     REA', 'L SURFAC', 'E/VECTOR',
     &     '  IMAGIN', '. SURFAC', 'E/VECTOR', '  REAL S', 'PIN-ORBI',
     &     'T/TENSOR', ' IMAG. S', 'PIN-ORBI', 'T/TENSOR', '        ',
     &     '        ', ' COULOMB', '      SP', 'IN-ORBIT', ' COULOMB'/
      DATA itz/2, 2, 2, 2, 3, 4, 7, 7, 4, 4/
      DATA ierm/'LAST'/
      IF (Lo(99)) THEN
         WRITE (MW,99005)
99005    FORMAT (
     &' EXTERNAL FORM FACTORS NOT ALLOWED WITH SCHROEDINDER EQUIVALENT O
     &F DIRAC EQUATION')
         GOTO 300
      ELSE
         npx = Npp + INTc
         nma = 3 + 8*npx
         Nva(1) = nma
         IF (nma.GT.Idt) CALL MEMO('EXTP',Idt,nma,2)
C SETTING THE CONTROLS OF INPUT                                         EXTP-120
         ntot = 0
         DO i = 1, npx
            DO j = 1, 16
               Ll(1,j,i) = -1
               Ll(2,j,i) = -1
            ENDDO
            IF (i.GT.Npp) THEN
               k = i - Npp
               l = Ivy(2,k)
               IF (Ivq(2,l).GE.0) THEN
                  IF (.NOT.(Lo(12))) THEN
                     Ll(1,2,i) = 1
                     Ll(1,4,i) = 1
                  ENDIF
                  IF (Lo(100)) THEN
                     IF (Ivy(3,k).EQ.0) Ll(1,5,i) = 1
                     IF (Lo(114) .OR. Ivy(3,k).EQ.0) Ll(1,6,i) = 1
                     IF (Ivy(4,k).EQ.0) Ll(1,7,i) = 1
                     IF (Ivy(5,k).EQ.0) Ll(1,8,i) = 1
                  ELSE
                     IF (k.GT.INLs) Ll(1,5,i) = 1
                     IF (Lo(114) .OR. k.GT.INLs) Ll(1,6,i) = 1
                     IF (k.GT.INVc) Ll(1,7,i) = 1
                     IF (k.GT.INVd) Ll(1,8,i) = 1
                  ENDIF
               ELSE
                  DO l = 1, 6
                     Ll(1,l,i) = 1
                  ENDDO
                  Ll(1,8,i) = 1
               ENDIF
            ELSE
               IF (Lo(201)) Ll(1,5,i) = 1
               IF (Lo(202)) Ll(1,6,i) = 1
               IF (Lo(201)) Ll(1,8,i) = 1
            ENDIF
C COUNT OF FORM FACTORS TO BE READ                                      EXTP-151
            DO j = 1, 8
               IF (Ll(1,j,i).EQ. - 1) ntot = ntot + 1
            ENDDO
         ENDDO
         nfold = 0
   50    IF (ntot.LE.0) THEN
            Nva(2) = nfold
            Nva(3) = nma
            Nva(4) = nma
            IF (nfold.EQ.0) RETURN
            IF (Lo(173)) WRITE (MW,99010) nfold
99010       FORMAT (/2X,I3,' SETS OF FOLDING PARAMETERS')
            DO i = 1, nfold
               READ (MR,99290,ERR = 400) Va(nma), Va(nma + 1),
     &               Va(nma + 2)
               IF (Lo(173)) WRITE (MW,99015) i, Va(nma), Va(nma + 1),
     &                             Va(nma + 2)
99015          FORMAT (2X,I2,5X,' V =',F12.6,5X,' R =',F9.6,5X,' A =',
     &                 F9.6)
               Nva(4) = Nva(4) + 3
            ENDDO
            RETURN
         ELSE
C INPUT OF A FORM FACTOR                                                EXTP-158
            READ (MR,99285,ERR = 100) l1, l2, ml, ityp, l1x, l2x, mlx,
     &                                itypx, nst, nfold, mint
            IF (ityp.GT.8 .OR. IABS(nst).GT.Ncolt .OR. ityp.LE.0) THEN
               WRITE (MW,99020) ityp, nst, Ncolt
99020          FORMAT (/' ITYP =',I5,' NOT ALLOWED OR NST =',I5,
     &                 ' LARGER THAN NCOLT =',I3)
               GOTO 300
            ELSE
               nfold = MAX0(nfold,nfold)
               IF (IABS(ml).NE.0) THEN
C TEST FOR A TRANSITION                                                 EXTP-170
                  IF (l1.GT.Ncoll .OR. l2.GT.Ncoll) THEN
                     WRITE (MW,99025) ml, l1, l2, Ncoll
99025                FORMAT (' WITH ML =',I3,' L1 =',I3,' OR L2 =',I3,
     &                       ' IS LARGER THAN NCOLL =',I3)
                     GOTO 300
                  ELSE
                     ly = Niv(l1,l2,1) + IABS(ml) - 1
                     IF (ly.GT.Niv(l1,l2,2)) THEN
                        WRITE (MW,99030) ml, l1, l2
99030                   FORMAT (' ML =',I3,
     &                          ' TOO LARGE BETWEEN LEVELS L1 =',I3,
     &                          ' AND L2 =',I3)
                        GOTO 300
                     ELSE
                        lx = Iq(1,ly)
                        IF (ml.LE.0) THEN
                           lx = Ivy(6,lx)
                           IF (lx.LE.0) THEN
                              WRITE (MW,99035) l1, l2, ml
99035                         FORMAT (
     &        ' THERE IS NO CORRECTION TERM OF THE FORM FACTOR FOR L1 ='
     &        ,I3,'  L2 =',I3,'  ML =',I3)
                              GOTO 300
                           ENDIF
                        ENDIF
                        IF (.NOT.(Lo(100))) THEN
                           IF ((ityp.EQ.5) .OR. (ityp.EQ.6))
     &                         lx = Ivy(3,lx)
                           IF (ityp.GE.7) lx = Ivy(ityp - 3,lx)
                        ENDIF
                        lz = lx + Npp
                        IF (nst.EQ.0) nst = 1
                        IF (Lo(173)) WRITE (MW,99040)
     &                      (aa(k,ityp),k = 1,3), l1, l2, ml
99040                   FORMAT (/3A8,
     &                          ' TRANSITION POTENTIAL FROM LEVEL(',I2,
     &                          ') TO LEVEL(',I2,') AND THE ORDER ML =',
     &                          I2)
                     ENDIF
                  ENDIF
C TEST FOR A POTENTIAL                                                  EXTP-164
               ELSEIF (l1.NE.l2 .OR. l1.GT.Ncolt) THEN
                  WRITE (MW,99045) ml, l1, l2, Ncolt
99045             FORMAT (' WITH ML =',I2,' L1 =',I3,
     &                    ' IS NOT EQUAL TO L2 =',I3,
     &                    ' OR IS LARGER THAN NCOLT =',I3)
                  GOTO 300
               ELSE
                  lz = Ipi(5,l1)
                  IF (nst.EQ.0) nst = l1
                  IF (Lo(173)) WRITE (MW,99050) (aa(k,ityp),k = 1,3), lz
99050             FORMAT (/3A8,' POTENTIAL NR(',I2,')')
               ENDIF
C TEST IT IS NOT ALREADY READ AND THAT THERE IS PLACE                   EXTP-184
               IF (Ll(1,ityp,lz).NE. - 1) THEN
                  WRITE (MW,99055) l1, l2, ml, ityp
99055             FORMAT (' THE FORM FACTOR FOR L1 =',I3,'  L2 =',I3,
     &                    '  ML =',I3,'  AND ITYP =',I2,
     &                    ' IS ALREADY READ OR DOES NOT HAVE TO BE READ'
     &                    )
                  GOTO 300
               ELSE
                  IF (nma + 31.GT.Idt) CALL MEMO('EXTP',Idt,nma + 32,2)
                  ntot = ntot - 1
                  nna = 2*nma - 1
                  Nva(nna) = 8*lz + ityp
                  Nva(nna + 2) = nfold
                  IF (itypx.LT.0 .OR. l1x.LE.0) THEN
                     Nva(nna + 3) = mint
                     Nva(nna + 4) = nst
                     IF (itypx.LT.0) THEN
C STANDARD FORM FACTORS                                                 EXTP-270
                        IF (itypx.LT. - 10) THEN
                           WRITE (MW,99060) itypx
99060                      FORMAT (/' ITYPX =',I5,
     &                          ' NOT ALLOWED FOR STANDARD FORM FACTORS'
     &                          )
                           GOTO 300
                        ELSE
                           itypy = -itypx
                           IF (itypy.GE.9) THEN
                              IF ((ml.NE.0) .AND. (mlx.EQ.0))
     &                            mlx = Ivy(7,lx)
                              IF (mlx.LT.0) mlx = 0
                           ELSEIF (((itypy-1)*(itypy-5).NE.0) .AND.
     &                             ml.EQ.0) THEN
                              WRITE (MW,99065) itypx, ityp
99065                         FORMAT (' ITYPX,ITYP =',2I5,
     &'  NOT ALLOWED: CENTRAL POTENTIAL CANNOT BE DERIVATIVE OR BOUND FU
     &NCTION')
                              GOTO 300
                           ELSEIF ((itypy.EQ.1) .AND. (ml.NE.0) .AND.
     &                             (ityp.GE.7)) THEN
                              WRITE (MW,99070) itypx, ityp
99070                         FORMAT (' ITYPX,ITYP =',2I5,
     &'  NOT ALLOWED: COULOMB TRANSITION FORM FACTOR MUST BE DERIVATIVE'
     &)
                              GOTO 300
                           ELSEIF ((itypy.GE.7) .AND. (ityp.GT.2)) THEN
                              WRITE (MW,99075) itypx, ityp
99075                         FORMAT (' ITYPX,ITYP =',2I5,
     &'  NOT ALLOWED: BOUND STATE FUNCTION CAN BE ONLY REAL OR IMAGINARY
     & TRANSITION POTENTIAL')
                              GOTO 300
                           ENDIF
                           Nva(nna + 1) = itypy
                           nmb = nma + itz(itypy)
                           IF (itypy.GE.5) THEN
                              Nva(nna + 5) = l2x
                              Nva(nna + 6) = mlx
                              Nva(nna + 7) = -l1x
                              IF (itypy.EQ.7 .OR. itypy.EQ.8) THEN
                                 Ll(1,ityp + 2,lz) = 1
                                 ntot = ntot - 1
                                 IF (Lo(100)) THEN
                                    WRITE (MW,99080) itypx
99080                               FORMAT (' ITYPX =',I3,
     &                                '  NOT ALLOWED IN DIRAC FORMALISM'
     &                                )
                                    GOTO 300
                                 ELSE
                                    Nva(nna + 7) = -l1x
                                    IF (mlx.EQ.0) mlx = 1
                                    IF ((mlx.LT.0 .OR. mlx.GT.3) .OR.
     &                                  (mlx.EQ.3 .AND. itypy.EQ.7))
     &                                  THEN
                                       WRITE (MW,99085) mlx, itypx
99085                                  FORMAT (' L2X =',I3,
     &                                    '  NOT ALLOWED WITH ITYPX =',
     &                                    I4)
                                       GOTO 300
                                    ELSE
                                       Nva(nna + 6) = mlx
                                       mly = mlx
                                       nmd = nma + 2
                                       IF (Lo(173)) WRITE (MW,99090)
     &                                    nma, nmd,
     &                                    (Nva(nna + i - 1),i = 1,6)
99090                                  FORMAT (' USING PARAMETERS',I6,
     &                                    ' TO',I6,' TO STORE:',I4,3X,
     &                                    'TYPE:',I2,3X,'FOLD:',I2,3X,
     &                                    'INTG:',I2,3X,'STEP:',I2,5X,
     &                                    'MULT:',I3)
                                       nmd = nmd + 1
                                       k = Iq(2,ly)
                                       IF (mlx.GT.1) THEN
                                         READ (MR,99285)
     &                                      (Nva(nna + i),i = 7,14), nvc
                                         IF (Nva(nna + 9).EQ.1 .AND.
     &                                      nvc.EQ.0) Nva(nna + 9) = -3
                                         nmb = nma + 7
                                         Nva(nna + 15) = nma
                                         nmc = nmb + 1
                                         Va(nmc) = 1.D0
                                         IF (Nva(nna + 9).NE.1 .OR.
     &                                      Nva(nna + 13).NE.1 .OR.
     &                                      nvc.EQ.0) THEN
                                         IF (Lo(173)) WRITE (MW,99095)
     &                                      nmd, nmb,
     &                                      (Nva(nna + i),i = 6,15),
     &                                      nmc, Va(nmc)
99095                                    FORMAT (' USING PARAMETERS',I6,
     &                                      ' TO',I6,' TO STORE:'/I5,
     &                                      ' FUNCTIONS',
     &                                      2(2X,'N =',I2,3X,'L =',I3,
     &                                      3X,'2*S =',I2,3X,'2*J =',I3)
     &                                      ,5X,'START:',
     &                                      I5/' USING PARAMETER',I6,
     &                                      ' FOR MULTIPLICATIVE FACTOR'
     &                                      ,D18.8)
                                         GOTO 52
                                         ELSE
                                         Va(nmc)
     &                                      = DCGS(2*Ivq(1,k),Nva(nna +
     &                                      10),Nva(nna + 14),Fac,Nfa)
     &                                      *DSQRT
     &                                      (DFLOAT(2*Ivq(1,k) + 1))
                                         IF (Va(nmc).EQ.0.D0) THEN
                                         WRITE (MW,99100) Nva(nna + 8),
     &                                      Nva(nna + 12), k
99100                                    FORMAT (
     &                          ' NO PARTICLE-HOLE COUPLING WITH 2*JP ='
     &                          ,I3,' AND 2*JH =',I3,' TO L =',I3)
                                         GOTO 300
                                         ELSE
                                         IF (Lo(173)) WRITE (MW,99095)
     &                                      nmd, nmb,
     &                                      (Nva(nna + i),i = 6,15),
     &                                      nmc, Va(nmc)
                                         GOTO 52
                                         ENDIF
                                         ENDIF
                                       ELSE
                                         DO i = 1, 3
                                         Nva(nna + 7 + i) = Ivq(i,k)
                                         ENDDO
                                         Nva(nna + 11) = nma
                                         nmb = nmd + 2
                                         IF (Lo(173)) WRITE (MW,99105)
     &                                      nmd, nmb,
     &                                      (Nva(nna + i),i = 6,11)
99105                                    FORMAT (' USING PARAMETERS',I6,
     &                                      ' TO',I6,' TO STORE:',I2,
     &                                      ' FUNCTIONS   N =',I2,3X,
     &                                      'L =',I3,3X,'2*S =',I2,3X,
     &                                      '2*J =',I3,5X,'START:',I5)
                                         nmc = nmb
                                         GOTO 52
                                       ENDIF
                                    ENDIF
                                 ENDIF
                              ELSE
                                 Nva(2*nmb - 1) = nma
                              ENDIF
                           ENDIF
                           Nva(2*nmb) = nma
                           Ll(1,ityp,lz) = nmb + 1
                           IF (.NOT.(Lo(73))) THEN
                              IF (itypy.GE.9) WRITE (MW,99110) nma, nmb,
     &                            (Nva(nna + i - 1),i = 1,9)
99110                         FORMAT (' USING PARAMETERS',I6,' TO',I6,
     &                                ' TO STORE:'/I5,3X,'TYPE:',I2,3X,
     &                                'FOLD:',I2,3X,'INTG:',I2,3X,
     &                                'STEP:',I2,I6,' FUNCTIONS  L:',I3,
     &                                I4,' DERIVATIONS  START:',I5)
                              IF (itypy.EQ.6) WRITE (MW,99115) nma, nmb,
     &                            (Nva(nna + i - 1),i = 1,9)
99115                         FORMAT (' USING PARAMETERS',I6,' TO',I6,
     &                                ' TO STORE:'/I5,3X,'TYPE:',I2,3X,
     &                                'FOLD:',I2,3X,'INTG:',I2,3X,
     &                                'STEP:',I2,I6,
     &                                ' DEFORMATIONS   LBET:',I5,5X,
     &                                'KBET:',I5,5X,'START:',I5)
                              IF (itypy.EQ.5) WRITE (MW,99120) nma, nmb,
     &                            (Nva(nna + i - 1),i = 1,7)
99120                         FORMAT (' USING PARAMETERS',I6,' TO',I6,
     &                                ' TO STORE:'/I5,3X,'TYPE:',I2,3X,
     &                                'FOLD:',I2,3X,'INTG:',I2,3X,
     &                                'STEP:',I2,I6,' DEFORMATIONS',5X,
     &                                'START:',I5)
                              IF (itypy.LT.5) WRITE (MW,99125) nma, nmb,
     &                            (Nva(nna + i - 1),i = 1,6)
99125                         FORMAT (' USING PARAMETERS',I6,' TO',I6,
     &                                ' TO STORE:',I4,3X,'TYPE:',I2,3X,
     &                                'FOLD:',I2,3X,'INTG:',I2,3X,
     &                                'STEP:',I2,5X,'START:',I5)
                           ENDIF
                           IF (itypy.LT.9) THEN
                              nma = nmb + 1
                              nmb = nmb + 4
                              IF (ityp.GT.6) nmb = nmb + 1
                              READ (MR,99290,ERR = 200)
     &                              (Va(i),i = nma,nmb)
                              IF (itypy.LE.6) THEN
                                 k = IABS(nst)
                                 IF (k.NE.nst) THEN
                                    IF (Lo(173)) WRITE (MW,99130)
     &                                  Va(nma), Va(nma + 1)
99130                               FORMAT (' VALUES READ:',F12.6,3X,
     &                                 F9.6)
                                    ex = Wv(2,k)**.33333333333333D0
                                    ey = ex
                                    IF (Lo(16)) ex = ex + Wv(1,k)
     &                                  **.33333333333333D0
                                    ey = ey/ex
                                    Va(nma + 1) = Va(nma + 1)*ex
                                    IF (.NOT.(Lo(116) .OR. ml.EQ.0))
     &                                  THEN
                                       ityz = itypy
                                       IF (ityz.GE.5) ityz = ityz - 4
                                       ityw = 1
                                       k = Iq(2,ly)
                                       IF (ityp.GT.6)
     &                                    ityw = ityw*Ivq(1,k)
                                       IF (Lo(6)) ityw = ityw - 1
                                       IF (ityz.GT.1) Va(nma) = Va(nma)
     &                                    *ey**((ityz - 1)*ityw)
                                    ENDIF
                                 ENDIF
                              ENDIF
                              IF (Lo(173)) WRITE (MW,99135) nma, nmb,
     &                            (Va(i),i = nma,nmb)
99135                         FORMAT (' USING PARAMETERS',I6,' TO',I6,
     &                                ' FOR'/' DEPTH',F12.6,
     &                                ' MEV  RADIUS',F10.6,
     &                                ' F  DIFFUSENESS',F9.6,
     &                                ' F AT THE POWER (1.+',F9.6,')',
     &                                2X,F9.6,' (3RD COUL. PARM.)'/)
                              IF (itypy.LT.5) GOTO 58
                           ENDIF
                           nma = nmb + 1
                           nmc = nma
                           IF (itypy.GE.9) nmc = nmc + 2
                           nmb = nmc + l2x - 1
                           IF (nmb.GT.Idt) CALL MEMO('EXTP',Idt,nmb,2)
                           READ (MR,99290,ERR = 200) (Va(i),i = nma,nmb)
                           IF ((itypy.GE.9) .AND. (Va(nma).EQ.0.D0))
     &                         Va(nma) = 1.D0
                           IF (nst.LE.0 .AND. itypy.LT.9) THEN
                              IF (Lo(173)) WRITE (MW,99140)
     &                            (Va(i),i = nma,nmb)
99140                         FORMAT (' DEFORMATIONS READ:',
     &                                8F10.5/(19X,8F10.5))
                              DO i = nma, nmb
                                 j = i - nma
                                 IF (ityp.LT.7) j = 0
                                 IF (Lo(106)) j = j + 1
                                 Va(i) = Va(i)*ey**j
                              ENDDO
                           ENDIF
                           IF (.NOT.(Lo(73))) THEN
                              IF (itypy.GE.9) WRITE (MW,99145) nma, nmb,
     &                            Va(nma), Va(nma + 1), l2x,
     &                            (i,Va(i),i = nmc,nmb)
99145                         FORMAT (' USING PARAMETERS',I6,' TO',I6,
     &                                ' FOR STRENGTH:',F12.6,10X,
     &                                'SCALE:',F12.6/' AND TO STORE',I5,
     &          ' BESSEL FUNCTION OR LEGENDRE POLYNOMIALS COEFFICIENTS:'
     &          /(6(3X,I5,F10.5)))
                              IF (itypy.LT.9) WRITE (MW,99150) nma, nmb,
     &                            l2x, (i,Va(i),i = nma,nmb)
99150                         FORMAT (' USING PARAMETERS',I6,' TO',I6,
     &                                ' FOR',I5,
     &                                ' DEFORMATIONS:'/(6(3X,I5,F10.5)))
                           ENDIF
                           GOTO 58
                        ENDIF
   52                   nmc = nmc + 1
                        Ll(1,ityp,lz) = nmb + 1
                        IF (itypy.EQ.8) THEN
   54                      nmb = nmc + 10
                           READ (MR,99290,ERR = 200) (Va(i),i = nmc,nmb)
                           IF (Va(nmc + 4).EQ.0.D0) Va(nmc + 4) = 35.D0
                           IF (Lo(173)) WRITE (MW,99155) nmc, nmb,
     &                         (Va(i),i = nmc,nmb)
99155                      FORMAT (' USING PARAMETERS',I6,' TO',I6,
     &                             ' TO STORE:'/' **** BINDING ENERGY',
     &                             F12.6,' MEV ****',2X,'TOTAL MASS',
     &                             F12.6,2X,'PARTICLE MASS',F12.6,2X,
     &                             'PRODUCT OF CHARGES',F8.2/
     &                         ' SEARCH ON DEPTH OF REAL POTENTIAL FROM'
     &                         ,F12.6,' WITH REDUCED RADIUS',F10.6,
     &                         ' FERMI AND DIFFUSENESS',F10.6,
     &                         ' FERMI'/' SPIN-ORBIT POTENTIAL  DEPTH:',
     &                         F12.6,' MEV  RADIUS:',F10.6,
     &                         ' F  DIFFUSENESS:',F9.6,
     &                         ' F  COULOMB RADIUS:',F10.6,' F'/)
                           IF (mlx.EQ.1 .AND. mly.EQ.2 .AND.
     &                         Va(nmc - 10).LT.0.D0 .AND. Va(nmc)
     &                         .LT.0.D0) THEN
                              WRITE (MW,99160) Va(nmc - 10), Va(nmc)
99160                         FORMAT (
     &              ' FOR ITYP=-8 AND TWO FUNCTIONS, BOTH ARE UNBOUNDED'
     &              ,2F12.6)
                              GOTO 300
                           ELSE
                              nmc = nmb + 1
                              mlx = mlx - 2
                              IF (mlx.NE.1) THEN
                                 IF (mlx.NE.0) GOTO 58
                                 GOTO 54
                              ENDIF
                           ENDIF
                        ENDIF
                        READ (MR,99290,ERR = 200)
     &                        (Va(nmc + i - 1),i = 1,mlx)
                        IF (mlx.EQ.2 .AND. Va(nmc + 1).EQ.0.)
     &                      Va(nmc + 1) = Va(nmc)
                        nmb = nmc + mlx - 1
                        IF (Lo(173)) WRITE (MW,99165) nmc, nmb,
     &                      (Va(i),i = nmc,nmb)
99165                   FORMAT (' USING PARAMETERS',I6,' TO',I6,
     &                          ' FOR THE OSCILLATOR PARAMETER',2F10.5)
                     ELSE
                        Nva(nna + 5) = nma
                        Ll(1,ityp,lz) = nma + 3
C FORM FACTOR READ FROM CARDS                                           EXTP-250
                        READ (MR,99290,ERR = 200) Va(nma + 3),
     &                        Va(nma + 4)
                        IF (Va(nma + 3).EQ.0.D0) Va(nma + 3) = 1.D0
                        IF (Va(nma + 4).EQ.0.D0) Va(nma + 4) = 1.D0
                        nm = nma + 5
   56                   nmb = nm + 3
                        IF (nmb.GT.Idt) CALL MEMO('EXTP',Idt,nmb,2)
                        READ (MR,99170,ERR = 200) (Va(i),i = nm,nmb),
     &                        last
99170                   FORMAT (F10.5,F20.10,F10.5,F20.10,A4)
                        nm = nmb + 1
                        IF (last.NE.ierm) GOTO 56
                        nvn = nma + 2
                        nm1 = nvn + 1
                        nm2 = nvn + 2
                        nm3 = nvn + 3
                        Nva(2*nma) = 1 - (nmb - nvn)/2
                        IF (Lo(173)) WRITE (MW,99175) nma, nvn,
     &                      (Nva(nna + i - 1),i = 1,6), nm1, nm2,
     &                      Va(nm1), Va(nm2), nm3, nmb,
     &                      (Va(i),i = nm3,nmb)
99175                   FORMAT (' USING PARAMETERS',I6,' TO',I6,
     &                          ' TO STORE:'/I5,5X,'NB POINTS:',I5,5X,
     &                          'FOLD:',I2,5X,'INTG:',I2,5X,'STEP:',I2,
     &                          5X,'START:',I5/5X,'PARAMETERS',I6,' TO',
     &                          I6,' TO STORE:'/20X,'STRENGTH:',F15.6,
     &                          10X,'SCALE:',F15.6/' AND PARAMETERS',I6,
     &                          ' TO',I6,' TO STORE:'/4(6X,'RADIUS',7X,
     &                          'POTENTIAL',2X)
     &                          /(4(2X,0P,F10.5,3X,1P,D15.7)))
                        Ll(2,ityp,lz) = nmb
                        nma = nmb + 1
                        GOTO 65
                     ENDIF
   58                Ll(2,ityp,lz) = nmb
                     nma = nmb + 1
                  ELSE
                     Nva(nna + 5) = nma
                     nmd = nma + 3
                     Ll(1,ityp,lz) = nmd
                     Va(nmd) = 1.D0
                     IF (mint.LT.0) READ (MR,99290,ERR = 200) Va(nmd)
C USE OF ALREADY STORED FORM FACTOR/TEST EXISTENCE OF COPIED FORM FACTOREXTP-197
                     IF (ityp.NE.itypx) THEN
                        WRITE (MW,99180) l1, l2, ml, ityp, l1x, l2x,
     &                         mlx, itypx
99180                   FORMAT (/
     &' DIFFERENT TYPES NOT ALLOWED TO COPY FOR FORM FACTORS L1/L2/ML/IT
     &YP/L1X/L2X/MLX/ITYPX :'/30X,8I5)
                        GOTO 300
                     ELSE
                        IF (ml.NE.0) THEN
                           IF (l1x.GT.Ncoll .OR. l2x.GT.Ncoll) THEN
                              WRITE (MW,99185) mlx, l1x, l2x, Ncoll
99185                         FORMAT (' WITH MLX =',I3,' L1X =',I3,
     &                                ' OR L2X =',I3,
     &                                ' IS LARGER THAN NCOLL =',I3)
                              GOTO 300
                           ELSE
                              lyy = Niv(l1x,l2x,1) + mlx - 1
                              IF (lyy.GT.Niv(l1x,l2x,2)) THEN
                                 WRITE (MW,99190) mlx, l1x, l2x, Ncoll
99190                            FORMAT (' MLX =',I3,
     &                              ' TOO LARGE BETWEEN LEVELS L1X =',
     &                              I3,' AND L2X =',I5)
                                 GOTO 300
                              ELSE
                                 lxx = Iq(1,lyy)
                                 IF (.NOT.(Lo(100))) THEN
                                    IF ((ityp.EQ.5) .OR. (ityp.EQ.6))
     &                                  lxx = Ivy(3,lxx)
                                    IF (ityp.GE.7)
     &                                  lxx = Ivy(ityp - 3,lxx)
                                 ENDIF
                                 lzx = lxx + Npp
                                 IF (Lo(173)) WRITE (MW,99195) l1x, l2x,
     &                               mlx, itypx, l1, l2, ml
99195                            FORMAT (' TRANSITION POTENTIAL L1(',I2,
     &                              ') L2(',I2,') ML(',I2,') TYP(',I2,
     &                              ') IS COPIED TO L1(',I2,') L2(',I2,
     &                              ') ML(',I2,')')
                              ENDIF
                           ENDIF
                        ELSEIF (l1x.NE.l2x .OR. l1x.GT.Ncolt) THEN
                           WRITE (MW,99200) mlx, l1x, l2x, Ncolt
99200                      FORMAT (' WITH MLX =',I2,' L1X =',I3,
     &                             ' IS NOT EQUAL TO L2X =',I3,
     &                             ' OR IS LARGER THAN NCOLT =',I3)
                           GOTO 300
                        ELSE
                           lzx = Ipi(5,l1x)
                           IF (Lo(173)) WRITE (MW,99205) l1x, itypx, l1
99205                      FORMAT (' THE ELASTIC POTENTIAL NR(',I2,
     &                             ') TYP(',I1,') IS COPIED TO NR(',I2,
     &                             ')')
                        ENDIF
   60                   nmc = Ll(1,ityp,lzx)
                        IF (nmc.EQ. - 1) THEN
                           WRITE (MW,99210) mlx, l1x, l2x, itypx
99210                      FORMAT (' FORM FACTOR DEFINED BY L1X =',I3,
     &                             '  L2X =',I3,'  MLX =',I3,
     &                             '  ITYPX =',I3,' NOT YET DEFINED')
                           GOTO 300
                        ELSE
C USE OF ALREADY STORED FORM FACTOR/TEST POSSIBILITY TO COPY            EXTP-215
                           nmb = Nva(2*nmc - 2)
                           itypx = -Nva(2*nmb)
                           IF (Nva(2*nmb + 1).EQ.0 .AND. nfold.NE.0)
     &                         Nva(2*nmb + 1) = -1
                           IF (Nva(2*nmb + 1).NE.0 .AND. nfold.EQ.0)
     &                         Nva(2*nma + 1) = -1
                           IF (itypx.NE. - 16) THEN
                              IF (itypx.LE. - 5 .AND. ml.NE.0) THEN
                                 IF (itypx.EQ. - 7 .OR. itypx.EQ. - 8)
     &                               THEN
                                    Ll(1,ityp + 2,lz) = 1
                                    ntot = ntot - 1
                                    nmb = nmb + itz( - itypx)
                                    IF (Nva(2*nmb - 1).NE.1) THEN
                                       IF (Nva(2*nmb + 2).NE.1 .OR.
     &                                    Nva(2*nmb + 6).NE.1) GOTO 62
                                       k = Iq(2,ly)
                                       Va(nmd)
     &                                    = DCGS(2*Ivq(1,k),Nva(2*nmb +
     &                                    3),Nva(2*nmb + 7),Fac,Nfa)
     &                                    *DSQRT(2.D0*Ivq(1,k) + 1.D0)
     &                                    /Va(nmc)
                                       IF (Va(nmd).NE.0.D0) GOTO 62
                                       WRITE (MW,99100) Nva(nna + 8),
     &                                    Nva(nna + 12), k
                                       GOTO 300
                                    ENDIF
                                 ENDIF
                                 IF (Iq(2,ly).NE.Iq(2,lyy)) THEN
                                    WRITE (MW,99215) itypx, Iq(2,lyy),
     &                                 Iq(2,ly)
99215                               FORMAT (' COPY WITH ITYPX =',I3,
     &           ' NOT ALLOWED BETWEEN TRANSITIONS WITH QUANTUM NUMBERS'
     &           ,I2,' AND',I2)
                                    GOTO 300
                                 ENDIF
                              ENDIF
   62                         Nva(nna + 1) = 16
                              Nva(nna + 3) = 8*lzx + ityp
                              Nva(nna + 4) = nma
                              nmb = nma + 2
                              IF (Lo(173)) WRITE (MW,99220) nma, nmb,
     &                            (Nva(nna + i),i = 0,4), nmd, Va(nmd)
99220                         FORMAT (' USING PARAMETERS',I6,' TO',I6,
     &                                ' FOR COPY TO:',I5,5X,'(COPY):',
     &                                I3,5X,'FOLD =',I3,5X,'FROM:',I5,
     &                                5X,'START:',I5/' USING PARAMETER',
     &                                I6,' FOR MULTIPLICATIVE FACTOR',
     &                                D15.8)
                              Ll(2,ityp,lz) = nmd
                              nma = nmd + 1
                           ELSE
                              lzx = (Nva(2*nmb + 2) - 1)/8
                              GOTO 60
                           ENDIF
                        ENDIF
                     ENDIF
                  ENDIF
   65             IF (Lo(110) .OR. lz.GT.Npp) GOTO 50
                  nmc = Ll(1,ityp,lz)
                  ex = Va(nmc)
                  IF (Ipp(1,2,lz).NE.0 .AND. ex.EQ.0.D0 .AND. ityp.EQ.2)
     &                THEN
                     WRITE (MW,99225) lz, Ipp(1,2,lz), ex
99225                FORMAT (' THE POTENTIAL',I4,
     &' CANNOT BE USED FOR DISPERSION RELATIONS BECAUSE THE VOLUME IMAGI
     &NARY STRENGTH IS 0:'/10X,'NV =',I3,'  WV =',D13.6)
                     GOTO 300
                  ELSEIF (Ipp(2,2,lz).NE.0 .AND. ex.EQ.0.D0 .AND.
     &                    ityp.EQ.4) THEN
                     WRITE (MW,99230) lz, Ipp(2,2,lz), ex
99230                FORMAT (' THE POTENTIAL',I4,
     &' CANNOT BE USED FOR DISPERSION RELATIONS BECAUSE THE SURFACE IMAG
     &INARY STRENGTH IS 0:'/10X,'NS =',I3,'  WS =',D13.6)
                     GOTO 300
                  ELSEIF (Pip(15,lz).NE.0.D0 .AND. ex.EQ.0.D0 .AND.
     &                    ityp.EQ.1) THEN
                     WRITE (MW,99235) lz, lz, Pip(15,lz), ex
99235                FORMAT (' THE POTENTIAL',I4,
     &' CANNOT BE USED WITH VARIATION OF THE HARTREE-FOCK POTENTIAL OF W
     &HICH THE STRENGTH IS 0':/10X,'PIP(15,',I2,') =',D13.6,'  V =',
     &D13.6)
                     GOTO 300
                  ELSEIF (Pip(7,lz).NE.0.D0 .AND. ex.EQ.0.D0 .AND.
     &                    ityp.EQ.5) THEN
                     WRITE (MW,99240) lz, lz, Pip(7,lz), ex
99240                FORMAT (' THE POTENTIAL',I4,
     &' CANNOT BE USED WITH VARIATION OF THE REAL SPIN-ORBIT OF WHICH TH
     &E STRENGTH IS 0':/10X,'PIP(7,',I2,') =',D13.6,'  VLS =',D13.6)
                     GOTO 300
                  ELSE
                     IF (Pip(8,lz).EQ.0.D0 .OR. ex.NE.0.D0 .OR.
     &                   ityp.NE.6) GOTO 50
                     WRITE (MW,99245) lz, lz, Pip(8,lz), ex
99245                FORMAT (' THE POTENTIAL',I4,
     &' CANNOT BE USED WITH VARIATION OF THE IMAGINARY SPIN-ORBIT OF WHI
     &CH THE STRENGTH IS 0':/10X,'PIP(8,',I2,') =',D13.6,'  WLS =',
     &D13.6)
                     GOTO 300
                  ENDIF
               ENDIF
            ENDIF
         ENDIF
      ENDIF
  100 WRITE (MW,99250)
99250 FORMAT (' INPUT ERROR IN THE FIRST CARD DEFINING THE POTENTIAL')
      GOTO 300
  200 WRITE (MW,99255) ityp, lz
99255 FORMAT (' INPUT ERROR FOR THE POTENTIAL (',I2,',',I2,')')
  300 IF (ntot.NE.0) THEN
         WRITE (MW,99260) ntot, Npp
99260    FORMAT (I6,
     &' FORM FACTORS TO READ, FOR (ITYP, N  )  ( POTENTIALS FOR N SMALLE
     &R THAN',I2,' TRANSITIONS AFTER)')
         DO j = 1, npx
            DO i = 1, 8
               IF (Ll(1,i,j).EQ. - 1) THEN
                  IF (j.GT.Npp) THEN
                     WRITE (MW,99265) (aa(k,i),k = 1,3), j - Npp
99265                FORMAT (10X,3A8,' MISSING FOR TRANSITION',I4)
                  ELSE
                     WRITE (MW,99270) (aa(k,i),k = 1,3), j
99270                FORMAT (10X,3A8,' MISSING FOR POTENTIAL',I4)
                  ENDIF
               ENDIF
            ENDDO
         ENDDO
      ENDIF
      GOTO 500
  400 WRITE (MW,99275) i, nfold
99275 FORMAT (' INPUT ERROR FOR THE',I4,'TH SET OF THE',I4,
     &        ' SETS OF FOLDING PARAMETERS TO BE READ')
  500 WRITE (MW,99280)
99280 FORMAT (' IN EXTP  .... STOP ....')
      STOP
99285 FORMAT (12I5)
99290 FORMAT (7F10.5)
      END
C 01/01/04                                                      ECIS03  DCGS-000
      FUNCTION DCGS(L,J1,J2,Fac,Nfa)
C   CGS(L,J1,J2) =                                                      DCGS-002
C                                 /~~~~~~~~~~~~~~~~   ( J2   L   J1  )  DCGS-003
C  CGS(L,J1,J2) = (-)**(J1+1/2)  / (2*J1+1)*(2*J2+1)  (              )  DCGS-004
C                               V                     (-1/2  0   1/2 )  DCGS-005
C  WHEN J1 AND J2 ARE HALF-INTEGERS                                     DCGS-006
C                              ( J2  L  J1 )                            DCGS-007
C  CGS(L,J1,J2) = (-)**(J1-1)  (           )                            DCGS-008
C                              (  0  0  0  )                            DCGS-009
C  WHEN J1 AND J2  ARE INTEGERS                                         DCGS-010
C L,J1,J2 ARE INTEGER DOUBLE VALUES.                                    DCGS-011
C FAC IS A TABLE OF LOGARITHM OF FACTORIALS AND NFA ITS LENGTH.         DCGS-012
C***********************************************************************DCGS-013
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C Dummy arguments
C
      INTEGER J1, J2, L, Nfa
      REAL*8 DCGS
      REAL*8 Fac(1)
C
C Local variables
C
      DOUBLE PRECISION DEXP
      INTEGER l1, l2, l3, l4, ll, lt, n1, n2, n3, n4
C
C
      IF (L.LT.0 .OR. J1.LT.0 .OR. J2.LT.0) THEN
         DCGS = 0.D0
         DCGS = 2.D0*DCGS
      ELSE
         ll = L + J1 + J2 + 2
         lt = ll/2
         IF (2*lt.NE.ll) THEN
            DCGS = 0.D0
            DCGS = 2.D0*DCGS
         ELSEIF (lt.GE.Nfa) THEN
            DCGS = 0.D0
            DCGS = 2.D0*DCGS
         ELSE
            l1 = lt - J1
            l2 = lt - J2
            l3 = lt - L
            IF (l1.LE.0 .OR. l2.LE.0 .OR. l3.LE.0) THEN
               DCGS = 0.D0
               DCGS = 2.D0*DCGS
            ELSE
               l4 = lt + 1
               n1 = (l1 + 1)/2
               n2 = (l2 + 1)/2
               n3 = (l3 + 1)/2
               n4 = (l4 + 1)/2
               DCGS = DEXP(Fac(n4) - Fac(n1) - Fac(n2) - Fac(n3)
     &                - .5D0*(Fac(l4) - Fac(l1) - Fac(l2) - Fac(l3)))
               IF (2*(n1/2).NE.n1) DCGS = -DCGS
               IF (n4 - n1 - n2 - n3 + 1.LT.0) THEN
               ELSEIF (n4 - n1 - n2 - n3 + 1.EQ.0) THEN
                  DCGS = 2.D0*DCGS
               ELSE
                  DCGS = 0.D0
                  DCGS = 2.D0*DCGS
               ENDIF
            ENDIF
         ENDIF
      ENDIF
      END
C 01/01/04                                                      ECIS03  CONU-000
      SUBROUTINE CONU(Ix,Ipi,Wv,Ipim,Wvm,Nci,Xd,Scn,Kxt,Lo)
C DISCRETISATION OF CONTINUA FOR COMPOUND NUCLEUS                       CONU-002
C INPUT VARIABLES:   IX:  0 FOR COUNT OF POINTS                         CONU-003
C               ANY OTHER VALUE FOR COMPUTATION OF POINTS, WEIGHTS, ... CONU-004
C                    WV:        SEE CALX                                CONU-005
C                    SCN:       DESCRIPTIONS OF LEVEL DENSITIES         CONU-006
C                    LO:        LOGICAL CONTROLS                        CONU-007
C OUTPUT VARIABLES:  IPIM,WVM:  IPI,WV FOR CONTINUA OF COMP. NUCLEUS    CONU-008
C                    NCI: STARTING AND FINAL ADDRESSES FOR CONTINUA     CONU-009
C                    XD:  STEPS OF DISCRETISATION OF CONTINUA           CONU-010
C                          ENERGY AND SPIN DEPENDENCE OF LEVEL DENSITIESCONU-011
C                    KXT: NUMBER OF TRANSMISSION COEFFICIENTS           CONU-012
C IN SCN:  1-SA  2-UX   3-TAU  4-SG   5-E0   6-EX   7-NZ  B IS SCNB     CONU-013
C FOR COMMON /NCOMP/  SEE CALX, LECT AND COLF                           CONU-014
C***********************************************************************CONU-015
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      REAL*8 ACN1, ACN2, AZ(18), CCZ, CHB, CK, CM, CMB, XE, XM, XN, XZ
      INTEGER MR, MS, MW, NCOj, NCOlx, NCOns, NCOnt, NDP, NDQ, NIE,
     &        NSP(5)
      COMMON /DCONS / CM, CK, CHB, CMB, CCZ
      COMMON /DCONT / XE, XM, XN, XZ
      COMMON /INOUT / MR, MW, MS
      COMMON /NCOMP / NSP, NCOnt, NCOj, NCOns, NIE, NCOlx, NDP, NDQ,
     &                ACN1, ACN2, AZ
C
C Dummy arguments
C
      INTEGER Ix, Kxt
      INTEGER Ipi(11,*), Ipim(11,1), Nci(2,1)
      LOGICAL Lo(250)
      REAL*8 Scn(7,1), Wv(18,1), Wvm(18,1), Xd(3,1)
C
C Local variables
C
      REAL*8 acn3, amr, amrd, amt, e, ebyt, ecn, estp, exd, hpc, hrec,
     &       rec, scnb, wsk2
      DOUBLE PRECISION DABS, DEXP, DSQRT
      INTEGER i, iv, j, jy, k, ly, ne
      INTEGER IDINT
C
C
C DISCRETISATION OF CONTINUUM FOR COMPOUND NUCLEUS                      CONU-025
      NIE = 0
      IF (Ix.NE.0) THEN
         amrd = XM/CM
         amr = Wv(3,1)/CM + Wv(1,1) + Wv(2,1)
         Kxt = Ipi(8,NCOlx + 1 - NCOnt)
      ENDIF
      DO i = 1, NCOnt
         j = i + NCOns - NCOnt
         scnb = DEXP(2.D0*DSQRT(Scn(1,j)*Scn(2,j))
     &          - (Scn(6,j) - Scn(5,j))/Scn(3,j))*Scn(3,j)
     &          /(Scn(1,j)**.5D0*Scn(2,j)**1.5D0)
         iv = i - NCOnt + NCOlx
         Nci(1,i) = NIE + 1
         IF (Wv(3,iv).GT.0.D0) THEN
            ne = 0
            e = Wv(3,iv)
            acn3 = 1.D0/ACN2
            IF (e*ACN2.LT.1.D0) acn3 = e/1.9D0
            IF (Ix.NE.0) THEN
               hrec = Wv(11,iv)
               rec = 1.D0
               IF (Lo(193) .AND. Wv(1,1).NE.Wv(1,iv)) rec = Wv(2,1)
     &             /Wv(2,iv)
               IF (.NOT.(Lo(108))) THEN
                  amt = Wv(2,iv)
                  IF (.NOT.(Lo(209))) THEN
                     IF (Lo(44)) amt = Wv(2,1)
                     amrd = (amr**4 - (Wv(1,iv)**2 - amt**2)**2)
     &                      /(4.D0*amr**3)
                  ENDIF
               ENDIF
            ENDIF
   20       IF (e.GT.0.D0) THEN
               NIE = NIE + 1
               IF (ne.NE.0) THEN
                  estp = acn3
               ELSEIF (e.LT.ACN1*acn3) THEN
                  ne = IDINT(e/acn3 + 1.D0)
                  IF (ne.EQ.1) ne = 2
                  acn3 = e/DFLOAT(ne)*1.000001D0
                  estp = acn3
               ELSE
                  estp = e/ACN1
               ENDIF
               IF (e.LT.estp) estp = e
               ecn = e - .5D0*estp
               e = e - estp
               IF (Ix.EQ.0) GOTO 20
               DO k = 1, 16
                  Wvm(k,NIE) = Wv(k,iv)
               ENDDO
               DO k = 1, 11
                  Ipim(k,NIE) = Ipi(k,iv)
               ENDDO
               Wvm(3,NIE) = ecn
               Xd(2,NIE) = estp
               IF (Lo(8)) THEN
                  Wvm(2,NIE) = Wv(1,1) + Wv(2,1) - Wvm(1,NIE) + ecn/CM
                  wsk2 = 0.125D0*CK*Wvm(3,NIE)
     &                   *(Wvm(3,NIE)/CM + 2.D0*Wvm(1,NIE) + 2.D0*amt)
     &                   *(Wvm(3,NIE)/CM + 2.D0*Wvm(1,NIE))
     &                   *(Wvm(3,NIE)/CM + 2.D0*amt)/amr**2
                  Wvm(12,NIE) = Wvm(3,NIE)
     &                          *(Wvm(3,NIE)/(2.D0*CM) + Wvm(1,NIE)
     &                          + Wvm(2,NIE))/Wvm(2,NIE)
               ELSE
                  wsk2 = CK*Wvm(3,NIE)*amrd
                  Wvm(12,NIE) = Wvm(3,NIE)*(Wvm(1,NIE) + Wvm(2,NIE))
     &                          /Wvm(2,NIE)
               ENDIF
               Wvm(4,NIE) = DSQRT(DABS(wsk2))
               Wvm(9,NIE) = Wvm(4,NIE)*rec
               Wvm(8,NIE) = hrec*DSQRT(CK*amrd)
               Wvm(10,NIE) = hrec*hrec*wsk2
               IF (Lo(209)) THEN
                  hpc = CHB*Wvm(4,NIE)
                  Wvm(7,NIE) = DSQRT(hpc**2 + XM**2)
                  Wvm(5,NIE) = CCZ*Ipi(4,iv)/Wvm(4,NIE)*Wvm(7,NIE)
     &                         /CHB**2
               ELSE
                  Wvm(5,NIE) = 0.5D0*CK*CCZ*amrd*Ipi(4,iv)/Wvm(4,NIE)
               ENDIF
               ly = 4 + IDINT(3.3D0*DSQRT(Wvm(3,NIE)))
               IF (DABS(Wvm(5,NIE)).LE.400.D0) THEN
                  Ipim(10,NIE) = ly - 1
                  Ipim(8,NIE) = Kxt
                  Kxt = Kxt + ly*Ipim(2,NIE)
                  IF (Wv(3,1) - Wvm(3,NIE).GT.Scn(6,j)) THEN
                     exd = Wv(3,1) - Wvm(3,NIE) + Scn(2,j) - Scn(6,j)
                     ebyt = DSQRT(Scn(1,j)*exd)
                     Xd(1,NIE) = Xd(2,NIE)*DEXP(2.D0*ebyt)
     &                           /(ebyt*exd*scnb)
                     Xd(3,NIE) = 2.D0*Scn(4,j)**2*DSQRT(exd/Scn(2,j))
                  ELSE
                     Xd(1,NIE) = Xd(2,NIE)
     &                           *DEXP((Wv(3,1) - Wvm(3,NIE) - Scn(5,j))
     &                           /Scn(3,j))/Scn(3,j)
                     Xd(3,NIE) = 2.D0*Scn(4,j)**2
                  ENDIF
                  GOTO 20
               ENDIF
            ENDIF
         ENDIF
         IF (Ix.NE.0) THEN
            jy = NIE - Nci(1,i) + 1
            WRITE (MW,99005) i, jy
99005       FORMAT (' ***** START OF',I4,'TH CONTINUUM *****',5X,I5,
     &              ' DISCRETISATION POINTS')
            Nci(2,i) = NIE
         ENDIF
      ENDDO
      RETURN
      END
C 01/01/04                                                      ECIS03  DISP-000
      SUBROUTINE DISP(Ipi,Wv,Ipp,Pip,Nval,Val,Ncolt,Lo)
C COMPUTATION OF THE DEPTHS OF REAL SURFACE AND VOLUME CONTRIBUTIONS    DISP-002
C OBTAINED BY DISPERSION RELATIONS FROM THE IMAGINARY VOLUME AND        DISP-003
C SURFACE POTENTIALS. COMPUTATION OF THE CORRECTIONS TO THE IMAGINARY   DISP-004
C POTENTIALS DUE TO DIFFERENCES OF ENERGY. VARIATION OF HARTREE-FOCK ANDDISP-005
C SPIN-ORBIT POTENTIALS.                                                DISP-006
C INPUT VARIABLES: IPI(5,IV): POTENTIAL FOR THE LEVEL IV                DISP-007
C                  WV(3,IV):  CENTER OF MASS ENERGY OF THE LEVEL IV     DISP-008
C                  IPP,PIP:   EQUIVALENT BY CALL  (SEE CALX)            DISP-009
C                  NVAL,VAL:  OPTICAL POTENTIALS                        DISP-010
C                  NCOLT:     TOTAL NUMBER OF LEVELS                    DISP-011
C                  LO:        LOGICAL CONTROLS                          DISP-012
C                             LO(10) =.TRUE. USE OF DISPERSION RELATIONSDISP-013
C                             LO(209)=.TRUE. USE OF DIRAC POTENTIALS    DISP-014
C OUTPUT VARIABLES:WV(13,IV): CORR. TO VOLUME/SCALAR IMAGINARY POTENTIALDISP-015
C                  WV(14,IV): CORR. TO VOLUME/SCALAR REAL POTENTIAL     DISP-016
C                  WV(15,IV): CORR. TO SURFACE/VECTOR IMAGINARY POT.    DISP-017
C                  WV(16,IV): CORR. TO SURFACE/VECTOR REAL POTENTIAL    DISP-018
C                  WV(17,IV): CORR. TO SP-O/TENSOR IMAGINARY POTENTIAL  DISP-019
C                  WV(18,IV): CORR. TO SP-O/TENSOR REAL POTENTIAL       DISP-020
C SURFACE, J=1 FOR FIRST AND 2 FOR SECOND TERM, K=1 IMAGINARY VALUE FOR DISP-021
C REFERENCE ENERGY, 2 IMAGINARY AND 3 REAL VALUES FOR ACTUAL ENERGY     DISP-022
C***********************************************************************DISP-023
      IMPLICIT REAL*8(A - h,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER Ncolt
      INTEGER Ipi(11,Ncolt), Ipp(2,15,1), Nval(2,34)
      LOGICAL Lo(250)
      REAL*8 Pip(15,1), Val(34,1), Wv(18,1)
C
C Local variables
C
      REAL*8 a3, av(2,2,3), ax, ay, az, b, b0, b1, b2, bb(2), bi, br,
     &       bt, bx, ci, cn, cr, cs, dc, dd, de, df, di, dr, e0, e1, e2,
     &       ea, ef, el, ell, eo, ep, f, fe, ff, g1, g2, h(2), p, p2,
     &       p4, pi, vv(3), ww(6), xi, xr, xx, y, yc, yd, ye, yi, yr,
     &       yy, zf, zi, zr, zt, zz
      DOUBLE PRECISION DABS, DATAN2, DCOS, DEXP, DLOG, DMAX1, DMIN1,
     &                 DSIN, DSQRT
      INTEGER i, ip, iv, iz, j, k, l, m, m2, mm(2), n, n2, nn(2)
      INTEGER IABS, MAX0
C
C
      DATA pi/3.141592653589793D0/
      IF (.NOT.Lo(216) .AND. Lo(10)) WRITE (MW,99005)
99005 FORMAT (
     &' LEVEL  POT. REF. ENER.     ENERGY  VOLUME/SCALAR CORRECTION SURF
     &ACE/VECTOR CORRECTION   SP.-O/TENSOR CORRECTION'/34X,
     &3(4X,'IMAGINARY',9X,'REAL'))
C LOOP ON LEVELS                                                        DISP-031
      DO iv = 1, Ncolt
         DO i = 1, 6
            ww(i) = 0.D0
         ENDDO
         Ipi(11,iv) = MAX0(1,Ipi(11,iv))
         IF (.NOT.(Lo(110))) THEN
            ip = Ipi(5,iv)
            IF (Lo(7)) THEN
               vv(1) = Val(Nval(1,8*ip - 5),1)
               vv(2) = Val(Nval(1,8*ip - 4),1)
               vv(3) = Val(Nval(1,8*ip),1)
            ELSE
               vv(1) = Val(1,ip)
               vv(2) = Val(4,ip)
               vv(3) = Val(16,ip)
            ENDIF
            iz = 3
            IF (Ipp(1,1,ip).LT.0) iz = 12
            ef = Pip(4,ip)
            ep = Pip(5,ip)
            eo = ep - ef
            yy = Pip(3,ip) - ef
            y = Wv(iz,iv) - ef
C SPIN-ORBIT OR TENSOR POTENTIAL                                        DISP-053
            IF (Pip(8,ip).NE.0.D0) ww(5) = -Pip(8,ip)*(y - yy)/vv(3)
            IF (Pip(7,ip).NE.0.D0) ww(6) = DEXP( - Pip(7,ip)*(y - yy))
     &          - 1.D0
C VOLUME/SCALAR/VECTOR FORM-FACTOR                                      DISP-056
            DO i = 1, 2
               n = IABS(Ipp(i,2,ip))
               IF (n.NE.0) THEN
                  m = n/2
                  DO k = 1, 2
                     b = Pip(3*i + k + 5,ip)
                     DO l = 1, 3
                        av(i,k,l) = 0.D0
                     ENDDO
                     IF (DABS(yy).GT.eo) av(i,k,1) = (DABS(yy) - eo)
     &                   **n/((DABS(yy) - eo)**n + b**n)
                     IF (DABS(y).GT.eo) av(i,k,2) = (DABS(y) - eo)
     &                   **n/((DABS(y) - eo)**n + b**n)
                     IF (.NOT.Lo(209) .AND. ((i.EQ.2) .AND. (n.GT.0)))
     &                   GOTO 50
                     av(i,k,3) = DLOG(DABS((y+eo)/(y-eo)))/pi
C LOOP ON POLES IN THE UPPER PLANE                                      DISP-071
                     DO j = 1, m
                        bt = pi*DFLOAT(2*j - 1)/DFLOAT(n)
                        h(1) = ((y - eo)**2 + 2.D0*b*(y - eo)*DCOS(bt)
     &                         + b**2)*m/b
                        h(2) = ((y + eo)**2 - 2.D0*b*(y + eo)*DCOS(bt)
     &                         + b**2)*m/b
                        av(i,k,3) = av(i,k,3) + DSIN(bt)
     &                              *((y + eo)/h(2) + (y - eo)/h(1))
     &                              *DFLOAT(2*j - 1)/DFLOAT(n)
     &                              + ((DCOS(bt)*(y-eo) + b)
     &                              *DLOG(DABS(y-eo)/b)/h(1)
     &                              + (DCOS(bt)*(y+eo) - b)
     &                              *DLOG(DABS(y+eo)/b)/h(2))/pi
                     ENDDO
                     IF (n.EQ.Ipp(i,2,ip)) GOTO 5
                     IF (k.NE.1) THEN
C SUM OR DIFFERENCE OF TWO VOLUME TERMS                                 DISP-081
                        DO j = 1, 3
                           av(i,1,j) = Pip(3*i + 8,ip)*av(i,1,j)
     &                                 + (1.D0 - Pip(3*i + 8,ip))
     &                                 *av(i,2,j)
                        ENDDO
                     ENDIF
                  ENDDO
    5             IF ((n.GE.0) .AND. (i.NE.2)) THEN
C VOLUME CORRECTION FOR LARGE ENERGY CONTRIBUTIONS                      DISP-086
                     ea = Pip(6,ip)
                     IF (ea.NE.0.D0) THEN
                        cn = Pip(11,ip)
                        n2 = Ipp(2,1,ip)
                        IF (n2.NE.0) THEN
C LARGE NEGATIVE ENERGIES                                               DISP-092
                           av(1,2,1) = 0.D0
                           av(1,2,2) = 0.D0
                           IF (yy.LT. - ea) av(1,2,1) = -av(1,1,1)
     &                         *(yy + ea)**n2/((yy + ea)**n2 + ea**n2)
     &                         *DEXP(cn*(DSQRT(ea+ef) - DSQRT(-yy+ef)))
                           IF (y.LT. - ea) av(1,2,2) = -av(1,1,2)
     &                         *(y + ea)**n2/((y + ea)**n2 + ea**n2)
     &                         *DEXP(cn*(DSQRT(ea+ef) - DSQRT(-y+ef)))
                           m2 = n2/2
                           nn(1) = n
                           mm(1) = m
                           bb(1) = b
                           nn(2) = n2
                           mm(2) = m2
                           bb(2) = ea
                           IF (cn.NE.0.D0) THEN
                              ye = cn*DSQRT(ea + ef)
C DAMPING FACTOR                                                        DISP-112
                              yd = ef - y
                              DO l = 1, 2
                                 yc = cn*DSQRT(DABS(yd))
                                 yr = 0.D0
                                 yi = 0.D0
                                 IF (yd.GE.0.D0) yr = yc
                                 IF (yd.LT.0.D0) yi = yc
                                 CALL DCEI(ye + yr,yi,cr,ci)
                                 CALL DCEI(ye - yr, - yi,br,bi)
                                 h(l) = -cr - br
                                 yd = yd + y
                              ENDDO
                           ELSE
C NO DAMPING FACTOR                                                     DISP-107
                              h(1) = DLOG(DMAX1(DABS(y+ea),1.D-4))
                              h(2) = DLOG(ea)
                           ENDIF
                           av(1,2,3) = h(2) - h(1)
                           DO l = 1, 2
                              DO j = 1, mm(l)
                                 bt = pi*DFLOAT(2*j - 1)/DFLOAT(nn(l))
                                 zz = DATAN2( - bb(l)*DSIN(bt),
     &                                ea - eo - bb(l)*DCOS(bt))
                                 zr = (ea - eo)**2 - 2.D0*(ea - eo)
     &                                *DCOS(bt)*bb(l) + bb(l)**2
                                 dr = zr**mm(3 - l)*DCOS(nn(3 - l)*zz)
     &                                + bb(3 - l)**nn(3 - l)
                                 di = zr**mm(3 - l)*DSIN(nn(3 - l)*zz)
                                 dd = dr**2 + di**2
                                 cr = 1.D0 - bb(3 - l)**nn(3 - l)*dr/dd
                                 ci = bb(3 - l)**nn(3 - l)*di/dd
                                 br = bb(l)*(cr*DCOS(bt) - ci*DSIN(bt))
                                 bi = bb(l)*(cr*DSIN(bt) + ci*DCOS(bt))
                                 de = -bb(l)*DSIN(bt)
                                 IF (cn.NE.0.D0) THEN
                                    IF (l.EQ.1) xr = ep + bb(1)*DCOS(bt)
C DAMPING FACTOR                                                        DISP-146
                                    IF (l.EQ.2) xr = ea + ef - bb(2)
     &                                  *DCOS(bt)
                                    xi = bb(l)*DSIN(bt)
                                    IF (l.EQ.2) xi = -xi
                                    yc = cn*(xr**2 + xi**2)**.25D0
                                    yd = DATAN2(xi,xr)/2.D0
                                    yr = yc*DCOS(yd)
                                    yi = yc*DSIN(yd)
                                    CALL DCEI(ye + yr,yi,cr,ci)
                                    CALL DCEI(ye - yr, - yi,dr,di)
                                    df = -cr - dr
                                    zt = -ci - di
                                 ELSE
C NO DAMPING FACTOR                                                     DISP-139
                                    IF (l.EQ.1) zt = zz
                                    IF (l.EQ.2) zt = bt
                                    IF (l.EQ.1) df = DLOG(zr)/2.D0
                                    IF (l.EQ.2) df = DLOG(ea)
                                 ENDIF
                                 IF (l.EQ.1) dc = -y - eo - bb(l)
     &                               *DCOS(bt)
                                 IF (l.EQ.2) dc = y + ea - bb(l)
     &                               *DCOS(bt)
                                 DO k = 1, 2
                                    dd = -(dc**2 + de**2)*DFLOAT(mm(l))
                                    av(1,2,3) = -av(1,2,3)
     &                                 + (br*((df-h(k))*dc + zt*de)
     &                                 - bi*(zt*dc - (df-h(k))*de))/dd
                                    dc = dc - y*DFLOAT(2*l - 3)
                                 ENDDO
                              ENDDO
                           ENDDO
                           av(1,2,3) = av(1,2,3)/pi
                           av(1,1,1) = av(1,1,1) + av(1,2,1)
                           av(1,1,2) = av(1,1,2) + av(1,2,2)
                           av(1,1,3) = av(1,1,3) + av(1,2,3)
                        ENDIF
                        IF (Pip(10,ip).NE.0.D0) THEN
C LARGE POSITIVE ENERGY TERM                                            DISP-172
                           el = ef + ea
                           ell = DSQRT(el)
                           av(1,2,1) = 0.D0
                           av(1,2,2) = 0.D0
                           IF (yy.GT.ea) av(1,2,1)
     &                         = (DSQRT(yy + ef) + ell*(el/(yy+ef)
     &                         - 3.D0)/2.D0)
     &                         *DEXP( - cn*(DSQRT(yy+ef) - ell))
                           IF (y.GT.ea) av(1,2,2)
     &                         = (DSQRT(y + ef) + ell*(el/(y+ef) - 3.D0)
     &                         /2.D0)*DEXP( - cn*(DSQRT(y+ef) - ell))
                           IF (cn.NE.0.D0) THEN
C DAMPING FACTOR                                                        DISP-201
                              ax = cn*ell
                              f = y + ef
                              av(1,2,3) = 0.D0
                              CALL DCEI(ax,0.D0,b0,b1)
                              DO k = 1, 2
                                 ff = cn**2*f
                                 zf = DSQRT(DABS(ff))
                                 zr = 0.D0
                                 zi = 0.D0
                                 IF (ff.GE.0.D0) zr = zf
                                 IF (ff.LT.0.D0) zi = zf
                                 CALL DCEI(ax - zr, - zi,e1,b1)
                                 CALL DCEI(ax + zr,zi,e2,b2)
                                 IF (DABS(zf).GT.DMIN1(ax,512.D0)
     &                               /4096.D0) THEN
                                    e0 = (e1 + e2 - 2*b0)/ff
                                 ELSE
                                    e0 = (b0 - 1.D0/ax + 1.D0/ax**2)
     &                                 *(1.D0 +
     &                                 ff/6.D0*(1.D0 + ff/60.D0))
     &                                 - ff/(3.D0*ax**3)
     &                                 *((1.D0 - 3.D0/ax)
     &                                 *(1.D0 + ff/30.D0)
     &                                 + ff*(1.D0 - 10.D0/ax)
     &                                 /(10.D0*ax**2))
                                 ENDIF
                                 av(1,2,3) = -av(1,2,3)
     &                              - (ax*(ax**2*e0 - 3.D0*(e1+e2))
     &                              /2.D0 + 2.D0 + zr*(e1 - e2)
     &                              - zi*(b1 - b2))/cn/pi
                                 h(k) = (ax*(ax**2*e0 - 3.D0*(e1+e2))/
     &                                  2.D0 + 2.D0 + zr*(e1 - e2)
     &                                  - zi*(b1 - b2))/cn/pi
                                 f = ef
                              ENDDO
                           ELSE
C NO DAMPING FACTOR                                                     DISP-182
                              f = y + ef
                              IF (f.EQ.el) f = el + .000001D0
                              fe = DSQRT( - ef)
                              ax = f/el
                              IF (DABS(ax).GT.1.D-4) THEN
                                 g2 = -(1.D0/ax - 3.D0)
     &                                *DLOG(DABS(1.D0 - ax))/2.D0
                                 bx = DSQRT(DABS(ax))
                                 IF (f.LT.0.D0) THEN
                                    g2 = g2 - 2.D0*bx*DATAN2(bx,1.D0)
                                 ELSE
                                    g2 = g2 -
     &                                 DLOG(DABS(1.D0 - bx)/(1.D0 + bx))
     &                                 *bx
                                 ENDIF
                              ELSE
                                 g2 = .5D0*
     &                                (1.D0 + 1.5D0*ax*(1.D0 + ax/9.D0*
     &                                (1.D0+.3D0*ax)))
                              ENDIF
                              g2 = g2 + 1.5D0*DLOG(el)
                              g1 = DATAN2(fe,ell)*fe/ell*2.D0 +
     &                             (el/ef*DLOG(ea/el) - 3.D0*DLOG(ea))
     &                             /2.D0
                              av(1,2,3) = (g1 + g2)*ell/pi
                           ENDIF
C THE LAST COMPUTED TERM BEING FIXED, IT MUST BE SUBTRACTED TO THE      DISP-226
C STRENGTH OF VOLUME IMAGINARY POTENTIAL TO OBTAIN THE COEFFICIENT X    DISP-227
C OF THE OTHER TERM:  X * AV(1,1,K) + AV(1,2,K) = Y WHERE Y IS THE GIVENDISP-228
C STRENGTH OF IMAGINARY VOLUME POTENTIAL FOR K=1, THE COMPUTED STRENGTHSDISP-229
C OF THE IMAGINARY AND REAL VOLUME POTENTIAL FOR K=2 AND 3 RESPECTIVELY DISP-230
                           xx = (vv(2) - av(1,2,1)*Pip(10,ip))/av(1,1,1)
                           DO k = 1, 3
                              av(1,1,k) = xx*av(1,1,k) + Pip(10,ip)
     &                           *av(1,2,k)
                           ENDDO
                        ENDIF
                     ENDIF
                  ENDIF
                  ww(2*i - 1) = av(i,1,2)/av(i,1,1) - 1.D0
                  ww(2*i) = av(i,1,3)/av(i,1,1)
               ENDIF
               IF ((i.EQ.1) .AND. (Pip(15,ip).NE.0.D0)) ww(2) = ww(2)
     &             + vv(1)*(DEXP( - Pip(15,ip)*(y-yy)) - 1.D0)/vv(2)
            ENDDO
         ENDIF
         GOTO 100
C SURFACE FORM-FACTOR                                                   DISP-240
   50    cs = Pip(13,ip)
         cn = Pip(14,ip)
         av(2,1,1) = av(2,1,1)*DEXP( - cn*yy - cs*DABS(yy))
         av(2,1,2) = av(2,1,2)*DEXP( - cn*y - cs*DABS(y))
         ww(3) = av(2,1,2)/av(2,1,1) - 1.D0
         h(1) = 0.D0
         h(2) = 0.D0
         CALL DCEI((cs + cn)*(eo - y),0.D0,p2,p)
         CALL DCEI((cs - cn)*(eo + y),0.D0,p4,p)
         m = n/2
C LOOP ON POLES IN THE COMPLEX UPPER PLANE                              DISP-251
         DO i = 1, m
            a3 = pi*DFLOAT(2*i - 1)/DFLOAT(n)
            ay = b*DCOS(a3)
            az = b*DSIN(a3)
            CALL DCEI((cs + cn)*ay,(cs + cn)*az,br,bi)
            cr = p2*(y - eo) + br*ay - bi*az
            ci = br*az + bi*ay
            h(1) = h(1) + (cr*(y - eo + ay) + ci*az)
     &             /((y - eo + ay)**2 + az**2)
            CALL DCEI((cs - cn)*ay,(cs - cn)*az,br,bi)
            cr = -p4*(y + eo) + br*ay - bi*az
            ci = br*az + bi*ay
            h(2) = h(2) + (cr*(y + eo - ay) - ci*az)
     &             /((y + eo - ay)**2 + az**2)
         ENDDO
         av(2,1,3) = (DEXP( - (cs+cn)*eo)*h(1) + DEXP( - (cs-cn)*eo)
     &               *h(2))/(pi*DFLOAT(m))
         ww(4) = av(2,1,3)/av(2,1,1)
  100    DO i = 1, 6
            Wv(i + 12,iv) = ww(i)
         ENDDO
         IF (.NOT.Lo(216) .AND. Lo(10)) WRITE (MW,99010) iv, ip,
     &       Pip(3,ip), Wv(iz,iv), ww
99010    FORMAT (2I6,2F11.4,6F13.6)
      ENDDO
      RETURN
      END
C 01/01/04                                                      ECIS03  DCEI-000
      SUBROUTINE DCEI(Ar,Ai,Zr,Zi)
C COMPLEX EXPONENTIAL INTEGRAL FUNCTION MULTIPLIED BY EXPONENTIAL FOR   DCEI-002
C COMPLEX ARGUMENT: EXP(Z)*EI(Z)                                        DCEI-003
C***********************************************************************DCEI-004
      IMPLICIT REAL*8(A - H,O - z)
C
C
C Dummy arguments
C
      REAL*8 Ai, Ar, Zi, Zr
C
C Local variables
C
      REAL*8 aj, yi, yr, yz, z
      DOUBLE PRECISION DABS, DATAN2, DCOS, DEXP, DLOG, DSIN, DSQRT
      INTEGER i, m
C
C
      Zr = 0.D0
      Zi = 0.D0
      IF ((Ar.EQ.0.D0) .AND. (Ai.EQ.0.D0)) RETURN
      IF (DABS(Ar) + 18.5D0.LT.32.D0) THEN
         IF (DSQRT(1024.D0 - (Ar+18.5D0)**2)/1.665D0.GE.DABS(Ai)) THEN
C SERIES EXPANSION                                                      DCEI-011
            Zr = -.57721566490153D0 - DLOG(Ar**2 + Ai**2)*0.5D0
            Zi = -DATAN2(Ai,Ar)
            yr = 1.D0
            yi = 0.D0
            DO m = 1, 2000
               aj = DFLOAT(m)
               yz = yr
               yr = -(yz*Ar - yi*Ai)/aj
               yi = -(yz*Ai + yi*Ar)/aj
               IF (yr**2 + yi**2.LT.1.D-30*(Ar**2 + Ai**2)) GOTO 20
               Zr = Zr - yr/aj
               Zi = Zi - yi/aj
            ENDDO
   20       yr = DEXP(Ar)
            yi = yr*Zi
            yr = yr*Zr
            Zr = yr*DCOS(Ai) - yi*DSIN(Ai)
            Zi = yi*DCOS(Ai) + yr*DSIN(Ai)
            RETURN
         ENDIF
      ENDIF
C CONTINUED FRACTION                                                    DCEI-030
      DO i = 1, 20
         aj = DFLOAT(21 - i)
         Zr = Zr + Ar
         Zi = Zi + Ai
         z = Zr**2 + Zi**2
         Zr = aj*Zr/z
         Zi = -aj*Zi/z
         Zr = Zr + 1.D0
         z = Zr**2 + Zi**2
         Zr = aj*Zr/z
         Zi = -aj*Zi/z
      ENDDO
      Zr = Zr + Ar
      Zi = Zi + Ai
      z = Zr**2 + Zi**2
      Zr = Zr/z
      Zi = -Zi/z
      END
C 01/01/04                                                      ECIS03  GGDR-000
      SUBROUTINE GGDR(Ipi,Wv,Scn,Lo)
C GIANT DIPOLE RESONANCE RELATED CALCULATIONS                           GGDR-002
C INPUT VARIABLES: IPI(J,*):PRODUCT OF CHARGES FOR J=4                  GGDR-003
C                  WV(J,*): MASS OF PARTICLE AND TARGET FOR J=1,2       GGDR-004
C                           CENTER OF MASS ENERGY IN MEV FOR J=3        GGDR-005
C                  SCN:     DESCRIPTIONS OF LEVEL DENSITIES             GGDR-006
C                  LO:      LOGICAL CONTROLS                            GGDR-007
C FOR COMMON /NCOMP/ SEE CALX, LECT AND COLF                            GGDR-008
C IN COMMON /NCOMP/NRD,NFISS: NUMBER OF GAMMA AND FISSION TRANSMISSION  GGDR-009
C                             COEFFICIENTS READ IN LECT                 GGDR-010
C                  TG0,BN,FNUG,EGD,GGD:  NEUTRON BINDING ENERGY         GGDR-011
C                           GIANT DIPOLE RESONANCE ENERGY AND WIDTH ....GGDR-012
C                  IPI(J,I): FOR I=NCOLL+1 TO NCOLT, MAXIMUM L+1 AND    GGDR-013
C IN COMMON /NCOMP/EGD,GGD: ENERGY AND WIDTH OF GIANT DIPOLE RESONANCE  GGDR-014
C                  TG1,SGSQ  .........                                  GGDR-015
C IN SCN:  1-SA  2-UX   3-TAU  4-SG   5-E0   6-EX   7-NZ  8-B           GGDR-016
C***********************************************************************GGDR-017
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      REAL*8 ACN(8), BN, BZ(5), EGD, FNUg, GGD, SGSq, TG0, TG1
      INTEGER MR, MS, MW, NCOj(7), NRD, NSP(4)
      COMMON /INOUT / MR, MW, MS
      COMMON /NCOMP / NSP, NRD, NCOj, ACN, BZ, TG0, BN, FNUg, EGD, GGD,
     &                TG1, SGSq
C
C Dummy arguments
C
      INTEGER Ipi(11,*)
      LOGICAL Lo(250)
      REAL*8 Scn(7), Wv(18,1)
C
C Local variables
C
      REAL*8 aa, atg0, ctg, dex, ebyt, ecm, eee, ehi, elim, elo, eps,
     &       esq, exc, exd, roj, scnb, temp, tg, tint, xfr, zz
      DOUBLE PRECISION DABS, DEXP, DSQRT
      INTEGER i, id, j, kgd, n1, n2, n3, n4, na, nn, nz
      INTEGER IABS, IDINT
C
C
      IF (Lo(181)) RETURN
      BZ(2) = DABS(BZ(2))
      IF (Lo(82)) BZ(3) = BZ(1)*BZ(1) - 1.D0
      IF (.NOT.(Lo(212) .OR. Lo(215))) RETURN
C  GAMMA RAY INPUT                                                      GGDR-028
      IF (Lo(186) .OR. (NRD.NE.0)) RETURN
      xfr = 0.5D0
      na = IDINT(Wv(2,1) + Wv(1,1) + .5D0)
      aa = DFLOAT(na)
      nz = IDINT(Scn(7) + .1D0)
      nn = na - nz
      zz = DFLOAT(nz*nn)
      kgd = 0
      IF (EGD.EQ.0.D0) EGD = 163.D0*DSQRT(zz)/(aa**1.3333333D0)
      IF (EGD.GE.0.D0) THEN
         kgd = 1
         IF (GGD.LE.0.D0) GGD = 5.D0
      ENDIF
      IF (.NOT.Lo(216)) WRITE (MW,99005) na, nz, nn, BN, FNUg, Scn(4)
99005 FORMAT (/'    GAMMA RAY CHANNEL PARAMETERS :'//'   A=',I3,'  Z=',
     &        I3,'  N=',I3,5X,F9.3,' MEV  NEUTRON BINDING',5X,F6.2,
     &        ' RADIATIVE D. OF F.',5X,'SIGMA=',F6.3)
      atg0 = DABS(TG0)
      IF (.NOT.Lo(216)) WRITE (MW,99010) atg0
99010 FORMAT (
     &    '   NORMALISED TO SLOW S-WAVE NEUTRON GAMMA WIDTHS/SPACINGS ='
     &    ,D12.4)
      IF (kgd.EQ.0 .AND. .NOT.Lo(216)) WRITE (MW,99015)
99015 FORMAT ('   E1 STRONG COUPLING MODEL')
      IF (kgd.EQ.1 .AND. .NOT.Lo(216)) WRITE (MW,99020) EGD, GGD, xfr
99020 FORMAT ('   E1 GIANT RESONANCE AT ',F7.2,' MEV   WIDTH=',F7.2,
     &        ' MEV',5X,'EXCHANGE FRACTION=',F5.2)
      SGSq = 2.D0*Scn(4)**2
      roj = 0.D0
      ecm = 0.D0
  100 tg = 0.D0
      elim = BN + ecm
      elo = 0.D0
  200 ehi = elo + 0.05D0
      IF (ehi.GE.elim) ehi = elim
      eps = (ehi + elo)/2.D0
      esq = eps*eps
      tint = (ehi - elo)*eps*esq
      eee = -EGD*EGD + esq
      IF (kgd.EQ.1) tint = tint*eps/(esq*GGD*GGD + eee*eee)
      exc = BN + ecm - eps
      IF (exc.GT.Scn(6)) THEN
         exd = exc + Scn(2) - Scn(6)
         ebyt = DSQRT(Scn(1)*exd)
         scnb = DEXP(2.D0*DSQRT(Scn(1)*Scn(2)) - (Scn(6) - Scn(5))
     &          /Scn(3))*Scn(3)/(Scn(1)**.5D0*Scn(2)**1.5D0)
         tint = tint*DEXP(2.D0*ebyt)/(ebyt*exd*scnb)
      ELSE
         ebyt = (exc - Scn(5))/Scn(3)
         tint = tint*DEXP(ebyt)/Scn(3)
      ENDIF
      tg = tg + tint
      IF (ehi.NE.elim) THEN
         elo = ehi
         GOTO 200
      ELSEIF (ecm.NE.0.D0) THEN
         TG1 = tg*ctg
         RETURN
      ELSE
         temp = tg
         id = Ipi(3,1) - 1
         n1 = IABS(id - 1)
         n2 = id + 1
         DO i = n1, n2, 2
            n3 = IABS(i - 2)
            n4 = i + 2
            DO j = n3, n4, 2
               dex = -DFLOAT(j + 1)**2/(SGSq*4.D0)
               roj = roj + DEXP(dex)*DFLOAT(j + 1)/SGSq
            ENDDO
         ENDDO
         ctg = atg0/(temp*roj)
         ecm = Wv(3,1)
         GOTO 100
      ENDIF
      END
C 01/01/04                                                      ECIS03  CAL1-000
      SUBROUTINE CAL1(Nw,Cw,Dw,Lo)
C THIS SUBROUTINE COMPUTES FORM FACTORS (POTE), LOOKS FOR QUANTUM       CAL1-002
C NUMBERS (QUAN), CHECKS FOR CONVERGENCE WITH RESPECT TO TOTAL SPIN,    CAL1-003
C COMPUTES HELICITY AMPLITUDES (SCHE) AND COMPUTES CHI2 (RESU)          CAL1-004
C THE ARGUMENTS ARE THE WORKING SPACE W, IN EQUIVALENCE BY CALL WITH NW CAL1-005
C AND DW AND THE ARRAY OF LOGICAL CONTROLS LO. THE COMMON /NOEQ/ IS NOT CAL1-006
C USED OUTSIDE THIS SUBROUTINE AND THE SUBROUTINES CALLED BY IT.        CAL1-007
C NPLACE IS THE MAXIMUM WORKING SPACE USED                              CAL1-008
C***********************************************************************CAL1-009
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      REAL*8 ACN(20), ACOnv, BJM, CCZ, CHB, CK, CM, CMB, CONj, EITer, H,
     &       R1(2), XE, XM, XN, XZ
      INTEGER IDMt, INSl, INTv, INVt, IPJ, IPK, IPM, IQM, IQMax, ISM,
     &        ITEmm, ITErm, ITY(8), JDM, JIT, JPI, JTH, JTX, KAB, KBA,
     &        KBC, KCC, KE, KMAx, KMIn, KXT, LMAx1, LMAx2, LMAx3, LMD,
     &        LMX, MCC, MCM(2), MIPi, MR, MS, MS1, MS2, MW, MWV, NAJ,
     &        NAM1, NBEt, NBEta, NBT1, NC, NCC, NCI, NCIn, NCOi, NCOj(3)
     &        , NCOll, NCOlr, NCOls, NCOlt, NCOlx, NCOnt, NCT(6), NCX,
     &        NCXn, NDE, NDOnn, NDP, NDQ, NFA, NFAc, NFAm, NFG, NFIs,
     &        NFM, NGAm, NIC, NIN, NIPh, NIPp, NISe, NIVq, NIVy, NIVz,
     &        NIW
      INTEGER NIXt, NJC, NJIt, NJMax, NLT, NNC, NNIv, NNVi, NNWi, NPAa,
     &        NPAd, NPAr, NPLace, NPOt, NPP, NPX, NRC, NRCo, NRDo, NREc,
     &        NREs, NRY, NRZ, NSCn, NSEc, NSM, NSP(5), NSPin, NT, NTGx,
     &        NTOt, NTX, NTY, NTZ, NVA, NVC1, NVC2, NWV, NXA, NXD, NXG,
     &        NXX
      COMMON /DCONS / CM, CK, CHB, CMB, CCZ
      COMMON /DCONT / XE, XM, XN, XZ
      COMMON /DECOU / NJIt, NIPp, NPAa, NWV, NIPh, NSCn, NPAr, NNIv,
     &                NFIs, NGAm, NPOt, NBEta, NFM, NTGx, NDOnn, NRC,
     &                NIW, NDE, NISe, NNVi, NNWi, NCC, MCC, NXA, NAM1,
     &                NFAc, NFAm, NPAd, NFG, NXG, NSM, NREs, NXX, NT,
     &                NIVq, NIVy, NIVz, NCOi, MIPi, NXD, MWV, NIXt, NTY,
     &                NTX, NRY, NRCo, NRDo, NVC1, NVC2, NNC, NCX, IDMt,
     &                NCOll, NJMax, ITErm, NPP, JDM, JIT, NSEc, LMD,
     &                MCM, NCOls, NCOlt, KMAx, KMIn, NVA, NBEt, NBT1,
     &                LMX, LMAx1, NLT, ISM, IQM, IQMax, MS1, MS2, NCT,
     &                KBA, KAB, KBC, KCC, NJC, JTX, JTH, NCOlr, NREc,
     &                NTOt, NFA, LMAx2, KE, ITEmm, NPLace, KXT, NRZ,
     &                NTZ, LMAx3, IPM, IPK, BJM, EITer, ACOnv, CONj, H,
     &                NSPin
      COMMON /INOUT / MR, MW, MS
      COMMON /NCOMP / NSP, NCOnt, NCOj, NCOlx, NDP, NDQ, ACN
      COMMON /NOEQU / NCXn, NIC, NCI, NC, NCIn, NIN, JPI, IPJ, R1, NAJ
      COMMON /POTE2 / ITY, INVt, INTv, INSl, NPX
C
C Dummy arguments
C
      CHARACTER*4 Cw(2,*)
      REAL*8 Dw(*)
      LOGICAL Lo(250)
      INTEGER Nw(2,*)
C
C Local variables
C
      REAL*8 aj, u1, u2
      INTEGER i, id1, ip1, ipx, ipy, ipz, iterr, iu, jmin, k, k1, k2,
     &        k3, kcb, n, n3, ndx, ndy, ndz, nfai, nfar, nga, nm, nma,
     &        nmc, nmx, nmy, nni, npt, nr4, nr5, nwr, nww, nx, nx1, nxc
      CHARACTER*1 jp
      INTEGER MAX0, MIN0
C
C
      jmin = MOD(Nw(2,1) + Nw(1,2),2)
      nr5 = NNC
      nww = nr5 + 2*KAB
      nxc = nww + 4*ISM*KAB
      IF (.NOT.(Lo(220) .AND. Lo(151))) THEN
         IF (Lo(219)) GOTO 800
         IF (Lo(100)) nxc = nxc + 4*ISM*KAB
         IF (Lo(21)) nxc = NNC
         id1 = IDMt - NCX
C COMPUTATION OF POTENTIALS AND FORM FACTORS                            CAL1-038
         n = NCX - 1
         DO i = NRCo, n
            Dw(i) = 0.D0
         ENDDO
C        CALL POTE(Dw(NBEta),Nw(1,NBEta),Dw(NVC1),Nw(1,NIVq),Nw(1,NIVy),
C    &             Nw(1,NIVz),Dw(NCX),Nw(1,NCX),Dw(NPOt),Nw(1,NPOt),
C    &             Dw(NRCo),Dw(NRDo),Dw(NWV),Dw(MWV),ACOnv,ISM,NCOll,
C    &             NCOlx - NCOnt,NCOlt,id1,Nw,Nw(1,MIPi),Nw(1,NIPp),
C    &             Dw(NIXt),IQM,NPP,NBT1,MCM,CHB,CCZ,Lo)
C--------Plujko_new-2005
         CALL POTE(Dw(NBEta),Nw(1,NBEta),Dw(NVC1),Nw(1,NIVq),Nw(1,NIVy),
     &             Nw(1,NIVz),Nw(1,NCX),Dw(NCX),Dw(NPOt),Nw(1,NPOt),
     &             Dw(NRCo),Dw(NRDo),Dw(NWV),Dw(MWV),ACOnv,ISM,NCOll,
     &             NCOlx - NCOnt,NCOlt,id1,Nw,Nw(1,MIPi),Nw(1,NIPp),
     &             Dw(NIXt),IQM,NPP,NBT1,MCM,CHB,CCZ,Lo)
C--------Plujko_new-2005
      ENDIF
      IF (Lo(220)) GOTO 800
      NPLace = MAX0(NPLace,nxc + id1)
      JPI = 0
      ip1 = 1
      IF (Lo(223)) ip1 = 2
      npt = 0
      n = NTY + NTZ - 1
      DO i = NTY, n
         Dw(i) = 0.D0
      ENDDO
      IF (.NOT.(Lo(181) .OR. Lo(82))) THEN
         nx = NNC + 2*ISM
         n = nx + 2*(ISM + 2)
         IF (n.GT.IDMt) CALL MEMO('CAL1',IDMt,n,1)
         NPLace = MAX0(NPLace,n)
      ENDIF
C LOOP ON THE PARITIES  JPI IS THE PARITY (0 OR 1)                      CAL1-060
  100 IPJ = 1
      Lo(227) = .FALSE.
      Lo(232) = Lo(181)
      ITErm = ITEmm
      DO k = 1, KAB
         Nw(k,NCC) = 0
      ENDDO
C LOOP ON THE VALUES OF J                                               CAL1-067
C SEARCH FOR QUANTUM NUMBERS AND COUPLING COEFFICIENTS                  CAL1-068
  200 Lo(225) = Lo(21)
      NAJ = jmin + 2*IPJ - 2
      aj = 0.5D0*DFLOAT(NAJ)
      iterr = 0
  300 CALL QUAN(NCOll,Dw(NWV),Nw,Nw(1,NNIv),Nw(1,NT),Dw(NT),Nw(1,NIVq),
     &          Nw(1,NIVz),Nw(1,NCC),Nw(1,nxc),Dw(nxc),iu,Nw(1,NNVi),
     &          KAB,KBC,Dw(NXA),Dw(NFAc),NFA,IDMt - nxc - 200,LMD,Lo)
      IF (NCIn.EQ.0) GOTO 500
      nx = nxc + iu*LMD
      ipx = IPJ
      Lo(232) = Lo(232) .OR. IPJ.GT.KMAx
      nx1 = nx
      NCXn = NCIn
      IF (Lo(224)) NCXn = NC
      nwr = 2*nx1 + 20*KAB*KAB - 1
      IF (nwr + 10*KAB**2.GT.IDMt)
     &    CALL MEMO('CAL1',IDMt,nwr + 10*KAB**2,1)
      CALL MTCH(Nw(1,NNWi),NCOll,KAB,Dw(NWV),Nw(1,MCC),Dw(NXG),Nw(1,nxc)
     &          ,Dw(nxc),Dw(nx1),ISM,LMAx2,Nw(1,NNIv),Nw(1,NIVz),Dw(NFG)
     &          ,LMAx1,LMAx3,Nw(1,nwr),Dw(NRCo),Dw(NRDo),Dw(NFAm),LMD,
     &          BJM,CHB,XM,Lo)
      IF (.NOT.(Lo(227))) THEN
         IF (Lo(44)) nx = nx + 4*KAB*KAB
         IF (Lo(74)) CALL HORA
C  NX  FIRST ADDRESS WHICH CAN BE USED                                  CAL1-091
         IF (.NOT.(Lo(225))) THEN
C ITERATIONS                                                            CAL1-093
            nfar = NFAm + 8*KAB
            nfai = nfar + NCXn*KAB
            IF (Lo(100)) THEN
               nwr = nx + 2*(ISM + 2)
               nr4 = nwr + 4*NC*ISM
               NIN = 4*NIN
C  N IS THE FIRST FREE ADDRESS AND NIN THE NUMBER OF COUPLING POTENTIALSCAL1-105
C WHICH CAN BE STORED                                                   CAL1-106
               n = nr4 + 4*ISM
            ELSE
               nwr = 2*nx + 4*(ISM + 2) - 1
               nr4 = nwr + 2*NC*ISM
               IF (Lo(210)) nr4 = nwr + 4*NC*ISM
               n = nr4 + 2*ISM
            ENDIF
            n3 = n
            IF (n.GT.IDMt) CALL MEMO('CAL1',IDMt,(n + 1)/2,1)
            Lo(207) = Lo(124) .AND. ITErm.GT.1
            IF (BJM.NE.0.D0) NIN = NIN + NC
            IF (Lo(207)) n3 = n3 + NIN*ISM
            IF (Lo(54)) WRITE (MW,99035) n3, aj
            IF (n3.GT.IDMt) THEN
               Lo(207) = .FALSE.
               Lo(124) = .FALSE.
               Lo(24) = .TRUE.
               n3 = n
               WRITE (MW,99005)
99005          FORMAT (/
     &            ' WORKING FIELD TOO SMALL TO STORE ALL THE POTENTIALS'
     &            /1X,52('*')//' THE 24TH CONTROL IS SET .TRUE.'//)
            ENDIF
            NPLace = MAX0(NPLace,n3)
            IF (Lo(100)) THEN
               CALL INTR(Dw(NFAm),Dw(nx),Dw(nww),Dw(nwr),Dw(nr4),
     &                   Dw(NPAd),Nw(1,nr5),ISM,KAB,Dw(n),ITErm,NC,
     &                   Dw(NVC1),Dw(NVC2),Nw(1,NNWi),Nw(1,MCC),
     &                   Nw(1,nxc),Dw(nxc),Dw(nx1),H,ACOnv,EITer,NCXn,
     &                   nni,iterr,Lo)
               GOTO 400
            ELSE
               CALL INTI(Dw(NFAm),Dw(nx),Dw(nww),Dw(nwr),Dw(nr4),
     &                   Dw(NPAd),Nw(1,nr5),ISM,KAB,Dw(n),ITErm,NC,
     &                   Dw(NVC1),Dw(NVC2),Nw(1,NNWi),Nw(1,MCC),
     &                   Nw(1,nxc),Dw(nxc),Dw(nx1),NPX,H,ACOnv,EITer,
     &                   NCXn,nni,iterr,Lo)
               IF (Lo(204) .OR. ITErm.EQ.1) GOTO 400
               IF (Lo(123)) GOTO 400
               IF (Lo(210)) WRITE (MW,99010) aj, JPI
99010          FORMAT (' WARNING: FOR J =',F6.1,' PARITY (-1)**',I1,
     &                 ' THE DERIVATIVE TERMS ARE NEGLECTED')
               Lo(225) = .TRUE.
               Lo(228) = .TRUE.
               GOTO 300
            ENDIF
         ENDIF
      ENDIF
C USUAL COUPLED CHANNELS CALCULATION                                    CAL1-135
C NWR IS THE FIRST ADDRESS TO STORE POTENTIALS AND NM THE MAXIMUM       CAL1-136
C NUMBER OF POINTS   FOR ARGUMENTS  SEE INCH                            CAL1-137
      nwr = nx + 6*KAB*KAB
      IF (Lo(54)) WRITE (MW,99035) nwr, aj
      nfai = nx + NC*KAB
      nfar = nfai + 3*KAB*KAB
      IF (.NOT.(Lo(227))) THEN
         n = nwr + 2*NC*NC*(ISM + 1)
         IF (n.GT.2*IDMt) CALL MEMO('CAL1',IDMt,(n + 1)/2,1)
         nm = (IDMt - nwr)/(2*NC*NC) - 1
         nm = MIN0(nm,ISM)
         IF (Lo(54) .AND. nm.NE.ISM) WRITE (MW,99015) nm
99015    FORMAT ('+',60X,'COMPUTATION OF POTENTIALS BY',I5,
     &           '  AT A TIME')
         n3 = nwr + (nm + 1)*NC*NC
         NPLace = MAX0(NPLace,2*n3 - nwr,nfar + 3*KAB*KAB)
         CALL INCH(Dw(NVC1),Dw(NVC2),Nw(1,MCC),Nw(1,nxc),Dw(nxc),
     &             Nw(1,NNWi),Dw(NFAm),Dw(nx1),Dw(nx),Dw(nwr),Dw(n3),
     &             ISM,KAB,NC,NCXn,nm,ITErm,NPX,Nw(1,nwr),Lo)
      ENDIF
  400 IF (Lo(74)) CALL HORA
C NFAR AND NFAI  ADDRESSES OF REAL AND IMAGINARY PARTS OF S-MATRIX      CAL1-154
      nmx = nwr + (4 + NCIn)*(NC + KXT)
      n = nmx + MAX0(4*NC*NC,LMAx2 + 4*IPJ)
      IF (n.GT.IDMt) CALL MEMO('CAL1',IDMt,n,1)
      npt = npt + 1
      CALL SCAM(Dw(NSM),Dw(NTY),Dw(NTX),Dw(NRY),NJMax,KMAx,Nw(1,MCC),
     &          Nw(1,NCC),Dw(nfar),Dw(nfai),Dw(NWV),NCOll,NCOls,KAB,KCC,
     &          Nw,Nw(1,MIPi),Dw(NGAm),Dw(NFIs),Dw(NIXt),Nw(1,NCOi),
     &          Dw(NXD),Dw(nmx),Dw(nmx),Dw(nwr),NCT,NCIn + 4,Dw(NXA),
     &          KBC,IDMt - nmx,XZ,Lo)
      IF (.NOT.(Lo(232))) THEN
         Lo(232) = R1(2).LT.CONj .AND. IPJ.GT.KMIn
         IF (.NOT.Lo(232)) IPK = IPJ
         IF (Lo(232) .AND. (Lo(218) .OR. Lo(215))) WRITE (MW,99020) aj,
     &       R1(2)
99020    FORMAT (' MAXIMUM J-VALUE =',F6.1,' FOR COMPOUND NUCLEUS',6X,
     &           'MAXIMUM COEFFICIENT AT THE END',D12.3)
      ENDIF
      IF (Lo(74)) CALL HORA
      IF (.NOT.(Lo(21))) THEN
C REDUCTION OF MAXIMUM NUMBER OF ITERATIONS IF 2 WHERE SUFFICIENT(ITERR)CAL1-169
         IF (Lo(125) .AND. (iterr.LE.2) .AND. (IPJ.GT.JDM)) ITErm = 1
C CHECKS OF CONVERGENCE                                                 CAL1-171
         IF ((nni.EQ.NC) .AND. (IPJ.GT.JDM)) Lo(227) = .TRUE.
         IF (Lo(128) .AND. nni.EQ.NC .AND. IPJ.GT.JDM + 1) GOTO 700
      ENDIF
C INCREASE OF THE TOTAL ANGULAR MOMENTUM                                CAL1-174
  500 IF (.NOT.(Lo(143))) THEN
         DO i = 1, JIT
            IF (IPJ.LE.Nw(1,NJIt + i - 1)) GOTO 600
            IPJ = IPJ + Nw(2,NJIt + i - 1)*ip1
         ENDDO
      ENDIF
  600 IPJ = IPJ + ip1
      IF (IPJ.GT.LMAx3 - LMX) Lo(227) = .TRUE.
      IF (.NOT.Lo(208)) Lo(227) = .FALSE.
      IF ((IPJ.LE.NJMax) .AND.
     &    ((R1(1).GE.CONj) .OR. (IPJ.LE.JDM) .OR. (NCIn.EQ.0))) GOTO 200
C CHANGE OF PARITY                                                      CAL1-184
  700 NAJ = jmin + 2*ipx - 2
      IF (Lo(218) .OR. Lo(215)) WRITE (MW,99025) aj, R1(1)
99025 FORMAT (' MAXIMUM J-VALUE =',F6.1,16X,
     &        'MAXIMUM SCATTERING COEFFICIENT AT THE END',D12.3)
      IF (JPI.EQ.1) THEN
         IPM = MAX0(ipx,ipy)
         IPK = MAX0(IPK,ipz)
         IF (.NOT.(Lo(163))) THEN
            WRITE (63,99030) Dw(NWV), Dw(NWV + 11), Dw(NWV + 1), Nw(2,2)
     &                       , npt
99030       FORMAT ('<TLJ     >',F10.2,F10.5,F10.2,2I5)
            REWIND 99
            DO i = 1, npt
               READ (99,99040) u1, jp, k3
               WRITE (63,99040) u1, jp, k3
               DO k = 1, k3
                  READ (99,99045) k1, k2, u1, u2
                  WRITE (63,99045) k1, k2, u1, u2
               ENDDO
            ENDDO
C     CLOSE (99,STATUS='DELETE')                                        CAL1-204
            CLOSE (99)
         ENDIF
      ELSE
         JPI = JPI + 1
         ipy = ipx
         ipz = IPK
         GOTO 100
      ENDIF
  800 kcb = MAX0(NCT(5),NCT(6))
      ndx = nxc + 8*kcb
      ndy = ndx + JTH
      ndz = ndy + JTH
      nmy = ndz + JTX
      nga = nmy + 3*NJC
      nma = nga + 4*KBC*KAB
      nmc = nma + MS1*MS2*kcb
      n = nmc + 2*IPM
      IF (n.GT.IDMt) CALL MEMO('CAL1',IDMt,n,1)
      CALL SCHE(Dw(NSM),NJMax,KMAx,Nw,MS1,MS2,Nw(1,NFM),Dw(NTX),Dw(nmc),
     &          Nw(1,nxc),Dw(nga),Dw(NXG),LMAx2,Dw(NWV),KAB,KBA,kcb,
     &          jmin,IPM,IPK,Dw(NTY),NCOll,NCOls,NCT,Dw(NRY),Dw(nma),
     &          JIT,Nw(1,NJIt),NLT,IDMt - nmc,XZ,Lo)
      id1 = IDMt - nga
C FOR ARGUMENTS    SEE CALX AND RESU                                    CAL1-220
      CALL RESU(Nw,Dw(NSM),Dw(NTX),NJMax,KMAx,NCOll,NCOls,Nw(1,NFM),
     &          Cw(1,NFM),Nw(1,NTGx),Dw(NTGx),IPM,IPK,Dw(NDOnn),NCOlr,
     &          Nw(1,NAM1),Dw(NAM1),Dw(NWV),Dw(MWV),Dw(NRY),Nw(1,NCOi),
     &          Dw(NXD),jmin,NRZ,NJC,Dw(NREs),Dw(nga),Dw(nmy),Dw(ndx),
     &          Dw(ndy),Dw(ndz),CMB,XZ,id1,Lo)
      NPLace = MAX0(NPLace,nga + id1)
      IF (Lo(74)) CALL HORA
      Lo(217) = .TRUE.
      Lo(215) = .FALSE.
      RETURN
99035 FORMAT (10X,'REQUIRED WORKING FIELD',I10,'  FOR J =',F7.1)
99040 FORMAT (1X,F4.1,1X,A1,1X,I4)
99045 FORMAT (1X,I2,I4,F6.1,2X,1P,D14.7,0P,3X)
      END
C 01/01/04                                                      ECIS03  POTE-000
      SUBROUTINE POTE(Beta,Nbta,V,Ivq,Ivy,Ivz,Np,Q,Val,Nval,Vco,Vdo,Wv,
     &                Wvm,Aconv,Ism,Ncoll,Ncold,Ncolt,Idt,Ipi,Ipim,Ipp,
     &                Tl,Iqm,Npp,Nbt1,Mcm,Chb,Ccz,Lo)
C COMPUTATION AND OUTPUT OF FORM FACTORS                                POTE-004
C INPUT VARIABLES: BETA,NBTA: DEFORMATIONS OF THE TARGET                POTE-005
C                  IVQ:       TABLE OF ANGULAR MOMENTA OF FORM FACTORS  POTE-006
C                  IVY:       TABLE FOR COMPUTATION OF FORM FACTORS     POTE-007
C                  IVZ:       TABLE FOR USE OF FORM FACTORS             POTE-008
C                  VAL,NVAL:  OPTICAL MODEL AND FOLDING PARAMETERS      POTE-009
C                  WV,WVM:      ( SEE CALX )                            POTE-010
C                  ACONV:     VALUE BELOW WHICH THE POT. CAN BE NEGL.   POTE-011
C                  ISM:       NUMBER OF POINTS                          POTE-012
C                  NCOLL:     NUMBER OF COUPLED NUCLEAR STATES          POTE-013
C                  NCOLD:     TOTAL NUMBER OF STATES WITHOUT CONTINUUM  POTE-014
C                  NCOLT:     TOTAL NUMBER OF STATES WITH CONTINUUM     POTE-015
C                  IDT: MAXIMUM WORKING FIELD P  RETURNS THE PLACE USED POTE-016
C                  IPI,IPIM:    ( SEE CALX )                            POTE-017
C                  IPP:       CROSS-REFERENCE TO POTENTIALS IN IPI(1,*) POTE-018
C                  IQM:       MAXIMUM ORDER OF DEFORMATION IN ROT. MODELPOTE-019
C                  NPP:       NUMBER OF OPTICAL POTENTIALS              POTE-020
C                  NBT1:      NUMBER OF VIBRATIONS                      POTE-021
C                  MCM:       ANGULAR MOMENTUM LIMITATION ON COUL. CORR.POTE-022
C                  LO:        LOGICAL CONTROLS                          POTE-023
C COMMONS /POTE1/ AND /POTE2/   SEE REDM                                POTE-024
C COMMON /DCONS/   SEE CALC AND COLF                                    POTE-025
C OUTPUT VARIABLES:V(I,J): POTENTIAL AND TRANSITION FORM FACTORS        POTE-026
C             FOR SCHROEDINGER EQUATIONS:                               POTE-027
C     AFTER ITY(1) (=0) REAL CENTRAL POTENTIALS IN ORDER IPI(11,*)      POTE-028
C     AFTER ITY(3) REAL SPIN-ORBIT FORM FACTORS IN THE SAME ORDER       POTE-029
C     AFTER ITY(5) REAL TRANSITION FORM FACTORS IN ORDER IVZ(1,*)       POTE-030
C     AFTER ITY(7) REAL DERIVED SPIN-ORBIT FORM FACTORS IN ORDER        POTE-031
C           IVZ(1,*) WITH THE R**-2 FORM FACTOR AT THE SAME ADDRESS+INLSPOTE-032
C     IMAGINARY POTENTIALS AND FORM FACTOR FOLLOW WITH THE SAME ORDER   POTE-033
C           FROM ITY(2), ITY(4), ITY(6) AND ITY(8)                      POTE-034
C                                                                       POTE-035
C             FOR DIRAC EQUATIONS:                                      POTE-036
C     AFTER ITY(1) (=0) FOR EACH LEVEL, 14 FORM FACTORS V(*,I,*) WHICH  POTE-037
C           ARE CENTRAL POTENTIAL FOR I=1,2   SPIN-ORBIT POTENTIAL FOR  POTE-038
C           I=3,4  D=E+M+V-W FOR I=5,6   E-M-V-W FOR I=7,8  D**(1/2) FORPOTE-039
C           I=9,10 D**(-1) FOR I=11,12  AND  - D( TENSOR ) FOR I=13,14  POTE-040
C     AFTER ITX(6) THE INVT SETS OF COMPLEX SCALAR + VECTOR FORM FACTORSPOTE-041
C           FOLLOWED BY THE INSL SETS OF TENSOR FORM FACTORS            POTE-042
C                                                                       POTE-043
C                  VCO(2,I): STRENGTH OF COULOMB POTENTIAL TAILS        POTE-044
C                            SCALAR IN VCO(1,I), SPIN-ORBIT IN VCO(2,I) POTE-045
C                  VDO(2,I): STRENGTH OF COULOMB TRANSITION TAILS       POTE-046
C                            SCALAR IN VDO(1,I), SPIN-ORBIT IN VDO(2,I) POTE-047
C                  TL:   TRANSMISSION COEFFICIENTS FOR UNCOUPLED STATES POTE-048
C WORKING FIELD: NP  IN EQUIVALENCE WITH Q, DOUBLE PRECISION.           POTE-049
C***********************************************************************POTE-050
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER IMAx, INLs, INSl, INTc, INTv, INVc, INVd, INVt, IT0, IT1,
     &        IT2, IT3, IT4, IT5, IT6, IT7, IT8, IT9, ITA, ITB, ITC,
     &        ITD, ITE, ITF, ITX(16), ITXm, ITY(8), IV1, IV2, IV3, IV4,
     &        IV5, IV6, IV7, IV8, MR, MS, MW, NPX
      REAL*8 XE, XM, XN, XZ
      COMMON /DCONT / XE, XM, XN, XZ
      COMMON /INOUT / MR, MW, MS
      COMMON /POTE1 / ITX, IMAx, INTc, INLs, INVc, INVd, ITXm
      COMMON /POTE2 / ITY, INVt, INTv, INSl, NPX
C
C Dummy arguments
C
      REAL*8 Aconv, Ccz, Chb
      INTEGER Idt, Iqm, Ism, Nbt1, Ncold, Ncoll, Ncolt, Npp
      REAL*8 Beta(9,1), Q(1), Tl(1), V(Ism,1), Val(34,1), Vco(2,1),
     &       Vdo(2,1), Wv(18,1), Wvm(18,1)
      INTEGER Ipi(11,*), Ipim(11,1), Ipp(30,1), Ivq(3,1), Ivy(7,1),
     &        Ivz(4,1), Mcm(2), Nbta(18,1), Np(1), Nval(1)
      LOGICAL Lo(250)
C
C Local variables
C
C-----Plujko_new-2005
C     REAL*8 a1, a2, ai, ar, bi, br, ci, cr, dd, ei, er, p, pgn(10), rm,
C    &       rr, w(24), wvx(18), xgn(10), xp, xq
      REAL*8 a1, a2, ai, ar, bi, br, ci, cr, dd, ei, er, pgn(10), rm,
     &       rr, w(24), wvx(18), xgn(10), xp, xq, p(Ism)
      CHARACTER*8 aa(3,8)
      CHARACTER*4 bb(2)
      DOUBLE PRECISION DABS, DATAN2, DCOS, DSIN, DSQRT
      INTEGER i, i1, i2, i3, i4, id1, idx, idy, idz, ij, ik, il, ilo(16)
     &        , invy, invz, iny, ip, ipix(11), iq, ir, is, ist, itm, j,
     &        ji, jj, k, k1, k2, k3, ki, kj, l, l1, m, mvx, n, n1, n2,
     &        nnf, npt, nva, nvx, nx1, nx2, nx3
      INTEGER IABS, IDINT, MAX0, MIN0
C
C
      EQUIVALENCE (ITX(1),IT1)
      EQUIVALENCE (ITX(2),IT2)
      EQUIVALENCE (ITX(3),IT3)
      EQUIVALENCE (ITX(4),IT4)
      EQUIVALENCE (ITX(5),IT5)
      EQUIVALENCE (ITX(6),IT6)
      EQUIVALENCE (ITX(7),IT7)
      EQUIVALENCE (ITX(8),IT8)
      EQUIVALENCE (ITX(9),IT9)
      EQUIVALENCE (ITX(10),IT0)
      EQUIVALENCE (ITX(11),ITA)
      EQUIVALENCE (ITX(12),ITB)
      EQUIVALENCE (ITX(13),ITC)
      EQUIVALENCE (ITX(14),ITD)
      EQUIVALENCE (ITX(15),ITE)
      EQUIVALENCE (ITX(16),ITF)
      EQUIVALENCE (ITY(1),IV1)
      EQUIVALENCE (ITY(2),IV2)
      EQUIVALENCE (ITY(3),IV3)
      EQUIVALENCE (ITY(4),IV4)
      EQUIVALENCE (ITY(5),IV5)
      EQUIVALENCE (ITY(6),IV6)
      EQUIVALENCE (ITY(7),IV7)
      EQUIVALENCE (ITY(8),IV8)
      DATA pgn(1), pgn(2)/1.52753387130726D-01, 1.49172986472604D-01/
      DATA pgn(3), pgn(4)/1.42096109318382D-01, 1.31688638449177D-01/
      DATA pgn(5), pgn(6)/1.18194531961518D-01, 1.01930119817240D-01/
      DATA pgn(7), pgn(8)/8.32767415767047D-02, 6.26720483341091D-02/
      DATA pgn(9), pgn(10)/4.06014298003869D-02, 1.76140071391521D-02/
      DATA xgn(1), xgn(2)/7.65265211334973D-02, 2.27785851141645D-01/
      DATA xgn(3), xgn(4)/3.73706088715420D-01, 5.10867001950827D-01/
      DATA xgn(5), xgn(6)/6.36053680726515D-01, 7.46331906460151D-01/
      DATA xgn(7), xgn(8)/8.39116971822219D-01, 9.12234428251326D-01/
      DATA xgn(9), xgn(10)/9.63971927277914D-01, 9.93128599185095D-01/
      DATA bb/'    ', 'LAST'/
      DATA aa/'      RE', 'AL VOLUM', 'E/SCALAR', ' IMAGINA',
     &     'RY VOLUM', 'E/SCALAR', '     REA', 'L SURFAC', 'E/VECTOR',
     &     '  IMAGIN', '. SURFAC', 'E/VECTOR', '  REAL S', 'PIN-ORBI',
     &     'T/TENSOR', ' IMAG. S', 'PIN-ORBI', 'T/TENSOR', '        ',
     &     '        ', ' COULOMB', '      SP', 'IN-ORBIT', ' COULOMB'/
      DATA ilo/162, 162, 162, 162, 201, 202, 162, 203, 162, 112, 162,
     &     112, 113, 114, 111, 119/
      idy = 0
      IF (.NOT.(Lo(220))) THEN
         itm = ITXm
         IF (Lo(100)) itm = itm - IT7
         IF (Lo(7)) THEN
            nnf = 2*itm
            IF (nnf.GT.Idt) CALL MEMO('POTE',Idt,nnf,2)
            idz = Idt - nnf
            ik = 1
            IF (Lo(100)) ik = IT7 + 1
            CALL STDP(V(1,ik),Ivy,Ism,Val,Nval,idz,idx,Q(nnf + 1),Wv,
     &                pgn,xgn,Npp,Np,Q(nnf + 1),Aconv,Ccz,Lo)
            idy = MAX0(idy,idx + 2*nnf)
         ELSE
            invz = INTc
            iny = 1
            IF (Lo(209)) iny = 3
            DO ip = 1, Npp
               k = IABS(Ipp(1,ip))
               invy = invz + iny
               n1 = (invy + 1)/2 + 1
               n2 = n1 + MAX0(IMAx,Iqm) + 1
               id1 = invy + 27
               idx = 10
               IF (Lo(3)) idx = 36
               IF (Lo(101)) idx = 1
               idx = MAX0(idx*id1 + 10*invy,6*Ism) + n2
               IF (idx.GT.Idt) CALL MEMO('POTE',Idt,idx,2)
               ik = ip
               IF (Lo(100)) ik = IT4 + 24*ip + 1
               CALL ROTP(Beta,Nbta,Beta(1,Nbt1 + 1),ik,V,V(1,IT3 + 1),
     &                   Ivy,Np,Q(n1),Q(n2),Q(10*invy + n2),Val(1,ip),
     &                   id1,Ism,Wv(11,k),invz,invy,Iqm,iny,Nbt1,pgn,
     &                   xgn,Ccz,Lo)
C  TO USE THE FOLDING MODEL, THE SPIN-ORBIT POTENTIALS AND THE FIRST    POTE-111
C SPIN-ORBIT NON DIAGONAL FORM FACTORS ARE NOT DERIVED ( V(R) INSTEAD OFPOTE-112
C (1/R)*(D/DR)(V(R)) )  FOR SCHROEDINGER EQUATIONS. FOR DIRAC EQUATIONS POTE-113
C THE DERIVATIVES ARE COMPUTED BUT NOT USED.                            POTE-114
               idy = MAX0(idx,idy)
               IF (Lo(74)) CALL HORA
               IF (.NOT.(Lo(117))) THEN
C  *******  FOLDING MODEL  **********                                   POTE-118
                  ist = 5 + Ism +
     &                  IDINT(2.D0*(DABS(Val(33,ip)) + 2.D0*DABS
     &                  (Val(34,ip)))/Wv(11,k))
                  IF (Val(32,ip)*Val(33,ip).EQ.0.D0) ist = Ism + 5
C THE WORKING SPACE IN P IS SHIFTED FROM V WITH THE ORIGINS IN TABLE IT POTE-122
                  nnf = 1 + Ism*itm
                  idz = nnf + 4*itm
                  idx = idz + 4*ist
                  IF (invz.NE.0) idx = idx + 2*ist*IMAx
                  idy = MAX0(idy,idx)
                  IF (idx.GT.2*Idt) CALL MEMO('POTE',Idt,(idx + 1)/2,2)
                  DO j = 1, nnf
                     Q(j) = 0.D0
                  ENDDO
                  CALL FOLD(V(1,ik),p,Val(26,ip),3,ip,Ism,ist,Aconv,Ivy,
     &                      invz,Q(idz),pgn,xgn,Wv,Np(nnf),Lo)
                  IF (Lo(74)) CALL HORA
               ENDIF
               invz = 0
            ENDDO
         ENDIF
      ENDIF
      IF (.NOT.(Lo(162))) THEN
         npt = 8*(Npp + INTc)
         IF (Lo(201)) npt = npt - Npp
         IF (Lo(202)) npt = npt - Npp
         IF (Lo(203)) npt = npt - Npp
         IF (Lo(111)) npt = npt - INTc
         IF (Lo(112)) npt = npt - 2*INTc
         IF (Lo(113)) npt = npt - INTc
         IF (Lo(114)) npt = npt - INTc
         IF (Lo(119)) npt = npt - INTc
         WRITE (62,99005) Wv(1,1), Wv(12,1), Wv(2,1), Ipi(4,1), npt
99005    FORMAT ('<POTENTI.>',F10.2,F10.5,F10.2,2I5)
         ist = 2*(Ism/2)
         idx = ist
         idy = MAX0(idy,idx)
         IF (idx.GT.2*Idt) CALL MEMO('POTE',Idt,(idx + 1)/2,2)
C PUNCH THE FORM FACTORS                                                POTE-159
         DO i = 1, ist
            Q(i) = i*Wv(11,1)
         ENDDO
         ir = 0
         DO ip = 1, Npp
            DO ij = 1, 8
               is = 1
               il = ilo(ij)
               IF (.NOT.(Lo(il))) THEN
                  ji = ip + ITX(ij)
                  IF (Lo(100)) ji = IT7 + ij + 24*(ip - 1)
                  ir = ir + 1
                  WRITE (MW,99075) (aa(j,ij),j = 1,3), ip, ir
                  WRITE (62,99075) (aa(j,ij),j = 1,3), ip, ir
                  DO i = 1, ist, 2
                     IF (i.EQ.ist - 1) is = 2
                     WRITE (MW,99080) Q(i), V(i,ji), Q(i + 1),
     &                                V(i + 1,ji), bb(is), ir
                     WRITE (62,99085) Q(i), V(i,ji), Q(i + 1),
     &                                V(i + 1,ji), bb(is), ir
                  ENDDO
               ENDIF
            ENDDO
         ENDDO
         IF (INTc.NE.0) THEN
            DO iq = 1, INTc
               DO ij = 9, 16
                  is = 1
                  il = ilo(ij)
                  IF (.NOT.(Lo(il))) THEN
                     ip = iq
                     IF (ij.EQ.13 .OR. ij.EQ.14) ip = Ivy(3,iq) + INLs
                     IF (ij.GE.15) ip = Ivy(ij - 11,iq)
                     IF (ip.GT.0) THEN
                        ji = ip + ITX(ij)
                        IF (Lo(100)) ji = IT7 + 24*Npp + 11*iq + ij - 19
                        ir = ir + 1
                        WRITE (MW,99090) (aa(j,ij - 8),j = 1,3), iq, ir
                        WRITE (62,99090) (aa(j,ij - 8),j = 1,3), iq, ir
                        IF (Lo(200) .AND. (ij.GE.13) .AND. (ij.NE.15))
     &                      THEN
                           IF (ij.EQ.16) ji = ji + INVd
                           DO i = 1, ist, 2
                              a1 = -V(i,ji)*Q(i)**2
                              a2 = -V(i + 1,ji)*Q(i + 1)**2
                              IF (i.EQ.ist - 1) is = 2
                              WRITE (MW,99080) Q(i), a1, Q(i + 1), a2,
     &                               bb(is), ir
                              WRITE (62,99085) Q(i), a1, Q(i + 1), a2,
     &                               bb(is), ir
                           ENDDO
                        ELSE
                           DO i = 1, ist, 2
                              IF (i.EQ.ist - 1) is = 2
                              WRITE (MW,99080) Q(i), V(i,ji), Q(i + 1),
     &                               V(i + 1,ji), bb(is), ir
                              WRITE (62,99085) Q(i), V(i,ji), Q(i + 1),
     &                               V(i + 1,ji), bb(is), ir
                           ENDDO
                        ENDIF
                     ENDIF
                  ENDIF
               ENDDO
            ENDDO
         ENDIF
      ENDIF
      IF (.NOT.(Lo(220))) THEN
         IF (INTc.NE.INVt) THEN
C ADDITION OF CORRECTION TERMS OF FORM FACTORS                          POTE-211
            DO k = 1, INVt
               IF (Ivy(6,k).GT.0) THEN
                  k1 = Ivy(6,k)
                  l = Ivy(7,k) + 2
                  DO n = 1, 8
                     il = ilo(n + 8)
                     IF ((il.NE.162) .AND. Lo(il)) GOTO 10
                     l1 = l
                     m = 0
                     IF (Lo(100)) THEN
                        IF ((n.GT.4) .AND. (n.NE.7)) m = MIN0(11 - n,4)
                        k2 = IT5 + 11*k + n
                        k3 = k2 + 11*(k1 - k)
                        IF (n.LE.6) GOTO 2
                     ELSEIF (n.GT.6) THEN
                        IF (Ivy(n - 3,k).EQ.0) GOTO 10
                        k2 = ITX(n + 8) + Ivy(n - 3,k)
                        k3 = ITX(n + 8) + Ivy(n - 3,k1)
                        IF (n.EQ.8) m = INVd
                     ELSEIF (n.GT.4) THEN
                        IF (Ivy(3,k).EQ.0) GOTO 10
                        k2 = ITX(n + 8) + Ivy(3,k) + INLs
                        k3 = ITX(n + 8) + Ivy(3,k1) + INLs
                        l1 = l1 + 2
                        m = -INLs
                        GOTO 2
                     ELSE
                        k2 = ITX(n + 8) + k
                        k3 = ITX(n + 8) + k1
                        GOTO 2
                     ENDIF
                     ci = V(Ism,k3)
                     cr = V(Ism,k2)
                     GOTO 4
    2                dd = 0.D0
                     ci = 0.D0
                     cr = 0.D0
                     DO is = 1, Ism
                        dd = dd + Wv(11,1)
                        ci = ci + V(is,k3)*dd**l1
                        cr = cr + V(is,k2)*dd**l1
                     ENDDO
    4                IF ((ci.NE.0.D0) .AND. (cr.NE.0.D0)) THEN
                        cr = cr/ci
                        IF (.NOT.Lo(217)) WRITE (MW,99010) k, n, cr
99010                   FORMAT (' FORM FACTOR',I4,'  POTENTIAL',I3,
     &                          '  RATIO OF CORRECTING DEFORMATION',
     &                          D15.6)
    6                   DO is = 1, Ism
                           V(is,k2) = V(is,k2) - cr*V(is,k3)
                        ENDDO
                        IF (m.NE.0) THEN
                           k2 = k2 + m
                           k3 = k3 + m
                           m = 0
                           GOTO 6
                        ENDIF
                     ENDIF
   10             ENDDO
               ENDIF
            ENDDO
         ENDIF
         rm = Ism*Wv(11,1)
         IF (Lo(74)) CALL HORA
C STORAGE OF OPTICAL POTENTIALS                                         POTE-266
         xp = XN/Chb
         xq = xp**2
         DO kj = 1, Ncolt
            jj = MOD(kj + Ncoll - 1,Ncolt) + 1
            IF (jj.GT.Ncold) THEN
               DO i = 1, 11
                  ipix(i) = Ipim(i,jj - Ncold)
               ENDDO
               DO i = 1, 18
                  wvx(i) = Wvm(i,jj - Ncold)
               ENDDO
            ELSE
               DO i = 1, 11
                  ipix(i) = Ipi(i,jj)
               ENDDO
               DO i = 1, 18
                  wvx(i) = Wv(i,jj)
               ENDDO
            ENDIF
            IF (Lo(100)) THEN
C POTENTIALS FOR DIRAC EQUATION                                         POTE-308
C AT THIS POINT:   AFTER V(1,IT7),                                      POTE-309
C V(*,N,1) SCALAR POTENTIAL V FOR N=1,2 VECTOR POTENTIAL W FOR N=3,4    POTE-310
C          TENSOR POTENTIAL T FOR N=5,6 COULOMB POTENTIALS FOR N=7,8    POTE-311
C          THEIR FIRST DERIVATIVES FOR N=9,16                           POTE-312
C          THEIR SECOND DERIVATIVES FOR N=17,24                         POTE-313
C   THE FIRST DERIVATIVES OF NON-COULOMB POTENTIALS HAVE A REVERSED SIGNPOTE-314
               m = IT4 + 24*ipix(5)
               j = jj
               IF (j.GT.Ncoll) j = 1
               n = 14*j - 14
               rr = 0.D0
               DO is = 1, Ism
                  rr = rr + wvx(11)
                  DO k = 1, 24
                     w(k) = V(is,k + m)
                  ENDDO
                  IF (.NOT.(Lo(110))) THEN
                     DO k = 1, 24, 8
                        w(k) = w(k) + wvx(14)*w(k + 1)
                        w(k + 1) = w(k + 1) + wvx(13)*w(k + 1)
                        w(k + 2) = w(k + 2) + wvx(16)*w(k + 3)
                        w(k + 3) = w(k + 3) + wvx(15)*w(k + 3)
                        w(k + 4) = (1.D0 + wvx(18))*w(k + 4)
                        w(k + 5) = (1.D0 + wvx(17))*w(k + 5)
                     ENDDO
                  ENDIF
                  w(3) = w(3) + w(7)
                  w(11) = w(11) + w(15)
                  w(19) = w(19) + w(23)
                  w(13) = (w(13) + w(16))/XM
                  w(21) = (w(21) + w(24))/XM
                  w(14) = w(14)/XM
                  w(22) = w(22)/XM
                  w(15) = XM + wvx(7) + w(1) - w(3)
                  w(16) = w(2) - w(4)
                  V(is,n + 7) = (wvx(7) - XM - w(1) - w(3))/Chb
                  V(is,n + 8) = -(w(2) + w(4))/Chb
                  dd = w(15)**2 + w(16)**2
                  w(5) = w(15)/dd
                  w(6) = -w(16)/dd
                  dd = DSQRT(DSQRT(dd)/(XM + wvx(7)))
                  ar = .5D0*DATAN2(w(16),w(15))
                  V(is,n + 9) = dd*DCOS(ar)
                  V(is,n + 10) = dd*DSIN(ar)
                  ar = w(11) - w(9)
                  ai = w(12) - w(10)
                  br = w(17) - w(19)
                  bi = w(18) - w(20)
                  cr = ar*w(5) - ai*w(6) + w(13)
                  ci = ar*w(6) + ai*w(5) + w(14)
                  er = br*w(5) - bi*w(6) + w(13)*(cr + cr - w(13))
     &                 - w(14)*(ci + ci - w(14)) - w(21) + 2.D0*cr/rr
                  ei = br*w(6) + bi*w(5) + w(13)*(ci + ci - w(14))
     &                 + w(14)*(cr + cr - w(13)) - w(22) + 2.D0*ci/rr
                  V(is,n + 1) = -w(1) - w(3)*wvx(7)
     &                          /XM - (w(1)*w(1) - w(2)*w(2) - w(3)*w(3)
     &                          + w(4)*w(4))/(2.D0*XM)
     &                          - (.75D0*(cr**2 - ci**2) - .5D0*er)*XN
                  V(is,n + 2) = -w(2) - w(4)*wvx(7)
     &                          /XM - (w(1)*w(2) - w(3)*w(4))
     &                          /XM - (1.5D0*cr*ci - .5D0*ei)*XN
                  V(is,n + 3) = .5D0*cr*XN/rr
                  V(is,n + 4) = .5D0*ci*XN/rr
                  V(is,n + 5) = w(15)/Chb
                  V(is,n + 6) = w(16)/Chb
                  V(is,n + 11) = w(5)*Chb
                  V(is,n + 12) = w(6)*Chb
                  V(is,n + 13) = w(13)/Chb
                  V(is,n + 14) = w(14)/Chb
               ENDDO
               Vco(1,j) = w(7)*rr/Chb
               Vco(2,j) = rr*(w(7)/(XM + wvx(7)) + w(8)/XM)
            ELSE
C POTENTIALS FOR SCHROEDINGER EQUATION                                  POTE-282
               IF (jj.GT.Ncoll) THEN
                  i1 = 1
                  i2 = 2
                  i3 = 3
                  i4 = 4
               ELSE
                  i1 = ipix(11)
                  i2 = i1 + IV2
                  i3 = i1 + IV3
                  i4 = i1 + IV4
               ENDIF
               j = ipix(5)
               DO is = 1, Ism
                  V(is,i1) = V(is,j + IT1) + V(is,j + IT3) + wvx(14)
     &                       *V(is,j + IT2) + wvx(16)*V(is,j + IT4)
                  V(is,i2) = V(is,j + IT2) + V(is,j + IT4) + wvx(13)
     &                       *V(is,j + IT2) + wvx(15)*V(is,j + IT4)
                  IF (Lo(229)) V(is,i3) = V(is,j + IT5)*(1.D0 + wvx(18))
                  IF (Lo(230)) V(is,i4) = V(is,j + IT6)*(1.D0 + wvx(17))
                  IF (.NOT.Lo(203)) V(is,i3) = V(is,i3) + V(is,j + IT8)
     &                *xq
                  V(is,i1) = V(is,i1) - V(is,j + IT7)
               ENDDO
               IF (.NOT.Lo(203)) Vco(2,i1) = V(Ism,j + IT8)*rm**3/XM
               IF (.NOT.(Lo(199))) THEN
                  Vco(1,i1) = rm*V(Ism,j + IT7)*XM/(XE*Chb)
                  Vco(2,i1) = Vco(2,i1) + Vco(1,i1)*Chb/(XM + Wv(7,1))
               ENDIF
            ENDIF
            IF (jj.GT.Ncoll) THEN
               nx1 = 2*Ism + 5
               nx2 = nx1 + 10*(ipix(10) + 1)
               nx3 = 2*nx2 - 1
               CALL TLNC(Wv(11,1),ipix,wvx,Tl(ipix(8)),Ism,Q,Q(nx1),
     &                   ipix(10) + 1,Np(nx3),Q(nx2),Idt - nx3,V,Vco,Lo)
            ENDIF
         ENDDO
         IF (INTv.NE.0) THEN
C STORAGE OF TRANSITION FORM FACTORS                                    POTE-382
            DO j = 1, INTv
               ij = Ivz(1,j)
               IF (.NOT.(Lo(200))) THEN
                  ik = IT6 + 4*j
                  ki = IT5 + 11*ij
               ENDIF
               l = Ivy(4,ij)
               IF (l.NE.0) THEN
                  k = Ivy(2,ij)
                  IF (Ivq(2,k).LT.0) THEN
C MAGNETIC COULOMB TRANSITION                                           POTE-392
                     dd = 2.D0*(Wv(11,1)/Wv(8,1))**2/Chb
                     IF (Lo(100)) THEN
                        DO is = 1, Ism
                           DO m = 1, 4
                              V(is,ik + m) = 0.D0
                           ENDDO
                           V(is,ik + 3) = V(is,ki + 7)*dd
                        ENDDO
                        IF (Ivy(7,ij).LE.Mcm(1)) Vdo(1,j)
     &                      = V(Ism,ki + 7)*dd*rm**(Ivy(7,ij) + 1)
                     ELSE
                        DO is = 1, Ism
                           IF (Lo(12)) V(is,j + IV6) = 0.D0
                           V(is,j + IV5) = -V(is,l + ITE)*dd
                        ENDDO
                        IF (Ivy(7,ij).LE.Mcm(1)) Vdo(1,j)
     &                      = V(Ism,l + ITE)*dd*rm**(Ivy(7,ij) + 1)
                     ENDIF
                     GOTO 20
                  ENDIF
               ENDIF
C CENTRAL TRANSITION FORM-FACTOR                                        POTE-407
               i1 = Ivz(2,j)/(Ncoll + 1)
               i2 = MOD(Ivz(2,j),Ncoll + 1)
               DO k = 1, 6
                  wvx(k) = 0.D0
                  IF (i2.NE.0) wvx(k) = .5D0*(Wv(k + 12,i1) + Wv(k + 12,
     &                                  i2))
               ENDDO
               IF (Lo(100)) THEN
                  DO is = 1, Ism
                     V(is,ik + 1) = V(is,ki + 1) + wvx(2)*V(is,ki + 2)
                     V(is,ik + 2) = V(is,ki + 2) + wvx(1)*V(is,ki + 2)
                     V(is,ik + 3) = V(is,ki + 3) + wvx(4)*V(is,ki + 4)
                     V(is,ik + 4) = V(is,ki + 4) + wvx(3)*V(is,ki + 4)
                  ENDDO
                  IF (l.NE.0) THEN
C COULOMB TRANSITION FORM FACTOR FOR DIRAC EQUATION                     POTE-432
                     DO is = 1, Ism
                        V(is,ik + 3) = V(is,ik + 3) + V(is,ki + 7)
                     ENDDO
                     IF (Ivy(7,ij).LE.Mcm(1)) Vdo(1,j) = V(Ism,ki + 7)
     &                   *rr**(Ivy(7,ij) + 1)
                  ENDIF
                  DO is = 1, Ism
                     cr = V(is,ik + 1)
                     ci = V(is,ik + 2)
                     V(is,ik + 1) = xp*(V(is,ik + 3) + cr)
                     V(is,ik + 2) = xp*(V(is,ik + 4) + ci)
                     V(is,ik + 3) = xp*(V(is,ik + 3) - cr)
                     V(is,ik + 4) = xp*(V(is,ik + 4) - ci)
                  ENDDO
               ELSE
                  DO is = 1, Ism
                     IF (Lo(12)) V(is,j + IV6) = V(is,ij + IT0)
     &                   + V(is,ij + ITB) + wvx(1)*V(is,ij + IT0)
     &                   + wvx(3)*V(is,ij + ITB)
                     V(is,j + IV5) = V(is,ij + IT9) + V(is,ij + ITA)
     &                               + wvx(2)*V(is,ij + IT0) + wvx(4)
     &                               *V(is,ij + ITB)
                  ENDDO
                  IF (l.NE.0) THEN
C COULOMB TRANSITION FORM FACTOR FOR SCHROEDINGER EQUATION              POTE-421
                     DO is = 1, Ism
                        V(is,j + IV5) = V(is,j + IV5) - V(is,l + ITE)
                     ENDDO
                     IF (Ivy(7,ij).LE.Mcm(1)) Vdo(1,j) = V(Ism,l + ITE)
     &                   *rm**(Ivy(7,ij) + 1)
                  ENDIF
               ENDIF
               IF (j.LE.INVt) THEN
C SPIN-ORBIT TRANSITION FORM FACTOR FOR SCHROEDINGER EQUATION           POTE-444
                  l = Ivy(3,ij)
                  IF (l.NE.0) THEN
                     IF (Lo(100)) THEN
C SPIN-ORBIT TRANSITION FORM FACTOR FOR DIRAC EQUATION                  POTE-463
                        il = IT6 + 4*(l + INTv)
                        rr = 0.D0
                        DO is = 1, Ism
                           rr = rr + Wv(11,1)
                           V(is,il + 1) = -xq*V(is,ki + 9)
     &                        *(1.D0 + wvx(6))
                           V(is,il + 2) = -xq*V(is,ki + 10)
     &                        *(1.D0 + wvx(5))
                           V(is,il + 3) = xq*V(is,ki + 5)
     &                        /rr*(1.D0 + wvx(6))
                           V(is,il + 4) = xq*V(is,ki + 6)
     &                        /rr*(1.D0 + wvx(5))
                        ENDDO
                        IF (Ivy(5,ij).NE.0) THEN
                           rr = 0.D0
                           DO is = 1, Ism
                              rr = rr + Wv(11,1)
                              V(is,il + 1) = V(is,il + 1)
     &                           - xq*V(is,ki + 11)
                              V(is,il + 3) = V(is,il + 3)
     &                           + xq*V(is,ki + 8)/rr
                           ENDDO
                           IF (Ivy(7,ij).LE.Mcm(2)) Vdo(2,l)
     &                         = xp*V(Ism,ki + 8)*rr**(Ivy(7,ij) + 1)
                        ENDIF
                     ELSE
                        DO is = 1, Ism
                           V(is,l + IV7) = V(is,l + ITC)*(1.D0 + wvx(6))
                           V(is,l + IV7 + INSl) = V(is,l + INLs + ITC)
     &                        *(1.D0 + wvx(6))
                        ENDDO
                        IF (.NOT.(Lo(114))) THEN
                           DO is = 1, Ism
                              V(is,l + IV8) = V(is,l + ITD)
     &                           *(1.D0 + wvx(5))
                              V(is,l + IV8 + INSl)
     &                           = V(is,l + INLs + ITD)*(1.D0 + wvx(5))
                           ENDDO
                        ENDIF
                        k = Ivy(5,ij)
                        IF (k.NE.0) THEN
                           DO is = 1, Ism
                              V(is,l + IV7) = V(is,l + IV7)
     &                           + V(is,k + ITF)*xq
                              V(is,l + IV7 + INSl)
     &                           = V(is,l + IV7 + INSl)
     &                           + V(is,k + INVd + ITF)*xq
                           ENDDO
                           IF (Ivy(7,ij).LE.Mcm(2)) Vdo(2,l)
     &                         = -V(Ism,k + INVd + ITF)
     &                         *rm**(Ivy(7,ij) + 3)*xq
                        ENDIF
                     ENDIF
                  ENDIF
               ENDIF
   20       ENDDO
         ENDIF
      ENDIF
C OUTPUT OF POTENTIALS                                                  POTE-481
      IF (.NOT.(Lo(151))) THEN
         IF (Lo(100)) THEN
            n = 0
            DO l = 1, Ncoll
               WRITE (MW,99015) l
99015          FORMAT (//
     &             ' POTENTIALS OF SCHROEDINGER''S EQUATION FOR CHANNEL'
     &             ,I3/15X,'CENTRAL',27X,'SPIN-ORBIT',28X,'D(R)')
               WRITE (MW,99105) (i,(V(i,n+j),j = 1,6),i = 1,Ism)
               WRITE (MW,99020) l
99020          FORMAT (/17X,'E(R)',28X,'SQRT(D(R))',25X,'D(R)**(-1)',3X,
     &                 'FOR CHANNEL',I3)
               WRITE (MW,99105) (i,(V(i,n+j),j = 7,12),i = 1,Ism)
               IF (.NOT.(Lo(201) .AND. Lo(203))) WRITE (MW,99025) l,
     &             (i,(V(i,n+j),j = 13,14),i = 1,Ism)
99025          FORMAT (/45X,'TENSOR POTENTIAL',36X,'FOR CHANNEL',
     &                 I3/(3(2X,I3,1P,2D14.7,' I')))
               n = n + 14
            ENDDO
            l = INTv + INSl
            IF (l.NE.0) THEN
               n = IT2
               DO k = 1, l
                  IF (k.LE.INTv) WRITE (MW,99030) k
99030             FORMAT (//' SCALAR AND VECTOR MULTIPOLES',I6/)
                  IF (k.GT.INTv) WRITE (MW,99035) k
99035             FORMAT (//' TENSOR MULTIPOLES',I6/)
                  WRITE (MW,99040) (i,(V(i,n+j),j = 1,4),i = 1,Ism)
99040             FORMAT (5X,I5,1P,2D26.7,' I',10X,2D16.7,' I')
                  n = n + 4
               ENDDO
            ENDIF
         ELSE
            DO j = 1, NPX
               WRITE (MW,99045) j
99045          FORMAT (//' POTENTIAL ****',I2,' ****')
               WRITE (MW,99050) (i,V(i,j + IV1),V(i,j + IV2),i = 1,Ism)
99050          FORMAT (//' CENTRAL POTENTIAL'//(3(5X,I5,1P,2D14.5,' I'))
     &                 )
               IF (Lo(229)) WRITE (MW,99055) (i,V(i,j + IV3),i = 1,Ism)
99055          FORMAT (//' REAL SPIN-ORBIT POTENTIAL'//
     &                 (6(2X,I4,1P,D14.5)))
               IF (Lo(230)) WRITE (MW,99060) (i,V(i,j + IV4),i = 1,Ism)
99060          FORMAT (//' IMAGINARY SPIN-ORBIT POTENTIAL'//
     &                 (6(2X,I4,1P,D14.5)))
            ENDDO
            IF (IV2.NE.IV5) THEN
               nvx = IV2 - IV5
               WRITE (MW,99065)
99065          FORMAT (//' REAL MULTIPOLES'/)
               nva = MIN0(nvx,6)
               DO i = 1, Ism
                  WRITE (MW,99095) i, (j,V(i,j + IV5),j = 1,nva)
                  IF (nva.NE.nvx) WRITE (MW,99100)
     &                (j,V(i,j + IV5),j = 7,nvx)
               ENDDO
               IF (IT1.NE.IV6) THEN
                  mvx = IT1 - IV6
                  WRITE (MW,99070)
99070             FORMAT (//' IMAGINARY MULTIPOLES'/)
                  nva = MIN0(mvx,6)
                  DO i = 1, Ism
                     WRITE (MW,99095) i, (j,V(i,j + IV6),j = 1,nva)
                     IF (nva.NE.mvx) WRITE (MW,99100)
     &                   (j,V(i,j + IV6),j = 7,mvx)
                  ENDDO
               ENDIF
            ENDIF
         ENDIF
      ENDIF
      Idt = idy
      RETURN
99075 FORMAT (2X,3A8,' POTENTIAL ***',I2,' ***',5X,I5)
99080 FORMAT (2X,0P,F10.5,1P,D20.6,0P,F10.5,1P,D20.6,A4,I6)
99085 FORMAT (0P,F10.5,1P,D20.6,0P,F10.5,1P,D20.6,A4,I6)
99090 FORMAT (2X,3A8,' TRANSITION POTENTIAL ***',I2,' ***',5X,I5)
99095 FORMAT (4X,I4,6(I4,1P,D14.5))
99100 FORMAT ((8X,6(I4,1P,D14.5)))
99105 FORMAT (2X,I3,1P,2D14.7,' I',5X,2D14.7,' I',5X,2D14.7,' I')
      END
C 25/07/04                                                      ECIS03  ROTP-000
      SUBROUTINE ROTP(Beta,Nbta,Bta,Ip,V,Va,Ivy,Iv,Pp,B,P,Val,Id1,Ism,H,
     &                Invz,Iq1,Iqm,Iny,Nbt1,Pgn,Xgn,Ccz,Lo)
C INPUT VARIABLES:  BETA,NBTA: DEFORMATIONS, EQUIVALENT BY CALL         ROTP-003
C                   BTA:       STATIC DEFORMATIONS (ROTATIONAL MODEL)   ROTP-004
C                   IP:        POTENTIAL NUMBER (SCHROEDINGER EQUATION) ROTP-005
C                              ADDRESS TO TEMPORARILY STORAGE OF DIRAC  ROTP-006
C                              POTENTIALS IN V                          ROTP-007
C                   IVY:       DESCRIPTION OF FORM FACTORS              ROTP-008
C                              (SEE THIRD PART OF IQ IN REDM)           ROTP-009
C                   VAL:       OPTICAL PARAMETERS                       ROTP-010
C                   ID1:       FIRST DIMENSION OF THE WORKING SPACE P   ROTP-011
C                   ISM,H:     NUMBER AND SIZE OF STEPS                 ROTP-012
C                   INVZ:      NUMBER OF TRANSITION FORM FACTORS        ROTP-013
C                   IQ1:       INY + NUMBER OF TRANSITION FORM FACTORS  ROTP-014
C                   IQM:       MAXIMUM MULTIPOLARITY OF STATIC DEFORM.  ROTP-015
C                   INY:       1 + NUMBER OF DERIVATIVES OF CENTRAL     ROTP-016
C                              POTENTIALS ( SCHROEDINGER: 1, DIRAC: 2)  ROTP-017
C                   NBT1:      NUMBER OF VIBRATIONS                     ROTP-018
C                   PGN,XGN:   WEIGHTS, ABSCISSAE OF LEGENDRE INTEGRAL  ROTP-019
C                   LO:        LOGICAL CONTROLS                         ROTP-020
C IN COMMON /POTE1/ (SEE REDM) NUMBER AND STARTING ADDRESS OF DIFFERENT ROTP-021
C            POTENTIALS AND FORM  FACTOR IN V FOR SCHROEDINGER EQUATION ROTP-022
C IN COMMON /DCONS/ (SEE CALC) HBAR, COULOMB PARAMETER                  ROTP-023
C OUTPUT VARIABLES: V:         POTENTIALS AND TRANSITION FORM FACTORS   ROTP-024
C                              ONLY POTENTIALS AND DERIVATIVES FOR DIRACROTP-025
C                   VA:        TRANSITION FORM FACTORS FOR DIRAC EQU.   ROTP-026
C WORKING SPACE:    IV:        ORDER OF DERIVATIVE OF THE IQ1 FORM FAC. ROTP-027
C                   PP:        INTERMEDIATE RESULTS, WEIGHTS, ....      ROTP-028
C                   B:         FOR DEFORMATIONS                         ROTP-029
C                   P:         DOUBLE AND SINGLE PREC. IN EQUIVALENCE   ROTP-030
C***********************************************************************ROTP-031
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER IMAx, INLs, INTc, INVc, INVd, IT0, IT1, IT2, IT3, IT4,
     &        IT5, IT6, IT7, IT8, IT9, ITA, ITB, ITC, ITD, ITE, ITF,
     &        ITX(16), ITXm, MR, MS, MW
      COMMON /INOUT / MR, MW, MS
      COMMON /POTE1 / ITX, IMAx, INTc, INLs, INVc, INVd, ITXm
C
C Dummy arguments
C
      REAL*8 Ccz, H
      INTEGER Id1, Invz, Iny, Ip, Iq1, Iqm, Ism, Nbt1
      REAL*8 B(10,1), Beta(9,1), Bta(9,1), P(Id1,3), Pgn(10), Pp(2),
     &       V(Ism,1), Va(Ism,11,1), Val(25), Xgn(10)
      INTEGER Iv(1), Ivy(7,2), Nbta(18,1)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 ar, c, c1, c2, d, dd(2), ep(8), q(8,12,3), r, rr, sr,
     &       srd(4), vr(6,10), vs(14), zt, zz(2)
      DOUBLE PRECISION DABS, DEXP, DLOG, DMAX1
      INTEGER i, i1, i2, idg, idr, ids, idt, idv, idz, ij, inx, is,
     &        iz(8,2), j, k, k1, k2, l, ldl(8), m, n
      LOGICAL lq(8,5)
      INTEGER MAX0
C
C
      EQUIVALENCE (ITX(1),IT1)
      EQUIVALENCE (ITX(2),IT2)
      EQUIVALENCE (ITX(3),IT3)
      EQUIVALENCE (ITX(4),IT4)
      EQUIVALENCE (ITX(5),IT5)
      EQUIVALENCE (ITX(6),IT6)
      EQUIVALENCE (ITX(7),IT7)
      EQUIVALENCE (ITX(8),IT8)
      EQUIVALENCE (ITX(9),IT9)
      EQUIVALENCE (ITX(10),IT0)
      EQUIVALENCE (ITX(11),ITA)
      EQUIVALENCE (ITX(12),ITB)
      EQUIVALENCE (ITX(13),ITC)
      EQUIVALENCE (ITX(14),ITD)
      EQUIVALENCE (ITX(15),ITE)
      EQUIVALENCE (ITX(16),ITF)
      DATA ldl/7, 112, 7, 112, 113, 114, 111, 119/
      DATA srd/1.D0, 1.D0, 2.D0, 6.D0/
C CHECKS OF DIFFUSENESSES                                               ROTP-045
      DO i = 1, 8
         j = ldl(i)
         lq(i,5) = Lo(j)
         lq(i,1) = Val(3*i - 2).EQ.0.D0
         lq(i,2) = (i.LE.6) .OR. (Val(3*i - 2)*Val(3*i).NE.0.D0)
         lq(i,3) = lq(i,1) .OR. (.NOT.lq(i,2))
         lq(i,2) = lq(i,2) .OR. lq(i,1)
         IF (.NOT.(lq(i,1))) THEN
            lq(i,4) = Lo(109) .OR. (Val(3*i - 1).GE.0.D0)
            IF (lq(i,2)) THEN
               IF (Val(3*i).LT.0.02D0*H) THEN
                  WRITE (MW,99005) Val(3*i), i, Ip
99005             FORMAT (' TOO SMALL DIFFUSENESS =',D15.6,
     &                    ' FOR THE POTENTIAL',2I4,
     &                    '   CHANGED INTO ITS MINIMUM VALUE')
                  Val(3*i) = DMAX1( - Val(3*i),0.02D0*H)
               ENDIF
            ENDIF
            IF (.NOT.(Val(3*i-1).GE.H .OR. Lo(9))) THEN
               WRITE (MW,99010) Val(3*i - 1), i, Ip
99010          FORMAT (' TOO SMALL COULOMB RADIUS =',D15.6,
     &                 ' FOR THE POTENTIAL',2I4,
     &                 '   CHANGED INTO ITS MINIMUM VALUE')
               Val(3*i - 1) = DMAX1( - Val(3*i - 1),H)
            ENDIF
         ENDIF
      ENDDO
      lq(1,2) = lq(7,2) .AND. lq(8,2)
      idg = 0
      inx = Iny + 1
      sr = 1.D0
      DO i = 1, Iq1
         Iv(i) = i + 3
         IF (i.GT.Iny) THEN
            k = MOD(Ivy(1,i - Iny),1000)
            IF (k.EQ.0 .OR. Lo(3)) THEN
               Iv(i) = k + 1
               idg = MAX0(idg,k)
               IF (.NOT.(Lo(1))) THEN
                  DO j = 1, 8
                     IF (Lo(106)) sr = DABS(Val(3*j - 1))
                     B(j,i) = sr**k*0.282095D0*Beta(j,k + 1)/srd(k + 1)
                  ENDDO
                  GOTO 50
               ENDIF
            ELSE
               IF (k.GT.Nbt1) THEN
                  k1 = MOD(k,Nbt1 + 1)
                  k2 = k/(Nbt1 + 1)
                  idg = MAX0(idg,2)
                  Iv(i) = 3
                  DO j = 1, 8
                     IF (Lo(106)) sr = DABS(Val(3*j - 1))
                     B(j,i) = 0.0397887D0*Beta(j,k1)*Beta(j,k2)*sr*sr
                  ENDDO
               ELSE
                  Iv(i) = 2
                  idg = MAX0(idg,1)
                  DO j = 1, 8
                     IF (Lo(106)) sr = DABS(Val(3*j - 1))
                     B(j,i) = 0.282095D0*Beta(j,k)*sr
                  ENDDO
               ENDIF
               GOTO 50
            ENDIF
         ENDIF
         DO j = 1, 8
            B(j,i) = 1.D0
         ENDDO
   50    B(9,i) = B(5,i)
         B(10,i) = B(6,i)
      ENDDO
      Iv(1) = 1
C SET UP OF FORM FACTOR COMPUTATION                                     ROTP-099
      ids = 1
      idr = 1
      IF (Lo(17) .OR. Lo(99)) ids = 0
      IF (Lo(209)) idr = 0
      idt = idr + ids
      DO i = 1, 8
         idz = idg
         IF (lq(i,5)) idz = 0
         iz(i,2) = idz + 1
         IF (.NOT.(lq(i,3))) THEN
            ep(i) = DEXP(H/Val(3*i))
            IF ((i.EQ.3) .OR. (i.EQ.4)) idz = idz + idr
            IF ((i.EQ.5) .OR. (i.EQ.6) .OR. (i.EQ.8)) idz = idz + ids
            IF (Lo(209)) idz = MAX0(idz,2)
         ENDIF
         iz(i,1) = idz
      ENDDO
C LQ(I,1) IS .TRUE. IF THE FORM FACTOR IS NOT USED                      ROTP-115
C LQ(I,2) IS .TRUE. FOR COULOMB FORM FACTOR WITH DIFFUSENESS            ROTP-116
C LQ(I,3) IS .FALSE. FOR ANY WOODS-SAXON FORM FACTORS                   ROTP-117
C LQ(I,4) IS .FALSE. FOR SYMMETRISED WOODS-SAXON FORM FACTORS           ROTP-118
C LQ(I,5) IS .FALSE. FOR DEFORMED FORM FACTORS                          ROTP-119
      CALL ROTD(Nbta,Bta,Ivy,Iv,Pp,P,q,Val,Id1,Invz,IMAx,Iq1,Iqm,Iny,
     &          idt,lq,dd,Pgn,Xgn,Lo)
      zz(1) = Ccz*Val(19)
      zz(2) = Ccz*Val(22)
      IF (dd(1).NE.0.D0) zz(1) = zz(1)/dd(1)
      IF (dd(2).NE.0.D0) zz(2) = zz(2)/dd(2)
      DO i = 1, 60
         vr(i,1) = 0.D0
      ENDDO
      r = 0.D0
      DO is = 1, Ism
         r = r + H
         DO i = 1, Iq1
            DO j = 17, 27
               P(j,i) = 0.D0
            ENDDO
         ENDDO
C INTEGRATION LOOP                                                      ROTP-135
         DO j = 1, idt
            DO i = 1, 8
               IF (.NOT.(lq(i,3))) THEN
                  IF (P(i,j).NE.0.D0) THEN
                     IF (P(i,j).LT.1.D15) P(i,j) = P(i,j)*ep(i)
                  ELSE
                     q(i,j,1) = q(i,j,1) + H
                     IF (q(i,j,1) + 50.D0*Val(3*i).GT.0.D0) P(i,j)
     &                   = DEXP(q(i,j,1)/Val(3*i))
                  ENDIF
                  IF ((.NOT.lq(i,4)) .AND. P(i + 8,j).GT.1.D-15)
     &                P(i + 8,j) = P(i + 8,j)/ep(i)
                  idv = iz(i,1)
                  vr(1,i) = Val(3*i - 2)/(1.D0 + P(i,j))
                  IF (idv.GT.0) THEN
                     ar = 1.D0/(Val(3*i)*(1.D0 + P(i,j)))
                     vr(2,i) = vr(1,i)*ar*P(i,j)
                     IF (idv.GT.1) vr(3,i) = vr(2,i)*ar*(P(i,j) - 1.D0)
                     IF (idv.GT.2) vr(4,i) = vr(2,i)
     &                   *(P(i,j)**2 - 4.D0*P(i,j) + 1.D0)*ar*ar
                     IF (idv.GT.3) vr(5,i) = vr(3,i)
     &                   *(P(i,j)**2 - 10.D0*P(i,j) + 1.D0)*ar*ar
                  ENDIF
                  IF (lq(i,4)) THEN
                     IF ((i.GE.3) .AND. (i.LT.7) .AND. (idt.NE.0)) THEN
                        IF (i.GT.4) THEN
                           IF (ids.NE.0) THEN
                              IF (Lo(100)) THEN
                                 DO k = 1, idv
                                    vr(k,i + 4) = vr(k + 1,i)
                                 ENDDO
                              ELSE
                                 DO k = 1, idv
                                    vr(k,i + 4) = vr(k,i)/r**2
                                    vr(k,i) = vr(k + 1,i)/r
                                 ENDDO
                              ENDIF
                           ENDIF
                        ELSEIF (idr.NE.0) THEN
                           DO k = 1, idv
                              vr(k,i) = 4.D0*vr(k + 1,i)*Val(3*i)
                           ENDDO
                        ENDIF
                     ENDIF
                     IF (Lo(209)) THEN
                        vr(5,i) = vr(2,i)
                        vr(6,i) = vr(3,i)
                     ENDIF
                  ELSE
                     vs(10) = 1.D0/(1.D0 + P(i + 8,j))
                     IF (idv.GT.0) THEN
                        ar = vs(10)/Val(3*i)
                        vs(11) = vs(10)*ar*P(i + 8,j)
                        IF (idv.GT.1) vs(12) = vs(11)
     &                      *ar*(P(i + 8,j) - 1.D0)
                        IF (idv.GT.2) vs(13) = vs(11)
     &                      *(P(i + 8,j)**2 - 4.D0*P(i + 8,j) + 1.D0)
     &                      *ar*ar
                        IF (idv.GT.3) vs(14) = vs(12)
     &                      *(P(i + 8,j)**2 - 10.D0*P(i + 8,j) + 1.D0)
     &                      *ar*ar
                        IF (idv.GT.3) vs(5) = vr(1,i)*vs(14)
     &                      + 4.D0*vr(2,i)*vs(13) + 6.D0*vr(3,i)*vs(12)
     &                      + 4.D0*vr(4,i)*vs(11) + vr(5,i)*vs(10)
                        IF (idv.GT.2) vs(4) = vr(1,i)*vs(13)
     &                      + 3.D0*vr(2,i)*vs(12) + 3.D0*vr(3,i)*vs(11)
     &                      + vr(4,i)*vs(10)
                        IF (idv.GT.1) vs(3) = vr(1,i)*vs(12)
     &                      + 2.D0*vr(2,i)*vs(11) + vr(3,i)*vs(10)
                        IF (idv.GT.0) vs(2) = vr(1,i)*vs(11) + vr(2,i)
     &                      *vs(10)
                     ENDIF
                     vs(1) = vr(1,i)*vs(10)
                     IF ((i.GE.3) .AND. (i.LT.7) .AND. (idt.NE.0)) THEN
                        IF (idv.GT.3) vs(9) = vr(1,i)*vs(14)
     &                      + 2.D0*vr(2,i)*vs(13) - 2.D0*vr(4,i)*vs(11)
     &                      - vr(5,i)*vs(10)
                        IF (idv.GT.2) vs(8) = vr(1,i)*vs(13) + vr(2,i)
     &                      *vs(12) - vr(3,i)*vs(11) - vr(4,i)*vs(10)
                        IF (idv.GT.1) vs(7) = vr(1,i)*vs(12) - vr(3,i)
     &                      *vs(10)
                        vs(6) = vr(1,i)*vs(11) - vr(2,i)*vs(10)
                        IF (i.GT.4) THEN
                           IF (ids.NE.0) THEN
                              IF (Lo(100)) THEN
                                 DO k = 1, idv
                                    vr(k,i + 4) = -vs(k + 5)
                                 ENDDO
                              ELSE
                                 DO k = 1, idv
                                    vr(k,i + 4) = vs(k)/r**2
                                    vr(k,i) = -vs(k + 5)/r
                                 ENDDO
                                 GOTO 60
                              ENDIF
                           ENDIF
                        ELSEIF (idr.NE.0) THEN
                           ar = 4.D0*r*Val(3*i)/Val(3*i - 1)
                           DO k = 1, idv
                              vr(k,i) = ar*vs(k + 5)
                           ENDDO
                           GOTO 60
                        ENDIF
                     ENDIF
                     IF (Lo(209)) THEN
                        vr(6,i) = vr(3,i)*vs(10) - 2.D0*vr(2,i)*vs(11)
     &                            + vr(1,i)*vs(12)
                        vr(5,i) = vr(2,i)*vs(10) - vr(1,i)*vs(11)
                     ENDIF
                     idz = iz(i,2)
                     DO k = 1, idz
                        vr(k,i) = vs(k)
                     ENDDO
                  ENDIF
               ENDIF
   60       ENDDO
            IF (Lo(199)) THEN
               DO l = 1, Iq1
                  k = Iv(l)
                  DO m = 1, 10
                     P(m + 16,l) = P(m + 16,l) + vr(k,m)*P(l + 27,j)
     &                             *B(m,l)
                  ENDDO
               ENDDO
               IF (.NOT.(lq(1,2))) THEN
C DEFORMED COULOMB POTENTIAL                                            ROTP-226
                  DO i = 7, 8
                     IF (.NOT.(lq(i,2))) THEN
                        c = P(i,j)/r
                        IF (i.EQ.8 .AND. Lo(117) .AND. Lo(200)) THEN
                           c1 = zz(i - 6)*P(28,j)
                           IF (r.GT.P(i,j)) c1 = c1*c**3
                           P(24,1) = P(24,1) + c1
                        ELSEIF (r.LT.P(i,j)) THEN
                           P(i + 16,1) = P(i + 16,1)
     &                        + (0.5D0*P(i,j)*P(i,j) - r*r/6.D0)
     &                        *zz(i - 6)*P(28,j)*3.D0
                           IF (.NOT.(Lo(200))) THEN
                              P(i + 16,2) = P(i + 16,2) + r*zz(i - 6)
     &                           *P(28,j)
                              P(i + 16,3) = P(i + 16,3) - zz(i - 6)
     &                           *P(28,j)
                           ENDIF
                        ELSE
                           P(i + 16,1) = P(i + 16,1) + zz(i - 6)
     &                        *(P(i,j)**2)*c*P(28,j)
                           IF (.NOT.(Lo(200))) THEN
                              P(i + 16,2) = P(i + 16,2) + zz(i - 6)
     &                           *P(i,j)*c**2*P(28,j)
                              P(i + 16,3) = P(i + 16,3) + zz(i - 6)
     &                           *2.D0*c**3*P(28,j)
                           ENDIF
                        ENDIF
                        IF (Invz.NE.0) THEN
                           IF (.NOT.(Lo(8*i+55))) THEN
                              DO k = inx, Iq1
                                 l = Ivy(7,k - Iny) + 1
                                 IF ((Ivy(i-3,k-Iny).NE.0) .AND.
     &                               (l.NE.1)) THEN
                                    d = l
                                    n = Iv(k)
                                    IF (r.GE.P(i,j)) THEN
                                       c1 = (P(i,j)**2)*(c**l)
     &                                    *3.D0/((d + 2.D0)
     &                                    *(2.D0*d - 1.D0))
                                       IF (n.GT.1) c1 = c1*(d + 2.D0)
     &                                    /P(i,j)
                                       IF (n.GT.2) c1 = c1*(d + 1.D0)
     &                                    /P(i,j)
                                       IF (n.GT.3) c1 = c1*d/P(i,j)
                                    ELSEIF (l.NE.3) THEN
                                       IF (n.EQ.1)
     &                                    c1 = r*r*(1.D0/(d + 2.D0)
     &                                    - 1.D0/(c**(l-3)*(2.D0*d-1.D0)
     &                                    ))*3.D0/(d - 3.D0)
                                       IF (n.GE.2) c1 = r/c**(l - 2)
     &                                    *3.D0/(2.D0*d - 1.D0)
                                       IF (n.GE.3) c1 = -c1*(d - 2.D0)
     &                                    /P(i,j)
                                       IF (n.EQ.4) c1 = -c1*(d - 1.D0)
     &                                    /P(i,j)
                                    ELSE
                                       IF (n.EQ.1)
     &                                    c1 = r*r*(0.2D0 + DLOG(c))
     &                                    *0.6D0
                                       IF (n.GE.2) c1 = 0.6D0*r/c
                                       IF (n.GE.3) c1 = -c1/P(i,j)
                                       IF (n.GE.4) c1 = -2.D0*c1/P(i,j)
                                    ENDIF
                                    IF (i.EQ.7 .OR. Lo(17)) THEN
                                       P(i + 16,k) = P(i + 16,k)
     &                                    + zz(i - 6)*c1*P(k + 27,j)
     &                                    *B(i,k)
                                    ELSE
                                       IF (r.GE.P(i,j)) THEN
                                         c2 = -d*c1/r
                                       ELSEIF (l.NE.3) THEN
                                         IF (n.EQ.1)
     &                                      c2 = (2.D0/(d + 2.D0)
     &                                      - (d - 1.D0)
     &                                      /(c**(l-3)*(2.D0*d-1.D0)))
     &                                      *3.D0/(d - 3.D0)*r
                                         IF (n.NE.1) c2 = (d - 1.D0)
     &                                      *c1/r
                                       ELSE
                                         IF (n.EQ.1)
     &                                      c2 = -1.2D0*(0.3D0*r -
     &                                      DLOG(c))*r
                                         IF (n.GE.2) c2 = 2.D0*c1/r
                                       ENDIF
                                       IF (Lo(100)) THEN
                                         P(27,k) = P(27,k) - zz(2)
     &                                      *c2*P(k + 27,j)*B(i,k)
                                         P(24,k) = P(24,k) + zz(2)
     &                                      *c1*P(k + 27,j)*B(i,k)
                                       ELSE
                                         P(27,k) = P(27,k) - zz(2)
     &                                      *c1*P(k + 27,j)*B(i,k)/r**2
                                         P(24,k) = P(24,k) - zz(2)
     &                                      *c2*P(k + 27,j)*B(i,k)/r
                                       ENDIF
                                    ENDIF
                                 ENDIF
                              ENDDO
                           ENDIF
                        ENDIF
                     ENDIF
                  ENDDO
               ENDIF
            ELSE
               CALL ROTZ(vr,Xgn,r,q,Val,j,Iv,B,P,Id1,Iq1,Ccz,Lo)
            ENDIF
         ENDDO
C STORAGE OF FORM FACTORS                                               ROTP-292
         IF (Lo(100)) THEN
            k = Ip
            DO i = 1, 3
               DO j = 17, 24
                  V(is,k) = P(j,i)
                  k = k + 1
               ENDDO
            ENDDO
            IF (Invz.NE.0) THEN
               DO k = 1, Invz
                  DO j = 1, 11
                     Va(is,j,k) = P(j + 16,k + 3)
                  ENDDO
               ENDDO
            ENDIF
         ELSE
            V(is,Ip + IT1) = P(17,1)
            V(is,Ip + IT2) = P(18,1)
            V(is,Ip + IT3) = P(19,1)
            V(is,Ip + IT4) = P(20,1)
            IF (.NOT.Lo(201)) V(is,Ip + IT5) = P(21,1)
            IF (.NOT.Lo(202)) V(is,Ip + IT6) = P(22,1)
            V(is,Ip + IT7) = P(23,1)
            IF (.NOT.Lo(203)) V(is,Ip + IT8) = P(24,1)
            IF (Invz.GT.0) THEN
               DO j = 1, Invz
                  k = j + Iny
                  V(is,j + IT9) = P(17,k)
                  V(is,j + ITA) = P(19,k)
                  IF (.NOT.(Lo(112))) THEN
                     V(is,j + IT0) = P(18,k)
                     V(is,j + ITB) = P(20,k)
                  ENDIF
                  ij = Ivy(4,j)
                  IF (ij.NE.0) V(is,ij + ITE) = P(23,k)
                  ij = Ivy(3,j)
                  IF (ij.NE.0) THEN
                     V(is,ij + ITC) = P(21,k)
                     V(is,ij + ITC + INLs) = -P(25,k)
                     IF (.NOT.(Lo(114))) THEN
                        V(is,ij + ITD) = P(22,k)
                        V(is,ij + ITD + INLs) = -P(26,k)
                     ENDIF
                  ENDIF
                  ij = Ivy(5,j)
                  IF (ij.NE.0) THEN
                     V(is,ij + ITF) = P(24,k)
                     V(is,ij + ITF + INVd) = P(27,k)
                  ENDIF
               ENDDO
            ENDIF
         ENDIF
      ENDDO
C COULOMB POTENTIALS WITH DIFFUSE CHARGE DISTRIBUTION                   ROTP-337
      IF (lq(7,3) .AND. lq(8,3)) RETURN
      DO i = 7, 8
         IF (.NOT.(lq(i,3))) THEN
            i1 = Ip + ITX(i)
            IF (i.EQ.8 .AND. Lo(117) .AND. Lo(200)) THEN
               CALL COPO(P,V(1,i1),P,Ism,H,0,Val(3*i - 2),Val(25),Ccz,
     &                   zt,.FALSE.,.FALSE.)
               CALL DERI(V(1,i1),P,H,Ism,.FALSE.)
            ELSE
               IF (Lo(100)) i1 = Ip + i - 1
               CALL COPO(V(1,i1),V(1,i1),P,Ism,H,0,Val(3*i - 2),Val(25),
     &                   Ccz,zt,.FALSE.,.FALSE.)
               IF (.NOT.(Lo(200))) THEN
                  CALL DERI(V(1,i1 + 8),V(1,i1),H,Ism,.TRUE.)
                  CALL DERI(V(1,i1 + 16),V(1,i1 + 8),H,Ism,.TRUE.)
               ENDIF
            ENDIF
            IF (.NOT.(Invz.EQ.0 .OR. Lo(8*i+55))) THEN
               DO j = 1, Invz
                  n = Ivy(i - 3,j)
                  l = Ivy(7,j)
                  IF ((n.NE.0) .AND. (l.NE.0)) THEN
                     i1 = n + ITX(i + 8)
                     IF (Lo(100)) i1 = IT5 + 11*j + i
                     i2 = i1
                     IF (Lo(200) .AND. (i.EQ.8) .AND. Lo(117)) i2 = i2 +
     &                   INVd
                     CALL COPO(V(1,i2),V(1,i1),P,Ism,H,l,Val(3*i - 2),
     &                         Val(25),Ccz,zt,.FALSE.,.TRUE.)
                     IF (.NOT.((i.EQ.7) .OR. Lo(17))) THEN
                        IF (Lo(200)) THEN
                           CALL DERI(V(1,i1),V(1,i2),H,Ism,.FALSE.)
                           rr = 0.D0
                           DO is = 1, Ism
                              rr = rr + H
                              V(is,i2) = -V(is,i2)/rr**2
                           ENDDO
                        ELSE
                           CALL DERI(V(1,i1 + 3),V(1,i1),H,Ism,.TRUE.)
                        ENDIF
                     ENDIF
                  ENDIF
               ENDDO
            ENDIF
         ENDIF
      ENDDO
      RETURN
      END
C 01/01/04                                                      ECIS03  ROTD-000
      SUBROUTINE ROTD(Nbta,Bta,Ivy,Iv,Pp,P,Q,Val,Id1,Invz,Imax,Iq1,Iqm,
     &                Iny,Idt,Lq,Dd,Pgn,Xgn,Lo)
C       SYMMETRIC ROTATIONAL MODEL                                      ROTD-003
C A 20-POINTS GAUSS-LEGENDRE INTEGRATION METHOD IS USED, REDUCED TO 10  ROTD-004
C VALUES BY SYMMETRY                                                    ROTD-005
C                                                                       ROTD-006
C       ASYMMETRIC ROTATIONAL MODEL                                     ROTD-007
C 36 VALUES OF (THETA,PHI) HAVE BEEN CHOSEN. THE VALUES OF THETA ARE    ROTD-008
C N*PI/14. AND FOR EACH VALUE OF "N" THERE ARE N+1 VALUES OF PHI EQUI-  ROTD-009
C DISTANT BETWEEN 0. AND PI/2.   THE MATRIX,THE ELEMENTS OF WHICH ARE   ROTD-010
C THE ROTATION MATRIX ELEMENTS FOR THESE ANGLES AND L GIVEN IN NL,K IN  ROTD-011
C NK HAS BEEN INVERTED . THE COEFFICIENTS OF THE 15 LOWEST (L,K) ARE    ROTD-012
C STORED IN POIDS . THE 15 REDUCED ROTATION MATRIX ELEMENTS FOR THE 8   ROTD-013
C VALUES OF THETA ARE IN RB .                                           ROTD-014
C                                                                       ROTD-015
C       VIBRATIONAL MODEL                                               ROTD-016
C THE ANGULAR INTEGRATION IS REDUCED TO ONE POINT.                      ROTD-017
C INPUT VARIABLES:  NBTA:   INFORMATIONS ON VIBRATIONS                  ROTD-018
C                   BTA:    STATIC DEFORMATIONS                         ROTD-019
C                   IVY:    INFORMATIONS ON FORM FACTORS                ROTD-020
C                   IV:     ORDER OF DERIVATIVE OF EACH FORM FACTOR     ROTD-021
C                   VAL:    OPTICAL PARAMETERS                          ROTD-022
C                   ID1,INVZ,IQ1,IQM,INY,LQ:   SEE ROTP                 ROTD-023
C                   IMAX:   MAXIMUM ANGULAR MOMENTUM                    ROTD-024
C                   PGN,XGN: WEIGHT AND ABSCISSAE OF LEGENDRE INTEGRAL  ROTD-025
C                   LO:     LOGICAL CONTROLS                            ROTD-026
C OUTPUT VARIABLES: P(I+27,J):  WEIGHT AT POINT J OF FORM FACTOR I      ROTD-027
C                   Q:      RADII IN FERMIS. IN ROTATIONAL MODEL, Q(,,2)ROTD-028
C                           IS FIRST DERIVATIVE/SIN(THETA) AND Q(,,3)   ROTD-029
C                           2ND DERIVATIVE + 1ST DERIVATIVE/TG(THETA),  ROTD-030
C                           USED FOR SCHROE. EQUIV. OF DIRAC EQUATION.  ROTD-031
C                   IDT:    NUMBER OF INTEGRATION POINTS                ROTD-032
C                   DD:     CHARGE INTEGRALS                            ROTD-033
C WORKING SPACE:    PP:     FOR LEGENDRE POLYNOMIALS                    ROTD-034
C***********************************************************************ROTD-035
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C Dummy arguments
C
      INTEGER Id1, Idt, Imax, Invz, Iny, Iq1, Iqm
      REAL*8 Bta(9,1), Dd(2), P(Id1,1), Pgn(10), Pp(2), Q(8,12,3),
     &       Val(24), Xgn(10)
      INTEGER Iv(1), Ivy(7,1), Nbta(18,1)
      LOGICAL Lo(250), Lq(8,5)
C
C Local variables
C
      REAL*8 c, c1, c2, d, ff(660), phi, pi, poids(36,15), r, rb(15,8),
     &       sr
      DOUBLE PRECISION DABS, DCOS, DEXP, DSIN, DSQRT
      INTEGER i, ij, iq, iq2, j, k, kb, kk, kl, kz, l, m, nk(36), nl(36)
      INTEGER MAX0
C
C
      EQUIVALENCE (poids(1,1),ff(1))
      EQUIVALENCE (rb(1,1),ff(541))
      DATA ff(1), ff(2)/5.12820512820513D-03, 2.43496936475441D-02/
      DATA ff(3), ff(4)/2.43496936475441D-02, 2.12528237972895D-02/
      DATA ff(5), ff(6)/5.53147440814732D-02, 2.12528237972895D-02/
      DATA ff(7), ff(8)/2.53452023906582D-02, 4.44873368571440D-02/
      DATA ff(9), ff(10)/4.44873368571440D-02, 2.53452023906582D-02/
      DATA ff(11), ff(12)/1.86559801758989D-02, 4.85184708058446D-02/
      DATA ff(13), ff(14)/4.12568870375796D-02, 4.85184708058446D-02/
      DATA ff(15), ff(16)/1.86559801758989D-02, 2.45925296747690D-02/
      DATA ff(17), ff(18)/3.46398560932081D-02, 4.17933479732147D-02/
      DATA ff(19), ff(20)/4.17933479732147D-02, 3.46398560932081D-02/
      DATA ff(21), ff(22)/2.45925296747690D-02, 1.19673178236678D-02/
      DATA ff(23), ff(24)/4.47278246564596D-02, 3.42917677140348D-02/
      DATA ff(25), ff(26)/3.69076912422490D-02, 3.42917677140348D-02/
      DATA ff(27), ff(28)/4.47278246564596D-02, 1.19673178236678D-02/
      DATA ff(29), ff(30)/1.22068028124735D-02, 1.07129429826274D-02/
      DATA ff(31), ff(32)/1.70796570854178D-02, 1.60746817649944D-02/
      DATA ff(33), ff(34)/1.60746817649944D-02, 1.70796570854178D-02/
      DATA ff(35), ff(36)/1.07129429826274D-02, 1.22068028124735D-02/
      DATA ff(37), ff(38)/1.16509780810355D-02, 5.02196040257258D-02/
      DATA ff(39), ff(40)/5.02196040257258D-02, 3.27291637647035D-02/
      DATA ff(41), ff(42)/9.18762267773519D-02, 3.27291637647035D-02/
      DATA ff(43), ff(44)/2.59023523875124D-02, 3.90112947467209D-02/
      DATA ff(45), ff(46)/3.90112947467209D-02, 2.59023523875124D-02/
      DATA ff(47), ff(48)/ - 1.94110577743667D-03, 1.63152196117813D-02/
      DATA ff(49), ff(50)/4.25393417813309D-03, 1.63152196117813D-02/
      DATA ff(51), ff(52)/ - 1.94110577743667D-03,
     &     -2.10440960549142D-03/
      DATA ff(53), ff(54)/ - 2.95605747812527D-02,
     &     -1.76788269194279D-02/
      DATA ff(55), ff(56)/ - 1.76788269194279D-02,
     &     -2.95605747812527D-02/
      DATA ff(57), ff(58)/ - 2.10440960549142D-03,
     &     -2.76725877126884D-02/
      DATA ff(59), ff(60)/ - 2.18051394343160D-02,
     &     -3.71237658735663D-02/
      DATA ff(61), ff(62)/ - 3.47941600457989D-02,
     &     -3.71237658735663D-02/
      DATA ff(63), ff(64)/ - 2.18051394343160D-02,
     &     -2.76725877126884D-02/
      DATA ff(65), ff(66)/ - 2.37727476826438D-03,
     &     -2.57698170677382D-02/
      DATA ff(67), ff(68)/ - 1.69793430277171D-02,
     &     -1.76582790639056D-02/
      DATA ff(69), ff(70)/ - 1.76582790639056D-02,
     &     -1.69793430277171D-02/
      DATA ff(71), ff(72)/ - 2.57698170677382D-02,
     &     -2.37727476826438D-03/
      DATA ff(73), ff(74)/0.D+00, 1.72605997389226D-03/
      DATA ff(75), ff(76)/ - 1.72605997389226D-03, 1.25329145074895D-02/
      DATA ff(77), ff(78)/0.D+00, -1.25329145074895D-02/
      DATA ff(79), ff(80)/2.24225003695212D-02, 2.96494182999275D-02/
      DATA ff(81), ff(82)/ - 2.96494182999275D-02,
     &     -2.24225003695212D-02/
      DATA ff(83), ff(84)/3.91319410166702D-02, 4.84852241623139D-02/
      DATA ff(85), ff(86)/0.D+00, -4.84852241623139D-02/
      DATA ff(87), ff(88)/ - 3.91319410166702D-02, 3.97624306723559D-02/
      DATA ff(89), ff(90)/8.10325074410309D-02, 2.28106411006477D-02/
      DATA ff(91), ff(92)/ - 2.28106411006477D-02,
     &     -8.10325074410309D-02/
      DATA ff(93), ff(94)/ - 3.97624306723559D-02, 5.59851854712431D-02/
      DATA ff(95), ff(96)/6.92750919115029D-02, 5.27666983806334D-02/
      DATA ff(97), ff(98)/0.D+00, -5.27666983806334D-02/
      DATA ff(99), ff(100)/ - 6.92750919115029D-02,
     &     -5.59851854712431D-02/
      DATA ff(101), ff(102)/1.57386702462217D-02, 4.84030198418523D-02/
      DATA ff(103), ff(104)/2.47182393346187D-02, 9.25890190803834D-03/
      DATA ff(105), ff(106)/ - 9.25890190803834D-03,
     &     -2.47182393346187D-02/
      DATA ff(107), ff(108)/ - 4.84030198418523D-02,
     &     -1.57386702462217D-02/
      DATA ff(109), ff(110)/1.62578391680559D-02, 5.49097361991748D-02/
      DATA ff(111), ff(112)/5.49097361991748D-02, 8.83119316755724D-03/
      DATA ff(113), ff(114)/4.65475180836232D-02, 8.83119316755724D-03/
      DATA ff(115), ff(116)/ - 1.52665570705068D-02,
     &     -4.45213321560779D-02/
      DATA ff(117), ff(118)/ - 4.45213321560779D-02,
     &     -1.52665570705068D-02/
      DATA ff(119), ff(120)/ - 3.25206220517009D-02,
     &     -5.00345998670453D-02/
      DATA ff(121), ff(122)/ - 5.61452437357254D-02,
     &     -5.00345998670453D-02/
      DATA ff(123), ff(124)/ - 3.25206220517009D-02,
     &     -5.34880433627418D-03/
      DATA ff(125), ff(126)/ - 2.71365320807763D-02,
     &     -2.11168478505607D-02/
      DATA ff(127), ff(128)/ - 2.11168478505607D-02,
     &     -2.71365320807763D-02/
      DATA ff(129), ff(130)/ - 5.34880433627418D-03,
     &     5.38896697941338D-03/
      DATA ff(131), ff(132)/2.71262358172909D-02, 2.30796535753636D-02/
      DATA ff(133), ff(134)/2.05455707964392D-02, 2.30796535753636D-02/
      DATA ff(135), ff(136)/2.71262358172909D-02, 5.38896697941338D-03/
      DATA ff(137), ff(138)/1.18873085059175D-02, 1.57695500564231D-02/
      DATA ff(139), ff(140)/1.69343260833909D-02, 1.84154828722142D-02/
      DATA ff(141), ff(142)/1.84154828722142D-02, 1.69343260833909D-02/
      DATA ff(143), ff(144)/1.57695500564231D-02, 1.18873085059175D-02/
      DATA ff(145), ff(146)/0.D+00, 8.48270535877333D-03/
      DATA ff(147), ff(148)/ - 8.48270535877333D-03,
     &     5.07879724674491D-02/
      DATA ff(149), ff(150)/0.D+00, -5.07879724674491D-02/
      DATA ff(151), ff(152)/6.07576950711252D-02, 9.00787083612551D-02/
      DATA ff(153), ff(154)/ - 9.00787083612551D-02,
     &     -6.07576950711252D-02/
      DATA ff(155), ff(156)/6.45377024914683D-02, 6.34461864848980D-02/
      DATA ff(157), ff(158)/0.D+00, -6.34461864848980D-02/
      DATA ff(159), ff(160)/ - 6.45377024914683D-02,
     &     -5.65537884945032D-03/
      DATA ff(161), ff(162)/4.77376504465041D-02, -6.49930325424402D-03/
      DATA ff(163), ff(164)/6.49930325424402D-03, -4.77376504465041D-02/
      DATA ff(165), ff(166)/5.65537884945032D-03, 1.24655233750459D-03/
      DATA ff(167), ff(168)/ - 8.76714858478633D-02,
     &     -1.18181266709155D-02/
      DATA ff(169), ff(170)/0.D+00, 1.18181266709155D-02/
      DATA ff(171), ff(172)/8.76714858478633D-02, -1.24655233750459D-03/
      DATA ff(173), ff(174)/ - 3.84487336410874D-02,
     &     -7.62058619698479D-03/
      DATA ff(175), ff(176)/ - 3.01133238640137D-02,
     &     -1.08854252444356D-02/
      DATA ff(177), ff(178)/1.08854252444356D-02, 3.01133238640137D-02/
      DATA ff(179), ff(180)/7.62058619698479D-03, 3.84487336410874D-02/
      DATA ff(181), ff(182), ff(183), ff(184)/3*0.D0,
     &     1.36660942007569D-03/
      DATA ff(185), ff(186)/ - 2.73321884015139D-03,
     &     1.36660942007569D-03/
      DATA ff(187), ff(188)/1.10470452782256D-02, -1.10470452782256D-02/
      DATA ff(189), ff(190)/ - 1.10470452782256D-02,
     &     1.10470452782256D-02/
      DATA ff(191), ff(192)/2.19899348965421D-02, 7.44598962747265D-03/
      DATA ff(193), ff(194)/ - 5.88718490480295D-02,
     &     7.44598962747265D-03/
      DATA ff(195), ff(196)/2.19899348965421D-02, 4.68819219798074D-02/
      DATA ff(197), ff(198)/1.75997201070024D-02, -6.44816420868098D-02/
      DATA ff(199), ff(200)/ - 6.44816420868098D-02,
     &     1.75997201070024D-02/
      DATA ff(201), ff(202)/4.68819219798074D-02, 3.99738678988680D-02/
      DATA ff(203), ff(204)/7.12682217154704D-02, -6.36366236436914D-02/
      DATA ff(205), ff(206)/ - 9.52109319412941D-02,
     &     -6.36366236436914D-02/
      DATA ff(207), ff(208)/7.12682217154704D-02, 3.99738678988680D-02/
      DATA ff(209), ff(210)/3.48854645305456D-02, 1.59406059510446D-02/
      DATA ff(211), ff(212)/ - 3.85251092517111D-03,
     &     -4.69735595564191D-02/
      DATA ff(213), ff(214)/ - 4.69735595564191D-02,
     &     -3.85251092517111D-03/
      DATA ff(215), ff(216)/1.59406059510446D-02, 3.48854645305456D-02/
      DATA ff(217), ff(218)/2.09351688388115D-02, 4.48693101517502D-02/
      DATA ff(219), ff(220)/4.48693101517502D-02, -2.58717911400513D-02/
      DATA ff(221), ff(222)/ - 2.81401919724747D-02,
     &     -2.58717911400513D-02/
      DATA ff(223), ff(224)/ - 2.67091832939234D-02,
     &     -6.48487928844068D-02/
      DATA ff(225), ff(226)/ - 6.48487928844068D-02,
     &     -2.67091832939234D-02/
      DATA ff(227), ff(228)/7.16351218404911D-03, 1.79021864804572D-02/
      DATA ff(229), ff(230)/2.15963617795819D-02, 1.79021864804572D-02/
      DATA ff(231), ff(232)/7.16351218404911D-03, 2.39109798331374D-02/
      DATA ff(233), ff(234)/4.82363267486100D-02, 4.45971408837992D-02/
      DATA ff(235), ff(236)/4.45971408837992D-02, 4.82363267486100D-02/
      DATA ff(237), ff(238)/2.39109798331374D-02, -8.59824516528979D-04/
      DATA ff(239), ff(240)/ - 8.77138104825350D-03,
     &     -1.02303358111611D-03/
      DATA ff(241), ff(242)/ - 4.79305557318445D-03,
     &     -1.02303358111611D-03/
      DATA ff(243), ff(244)/ - 8.77138104825350D-03,
     &     -8.59824516528979D-04/
      DATA ff(245), ff(246)/ - 1.06844320272751D-02,
     &     -1.45408758222938D-02/
      DATA ff(247), ff(248)/ - 1.99395576475419D-02,
     &     -1.82297258567795D-02/
      DATA ff(249), ff(250)/ - 1.82297258567795D-02,
     &     -1.99395576475419D-02/
      DATA ff(251), ff(252)/ - 1.45408758222938D-02,
     &     -1.06844320272751D-02/
      DATA ff(253), ff(254)/0.D+00, 2.01805115490348D-02/
      DATA ff(255), ff(256)/ - 2.01805115490348D-02,
     &     8.57318720924763D-02/
      DATA ff(257), ff(258)/0.D+00, -8.57318720924763D-02/
      DATA ff(259), ff(260)/3.23094559967599D-02, 8.19417704703203D-02/
      DATA ff(261), ff(262)/ - 8.19417704703203D-02,
     &     -3.23094559967599D-02/
      DATA ff(263), ff(264)/ - 1.46857629097277D-02,
     &     -6.79023750172081D-02/
      DATA ff(265), ff(266)/0.D+00, 6.79023750172081D-02/
      DATA ff(267), ff(268)/1.46857629097277D-02, -6.96933563711756D-02/
      DATA ff(269), ff(270)/ - 4.17790846324735D-02,
     &     -3.84574445723291D-02/
      DATA ff(271), ff(272)/3.84574445723291D-02, 4.17790846324735D-02/
      DATA ff(273), ff(274)/6.96933563711756D-02, 3.99606295249026D-02/
      DATA ff(275), ff(276)/ - 3.02669933372692D-02,
     &     1.78196010140318D-02/
      DATA ff(277), ff(278)/0.D+00, -1.78196010140318D-02/
      DATA ff(279), ff(280)/3.02669933372692D-02, -3.99606295249026D-02/
      DATA ff(281), ff(282)/ - 1.85102966735610D-03,
     &     5.84883614463197D-02/
      DATA ff(283), ff(284)/2.06176299500674D-02, 5.03674288697549D-03/
      DATA ff(285), ff(286)/ - 5.03674288697549D-03,
     &     -2.06176299500674D-02/
      DATA ff(287), ff(288)/ - 5.84883614463197D-02,
     &     1.85102966735610D-03/
      DATA ff(289), ff(290), ff(291), ff(292)/3*0.D0,
     &     8.75524578710006D-03/
      DATA ff(293), ff(294)/ - 1.75104915742001D-02,
     &     8.75524578710006D-03/
      DATA ff(295), ff(296)/5.09492763472956D-02, -5.09492763472956D-02/
      DATA ff(297), ff(298)/ - 5.09492763472956D-02,
     &     5.09492763472956D-02/
      DATA ff(299), ff(300)/5.07686792912787D-02, 3.43411087448840D-02/
      DATA ff(301), ff(302)/ - 1.70219576072325D-01,
     &     3.43411087448840D-02/
      DATA ff(303), ff(304)/5.07686792912787D-02, 5.95241999935498D-02/
      DATA ff(305), ff(306)/ - 1.56733778150275D-02,
     &     -4.38508221785223D-02/
      DATA ff(307), ff(308)/ - 4.38508221785223D-02,
     &     -1.56733778150275D-02/
      DATA ff(309), ff(310)/5.95241999935498D-02, -6.35546557275261D-02/
      DATA ff(311), ff(312)/5.26475282909628D-02, -1.74503883012358D-02/
      DATA ff(313), ff(314)/5.67150314755984D-02, -1.74503883012358D-02/
      DATA ff(315), ff(316)/5.26475282909628D-02, -6.35546557275261D-02/
      DATA ff(317), ff(318)/1.43084825509049D-02, -7.77375076960055D-02/
      DATA ff(319), ff(320)/2.99695551646778D-02, 3.34594699804229D-02/
      DATA ff(321), ff(322)/3.34594699804229D-02, 2.99695551646778D-02/
      DATA ff(323), ff(324)/ - 7.77375076960055D-02,
     &     1.43084825509049D-02/
      DATA ff(325), ff(326), ff(327), ff(328), ff(329), ff(330)
     &     /6*0.D+00/
      DATA ff(331), ff(332)/2.45227713022227D-03, -4.90455426044453D-03/
      DATA ff(333), ff(334)/4.90455426044453D-03, -2.45227713022227D-03/
      DATA ff(335), ff(336)/1.70476858680581D-02, -2.41090685616840D-02/
      DATA ff(337), ff(338)/0.D+00, 2.41090685616840D-02/
      DATA ff(339), ff(340)/ - 1.70476858680581D-02,
     &     2.87679007598782D-02/
      DATA ff(341), ff(342)/ - 6.25948031834043D-03,
     &     -7.67073502036074D-02/
      DATA ff(343), ff(344)/7.67073502036074D-02, 6.25948031834043D-03/
      DATA ff(345), ff(346)/ - 2.87679007598782D-02,
     &     6.77534129025308D-02/
      DATA ff(347), ff(348)/ - 2.45662401760060D-02,
     &     -9.29568496692793D-02/
      DATA ff(349), ff(350)/0.D+00, 9.29568496692793D-02/
      DATA ff(351), ff(352)/2.45662401760060D-02, -6.77534129025308D-02/
      DATA ff(353), ff(354)/1.40653464342708D-02, 3.44626025062703D-02/
      DATA ff(355), ff(356)/ - 6.14715612078917D-02,
     &     -3.05058349395271D-02/
      DATA ff(357), ff(358)/3.05058349395271D-02, 6.14715612078917D-02/
      DATA ff(359), ff(360)/ - 3.44626025062703D-02,
     &     -1.40653464342708D-02/
      DATA ff(361), ff(362)/2.68196038675183D-02, 2.31031610463596D-02/
      DATA ff(363), ff(364)/2.31031610463596D-02, -4.28485793267828D-02/
      DATA ff(365), ff(366)/ - 7.35437975772992D-02,
     &     -4.28485793267828D-02/
      DATA ff(367), ff(368)/8.24684503593131D-03, 1.06081754814925D-02/
      DATA ff(369), ff(370)/1.06081754814925D-02, 8.24684503593131D-03/
      DATA ff(371), ff(372)/2.51256208268608D-02, 4.43395667660788D-02/
      DATA ff(373), ff(374)/5.39942159127383D-02, 4.43395667660788D-02/
      DATA ff(375), ff(376)/2.51256208268608D-02, -2.19715194066651D-02/
      DATA ff(377), ff(378)/ - 3.13725579969708D-02,
     &     -4.08834934180796D-02/
      DATA ff(379), ff(380)/ - 4.08834934180796D-02,
     &     -3.13725579969708D-02/
      DATA ff(381), ff(382)/ - 2.19715194066651D-02,
     &     -1.88427973024923D-03/
      DATA ff(383), ff(384)/ - 2.16035578956301D-02,
     &     -1.17587068801884D-02/
      DATA ff(385), ff(386)/ - 1.12062882635935D-02,
     &     -1.17587068801884D-02/
      DATA ff(387), ff(388)/ - 2.16035578956301D-02,
     &     -1.88427973024923D-03/
      DATA ff(389), ff(390)/5.74971871310925D-03, 2.25181635560216D-02/
      DATA ff(391), ff(392)/1.76219271299887D-02, 1.69776491290416D-02/
      DATA ff(393), ff(394)/1.69776491290416D-02, 1.76219271299887D-02/
      DATA ff(395), ff(396)/2.25181635560216D-02, 5.74971871310925D-03/
      DATA ff(397), ff(398)/0.D+00, 3.55735538800802D-02/
      DATA ff(399), ff(400)/ - 3.55735538800802D-02,
     &     8.33786715099005D-02/
      DATA ff(401), ff(402)/0.D+00, -8.33786715099005D-02/
      DATA ff(403), ff(404)/ - 4.89348970296868D-02,
     &     -2.91035565005004D-04/
      DATA ff(405), ff(406)/2.91035565005004D-04, 4.89348970296868D-02/
      DATA ff(407), ff(408)/ - 2.62016346104983D-02,
     &     -8.33457375352782D-02/
      DATA ff(409), ff(410)/0.D+00, 8.33457375352782D-02/
      DATA ff(411), ff(412)/2.62016346104983D-02, 2.62738780028789D-02/
      DATA ff(413), ff(414)/8.32340348860637D-02, 3.18724837249571D-02/
      DATA ff(415), ff(416)/ - 3.18724837249571D-02,
     &     -8.32340348860637D-02/
      DATA ff(417), ff(418)/ - 2.62738780028789D-02,
     &     2.62547109771934D-02/
      DATA ff(419), ff(420)/7.98302855528211D-03, 4.48364778698653D-03/
      DATA ff(421), ff(422)/0.D+00, -4.48364778698653D-03/
      DATA ff(423), ff(424)/ - 7.98302855528211D-03,
     &     -2.62547109771934D-02/
      DATA ff(425), ff(426)/ - 2.51077741509568D-02,
     &     -2.87429639697600D-02/
      DATA ff(427), ff(428)/ - 1.79981066009081D-02,
     &     -7.87642513464656D-03/
      DATA ff(429), ff(430)/7.87642513464656D-03, 1.79981066009081D-02/
      DATA ff(431), ff(432)/2.87429639697600D-02, 2.51077741509568D-02/
      DATA ff(433), ff(434), ff(435), ff(436)/3*0.D0,
     &     2.38959949710526D-02/
      DATA ff(437), ff(438)/ - 4.77919899421051D-02,
     &     2.38959949710526D-02/
      DATA ff(439), ff(440)/7.91176151667601D-02, -7.91176151667601D-02/
      DATA ff(441), ff(442)/ - 7.91176151667601D-02,
     &     7.91176151667601D-02/
      DATA ff(443), ff(444)/ - 1.24626161171327D-02,
     &     5.33272858981795D-02/
      DATA ff(445), ff(446)/ - 8.17293395620937D-02,
     &     5.33272858981795D-02/
      DATA ff(447), ff(448)/ - 1.24626161171327D-02,
     &     -1.44916866191644D-02/
      DATA ff(449), ff(450)/ - 9.04220344262881D-02,
     &     1.04913721045452D-01/
      DATA ff(451), ff(452)/1.04913721045452D-01, -9.04220344262881D-02/
      DATA ff(453), ff(454)/ - 1.44916866191644D-02,
     &     -5.73533998264151D-02/
      DATA ff(455), ff(456)/7.23959359228724D-02, -1.77393445770836D-02/
      DATA ff(457), ff(458)/5.39361696125263D-03, -1.77393445770836D-02/
      DATA ff(459), ff(460)/7.23959359228724D-02, -5.73533998264151D-02/
      DATA ff(461), ff(462)/5.42648795710159D-02, -2.39248769146420D-02/
      DATA ff(463), ff(464)/7.38288973327365D-04, -3.10782916297012D-02/
      DATA ff(465), ff(466)/ - 3.10782916297012D-02,
     &     7.38288973327365D-04/
      DATA ff(467), ff(468)/ - 2.39248769146420D-02,
     &     5.42648795710159D-02/
      DATA ff(469), ff(470), ff(471), ff(472), ff(473), ff(474)
     &     /6*0.D+00/
      DATA ff(475), ff(476)/1.58592251779111D-02, -3.17184503558222D-02/
      DATA ff(477), ff(478)/3.17184503558222D-02, -1.58592251779111D-02/
      DATA ff(479), ff(480)/6.36434740587254D-02, -9.00054641703897D-02/
      DATA ff(481), ff(482)/0.D+00, 9.00054641703897D-02/
      DATA ff(483), ff(484)/ - 6.36434740587254D-02,
     &     2.20893694492763D-02/
      DATA ff(485), ff(486)/2.93554190800171D-02, -1.48336186023447D-01/
      DATA ff(487), ff(488)/1.48336186023447D-01, -2.93554190800171D-02/
      DATA ff(489), ff(490)/ - 2.20893694492763D-02,
     &     4.17889616928183D-02/
      DATA ff(491), ff(492)/ - 9.17122054842361D-02,
     &     7.52722761872573D-02/
      DATA ff(493), ff(494)/0.D+00, -7.52722761872573D-02/
      DATA ff(495), ff(496)/9.17122054842361D-02, -4.17889616928183D-02/
      DATA ff(497), ff(498)/ - 6.41790551032870D-02,
     &     5.94260666825252D-02/
      DATA ff(499), ff(500)/7.67785691121092D-03, 2.62939467857734D-02/
      DATA ff(501), ff(502)/ - 2.62939467857734D-02,
     &     -7.67785691121092D-03/
      DATA ff(503), ff(504)/ - 5.94260666825252D-02,
     &     6.41790551032870D-02/
      DATA ff(505), ff(506), ff(507), ff(508), ff(509), ff(510)
     &     /6*0.D+00/
      DATA ff(511), ff(512), ff(513), ff(514)/4*0.D+00/
      DATA ff(515), ff(516)/6.25351913613187D-03, -1.25070382722637D-02/
      DATA ff(517), ff(518)/1.25070382722637D-02, -1.25070382722637D-02/
      DATA ff(519), ff(520)/6.25351913613187D-03, 3.11758837931106D-02/
      DATA ff(521), ff(522)/ - 5.04436396065700D-02,
     &     1.92677558134594D-02/
      DATA ff(523), ff(524)/1.92677558134594D-02, -5.04436396065700D-02/
      DATA ff(525), ff(526)/3.11758837931106D-02, 3.58893219026970D-02/
      DATA ff(527), ff(528)/ - 1.67264809607312D-02,
     &     -9.33778447285944D-02/
      DATA ff(529), ff(530)/1.48430007573257D-01, -9.33778447285944D-02/
      DATA ff(531), ff(532)/ - 1.67264809607312D-02,
     &     3.58893219026970D-02/
      DATA ff(533), ff(534)/4.68575275756458D-02, -4.50757375114331D-02/
      DATA ff(535), ff(536)/ - 3.00076119100051D-02,
     &     2.82258218457924D-02/
      DATA ff(537), ff(538)/2.82258218457924D-02, -3.00076119100051D-02/
      DATA ff(539), ff(540)/ - 4.50757375114331D-02,
     &     4.68575275756458D-02/
      DATA ff(541), ff(542), ff(543), ff(544)/2*1.D+00, 0.D+00, 1.D+00/
      DATA ff(545), ff(546), ff(547), ff(548)/2*0.D+00, 1.D+00, 0.D+00/
      DATA ff(549), ff(550), ff(551), ff(552)/2*0.D+00, 1.D+00, 0.D+00/
      DATA ff(553), ff(554), ff(555), ff(556)/3*0.D+00, 1.D+00/
      DATA ff(557), ff(558)/9.25726650926814D-01, 3.03219677861538D-02/
      DATA ff(559), ff(560)/7.63148756611001D-01, 1.10652387063757D-01/
      DATA ff(561), ff(562)/1.28207234895501D-03, 5.36257386538795D-01/
      DATA ff(563), ff(564)/2.17289580469363D-01, 8.13196358030030D-03/
      DATA ff(565), ff(566)/5.76608786636350D-05, 2.78047174877667D-01/
      DATA ff(567), ff(568)/3.29131159509191D-01, 2.49657214768430D-02/
      DATA ff(569), ff(570)/5.20868271692270D-04, 2.66389008100408D-06/
      DATA ff(571), ff(572)/1.D+00, 7.17617351394050D-01/
      DATA ff(573), ff(574)/1.15282233550037D-01, 2.13774427323495D-01/
      DATA ff(575), ff(576)/3.48423989314638D-01, 1.85320103458231D-02/
      DATA ff(577), ff(578)/ - 2.35732455017163D-01,
     &     4.90294315725551D-01/
      DATA ff(579), ff(580)/9.85729671840697D-02, 3.16881041332955D-03/
      DATA ff(581), ff(582)/ - 4.09576022206791D-01,
     &     4.20201210269288D-01/
      DATA ff(583), ff(584)/2.34245007796887D-01, 2.41313741208102D-02/
      DATA ff(585), ff(586)/5.56591156140697D-04, 1.D+00/
      DATA ff(587), ff(588)/4.16890700467236D-01, 2.38053374687832D-01/
      DATA ff(589), ff(590)/ - 2.82554557772787D-01,
     &     5.03833139973589D-01/
      DATA ff(591), ff(592)/7.90217156752737D-02, -3.59733444374334D-01/
      DATA ff(593), ff(594)/2.89718584757935D-01, 3.03418532856755D-01/
      DATA ff(595), ff(596)/2.79017946123459D-02, 7.08378251175649D-02/
      DATA ff(597), ff(598)/ - 1.72370094784044D-01,
     &     4.12885596178737D-01/
      DATA ff(599), ff(600)/1.55306184423031D-01, 1.01200845906307D-02/
      DATA ff(601), ff(602)/1.D+00, 8.31092995327642D-02/
      DATA ff(603), ff(604)/3.74319061007963D-01, -4.21630141495484D-01/
      DATA ff(605), ff(606)/4.15874017677357D-01, 1.95380697242947D-01/
      DATA ff(607), ff(608)/1.11600329703613D-01, -1.97772479536753D-01/
      DATA ff(609), ff(610)/4.29387782672098D-01, 1.08476318674788D-01/
      DATA ff(611), ff(612)/2.63594691134320D-01, -2.34078763472890D-01/
      DATA ff(613), ff(614)/7.77527093709932D-02, 3.57086142014797D-01/
      DATA ff(615), ff(616)/6.18663570444226D-02, 1.D+00/
      DATA ff(617), ff(618)/ - 2.17617351394050D-01,
     &     4.97090202145758D-01/
      DATA ff(619), ff(620)/ - 1.75906698838214D-01,
     &     1.01968005344553D-01/
      DATA ff(621), ff(622)/3.44562631700107D-01, 3.21522932835539D-01/
      DATA ff(623), ff(624)/ - 3.16879195937032D-01,
     &     2.47505734203973D-01/
      DATA ff(625), ff(626)/2.54047379389696D-01, -2.23915517573357D-01/
      DATA ff(627), ff(628)/2.47297362843729D-01, -3.04922989721535D-01/
      DATA ff(629), ff(630)/3.15711860946547D-01, 1.92409975848431D-01/
      DATA ff(631), ff(632)/1.D+00, -4.25726650926814D-01/
      DATA ff(633), ff(634)/5.82050467909641D-01, 2.00043214171989D-01/
      DATA ff(635), ff(636)/ - 2.45486828370620D-01,
     &     4.72409970427464D-01/
      DATA ff(637), ff(638)/ - 3.40709996864496D-02,
     &     5.77157388195865D-02/
      DATA ff(639), ff(640)/ - 1.44294709220167D-01,
     &     4.07841145692130D-01/
      DATA ff(641), ff(642)/ - 9.23304365056544D-02,
     &     7.92778608560820D-02/
      DATA ff(643), ff(644)/ - 3.36435261948797D-02,
     &     -7.14935648162744D-02/
      DATA ff(645), ff(646)/3.61684038642514D-01, 1.D+00/
      DATA ff(647), ff(648)/ - 5.D-01, 6.12372435695795D-01/
      DATA ff(649), ff(650)/3.75D-01, -3.95284707521047D-01/
      DATA ff(651), ff(652)/5.22912516583797D-01, -3.125D-01/
      DATA ff(653), ff(654)/3.20217211436237D-01, -3.50780380010057D-01/
      DATA ff(655), ff(656)/4.74958879799083D-01, 2.734375D-01/
      DATA ff(657), ff(658)/ - 2.77316239832795D-01,
     &     2.90851726077911D-01/
      DATA ff(659), ff(660)/ - 3.23629924643875D-01,
     &     4.43148525027868D-01/
      DATA nl/0, 2, 2, 4, 4, 4, 6, 6, 6, 6, 8, 8, 8, 8, 8, 10, 10, 10,
     &     10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14,
     &     14, 14, 14/
      DATA nk/0, 0, 2, 0, 2, 4, 0, 2, 4, 6, 0, 2, 4, 6, 8, 0, 2, 4, 6,
     &     8, 10, 0, 2, 4, 6, 8, 10, 12, 0, 2, 4, 6, 8, 10, 12, 14/
      DATA pi/3.1415926535D0/
      Dd(1) = 0.D0
      Dd(2) = 0.D0
      IF (.NOT.(Lo(1))) THEN
         Idt = 1
         DO j = 1, 8
            IF (.NOT.(Lq(j,1))) THEN
               IF (Lq(j,3)) THEN
                  P(j,1) = Val(3*j - 1)
                  Dd(j - 6) = P(j,1)**3
               ELSE
                  P(j,1) = 0.D0
                  Q(j,1,1) = -Val(3*j - 1)
                  P(j + 8,1) = 1.D-16
                  IF (.NOT.(Lq(j,4))) THEN
                     Q(j,1,1) = Val(3*j - 1)
                     IF (Q(j,1,1).GT. - 36.D0*Val(3*j)) P(j + 8,1)
     &                   = DEXP(Q(j,1,1)/Val(3*j))
                  ENDIF
               ENDIF
            ENDIF
         ENDDO
         DO i = 1, Iq1
            P(i + 27,1) = 1.D0
         ENDDO
         RETURN
      ELSEIF (Lo(3)) THEN
C *** ASYMMETRIC ROTATIONAL MODEL ***************                       ROTD-456
         Idt = 36
         DO j = 1, 8
            DO i = 1, Iqm
               IF (nk(i + 1).EQ.0) THEN
                  P(16 + j,i + 1) = Bta(j,i)
     &                              *DSQRT(DFLOAT(2*nl(i+1) + 1)/
     &                              (4.D0*pi))
               ELSE
                  P(16 + j,i + 1) = P(16 + j,i)*DSIN(pi*Bta(j,i)/180.D0)
                  P(16 + j,i) = P(16 + j,i)*DCOS(pi*Bta(j,i)/180.D0)
               ENDIF
            ENDDO
         ENDDO
         sr = 1.D0
         DO j = 1, 8
            IF (.NOT.(Lq(j,1))) THEN
               IF (Lo(6)) sr = 1.D0/Val(3*j - 1)
               IF (.NOT.Lq(j,4)) sr = DABS(sr)
               DO i = 1, Iqm
                  IF (nk(i + 1).NE.0) P(16 + j,i + 1) = P(16 + j,i + 1)
     &                *1.414213562D0
                  P(16 + j,i + 1) = sr*P(16 + j,i + 1)
               ENDDO
            ENDIF
         ENDDO
         i = 0
         DO l = 1, 8
            phi = pi/DFLOAT(4*MAX0(1,l - 1))
            DO m = 1, l
               i = i + 1
               DO j = 1, Iq1
                  k = 1
                  IF (j.GT.Iny) k = Ivy(1,j - Iny)/1000
                  P(j + 27,i) = poids(i,k)
               ENDDO
               DO j = 1, 8
                  IF (.NOT.(Lq(j,1))) THEN
                     P(j,i) = 0.D0
                     r = 1.D0
                     DO k = 1, Iqm
                        r = r + P(16 + j,k + 1)*rb(k + 1,l)
     &                      *DCOS(DFLOAT(nk(k+1)*nk(i))*phi)
                     ENDDO
                     Q(j,i,1) = -r*Val(3*j - 1)
                     IF (Lq(j,3)) THEN
                        P(j,i) = r*DABS(Val(3*j - 1))
                        Dd(j - 6) = Dd(j - 6) + poids(i,1)*(P(j,i)**3)
                     ELSE
                        P(j + 8,i) = 1.D-16
                        IF (.NOT.(Lq(j,4))) THEN
                           Q(j,i,1) = -Q(j,i,1)
                           IF (Q(j,i,1).GT. - 36.D0*Val(3*j)) P(j + 8,i)
     &                         = DEXP(Q(j,i,1)/Val(3*j))
                        ENDIF
                     ENDIF
                  ENDIF
               ENDDO
            ENDDO
         ENDDO
      ELSE
C *** SYMMETRIC ROTATIONAL MODEL ***************                        ROTD-384
         Idt = 10
         iq = Iqm
         IF (Invz.NE.0) iq = MAX0(iq,Imax)
         iq2 = Iqm/2
         sr = 1.D0
         DO j = 1, 8
            IF (.NOT.(Lq(j,1))) THEN
               IF (Lo(6)) sr = 1.D0/Val(3*j - 1)
               IF (.NOT.Lq(j,4)) sr = DABS(sr)
               DO i = 1, iq2
                  P(16 + j,2*i) = sr*Bta(j,i)
     &                            *DSQRT(DFLOAT(4*i + 1)/(4.D0*pi))
               ENDDO
            ENDIF
         ENDDO
         DO i = 1, 10
            Pp(2) = Xgn(i)
            Pp(1) = 1.D0
            DO j = 2, iq
               c = 1.D0/DFLOAT(j)
               Pp(j + 1) = (2.D0 - c)*Pp(2)*Pp(j) + (c - 1.D0)*Pp(j - 1)
            ENDDO
            c1 = 1.D0 - Pp(2)**2
            DO j = 1, 8
               IF (.NOT.(Lq(j,1))) THEN
                  P(j,i) = 0.D0
                  Q(j,i,2) = 0.D0
                  Q(j,i,3) = 0.D0
                  Q(j,i,1) = 1.D0
                  DO k = 2, Iqm, 2
                     c = k
                     Q(j,i,1) = Q(j,i,1) + P(16 + j,k)*Pp(k + 1)
                     Q(j,i,2) = Q(j,i,2) - c*P(16 + j,k)
     &                          *(Pp(2)*Pp(k + 1) - Pp(k))/c1
                     Q(j,i,3) = Q(j,i,3) - P(16 + j,k)*Pp(k + 1)
     &                          *c*(c + 1.D0)
                  ENDDO
                  c2 = Val(3*j - 1)
                  IF (.NOT.Lq(j,4)) c2 = -c2
                  DO k = 1, 3
                     Q(j,i,k) = -Q(j,i,k)*c2
                  ENDDO
                  IF (Lq(j,3)) THEN
                     P(j,i) = -Q(j,i,1)
                     Dd(j - 6) = Dd(j - 6) + Pgn(i)*(P(j,i)**3)
                  ELSE
                     P(j + 8,i) = 1.D-16
                     IF (.NOT.(Lq(j,4))) THEN
                        IF (Q(j,i,1).GT. - 36.D0*Val(3*j)) P(j + 8,i)
     &                      = DEXP(Q(j,i,1)/Val(3*j))
                     ENDIF
                  ENDIF
               ENDIF
            ENDDO
            DO ij = 1, Iq1
               k = 1
               IF (ij.GT.Iny) k = Ivy(1,ij - Iny)/1000
               c = Pp(k)
               IF ((Iv(ij).NE.1) .AND. (ij.GT.Iny)) THEN
                  kb = MOD(Ivy(1,ij - Iny),1000)
                  kl = Nbta(17,kb)
                  kk = Nbta(18,kb)
                  IF (Ivy(6,ij - Iny).LT.0) kl = MOD(kl,2)
                  IF (kk.NE.0) THEN
C COMPUTATION OF Y(K-1,KK) * Y(KL,KK)                                   ROTD-439
                     c = DSQRT(2.D0*kl + 1.D0)
                     DO kb = 1, kk
                        c = c*c1*DFLOAT(2*kb - 1)
     &                      **2/DSQRT(DFLOAT((kl+kb)*(k-kb)*(kl-kb+1)
     &                      *(k+kb-1)))
                     ENDDO
                     kz = k - 1 - kk
                     DO j = 1, 2
                        IF (kz.GT.0) THEN
                           d = 0.D0
                           DO kb = 1, kz
                              c2 = d
                              d = c
                              c = c2 + (d*Pp(2) - c2)
     &                            *DFLOAT(2*(kk + kb) - 1)/DFLOAT(kb)
                           ENDDO
                        ENDIF
                        kz = kl - kk
                     ENDDO
                  ELSE
                     c = c*Pp(kl + 1)*DSQRT(DFLOAT(2*kl + 1))
                  ENDIF
               ENDIF
               P(ij + 27,i) = Pgn(i)*c*DSQRT(DFLOAT(2*k - 1))
            ENDDO
         ENDDO
         RETURN
      ENDIF
      END
C 01/01/04                                                      ECIS03  ROTZ-000
      SUBROUTINE ROTZ(Vr,Xgn,R,Q,Val,J,Iv,B,P,Id1,Iq1,Ccz,Lo)
C DEFORMATION OF THE SCHROEDINGER EQUATION WHICH IS EQUIVALENT TO THE   ROTZ-002
C DIRAC EQUATION ONLY FOR ELASTIC SCATTERING.                           ROTZ-003
C     NO ASYMMETRIC ROTATIONAL MODEL                                    ROTZ-004
C     NO DIFFUSENESS OF COULOMB CHARGE AND NO COULOMB DEFORMATION       ROTZ-005
C     NO VIBRATIONAL BAND IN ROTATIONAL MODEL                           ROTZ-006
C     ONLY FIRST ORDER VIBRATIONAL MODEL                                ROTZ-007
C INPUT VARIABLES: VR(I,J): POTENTIAL FOR I=1, -1RST DERIVATIVE FOR I=5 ROTZ-008
C                           AND SECOND DERIVATIVE FOR I=6               ROTZ-009
C                  XGN:     ABSCISSAE FOR LEGENDRE INTEGRATION          ROTZ-010
C                  R:       RADIUS                                      ROTZ-011
C                  Q(I,J,K):DERIVATIVES DR/DTHETA FOR K=2 AND 3         ROTZ-012
C                  VAL:     OPTICAL MODEL                               ROTZ-013
C                  J:       POINT OF LEGENDRE ANGULAR INTEGRAL          ROTZ-014
C                  IV:      NUMBER OF PHONONS PLUS ONE                  ROTZ-015
C                  B:       DEFORMATIONS                                ROTZ-016
C                  P(I,J):  PREVIOUS RESULTS FOR I=17 TO 26 AND WEIGHTS ROTZ-017
C                           FOR I=28 AND UP IN THE ROTATIONAL MODEL     ROTZ-018
C                  ID1:     FIRST DIMENSION OF P                        ROTZ-019
C                  IQ1:     NUMBER OF TRANSITION FORM FACTORS PLUS 3    ROTZ-020
C                  LO:      LOGICAL CONTROLS                            ROTZ-021
C OUTPUT VARIABLES:P(I,J)   FOR I=17 TO 26, POTENTIAL FOR J=1 AND       ROTZ-022
C                           TRANSITION FORM FACTORS FOR J=4 TO IQ1.     ROTZ-023
C***********************************************************************ROTZ-024
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      REAL*8 XE, XM, XN, XZ
      COMMON /DCONT / XE, XM, XN, XZ
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      REAL*8 Ccz, R
      INTEGER Id1, Iq1, J
      REAL*8 B(10,1), P(Id1,1), Q(8,12,3), Val(1), Vr(6,10), Xgn(10)
      INTEGER Iv(1)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 bi, br, c, c0, c1, c1r, c2, c2r, c3, c3r, c4, c4r, c5, c5r,
     &       c6, c6r, c7, c8, c9, cc, ci, cir, cr, crr, d1, d1r, d2,
     &       d2r, dd, di, dir, dr, drr, ei, eir, er, err
      DOUBLE PRECISION DATAN2, DLOG
      INTEGER i
C
C
      DO i = 7, 8
         IF (R.GT.Val(3*i - 1)) THEN
            Vr(1,i) = Ccz*Val(3*i - 2)/R
            Vr(5,i) = Vr(1,i)/R
            Vr(6,i) = 2.D0*Vr(5,i)/R
         ELSE
            Vr(1,i) = Ccz*Val(3*i - 2)
     &                *(1.5D0 - .5D0*(R*R)/Val(3*i - 1)**2)/Val(3*i - 1)
            Vr(6,i) = -Ccz*Val(3*i - 2)/Val(3*i - 1)**3
            Vr(5,i) = -Vr(6,i)*R
         ENDIF
      ENDDO
C COMPUTATION OF D(R) AND INVERSE                                       ROTZ-040
      c1 = XE + XM + Vr(1,1) - Vr(1,3) - Vr(1,7)
      c2 = Vr(1,2) - Vr(1,4)
      dd = c1**2 + c2**2
      dr = c1/dd
      di = -c2/dd
      c3 = XE - XM - Vr(1,1) - Vr(1,3) - Vr(1,7)
      c4 = -Vr(1,2) - Vr(1,4)
      c5 = (c1*c3 - c2*c4 - XE**2 + XM**2)/(2.D0*XM)
      c6 = (c1*c4 + c2*c3)/(2.D0*XM)
      d1 = Vr(5,3) - Vr(5,1) + Vr(5,7)
      d2 = Vr(5,4) - Vr(5,2)
      cr = d1*dr - d2*di + (Vr(5,5) + Vr(5,8))/XM
      ci = d2*dr + d1*di + Vr(5,6)/XM
      cc = Vr(1,7)*XE/XM
      br = Vr(6,1) - Vr(6,7) - Vr(6,3)
      bi = Vr(6,2) - Vr(6,4)
C SQUARE OF GRADIENT  AND LAPLACIAN     RADIAL TERM                     ROTZ-057
      er = br*dr - bi*di + (Vr(5,5) + Vr(5,8))
     &     /XM*(cr + cr - (Vr(5,5) + Vr(5,8))/XM) - Vr(5,6)
     &     /XM*(ci + ci - Vr(5,6)/XM) - (Vr(6,5) + Vr(6,8))
     &     /XM + 2.D0*cr/R
      ei = br*di + bi*dr + (Vr(5,5) + Vr(5,8))/XM*(ci + ci - Vr(5,6)/XM)
     &     + Vr(5,6)/XM*(cr + cr - (Vr(5,5) + Vr(5,8))/XM) - Vr(6,6)
     &     /XM + 2.D0*ci/R
      c5 = c5 - (.75D0*(cr**2 - ci**2) - .5D0*er)*XN
      c6 = c6 - (1.5D0*cr*ci - .5D0*ei)*XN
      IF (Lo(101)) THEN
C COMPUTATION OF ZEROTH ORDER                                           ROTZ-109
         P(17,1) = c5 + cc
         P(18,1) = c6
         P(21,1) = .5D0*(cr - Vr(5,8)/XM)*XN/R
         P(22,1) = .5D0*ci*XN/R
         P(23,1) = cc
         P(24,1) = Vr(5,8)/R
         IF (Iq1.LT.4) RETURN
         DO i = 4, Iq1
C COMPUTATION OF FIRST ORDER                                            ROTZ-118
            IF (Iv(i).NE.2) GOTO 200
            c1r = Vr(5,1)*B(1,i) - Vr(5,3)*B(3,i)
            c2r = Vr(5,2)*B(2,i) - Vr(5,4)*B(4,i)
            drr = -(dr*dr - di*di)*c1r + 2.D0*dr*di*c2r
            dir = -(dr*dr - di*di)*c2r - 2.D0*dr*di*c1r
            c3r = -Vr(5,1)*B(1,i) - Vr(5,3)*B(3,i)
            c4r = -Vr(5,2)*B(2,i) - Vr(5,4)*B(4,i)
            c5r = (c1r*c3 - c2r*c4 + c1*c3r - c2*c4r)/(2.D0*XM)
            c6r = (c1r*c4 + c2r*c3 + c1*c4r + c2*c3r)/(2.D0*XM)
            d1r = Vr(6,3)*B(3,i) - Vr(6,1)*B(1,i)
            d2r = Vr(6,4)*B(4,i) - Vr(6,2)*B(2,i)
            crr = d1r*dr - d2r*di + d1*drr - d2*dir + Vr(6,5)*B(5,i)/XM
            cir = d2r*dr + d1r*di + d2*drr + d1*dir + Vr(6,6)*B(6,i)/XM
            err = br*drr - bi*dir + (Vr(5,5) + Vr(5,8))
     &            /XM*(crr + crr - Vr(6,5)*B(5,i)/XM) - Vr(5,6)
     &            /XM*(cir + cir - Vr(6,6)*B(6,i)/XM) + Vr(6,5)*B(5,i)
     &            /XM*(cr + cr - (Vr(5,5) + Vr(5,8))/XM) - Vr(6,6)
     &            *B(6,i)/XM*(ci + ci - Vr(5,6)/XM) + 2.D0*crr/R
            eir = br*dir + bi*drr + (Vr(5,5) + Vr(5,8))
     &            /XM*(cir + cir - Vr(6,6)*B(6,i)/XM) + Vr(5,6)
     &            /XM*(crr + crr - Vr(6,5)*B(5,i)/XM) + Vr(6,5)*B(5,i)
     &            /XM*(ci + ci - Vr(5,6)/XM) + Vr(6,6)*B(6,i)
     &            /XM*(cr + cr - Vr(6,5)/XM) + 2.D0*cir/R
            P(17,i) = c5r - (1.5D0*(cr*crr - ci*cir) - .5D0*err)*XN
            P(18,i) = c6r - (1.5D0*(crr*ci + cr*cir) - .5D0*eir)*XN
            P(21,i) = .5D0*crr*XN/R
            P(22,i) = .5D0*cir*XN/R
            P(23,i) = 0.D0
            P(24,i) = 0.D0
            P(25,i) = -.5D0*XN*(c1r*dr - c2r*di - Vr(5,5)*B(5,i)/XM)
     &                /R**2
            P(26,i) = -.5D0*XN*(c1r*di + c2r*dr - Vr(5,6)*B(6,i)/XM)
     &                /R**2
         ENDDO
         RETURN
      ELSE
C ROTATIONAL MODEL                                                      ROTZ-065
         c = 1.D0 - Xgn(J)**2
         DO i = 1, 8
            Vr(4,i) = (Vr(6,i)*Q(i,J,2)**2*c + Vr(5,i)*Q(i,J,3))/R**2
            Vr(3,i) = Vr(5,i)*Q(i,J,2)/R
         ENDDO
C SQUARE OF GRADIENT IS D/DR.D/DR + 1/R**2 D/DTH.D/DTH                  ROTZ-070
         c3 = Vr(3,1) - Vr(3,3) - Vr(3,7)
         c4 = Vr(3,2) - Vr(3,4)
         c7 = c3*dr - c4*di
         c8 = c3*di + c4*dr
         c3 = (Vr(3,5) + Vr(3,8))/XM
         c4 = Vr(3,6)/XM
         c5 = c5 - (.75D0*(c7**2 - c8**2) + .5D0*(c7*c3 - c8*c4)
     &        + .75D0*(c3**2 - c4**2))*c*XN
         c6 = c6 - (1.5D0*c7*c8 + .5D0*(c7*c4 + c8*c3) + 1.5D0*c3*c4)
     &        *c*XN
C LAPLACIAN IS D**2/DR**2 + 2/R D/DR + 1/R**2 (D**2/DTH**2+D/DTH/TG )   ROTZ-080
         c3 = Vr(4,1) - Vr(4,3) - Vr(4,7)
         c4 = Vr(4,2) - Vr(4,4)
         c5 = c5 + .5D0*(c3*dr - c4*di + (Vr(4,5) + Vr(4,8))/XM)*XN
         c6 = c6 + .5D0*(c4*dr + c3*di + Vr(4,6)/XM)*XN
C C5 + I C6   CENTRAL TERM                                              ROTZ-085
C CR + I CI   SPIN-ORBIT TERM                                           ROTZ-086
C DR + I DI   1/DENOMINATOR                                             ROTZ-087
         P(17,1) = P(17,1) + (c5 + cc)*P(28,J)
         P(18,1) = P(18,1) + c6*P(28,J)
         P(21,1) = P(21,1) + .5D0*XN*(cr - Vr(5,8)/XM)*P(28,J)/R
         P(22,1) = P(22,1) + .5D0*XN*ci*P(28,J)/R
         P(23,1) = P(23,1) + cc*P(28,J)
         P(24,1) = P(24,1) + Vr(5,8)/R*P(28,J)
         IF (Iq1.LT.4) RETURN
C LOGARITHM OF D(R) C9 + I C0                                           ROTZ-095
         c9 = .5D0*DLOG(c1**2 + c2**2) - (Vr(1,5) + Vr(1,8))/XM
         c0 = DATAN2(c2,c1) - Vr(1,6)/XM
         DO i = 4, Iq1
            IF (Iv(i).GT.1) GOTO 100
            P(17,i) = P(17,i) + (c5 + cc)*P(i + 27,J)
            P(18,i) = P(18,i) + c6*P(i + 27,J)
            P(21,i) = P(21,i) + .5D0*XN*(cr - Vr(5,8)/XM)*P(i + 27,J)/R
            P(22,i) = P(22,i) + .5D0*XN*ci*P(i + 27,J)/R
            P(23,i) = P(23,1) + cc*P(i + 27,J)
            P(24,i) = P(24,1) + Vr(5,8)/R*P(i + 27,J)
            P(25,i) = P(25,i) - .5D0*XN*c9*P(i + 27,J)/R**2
            P(26,i) = P(26,i) - .5D0*XN*c0*P(i + 27,J)/R**2
         ENDDO
         RETURN
      ENDIF
  100 WRITE (MW,99005)
99005 FORMAT (' NO VIBRATIONAL BAND IN ROTATIONAL MODEL')
      GOTO 300
  200 WRITE (MW,99010)
99010 FORMAT (' ONLY FIRST ORDER VIBRATIONAL MODEL')
  300 WRITE (MW,99015)
99015 FORMAT (' IN ROTZ   ... STOP')
      STOP
      END
C 01/01/04                                                      ECIS03  COPO-000
      SUBROUTINE COPO(W,V,Q,Ism,H,L,Val,Vac,Ccz,Zt,Lt,Lz)
C COMPUTES THE COULOMB POTENTIAL OF THE CHARGE DISTRIBUTION STORED IN V.COPO-002
C INPUT VARIABLES: V:   CHARGE DISTRIBUTION UNNORMALISED                COPO-003
C                  H:   STEP SIZE                                       COPO-004
C                  ISM: NUMBER OF POINTS                                COPO-005
C                  L:   ANGULAR MOMENTUM, RETURN 0 IF L IS NEGATIVE     COPO-006
C                  VAL: PRODUCT OF CHARGES IS IN VAL(1)                 COPO-007
C                  VAC: PARAMETER OF CHARGE DISTRIBUTION                COPO-008
C                  LT:  LOGICAL  .TRUE.  FORM FACTOR ALREADY NORMALISED COPO-009
C                         .FALSE.  NORMALISATION STORED FROM THE CENTRALCOPO-010
C                  LZ:  LOGICAL  .TRUE. TO USE THE NORMALISATION STORED COPO-011
C                          EVEN IF L=0                                  COPO-012
C OUTPUT VARIABLES:W:   FORM FACTOR WHICH CAN BE AT THE SAME PLACE AS V COPO-013
C                  ZT:  NORMALISATION FACTOR                            COPO-014
C WORKSPACE:       Q    WHICH CAN BE AT THE SAME PLACE AS W             COPO-015
C***********************************************************************COPO-016
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C Dummy arguments
C
      REAL*8 Ccz, H, Vac, Zt
      INTEGER Ism, L
      LOGICAL Lt, Lz
C-----Plujko_new-2005
C     REAL*8 Q(Ism,5), V(Ism), Val(1), W(Ism)
      REAL*8 Q(Ism,5), V(Ism),         W(Ism)
C
C Local variables
C
      REAL*8 c, rr, zz
      INTEGER is, js
C
C
      IF (L.GE.0) THEN
         rr = 0.D0
         DO is = 1, Ism
            rr = rr + H
            V(is) = V(is)*(1.D0 + Vac*rr*rr)
            Q(is,4) = rr**L
            Q(is,3) = Q(is,4)/rr
            Q(is,5) = Q(is,4)*rr
            Q(is,1) = Q(is,5)*rr
         ENDDO
         V(Ism) = 0.D0
         V(Ism - 1) = 0.D0
         Q(1,1) = Q(1,1)*V(1)
         Q(Ism,2) = 0.D0
         DO is = 2, Ism
            js = Ism + 1 - is
            Q(is,1) = Q(is - 1,1) + Q(is,1)*V(is)
            Q(js,2) = Q(js + 1,2) + V(js + 1)/Q(js + 1,3)
         ENDDO
         c = DFLOAT(2*L + 1)
         zz = 1.D0/c
         IF (.NOT.(Lt)) THEN
C-----------Plujko_new-2005
C           IF (.NOT.(L.NE.0 .OR. Lz)) Zt = Ccz*Val(1)/Q(Ism,1)
            IF (.NOT.(L.NE.0 .OR. Lz)) Zt = Ccz*Val   /Q(Ism,1)
            zz = Zt*zz
         ENDIF
         c = c*H/12.D0
         DO is = 1, Ism
            W(is) = (Q(is,1)/Q(is,5) + Q(is,2)*Q(is,4) + c*V(is))*zz
         ENDDO
      ELSE
         DO is = 1, Ism
            V(is) = 0.D0
         ENDDO
         RETURN
      ENDIF
      END
C 01/01/04                                                      ECIS03  STDP-000
      SUBROUTINE STDP(V,Ivy,Ism,Va,Nva,Nx,Idx,X,Wv,Pgn,Xgn,Npp,Izz,P,
     &                Aconv,Ccz,Lo)
C COMPUTES FORM FACTORS INDEPENDENTLY OF MODELS                         STDP-003
C INPUT : IVY:     TABLE OF FORM FACTORS  (SEE REDM)                    STDP-004
C         ISM:     NUMBER OF INTEGRATION STEPS                          STDP-005
C         VA,NVA:  FOR OPTICAL MODEL PARAMETERS TO USE HERE             STDP-006
C         NX:      LENGTH OF WORKING SPACE                              STDP-007
C         WV:      STEP SIZE IN WV(11,*)                                STDP-008
C         NPP:     NUMBER OF OPTICAL POTENTIALS                         STDP-009
C         PGN,XGN: WEIGHTS AND ABSCISSAE OF GAUSS-LEGENDRE INTEGRATION  STDP-010
C         ACONV:   VALUE BELOW WHICH THE FOLDING IS NEGLECTED           STDP-011
C         LO:      LOGICAL CONTROLS                                     STDP-012
C IN COMMON /POTE1/ SEE REDM                                            STDP-013
C IN COMMON /DCONS/ SEE CALC AND COLF                                   STDP-014
C OUTPUT: V(ISM,1) ELASTIC AND INELASTIC FORM FACTORS IN THE SEQUENCE   STDP-015
C                  CENTRAL-REAL, SPIN-ORBIT-REAL, TRANSITION REAL,      STDP-016
C                  TRANSITION SPIN-ORBIT-REAL, IMAGINARY POTENTIALS     STDP-017
C                  FOLLOWED BY COULOMB, COULOMB TRANSITION POTENTIALS.  STDP-018
C         IDX:     LENGTH OF WORKING FIELD USED                         STDP-019
C WORKING SPACE: X(3,I) TO COMPUTE BOUND FUNCTIONS, FOLD COULOMB POTEN- STDP-020
C                  TIAL AND COMPUTE ROTATIONAL FORM FACTORS AND BESSEL  STDP-021
C                  FUNCTIONS.                                           STDP-022
C         IZZ,P    FOR FOLDING                                          STDP-023
C***********************************************************************STDP-024
      IMPLICIT REAL*8(A - h,O - Z)
C
C
C COMMON variables
C
      INTEGER IMAx, INLs, INTc, INVc, INVd, IT0, ITC, ITE, ITF, ITX(16),
     &        ITXm, MR, MS, MW
      COMMON /INOUT / MR, MW, MS
      COMMON /POTE1 / ITX, IMAx, INTc, INLs, INVc, INVd, ITXm
C
C Dummy arguments
C
      REAL*8 Aconv, Ccz
      INTEGER Idx, Ism, Npp, Nx
      INTEGER Ivy(7,1), Izz(4,1), Nva(2,2)
      LOGICAL Lo(250)
      REAL*8 P(1), Pgn(10), V(Ism,1), Va(3), Wv(18,1), X(3,22), Xgn(10)
C
C Local variables
C
      REAL*8 a1, a2, a3, a4, a5, a6, a7, an, ap, cl(8), h, hh, hm, pis2,
     &       rr, sep, vr(5,2), vs(4), y(3), zb(77), zb1(40), zb2(37)
      DOUBLE PRECISION DABS, DCOS, DEXP, DLOG, DMAX1, DMIN1, DSIN, DSQRT
      INTEGER i, i1, idy, ii, ij, inl, iq, iqm, is, ist, itt, itv,
     &        itz(10), iv, iv1, iv2, iv3, ivm, ivx, ix, j, j1, ji, jl,
     &        jv, k, kk, kl, kz, l, l1, l2, l2x, l3, lj, ll, lm, n, n1,
     &        nfo, nij(3), nma, nmb, nmc, nnf, ntt
      INTEGER IABS, IDINT, MAX0
      LOGICAL lt(9)
C
C
      EQUIVALENCE (ITX(10),IT0)
      EQUIVALENCE (ITX(13),ITC)
      EQUIVALENCE (ITX(15),ITE)
      EQUIVALENCE (ITX(16),ITF)
      EQUIVALENCE (zb1,zb)
      EQUIVALENCE (zb2,zb(41))
      DATA nij/1, 24, 11/
      DATA pis2/1.5707963267949D0/
      DATA itz/3, 3, 3, 3, 4, 5, 3, 3, 5, 5/
      DATA zb1/4.49340945790906D0, 7.72525183693771D0,
     &     5.76345919689455D0, 9.09501133047635D0, 12.3229409705666D0,
     &     6.98793200050052D0, 10.4171185473794D0, 13.6980231532492D0,
     &     16.9236212852138D0, 8.18256145257124D0, 11.7049071545704D0,
     &     15.0396647076165D0, 18.3012559595420D0, 21.5254177333999D0,
     &     9.35581211104275D0, 12.9665301727743D0, 16.3547096393505D0,
     &     19.6531521018212D0, 22.9045506479037D0, 26.1277501372255D0,
     &     10.5128354080940D0, 14.2073924588425D0, 17.6479748701659D0,
     &     20.9834630689448D0, 24.2627680423970D0, 27.5078683649043D0,
     &     30.7303807316466D0, 11.6570321925164D0, 15.4312892102684D0,
     &     18.9229991985461D0, 22.2953480191308D0, 25.6028559538106D0,
     &     28.8703733470427D0, 32.1111962396826D0, 35.3331941827165D0,
     &     12.7907817119721D0, 16.6410028815122D0, 20.1824707649492D0,
     &     23.5912748179830D0, 26.9270407788180D0/
      DATA zb2/30.2172627093614D0, 33.4768008195015D0,
     &     36.7145291272447D0, 39.9361278108677D0, 13.9158226105049D0,
     &     17.8386431992053D0, 21.4284869721154D0, 24.8732139238751D0,
     &     28.2371343599681D0, 31.5501883818318D0, 34.8286965376857D0,
     &     38.0824790873276D0, 41.3178646902445D0, 44.5391446334095D0,
     &     15.0334693037434D0, 19.0258535361278D0, 22.6627206581361D0,
     &     26.1427676433791D0, 29.5346341078439D0, 32.8705345976875D0,
     &     36.1681571359112D0, 39.4382144800081D0, 42.6876512846611D0,
     &     45.9212017638356D0, 49.1422214247461D0, 16.1447429423013D0,
     &     20.2039426328117D0, 23.8865307559684D0, 27.4012592588663D0,
     &     30.8207940864510D0, 34.1794746664832D0, 37.4962736357858D0,
     &     40.7827470981251D0, 44.0464252109438D0, 47.2924656052694D0,
     &     50.5245397255712D0, 53.7453428657930D0/
C MEANING OF INTERNAL LOGICAL LT:   LT(1) SPIN-ORBIT TRANSITION (SCHROE)STDP-060
C LT(2) SPIN-ORBIT POTENTIAL DERIVATIVE                                 STDP-061
C LT(3) FORM FACTOR GIVEN BY POINTS OR BOUND STATE                      STDP-062
C LT(4) COMPUTATION OF A COULOMB POTENTIAL FROM THE CHARGE DENSITY      STDP-063
C LT(5) ZERO DIFFUSENESS COULOMB    LT(6) SURFACE POTENTIAL             STDP-064
C LT(7) FIRST OR SECOND PASSAGE IN WOODS-SAXON/BESSEL LOOP              STDP-065
C LT(8) WOODS-SAXON FORM FACTOR     LT(9) NOT SYMMETRIC                 STDP-066
      Idx = 0
      hm = 1000.D0
      nfo = 0
      n = 4*ITXm
      IF (Lo(100)) n = n - 4*ITX(7)
      DO i = 1, n
         Izz(i,1) = 0
      ENDDO
      IF (INTc.NE.0) THEN
         ntt = 24*Npp
         DO i = 1, INTc
            IF (Lo(100)) THEN
               DO j = 1, 11
                  Izz(3,ntt + j) = Ivy(7,i)
               ENDDO
            ELSE
               DO j = 9, 12
                  IF (.NOT.(Lo(112) .AND. (MOD(j,2).EQ.0))) THEN
                     k = ITX(j) + i
                     Izz(3,k) = Ivy(7,i)
                  ENDIF
               ENDDO
               k = Ivy(3,i)
               IF (k.NE.0) THEN
                  Izz(3,k + ITC) = Ivy(7,i)
                  IF (Lo(14)) Izz(3,k + IT0) = Ivy(7,i)
               ENDIF
               k = Ivy(4,i)
               IF (k.NE.0) Izz(3,k + ITE) = Ivy(7,i)
               k = Ivy(5,i)
               IF (k.NE.0) Izz(3,k + ITF) = Ivy(7,i)
            ENDIF
            ntt = ntt + 11
         ENDDO
      ENDIF
      nma = Nva(1,1)
  100 IF (nma.GE.Nva(1,2)) THEN
         IF (nfo.EQ.0) RETURN
C FOLDING                                                               STDP-589
         nnf = Ism*ITXm + 1
         IF (Lo(100)) nnf = nnf - Ism*ITX(7)
         DO i = 1, nnf
            P(i) = 0.D0
         ENDDO
         n1 = Nva(2,1)
         ist = 0
         DO n = 1, nfo
            is = 5 + Ism +
     &           IDINT(2.D0*(DABS(Va(n1+3*n-2)) + 2.D0*DABS(Va(n1+3*n-1)
     &           ))/hm)
            IF (Va(n1 + 3*n - 3)*Va(n1 + 3*n - 2).EQ.0.D0) is = Ism + 5
            ist = MAX0(is,ist)
         ENDDO
         idy = nnf + 2*ist*(IMAx + 1)
         Idx = MAX0(idy,Idx)
         IF (Idx.GT.2*Nx) CALL MEMO('STDF',Nx,(Idx + 1)/2,2)
         CALL FOLD(V,P,Va(n1),nfo,1,Ism,ist,Aconv,Ivy,INTc,P(nnf),Pgn,
     &             Xgn,Wv,Izz,Lo)
         RETURN
      ELSE
         i1 = Nva(1,nma)
         iv = Nva(2,nma)
         itv = MOD(i1 - 1,8) + 1
         j1 = (i1 - 1)/8
         itt = itv
         lt(1) = (itv - 5)*(itv - 6)*(itv - 8).EQ.0
         inl = 0
         IF (j1.GT.Npp) itt = itv + 8
         IF (Lo(100)) THEN
            IF (j1.LE.Npp) THEN
               inl = 8
               ji = 2
               l1 = itv + 24*(j1 - 1)
            ELSE
               ji = 3
               IF (lt(1)) inl = 4
               IF (itt.EQ.16) inl = 3
               l1 = 24*Npp + 11*(j1 - Npp - 1) + itv
            ENDIF
            ij = 1 + inl/3
         ELSE
            ji = 1
            ij = 1
            IF (j1.GT.Npp) j1 = j1 - Npp
            l1 = j1 + ITX(itt)
            IF ((itt.EQ.13) .OR. (itt.EQ.14)) inl = INLs
            IF (itt.EQ.16) inl = INVd
            IF (inl.NE.0) ij = 2
         ENDIF
         IF (iv.NE.16) THEN
            j = MAX0(iv,1)
            nmb = nma + itz(j)
            lt(7) = .FALSE.
            IF ((iv.GE.7) .OR. (Va(nmb).NE.0.)) THEN
               lt(1) = lt(1) .AND. Lo(200)
               lt(2) = lt(1) .AND. (itv.EQ.itt) .AND.
     &                 (Nva(1,nma + 1).EQ.0)
               lt(3) = .FALSE.
               lt(4) = itv.GT.6
               lt(8) = (iv.GT.0) .AND. (iv.LT.7)
               k = IABS(Nva(1,nma + 2))
               hh = Wv(11,k)
               h = hh
               hm = DMIN1(h,hm)
               Izz(1,l1) = -Nva(1,nma + 1)
               Izz(2,l1) = itt
               Izz(4,l1) = k
               IF (Nva(1,nma + 1).NE.0) THEN
                  ij = 1
                  nfo = MAX0(nfo,Nva(1,nma + 1))
               ENDIF
               l = Izz(3,l1)
               ji = ij
               IF (lt(2)) ji = ji + 1
               IF ((iv.LE.0) .OR. (iv.GE.9)) THEN
                  ap = Va(nmb)
                  IF (iv.GE.9) THEN
C BESSEL EXPANSION                                                      STDP-210
                     nmc = nmb + 1
                     l2x = Nva(2,nma + 2)
                     ll = Nva(1,nma + 3)
                     IF (iv.EQ.9) THEN
                        lj = ll + ji + Nva(2,nma + 3)
                        Idx = MAX0(Idx,3*MAX0(l2x,lj))
                        IF (Idx.GT.2*Nx)
     &                      CALL MEMO('STDF',Nx,(Idx + 1)/2,2)
C COMPUTATION OF ZEROS OF BESSEL FUNCTIONS - THE L+1 ZEROS FOR L=1 TO   STDP-222
C L=11 ARE IN DATA ZB. THE OTHERS ARE COMPUTED WITH MC MAHON'S FORMULA  STDP-223
C PAGE 371, HANDBOOK OF MATH. FUNCTIONS, ABRAMOVITZ AND STEGUN          STDP-224
                        IF (Va(nmc).EQ.0.) Va(nmc) = Ism*h
                        DO ii = 1, l2x
                           IF ((ll.NE.0) .AND.
     &                         ((ll.LT.12) .AND. (ii.LE.ll+1))) THEN
                              k = (ll*(ll + 1))/2 + ii - 1
                              X(1,ii) = zb(k)
                           ELSE
                              X(1,ii) = (2*ii + ll)*pis2
                              IF (ll.NE.0) THEN
                                 a1 = 2.D0*X(1,ii)
                                 a2 = DFLOAT(ll*(ll + 1))
                                 X(1,ii) = X(1,ii)
     &                              - a2*(1.D0 + (7.D0*a2 - 6.D0 +
     &                              ((166.D0*a2-408.D0)*a2+360.D0+
     &                              (((6949.D0*a2-33252.D0)*a2+81180.D0)
     &                              *a2-75600.D0)/(7.D0*a1**2))
     &                              /(5.D0*a1**2))/(3.D0*a1**2))/a1
                              ENDIF
                           ENDIF
                           X(1,ii) = X(1,ii)/Va(nmc)
                        ENDDO
                        lm = ll + 1
                        lt(6) = lt(2) .AND. (Nva(2,nma + 1).EQ.0)
                     ELSE
                        jl = Nva(2,nma + 3)
                        lj = ji + jl - 1
                        IF (Va(nmc).EQ.0.D0) Va(nmc) = 1.D0
                     ENDIF
                     GOTO 400
                  ELSE
                     lt(2) = lt(2) .AND. (Nva(2,nma + 1).NE.0)
                     lt(4) = lt(4) .AND. ((Nva(2,nma+1).NE.0))
C FORM FACTOR INTERPOLATED                                              STDP-170
                     CALL INTP( - iv,Ism,h*Va(nmb + 1),Va(nmb),
     &                         Va(nmb + 2),V,l1)
                     IF (ij.EQ.1) GOTO 300
                  ENDIF
               ELSEIF (lt(8)) THEN
C WOODS-SAXON AND ITS DERIVATIVES TO SOME POWER                         STDP-242
                  nmc = nmb + 4
                  lt(5) = ((Va(nmb+2).EQ.0.D0) .AND. lt(4))
                  lt(4) = ((Va(nmb+2).NE.0.D0) .AND. lt(4))
                  lt(6) = (((itv.EQ.3) .OR. (itv.EQ.4)) .AND. Lo(200))
                  lt(9) = Lo(109) .OR. (Va(nmb + 1).GE.0.D0) .OR. lt(5)
                  IF (itv.GT.6) nmc = nmc + 1
                  IF (.NOT.(lt(5))) THEN
                     sep = DEXP(hh/Va(nmb + 2))
                     IF (Va(nmb + 2).LE.0.02D0*h) THEN
                        WRITE (MW,99005) Va(nmb + 2), nma, i
99005                   FORMAT (' TOO SMALL DIFFUSENESS =',D15.8,
     &                 '   CHANGED INTO MINIMUM VALUE IN STDP FOR NMA ='
     &                 ,I5,' AND I =',I2)
                        Va(nmb + 2) = DMAX1( - Va(nmb + 2),0.02D0*h)
                     ENDIF
                  ELSEIF (Va(nmb + 1).LT.h) THEN
                     WRITE (MW,99010) Va(nmb + 1), nma, i
99010                FORMAT (' TOO SMALL COULOMB RADIUS =',D15.8,
     &                 '   CHANGED INTO MINIMUM VALUE IN STDP FOR NMA ='
     &                 ,I5,' AND I =',I2)
                     Va(nmb + 1) = DMAX1( - Va(nmb + 1),h)
                  ENDIF
                  IF (iv.LE.4) THEN
C INITIALISATION OF DO LOOPS FOR NOT DEFORMED POTENTIALS                STDP-318
                     iqm = 0
                     ix = 1
                     Idx = MAX0(Idx,63)
                     IF (Idx.GT.2*Nx) CALL MEMO('STDF',Nx,(Idx + 1)/2,2)
                     X(1,1) = 0.D0
                     X(2,1) = -Va(nmb + 1)
                     X(3,1) = 1.D0
                     X(3,21) = 1.D0
                     X(1,21) = 1.D-16
                     IF (.NOT.(lt(9))) THEN
                        X(2,1) = -X(2,1)
                        IF (X(2,1).GT. - 36.D0*Va(nmb + 2)) X(1,21)
     &                      = DEXP(X(2,1)/Va(nmb + 2))
                     ENDIF
                     IF (lt(5)) THEN
                        X(2,1) = -X(2,1)
                        a2 = X(2,1)**3
                     ENDIF
                  ELSE
C INITIALISATION OF DO LOOPS FOR DEFORMED POTENTIALS                    STDP-259
                     iqm = Nva(2,nma + 2)
                     ix = 20
                     iq = MAX0(l,iqm)
                     IF (iv.EQ.6) iq = MAX0(iq,Nva(2,nma + 2))
                     Idx = MAX0(Idx,3*iq + 120)
                     IF (Idx.GT.2*Nx) CALL MEMO('STDF',Nx,(Idx + 1)/2,2)
                     a2 = 0.D0
                     a1 = 1.D0
                     IF (Lo(6)) a1 = DABS(Va(nmb + 1))
                     DO i = 1, iqm
                        X(1,40 + i) = Va(nmc + i - 1)
     &                                *DSQRT(DFLOAT(2*i + 1)/(8.D0*pis2)
     &                                )/a1
                     ENDDO
                     DO ii = 1, 20
                        i = 1 + MOD(ii - 1,10)
                        X(2,22) = Xgn(i)
                        IF (i.NE.ii) X(2,22) = -X(2,22)
                        X(2,21) = 1.D0
                        DO j = 2, iq
                           X(2,j + 21)
     &                        = (DFLOAT(2*j - 1)*X(2,22)*X(2,j + 20)
     &                        + DFLOAT(1 - j)*X(2,j + 19))/DFLOAT(j)
                        ENDDO
                        X(3,ii + 20) = 0.5D0*Pgn(i)
                        X(2,ii) = 0.D0
                        a5 = X(2,l + 21)
                        IF (iv.NE.5) THEN
                           kl = Nva(2,nma + 2)
                           IF (Nva(1,nma + 3).NE.0) THEN
C COMPUTATION OF Y(L,KK) * Y(KL,KK)                                     STDP-287
                              a5 = DSQRT(DFLOAT(2*kl + 1))
                              kk = Nva(1,nma + 3)
                              DO n = 1, kk
                                 a5 = a5*(1.D0 - Xgn(i)**2)
     &                                *DFLOAT(2*n - 1)
     &                                **2/DSQRT(DFLOAT((kl+n)*(l+n)
     &                                *(kl-n+1)*(l-n+1)))
                              ENDDO
                              kz = l - kk
                              DO j = 1, 2
                                 IF (kz.GT.0) THEN
                                    a4 = 0.D0
                                    DO k = 1, kz
                                       a3 = a4
                                       a4 = a5
                                       a5 = a3 + (a4*X(2,22) - a3)
     &                                    *(2.D0*(kk + k) - 1.D0)/k
                                    ENDDO
                                 ENDIF
                                 kz = kl - kk
                              ENDDO
                           ELSE
                              a5 = a5*X(2,kl + 21)
     &                             *DSQRT(DFLOAT(2*kl + 1))
                           ENDIF
                        ENDIF
                        X(3,ii) = X(3,ii + 20)*a5*DSQRT(2.D0*l + 1.D0)
                        rr = 1.D0
                        DO k = 1, iqm
                           rr = rr + X(1,40 + k)*X(2,k + 21)
                        ENDDO
                        X(2,ii) = -rr*Va(nmb + 1)
                        X(1,ii) = 0.D0
                        X(1,20 + ii) = 1.D-16
                        IF (.NOT.(lt(9))) THEN
                           X(2,ii) = -X(2,ii)
                           IF (X(2,ii).GT. - 36.D0*Va(nmb + 2))
     &                         X(1,20 + ii) = DEXP(X(2,ii)/Va(nmb + 2))
                        ENDIF
                        IF (lt(5)) THEN
                           X(2,ii) = DABS(X(2,ii))
                           a2 = a2 + X(2,ii)**3*X(3,20 + ii)
                        ENDIF
                     ENDDO
                  ENDIF
                  iv1 = 1 + MOD(iv - 1,4)
                  ap = Va(nmb)
                  an = Va(nmb + 1)
                  IF (Lo(6)) an = an/DABS(Va(nmb + 1))
                  IF (.NOT.lt(9)) an = -an
                  IF (iv1.GT.1) ap = ap*an/DSQRT(8.D0*pis2)
                  IF (iv1.GT.2) ap = ap*an*0.5D0
                  IF (iv1.GT.3) ap = ap*an/3.D0
                  IF (Va(nmb + 3).LE. - 1.D0) THEN
                     WRITE (MW,99015) Va(nmb + 3), nma
99015                FORMAT (' POWER 1+',D15.6,
     &                       '  CHANGED TO .2 FOR NMA =',I4)
                     Va(nmb + 3) = -.8D0
                  ENDIF
                  a1 = Va(nmb + 3)
                  a5 = DFLOAT(l + 1)
                  iv2 = iv1
                  iv3 = iv2 - 1
                  iv2 = iv3 + ji
                  IF (lt(6)) iv2 = iv2 + 1
                  IF (itv.GT.6) ap = ap*Ccz
                  IF (lt(5)) ap = ap/a2
                  GOTO 400
               ELSE
C BOUND STATE FORM FACTOR                                               STDP-180
                  k = Nva(1,nmb)
                  ivm = Nva(2,nmb - 1)
                  ivx = iv
                  jv = 0
                  nmc = nmb + 3
                  IF (k.NE.1) THEN
                     jv = Ism
                     IF (2*jv.GT.Nx) CALL MEMO('STDF',Nx,2*jv,2)
                     Idx = Idx - 2*jv
                     CALL STBF(P,Nva(2,nmb),Ism,Va(nmc + 11 - iv),ivm,
     &                         Nx - jv,Idx,X(jv + 1,1),ivx,hh,
     &                         Izz(4*ITXm + jv + 1,1),Lo)
                     nmc = nmc + 10*ivx - 66
                     IF (k.EQ.3) ivx = ivx - 1
                     nmb = nmb + 2
                  ENDIF
                  CALL STBF(V(1,l1),Nva(2,nmb),Ism,Va(nmc),ivm,Nx - jv,
     &                      Idx,X(jv + 1,1),ivx,hh,
     &                      Izz(4*ITXm + jv + 1,1),Lo)
                  IF (k.NE.1) THEN
                     Idx = Idx + jv
                     DO is = 1, Ism
                        V(is,l1) = V(is,l1)*P(is)*Va(nmb + 3)
                     ENDDO
                  ENDIF
                  nma = Nva(2,i1 - 6) + 1
                  GOTO 100
               ENDIF
            ELSE
C ZERO FORM FACTORS AND GO TO NEXT                                      STDP-140
               l2 = l1
               DO j = 1, ij
                  DO is = 1, Ism
                     V(is,l2) = 0.D0
                  ENDDO
                  l2 = l2 + inl
               ENDDO
               nma = Nva(2,i1 - 6) + 1
               GOTO 100
            ENDIF
         ELSE
C FORM FACTOR COPIED                                                    STDP-125
            l3 = 0
            l2 = l1 + nij(ji)*(Nva(2,nma + 1) - i1)/8
            DO j = 1, ij
               DO is = 1, Ism
                  V(is,l1 + l3) = V(is,l2 + l3)*Va(nma + 3)
               ENDDO
               l3 = l3 + inl
            ENDDO
            Izz(1,l1) = -Nva(1,nma + 1)
            Izz(2,l1) = Izz(2,l2)
            Izz(4,l1) = Izz(4,l2)
            nma = Nva(2,i1 - 6) + 1
            GOTO 100
         ENDIF
      ENDIF
  200 l2 = l1
      DO j = 2, ij
         CALL DERI(V(1,l2 + inl),V(1,l2),h,Ism,.TRUE.)
         l2 = l2 + inl
      ENDDO
      IF (iv.GT.0) GOTO 500
  300 lt(3) = .TRUE.
      IF (.NOT.(.NOT.lt(2) .OR. lt(4))) THEN
         Idx = MAX0(Idx,Ism)
         IF (Idx.GT.2*Nx) CALL MEMO('STDF',Nx,(Idx + 1)/2,2)
         CALL DERI(P,V(1,l1),h,Ism,.TRUE.)
      ENDIF
      IF (.NOT.(lt(2) .OR. (Nva(2,nma+1).NE.0))) THEN
         IF (ij.NE.1) GOTO 500
         nma = Nva(2,i1 - 6) + 1
         GOTO 100
      ENDIF
  400 IF (lt(4)) ji = 1
      rr = 0.D0
      an = 0.D0
      a6 = 0.D0
      DO is = 1, Ism
         rr = rr + hh
         IF (lt(3)) THEN
            y(1) = V(is,l1)/ap
            IF (lt(2) .AND. (.NOT.lt(4))) V(is,l1) = P(is)
         ELSE
            DO i = 1, 3
               y(i) = 0.D0
            ENDDO
            IF (iv.LT.9) THEN
C INTEGRATION LOOP                                                      STDP-363
               DO i = 1, ix
                  IF (lt(5)) THEN
C DEFORMED COULOMB POTENTIAL                                            STDP-422
                     a4 = X(2,i)/rr
                     IF (itv.NE.itt) THEN
                        IF (a4.LE.1.D0) THEN
                           a3 = (X(2,i)**2)*(a4**(l + 1))
     &                          *3.D0/((a5 + 2.D0)*(2.D0*a5 - 1.D0))
                           IF (iv1.GT.1) a3 = a3*(a5 + 2.D0)/X(2,i)
                           IF (iv1.GT.2) a3 = a3*(a5 + 1.D0)/X(2,i)
                           IF (iv1.GT.3) a3 = a3*a5/X(2,i)
                        ELSEIF (l.NE.2) THEN
                           IF (iv1.EQ.1)
     &                         a3 = rr*rr*(1.D0/(a5 + 2.D0) - 1.D0/
     &                         (a4**(l-2)*(2.D0*a5-1.D0)))
     &                         *3.D0/(a5 - 3.D0)
                           IF (iv1.GE.2) a3 = rr/a4**(l - 1)
     &                         *3.D0/(2.D0*a5 - 1.D0)
                           IF (iv1.GE.3) a3 = -a3*(a5 - 2.D0)/X(2,i)
                           IF (iv1.EQ.4) a3 = -a3*(a5 - 1.D0)/X(2,i)
                        ELSE
                           IF (iv1.EQ.1) a3 = rr*rr*(0.2D0 + DLOG(a4))
     &                         *0.6D0
                           IF (iv1.GE.2) a3 = 0.6D0*rr/a4
                           IF (iv1.GE.3) a3 = -a3/X(2,i)
                           IF (iv1.GE.4) a3 = -2.D0*a3/X(2,i)
                        ENDIF
                        y(1) = y(1) + a3*X(3,i)
                        IF (ji.NE.1) THEN
                           IF (a4.LE.1.D0) THEN
                              a3 = -a5*a3/rr
                           ELSEIF (l.NE.2) THEN
                              IF (iv2.EQ.1)
     &                            a3 = (2.D0/(a5 + 2.D0) - (a5 - 1.D0)
     &                            /(a4**(l-2)*(2.D0*a5-1.D0)))
     &                            *3.D0/(a5 - 3.D0)*rr
                              IF (iv2.NE.1) a3 = (a5 - 1.D0)*a3/rr
                           ELSE
                              IF (iv2.EQ.1)
     &                            a3 = -1.2D0*(0.3D0*rr - DLOG(a4))*rr
                              IF (iv2.GE.2) a3 = 2.D0*a3/rr
                           ENDIF
                           y(2) = y(2) - a3*X(3,i)
                        ENDIF
                     ELSEIF (a4.GT.1.D0) THEN
                        y(1) = y(1) + (0.5D0*X(2,i)*X(2,i) - rr*rr/6.D0)
     &                         *X(3,i)*3.D0
                        y(2) = y(2) + rr*X(3,i)
                        y(3) = y(3) - X(3,i)
                     ELSE
                        y(1) = y(1) + (X(2,i)**2)*a4*X(3,i)
                        y(2) = y(2) + X(2,i)*a4**2*X(3,i)
                        y(3) = y(3) + 2.D0*a4**3*X(3,i)
                     ENDIF
                     GOTO 410
                  ELSE
                     IF (X(1,i).NE.0.D0) THEN
                        IF (X(1,i).LT.1.D15) X(1,i) = X(1,i)*sep
                     ELSE
                        X(2,i) = X(2,i) + hh
                        IF (X(2,i) + 50.D0*Va(nmb + 2).GT.0.D0) X(1,i)
     &                      = DEXP(X(2,i)/Va(nmb + 2))
                     ENDIF
                     IF ((.NOT.lt(9)) .AND. X(1,i + 20).GT.1.D-15)
     &                   X(1,i + 20) = X(1,i + 20)/sep
                     j = i
                     k = 1
                  ENDIF
  405             vr(1,k) = 1.D0/(1.D0 + X(1,j))
                  IF (iv2.NE.1) THEN
                     a2 = vr(1,k)/Va(nmb + 2)
                     vr(2,k) = vr(1,k)*a2*X(1,j)
                     IF (iv2.GT.2) vr(3,k) = vr(2,k)*a2*(X(1,j) - 1.D0)
                     IF (iv2.GT.3) vr(4,k) = vr(2,k)
     &                   *(X(1,j)**2 - 4.D0*X(1,j) + 1.D0)*a2*a2
                     IF (iv2.GT.4) vr(5,k) = vr(3,k)
     &                   *(X(1,j)**2 - 10.D0*X(1,j) + 1.D0)*a2*a2
                  ENDIF
                  IF (a1.NE.0.D0) THEN
                     IF (iv2.GT.4) vr(5,k) = (a1 + 1.D0)
     &                   *(a1*(a1 - 1.D0)*((a1-2.D0)*vr(2,k)
     &                   **2 + 6.D0*vr(1,k)*vr(3,k))*vr(2,k)
     &                   **2 + a1*vr(1,k)
     &                   **2*(3.D0*vr(3,k)**2 + 4.D0*vr(2,k)*vr(4,k))
     &                   + vr(1,k)**3*vr(5,k))*vr(1,k)**(a1 - 3.D0)
                     IF (iv2.GT.3) vr(4,k) = (a1 + 1.D0)
     &                   *(a1*((a1-1.D0)*vr(2,k)**2 + 3.D0*vr(1,k)
     &                   *vr(3,k))*vr(2,k) + vr(1,k)**2*vr(4,k))*vr(1,k)
     &                   **(a1 - 2.D0)
                     IF (iv2.GT.2) vr(3,k) = (a1 + 1.D0)
     &                   *(a1*vr(2,k)**2 + vr(3,k)*vr(1,k))*vr(1,k)
     &                   **(a1 - 1.D0)
                     IF (iv2.GT.1) vr(2,k) = (a1 + 1.D0)*vr(1,k)
     &                   **a1*vr(2,k)
                     vr(1,k) = vr(1,k)**(a1 + 1.D0)
                  ENDIF
                  IF (.NOT.lt(9)) THEN
                     j = j + 20
                     k = k + 1
                     IF (k.EQ.2) GOTO 405
                     IF (Lo(200) .OR. (ij.NE.3)) THEN
                        IF (iv2.GT.4) vs(4) = vr(1,1)*vr(5,2)
     &                      + 2.D0*vr(2,1)*vr(4,2) - 2.D0*vr(4,1)
     &                      *vr(2,2) - vr(5,1)*vr(1,2)
                        IF (iv2.GT.3) vs(3) = vr(1,1)*vr(4,2) + vr(2,1)
     &                      *vr(3,2) - vr(3,1)*vr(2,2) - vr(4,i)*vr(1,2)
                        IF (iv2.GT.2) vs(2) = vr(1,1)*vr(3,2) - vr(3,1)
     &                      *vr(1,2)
                        vs(1) = vr(1,1)*vr(2,2) - vr(2,1)*vr(1,2)
                        IF (iv2.GT.4) vr(5,1) = vr(1,1)*vr(5,2)
     &                      + 4.D0*vr(2,1)*vr(4,2) + 6.D0*vr(3,1)
     &                      *vr(3,2) + 4.D0*vr(4,1)*vr(2,2) + vr(5,1)
     &                      *vr(1,2)
                        IF (iv2.GT.3) vr(4,1) = vr(1,1)*vr(4,2)
     &                      + 3.D0*vr(2,1)*vr(3,2) + 3.D0*vr(3,1)
     &                      *vr(2,2) + vr(4,1)*vr(1,2)
                        IF (iv2.GT.2) vr(3,1) = vr(1,1)*vr(3,2)
     &                      + 2.D0*vr(2,1)*vr(2,2) + vr(3,1)*vr(1,2)
                        IF (iv2.GT.1) vr(2,1) = vr(1,1)*vr(2,2)
     &                      + vr(2,1)*vr(1,2)
                     ELSE
                        vr(3,1) = vr(1,1)*vr(3,2) - 2.D0*vr(2,1)*vr(2,2)
     &                            + vr(3,1)*vr(1,2)
                        vr(2,1) = vr(2,1)*vr(1,2) - vr(1,1)*vr(2,2)
                     ENDIF
                     vr(1,1) = vr(1,1)*vr(1,2)
                     IF (lt(6)) vr(iv1,1)
     &                   = rr*(4.D0*Va(nmb + 2)**(a1 + 1.D0))
     &                   /Va(nmb + 1)*vs(iv1)
                     IF (lt(1)) vr(iv3 + 2,1) = -vs(iv3 + 1)
                  ELSE
                     IF (lt(6)) vr(iv1,1) = vr(iv2,1)*4.D0*Va(nmb + 2)
                  ENDIF
                  IF (lt(4)) a6 = a6 + vr(1,1)*rr**2*X(3,i + 20)
     &                            *(1.D0 + Va(nmb + 4)*rr**2)
                  DO j = 1, ji
                     y(j) = y(j) + vr(iv3 + j,1)*X(3,i)
                  ENDDO
  410          ENDDO
C COMPUTATION OF BESSEL FUNCTIONS                                       STDP-466
            ELSEIF (iv.GT.9) THEN
C COMPUTATION OF LAGUERRE POLYNOMIALS X**LL L(2X**2) DEXP(-X**2)        STDP-506
               DO j = 1, l2x, 2
                  IF (j.NE.1) THEN
                     cl(1) = (cl(2)*(DFLOAT(ll+2*j) - 2.5D0 - a2) - cl(1
     &                       )*(DFLOAT(ll+j) - 1.5D0))/DFLOAT(j - 1)
                     cl(2) = (cl(1)*(DFLOAT(ll+2*j) - 0.5D0 - a2) - cl(2
     &                       )*(DFLOAT(ll+j) - 0.5D0))/DFLOAT(j)
                  ELSE
                     a1 = rr/Va(nmc)
                     a2 = a1*a1
                     cl(1) = a1**ll*DEXP( - 0.5D0*a2)
                     cl(2) = (ll + 1.5D0 - a2)*cl(1)
                  ENDIF
                  IF (jl.EQ.0) THEN
                     y(1) = y(1) + cl(1)*Va(nmc + j)
                     IF (j.LT.l2x) y(1) = y(1) + cl(2)*Va(nmc + j + 1)
                  ENDIF
                  IF (lj.NE.0) THEN
                     DO l = 3, 6
                        cl(l) = 0.D0
                     ENDDO
C -DERIVATIVE OF LAGUERRE POLYNOMIALS X**LL L(2X**2) DEXP(-X**2)        STDP-524
                     DO k = 1, lj
                        DO l = 1, 6
                           cl(l + 2) = cl(l)
                        ENDDO
                        cl(1) = ((DFLOAT(ll+2*j+k) - a2)*cl(3) - DFLOAT(
     &                          2*j)*cl(4) - DFLOAT(2*(k-1)*(k-2))*cl(7)
     &                          )/a1 + DFLOAT(4*(k - 1))*cl(5)
                        cl(2) = -((DFLOAT(ll+2*j+1-k) - a2)*cl(4) -
     &                          DFLOAT(2*j + 1 + 2*ll)*cl(3)
     &                          - DFLOAT(2*(k-1)*(k-2))*cl(8))
     &                          /a1 - DFLOAT(4*(k - 1))*cl(6)
                        IF (k.LT.jl) GOTO 420
                        y(k + 1 - jl) = y(k + 1 - jl) + cl(1)
     &                                  *Va(nmc + j)
                        IF (j.LT.l2x) y(k + 1 - jl) = y(k + 1 - jl)
     &                      + cl(2)*Va(nmc + j + 1)
                     ENDDO
                  ENDIF
  420          ENDDO
            ELSE
               IF (rr.GT.Va(nmc)) GOTO 450
               DO ii = 1, l2x
                  a1 = rr*X(1,ii)
                  X(2,1) = DSIN(a1)/a1
                  IF (lj.NE.1) THEN
                     k = IDINT(1.D0 + a1)
                     IF (k.LT.lj) THEN
                        a3 = lj
                        a4 = DMAX1(DSQRT(10.5D0*a1) - 0.5D0,a3)
                        k = IDINT(a4 + 3.D0 + 21.D0*a1/(a4 + a4 + 1.D0))
                        a2 = 0.D0
  422                   a2 = a1/(2.D0*k + 1.D0 - a2*a1)
                        IF (k.LE.lj) X(2,k + 1) = a2
                        k = k - 1
                        IF (k.GE.1) GOTO 422
                        DO k = 2, lj
                           X(2,k) = X(2,k)*X(2,k - 1)
                        ENDDO
                     ELSE
                        X(2,2) = (X(2,1) - DCOS(a1))/a1
                        IF (lj.NE.2) THEN
                           DO j = 3, lj
                              X(2,j) = (2*j - 3)*X(2,j - 1)
     &                                 /a1 - X(2,j - 2)
                           ENDDO
                        ENDIF
                     ENDIF
                  ENDIF
C COMPUTATION OF DERIVATIVES OF BESSEL FUNCTIONS (- DERIVATIVE)         STDP-490
                  jl = lj - 1
                  DO j = lm, lj
                     kk = ji + j - lj
                     IF (kk.GE.1) y(kk) = y(kk) + Va(nmc + ii)*X(2,lm)
                     IF (kk.EQ.ji) GOTO 430
                     a3 = 0.D0
                     a5 = 0.D0
                     DO k = 1, jl
                        a2 = (a5 + 1.D0)*X(2,k + 1) - a5*a3
                        a3 = X(2,k)
                        X(2,k) = X(1,ii)*a2/(2.D0*a5 + 1.D0)
                        a5 = a5 + 1.D0
                     ENDDO
                     jl = jl - 1
                  ENDDO
  430          ENDDO
            ENDIF
            l2 = l1
            DO j = 1, ji
               V(is,l2) = ap*y(j)
               l2 = l2 + inl
            ENDDO
         ENDIF
  450    an = an + ap*y(1)*rr**(l + 2)
      ENDDO
      IF (.NOT.(lt(7))) THEN
         IF (lt(4)) THEN
C FOLDING OF CHARGE DISTRIBUTION WITH COULOMB POTENTIAL                 STDP-547
            Idx = MAX0(Idx,5*Ism)
            IF (Idx.GT.2*Nx) CALL MEMO('STDF',Nx,(Idx + 1)/2,2)
            a7 = 0.D0
            IF (lt(8)) a7 = Va(nmb + 4)
            CALL COPO(V(1,l1),V(1,l1),X,Ism,hh,l,ap,a7,Ccz,a6,.TRUE.,
     &                .FALSE.)
            IF (a6.EQ.0.D0) a6 = DABS(V(Ism,l1)*DFLOAT(2*l + 1)*(Ism*hh)
     &                           **(l + 1)/(Ccz*Va(nmb)))
            DO is = 1, Ism
               V(is,l1) = V(is,l1)/a6
            ENDDO
         ENDIF
         IF (Nva(2,nma + 1).NE.0) THEN
            an = DABS(an*hh/ap)
            IF (itv.GT.6) an = DABS(V(Ism,l1)*DFLOAT(2*l + 1)*(Ism*hh)
     &                         **(l + 1)/(Ccz*Va(nmb)))
            IF (lt(2) .AND. (itt.EQ.8) .AND. (Nva(1,nma+1).EQ.0) .AND.
     &          (Va(nmb+2).EQ.0.D0) .AND. lt(8)) an = an*hh*Ism
            IF (Nva(2,nma + 1).GT.0) THEN
               l2 = l1
               DO j = 1, ij
                  DO is = 1, Ism
                     V(is,l2) = V(is,l2)/an
                  ENDDO
                  l2 = l2 + inl
               ENDDO
            ELSE
               Nva(2,nma + 1) = -Nva(2,nma + 1)
               ap = Va(nmb)
               Va(nmb) = ap*an
               WRITE (MW,99020) ap, Va(nmb), itt, j1
99020          FORMAT (' STRENGTH',D15.6,' REPLACED BY THE INTEGRAL',
     &                 D15.6,' FOR THE FORM FACTOR',I4,
     &                 ' OF THE POTENTIAL',I4)
            ENDIF
         ENDIF
         IF (lt(4)) THEN
            lt(4) = .FALSE.
            lt(7) = .TRUE.
            IF (lt(2)) GOTO 300
            IF (ij.NE.1) GOTO 200
         ENDIF
      ENDIF
  500 IF (.NOT.(.NOT.lt(1) .OR. (Nva(1,nma+1).NE.0))) THEN
         rr = 0.D0
         DO is = 1, Ism
            rr = rr + h
            a1 = V(is,l1 + inl)
            V(is,l1 + inl) = -V(is,l1)/rr**2
            V(is,l1) = a1/rr
         ENDDO
      ENDIF
      nma = Nva(2,i1 - 6) + 1
      GOTO 100
      END
C 01/01/04                                                      ECIS03  STBF-000
      SUBROUTINE STBF(V,Ivx,Ism,Va,Ivm,Nx,Idx,Xx,Iv,H,Iex,Lo)
C COMPUTES BOUND STATE FORM FACTORS                                     STBF-002
C INPUT : IVX:  TABLE OF QUANTUM NUMBERS                                STBF-003
C         ISM:  NUMBER OF INTEGRATION STEPS                             STBF-004
C         VA:   FOR OPTICAL MODEL PARAMETERS TO USE HERE                STBF-005
C         IVM:  STEP FACTOR FOR WOODS-SAXON WAVE FUNCTIONS              STBF-006
C         NX:   LENGTH OF WORKING SPACE                                 STBF-007
C         LO:   LOGICAL CONTROLS                                        STBF-008
C OUTPUT: V(ISM):  BOUND STATE WAVE FUNCTION                            STBF-009
C         IDX:  LENGTH OF WORKING FIELD USED                            STBF-010
C WORKING SPACE: XX(3,I): TO COMPUTE BOUND FUNCTIONS                    STBF-011
C                IEX: FOR COULOMB FUNCTION, IN EQUIVALENCE WITH XX      STBF-012
C***********************************************************************STBF-013
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      REAL*8 CCZ, CHB, CK, CM, CMB
      INTEGER MR, MS, MW
      COMMON /DCONS / CM, CK, CHB, CMB, CCZ
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      REAL*8 H
      INTEGER Idx, Ism, Iv, Ivm, Nx
      INTEGER Iex(1), Ivx(4)
      LOGICAL Lo(250)
      REAL*8 V(1), Va(11), Xx(3,1)
C
C Local variables
C
      REAL*8 a1, a2, a3, a4, a5, a6, rr, x1, x2, x3, x4, x5, y1, y2, y3,
     &       y4, y5, z1, z2, z3, z4
      DOUBLE PRECISION DABS, DATAN2, DEXP, DLOG, DSQRT
      INTEGER i, ig, ik, in1, in2, in3, ireb, is, ist, j, jg, jl, k, kn,
     &        kr, ks, l, m, n
      INTEGER IDINT, MAX0, MIN0
C
C
      l = Ivx(2)
      IF (Iv.EQ.8) THEN
C BOUND STATE IN WOODS-SAXON POTENTIAL                                  STBF-047
C CONTROL OF STORAGE AND STEP SIZE                                      STBF-048
         ireb = Ivm
         IF (ireb.EQ.0) ireb = 4
         kn = ireb*Ism
         Idx = MAX0(Idx,6*kn + 6)
         IF (Idx.GT.2*Nx) CALL MEMO('STBF',Nx,(Idx + 1)/2,2)
         a4 = ireb
         a4 = H/a4
         IF (Va(3).EQ.0.D0) Va(3) = 1.D0
         y3 = (Va(2) - Va(3))**0.33333333333333D0
         a2 = y3*Va(6)
         kr = IDINT(a2/a4)
         y2 = Va(1)
         IF (y2.EQ.0.D0) y2 = 0.01D0
         jl = Ivx(4)
         IF (Ivx(3).EQ.0) jl = 2*l
         IF (Lo(51)) WRITE (MW,99005) Ivx, kn, ireb, kr, y2,
     &                                (Va(i),i = 2,11)
99005    FORMAT (//' WOODS-SAXON POTENTIAL EIGENFUNCTION WITH N =',I2,
     &           3X,'L =',I3,3X,'2*S =',I2,3X,'2*J =',I3,3X,I4,
     &           ' STEPS (DIVIDED BY',I3,') MATCHING AT THE',I4,
     &           'TH'/' **** BINDING ENERGY',F12.6,' MEV ****',4X,
     &           'TOTAL MASS',F12.6,4X,'PARTICLE MASS',F12.6,4X,
     &           'PRODUCT OF CHARGES',
     &           F8.2/' SEARCH ON DEPTH OF REAL POTENTIAL FROM',F12.6,
     &           ' WITH REDUCED RADIUS',F10.6,' FERMI AND DIFFUSENESS',
     &           F10.6,' FERMI'/' SPIN-ORBIT POTENTIAL DEPTH:',F12.6,
     &           ' MEV RADIUS:',F10.6,' FERMI DIFFUSENESS:',F9.6,
     &           ' FERMI COULOMB RADIUS:',F10.6,' FERMI')
         a1 = a4*a4
         y1 = Va(3)*(Va(2) - Va(3))/Va(2)
         y5 = CK*y1*a1
         a5 = y2*y5
         rr = DSQRT(DABS(a5))/a4
         x5 = 0.5D0*CK*CCZ*y1*Va(4)/rr
         IF (Va(1).LE.0.) THEN
C MATCHING OF UNBOUND FUNCTIONS                                         STBF-072
            Idx = MAX0(Idx,10*l + 10)
            IF (Idx.GT.2*Nx) CALL MEMO('STBF',Nx,(Idx + 1)/2,2)
            CALL FCOU(l,x5,rr*a4*kn,Xx(l + 2,1),Xx(2*l + 3,1),
     &                Xx(3*l + 4,1),Xx(4*l + 5,1),Iex,Xx(5*l + 6,1))
            z1 = Xx(2*l + 2,1)
            z2 = Xx(4*l + 4,1)
            CALL FCOU(l,x5,rr*a4*(kn - 2),Xx(l + 2,1),Xx(2*l + 3,1),
     &                Xx(3*l + 4,1),Xx(4*l + 5,1),Iex,Xx(5*l + 6,1))
            z3 = Xx(2*l + 2,1)
            z4 = Xx(4*l + 4,1)
         ENDIF
         x1 = y3*Va(11)
         a3 = y3*Va(9)
         y3 = 2.D0*Va(8)*y5
         y4 = Ivx(3)*(Ivx(3) + 2) - jl*(jl + 2) + 4*l*(l + 1)
         y4 = .25D0*y4
         a6 = DFLOAT(l*(l + 1))
         a6 = a6*a1
         x4 = x5*2.D0*a1*rr
         x3 = 0.D0
         k = kn + 1
C COMPUTATION OF OPTICAL POTENTIALS                                     STBF-093
         DO i = 1, k
            x3 = x3 + a4
            x2 = DEXP((x3 - a3)/Va(10))
            Xx(2,i) = a6/(x3*x3) + y4*y3*x2/((1.D0 + x2)**2*x3*Va(10))
     &                + a5
            Xx(3,i) = -1.D0/(1.D0 + DEXP((x3-a2)/Va(7)))
            IF (x3.GT.x1) THEN
               Xx(2,i) = Xx(2,i) + x4/x3
            ELSE
               Xx(2,i) = Xx(2,i) + x4*(1.5D0 - 0.5D0*x3*x3/(x1*x1))/x1
            ENDIF
         ENDDO
         IF (Va(1).LT.0.) THEN
            kr = k
         ELSE
C MATCHING CONDITIONS                                                   STBF-105
            x1 = (x3 - a4)*rr
            x3 = x3*rr
            a6 = a6/a1
            n = IDINT(5.D0*(x3 - x1) + 1.D0)
            y3 = n
            y3 = (x3 - x1)/y3
            ig = IDINT(1.D0/y3)
            jg = MIN0(100,ig)
            a5 = y3*y3
            a3 = 1.D0
            DO i = 1, 20
               m = 2*i*jg
               a4 = x3 + y3*DFLOAT(m)
               y1 = DEXP(y3)
               y4 = 0.5D0/y3 + 0.5D0
               y2 = (a6/(a4*a4) + 2.D0*x5/a4 + 1.D0)*a5
               DO j = 1, m
                  y1 = (2.D0 + y2/(1.D0 - y2/12.D0)) - 1.D0/y1
                  a2 = y2
                  a4 = a4 - y3
                  y2 = (a6/(a4*a4) + 2.D0*x5/a4 + 1.D0)*a5
                  a1 = y1*(1.D0 - a2/12.D0)/(1.D0 - y2/12.D0)
                  y4 = y4/(a1*a1) + 1.D0
               ENDDO
               IF (DABS(y1 - a3).LT.0.1D-4*DABS(y1 - 1.D0)) GOTO 20
               a3 = y1
            ENDDO
            IF (Lo(51)) WRITE (MW,99010)
99010       FORMAT (10X,'NO CONVERGENCE ON MATCHING VALUES')
   20       y4 = (y4 - 0.5D0)*y3
            IF (Lo(51)) WRITE (MW,99015) i, m
99015       FORMAT (10X,'MATCHING VALUE OBTAINED FOR I=',I3,' WITH',I6,
     &              ' POINTS')
            x2 = 1.D0/y1
            x3 = 1.D0
            x4 = y2
            DO i = 1, n
               x1 = x2
               x2 = x3
               x3 = (2.D0 + x4/(1.D0 - x4/12.D0))*x2 - x1
               a4 = a4 - y3
               x4 = (a6/(a4*a4) + 2.D0*x5/a4 + 1.D0)*a5
            ENDDO
            a3 = x3*(1.D0 - y2/12.D0)/(1.D0 - x4/12.D0)
         ENDIF
         ks = IDINT(2.D0 + DSQRT(a6/12.D0))
C STARTING VALUES                                                       STBF-147
         DO i = 1, ks
            Xx(1,i) = 0.D0
         ENDDO
         Xx(1,ks) = 1.D0
         IF (l.EQ.1) Xx(1,ks - 1) = -.2D0
         a4 = Va(5)
         ik = 2*Ivx(1)
         ist = 0
         x1 = 0.D0
         y1 = -1.D0
         in1 = 0
         in2 = 0
C SEARCH FOR THE EIGENVALUE                                             STBF-159
         x3 = x1 + a4
   50    ist = ist + 1
         in3 = 0
         x4 = x3*y5
C UPWARDS INTEGRATION                                                   STBF-164
         DO i = ks, kr
            x5 = x4*Xx(3,i - 1) + Xx(2,i - 1)
            Xx(1,i + 1) = (2.D0 + x5/(1.D0 - x5/12.D0))*Xx(1,i)
     &                    - Xx(1,i - 1)
            IF (Xx(1,i + 1)*Xx(1,i).LT.0.D0) in3 = in3 + 2
         ENDDO
         IF (Va(1).GE.0.) THEN
            a1 = Xx(1,kr)
            a2 = Xx(1,kr + 1)
            Xx(1,kn + 2) = 1.D0
            Xx(1,kn + 1) = a3*(1.D0 - (x4*Xx(3,kn) + Xx(2,kn))/12.D0)
     &                     /(1.D0 - (x4*Xx(3,kn+1) + Xx(2,kn+1))/12.D0)
C BACKWARDS INTEGRATION                                                 STBF-176
            DO i = kr, kn
               j = kn + kr - i
               x5 = x4*Xx(3,j) + Xx(2,j)
               IF (Xx(1,j + 1)*Xx(1,j + 2).LT.0.D0) in3 = in3 + 2
               Xx(1,j) = (2.D0 + x5/(1.D0 - x5/12.D0))*Xx(1,j + 1)
     &                   - Xx(1,j + 2)
            ENDDO
            y3 = a1/a2 - Xx(1,kr)/Xx(1,kr + 1)
            IF (y3.GT.0.D0) in3 = in3 + 1
            IF (Lo(51)) WRITE (MW,99020) ist, in3, x3, y3
99020       FORMAT (2X,I3,5X,'2*N (+0/1) =',I3,5X,'V =',D20.10,5X,'D =',
     &              D20.10)
            IF (DABS(y3).LE.1.D-10 .OR. x2.EQ.x3 .OR. x1.EQ.x3) THEN
               y3 = a1/Xx(1,kr)
               k = kn + 2
               DO i = kr, k
                  Xx(1,i) = y3*Xx(1,i)
               ENDDO
            ELSE
               IF (in2.NE.0) THEN
                  x4 = (y1*y2*x3*(x2 - x1) + y1*y3*x2*(x1 - x3)
     &                 + y2*y3*x1*(x3 - x2))
     &                 /(y1*y2*(x2 - x1) + y1*y3*(x1 - x3)
     &                 + y2*y3*(x3 - x2))
                  IF (in2.GT.in1 + 2) x4 = 1.D20
                  IF (in3.GT.ik) THEN
                     x2 = x3
                     y2 = y3
                     in2 = in3
                  ELSE
                     x1 = x3
                     y1 = y3
                     in1 = in3
                  ENDIF
                  IF ((x1 - x4)*(x4 - x2).GE.0.D0) THEN
                     x3 = x4
                     GOTO 50
                  ENDIF
               ELSEIF (in3.GT.ik) THEN
                  IF (Lo(51)) WRITE (MW,99025) ik, in1, in3
99025             FORMAT (' INTERPOLATION FOR 2*N =',I4,5X,'BETWEEN',I4,
     &                    ' AND',I4)
                  x2 = x3
                  in2 = in3
                  y2 = y3
               ELSE
                  y1 = y3
                  x1 = x3
                  in1 = in3
                  a4 = x1
                  x3 = x1 + a4
                  GOTO 50
               ENDIF
C INTERPOLATION OF SOLUTION                                             STBF-197
               x3 = x1 + 0.5D0*(x2 - x1)
               IF (in2.EQ.in1 + 1) x3 = (y1*x2 - y2*x1)/(y1 - y2)
               GOTO 50
            ENDIF
         ENDIF
         DO i = 1, kn
            Xx(1,i) = (Xx(1,i) + 10.D0*Xx(1,i + 1) + Xx(1,i + 2))/12.D0
         ENDDO
         IF (Va(1).GT.0.D0) THEN
            y1 = 0.D0
            DO i = 1, kn
               y1 = y1 + Xx(1,i)**2
            ENDDO
            y1 = y1 - 0.5D0*Xx(1,kn)**2
            y2 = y4*Xx(1,kn)**2/rr
            y3 = ireb
            y1 = y1*H/y3 + y2
            y2 = 100.D0*y2/y1
         ELSE
            x1 = Xx(1,kn)*z4 - Xx(1,kn - 2)*z2
            x2 = Xx(1,kn - 2)*z1 - Xx(1,kn)*z3
            x3 = z1*z4 - z2*z3
            y2 = DATAN2(x2,x1)
            y1 = (x1**2 + x2**2)/x3**2
            x3 = Va(5)
         ENDIF
         y1 = 1.D0/DSQRT(y1)
         is = 0
         rr = 0.D0
         DO i = ireb, kn, ireb
            is = is + 1
            rr = rr + H
            V(is) = y1*Xx(1,i)/rr
         ENDDO
         IF (Lo(51)) WRITE (MW,99030) x3, y2, (is,V(is),is = 1,Ism)
99030    FORMAT (//' DEPTH USED',D20.10,' MEV',15X,
     &           'TAIL PERCENTAGE OR PHASE-SHIFT',F10.5//(6(I6,D15.6)))
         RETURN
      ELSE
         n = Ivx(1)
C COMPUTATION OF THE NORMALISATION OF LAGUERRE POLYNOMIALS              STBF-022
         a1 = 2.256758334191D0
         a3 = l
         IF (l.NE.0) THEN
            DO i = 1, l
               a1 = a1/(DFLOAT(i) + .5D0)
            ENDDO
         ENDIF
         IF (n.NE.0) THEN
            DO i = 1, n
               a2 = DFLOAT(i)
               a1 = a1*(a2 + a3 + .5D0)/a2
            ENDDO
         ENDIF
         a1 = DSQRT(a1)
C COMPUTATION OF LAGUERRE POLYNOMIALS                                   STBF-033
         rr = 0.D0
         DO is = 1, Ism
            rr = rr + H
            x1 = (Va(1)*rr)**2
            x3 = a1*DEXP(.5D0*(a3*DLOG(x1) - x1))
            IF (n.NE.0) THEN
               x2 = x3
               DO i = 1, n
                  a2 = DFLOAT(i)
                  x2 = 2.D0*x2*DFLOAT(i - n - 1)
     &                 *x1/(a2*(2.D0*(a3+a2) + 1.D0))
                  x3 = x3 + x2
               ENDDO
            ENDIF
            V(is) = x3
         ENDDO
         RETURN
      ENDIF
      END
C 01/01/04                                                      ECIS03  DERI-000
      SUBROUTINE DERI(X,Y,H,N,Lt)
C NUMERICAL DERIVATION OF THE FUNCTION Y KNOWN IN N POINTS WITH STEP H  DERI-002
C IT NEEDS AT LEAST 7 POINTS AND RETURNS IN X THE VALUE OF -D(Y)/DR     DERI-003
C IF LT IS FALSE, THE RESULT IS DIVIDED BY R.                           DERI-004
C***********************************************************************DERI-005
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      REAL*8 H
      LOGICAL Lt
      INTEGER N
      REAL*8 X(7), Y(7)
C
C Local variables
C
      REAL*8 hh, r
      INTEGER i, n3
C
C
      n3 = N - 3
      IF (n3.GE.4) THEN
         hh = -H*60.D0
         X(1) = ( - 147.D0*Y(1) + 360.D0*Y(2) - 450.D0*Y(3)
     &          + 400.D0*Y(4) - 225.D0*Y(5) + 72.D0*Y(6) - 10.D0*Y(7))
     &          /hh
         X(2) = ( - 10.D0*Y(1) - 77.D0*Y(2) + 150.D0*Y(3) - 100.D0*Y(4)
     &          + 50.D0*Y(5) - 15.D0*Y(6) + 2.D0*Y(7))/hh
         X(3) = (2.D0*Y(1) - 24.D0*Y(2) - 35.D0*Y(3) + 80.D0*Y(4)
     &          - 30.D0*Y(5) + 8.D0*Y(6) - Y(7))/hh
         DO i = 4, n3
            X(i) = (45.D0*(Y(i+1) - Y(i-1)) - 9.D0*(Y(i+2) - Y(i-2))
     &             + Y(i + 3) - Y(i - 3))/hh
         ENDDO
         X(N - 2) = (Y(N - 6) - 8.D0*Y(N - 5) + 30.D0*Y(N - 4)
     &              - 80.D0*Y(n3) + 35.D0*Y(N - 2) + 24.D0*Y(N - 1)
     &              - 2.D0*Y(N))/hh
         X(N - 1) = ( - 2.D0*Y(N - 6) + 15.D0*Y(N - 5) - 50.D0*Y(N - 4)
     &              + 100.D0*Y(n3) - 150.D0*Y(N - 2) + 77.D0*Y(N - 1)
     &              + 10.D0*Y(N))/hh
         X(N) = (10.D0*Y(N - 6) - 72.D0*Y(N - 5) + 225.D0*Y(N - 4)
     &          - 400.D0*Y(n3) + 450.D0*Y(N - 2) - 360.D0*Y(N - 1)
     &          + 147.D0*Y(N))/hh
         IF (Lt) RETURN
         r = 0.D0
         DO i = 1, N
            r = r + H
            X(i) = X(i)/r
         ENDDO
         RETURN
      ELSE
         WRITE (MW,99005) N
99005    FORMAT (5X,I5,' POINTS INSUFFICIENT FOR DERIVATION IN DERI'//
     &           10X,' ...  STOP  ...')
         STOP
      ENDIF
      END
C 01/01/04                                                      ECIS03  INTP-000
      SUBROUTINE INTP(I,Ism,H,G,Rr,V,Lx)
C INTERPOLATION ROUTINE FOR RADIAL FORM FACTORS                         INTP-002
C INPUT VARIABLES: I:   NUMBER OF POINTS WHERE THE FUNCTION IS GIVEN    INTP-003
C                  ISM: NUMBER OF POINTS WHERE THE FUNCTION IS NEEDED   INTP-004
C                  H:   STEP SIZE                                       INTP-005
C                  G:   NORMALISATION FACTOR                            INTP-006
C                  RR(2,1): RADII (J=1) AND VALUES (J=2) TO INTERPOLATE INTP-007
C                  LX:  ADDRESS OF RESULT IN V                          INTP-008
C OUTPUT VARIABLE: V(I,LX) FOR I=1 TO ISM                               INTP-009
C***********************************************************************INTP-010
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C Dummy arguments
C
      REAL*8 G, H
      INTEGER I, Ism, Lx
      REAL*8 Rr(2,1), V(Ism,1)
C
C Local variables
C
      INTEGER ir, is
      REAL*8 x0, x1, x2, x3, x4
C
C
      IF (I.LT.4) THEN
         DO is = 1, Ism
            V(is,Lx) = 0.D0
         ENDDO
      ELSE
         ir = 1
         DO is = 1, Ism
            x0 = is*H
   20       IF (x0.GE.Rr(1,ir + 2)) THEN
               IF (ir.LT.I - 3) THEN
                  ir = ir + 1
                  GOTO 20
               ENDIF
            ENDIF
            x1 = (x0 - Rr(1,ir + 1))*(x0 - Rr(1,ir + 2))
     &           *(x0 - Rr(1,ir + 3))
     &           /((Rr(1,ir) - Rr(1,ir+1))*(Rr(1,ir) - Rr(1,ir+2))
     &           *(Rr(1,ir) - Rr(1,ir+3)))
            x2 = (x0 - Rr(1,ir))*(x0 - Rr(1,ir + 2))*(x0 - Rr(1,ir + 3))
     &           /((Rr(1,ir+1) - Rr(1,ir))*(Rr(1,ir+1) - Rr(1,ir+2))
     &           *(Rr(1,ir+1) - Rr(1,ir+3)))
            x3 = (x0 - Rr(1,ir))*(x0 - Rr(1,ir + 1))*(x0 - Rr(1,ir + 3))
     &           /((Rr(1,ir+2) - Rr(1,ir))*(Rr(1,ir+2) - Rr(1,ir+1))
     &           *(Rr(1,ir+2) - Rr(1,ir+3)))
            x4 = (x0 - Rr(1,ir))*(x0 - Rr(1,ir + 1))*(x0 - Rr(1,ir + 2))
     &           /((Rr(1,ir+3) - Rr(1,ir))*(Rr(1,ir+3) - Rr(1,ir+1))
     &           *(Rr(1,ir+3) - Rr(1,ir+2)))
            V(is,Lx) = G*(x1*Rr(2,ir) + x2*Rr(2,ir + 1) + x3*Rr(2,ir + 2
     &                 ) + x4*Rr(2,ir + 3))
         ENDDO
         RETURN
      ENDIF
      END
C 01/01/04                                                      ECIS03  FOLD-000
      SUBROUTINE FOLD(V1,V2,Val,Nfo,Ip,Ism,Ist,Aconv,Ivy,Invz,Fr,Pgn,
     &                Xgn,Wv,Izz,Lo)
C V1 ARE THE POTENTIALS AND FORM FACTORS, UNFOLDED AS INPUT, FOLDED AS  FOLD-003
C OUTPUT. V2 ARE WORKING FIELDS IN WHICH 0. ARE STORED BEFORE THE CALL. FOLD-004
C INPUT VARIABLES: VAL(I,J),I=1,3,J=1,NFO  FOLDING PARAMETERS           FOLD-005
C                  NFO:    NUMBER OF SETS OF FOLDING PARAMETERS         FOLD-006
C                  IP:     POTENTIAL TO BE FOLDED IF LO(7)=.FALSE.      FOLD-007
C                  ISM:    NUMBER OF POINTS                             FOLD-008
C                  IST:    MAXIMUM NUMBER OF STEPS FOR FOLDING FUNCTIONSFOLD-009
C                  ACONV:  VALUE BELOW WHICH THE FOLDING IS NEGLECTED   FOLD-010
C                  IVY:    TABLE OF FORM FACTORS (SEE REDM)             FOLD-011
C                  INVZ:   NUMBER OF TRANSITION FORM FACTORS TO FOLD    FOLD-012
C                  PGN,XGN: 20-POINT GAUSS LEGENDRE INTEGRATION         FOLD-013
C                  WV:     MASSES, WAVE NUMBERS, STEP SIZE (SEE CALX)   FOLD-014
C                  LO(I):  LOGICAL CONTROLS (SEE CALC)                  FOLD-015
C IN COMMON /POTE1/  SEE REDM                                           FOLD-016
C WORKING FIELDS:  FR(I,J),I=1,IST: GAUSSIAN OR SAXON FOLDING FUNCTIONS FOLD-017
C          FOR J=1,IMT.  FOR YUKAWA OR HULTHEN FOLDING: H-FUNCTIONS FOR FOLD-018
C          J=1,IMT, J-FUNCTIONS FOR J=IMT+1,2*IMT; THESE FUNCTIONS ARE  FOLD-019
C          MULTIPLIED BY R*R*EXP(+\-R/VA)                               FOLD-020
C          INTEGRALS WITH H AND J-FUNCTIONS FOR J=2*IMT+1,2*IMT+2       FOLD-021
C                  IZZ(I,*) ADDRESS OF FOLDING PARAMETERS BELOW FOR I=1 FOLD-022
C                           TYPE OF FORM FACTOR FROM 1 TO 16 FOR I=2    FOLD-023
C                           ANGULAR MOMENTUM FOR I=3                    FOLD-024
C                           ADDRESS OF STEP SIZE FOR I=4                FOLD-025
C                    (THIS PART IS AN INPUT WITH EXTERNAL FORM FACTORS) FOLD-026
C FOLDING CONVENTIONS : VAL(*,1) REAL POTENTIAL, VAL(*,2) IMAGINARY ONE FOLD-027
C IF VAL(1,*)=0  NO FOLDING                      VAL(*,3) COULOMB       FOLD-028
C IF VAL(3,*)=0 GAUSSIAN FORM FACTOR WITH RANGE VAL(2,*)                FOLD-029
C IF VAL(2,*)=0 HULTHEN FORM FACTOR WITH RANGES VAL(1,*) AND VAL(3,*)   FOLD-030
C IF VAL(2,*)=VAL(3,*)=0 YUKAWA FORM FACTOR WITH RANGE VAL(1,*)         FOLD-031
C ALL OTHER CASES  SAXON FORM FACTOR WITH RADIUS VAL(2,*) AND DIFFUSE-  FOLD-032
C NESS VAL(3,*) - ALL FORM FACTORS ARE NORMALISED - VAL(1,*) IS USED    FOLD-033
C ONLY FOR HULTHEN FORM FACTOR                                          FOLD-034
C THE DIFFUSENESS OF A SAXON FORM FACTOR AND THE RANGES OF A HULTHEN OR FOLD-035
C YUKAWA FORM FACTOR ARE POSITIVE BY TAKING THE ABSOLUTE VALUE          FOLD-036
C***********************************************************************FOLD-037
      IMPLICIT REAL*8(a - h,O - Z)
C
C
C COMMON variables
C
      INTEGER IMAx, INLs, INTc, INVc, INVd, ITX(16), ITXm, MR, MS, MW
      COMMON /INOUT / MR, MW, MS
      COMMON /POTE1 / ITX, IMAx, INTc, INLs, INVc, INVd, ITXm
C
C Dummy arguments
C
      REAL*8 Aconv
      INTEGER Invz, Ip, Ism, Ist, Nfo
      REAL*8 Fr(Ist,2), Pgn(10), V1(Ism,1), V2(Ism,1), Val(3,3),
     &       Wv(18,1), Xgn(10)
      INTEGER Ivy(7,1), Izz(4,1)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 a, a1, a2, a3, a4, a6, ac, an, ay, b1, b2, b3, b4, c1, cn,
     &       dn, e1, e2, em, es, fs, h, p1, pim2, pp, q, r, r1, r2, r3,
     &       r4, r5, r6, rr, u1, u2, va, vr, x1, y
      DOUBLE PRECISION DABS, DEXP, DLOG, DMAX1, DMIN1, DSQRT
      INTEGER i, i1, ic, ih, ii, ij, ik, iml, imt, inl, is, isx, isy,
     &        isz, itxn, ix, j, j1, jh, ji, js, jsl, jsm, jst, jsz, k,
     &        kh, m, mm(3), n, nfot, nfox
      INTEGER IDINT, MAX0, MIN0
C
C
      DATA pim2/6.2831853070D0/
      ac = -DLOG(Aconv)
      jsl = Ism + 1
      itxn = ITXm
      IF (Lo(100)) itxn = itxn - ITX(2)
      IF (.NOT.(Lo(7))) THEN
C INITIALISATION OF THE TABLE IZZ WHEN POTENTIALS ARE NOT EXTERNAL      FOLD-050
         mm(1) = 1
         mm(2) = 2
         mm(3) = 3
         IF ((Val(1,2).EQ.Val(1,1)) .AND. (Val(2,2).EQ.Val(2,1)) .AND.
     &       (Val(3,2).EQ.Val(3,1))) mm(2) = 1
         IF ((Val(1,3).EQ.Val(1,2)) .AND. (Val(2,3).EQ.Val(2,2)) .AND.
     &       (Val(3,3).EQ.Val(3,2))) mm(3) = 2
         IF ((Val(1,3).EQ.Val(1,1)) .AND. (Val(2,3).EQ.Val(2,1)) .AND.
     &       (Val(3,3).EQ.Val(3,1))) mm(3) = 1
         nfox = MAX0(mm(1),mm(2),mm(3))
         DO j = 1, itxn
            DO i = 1, 3
               Izz(i,j) = 0
            ENDDO
            Izz(4,j) = Ip
         ENDDO
         DO i = 1, 8
            IF (.NOT.((i.EQ.5) .AND. Lo(201))) THEN
               IF (.NOT.((i.EQ.6) .AND. Lo(202))) THEN
                  IF (.NOT.((i.EQ.8) .AND. Lo(203))) THEN
                     m = MOD(i + 1,2) + 1
                     IF (i.GT.6) m = 3
                     n = i
                     IF (Lo(200)) n = 1 + ITX(i)
                     Izz(1,n) = -mm(m)
                     Izz(2,n) = i
                  ENDIF
               ENDIF
            ENDIF
         ENDDO
         IF (Invz.NE.0) THEN
            ij = ITX(3) - ITX(7)
            DO j = 1, INTc
               DO i = 1, 8
                  m = MOD(i + 1,2) + 1
                  n = i + ij
                  IF (i.GT.6) THEN
                     IF (Lo(55 + 8*i)) GOTO 10
                     IF (Lo(200)) n = ITX(i + 8) + Ivy(i - 3,j)
                     m = 3
                  ELSEIF (i.GT.4) THEN
                     IF (Lo(108 + i)) GOTO 10
                     IF (Lo(200)) n = Ivy(3,j) + ITX(i + 8)
                  ELSE
                     IF ((m.EQ.2) .AND. Lo(112)) GOTO 10
                     IF (Lo(200)) n = j + ITX(i + 8)
                  ENDIF
                  Izz(1,n) = -mm(m)
                  Izz(2,n) = i + 8
                  Izz(3,n) = Ivy(7,j)
   10          ENDDO
               ij = ij + 11
            ENDDO
         ENDIF
      ENDIF
C CLASSIFICATION OF STEP SIZES                                          FOLD-098
      DO i = 2, itxn
         IF (Izz(1,i).NE.0) THEN
            DO j = 2, i
               IF (Izz(1,j - 1).EQ.Izz(1,i)) THEN
                  IF (Izz(4,j - 1).NE.Izz(4,i)) THEN
                     i1 = Izz(4,i)
                     j1 = Izz(4,j - 1)
                     IF (Wv(11,i1).EQ.Wv(11,j1)) THEN
                        Izz(4,i) = j1
                        GOTO 100
                     ENDIF
                  ENDIF
               ENDIF
            ENDDO
         ENDIF
  100 ENDDO
      nfot = -Nfo
C FOR EXTERNAL POTENTIALS, ADD 1 FOR DUMMY FOLDING                      FOLD-112
      IF (Lo(7)) nfox = Nfo + 1
C LOOP ON FOLDINGS                                                      FOLD-114
      DO ii = 1, nfox
         IF (ii.GT.Nfo) THEN
C TRANSFER OF POTENTIALS FROM WORKING SPACE                             FOLD-370
            nfot = 1
            GOTO 600
         ELSE
            ic = 0
            DO j = 1, 3
               IF (Val(j,ii).NE.0.D0) ic = ic + 2**(3 - j)
               IF (Val(j,ii).LT.0.D0) THEN
                  WRITE (MW,99005) Val(j,ii), j, ii
99005             FORMAT (' NEGATIVE VALUE',D15.5,4X,
     &                    'OF FOLDING PARAMETER VAL(',I3,',',I3,')')
                  Val(j,ii) = -Val(j,ii)
               ENDIF
            ENDDO
            IF (ic.LT.4) GOTO 700
            ih = 0
         ENDIF
  150    imt = 1
         jh = 0
         kh = 0
C SEPARATION OF FOLDINGS WITH RESPECT TO THE STEP SIZE                  FOLD-129
         DO j = 1, itxn
            IF (Izz(1,j) + ii.EQ.0) THEN
               IF (Izz(4,j).GE.ih) THEN
                  kh = kh + 1
                  IF ((jh.EQ.0) .OR. (Izz(4,j).LE.ih)) THEN
                     jh = jh + 1
                     ih = Izz(4,j)
                     Izz(1,j) = nfot - 1
                     imt = MAX0(imt,Izz(3,j) + 1)
                  ENDIF
               ENDIF
            ENDIF
         ENDDO
         IF (jh.EQ.0) GOTO 700
         nfot = nfot - 1
         h = Wv(11,ih)
C COMPUTATION OF THE STRENGTH OF THE FOLDING FUNCTIONS                  FOLD-143
         cn = 1.D0
         IF (ic.LE.5) THEN
C YUKAWA FOLDING                                                        FOLD-146
            IF (Val(3,ii).EQ.Val(1,ii)) Val(3,ii) = .99D0*Val(1,ii)
            cn = h/(2.D0*pim2*(Val(1,ii)**2 - Val(3,ii)**2))
            jst = Ism + 5
         ELSEIF (ic.EQ.7) THEN
C SAXON FOLDING                                                         FOLD-156
            is = 1 + IDINT((Val(2,ii) + 10.D0*Val(3,ii))/h)
            isy = 1 + IDINT((Val(2,ii) + 2.D0*Val(3,ii)*ac)/h)
            cn = 0.D0
            DO k = 1, is
               rr = h*k
               cn = cn + rr*rr/(1.D0 + DEXP((rr-Val(2,ii))/Val(3,ii)))
            ENDDO
            cn = .5D0/(pim2*cn)
         ELSE
C GAUSSIAN FOLDING                                                      FOLD-152
            isy = 1 + IDINT(Val(2,ii)*DSQRT(ac)/h)
            cn = h/(0.5D0*pim2*DSQRT(0.5D0*pim2)*Val(2,ii)**3)
         ENDIF
C GAUSSIAN OR SAXON FOLDING                                             FOLD-164
         an = DFLOAT(imt - 1)
         IF (ic.LT.6) THEN
C LOOP ON THE TWO YUKAWA FORM FACTORS                                   FOLD-286
            fs = 1.D0
            va = Val(1,ii)
            GOTO 400
         ELSE
C DO LOOP ON THE POINTS OF POTENTIALS                                   FOLD-167
            fs = 0.D0
            is = 0
         ENDIF
  200    is = is + 1
         jst = is + isy
         jsm = MIN0(Ism,jst)
         r = Val(2,ii)
         a = Val(3,ii)
         x1 = h*DFLOAT(is)
         IF (jst.GT.Ism) THEN
            jsz = MAX0(Ism,1 + is + 2*IDINT((r+2.D0*a)/h))
            jst = MIN0(jst,jsz + 4)
            isz = jsz - 1
            isx = jst - jsz
         ENDIF
C LOOP ON THE POINTS OF THE FOLDING FUNCTION FOR WHICH THE SYMMETRY     FOLD-181
C BETWEEN THE TWO ARGUMENTS IS USED                                     FOLD-182
         ji = is - 1
  250    ji = ji + 1
         a3 = h*ji
         a4 = 2.D0*x1*a3
         y = x1*x1 + a3*a3
         IF (a.EQ.0.D0) THEN
C GAUSSIAN FOLDING FUNCTION                                             FOLD-227
            a4 = a4/(r*r)
            y = y/(r*r)
            b1 = DEXP(a4 - y)
            b2 = 0.D0
            IF (a4 + y.LT.50.) b2 = DEXP( - a4 - y)
            dn = 1.D0/a4
         ELSE
C SAXON FOLDING FUNCTION  BY A 20-POINTS GAUSSIAN INTEGRATION           FOLD-189
C THE SAXON FORM FACTOR ITSELF IS THE VARIABLE                          FOLD-190
            DO k = 1, imt
               Fr(ji,k) = 0.D0
            ENDDO
            r1 = DMIN1(70.D0,(DABS(x1-a3) - r)/a)
            r2 = DMIN1(70.D0,(x1 + a3 - r)/a)
            e1 = 1.D0/(1.D0 + DEXP(r1))
            e2 = 1.D0/(1.D0 + DEXP(r2))
            em = 0.5D0*(e1 + e2)
            es = 0.5D0*(e1 - e2)
            p1 = es*2.D0*a*pim2/a4
            DO ij = 1, 10
               pp = p1*Pgn(ij)
               e1 = 1.D0/(em + es*Xgn(ij)) - 1.D0
               e2 = 1.D0/(em - es*Xgn(ij)) - 1.D0
               u1 = r + a*DLOG(e1)
               u2 = r + a*DLOG(e2)
               r1 = pp*u1*(1.D0 + e1)/e1
               r2 = pp*u2*(1.D0 + e2)/e2
               Fr(ji,1) = Fr(ji,1) + r1 + r2
               IF (imt.NE.1) THEN
                  e1 = (y - u1*u1)/a4
                  e2 = (y - u2*u2)/a4
                  r3 = r1*e1
                  r4 = r2*e2
                  Fr(ji,2) = Fr(ji,2) + r3 + r4
                  IF (imt.NE.2) THEN
C RECURRENCE FOR LEGENDRE POLYNOMIALS                                   FOLD-216
                     DO k = 3, imt
                        r5 = r1
                        r6 = r2
                        r1 = r3
                        r2 = r4
                        r3 = (DFLOAT(2*k - 3)*r1*e1 - r5*DFLOAT(k - 2))
     &                       /DFLOAT(k - 1)
                        r4 = (DFLOAT(2*k - 3)*r2*e2 - r6*DFLOAT(k - 2))
     &                       /DFLOAT(k - 1)
                        Fr(ji,k) = Fr(ji,k) + r3 + r4
                     ENDDO
                  ENDIF
               ENDIF
            ENDDO
            GOTO 350
         ENDIF
  300    Fr(ji,1) = pim2*(b1 - b2)*dn
         IF (imt.NE.1) THEN
C DOWNWARDS RECURRENCE FOR SMALL ARGUMENTS                              FOLD-236
            q = DMAX1(DSQRT(10.5D0*a4) - 0.5D0,an)
            k = IDINT(q + 3.D0 + 21.D0*a4/(q + q + 1.D0))
            a1 = 0.D0
  320       a1 = a4/(2.D0*k + 1.D0 + a4*a1)
            IF (k.LT.imt) Fr(ji,k + 1) = a1
            k = k - 1
            IF (k.GT.0) GOTO 320
            DO k = 2, imt
               Fr(ji,k) = Fr(ji,k)*Fr(ji,k - 1)
            ENDDO
         ENDIF
  350    IF (ic.LT.6) THEN
C UPWARDS RECURRENCE FOR THE IRREGULAR FUNCTION                         FOLD-302
            Fr(ji,imt + 2) = Fr(ji,imt + 1)*(1.D0 + 1.D0/a4)
            IF (imt.NE.2) THEN
               DO k = 3, imt
                  Fr(ji,k + imt) = Fr(ji,k - 2 + imt)
     &                             + Fr(ji,k - 1 + imt)*(2*k - 3)/a4
               ENDDO
            ENDIF
            IF (ji.LT.jst) GOTO 450
C CORRECTIONS FOR SINGULAR FIRST DERIVATIVE (YUKAWA FORM FACTOR)        FOLD-308
            vr = -fs*h*pim2/6.D0
            ik = 1
            GOTO 500
         ELSE
            IF (ji.LT.jst) GOTO 250
            ik = 1
            GOTO 500
         ENDIF
  400    IF (va.EQ.0.D0) GOTO 550
C COMPUTATION OF BESSEL FUNCTIONS MULTIPLIED BY R*R AND EXP(R/VA)       FOLD-290
         ji = 0
         b1 = 1.D0
         b2 = 1.D0
         b4 = DEXP( - h/va)
  450    ji = ji + 1
         a2 = h*DFLOAT(ji)
         a4 = a2/va
         b2 = b2*b4**2
         Fr(ji,imt + 1) = fs*a2
         dn = a2*va
         GOTO 300
C FOLDING OF THE POTENTIALS                                             FOLD-334
  500    DO k = 1, itxn
            IF (Izz(1,k).EQ.nfot) THEN
               IF ((ik.NE.1) .OR. MOD(Izz(2,k),8).LE.6) THEN
                  IF ((ik.NE.2) .OR. MOD(Izz(2,k),8).GT.6) THEN
                     n = Izz(3,k) + 1
                     IF (ic.LT.6) THEN
                        b2 = 0.D0
                        b3 = Fr(jsl,n + imt)*V1(Ism,k)
                        DO is = 1, Ism
                           js = jsl - is
                           Fr(js,2*imt + 1) = b3*b4
                           b2 = b2*b4 + Fr(is,n)*V1(is,k)
                           b3 = b3*b4 + Fr(js,n + imt)*V1(js,k)
                           Fr(is,2*imt + 2) = b2
                        ENDDO
                        DO is = 1, Ism
                           rr = (is*h)**2
                           V2(is,k) = V2(is,k)
     &                                + (Fr(is,n)*Fr(is,2*imt + 1)
     &                                + Fr(is,n + imt)*Fr(is,2*imt + 2))
     &                                /rr + V1(is,k)*vr
                        ENDDO
                     ELSE
                        DO js = is, jsm
                           b1 = (h*DFLOAT(js))**2
                           IF (js.NE.is) V2(js,k) = V2(js,k) + V1(is,k)
     &                         *Fr(js,n)*x1**2
                           V2(is,k) = V2(is,k) + V1(js,k)*Fr(js,n)*b1
                        ENDDO
                        IF ((ik.EQ.2) .AND. (jst.GT.Ism)) V2(is,k)
     &                      = V2(is,k) + V1(Ism,k)*Fr(jsl,n)
                     ENDIF
                  ENDIF
               ENDIF
            ENDIF
         ENDDO
         IF (ic.GE.6) THEN
            IF (ik.EQ.1) THEN
               ik = 2
               IF (jst.GT.Ism) THEN
C FORM THE COULOMB POTENTIALS,ASYMPTOTIC CORRECTION                     FOLD-252
C THE FORM FACTORS ARE ASSUMED TO DECREASE AS (R)**(-L-1)               FOLD-253
                  a1 = DFLOAT(Ism)
                  DO i = jsl, jst
                     y = a1/DFLOAT(i)
                     a4 = DFLOAT(Ism*i)*h**2
                     DO j = 1, imt
                        Fr(i,j) = Fr(i,j)*a4
                        a4 = a4*y
                     ENDDO
                  ENDDO
C CORRECTION OF THE LAST VALUE BY SUM BETWEEN ISM AND JSZ AND A PADE    FOLD-262
C APPROXIMATION LIMITED TO FOUR TERMS (BETWEEN JSZ+1 AND JST)           FOLD-263
                  DO i = 1, imt
                     a1 = 0.D0
                     a2 = 0.D0
                     a3 = 0.D0
                     a4 = 0.D0
                     y = 0.D0
                     IF (jsl.LE.isz) THEN
                        DO j = jsl, isz
                           y = y + Fr(j,i)
                        ENDDO
                     ENDIF
                     IF (isx.NE.0 .AND. Fr(jsz,i).NE.0.D0) THEN
                        a1 = -Fr(jsz + 1,i)/Fr(jsz,i)
                        IF (isx.NE.1 .AND. Fr(jsz + 1,i).NE.0.D0) THEN
                           b1 = Fr(jsz + 2,i)/Fr(jsz + 1,i)
                           a2 = -a1 - b1
                           IF (isx.NE.2 .AND. a2.NE.0.D0) THEN
                              b2 = Fr(jsz + 3,i)/Fr(jsz + 1,i)
                              c1 = -(b1*a1 + b2)/a2
                              a3 = b1 - c1
                              IF (isx.NE.3 .AND. a3.NE.0.) a4 = c1 -
     &                            (b2 + (b2*a1 + Fr(jsz+4,i)/Fr(jsz+1,i)
     &                            )/a2)/a3
                           ENDIF
                        ENDIF
                     ENDIF
                     Fr(jsl,i) = y + Fr(jsz,i)
     &                           /(1.D0 + a1/(1.D0 + a2/(1.D0+
     &                           a3/(1.D0+a4))))
                  ENDDO
               ENDIF
               GOTO 500
            ELSEIF (is.LT.Ism) THEN
               GOTO 200
            ENDIF
         ENDIF
         IF (ik.EQ.1) THEN
C CORRECTION FOR COULOMB POTENTIALS                                     FOLD-312
            a6 = DFLOAT(Ism)
            DO i = jsl, jst
               y = a6/DFLOAT(i)
               a1 = y
               DO j = 1, imt
                  Fr(i,j + imt) = Fr(i,j + imt)*a1
                  a1 = a1*y
               ENDDO
            ENDDO
C ESTIMATION OF THE LAST VALUE BY A PADE OF FOUR TERMS                  FOLD-321
            DO i = 1, imt
               a6 = -Fr(jsl + 1,i + imt)/Fr(jsl,i + imt)
               IF (i.NE.1) THEN
                  b2 = Fr(jsl + 2,i + imt)/Fr(jsl + 1,i + imt)
                  a2 = -a6 - b2
                  b3 = Fr(jsl + 3,i + imt)/Fr(jsl + 1,i + imt)
                  c1 = -(b2*a6 + b3)/a2
                  a4 = b2 - c1
                  a1 = c1 -
     &                 (b3 + (b3*a6 + Fr(jsl+4,i+imt)/Fr(jsl+1,i+imt))
     &                 /a2)/a4
                  a6 = a6/(1.D0 + b4*a2/(1.D0 + b4*a4/(1.D0+b4*a1)))
               ENDIF
               Fr(jsl,i + imt) = Fr(jsl,i + imt)/(1.D0 + b4*a6)
            ENDDO
            ik = 2
            GOTO 500
         ENDIF
  550    fs = -fs
         IF (fs.LT.0.D0) THEN
            va = Val(3,ii)
            GOTO 400
         ENDIF
  600    DO j = 1, itxn
            IF (Izz(1,j).EQ.nfot) THEN
               IF (nfot.EQ.1) THEN
C STEP SIZE FOR DUMMY FOLDING                                           FOLD-378
                  ih = Izz(4,j)
                  h = Wv(11,ih)
               ELSE
                  DO is = 1, Ism
                     V1(is,j) = cn*V2(is,j)
                  ENDDO
               ENDIF
               IF (Lo(200) .OR. (Izz(2,j).GT.8)) THEN
                  ix = MOD(Izz(2,j) - 1,8) + 1
                  IF ((ix.GE.5) .AND. (ix.NE.7)) THEN
                     iml = 0
                     inl = 0
                     IF (Lo(100)) THEN
                        IF (Izz(2,j).LE.8) GOTO 650
                        iml = 4
                        IF (ix.EQ.8) iml = 3
                     ELSEIF (Izz(2,j).GT.8) THEN
                        inl = INLs
                        IF (ix.EQ.8) inl = INVd
                     ENDIF
                     CALL DERI(V2(1,j),V1(1,j),h,Ism,Lo(100))
                     DO is = 1, Ism
                        IF (inl.NE.0) THEN
                           ay = DFLOAT(is)*h
                           V1(is,j + inl) = -V1(is,j)/ay**2
                        ENDIF
                        V1(is,j + iml) = V2(is,j)
                     ENDDO
                  ENDIF
               ELSE
                  CALL DERI(V1(1,j + 8),V1(1,j),h,Ism,.TRUE.)
                  CALL DERI(V1(1,j + 16),V1(1,j + 8),h,Ism,.TRUE.)
               ENDIF
            ENDIF
  650    ENDDO
         IF (kh.NE.jh .AND. nfot.NE.1) GOTO 150
  700 ENDDO
      RETURN
      END
C 01/01/04                                                      ECIS03  TLNC-000
      SUBROUTINE TLNC(Hh,Ipix,Wvx,Tl,Ism,X,Ff,Lm,Nn,Dd,Il,V,Vco,Lo)
C TRANSMISSION COEFFICIENTS OF UNCOUPLED STATES FOR COMPOUND NUCLEUS    TLNC-002
C INPUT VARIABLES: HH:        STEP SIZE FOR THE GROUND STATE            TLNC-003
C                  IPIX,WVX:  IPI AND WV FOR THIS STATE (SEE CALX)      TLNC-004
C                  ISM:       NUMBER OF STEPS                           TLNC-005
C                  LM:        NUMBER OF COULOMB FUNCTIONS NEEDED        TLNC-006
C                  IL:        LENGTH OF WORKING SPACE                   TLNC-007
C                  V:         POTENTIALS REAL AND IMAGINARY             TLNC-008
C                  VCO:       STRENGTH OF LONG RANGE COULOMB CORRECTION TLNC-009
C                  LO:        LOGICAL CONTROLS                          TLNC-010
C OUTPUT VARIABLES:TL:     TRANSMISSION COEFFICIENTS OF UNCOUPLED LEVELSTLNC-011
C WORKING SPACE:   X:      FOR THE INTEGRATION                          TLNC-012
C                  FF:     FOR COULOMB FUNCTIONS AND CORRECTIONS        TLNC-013
C                  NN:     NEEDED BY SUBROUTINE FCOU                    TLNC-014
C                  DD:     NEEDED BY SUBROUTINE CORI                    TLNC-015
C***********************************************************************TLNC-016
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C Dummy arguments
C
      REAL*8 Hh
      INTEGER Il, Ism, Lm
      REAL*8 Dd(200), Ff(Lm,6), Tl(1), V(Ism,4), Vco(2), Wvx(18), X(2,2)
      INTEGER Ipix(10), Nn(1)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 a1, a2, a3, a4, av(5), b(4), b1, b2, c1, c2, d1, d2, f2,
     &       f3, fam(7), g(4)
      DOUBLE PRECISION DABS, DMAX1, DSQRT
      INTEGER i, ij, is, j, jc, jj, jl, js, k, l, l1, lj
C
C
      IF (Wvx(3).LE.0.D0) RETURN
      j = 1
      CALL FCOU(Ipix(10),Wvx(5),Ism*Wvx(11)*Wvx(9),Ff,Ff(1,2),Ff(1,3),
     &          Ff(1,4),Nn,Ff(1,5))
      jc = 0
      IF (.NOT.(Lo(203) .AND. Lo(144))) THEN
         jc = 5
         CALL CORI(Wvx(5),Wvx(5),Wvx(9),Wvx(9),Ism*Wvx(11),Dd,Ff(1,5),
     &             Ff(1,5),Ff,Ff,Dd(200),Lm,Lm,Il,Lm,Ff(1,6))
      ENDIF
      l = Ipix(10) + 1
      IF (l.LE.0) RETURN
      ij = Ipix(2)
      DO lj = 1, l
         DO jl = 1, ij
            jj = 2*(lj + jl) - ij - 3
            j = j + 1
            Tl(j) = 0.D0
            IF (jj.GE.ij + 1 - 2*lj) THEN
               l1 = lj - 1
               fam(5) = DFLOAT(lj*(lj - 1))
               fam(6) = .25D0*DFLOAT(jj*(jj + 2) - ij*ij + 1) - fam(5)
C VALUES OF LONG RANGE TAILS OF CENTRAL POTENTIALS                      TLNC-042
               f2 = Vco(1)**2
               f3 = Vco(2)*fam(6)
               IF (Wvx(3).LE.0.D0 .OR. jc.LE.0) THEN
                  f2 = 0.D0
                  f3 = 0.D0
               ENDIF
C INTEGRATION REGION - SET UP OF POTENTIAL IN FIVE POINTS FOR           TLNC-048
C TRANSFORMATION OF MATCHING VALUES                                     TLNC-049
               b1 = Hh*Hh/48.D0
               c1 = DFLOAT(Ism - 1)*Hh
               a1 = Wvx(9)**2
               IF (Wvx(3).LT.0.D0) a1 = -a1
               DO k = 1, 5
                  av(k) = b1*(2.D0*Wvx(9)*Wvx(5)/c1 - a1 + (fam(5) - f2
     &                    - f3/c1)/c1**2)
                  c1 = c1 + 0.5D0*Hh
               ENDDO
C COMPUTATION OF COULOMB CORRECTIONS                                    TLNC-057
               DO k = 1, 4
                  b(k) = Ff(l1 + 1,k)
               ENDDO
               IF (jc.GT.0) THEN
                  IF (Wvx(5).EQ.0.D0) THEN
                     f2 = f3*Wvx(9)
                     f3 = 0.D0
                  ENDIF
                  DO k = 1, 4
                     g(k) = -Ff(l1 + 1,k + jc)*f2
                  ENDDO
                  IF (f3.NE.0.D0) THEN
                     b1 = 2.D0*Wvx(5)*DFLOAT(l1*(l1 + 1))
                     b2 = DFLOAT(l1 + 1)**2 + Wvx(5)**2
                     c1 = -(DFLOAT(2*l1 + 1)*b2 + 2*Wvx(5)**2)/b1
                     c2 = DFLOAT(2*l1 + 3)*b2/b1
                     a1 = DFLOAT(Ism)*Wvx(11)*Wvx(9)
                     d1 = (b2 + DFLOAT(l1 + 1)*Wvx(5)/a1)/a1/b1
                     d2 = -Wvx(5)*DSQRT(b2)/b1/a1
                     a1 = b2/b1/a1
                     a3 = f3*Wvx(9)
                     g(1) = g(1)
     &                      - a3*(c1*Ff(l1 + 1,1 + jc) + c2*Ff(l1 + 2,
     &                      1 + jc) - d1*Ff(l1 + 1,1)
     &                      **2 - d2*2.D0*Ff(l1 + 1,1)*Ff(l1 + 2,1)
     &                      - a1*Ff(l1 + 2,1)**2)
                     g(2) = g(2)
     &                      - a3*(c1*Ff(l1 + 1,2 + jc) + c2*Ff(l1 + 2,
     &                      2 + jc) - d1*Ff(l1 + 1,1)*Ff(l1 + 1,3)
     &                      - d2*(Ff(l1+1,1)*Ff(l1+2,3) + Ff(l1+2,1)
     &                      *Ff(l1+1,3)) - a1*Ff(l1 + 2,1)*Ff(l1 + 2,3))
                     g(4) = g(4)
     &                      - a3*(c1*Ff(l1 + 1,4 + jc) + c2*Ff(l1 + 2,
     &                      4 + jc) - d1*Ff(l1 + 1,3)
     &                      **2 - d2*2.D0*Ff(l1 + 1,3)*Ff(l1 + 2,3)
     &                      - a1*Ff(l1 + 2,3)**2)
                  ENDIF
                  a4 = 1.D0 + (g(1)*g(4) - g(2)**2)
                  g(3) = b(1)
                  b(1) = (b(1)*(1.D0 - g(2)) + g(1)*b(3))/a4
                  b(3) = ( - g(3)*g(4) + (1.D0 + g(2))*b(3))/a4
                  g(3) = b(2)
                  b(2) = (b(2)*(1.D0 - g(2)) + g(1)*b(4))/a4
                  b(4) = ( - g(3)*g(4) + (1.D0 + g(2))*b(4))/a4
               ENDIF
               a1 = (1.D0 - av(2))/(2.D0 + 10.D0*av(2))
               b1 = (1.D0 - av(4))/(2.D0 + 10.D0*av(4))
               a2 = a1*(1.D0 - av(1))/(1.D0 - 4.D0*av(1))
               b2 = b1*(1.D0 - av(5))/(1.D0 - 4.D0*av(5))
               c1 = (2.D0 + 10.D0*av(3)) - (1.D0 - av(3))*(a1 + b1)
               a1 = (16.D0 - 144.D0*av(2))/(2.D0 + 10.D0*av(2))
               b1 = (16.D0 - 144.D0*av(4))/(2.D0 + 10.D0*av(4))
               c2 = (7.D0 + a1*(1.D0 - av(1)))/(1.D0 - 4.D0*av(1))
               d2 = (7.D0 + b1*(1.D0 - av(5)))/(1.D0 - 4.D0*av(5))
               d1 = (b1 - a1)*(1.D0 - av(3))
               a1 = a2*d2 + b2*c2
               b1 = (c1*d2 + d1*b2)/a1
               b2 = 30.D0*Hh*b2*Wvx(9)/a1
               fam(1) = b1*b(1) - b2*b(2)
               fam(3) = b1*b(3) - b2*b(4)
               b1 = (c2*c1 - a2*d1)/a1
               a2 = -30.D0*Hh*a2*Wvx(9)/a1
               fam(2) = b1*b(1) - a2*b(2)
               fam(4) = b1*b(3) - a2*b(4)
               fam(7) = Wvx(8)**2
               fam(6) = 2.D0*fam(7)*fam(6)
C COMPUTATION OF THE REGULAR SOLUTION                                   TLNC-111
               DO is = 1, Ism
                  a1 = is*is
                  X(1,is + 2) = Wvx(10) - fam(5)/a1 + fam(7)*V(is,1)
                  X(2,is + 2) = fam(7)*V(is,2)
                  IF (Lo(229)) X(1,is + 2) = X(1,is + 2) + fam(6)
     &                *V(is,3)
                  IF (Lo(230)) X(2,is + 2) = X(2,is + 2) + fam(6)
     &                *V(is,4)
               ENDDO
               IF (Lo(27)) THEN
C NUMEROV METHOD                                                        TLNC-127
                  DO is = 1, Ism
                     a2 = (12.D0 + X(1,is + 2))**2 + X(2,is + 2)**2
                     a1 = 12.D0*(X(1,is + 2)*(12.D0 + X(1,is+2))
     &                    + X(2,is + 2)**2)/a2
                     IF (Lo(26)) a1 = a1*(1.D0 + X(1,is + 2)**2*
     &                                .416666666666667D-2)
                     X(1,is + 2) = a1
                     X(2,is + 2) = 144.D0*X(2,is + 2)/a2
                  ENDDO
               ELSE
C MODIFIED NUMEROV METHOD                                               TLNC-120
                  DO is = 1, Ism
                     a1 = X(1,is + 2)**2 - X(2,is + 2)**2
                     IF (Lo(26)) a1 = a1*(1.D0 - X(1,is + 2)*
     &                                .033333333333333D0)
                     X(2,is + 2) = X(2,is + 2)*(1.D0 - X(1,is + 2)*
     &                             .166666666666667D0)
                     X(1,is + 2) = X(1,is + 2) - a1*.083333333333333D0
                  ENDDO
               ENDIF
               X(1,1) = 0.D0
               X(2,1) = 0.D0
               X(1,2) = 1.D-15
               X(2,2) = 0.D0
               DO is = 1, Ism
                  b1 = X(1,is + 1)*X(1,is + 2) - X(2,is + 1)*X(2,is + 2)
                  b2 = X(2,is + 1)*X(1,is + 2) + X(1,is + 1)*X(2,is + 2)
                  X(1,is + 2) = X(1,is + 1) + X(1,is + 1) - X(1,is) - b1
                  X(2,is + 2) = X(2,is + 1) + X(2,is + 1) - X(2,is) - b2
                  IF (DABS(X(1,is+2)).GE.1.D15) THEN
C RENORMALISATION OF LARGE FUNCTION VALUES                              TLNC-144
                     js = 2*is + 4
                     DO i = 3, js
                        X(i,1) = X(i,1)*1.D-30
                     ENDDO
                  ENDIF
               ENDDO
C END OF INTEGRATION                                                    TLNC-149
C MATCHING                                                              TLNC-150
               a1 = X(1,Ism)*fam(4) - fam(3)*X(1,Ism + 2)
               a2 = X(2,Ism)*fam(4) - fam(3)*X(2,Ism + 2)
               b1 = X(1,Ism)*fam(2) - fam(1)*X(1,Ism + 2)
               b2 = X(2,Ism)*fam(2) - fam(1)*X(2,Ism + 2)
               a2 = a2 + b1
               a1 = a1 - b2
               a3 = a1*a1 + a2*a2
               a1 = -a1/a3
               a2 = a2/a3
               fam(7) = a1*b1 - a2*b2
               fam(6) = b1*a2 + b2*a1
               Tl(j) = DMAX1(0.D0,4.D0*(fam(6) - fam(7)**2 - fam(6)**2))
            ENDIF
         ENDDO
      ENDDO
      END
C 01/01/04                                                      ECIS03  QUAN-000
      SUBROUTINE QUAN(Ncoll,Wv,Ipi,Niv,Iq,Tq,Ivq,Ivz,Mc,Nat,At,It,Nvi,
     &                Kab,Kbc,Aa,Fac,Nfa,Nmax,Id,Lo)
C INPUT VARIABLES: NCOLL:   NUMBER OF COUPLED NUCLEAR STATES            QUAN-003
C                  WV:      SEE CALX                                    QUAN-004
C                  IPI:     PROJECTILE AND TARGET MULTIPLICITY, PARITY  QUAN-005
C                           AND MAXIMUM ANGULAR MOMENTUM.  SEE CALX     QUAN-006
C                  NIV(I1,I2,1/2): FIRST/LAST ADDRESS IN THE TABLE OF   QUAN-007
C                           REDUCED NUCLEAR MATRIX ELEMENTS. SEE REDM   QUAN-008
C                  IQ,TQ:   TABLE OF REDUCED NUCLEAR MATRIX ELEMENTS    QUAN-009
C                  IVQ(I):  TABLE OF MULTIPOLES.   SEE REDM             QUAN-010
C                  IVZ(I):  TABLE OF FORM FACTORS.   SEE REDM           QUAN-011
C                  KAB:     MAXIMUM NUMBER OF COUPLED CHANNELS          QUAN-012
C                  KBC:     MAXIMUM NUMBER OF SOLUTIONS                 QUAN-013
C                  FAC:     TABLE OF LOGARITHMS OF FACTORIALS           QUAN-014
C                  NFA:     LENGTH OF FAC                               QUAN-015
C                  NMAX:  AVAILABLE LENGTH OF AT/NAT(LESS 100 FOR 9J)   QUAN-016
C                  ID:      FIRST DIMENSION OF TABLES NAT AND AT        QUAN-017
C                  LO(I):   LOGICAL CONTROLS. SEE COMMENTS IN CALC      QUAN-018
C IN COMMON /NCOMP/  PARAMETRISATION OF THE DEFORMED SPIN-ORBIT         QUAN-019
C IN COMMON /POTE2/ITY(5):  NUMBER OF DIAGONAL POTENTIALS               QUAN-020
C                  INTV:    NUMBER OF NON SPIN-ORBIT FORM FACTORS       QUAN-021
C                  INSL:    NUMBER OF SPIN-ORBIT FORM FACTORS           QUAN-022
C IN COMMON /NOEQU/JPI:     CHANNEL PARITY (0/1)                        QUAN-023
C                  NAJ:     TWICE CHANNEL SPIN                          QUAN-024
C OUTPUT VARIABLES:MC(IC,1): NUCLEAR STATE NUMBERS, IC = 1,NC           QUAN-025
C                  MC(IC,2): ORBITAL MOMENTUM                           QUAN-026
C                  MC(IC,3): TWICE ORBITAL SPIN                         QUAN-027
C                  MC(IC,4): REFERENCE TO POTENTIAL OR COPY             QUAN-028
C                  MC(IC,5): LC*(LC+1)                                  QUAN-029
C                  MC(IC,6): EIGENVALUE OF L.S                          QUAN-030
C                  AT(ID,I),NAT(ID,I) IN EQUIVALENCE BY CALL            QUAN-031
C                       TABLE OF COUPLING COEFFICIENTS FOR I=1,IT       QUAN-032
C                    NAT(1,I)  ADDRESS OF THE FORM FACTOR, NEGATIVE FOR QUAN-033
C                        A COMPLEX TERM                                 QUAN-034
C                    AT(2,I)  GEOMETRICAL COEFFICIENT                   QUAN-035
C                    AT(3,I)  IDEM FOR SMALL COMPONENTS (DIRAC EQUATION)QUAN-036
C                  IT: NUMBER OF NON ZERO COUPLING COEFFICIENTS         QUAN-037
C                  NVI(I1,I2,1-3): ADDRESS IN THE TABLE AT(I), ANALOGOUSQUAN-038
C                    TO THE NIV ADDRESSES: NVI(I1,I2,1) TO NVI(I1,I2,2) QUAN-039
C                    FOR THE NON DERIVATIVES COUPLINGS, NVI(I1,I2,2)+1  QUAN-040
C                    TO NVI(I1,I2,3)  FOR THE DERIVATIVE COUPLINGS      QUAN-041
C FOR IDENTICAL PARTICLE AND TARGET, MC RESULTS ARE IN MC(*,*+7)        QUAN-042
C    NAT AND AT RESULTS ARE AFTER THE USUAL ONES, NVI RESULTS ARE IN    QUAN-043
C    NVI(*,*,*+3), NC AND NCIN ARE DIFFERENT FROM NIC AND NCI.          QUAN-044
C    THE COEFFICIENTS OF THE SYMMETRISATION ARE IN AA.                  QUAN-045
C IN COMMON /NOEQU/NIC:  NUMBER OF EQUATIONS AT THE CHANNEL SPIN        QUAN-046
C                  NCI:  NUMBER OF SOLUTIONS                            QUAN-047
C                  NC:   NUMBER OF EQUATIONS FOR IDENTICAL PARTICLES    QUAN-048
C                  NCIN: NUMBER OF SOLUTIONS FOR IDENTICAL PARTICLES    QUAN-049
C                  NIN:  NUMBER OF COUPLING POTENTIALS                  QUAN-050
C WORKING SPACE:   AT(I,J):  FOR J>IT, WORKING SPACE FOR DJ9J           QUAN-051
C***********************************************************************QUAN-052
      IMPLICIT REAL*8(a - H,O - Z)
C
C
C COMMON variables
C
      REAL*8 ACN(2), AZ1, AZ2, AZ3, AZ4, AZ5, AZ6, BZ(12), R1(2)
      INTEGER INSl, INTv, INVt, IPJ, ITY(8), JPI, MR, MS, MW, NAJ, NC,
     &        NCI, NCIn, NCXn, NIC, NIN, NPX, NSP(12)
      COMMON /INOUT / MR, MW, MS
      COMMON /NCOMP / NSP, ACN, AZ1, AZ2, AZ3, AZ4, AZ5, AZ6, BZ
      COMMON /NOEQU / NCXn, NIC, NCI, NC, NCIn, NIN, JPI, IPJ, R1, NAJ
      COMMON /POTE2 / ITY, INVt, INTv, INSl, NPX
C
C Dummy arguments
C
      INTEGER Id, It, Kab, Kbc, Ncoll, Nfa, Nmax
      REAL*8 Aa(Kbc,1), At(Id,4), Fac(1), Tq(3,1), Wv(18,1)
      INTEGER Ipi(11,*), Iq(6,1), Ivq(3,1), Ivz(4,1), Mc(Kab,12),
     &        Nat(2*Id,4), Niv(Ncoll,Ncoll,3), Nvi(Kab,Kab,6)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 a, a1, a2, aj, aspi, azi, cmatel, cx, f1, f2, f3, fx, g1,
     &       g2, sj, smatel
      DOUBLE PRECISION DABS, DSQRT
      REAL*8 DCGS, DJ6J, DJ9J
      INTEGER i, i1, i2, iai, iaip, ib, ibb, iij, iiq, iis, ij, il, ilp,
     &        invz, is, isi, isj, isjp, isp, it1, it2, iti, ix, j, j1,
     &        j2, ja, k, k1, k2, kk, l, l1, l2, lm, lp, m, m1, m2, n,
     &        ni, nj, nj1, nj2, nl, nmi, nmr, nsb, nsm
      INTEGER IABS
      CHARACTER*1 ip(2)
      LOGICAL llo
C
C
      DATA ip/'+', '-'/
C FIND QUANTUM NUMBER OF COUPLED CHANNELS                               QUAN-064
      NC = 0
      aj = .5D0*DFLOAT(NAJ)
      DO i = 1, Ncoll
         nj1 = NAJ - Ipi(3,i) + 1
         nj2 = IABS(nj1)
         nj = Ipi(3,i)
         nl = Ipi(2,i)
         DO j = 1, nj
            l1 = (NAJ - nj - nl)/2 + j
            l2 = IABS(l1)
            DO k = 1, nl
               IF (MOD(l1 + Ipi(1,i) + JPI,2).EQ.0) THEN
                  IF ((l1.GE.l2) .AND. (nj1.GE.nj2) .AND.
     &                (l1.LE.Ipi(10,i))) THEN
                     NC = NC + 1
                     Mc(NC,4) = Ipi(11,i)
                     IF (.NOT.(Lo(228))) THEN
                        IF (Lo(100)) Mc(NC,4) = i
                        DO m = NC, Kab
                           IF (Mc(m,1).EQ.i) THEN
                              IF (Mc(m,2).EQ.l1) THEN
                                 IF (Mc(m,3).EQ.nj1) THEN
                                    Mc(NC,4) = -m
                                    GOTO 2
                                 ENDIF
                              ENDIF
                           ENDIF
                        ENDDO
                     ENDIF
    2                Mc(NC,1) = i
                     Mc(NC,2) = l1
                     Mc(NC,3) = nj1
                     Mc(NC,5) = Mc(NC,2)*(Mc(NC,2) + 1)
                     Mc(NC,6) = ((nj1 - Ipi(2,i) + 1)*(nj1 + Ipi(2,i) +
     &                          1))/4 - Mc(NC,5)
                  ENDIF
               ENDIF
               l1 = l1 + 1
            ENDDO
            nj1 = nj1 + 2
         ENDDO
         IF (i.EQ.1) THEN
            NCIn = NC
            IF (NCIn.EQ.0) RETURN
         ENDIF
      ENDDO
      IF (.NOT.(Lo(158))) THEN
         WRITE (MW,99010) aj, ip(JPI + 1), NC, NCIn
         DO j = 1, NC
            sj = 0.5D0*DFLOAT(Mc(j,3))
            WRITE (MW,99015) j, Mc(j,1), Mc(j,2), sj, Mc(j,4), Mc(j,5),
     &                       Mc(j,6)
         ENDDO
      ENDIF
C COMPUTATION OF COUPLING COEFFICIENTS FOR THE FORM FACTORS             QUAN-106
C WHEN THE SPIN-ORBIT IS DEFORMED,THERE IS NO SYMMETRY, THE TOTAL       QUAN-107
C TABLE IS CALCULATED. WITH NO SPIN-ORBIT DEFORMATION,ONLY ONE HALF IS  QUAN-108
C CALCULATED. LO(210) RETURNS .TRUE. IF THEY ARE DERIVATIVE COUPLINGS   QUAN-109
      Lo(210) = .FALSE.
      It = 0
      NIN = 0
      invz = INTv + ITY(5)
      DO i1 = 1, NC
         j1 = Mc(i1,1)
         k1 = Ipi(11,j1)
         IF (Lo(100)) k1 = j1
         IF (Lo(227)) Mc(i1,4) = k1
         DO i2 = 1, i1
            j2 = Mc(i2,1)
            a2 = Wv(8,j1)*Wv(8,j2)
            it1 = It + 1
            Nvi(i2,i1,1) = it1
            k1 = Niv(j2,j1,1)
            k2 = Niv(j2,j1,2)
            IF (k1.GT.k2) THEN
               Nvi(i2,i1,2) = It
               GOTO 60
            ELSE
               IF (2*(k2 - k1 + 3 + It).GT.Nmax)
     &             CALL MEMO('QUAN',Nmax,2*(k2 - k1 + 3 + It),2)
               il = 2*Mc(i2,2)
               ilp = 2*Mc(i1,2)
               isj = Mc(i2,3)
               isjp = Mc(i1,3)
               iai = Ipi(3,j2) - 1
               iaip = Ipi(3,j1) - 1
               is = Ipi(2,j2) - 1
               isp = Ipi(2,j1) - 1
               DO k = k1, k2
                  ni = Iq(2,k)
C COEFFICIENT OF A CENTRAL MULTIPOLE WITH ANGULAR MOMENTUM IQ=IVQ(1,NI) QUAN-139
C TRANSFER OF SPIN IS=IVQ(2,NI)/2 AND OF TOTAL MOMENTUM IJ=IVQ(3,NI)/2  QUAN-140
C NOTING THE SPIN S,THE ORBITAL ANGULAR MOMENTUM L,THE TOTAL SPIN OF THEQUAN-141
C PARTICLE J,THE SPIN OF THE TARGET AI,THE EIGENVALUE OF L.S G......    QUAN-142
C AND "K"=SQRT(2*K+1)   THE MOST GENERAL EXPRESSION OF (I2||IQ||I1) IS  QUAN-143
C  (-)**(AJ+AI2+1+J1+(L2+IQ-L1)/2)*"L1"*"L2"*"J1"*"J2"*"IQ"*"IJ"*       QUAN-144
C CGS(IQ,L2,L1)*C6J(J1,IJ,J2,AI2,AJ,AI1)*C9J(L2,L1,IQ,S2,S1,IS,J2,J1,IJ)QUAN-145
C IN A MACROSCOPIC MODEL, IS=0 AND IJ=IQ, THE EXPRESSIONS USED ARE      QUAN-146
C  (-)**(AJ+AI2+1-S+(L1+L2+IQ)/2)*"L1"*"L2"*"J1"*"J2"*"IQ"*CGS(IQ,L2,L1)QUAN-147
C    *C6J(J1,IQ,J2,AI2,AJ,AI1)*C6J(L1,IQ,L2,J2,S,J1)                    QUAN-148
C FOR S=1/2 (-)**(AJ+AI2-J2+(L1-L2+IQ)/2)*"IQ"*CGS(IQ,J2,J1)            QUAN-149
C FOR S=0   (-)**(AJ+AI2+1+(L1+L2+IQ)/2)*"L1"*"L2"*"IQ"*CGS(IQ,L2,L1)*  QUAN-150
C           C6J(L1,IQ,L2,AI2,AJ,AI1)                                    QUAN-151
                  iiq = 2*Ivq(1,ni)
                  DO ix = 2, Id
                     cx = 0.D0
                     cmatel = 0.D0
                     IF ((iiq.LE.il + ilp) .AND. (iiq.GE.IABS(il-ilp)))
     &                   THEN
                        fx = 1.D0
                        kk = Mc(i1,2) + Mc(i2,2) + Ivq(1,ni)
                        iis = Ivq(2,ni)
                        IF (iis.LT.0) THEN
C MAGNETIC COULOMB EXCITATION OF THE PARTICLE:                          QUAN-182
                           iij = iiq - 2
                           IF (iiq.GT.il + ilp + 2 .OR.
     &                         iiq.LT.IABS(il - ilp) + 2) GOTO 4
                           cmatel = DJ6J(isj,isjp,iij,ilp,il,is,Fac,Nfa)
     &                              *DJ6J(isj,isjp,iiq - 2,iaip,iai,NAJ,
     &                              Fac,Nfa)*DCGS(iiq,ilp,il,Fac,Nfa)
                           kk = kk + NAJ + iaip - is - 2
                           a1 = DFLOAT((iiq + 1)**3)
     &                          *DFLOAT((isj + 1)*(isjp + 1))
     &                          *DFLOAT((il + 1)*(ilp + 1))
     &                          *DFLOAT((il + ilp + iiq + 2)
     &                          *(il + ilp - iij))*(il - ilp + iiq)
     &                          *(ilp - il + iiq)/DFLOAT((iiq - 1)*iij)
     &                          **2/16.D0
                        ELSE
                           iij = Ivq(3,ni)
                           cmatel = DJ6J(isj,iij,isjp,iaip,NAJ,iai,Fac,
     &                              Nfa)
                           a1 = DFLOAT(iij + 1)
                           IF (is.GT.1 .OR. iis.NE.0) THEN
                              a1 = a1*DFLOAT((il + 1)*(ilp + 1))
                              a1 = a1*DFLOAT((isj + 1)*(isjp + 1))
                              kk = (NAJ + iaip - is) + kk
                              cmatel = cmatel*DCGS(iiq,ilp,il,Fac,Nfa)
                              IF (iis.NE.0) THEN
                                 cmatel = cmatel*DJ9J(il,ilp,iiq,is,isp,
     &                              iis,isj,isjp,iij,At(1,It + 1),100)
                                 a1 = a1*DFLOAT((iiq + 1)*(iis + 1))
                                 kk = kk + isjp + ilp + is
                              ELSE
                                 fx = DJ6J(il,isj,is,isjp,ilp,iij,Fac,
     &                                Nfa)
                              ENDIF
                           ELSE
                              cmatel = cmatel*DCGS(iij,isjp,isj,Fac,Nfa)
                              kk = kk + NAJ + iaip
                              IF (is.EQ.1) kk = kk + 2 + il - isjp
                              IF (is.NE.1)
     &                            a1 = a1*DFLOAT((isj + 1)*(isjp + 1))
                           ENDIF
                        ENDIF
                        IF (MOD(kk,4).EQ.0) cmatel = -cmatel
                        cmatel = Tq(3,k)*cmatel*DSQRT(a1)
                        cx = cmatel*fx
                     ENDIF
    4                IF (ix.NE.3) THEN
                        It = It + 1
                        Nat(1,It) = Iq(1,k)
                     ENDIF
                     At(ix,It) = cx*a2
                     IF (Lo(200)) GOTO 5
                     IF (ix.EQ.3) GOTO 20
                     IF (iiq.NE.iij) THEN
                        il = 2*isj - il
                        ilp = 2*isjp - ilp
                     ELSE
                        At(3,It) = At(2,It)
                        IF (iis.NE.0) At(3,It) = -At(3,It)
                        GOTO 20
                     ENDIF
                  ENDDO
    5             Nat(1,It) = Nat(1,It) + ITY(5)
                  IF (Lo(12)) Nat(1,It) = -Nat(1,It)
                  IF (Iq(3,k).EQ.0) GOTO 20
C DEFORMED SPIN-ORBIT                                                   QUAN-209
C FORM FACTOR (1/R)(D/DR)V(R)         COEFFICIENT:  (I2||IQ||I1)*G1     QUAN-210
C PARAMETRISATION:  (I2||IQ||I1)*(AZ3*G1+AZ4*G2+AZ1)                    QUAN-211
                  a = cx*(Mc(i2,6)*AZ3 + Mc(i1,6)*AZ4 + AZ1)
                  IF (DABS(a).GE.1.D-10) THEN
                     It = It + 1
                     Nat(1,It) = Iq(3,k) + invz
                     IF (Lo(14)) Nat(1,It) = -Nat(1,It)
                     At(2,It) = 2.D0*a*a2
                  ENDIF
C FORM FACTOR V(R)/R**2   COEFFICIENT: (I2||IQ||I1)*(S*(IQ*(IQ+1)-L1*(L1QUAN-218
C   +1)-L2*(L2+1)+G2*(1+G1)/(2*S))+XXX)                                 QUAN-219
C PARAMETRISATION:   (I2||IQ||I1)*AZ5*(S*(IQ*(IQ+1)*AZ2........         QUAN-220
C XXX IS -SQRT(F1*F2)*C6J(L1,J1,S-1,J2,L2,IQ)/(2*S*C6J(L1,J1,S,J2,L2,IQ)QUAN-221
C  WITH F=(L*L+L-(J-S)*(J-S+1))*((J+S)*(J+S+1)-L*L-L)                   QUAN-222
C  FOR S=1/2  XXX=0                                                     QUAN-223
C  FOR S=1  XXX=-4*L1*L2*(L1+1)*(L2+1)/IQ*IQ+IQ-L1*L1-L1-L2*L2-L2)      QUAN-224
C WHEN J1=L1 AND J2=L2 , ELSE  XXX=0                                    QUAN-225
                  azi = DFLOAT(Ivq(1,ni)*(Ivq(1,ni) + 1))
                  aspi = DFLOAT(is)
                  smatel = (0.5D0*DFLOAT(Ipi(2,j1) - 1)
     &                     *(AZ2*azi - DFLOAT(Mc(i1,5)+Mc(i2,5)))
     &                     + DFLOAT(Mc(i1,6))
     &                     *(1.D0 + DFLOAT(Mc(i2,6))/aspi))*fx
                  IF (is.LT.2) GOTO 10
                  IF (is.EQ.2) THEN
                     IF (il.NE.isj .OR. ilp.NE.isjp) GOTO 10
                     a1 = azi - Mc(i1,5) - Mc(i2,5)
                     IF (a1.NE.0.) THEN
                        smatel = smatel - 4.D0*DFLOAT(Mc(i1,5)*Mc(i2,5))
     &                           *fx/a1
                        GOTO 10
                     ENDIF
                  ENDIF
                  g1 = DFLOAT((Mc(i1,3) - Ipi(2,j1))/2)
                  g2 = DFLOAT((Mc(i1,3) + Ipi(2,j1))/2)
                  f1 = (DFLOAT(Mc(i1,5)) - g1*(g1 + 1.D0))
     &                 *(g2*(g2 + 1.D0) - DFLOAT(Mc(i1,5)))
                  g1 = DFLOAT((Mc(i2,3) - Ipi(2,j1))/2)
                  g2 = DFLOAT((Mc(i2,3) + Ipi(2,j1))/2)
                  f2 = (DFLOAT(Mc(i2,5)) - g1*(g1 + 1.D0))
     &                 *(g2*(g2 + 1.D0) - DFLOAT(Mc(i2,5)))
                  f3 = f1*f2
                  IF (f3.GT.0.D0) smatel = smatel - DSQRT(f3)
     &                *DJ6J(il,isj,is - 2,isjp,ilp,iiq,Fac,Nfa)/aspi
   10             a = cmatel*AZ5*smatel
                  IF (DABS(a).GE.1.D-10) THEN
                     It = It + 1
                     Nat(1,It) = Iq(3,k) + invz + INSl
                     IF (Lo(14)) Nat(1,It) = -Nat(1,It)
                     At(2,It) = 2.D0*a*a2
                  ENDIF
   20          ENDDO
               llo = .FALSE.
            ENDIF
   40       IF (It.LT.it1) THEN
               Nvi(i2,i1,2) = It
               GOTO 60
            ELSEIF (It.NE.it1) THEN
C  SUMMATION OF COEFFICIENTS RELATED TO THE SAME FORM FACTOR            QUAN-254
               it2 = It - 1
               DO i = it1, it2
                  DO j = i, it2
                     IF (Nat(1,i).EQ.Nat(1,j + 1)) THEN
                        At(2,i) = At(2,i) + At(2,j + 1)
                        At(2,j + 1) = 0.D0
                        IF (.NOT.(Lo(200))) THEN
                           At(3,i) = At(3,i) + At(3,j + 1)
                           At(3,j + 1) = 0.D0
                        ENDIF
                     ENDIF
                  ENDDO
               ENDDO
            ENDIF
C ELIMINATION OF TOO SMALL COEFFICIENTS                                 QUAN-266
            it2 = It
            It = it1 - 1
            nmr = 0
            nmi = 0
            DO i = it1, it2
               cx = DABS(At(2,i))
               IF (Lo(100)) cx = cx + DABS(At(3,i))
               IF (cx.GE.1.D-10) THEN
                  It = It + 1
                  Nat(1,It) = Nat(1,i)
                  At(2,It) = At(2,i)
                  IF (Lo(100)) At(3,It) = At(3,i)
                  nmr = nmr + 1
                  IF (Nat(1,It).LT.0) nmi = nmi + 1
               ENDIF
            ENDDO
            IF (nmr.NE.0) NIN = NIN + 1
            IF (nmi.NE.0) NIN = NIN + 1
            IF (llo) THEN
               Nvi(i1,i2,2) = It
               DO k = k1, k2
                  It = It + 1
                  Nat(1,It) = Nat(1,k)
                  At(2,It) = -At(2,k)
               ENDDO
               Nvi(i1,i2,3) = It
               NIN = NIN + 2
               IF (Lo(14)) NIN = NIN + 2
               GOTO 100
            ELSEIF (Lo(113) .AND. Lo(119)) THEN
               Nvi(i2,i1,2) = It
            ELSE
               Nvi(i2,i1,2) = It
C COEFFICIENTS OF THE DERIVATIVE COUPLING                               QUAN-287
C FORM FACTOR  V(R)/R**2  COEFFICIENT: (I2||IQ||I1)*(G1-G2)             QUAN-288
C PARAMETRISATION: (I2||IQ||I1)*(G1-G2)*AZ6                             QUAN-289
               it2 = It
               IF (Lo(100)) THEN
                  DO i = it1, it2
                     ij = Nat(1,i)
                     IF (Ivz(3,ij).NE.0) THEN
                        Lo(210) = .TRUE.
                        It = It + 1
                        Nat(1,It) = Ivz(3,ij) + INTv
                        At(2,It) = At(2,i)
                        At(3,It) = At(2,It)*DFLOAT(Mc(i2,6) - Mc(i1,6))
                     ENDIF
                  ENDDO
                  IF (It.GT.it2) NIN = NIN + 1
               ELSE
                  DO i = it1, it2
                     IF (IABS(Nat(1,i)).LE.invz) THEN
                        ij = IABS(Nat(1,i)) - ITY(5)
                        IF (Ivz(3,ij).NE.0) THEN
                           a = At(2,i)*DFLOAT(Mc(i2,6) - Mc(i1,6))
     &                         *AZ6*2.D0
                           IF (DABS(a).GE.1.D-10) THEN
                              Lo(210) = .TRUE.
                              It = It + 1
                              Nat(1,It) = Ivz(3,ij) + invz + INSl
                              IF (Lo(14)) Nat(1,It) = -Nat(1,It)
                              At(2,It) = a
                           ENDIF
                        ENDIF
                     ENDIF
                  ENDDO
               ENDIF
            ENDIF
   60       Nvi(i2,i1,3) = It
            IF (Lo(100) .OR. (Nvi(i2,i1,3).EQ.Nvi(i2,i1,2))) THEN
C SYMMETRISATION OF THE TABLE WHEN THERE IS NO DEFORMED SPIN-ORBIT      QUAN-350
               DO k = 1, 3
                  Nvi(i1,i2,k) = Nvi(i2,i1,k)
               ENDDO
            ELSE
C COPY OF THE COEFFICIENTS AND CORRECTIONS IN ORDER TO OBTAIN           QUAN-319
C AN HERMITIAN INTERACTION                                              QUAN-320
               k1 = Nvi(i2,i1,1)
               k2 = Nvi(i2,i1,2)
               it1 = It + 1
               Nvi(i1,i2,1) = it1
               DO k = k1, k2
                  It = It + 1
                  Nat(1,It) = Nat(1,k)
                  At(2,It) = At(2,k)
               ENDDO
               k1 = k2 + 1
               k2 = Nvi(i2,i1,3)
               DO k = k1, k2
                  It = It + 1
                  Nat(1,It) = Nat(1,k) - INSl
                  IF (Nat(1,k).LT.0) Nat(1,It) = Nat(1,It) + 2*INSl
                  At(2,It) = -At(2,k)
                  It = It + 1
                  Nat(1,It) = Nat(1,k)
                  At(2,It) = At(2,k)
               ENDDO
               llo = .TRUE.
               GOTO 40
            ENDIF
  100    ENDDO
      ENDDO
      IF (.NOT.(Lo(158))) THEN
C OUTPUT OF COUPLING COEFFICIENTS                                       QUAN-356
         WRITE (MW,99020) ((j,i,(Nvi(j,i,k),k=1,3),i = 1,NC),j = 1,NC)
         IF (It.NE.0) THEN
            IF (Lo(200)) WRITE (MW,99025) (i,Nat(1,i),At(2,i),i = 1,It)
            IF (Lo(100)) WRITE (MW,99030)
     &                          (i,Nat(1,i),At(2,i),At(3,i),i = 1,It)
         ENDIF
      ENDIF
      NCI = NCIn
      NIC = NC
      IF (.NOT.Lo(231)) RETURN
C FIND QUANTUM NUMBER OF COUPLED CHANNELS FOR IDENTICAL PARTICLES. NOT  QUAN-364
C USED FOR DIRAC FORMALISM (INCORRECT MEANING OF MC(*,10[3]) IN MTCH)   QUAN-365
      NCIn = 0
      ja = NAJ/2
      isi = Ipi(2,1) - 1
      nsm = isi + 1
      nsb = JPI + 1
      DO is = nsb, nsm, 2
         lp = ja + is
         lm = IABS(ja - is + 1) + 1
         DO l = lm, lp
            IF (MOD(l + JPI,2).EQ.1) THEN
               NCIn = NCIn + 1
               Mc(NCIn,10) = Ipi(11,1)
               Mc(NCIn,7) = 1
               Mc(NCIn,8) = l - 1
               Mc(NCIn,9) = 2*is - 2
               Mc(NCIn,11) = Mc(NCIn,8)*(Mc(NCIn,8) + 1)
               Mc(NCIn,12) = (ja*(ja + 1) - l*(l - 1) - is*(is - 1))/2
            ENDIF
         ENDDO
      ENDDO
      NC = NCIn
      IF (Lo(58)) WRITE (MW,99005) NCI, NCIn
99005 FORMAT (/' NUMBER OF SOLUTIONS REDUCED FROM',I3,' TO',I3)
      IF (NCIn.EQ.0) RETURN
      IF (NIC.NE.NCI) THEN
         n = NCI + 1
         DO i = n, NIC
            NC = NC + 1
            Mc(NC,7) = Mc(i,1)
            Mc(NC,8) = Mc(i,2)
            Mc(NC,9) = Mc(i,3)
            Mc(NC,10) = Mc(i,4)
            Mc(NC,11) = Mc(i,5)
            Mc(NC,12) = Mc(i,6)
         ENDDO
      ENDIF
      IF (.NOT.(Lo(158))) THEN
         WRITE (MW,99010) aj, ip(JPI + 1), NC, NCIn
         DO j = 1, NC
            sj = 0.5D0*DFLOAT(Mc(j,9))
            WRITE (MW,99015) j, Mc(j,7), Mc(j,8), sj, Mc(j,10), Mc(j,11)
     &                       , Mc(j,12)
         ENDDO
      ENDIF
C COMPUTATION OF TRANSFORMATION COEFFICIENTS                            QUAN-403
      iti = It + 1
      DO j = 1, NCIn
         DO i = 1, NCI
            Aa(i,j) = 0.D0
            IF (Mc(j,8).EQ.Mc(i,2)) THEN
               ij = Mc(i,3)
               is = Mc(j,9)
               Aa(i,j) = DFLOAT(1 - MOD(2*Mc(i,2) + NAJ + 2*isi,4))
     &                   *DSQRT((ij + 1.D0)*(is + 1.D0))
     &                   *DJ6J(2*Mc(i,2),isi,ij,isi,NAJ,is,Fac,Nfa)
            ENDIF
         ENDDO
      ENDDO
      Lo(210) = .FALSE.
      NIN = 0
      ni = NCI - NCIn
      ibb = 2
      IF ((Lo(201) .AND. Lo(203)) .OR. Lo(200)) ibb = 1
      DO i1 = 1, NC
         IF (i1.GT.NCIn) THEN
            j1 = i1 + ni
            k1 = j1
         ELSE
            j1 = 1
            k1 = NCI
         ENDIF
         DO i2 = 1, NC
            IF ((i2.GT.i1) .AND. (ibb.EQ.1)) GOTO 200
            DO ib = 1, ibb
               IF (i2.GT.NCIn) THEN
                  j2 = i2 + ni
                  k2 = j2
               ELSE
                  j2 = 1
                  k2 = NCI
               ENDIF
               it1 = It + 1
               IF (ib.EQ.1) Nvi(i2,i1,4) = it1
               DO l1 = j1, k1
                  a1 = 1.D0
                  IF (l1.LE.NCI) a1 = Aa(l1,i1)
                  IF (a1.NE.0.D0) THEN
                     DO l2 = j2, k2
                        a2 = 1.D0
                        IF (l2.LE.NCI) a2 = Aa(l2,i2)
                        IF (a2.NE.0.D0) THEN
                           m1 = Nvi(l2,l1,ib)
                           m2 = Nvi(l2,l1,ib + 1)
                           IF (ib.EQ.2) m1 = m1 + 1
                           IF (m1.LE.m2) THEN
                              IF (2*(m2 - m1 + 3 + It).GT.Nmax)
     &                            CALL MEMO('QUAN',Nmax,
     &                            2*(m2 - m1 + 3 + It),2)
                              DO m = m1, m2
                                 It = It + 1
                                 Nat(1,It) = Nat(1,m)
                                 DO ix = 2, Id
                                    At(ix,It) = At(ix,m)*a1*a2
                                 ENDDO
                              ENDDO
                           ENDIF
                        ENDIF
                     ENDDO
                  ENDIF
               ENDDO
               IF (It.LT.it1) GOTO 110
               IF (It.NE.it1) THEN
C  SUMMATION OF COEFFICIENTS RELATED TO THE SAME FORM FACTOR            QUAN-461
                  it2 = It - 1
                  DO i = it1, it2
                     DO j = i, it2
                        IF (Nat(1,i).EQ.Nat(1,j + 1)) THEN
                           DO ix = 2, Id
                              At(ix,i) = At(ix,i) + At(ix,j + 1)
                              At(ix,j + 1) = 0.D0
                           ENDDO
                        ENDIF
                     ENDDO
                  ENDDO
               ENDIF
C ELIMINATION OF TOO SMALL COEFFICIENTS                                 QUAN-471
               it2 = It
               It = it1 - 1
               nmr = 0
               nmi = 0
               DO i = it1, it2
                  cx = DABS(At(2,i))
                  IF (Lo(100)) cx = cx + DABS(At(3,i))
                  IF (cx.GE.1.D-10) THEN
                     It = It + 1
                     Nat(1,It) = Nat(1,i)
                     DO ix = 2, Id
                        At(ix,It) = At(ix,i)
                     ENDDO
                     IF (Lo(100)) At(3,It) = At(3,i)
                     nmr = nmr + 1
                     IF (Nat(1,It).LT.0) nmi = nmi + 1
                  ENDIF
               ENDDO
               IF (nmr.NE.0) NIN = NIN + 1
               IF (nmi.NE.0) NIN = NIN + 1
               IF ((ib.EQ.2) .AND. (nmr.NE.0)) Lo(210) = .TRUE.
  110          Nvi(i2,i1,ib + 4) = It
            ENDDO
            IF (ibb.EQ.2) GOTO 200
            Nvi(i2,i1,6) = It
C SYMMETRISATION OF THE TABLE WHEN THERE IS NO DEFORMED SPIN-ORBIT      QUAN-495
            DO k = 4, 6
               Nvi(i1,i2,k) = Nvi(i2,i1,k)
            ENDDO
         ENDDO
  200 ENDDO
      IF (Lo(158)) RETURN
C OUTPUT OF COUPLING COEFFICIENTS                                       QUAN-501
      WRITE (MW,99020) ((i,j,(Nvi(i,j,k),k=4,6),i = 1,NC),j = 1,NC)
      IF (It.LT.iti) RETURN
      IF (Lo(200)) WRITE (MW,99025) (i,Nat(1,i),At(2,i),i = iti,It)
      IF (Lo(100)) WRITE (MW,99030) (i,Nat(1,i),At(2,i),At(3,i),i = iti,
     &                              It)
      RETURN
99010 FORMAT (/' CHANNEL SPIN AND PARITY',F6.1,A1,I11,
     &        ' COUPLED CHANNELS AND',I3,' SOLUTIONS'//8X,' I',3X,' V',
     &        3X,' L',3X,' J',9X,' POT',5X,' CL',6X,' CJ'/)
99015 FORMAT (5X,3I5,F6.1,I11,2I9)
99020 FORMAT (/
     &' PAIRS OF CHANNELS N1 N2, AND COUPLING COEFFICIENT NUMBERS NVI(N1
     &,N2,K),K=1,3'/(1X,6(I3,I3,',',3I4,';')))
99025 FORMAT (//5X,'COEFFICIENTS'/(4(2X,2I4,1P,D15.6)))
99030 FORMAT (//5X,'COEFFICIENTS'/(3(2X,2I4,1P,2D15.6)))
      END
C 01/01/04                                                      ECIS03  MTCH-000
      SUBROUTINE MTCH(Nvi,Ncoll,Kab,Wv,Mc,Bg,Nat,St,Aa,Ism,Lmax2,Niv,
     &                Ivz,Fg,Lmax1,Lmax3,Kr,Vco,Vdo,Fam,Id,Bjm,Chb,Xm,
     &                Lo)
C COMPUTATION OF COULOMB CORRECTIONS AS INTEGRALS FROM THE MATCHING     MTCH-003
C POINT IF LO(227)=.FALSE. OR FROM THE ORIGIN IF LO(227)=.TRUE.         MTCH-004
C INPUT VARIABLES: NVI:   ADDRESSES OF COUPLINGS IN TABLE AT            MTCH-005
C                  NC:    NUMBER OF EQUATIONS                           MTCH-006
C                  NCOLL: NUMBER OF NUCLEAR STATES                      MTCH-007
C                  KAB:   MAXIMUM NUMBER OF COUPLED CHANNELS            MTCH-008
C                  WV:    WAVE NUMBERS AND COULOMB PARAMETERS           MTCH-009
C                  MC:    NUCLEAR STATE NUMBER AND ANGULAR MOMENTUM     MTCH-010
C                  BG:    TABLE OF COULOMB INTEGRALS FROM 0 TO INFINITY MTCH-011
C                           FOR COUPLED EQUATIONS OR WHEN LO(227)=.TRUE.MTCH-012
C                  NAT,ST:TABLE OF COUPLING COEFFICIENTS                MTCH-013
C                  ISM:   NUMBER OF INTEGRATION POINTS                  MTCH-014
C                  LMAX2: FIRST DIMENSION OF TABLE BG                   MTCH-015
C                  NIV:   ADDRESS IN THE TABLE OF REDUCED MATRIX ELEMENTMTCH-016
C                  IVZ:   TABLE OF FORM FACTORS (SEE REDM 3RD PART)     MTCH-017
C                  FG:    COULOMB FUNCTIONS                             MTCH-018
C                  LMAX1: FIRST DIMENSION OF TABLE FG                   MTCH-019
C                  LMAX3: MAXIMUM NUMBER OF COULOMB INTEGRALS FROM THE  MTCH-020
C                           MATCHING POINT TO INFINITY                  MTCH-021
C                  VCO:   STRENGTH OF TAILS OF COULOMB POTENTIALS       MTCH-022
C                  VDO:   STRENGTH OF TAILS OF COULOMB TRANSITIONS      MTCH-023
C                  ID:    FIRST DIMENSION OF NAT,ST                     MTCH-024
C                  BJM:   COEFFICIENT OF INCREASE OF IMAGINARY POTENTIALMTCH-025
C                  CHB:                                                 MTCH-026
C                  XM:                                                  MTCH-027
C                  LO:    LOGICAL CONTROLS                              MTCH-028
C IN COMMON /POTE2/ITY(5):NUMBER OF DIAGONAL POTENTIALS                 MTCH-029
C                  INTV:  NUMBER OF FORM FACTORS                        MTCH-030
C                  INSL:  NUMBER OF SPIN-ORBIT FORM FACTORS             MTCH-031
C IN COMMON /NOEQU/NCXN:  NUMBER OF SOLUTIONS NEEDED                    MTCH-032
C                  NC:    NUMBER OF EQUATIONS                           MTCH-033
C OUTPUT VARIABLES:AA:    COULOMB INTEGRALS FROM THE MATCHING POINT TO  MTCH-034
C                           INFINITY FOR ITERATIONS LO(225)=.FALSE.     MTCH-035
C                  FAM(I,J): MATCHING VALUES AND WAVE NUMBER FOR J=1 TO MTCH-036
C                         6, COEFFICIENT OF CENTRAL POTENTIAL FOR J=7,  MTCH-037
C                         COEFFICIENT OF SPIN-ORBIT POTENTIAL FOR J=8,  MTCH-038
C                         ENERGY FOR J=9, CENTRIFUGAL POTENTIAL FOR J=10MTCH-039
C WORKING SPACE:   AA(1,1,I) FOR I=7,10 IF LO(227) OR LO(225)=.TRUE.    MTCH-040
C                  KR:    FOR LINS                                      MTCH-041
C LOCAL TABLES LA(3,11) AND BA(2,11) ARE SET MCM(1)=5 AND MCM(2)=4      MTCH-042
C***********************************************************************MTCH-043
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER INSl, INTv, INVt, IPJ, ITY(8), JPI, MR, MS, MW, NAJ, NC,
     &        NCI, NCIn, NCXn, NIC, NIN, NPX
      REAL*8 R1(2)
      COMMON /INOUT / MR, MW, MS
      COMMON /NOEQU / NCXn, NIC, NCI, NC, NCIn, NIN, JPI, IPJ, R1, NAJ
      COMMON /POTE2 / ITY, INVt, INTv, INSl, NPX
C
C Dummy arguments
C
      REAL*8 Bjm, Chb, Xm
      INTEGER Id, Ism, Kab, Lmax1, Lmax2, Lmax3, Ncoll
      REAL*8 Aa(Kab,Kab,4), Bg(Lmax2,1), Fam(Kab,10), Fg(Lmax1,4,1),
     &       St(Id,1), Vco(2,1), Vdo(2,1), Wv(18,1)
      INTEGER Ivz(4,1), Kr(1), Mc(Kab,6), Nat(2*Id,1),
     &        Niv(Ncoll,Ncoll,3), Nvi(Kab,Kab,3)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 a1, a2, a3, a4, ab(4,2), av(5), aw, ax, ax1, ax2, ax3, ay,
     &       ay1, ay2, ay3, az, b(4), b1, b2, ba(2,11), bt, c(2,2), c0,
     &       c1, c2, d1, d2, ef, ei, f2, f3, g(4), xf, xi, xt, yt, zt
      DOUBLE PRECISION DABS, DSQRT
      INTEGER i, i1, i2, i3, i4, i5, ic, ier, ii, ik, il, ilm, im, iml,
     &        ip, is, j, jc, k, k1, k2, k3, k4, kp1, kp2, kp3, l, l1,
     &        l2, l3, l4, l5, la(3,11), la1, la2, la3, lf, li, ll, ll4,
     &        n1, n3, n4, nn1, nn2
      INTEGER IABS, IDINT, MAX0, MIN0
      LOGICAL lv
C
C
      lv = Lo(44) .AND. (Lo(57) .OR. Lo(58))
      ll4 = 4
      IF (Lo(227)) ll4 = 1
      IF (lv) WRITE (MW,99005)
99005 FORMAT (/
     &  ' CHANNELS  L-VALUES     COULOMB INTEGRALS: F*F,G*F,F*G AND G*G'
     &  )
C LOOPS ON EQUATIONS                                                    MTCH-057
      DO ic = 1, NC
         i1 = Mc(ic,1)
         k1 = Mc(ic,4)
         l1 = Mc(ic,2)
         IF (k1.GE.0 .OR. Lo(227)) THEN
C VALUES OF LONG RANGE TAILS OF CENTRAL POTENTIALS                      MTCH-070
            f2 = Vco(1,k1)**2
            f3 = Vco(2,k1)*Mc(ic,6)
            jc = 0
            IF (i1.LE.Ncoll) jc = Niv(i1,i1,3)
            IF (Wv(3,i1).LE.0.D0 .OR. jc.LE.0) THEN
               f2 = 0.D0
               f3 = 0.D0
            ENDIF
            IF (.NOT.(Lo(227))) THEN
C INTEGRATION REGION - SET UP OF POTENTIAL IN FIVE POINTS FOR           MTCH-079
C TRANSFORMATION OF MATCHING VALUES                                     MTCH-080
               b1 = Wv(11,1)*Wv(11,1)/48.D0
               c1 = (Ism - 1)*Wv(11,1)
               a1 = Wv(9,i1)**2
               IF (Wv(3,i1).LT.0.D0) a1 = -a1
               DO k = 1, 5
                  av(k) = b1*(2.D0*Wv(9,i1)*Wv(5,i1)/c1 - a1 + (Mc(ic,5)
     &                    - f2 - f3/c1)/c1**2)
                  c1 = c1 + 0.5D0*Wv(11,1)
               ENDDO
            ENDIF
         ELSE
C TRANSFER OF INFORMATIONS WHEN UNCOUPLED FUNCTIONS ARE NOT RECOMPUTED  MTCH-063
            k1 = -k1
            IF (Lo(200)) Mc(ic,6) = 0
            IF (k1.NE.ic) THEN
               DO i = 1, 8
                  Fam(ic,i) = Fam(k1,i)
               ENDDO
            ENDIF
         ENDIF
C COMPUTATION OF COULOMB CORRECTIONS                                    MTCH-088
         az = Ism*Wv(11,i1)
         DO ip = 1, ic
            DO l = 1, 8
               ab(l,1) = 0.D0
            ENDDO
            i2 = Mc(ip,1)
            ilm = 1
            IF (Lo(144)) GOTO 220
            l2 = Mc(ip,2)
            i3 = Niv(i2,i1,3)
            IF (i3.EQ.0) GOTO 220
            ay = DSQRT(Wv(9,i1)*Wv(9,i2))
            aw = ay*az
C SCAN THE COUPLINGS BETWEEN EQUATIONS                                  MTCH-101
            is = 0
            IF (Lo(200) .AND. Lo(19) .AND. (ic.NE.ip)) ilm = 2
            k1 = Nvi(ip,ic,1)
            k2 = Nvi(ip,ic,2)
            IF (Lo(111) .OR. (k1.GT.k2)) GOTO 100
            iml = 1
C CENTRAL CONTRIBUTION                                                  MTCH-108
            i = 1
   20       IF (Vdo(1,i).NE.0.D0) THEN
               ii = i + ITY(5)
               DO k = k1, k2
                  IF (IABS(Nat(1,k)).EQ.ii) GOTO 40
               ENDDO
            ENDIF
            GOTO 180
   40       IF (St(2,k).EQ.0 .AND. Lo(200)) GOTO 180
            la1 = Mc(ic,2)
            la2 = Mc(ip,2)
            la3 = Ivz(4,i)
            zt = St(2,k)*ay**la3*Vdo(1,i)/Wv(11,i1)**2
            IF (Lo(100)) zt = zt*.5D0*DSQRT((Xm + Wv(7,i1))*(Xm + Wv(7,
     &                        i2)))/Xm
            im = 1
   60       IF (im.LT.5) yt = zt
            IF ((yt.NE.0.D0) .OR. (zt.NE.0.D0)) THEN
               IF (is.NE.0) THEN
                  DO j = 1, is
                     IF ((la(1,j).EQ.la1) .AND. (la(2,j).EQ.la2) .AND.
     &                   (la(3,j).EQ.la3)) THEN
                        ba(1,j) = ba(1,j) + zt
                        ba(2,j) = ba(2,j) + yt
                        GOTO 80
                     ENDIF
                  ENDDO
               ENDIF
               is = is + 1
               la(1,is) = la1
               la(2,is) = la2
               la(3,is) = la3
               ba(1,is) = zt
               ba(2,is) = yt
            ENDIF
   80       IF (im.EQ.2 .OR. im.EQ.4 .OR. im.EQ.8) GOTO 180
            IF (im.EQ.3) THEN
               im = 4
               la1 = Mc(ic,2)
               la2 = Mc(ip,3) - la2
               zt = -.5D0*(St(3,k) - DFLOAT(la3)*St(2,k))
     &              *ay**la3*Vdo(2,i)*Chb*Wv(9,i2)/(Wv(11,i2)**2*Xm)
               IF ((la2 - Mc(ip,2)).GT.0) zt = -zt
               GOTO 60
            ELSEIF (im.EQ.5) THEN
               la3 = la3 - 1
               xt = xt/ay
               zt = ax3*Wv(9,i1)*Wv(5,i1)/DFLOAT(la1 + 1)*xt
               yt = ay3*Wv(9,i2)*Wv(5,i2)/DFLOAT(la2 + 1)*xt
               im = 6
               GOTO 60
            ELSEIF (im.EQ.6) THEN
               la2 = la2 + 1
               yt = -ay3*DSQRT(1.D0 + (Wv(5,i2)/DFLOAT(la2))**2)
     &              *Wv(9,i2)*xt
               zt = 0.D0
               im = 7
               GOTO 60
            ELSEIF (im.EQ.7) THEN
               la1 = la1 + 1
               la2 = la2 - 1
               zt = -ax3*DSQRT(1.D0 + (Wv(5,i1)/DFLOAT(la1))**2)
     &              *Wv(9,i1)*xt
               yt = 0.D0
               im = 8
               GOTO 60
            ELSE
               IF (Lo(200)) GOTO 180
C VECTOR CONTRIBUTION IN DIRAC EQUATION                                 MTCH-141
               im = 2
               la1 = Mc(ic,3) - Mc(ic,2)
               la2 = Mc(ip,3) - Mc(ip,2)
               la3 = Ivz(4,i)
               zt = St(3,k)*ay**la3*Vdo(1,i)*Chb**2*Wv(9,i1)*Wv(9,i2)
     &              /(2.D0*Xm*(Wv(7,i2) + Xm)*Wv(11,i1)**2)
               IF ((la1 - Mc(ic,2))*(la2 - Mc(ip,2)).LT.0) zt = -zt
               GOTO 60
            ENDIF
  100       IF (Lo(119)) GOTO 200
            k3 = Nvi(ip,ic,3)
C TENSOR CONTRIBUTION IN DIRAC EQUATION                                 MTCH-152
            IF (Lo(200)) THEN
               i = 1
               iml = 3
C SPIN-ORBIT CONTRIBUTION IN SCHROEDINGER EQUATION                      MTCH-180
               kp1 = Nvi(ic,ip,1)
               kp2 = Nvi(ic,ip,2)
               kp3 = Nvi(ic,ip,3)
               GOTO 160
            ELSE
               iml = 2
               k4 = k2 + 1
               IF (k4.GT.k3) GOTO 200
               i = 1
            ENDIF
  120       IF (Vdo(2,i).NE.0.) THEN
               DO k = k4, k3
                  IF (IABS(Nat(1,k)).EQ.Ivz(3,i) + INTv) GOTO 140
               ENDDO
            ENDIF
            GOTO 180
  140       im = 3
            la1 = Mc(ic,3) - Mc(ic,2)
            la2 = Mc(ip,2)
            la3 = Ivz(4,i) + 1
            zt = .5D0*(St(3,k) + DFLOAT(la3)*St(2,k))*ay**la3*Vdo(2,i)
     &           *Chb*Wv(9,i1)/(Wv(11,i1)**2*Xm)
            IF ((la1 - Mc(ic,2)).GT.0) zt = -zt
            GOTO 60
  160       IF (Vdo(2,i).NE.0.D0) THEN
               ii = Ivz(3,i) + ITY(5) + INSl + INTv
               ax1 = 0.D0
               ax2 = 0.D0
               ax3 = 0.D0
               IF (k1.LE.k3) THEN
                  DO k = k1, k3
                     IF (IABS(Nat(1,k)) + INSl.EQ.ii) ax1 = St(2,k)
                     IF ((k.LE.k2) .AND. (IABS(Nat(1,k)).EQ.ii))
     &                   ax2 = St(2,k)
                     IF ((k.GT.k2) .AND. (IABS(Nat(1,k)).EQ.ii))
     &                   ax3 = St(2,k)
                  ENDDO
               ENDIF
               ay1 = 0.D0
               ay2 = 0.D0
               ay3 = 0.D0
               IF (kp1.LE.kp3) THEN
                  DO k = kp1, kp3
                     IF (IABS(Nat(1,k)) + INSl.EQ.ii) ay1 = St(2,k)
                     IF ((k.LE.kp2) .AND. (IABS(Nat(1,k)).EQ.ii))
     &                   ay2 = St(2,k)
                     IF ((k.GT.kp2) .AND. (IABS(Nat(1,k)).EQ.ii))
     &                   ay3 = St(2,k)
                  ENDDO
               ENDIF
               IF ((k1.LE.k3) .OR. (kp1.LE.kp3)) THEN
                  la1 = Mc(ic,2)
                  la2 = Mc(ip,2)
                  la3 = Ivz(4,i) + 2
                  IF (la3.LE.la1 + la2) THEN
                     xt = ay**la3*Vdo(2,i)/Wv(11,i1)**2
                     zt = (ax2 - DFLOAT(la3 - 1)*ax1 + DFLOAT(la1 + 1)
     &                    *ax3)*xt
                     yt = (ay2 - DFLOAT(la3 - 1)*ay1 + DFLOAT(la2 + 1)
     &                    *ay3)*xt
                     im = 5
                     GOTO 60
                  ENDIF
               ENDIF
            ENDIF
  180       i = i + 1
            IF (i.LE.INTv) THEN
               IF (iml.EQ.1) GOTO 20
               IF (iml.EQ.2) GOTO 120
               IF (iml.EQ.3) GOTO 160
            ENDIF
            IF (iml.EQ.1) GOTO 100
  200       IF (is.NE.0) THEN
               DO ik = 1, is
                  IF (DABS(ba(1,ik)) + DABS(ba(2,ik)).GE.1.D-8) THEN
                     l4 = la(1,ik)
                     l5 = la(2,ik)
                     li = MIN0(l4,l5)
                     lf = MAX0(l4,l5)
                     ll = la(3,ik)
                     i4 = i1
                     IF (li.NE.la(2,ik)) i4 = i2
                     i5 = i1 + i2 - i4
                     ei = Wv(5,i5)
                     ef = Wv(5,i4)
                     xi = Wv(9,i5)*az
                     xf = Wv(9,i4)*az
                     l3 = (li + lf - ll + 3)/2
                     IF (l3.GT.0) THEN
                        CALL CORA(l3,ll,lf - li + 1,ei,ef,xi,xf,b,c,
     &                            Lo(227))
C ORDER IN C   (LI,LF),(LI,LF+1),(LI+1,LF),(LI+1,LF+1)                  MTCH-252
C ORDER IN FG   F(EI)*F(EF),G(EI)*F(EF),F(EI)*G(EF),G(EI)*G(EF)         MTCH-253
                        IF (Lo(227)) THEN
C COMPUTATION OF INTEGRALS FROM 0 TO INFINITY USING B                   MTCH-299
                           ax = 0.D0
                           IF (l3 + 3.GT.Lmax2) GOTO 400
                           DO n1 = 1, 4
                              ax = ax + b(n1)*Bg(l3 + n1 - 1,i3)
                           ENDDO
                           DO il = 1, ilm
                              ab(1,il) = ab(1,il) + ba(il,ik)*ax
                           ENDDO
                        ELSE
C INTEGRATION REGION - INTEGRALS FROM MATCHING POINT TO INFINITY        MTCH-255
                           IF (MAX0(l3 + 3,lf + 2).GT.Lmax3) GOTO 300
                           IF (li.EQ.l5) THEN
                              a1 = c(1,2)
                              c(1,2) = c(2,1)
                              c(2,1) = a1
                           ENDIF
C COMPUTATION OF THE INTEGRALS FROM THE MATCHING POINT USING B AND C    MTCH-261
                           DO n1 = 1, 4
                              g(n1) = 0.D0
                              DO n3 = 1, 4
                                 g(n1) = g(n1) + b(n3)
     &                              *Fg(l3 + n3 - 1,n1,i3)
                              ENDDO
                              nn2 = 2*((n1 - 1)/2) + 1
                              nn1 = 2*(n1 - nn2) + 1
                              DO n3 = 1, 2
                                 DO n4 = 1, 2
                                    g(n1) = g(n1) - c(n4,n3)
     &                                 *Fg(l3 + n3,nn1,i1)
     &                                 *Fg(l3 + n4,nn2,i2)
                                 ENDDO
                              ENDDO
                           ENDDO
                           DO il = 1, ilm
                              DO l = 1, 4
                                 ab(l,il) = ab(l,il) + ba(il,ik)*g(l)
                              ENDDO
                           ENDDO
                           IF (Lo(225) .OR. (Lo(29) .AND. (ip.EQ.ic)))
     &                         THEN
C CORRECTION OF THE POTENTIAL IN FIVE POINTS FOR MATCHING VALUES        MTCH-293
                              c1 = DFLOAT(Ism - 1)*Wv(11,i1)*ay
                              DO i = 1, 5
                                 av(i) = av(i) + ba(1,ik)*ay*Wv(11,i1)
     &                              **2/c1**(ll + 1)/48.D0
                                 c1 = c1 + 0.5D0*Wv(11,i1)*ay
                              ENDDO
                           ELSE
                              DO il = 1, ilm
                                 yt = ba(il,ik)*Wv(11,i1)
     &                                **2*ay/(12.D0*aw**(ll + 1))
C WITH THE GREEN'S FUNCTIONS METHOD,WE MUST ADD H**2*FP(R)/12           MTCH-280
C WHICH IS VRE(ISM-1)*(KI*FP(I)*G(F)+KF*F(I)*GP(F)-(LL+1)/R)/12.        MTCH-281
                                 c0 = -DFLOAT(ll + 1)
     &                                /az + 6.D0/Wv(11,i1)
                                 ab(1,il) = ab(1,il)
     &                              - yt*(Wv(9,i1)*Fg(l4 + 1,2,i1)
     &                              *Fg(l5 + 1,1,i2) + Wv(9,i2)
     &                              *Fg(l4 + 1,1,i1)*Fg(l5 + 1,2,i2)
     &                              + c0*Fg(l4 + 1,1,i1)*Fg(l5 + 1,1,i2)
     &                              )
                                 ab(2,il) = ab(2,il)
     &                              - yt*(Wv(9,i1)*Fg(l4 + 1,4,i1)
     &                              *Fg(l5 + 1,1,i2) + Wv(9,i2)
     &                              *Fg(l4 + 1,3,i1)*Fg(l5 + 1,2,i2)
     &                              + c0*Fg(l4 + 1,3,i1)*Fg(l5 + 1,1,i2)
     &                              )
                                 ab(3,il) = ab(3,il)
     &                              - yt*(Wv(9,i1)*Fg(l4 + 1,2,i1)
     &                              *Fg(l5 + 1,3,i2) + Wv(9,i2)
     &                              *Fg(l4 + 1,1,i1)*Fg(l5 + 1,4,i2)
     &                              + c0*Fg(l4 + 1,1,i1)*Fg(l5 + 1,3,i2)
     &                              )
                                 ab(4,il) = ab(4,il)
     &                              - yt*(Wv(9,i1)*Fg(l4 + 1,4,i1)
     &                              *Fg(l5 + 1,3,i2) + Wv(9,i2)
     &                              *Fg(l4 + 1,3,i1)*Fg(l5 + 1,4,i2)
     &                              + c0*Fg(l4 + 1,3,i1)*Fg(l5 + 1,3,i2)
     &                              )
                              ENDDO
                           ENDIF
                        ENDIF
                     ENDIF
                  ENDIF
               ENDDO
            ENDIF
C LIMITATION FOR TOO LARGE INTEGRAL OF IRREGULAR FUNCTIONS              MTCH-307
  220       IF (DABS(ab(4,1)).GT.Wv(9,i1)) ab(4,1) = ab(1,1)
            IF ((ilm.EQ.2) .AND. (DABS(ab(4,2)).GT.Wv(9,i2))) ab(4,2)
     &          = ab(1,2)
            IF (lv) THEN
               WRITE (MW,99020) ic, ip, l1, l2, (ab(i,1),i = 1,ll4)
               IF (ilm.EQ.2) WRITE (MW,99020) ip, ic, l2, l1,
     &                              (ab(i,2),i = 1,ll4)
            ENDIF
C BUILD UP OF MATRIX OF CORRECTIONS                                     MTCH-313
            DO l = 1, ll4
               IF (ic.NE.ip) Aa(ip,ic,l) = ab(l,ilm)
               Aa(ic,ip,l) = ab(l,1)
            ENDDO
            IF (.NOT.(Lo(227) .OR. (ic.EQ.ip))) THEN
               Aa(ip,ic,2) = ab(3,ilm)
               Aa(ip,ic,3) = ab(2,ilm)
            ENDIF
         ENDDO
         IF (.NOT.Lo(227)) THEN
            IF (Mc(ic,4).GE.0) THEN
C MATCHING VALUES                                                       MTCH-334
               DO k = 1, 4
                  b(k) = Fg(l1 + 1,k,i1)
               ENDDO
               IF (jc.GT.0) THEN
                  IF (.NOT.(Lo(129) .AND. (f2.EQ.0.D0.AND.f3.EQ.0.D0)))
     &                THEN
                     IF (Wv(5,i1).EQ.0.D0) THEN
                        f2 = f3*Wv(9,i1)
                        f3 = 0.D0
                     ENDIF
                     DO k = 1, 4
                        g(k) = -Fg(l1 + 1,k,jc)*f2 + ab(k,1)/Wv(9,i1)
                     ENDDO
                     IF (f3.NE.0.D0) THEN
                        b1 = 2.D0*Wv(5,i1)*DFLOAT(l1*(l1 + 1))
                        b2 = DFLOAT(l1 + 1)**2 + Wv(5,i1)**2
                        c1 = -(DFLOAT(2*l1 + 1)*b2 + 2*Wv(5,i1)**2)/b1
                        c2 = DFLOAT(2*l1 + 3)*b2/b1
                        a1 = DFLOAT(Ism)*Wv(11,i1)*Wv(9,i1)
                        d1 = (b2 + DFLOAT(l1 + 1)*Wv(5,i1)/a1)/a1/b1
                        d2 = -Wv(5,i1)*DSQRT(b2)/b1/a1
                        a1 = b2/b1/a1
                        a3 = f3*Wv(9,i1)
                        g(1) = g(1)
     &                         - a3*(c1*Fg(l1 + 1,1,jc) + c2*Fg(l1 + 2,
     &                         1,jc) - d1*Fg(l1 + 1,1,i1)
     &                         **2 - d2*2.D0*Fg(l1 + 1,1,i1)
     &                         *Fg(l1 + 2,1,i1) - a1*Fg(l1 + 2,1,i1)**2)
                        g(2) = g(2)
     &                         - a3*(c1*Fg(l1 + 1,2,jc) + c2*Fg(l1 + 2,
     &                         2,jc) - d1*Fg(l1 + 1,1,i1)
     &                         *Fg(l1 + 1,3,i1)
     &                         - d2*(Fg(l1+1,1,i1)*Fg(l1+2,3,i1)
     &                         + Fg(l1+2,1,i1)*Fg(l1+1,3,i1))
     &                         - a1*Fg(l1 + 2,1,i1)*Fg(l1 + 2,3,i1))
                        g(4) = g(4)
     &                         - a3*(c1*Fg(l1 + 1,4,jc) + c2*Fg(l1 + 2,
     &                         4,jc) - d1*Fg(l1 + 1,3,i1)
     &                         **2 - d2*2.D0*Fg(l1 + 1,3,i1)
     &                         *Fg(l1 + 2,3,i1) - a1*Fg(l1 + 2,3,i1)**2)
                     ENDIF
                     a4 = 1.D0 + (g(1)*g(4) - g(2)**2)
                     g(3) = b(1)
                     b(1) = (b(1)*(1.D0 - g(2)) + g(1)*b(3))/a4
                     b(3) = ( - g(3)*g(4) + (1.D0 + g(2))*b(3))/a4
                     g(3) = b(2)
                     b(2) = (b(2)*(1.D0 - g(2)) + g(1)*b(4))/a4
                     b(4) = ( - g(3)*g(4) + (1.D0 + g(2))*b(4))/a4
                  ENDIF
               ENDIF
               a1 = (1.D0 - av(2))/(2.D0 + 10.D0*av(2))
               b1 = (1.D0 - av(4))/(2.D0 + 10.D0*av(4))
               a2 = a1*(1.D0 - av(1))/(1.D0 - 4.D0*av(1))
               b2 = b1*(1.D0 - av(5))/(1.D0 - 4.D0*av(5))
               c1 = (2.D0 + 10.D0*av(3)) - (1.D0 - av(3))*(a1 + b1)
               a1 = (16.D0 - 144.D0*av(2))/(2.D0 + 10.D0*av(2))
               b1 = (16.D0 - 144.D0*av(4))/(2.D0 + 10.D0*av(4))
               c2 = (7.D0 + a1*(1.D0 - av(1)))/(1.D0 - 4.D0*av(1))
               d2 = (7.D0 + b1*(1.D0 - av(5)))/(1.D0 - 4.D0*av(5))
               d1 = (b1 - a1)*(1.D0 - av(3))
               a1 = a2*d2 + b2*c2
               b1 = (c1*d2 + d1*b2)/a1
               b2 = 30.D0*Wv(11,1)*b2*Wv(9,i1)/a1
               Fam(ic,1) = b1*b(1) - b2*b(2)
               Fam(ic,3) = b1*b(3) - b2*b(4)
               b1 = (c2*c1 - a2*d1)/a1
               a2 = -30.D0*Wv(11,1)*a2*Wv(9,i1)/a1
               Fam(ic,2) = b1*b(1) - a2*b(2)
               Fam(ic,4) = b1*b(3) - a2*b(4)
               Fam(ic,5) = Wv(9,i1)
               IF (Lo(100)) Fam(ic,5) = Fam(ic,5)*Chb/(Xm + Wv(7,i1))
               bt = Fam(ic,2)*Fam(ic,3) - Fam(ic,1)*Fam(ic,4)
               IF (bt.EQ.0.D0) bt = 1.D0
               DO i = 1, 4
                  Fam(ic,i) = Fam(ic,i)/bt
               ENDDO
               Fam(ic,6) = Fam(ic,5)/bt
               IF (Lo(100)) Fam(ic,5) = Fam(ic,5)*Wv(11,i1)
               Fam(ic,7) = Wv(8,i1)**2
               Fam(ic,8) = 2.D0*Fam(ic,7)*Mc(ic,6)
               Fam(ic,9) = Wv(10,i1)
               Fam(ic,10) = Mc(ic,5)
               IF (Lo(200)) Mc(ic,6) = IDINT(Bjm*Fam(ic,7))
            ENDIF
         ELSEIF (jc.GT.0) THEN
            IF (Wv(5,i1).EQ.0.D0) f2 = f3*Wv(9,i1)
            Aa(ic,ic,1) = Aa(ic,ic,1) - f2*Bg(l1 + 1,jc)*Wv(9,i1)
            IF ((Wv(5,i1).NE.0.D0) .AND. (f3.NE.0.D0)) THEN
               b1 = 2.D0*Wv(5,i1)*DFLOAT(l1*(l1 + 1))
               b2 = DFLOAT(l1 + 1)**2 + Wv(5,i1)**2
               c1 = -(DFLOAT(2*l1 + 1)*b2 + 2*Wv(5,i1)**2)/b1
               c2 = DFLOAT(2*l1 + 3)*b2/b1
               Aa(ic,ic,1) = Aa(ic,ic,1)
     &                       - f3*(c1*Bg(l1 + 1,jc) + c2*Bg(l1 + 2,jc))
     &                       *Wv(9,i1)**2
            ENDIF
         ENDIF
      ENDDO
      DO ic = 1, NC
         i1 = Mc(ic,1)
         DO l = 1, ll4
            DO ip = 1, NC
               Aa(ic,ip,l) = Aa(ic,ip,l)/Wv(9,i1)
            ENDDO
         ENDDO
      ENDDO
      IF (.NOT.Lo(227)) RETURN
      IF (Lo(225)) THEN
C TRANSPOSITION IF COUPLED EQUATIONS ARE USED                           MTCH-410
         DO ic = 1, NC
            DO ip = 1, ic
               ax = Aa(ip,ic,1)
               Aa(ip,ic,1) = Aa(ic,ip,1)
               Aa(ic,ip,1) = ax
            ENDDO
         ENDDO
      ENDIF
C LINEAR SYSTEM FOR COMPUTATION OF THE S-MATRIX FROM THE K-MATRIX       MTCH-417
      DO ic = 1, NC
         DO ip = 1, NC
            Aa(ic,NC + ip,1) = 0.D0
            Aa(ic,ip,4) = 0.D0
            Aa(ic,NC + ip,4) = -Aa(ic,ip,1)
         ENDDO
         Aa(ic,ic,4) = 1.D0
      ENDDO
      CALL LINS(Aa(1,1,4),Kab,Aa,Kab,NC,NCXn,Kr,ier)
      RETURN
  300 WRITE (MW,99010) l3, lf, Lmax3
99010 FORMAT (' STARTING VALUES',I3,' FOR INTEGRALS AND',I3,
     &        ' FOR COULOMB FUNCTIONS TOO LARGE . LIMITATION AT',I4)
      RETURN
  400 WRITE (MW,99015) l3, Lmax2
99015 FORMAT (' STARTING VALUE',I4,
     &       ' TOO LARGE FOR COULOMB INTEGRALS WHICH ARE COMPUTED UP TO'
     &       ,I5)
      RETURN
99020 FORMAT (2X,2I3,2X,2I4,3X,4D18.10)
      END
C 01/01/04                                                      ECIS03  LINS-000
      SUBROUTINE LINS(A,Ia,B,Ib,Na,M,K,Ier)
C LINS: JLSB2 VERSION 01 18/12/68 MATH L003 OF SACLAY                   LINS-002
C SOLUTION OF DOUBLE PRECISION COMPLEX LINEAR SYSTEMS WITH REAL AND     LINS-003
C IMAGINARY PARTS IN DIFFERENT ARRAYS                                   LINS-004
C     A REAL COMPONENT OF MATRIX AND SECOND MEMBERS                     LINS-005
C     B IMAGINARY COMPONENT OF MATRIX AND SECOND MEMBERS                LINS-006
C SECOND MEMBERS ARE REPLACED BY SOLUTIONS                              LINS-007
C     IA FIRST DIMENSION OF ARRAY A                                     LINS-008
C     IB FIRST DIMENSION OF ARRAY B                                     LINS-009
C     NA ORDER OF THE SYSTEM                                            LINS-010
C     M  NUMBER OF SECOND MEMBERS                                       LINS-011
C     K  WORKING FIELD OF DIMENSION >/= NA                              LINS-012
C     IER RETURNS DIAGNOSTIC 0 NON SINGULAR MATRIX                      LINS-013
C                            1 SINGULAR MATRIX                          LINS-014
C                            2 QUASI SINGULAR MATRIX                    LINS-015
C***********************************************************************LINS-016
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER Ia, Ib, Ier, M, Na
      REAL*8 A(Ia,1), B(Ib,1)
      INTEGER K(1)
C
C Local variables
C
      REAL*8 aa, ai, amax, amay, aux, bb, bi, d, era, pi, pr, si, sr, t
      DOUBLE PRECISION DABS
      INTEGER i, i1, i2, i3, in, it, j, j3, jmax, kc, mp, n, nab, ndeb,
     &        nm
C
C
      Ier = 0
      n = Na
      ndeb = n + 1
      nm = n + M
      DO i = 1, n
         K(i) = i
      ENDDO
      DO i = 1, n
         amax = DABS(A(i,i)) + DABS(B(i,i))
         jmax = i
         i1 = i + 1
         IF (i.NE.n) THEN
            DO j = i1, n
               amay = DABS(A(i,j)) + DABS(B(i,j))
               IF (amax.LT.amay) THEN
                  amax = amay
                  jmax = j
               ENDIF
            ENDDO
         ENDIF
         IF (amax.EQ.0.D0) GOTO 100
         IF (jmax.NE.i) THEN
            DO i2 = 1, n
               aux = B(i2,i)
               B(i2,i) = B(i2,jmax)
               B(i2,jmax) = aux
               aux = A(i2,i)
               A(i2,i) = A(i2,jmax)
               A(i2,jmax) = aux
            ENDDO
            nab = K(jmax)
            K(jmax) = K(i)
            K(i) = nab
         ENDIF
         IF (i.NE.1) THEN
            sr = 0.D0
            si = 0.D0
            t = 0.D0
            in = i - 1
            DO it = 1, in
               pr = A(it,i)*A(i,it) - B(it,i)*B(i,it)
               pi = A(it,i)*B(i,it) + A(i,it)*B(it,i)
               sr = sr + pr
               si = si + pi
               t = t + DABS(pr) + DABS(pi)
            ENDDO
            era = 1.D-16*(t + DABS(A(i,i) - sr) + DABS(B(i,i) - si))
            IF (amax.LE.era) THEN
               Ier = 2
               WRITE (MW,99005)
99005          FORMAT (' *****  LINS  ***** QUASI SINGULAR MATRIX')
               GOTO 200
            ENDIF
         ENDIF
         DO j = i1, nm
            aa = A(i,j)
            bb = B(i,j)
            ai = A(i,i)
            bi = B(i,i)
            d = ai*ai + bi*bi
            A(i,j) = (aa*ai + bb*bi)/d
            B(i,j) = (bb*ai - aa*bi)/d
         ENDDO
         IF (i.NE.n) THEN
            DO i3 = i1, n
               DO j3 = i1, nm
                  B(i3,j3) = B(i3,j3) - A(i3,i)*B(i,j3) - B(i3,i)
     &                       *A(i,j3)
                  A(i3,j3) = A(i3,j3) - A(i3,i)*A(i,j3) + B(i3,i)
     &                       *B(i,j3)
               ENDDO
            ENDDO
         ENDIF
      ENDDO
      IF (n.NE.1) THEN
         DO kc = ndeb, nm
            j = n
   20       i = j - 1
   40       A(i,kc) = A(i,kc) - A(j,kc)*A(i,j) + B(j,kc)*B(i,j)
            B(i,kc) = B(i,kc) - A(j,kc)*B(i,j) - B(j,kc)*A(i,j)
            i = i - 1
            IF (i.NE.0) GOTO 40
            j = j - 1
            IF (j.NE.1) GOTO 20
         ENDDO
         DO i = 1, n
   60       j = K(i)
            IF (j.GT.i) THEN
               K(i) = K(j)
               K(j) = j
               DO mp = ndeb, nm
                  aux = B(j,mp)
                  B(j,mp) = B(i,mp)
                  B(i,mp) = aux
                  aux = A(j,mp)
                  A(j,mp) = A(i,mp)
                  A(i,mp) = aux
               ENDDO
               GOTO 60
            ENDIF
         ENDDO
      ENDIF
      GOTO 200
  100 Ier = 1
      WRITE (MW,99010)
99010 FORMAT (' *****  LINS  *****       SINGULAR MATRIX')
  200 RETURN
      END
C 01/01/04                                                      ECIS03  CORA-000
      SUBROUTINE CORA(L,Lq,Ll,E,F,V,W,B,C,Lt)
C COEFFICIENTS FOR COULOMB INTEGRALS                                    CORA-002
C M(L1,L2,LQ,R)=SUM FROM R TO INFINITY OF H(L1)*K(L2)/R**(LQ+1)         CORA-003
C EXPRESSED AS SUM ON I OF B(I)*M(L+I-2,L+I-2,1) + C1(R)*H(L)*K(L)      CORA-004
C + C2(R)*H(L)*K(L+1) + C3(R)*H(L+1)*K(L) + C4(R)*H(L+1)*K(L+1)         CORA-005
C WHERE H AND K ARE REGULAR OR IRREGULAR COULOMB FUNCTIONS              CORA-006
C L=INTEGER PART OF (L1+L2-LQ+3)/2 AND I RANGES FROM 1 TO 4.            CORA-007
C INPUT VARIABLES: L,LQ:   L,LQ IN THE EXPRESSIONS ABOVE                CORA-008
C                  LL:     VALUE OF L2-L1+1 WHICH MUST BE >1.           CORA-009
C                  E,F:    COULOMB PARAMETERS                           CORA-010
C                  V,W:    PRODUCT OF R WITH THE WAVE NUMBERS           CORA-011
C                  LT:     .TRUE. FOR ONLY INTEGRALS FROM 0 TO INFINITY CORA-012
C OUTPUT VARIABLES:B(4):   COEFFICIENTS B IN THE EXPRESSIONS ABOVE      CORA-013
C                  C(4):   COEFFICIENTS C                               CORA-014
C                                                                       CORA-015
C THESE RESULTS ARE OBTAINED BY EXPRESSING                              CORA-016
C H(L1)*K(L2)/R**(LQ+1)- SUM ON I OF B(I)*H(L+I-2)*K(L+I-2)/R**2        CORA-017
C AS P1*H(L)*K(L) + P2*H(L)*K(L+1) + P3*H(L+1)*K(L) + P4*H(L+1)*Q(L+1)  CORA-018
C WHERE P1,P2,P3,P4 ARE POLYNOMIAL IN 1/R AND IDENTIFICATION TERM BY    CORA-019
C TERM STARTING FROM THE HIGHEST DEGREE IN 1/R WITH THE DERIVATIVE OF   CORA-020
C  Q1*H(L)*K(L) + Q2*H(L)*K(L+1) + Q3*H(L+1)*K(L) + Q4*H(L+1)*Q(L+1)    CORA-021
C THIS AS BEEN DONE USING AMP ( J.-M. DROUFFE, AMP LANGUAGE REFERENCE   CORA-022
C MANUAL - VERSION 6 - NOTE CEA-N-2297 1982).                           CORA-023
C                                                                       CORA-024
C THE NON RELATIVISTIC RESULTS FOR LQ=6 L2-L1=0,2,4 AND ALL THE         CORA-025
C COEFFICIENTS UP TO LQ=5 HAVE BEEN OBTAINED. THIS ALLOW TRANSFER OF    CORA-026
C ANGULAR MOMENTUM UP TO 5 FOR CENTRAL TERM AND 4 FOR SPIN-ORBIT.       CORA-027
C                                                                       CORA-028
C***********************************************************************CORA-029
      IMPLICIT REAL*8(a - H,O - z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      REAL*8 E, F, V, W
      INTEGER L, Ll, Lq
      LOGICAL Lt
      REAL*8 B(4), C(4)
C
C Local variables
C
      REAL*8 a, a1, a2, a3, a4, b1, b2, b3, b4, bd, c1, den, dn, p, q,
     &       s, u, x, xx, y, z
      DOUBLE PRECISION DABS, DSQRT
      INTEGER i
C
C
      DO i = 1, 4
         B(i) = 0.D0
         C(i) = 0.D0
      ENDDO
      IF ((Lq.GT.6) .OR. (Ll*(Lq-Ll+2).LE.0)) THEN
         WRITE (MW,99005) Lq, Ll
99005    FORMAT (' IN CORA: LQ =',I3,' TOO LARGE OR L1-L2+1=',I3,
     &           ' OUT OF BOUNDS')
         RETURN
      ELSE
         a = DFLOAT(L + 1)
         s = V/W
         x = E*s - F
         IF (DABS(x).LT.1.D-10) x = 0.D0
         u = s**2 - 1.D0
         IF (DABS(u).LT.1.D-10) u = 0.D0
         IF ((x.EQ.0.D0) .AND. (E.EQ.0.D0)) THEN
C FOR NEUTRONS ( COULOMB PARAMETER 0.)                                  CORA1147
            x = W**2
            IF (Lq.EQ.2) THEN
               IF (Ll.EQ.2) GOTO 500
               IF (Ll.EQ.3) THEN
C MULTIPOLE LQ=2 L1=L2-2                                                CORA1162
                  B(2) = (2.D0*a - 1.D0)/(3.D0*s)
                  B(3) = -(a + 1.D0)/1.5D0
                  IF (.NOT.Lt) C(2) = -B(2)/(x*V)
                  RETURN
               ELSE
C MULTIPOLE LQ=2 L1=L2                                                  CORA1159
                  B(2) = 1.D0
                  RETURN
               ENDIF
            ELSEIF (Lq.EQ.3) THEN
               IF (Ll.EQ.1 .OR. Ll.EQ.3) GOTO 500
               IF (Ll.EQ.4) THEN
C MULTIPOLE LQ=3 L1=L2-3                                                CORA1173
                  y = 15.D0*s*DSQRT(s)
                  B(2) = (1.D0 - 2.D0*u*(a - 1.D0))/y
                  B(3) = ((2.D0*a + 1.D0)*u - 1.D0)*s/y
                  IF (Lt) RETURN
                  C(1) = (6.D0*a - 3.D0)/(y*x**2*s)
                  C(2) = (2.D0 + u*(2.D0*a + 1.D0) - (12.D0*a**2 - 3.D0)
     &                   /x)/(y*x*V)
                  C(3) = -3.D0/(y*x*W)
                  C(4) = (6.D0*a + 3.D0)/(y*x**2)
                  RETURN
               ELSE
C MULTIPOLE LQ=3 L1=L2-1                                                CORA1168
                  B(2) = 1.D0/(3.D0*DSQRT(s))
                  B(3) = -s*B(2)
                  IF (.NOT.Lt) C(2) = -B(2)/(x*V)
                  RETURN
               ENDIF
            ELSEIF (Lq.EQ.4) THEN
               IF (Ll.EQ.2 .OR. Ll.EQ.4) GOTO 500
               IF (Ll.EQ.3) THEN
C MULTIPOLE LQ=4 L1=L2-2                                                CORA1192
                  y = 15.D0*s*(a + 2.D0)
                  B(2) = -(u*(a - 1.D0) - 3.D0)/y
                  B(3) = ((a + .5D0)*u - 3.D0)*s/y
                  IF (Lt) RETURN
                  C(1) = (3.D0*a + 6.D0)/(y*x**2*s)
                  C(2) = -(3.D0 - (2.D0*a + 1.D0)*(u - (6.D0*a+12.D0)/x)
     &                   )/(2.D0*y*x*V)
                  C(3) = -1.5D0/(y*x*W)
                  C(4) = -(2.D0*a + 1.D0)*C(3)/W
                  RETURN
               ELSEIF (Ll.EQ.5) THEN
C MULTIPOLE LQ=4 L1=L2-4                                                CORA1202
                  y = 210.D0*(a + 2.D0)*s
                  B(2) = (6.D0 - 2.D0*(a - 1.D0)*u*(2.D0 - (2.D0*a+3.D0)
     &                   *u))/(y*s)
                  B(3) = -(6.D0 - u*(4.D0*a - 1.D0 - u*(2.D0*a+3.D0)*(
     &                   2.D0*a+1.D0)))/y
                  IF (Lt) RETURN
                  c1 = u - (10.D0*a - 5.D0)/x
                  C(1) = -(6.D0*a + 12.D0)*(4.D0 + (2.D0*a + 3.D0)*c1)
     &                   /(y*x**2*s**2)
                  C(2) = -(3.D0 + (2.D0*a + 10.D0)*u - (a + 2.D0)
     &                   *(108.D0*a - 6.D0)/x + (2.D0*a + 3.D0)
     &                   *(2.D0*a + 1.D0)*(u**2 - (6.D0*a+12.D0)*c1/x))
     &                   /(y*x*V*s)
                  C(3) = -(3.D0 - (6.D0*a + 9.D0)*(u - (10.D0*a+20.D0)/x
     &                   ))/(y*x*V)
                  C(4) = -(2.D0*a + 1.D0)*C(3)/W - (30.D0*a + 60.D0)
     &                   /(y*x**2*s)
                  RETURN
               ELSE
C MULTIPOLE LQ=4 L1=L2                                                  CORA1184
                  B(2) = 1.D0/(3.D0*a + 6.D0)
                  B(3) = -(u + 2.D0)*B(2)/(2.D0*s)
                  IF (Lt) RETURN
                  C(2) = -B(2)/(2.D0*x*V)
                  C(3) = C(2)/s
                  C(4) = 3.D0*C(3)/W
                  RETURN
               ENDIF
            ELSEIF (Lq.EQ.5) THEN
               IF (Ll.EQ.1 .OR. Ll.EQ.3 .OR. Ll.EQ.5) GOTO 500
               IF (Ll.EQ.4) THEN
C MULTIPOLE LQ=5 L1=L2-3                                                CORA1226
                  y = 420.D0*(a + 2.D0)*(a + 3.D0)*DSQRT(s)
                  B(2) = (48.D0 - u*(2.D0*a - 2.D0)*(9.D0 - u*(2.D0*a+
     &                   3.D0)))/(y*s)
                  B(3) = -(48.D0 - u*(18.D0*a + 6.D0 - u*(2.D0*a+1.D0)*(
     &                   2.D0*a+3.D0)))/y
                  IF (Lt) RETURN
                  c1 = u - (10.D0*a + 30.D0)/x
                  C(1) = (6.D0*a + 12.D0)*(3.D0 - (2.D0*a + 3.D0)*c1)
     &                   /(y*x**2*s**2)
                  C(2) = ((24.D0*a + 162.D0)*(a + 2.D0)/x - 24.D0 + (
     &                   12.D0*a - 3.D0)*u - (2.D0*a + 1.D0)
     &                   *(2.D0*a + 3.D0)*(u**2 - (6.D0*a+12.D0)*c1/x))
     &                   /(y*x*s*V)
                  C(3) = -(24.D0 - (6.D0*a + 9.D0)*(u - (10.D0*a+20.D0)/
     &                   x))/(y*x*V)
                  C(4) = -(2.D0*a + 1.D0)*C(3)/W - (30.D0*a + 60.D0)
     &                   /(y*x**2*s)
                  RETURN
               ELSEIF (Ll.EQ.6) THEN
C MULTIPOLE LQ=5 L1=L2-5                                                CORA1238
                  y = 3780.D0*(a + 2.D0)*(a + 3.D0)*s*DSQRT(s)
                  B(2) = (48.D0 - u*(2.D0*a - 2.D0)*(15.D0 - u*(6.D0*a+
     &                   6.D0-u*(2.D0*a+3.D0)*(2.D0*a+5.D0))))/(y*s)
                  B(3) = -(48.D0 - u*(30.D0*a - 6.D0 - u*(12.D0*a**2+
     &                   12.D0*a-9.D0-
     &                   u*(8.D0*a**3+36.D0*a**2+46.D0*a+15.D0))))/y
                  IF (Lt) RETURN
                  c1 = u**2 - (10.D0*a + 30.D0)*(u - (14.D0*a - 7.D0)/x)
     &                 /x
                  C(1) = (6.D0*a + 12.D0)
     &                   *(3.D0 + (6.D0*a + 24.D0)*u - (a + 3.D0)
     &                   *(260.D0*a + 110.D0)/x + (2.D0*a + 5.D0)
     &                   *(2.D0*a + 3.D0)*c1)/(y*x**2*s**2)
                  C(2) = -(24.D0 - (18.D0*a - 9.D0)*u + (6.D0*a + 12.D0)
     &                   *(66.D0*a + 183.D0)/x - (2.D0*a + 3.D0)
     &                   *(18.D0*u**2 - (12.D0*a+24.D0)
     &                   *((8.D0*a+29.D0)*u-(a+3.D0)*(200.D0*a-40.D0)/x)
     &                   /x + (2.D0*a+5.D0)*(2.D0*a+1.D0)
     &                   *(u**3-(6.D0*a+12.D0)*c1/x)))/(y*x*V*s)
                  c1 = u**2 - (10.D0*a + 20.D0)
     &                 *(u - (14.D0*a + 42.D0)/x)/x
                  C(3) = -(24.D0 - (12.D0*a + 3.D0)*u + (6.D0*a + 9.D0)
     &                   *(2.D0*a + 5.D0)*c1 - (a + 2.D0)
     &                   *(360.D0*a + 1170.D0)/x)/(y*x*V)
                  C(4) = (18.D0*a - 36.D0 + (6.D0*a + 9.D0)*((6.D0*a+
     &                   33.D0)*u + (2.D0*a+1.D0)*(2.D0*a+5.D0)
     &                   *c1 - (a+2.D0)*(260.D0*a+830.D0)/x))/(y*x**2*s)
                  RETURN
               ELSE
C MULTIPOLE LQ=5 L1=L2-1                                                CORA1215
                  y = 60.D0*(a + 2.D0)*(a + 3.D0)*DSQRT(s)
                  B(2) = (16.D0 - u*(2.D0*a - 2.D0))/y
                  B(3) = -(16.D0 - u*(2.D0*a - 10.D0 + u*(2.D0*a+1.D0)))
     &                   /(y*s)
                  IF (Lt) RETURN
                  C(1) = 6.D0*(a + 2.D0)/(s*y*x**2)
                  C(2) = -(8.D0 - (2.D0*a + 1.D0)*(u - 6.D0*(a+2.D0)/x))
     &                   /(y*x*V)
                  C(3) = -(8.D0 + 3.D0*u - 30.D0*(a + 2.D0)/x)/(y*x*V*s)
                  C(4) = (6.D0*a - 12.D0 + (15.D0*u - (60.D0*a+30.D0)*(a
     &                   +2.D0)/x)/s**2)/(y*x**2)
                  RETURN
               ENDIF
            ELSEIF (Lq.EQ.6) THEN
               IF (Ll.EQ.2 .OR. Ll.EQ.4 .OR. Ll.EQ.6) GOTO 500
               IF (Ll.EQ.3) THEN
C MULTIPOLE LQ=6 L1=L2-2                                                CORA1272
                  y = 840.D0*(a + 2.D0)*(a + 3.D0)*(a + 4.D0)*s
                  B(2) = (160.D0 - u*(2.D0*a - 2.D0)*(16.D0 - u*(2.D0*a+
     &                   3.D0)))/y
                  B(3) = -(160.D0 - u*(32.D0*a - 112.D0 - u*((4.D0*a-
     &                   24.D0)*a-10.D0+u*(2.D0*a+3.D0)*(2.D0*a+1.D0))))
     &                   /(y*s)
                  IF (Lt) RETURN
                  c1 = u - (10.D0*a + 30.D0)/x
                  C(1) = (60.D0 - (12.D0*a + 18.D0)*c1)*(a + 2.D0)
     &                   /(y*x**2*s)
                  C(2) = -(80.D0 - (26.D0*a + 4.D0)*u + (60.D0*a**2 -
     &                   240.D0)/x + (2.D0*a + 1.D0)*(2.D0*a + 3.D0)
     &                   *(u**2 - (6.D0*a+12.D0)*c1/x))/(y*x*V)
                  C(3) = -(80.D0 - u*(6.D0*a - 36.D0) + 60.D0*(a**2 -
     &                   4.D0)/x - (6.D0*a + 9.D0)
     &                   *(u**2 - (10.D0*a+20.D0)*(u-(14.D0*a+42.D0)/x)
     &                   /x))/(y*x*V*s)
                  C(4) = -(105.D0*(1.D0 - (10.D0*a+20.D0)/x) - (60.D0*a
     &                   - 15.D0)*s**2 + (6.D0*a + 3.D0)*(2.D0*a + 3.D0)
     &                   *(u*s**2 - (10.D0*a+20.D0)
     &                   *(1.D0+u-(14.D0*a+42.D0)/x)/x))/(y*x**2*s**2)
                  RETURN
               ELSEIF (Ll.EQ.5) THEN
C MULTIPOLE LQ=6 L1=L2-4                                                CORA1288
                  y = 7560.D0*(a + 2.D0)*(a + 3.D0)*(a + 4.D0)*s
                  B(2) = (480.D0 - u*(2.D0*a - 2.D0)*(96.D0 - u*(24.D0*a
     &                   +33.D0-u*(2.D0*a+3.D0)*(2.D0*a+5.D0))))/(y*s)
                  B(3) = -(480.D0 - u*(192.D0*a + 48.D0 - u*(2.D0*a+3.D0
     &                   )*(24.D0*a+6.D0-u*(2.D0*a+1.D0)*(2.D0*a+5.D0)))
     &                   )/y
                  IF (Lt) RETURN
                  c1 = (u**2 - (10.D0*a + 30.D0)*(u - (14.D0*a+56.D0)/x)
     &                 /x)
                  C(1) = (6.D0*a + 12.D0)
     &                   *(30.D0 - (12.D0*a + 3.D0)*u - (a + 3.D0)
     &                   *(80.D0*a + 470.D0)/x + (2.D0*a + 3.D0)
     &                   *(2.D0*a + 5.D0)*c1)/(y*x**2*s**2)
                  C(2) = -(240.D0 - u*(126.D0*a - 36.D0) + 180.D0*(a**2
     &                   - 4.D0)/x + (2.D0*a + 3.D0)
     &                   *((18.D0*a-9.D0)*u**2 - (6.D0*a+12.D0)
     &                   *((2.D0*a-49.D0)*u+(10.D0*a+30.D0)
     &                   *(22.D0*a+109.D0)/x)/x - (2.D0*a+1.D0)
     &                   *(2.D0*a+5.D0)*(u**3-(6.D0*a+12.D0)*c1/x)))
     &                   /(y*x*W*s**2)
                  c1 = (2.D0*a + 5.D0)
     &                 *(u**2 - (10.D0*a + 20.D0)*(u - (14.D0*a+42.D0)
     &                 /x)/x)
                  C(3) = -(240.D0 - (66.D0*a + 84.D0)*u + 180.D0*(a**2 -
     &                   4.D0)/x + (6.D0*a + 9.D0)*c1)/(y*x*V)
                  C(4) = ((a - 2.D0)*(180.D0 - (72.D0*a+108.D0)*u)
     &                   + (6.D0*a + 9.D0)
     &                   *((2.D0*a+1.D0)*c1 - (a+2.D0)*(80.D0*a+740.D0)
     &                   /x))/(y*x**2*s)
                  RETURN
               ELSEIF (Ll.EQ.7) THEN
C MULTIPOLE LQ=6 L1=L2-6                                                CORA1308
                  y = 83160.D0*(a + 2.D0)*(a + 3.D0)*(a + 4.D0)*s**2
                  B(2) = (480.D0 - u*(2.D0*a - 2.D0)*(144.D0 - u*(54.D0*
     &                   a+57.D0-u*(2.D0*a+5.D0)
     &                   *(8.D0*a+6.D0-u*(2.D0*a+7.D0)*(2.D0*a+3.D0)))))
     &                   /(y*s)
                  B(3) = -(480.D0 - u*(288.D0*a - 48.D0 - u*(108.D0*a**2
     &                   +120.D0*a-78.D0-u*(2.D0*a+3.D0)*(2.D0*a+5.D0)
     &                   *(8.D0*a-5.D0-u*(2.D0*a+1.D0)*(2.D0*a+7.D0)))))
     &                   /y
                  IF (Lt) RETURN
                  c1 = u**3 - (10.D0*a + 30.D0)
     &                 *(u**2 - (14.D0*a + 56.D0)*(u - (18.D0*a-9.D0)/x)
     &                 /x)/x
                  C(1) = (6.D0*a + 12.D0)
     &                   *(30.D0 - (18.D0*a - 3.D0)*u + (10.D0*a +
     &                   30.D0)*(118.D0*a + 457.D0)/x - (2.D0*a + 5.D0)
     &                   *((4.D0*a+36.D0)*u**2 - (10.D0*a+30.D0)
     &                   *((24.D0*a+106.D0)*u-(14.D0*a+56.D0)
     &                   *(52.D0*a+6.D0)/x)/x + (2.D0*a+7.D0)
     &                   *(2.D0*a+3.D0)*c1))/(y*x**2*s**2)
                  C(2) = -(240.D0 - (174.D0*a - 84.D0)*u + ((72.D0*a+
     &                   36.D0)*a - 63.D0)
     &                   *u**2 + (180.D0*(a**2-4.D0) - (6.D0*a+12.D0)
     &                   *(((136.D0*a+772.D0)*a+1377.D0)
     &                   *u-(10.D0*a+30.D0)
     &                   *((712.D0*a+3370.D0)*a+2193.D0)/x))
     &                   /x - (2.D0*a + 5.D0)*(2.D0*a + 3.D0)
     &                   *((2.D0*a-26.D0)*u**3 + (6.D0*a+12.D0)
     &                   *((14.D0*a+82.D0)*u**2-(10.D0*a+30.D0)
     &                   *((38.D0*a+166.D0)*u-(14.D0*a+56.D0)
     &                   *(70.D0*a-19.D0)/x)/x)/x - (2.D0*a+7.D0)
     &                   *(2.D0*a+1.D0)*(u**4-6.D0*(a+2.D0)*c1/x)))
     &                   /(y*x*V*s)
                  c1 = u**3 - (10.D0*a + 20.D0)
     &                 *(u**2 - (14.D0*a + 42.D0)
     &                 *(u - (18.D0*a+72.D0)/x)/x)/x
                  C(3) = -(240.D0 - (114.D0*a + 36.D0)*u + 180*(a**2 -
     &                   4.D0)/x + (6.D0*a + 15.D0)
     &                   *((6.D0*a-1.D0)*u**2 + (10.D0*a+20.D0)
     &                   *((10.D0*a+57.D0)*u-(14.D0*a+42.D0)
     &                   *(34.D0*a+141.D0)/x)/x - (2.D0*a+7.D0)
     &                   *(2.D0*a+3.D0)*c1))/(y*x*V)
                  C(4) = (180.D0*a - 360.D0 - (108.D0*a + 72.D0)
     &                   *(a - 2.D0)*u + (60.D0*a + 120.D0)
     &                   *((118.D0*a+796.D0)*a + 1401.D0)
     &                   /x - (2.D0*a + 5.D0)*(6.D0*a + 9.D0)
     &                   *((4.D0*a+47.D0)*u**2 - (10.D0*a+20.D0)
     &                   *((24.D0*a+117.D0)*u-(14.D0*a+42.D0)
     &                   *(52.D0*a+215.D0)/x)/x + (2.D0*a+7.D0)
     &                   *(2.D0*a+1.D0)*c1))/(y*x**2*s)
                  RETURN
               ELSE
C MULTIPOLE LQ=6 L1=L2                                                  CORA1259
                  y = 120.D0*(a + 2.D0)*(a + 3.D0)*(a + 4.D0)*s**2
                  B(2) = (32.D0 + u*(32.D0 - u*(2.D0*a-2.D0)))/y
                  B(3) = -(32.D0 + u*(48.D0 - u*(4.D0*a-14.D0+u*(2.D0*a+
     &                   1.D0))))/(y*s)
                  IF (Lt) RETURN
                  C(1) = (a + 2.D0)
     &                   *(12.D0 + 6.D0*u - (60.D0*a + 180.D0)/x)
     &                   /(y*x**2*s)
                  C(2) = -(16.D0 - u*(2.D0*a - 12.D0 + u*(2.D0*a+1.D0))
     &                   + (6.D0*a + 12.D0)
     &                   *(2.D0*a - 4.D0 + (2.D0*a+1.D0)
     &                   *(u-(10.D0*a+30.D0)/x))/x)/(y*x*V)
                  C(3) = -(16.D0 + u*(2.D0*a + 20.D0 + 3.D0*u) - (6.D0*a
     &                   + 12.D0)
     &                   *(4.D0 - 2.D0*a + 5.D0*u + (20.D0*a+10.D0)
     &                   *(a+3.D0)/x)/x)/(y*x*s*V)
                  C(4) = ((12.D0*a - 24.D0)*s**2 + (6.D0*a + 3.D0)
     &                   *(u**2 - (10.D0*a+20.D0)
     &                   *(2.D0+u+(4.D0*a+2.D0)*(a+3.D0)/x)/x))
     &                   /(y*x**2*s**2)
                  RETURN
               ENDIF
            ELSE
               IF ((Ll.EQ.1) .OR. (u.EQ.0)) GOTO 500
C MULTIPOLE LQ=1 L1=L2-1 (USELESS)                                      CORA1151
               B(2) = (u + 2.D0 - 2.D0*a)/(DSQRT(s)*u)
               B(3) = DSQRT(s)*(2.D0*a + 2.D0)/u
               IF (Lt) RETURN
               C(1) = DSQRT(s)/(u*x)
               C(4) = C(1)/s
               RETURN
            ENDIF
         ELSE
            p = s**2*(a**2 + E**2)
            q = a**2 + F**2
            y = E*s + F
            z = E**2 - F**2
            IF (DABS(z).LT.1.D-10) z = 0.D0
            IF (x.EQ.0.D0 .AND. z.EQ.0.D0) z = 1.D0
            den = 2.D0*x**2*(p - q) + 8.D0*z*s**2
            z = u
            IF (x.EQ.0.D0 .AND. z.EQ.0.D0) z = -1.D0/(E*F)
            IF (Lq.EQ.2) THEN
               IF (Ll.EQ.2) THEN
C MULTIPOLE LQ=2 L1=L2-1                                                CORA-114
                  b1 = x*(a - 1.D0) - E*s
                  b3 = -(a - 1.D0)**2
                  b2 = b3/(a - .5D0)
                  bd = -den*a*(a - 1.D0)*(2.D0*a - 3.D0)
     &                 *DSQRT(s*((a-1.D0)**2 + E**2))/(2.D0*a - 1.D0)
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 + 2.D0*a*(a - 1.D0)**2/W
                     C(2) = b3
                     C(3) = b2
                  ENDIF
               ELSEIF (Ll.EQ.3) THEN
C MULTIPOLE LQ=2 L1=L2-2                                                CORA-125
                  b1 = q
                  b3 = -3.D0*E*s - x*(a - 1.D0)
                  b4 = (a - 1.D0)/(a - .5D0)
                  bd = -3.D0*den*a*DSQRT(s*q*((a-1.D0)**2 + E**2))
     &                 /(2.D0*a - 1.D0)
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1
                     C(2) = b3 - 2.D0*a*(a - 1.D0)/W
                     C(4) = b4
                  ENDIF
                  GOTO 50
               ELSE
C MULTIPOLE LQ=2 L1=L2                                                  CORA-096
                  a1 = 2.D0*z*a**2*y
                  a2 = -z*y*(2.D0*a + 1.D0)
     &                 *(((a-1.D0)*a - .5D0)*y**2 + 2.D0*a**2*(a - 1.D0)
     &                 **2*(s**2 + 1.D0))
                  a3 = 2.D0*z*(2.D0*a + 1.D0)*(a - 1.D0)**2*y
                  a4 = 0.D0
                  bd = den*(a - 1.D0)/DSQRT(s)
                  IF (.NOT.Lt) C(1) = -1.D0
                  IF (x.NE.0) THEN
                     a1 = a1 +
     &                    x*(4.D0*F*E*s - 2.D0*a*(a + q + a*s**2 + p))
                     a2 = a2 +
     &                    x*((a + .5D0)*((((4.D0*a-6.D0)*a+2.D0)*a-1.D0)
     &                    *(q+p*s**2) + 4.D0*(2.D0*a-3.D0)
     &                    *F*E*s*(q+p+s**2+1.D0)
     &                    + (((4.D0*a+2.D0)*a-14.D0)*a+1.D0)*(q*s**2+p)
     &                    + a**2*((s**4+1.D0)*((2.D0*a-6.D0)*a+5.D0)
     &                    -s**2*(4.D0*(a+1.D0)*a-14.D0)))
     &                    + p*q*((8.D0*a-4.D0)*a + 8.D0))
                     a3 = a3 - 2.D0*x*(a - 1.D0)
     &                    *((2.D0*a - 3.D0)*(F**2 + E**2*s**2)
     &                    + 4.D0*(2.D0*a + 1.D0)*F*E*s + (s**2 + 1.D0)
     &                    *(a + 1.D0)*((6.D0*a+1.D0)*a - 3.D0))
                     a4 = 4.D0*(a - 1.D0)*x
                  ENDIF
                  GOTO 300
               ENDIF
            ELSEIF (Lq.EQ.3) THEN
               IF (Ll.EQ.2) THEN
C MULTIPOLE LQ=3 L1=L2-1                                                CORA-165
                  b1 = q/(a - 1.D0)
                  b3 = -x
                  b4 = 1.D0/(a + 1.D0)
                  bd = -3.D0*den*a*DSQRT(q)
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1
                     C(2) = b3 - 2.D0*a/W
                     C(4) = b4
                  ENDIF
                  GOTO 50
               ELSEIF (Ll.EQ.3) THEN
C MULTIPOLE LQ=3 L1=L2-2                                                CORA-190
                  b1 = -q*(2.D0*a - 1.D0)
     &                 *((2.D0*a - 3.D0)*(a + 1.D0)*x + (a - 3.D0)*y)
     &                 /(a - 1.D0)
                  b2 = 6.D0*q*(a - 1.D0)
                  b3 = ((a - 1.D0)*(6.D0*a - 3.D0)*q + (2.D0*a - 1.D0)
     &                 *((a+1.D0)*x + 2.D0*y)*(2.D0*a - 3.D0)
     &                 *x - (a - 1.D0)*(6.D0*a - 9.D0)*p)
                  b4 = -((2.D0*a - 1.D0)*x + y)*(2.D0*a - 3.D0)
                  bd = 12.D0*a**2*(2.D0*a - 3.D0)
     &                 *den*s*DSQRT(q*((a-1.D0)**2 + E**2))
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 - 6.D0*q*a*(a - 1.D0)*(2.D0*a - 1.D0)/W
                     C(2) = b3 + a*(4.D0*a - 6.D0)*(2.D0*a - 1.D0)
     &                      *((a + 1.D0)*x + 2.D0*y + 3.D0*a*(a - 1.D0)
     &                      /W)/W
                     C(3) = b2
                     C(4) = b4 - 6.D0*a*(a - 1.D0)*(2.D0*a - 3.D0)/W
                  ENDIF
               ELSEIF (Ll.EQ.4) THEN
C MULTIPOLE LQ=3 L1=L2-3                                                CORA-204
                  b1 = -
     &                 q*(3.D0*E*s*y + a*(3.D0*x*y + 2.D0*(a+1.D0)*(x**2
     &                 +2.D0*a-1.D0-2.D0*(a-1.D0)*s**2)))
                  b2 = 3.D0*q*(a*x + y)
                  b4 = -(3.D0*F*y + a*(3.D0*x*y + 2.D0*(a-1.D0)*(x**2+
     &                 2.D0*a+2.D0-(2.D0*a+1.D0)*s**2)))
                  b3 = -x*b4*(a + 1.D0) + 3.D0*q*(y + a*x)
     &                 + a*(3.D0*a + 1.5D0)*(1.D0 - s**2)
     &                 *((3.D0*a - 2.D0)*y + ((a-2.D0)*a + 2.D0)*x)
                  bd = 30.D0*a**2*den*s*DSQRT(q*((a-1.D0)**2 + E**2)
     &                 *((a+1.D0)**2 + F**2))
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 - 3.D0*q*(2.D0*a - 1.D0)
     &                      *((6.D0*a + 4.D0)*F + (a + 1.D0)*(a + 4.D0)
     &                      *x + 4.D0*a*(a**2 - 1.D0)/W)/W
                     C(2) = b3 + ((4.D0*a**2*(a**2-1.D0)*(2.D0*a-1.D0-s
     &                      **2*(2.D0*a+1.D0)) + (18.D0*a**2-3.D0)
     &                      *y**2 + a*(12.D0*a**2+3.D0)
     &                      *x*y + (a**2-1.D0)*(4.D0*a**2-3.D0)*x**2)
     &                      + 3.D0*a*(4.D0*a**2 - 1.D0)
     &                      *(5.D0*a*y + (a**2+4.D0)
     &                      *x + 4.D0*a*(a**2-1.D0)/W)/W)/W
                     C(3) = b2 + 12.D0*q*(a**2 - 1.D0)/W
                     C(4) = b4 - 3.D0*(2.D0*a + 1.D0)
     &                      *((6.D0*a - 4.D0)*F + a*(a + 1.D0)
     &                      *x + 4.D0*a*(a**2 - 1.D0)/W)/W
                  ENDIF
               ELSE
C MULTIPOLE LQ=3 L1=L2                                                  CORA-136
                  b1 = y/(a - 1.D0)
                  b2 = 1.D0
                  b3 = 1.D0
                  bd = den*a*(2.D0*a - 3.D0)
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 - 2.D0*a/W
                     C(2) = b3
                     C(3) = b2
                  ENDIF
                  GOTO 20
               ENDIF
               GOTO 100
            ELSEIF (Lq.EQ.4) THEN
               IF (Ll.EQ.2) THEN
C MULTIPOLE LQ=4 L1=L2-1                                                CORA-237
                  b1 = q*(3.D0*E*s - a*x)*(4.D0*a + 6.D0)/(a - 1.D0)
                  b2 = 18.D0*q
                  b3 = ((2.D0*a + 3.D0)*(3.D0*q + (2.D0*a-3.D0)*x**2)
     &                 - (6.D0*a - 9.D0)*p)
                  b4 = (3.D0*F - a*x)*(4.D0*a - 6.D0)/(a + 1.D0)
                  bd = 12.D0*den*a**2*DSQRT(s*q)*(4.D0*a**2 - 9.D0)
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 - 6.D0*q*a*(2.D0*a + 3.D0)/W
                     C(2) = b3 + 2.D0*a*(4.D0*a**2 - 9.D0)
     &                      *(x + 3.D0*a/W)/W
                     C(3) = b2
                     C(4) = b4 - 6.D0*a*(2.D0*a - 3.D0)/W
                  ENDIF
               ELSEIF (Ll.EQ.3) THEN
C MULTIPOLE LQ=4 L1=L2-2                                                CORA-249
                  b1 = ((2.D0*a - E**2)*s**2 + (a + 2.D0)
     &                 *(2.D0*E*F*s - a*(2.D0*a+2.D0+F**2)/(a-1.D0))
     &                 /(a + 1.D0))
                  b2 = 6.D0*q*((a + 1.D0)*x - 3.D0*F)
                  b3 = ( - x*(4.D0*a + 6.D0)*b1*(a**2 - 1.D0)
     &                 + 3.D0*(p*((2.D0*a+5.D0)*x-3.D0*y) + (1.D0-s**2)
     &                 *a*(a+2.D0)*(2.D0*a+3.D0)*(a*x+E*s)))
                  b4 = ((4.D0*a + 6.D0)
     &                 *(b1*(a-1.D0) + 3.D0*a*(s**2-1.D0))
     &                 + 3.D0*y*(3.D0*y - (2.D0*a+5.D0)*x)/(a + 1.D0))
                  b1 = q*(a + 1.D0)*(4.D0*a + 6.D0)*b1
                  bd = 60.D0*den*a**2*(a + 2.D0)*(2.D0*a + 3.D0)
     &                 *DSQRT(s*q*((a+1.D0)**2 + F**2))
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 - 6.D0*q*(a + 2.D0)*(2.D0*a + 3.D0)
     &                      *(E*s + a*(x + 4.D0*(a+1.D0)/W))/W
                     C(2) = b3 + 2.D0*(2.D0*a + 3.D0)
     &                      *(6.D0*E*F*s + a*(F*((2.D0*a+13.D0)
     &                      *x+6.D0*F) + (a+1.D0)
     &                      *(2.D0*a*(2.D0*a+4.D0-(2.D0*a+1.D0)*s**2)
     &                      +(2.D0*a+1.D0)*x**2)) + 3.D0*a*(a + 2.D0)
     &                      *(2.D0*a + 1.D0)
     &                      *((a+1.D0)*x + 5.D0*F + a*(4.D0*a+4.D0)/W)
     &                      /W)/W
                     C(3) = b2 + 12.D0*q*(a + 1.D0)*(2.D0*a + 3.D0)/W
                     C(4) = b4 - (12.D0*a + 6.D0)
     &                      *((a + 6.D0)*F + a*(a + 1.D0)
     &                      *(x + (4.D0*a+6.D0)/W))/W
                  ENDIF
               ELSEIF (Ll.EQ.4) THEN
C MULTIPOLE LQ=4 L1=L2-3                                                CORA-271
                  b1 = F*q*(12.D0*(q - (2.D0*a-1.D0)*(2.D0*a-5.D0))
     &                 /((2.D0*a-3.D0)*(a-1.D0)) + (26.D0*a - 10.D0)*u)
                  b2 = q*(36.D0*(q + 4.D0*a**2 - 5.D0)/(2.D0*a - 3.D0)
     &                 - 30.D0*(a**2 - 1.D0)*u)/(2.D0*a + 3.D0)
                  b3 = b2 +
     &                 u*(a**2*(6.D0*a + 3.D0)*((4.D0*a+10.D0) + 5.D0*
     &                 (a**2-1.D0)*u) - 18.D0*q*a*(3.D0*a + 4.D0))
     &                 /(2.D0*a + 3.D0)
                  b4 = F*(12.D0*(q - (2.D0*a+5.D0)*(2.D0*a+1.D0))
     &                 + u*(4.D0*a + 2.D0)*((13.D0*a+22.D0)*a - 15.D0))
     &                 /((a + 1.D0)*(2.D0*a + 3.D0))
                  IF (x.NE.0.D0) THEN
                     b1 = b1 -
     &                    2.D0*q*x*((6.D0*q*(a-2.D0) + (((28.D0*a-30.D0)
     &                    *a-46.D0)*a+30.D0))/((2.D0*a-3.D0)*(a-1.D0))
     &                    - (a + 1.D0)*((9.D0*a-5.D0)*u - 2.D0*x**2))
                     b2 = b2 - 12.D0*q*x*(F - x*(a + 1.D0))
     &                    /(2.D0*a + 3.D0)
                     b3 = b3 + x*(24.D0*q*(a*x - F) + (2.D0*a + 1.D0)
     &                    *(12.D0*(2.D0*a+5.D0)
     &                    *F - ((44.D0*a+80.D0)*a-30.D0)
     &                    *F*u + x*a*(28.D0*a+52.D0-u*(24.D0*a+2.D0)
     &                    *(a+1.D0)) + 12.D0*F*x**2 +
     &                    4.D0*a*x**3*(a+1.D0)))/(2.D0*a + 3.D0)
                     b4 = b4 - x*(12.D0*(a - 1.D0)*q + (4.D0*a + 2.D0)
     &                    *(6.D0*F*x +
     &                    a*(14.D0*a+26.D0-(a+1.D0)*((9.D0*a+1.D0)
     &                    *u-2.D0*x**2))))/((2.D0*a + 3.D0)*(a + 1.D0))
                  ENDIF
                  bd = 360.D0*den*a**2*s*DSQRT(s*q*((a+1.D0)**2 + F**2)
     &                 *((a-1.D0)**2 + E**2))
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 + q*(12.D0*(a*(2.D0*a-1.D0)*(2.D0*a-5.D0)
     &                      - q*(9.D0*a-12.D0))/(2.D0*a - 3.D0)
     &                      + 30.D0*a*u*(a**2 - 1.D0)
     &                      - 24.D0*(2.D0*a - 1.D0)
     &                      *(F*(7.D0*a+5.D0) + 5.D0*a*(a**2-1.D0)/W)/W)
     &                      /W
                     C(2) = b3 + (F*(48.D0*q - 8.D0*a*u*(2.D0*a+1.D0)*(
     &                      7.D0*a-5.D0))
     &                      + 6.D0*(10.D0*q*(11.D0*a**2-2.D0)
     &                      - a**2*(2.D0*a+1.D0)
     &                      *(30.D0*(2.D0*a-1.D0)+5.D0*u*(a**2-1.D0)
     &                      -(8.D0*a-4.D0)*(12.D0*F+5.D0*(a**2-1.D0)/W)
     &                      /W))/W)/W
                     C(3) = b2 + 24.D0*q*(2.D0*F + 5.D0*(a**2 - 1.D0)/W)
     &                      /W
                     C(4) = b4 + ((12.D0*a*(2.D0*a+1.D0)*(2.D0*a+5.D0) -
     &                      36.D0*q*(3.D0*a+4.D0)
     &                      + 30.D0*a*u*(2.D0*a+1.D0)*(a**2-1.D0))
     &                      /(2.D0*a + 3.D0) - 24.D0*(2.D0*a + 1.D0)
     &                      *(F*(7.D0*a-5.D0) + 5.D0*a*(a**2-1.D0)/W)/W)
     &                      /W
                     IF (x.NE.0.D0) THEN
                        C(1) = C(1)
     &                         - 12.D0*x*q*((a + 2.D0)*(3.D0*F + (a+
     &                         1.D0)*x) + (4.D0*a - 2.D0)*(a + 1.D0)
     &                         *(a + 5.D0)/W)/W
                        C(2) = C(2)
     &                         + x*((12.D0*q*(5.D0*a+6.D0) + (2.D0*a+
     &                         1.D0)
     &                         *(12.D0*F*x*(a+2.D0)-2.D0*a*(4.D0*a+10.D0
     &                         +(a+1.D0)*(u*(9.D0*a-5.D0)-2.D0*x**2))))
     &                         + 12.D0*(2.D0*a + 1.D0)
     &                         *(F*((7.D0*a+24.D0)*a-10.D0) + a*(a+1.D0)
     &                         *((a+2.D0)*x+(4.D0*a-2.D0)*(a+5.D0)/W))
     &                         /W)/W
                        C(3) = C(3) + 24.D0*x*q*(a + 1.D0)/W
                        C(4) = C(4) - 12.D0*x*(2.D0*a + 1.D0)
     &                         *((3.D0*F*(a+2.D0) + a*x*(a+1.D0))
     &                         /(2.D0*a + 3.D0) + 2.D0*a*(a + 1.D0)/W)/W
                     ENDIF
                  ENDIF
               ELSEIF (Ll.EQ.5) THEN
C MULTIPOLE LQ=4 L1=L2-4                                                CORA-314
                  b1 = 6.D0*q*(q*((42.D0*a+3.D0)*u - 36.D0)
     &                 + a*(24.D0*a - 12.D0 - u*((34.D0*a+3.D0)*a+8.D0)
     &                 - (8.D0*a+12.D0)*(a**2-1.D0)*u**2))
                  b2 = 18.D0*q*(12.D0 - u*(9.D0*a + 1.D0))*F
                  b3 = 9.D0*F*(q*(24.D0 - u*(38.D0*a+2.D0))
     &                 + u*a*(2.D0*a + 1.D0)*(a + 1.D0)
     &                 *(4.D0 + (17.D0*a-12.D0)*u))
                  b4 = 6.D0*(q*((42.D0*a+3.D0)*u - 36.D0)
     &                 + a*(2.D0*a + 1.D0)
     &                 *(12.D0 - (17.D0*a-2.D0)*u - u**2*(4.D0*a+6.D0)
     &                 *(a-1.D0)))
                  IF (x.NE.0.D0) THEN
                     b1 = b1 -
     &                    q*x*(x*(24.D0*q + (56.D0*a+188.D0)*a + 108.D0)
     &                    + 108.D0*(2.D0*a + 3.D0)
     &                    *F - 2.D0*(2.D0*a + 3.D0)*(58.D0*a + 7.D0)
     &                    *F*u - 2.D0*(a + 1.D0)*(2.D0*a + 3.D0)
     &                    *(15.D0*a + 4.D0)*u*x + 12.D0*(2.D0*a + 3.D0)
     &                    *F*x**2 + 4.D0*(a + 1.D0)*(2.D0*a + 3.D0)
     &                    *x**3)
                     b2 = b2 +
     &                    q*x*(24.D0*F*x + (a + 1.D0)*(108.D0 - (66.D0*a
     &                    +24.D0)*u + 12.D0*x**2))
                     b3 = b3 +
     &                    x*(24.D0*F*q*x + (a + 1.D0)*(q*(324.D0+36.D0*x
     &                    **2-(498.D0*a+42.D0)*u) + (2.D0*a+1.D0)
     &                    *(F*x*(108.D0-(152.D0*a+24.D0)*u+12.D0*x**2)
     &                    -a*(72.D0-(168.D0*a-12.D0)
     &                    *u-((57.D0*a+24.D0)*a-36.D0)
     &                    *u**2-x**2*(28.D0-(36.D0*a+20.D0)*u+4.D0*x**2)
     &                    ))))
                     b4 = b4 + x*(x*(a*(2.D0*a+1.D0)*(30.D0*a+20.D0)*u -
     &                    24.D0*q) - (8.D0*a + 4.D0)
     &                    *(F*(27.D0-(29.D0*a+6.D0)*u)
     &                    + x*(7.D0*a+3.D0*F*x+a*x**2)))
                  ENDIF
                  bd = 2520.D0*den*a**2*s*DSQRT(s*q*((a+1.D0)**2 + F**2)
     &                 *((a-1.D0)**2 + E**2)*((a+2.D0)**2 + F**2))
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 + 18.D0*q*(F*((a-1.D0)*(8.D0*a-4.D0) -
     &                      20.D0*q + (2.D0*a+3.D0)
     &                      *((17.D0*a-3.D0)*a-4.D0)*u)
     &                      - 4.D0*(15.D0*q*((4.D0*a+4.D0)*a-1.D0)
     &                      - a*(2.D0*a-1.D0)*((34.D0*a+55.D0)*a+16.D0)
     &                      - (2.D0*a+3.D0)
     &                      *(2.D0*a*u*(a+1.D0)*(a-1.D0)*(a+2.D0)
     &                      -5.D0*(2.D0*a-1.D0)
     &                      *(F*((5.D0*a+5.D0)*a+4.D0)
     &                      +2.D0*a*(a**2-1.D0)*(a+2.D0)/W)/W))/W)/W
                     C(2) = b3 + (360.D0*q**2 - 72.D0*q*(4.D0*a**2 +
     &                      1.D0) - 24.D0*(a + 1.D0)
     &                      *u*(q*((66.D0*a-12.D0)*a-9.D0)
     &                      - a**2*(2.D0*a+1.D0)
     &                      *(34.D0*a-19.D0+u*(a-1.D0)*(2.D0*a+3.D0)))
     &                      + 18.D0*(20.D0*q*F*((20.D0*a+14.D0)*a-3.D0)
     &                      - (a+1.D0)
     &                      *(a*F*((4.D0*a**2-1.D0)*140.D0+u*(10.D0*a+
     &                      15.D0)*(2.D0*a+1.D0)*(5.D0*a-4.D0))
     &                      -4.D0*(10.D0*q*(((30.D0*a+19.D0)*a-1.D0)
     &                      *a-6.D0)-a**2*(2.D0*a+1.D0)
     &                      *((2.D0*a-1.D0)*(84.D0*a+56.D0)
     &                      +(2.D0*a+3.D0)
     &                      *((2.D0*a-2.D0)*(a+2.D0)*u-(10.D0*a-5.D0)
     &                      *(7.D0*F+2.D0*(a-1.D0)*(a+2.D0)/W)/W)))/W))
     &                      /W)/W
                     C(3) = b2 + 72.D0*q*(5.D0*q - 4.D0*a**2 - 1.D0 - (
     &                      2.D0*a + 3.D0)
     &                      *((a**2-1.D0)*u - 5.D0*(F*(3.D0*a-1.D0)
     &                      +2.D0*(a**2-1.D0)*(a+2.D0)/W)/W))/W
                     C(4) = b4 - 18.D0*(20.D0*q*F - (a + 1.D0)*((2.D0*a+
     &                      1.D0)*F*(4.D0+u*(17.D0*a-12.D0))
     &                      - 4.D0*(15.D0*q*(4.D0*a-1.D0)-(2.D0*a+1.D0)
     &                      *(a*(34.D0*a-19.D0)+(2.D0*a+3.D0)
     &                      *(a*(a-1.D0)
     &                      *u-5.D0*(F*(5.D0*a-4.D0)+2.D0*a*(a-1.D0)
     &                      *(a+2.D0)/W)/W)))/W))/W
                     IF (x.NE.0.D0) THEN
                        C(1) = C(1)
     &                         - 6.D0*q*x*((a + 2.D0)*(60.D0*q - (44.D0*
     &                         a-10.D0)*a - 6.D0 - (2.D0*a+3.D0)
     &                         *((a+1.D0)*((11.D0*a-6.D0)*u-2.D0*x**2)
     &                         -12.D0*F*x)) + (8.D0*a + 12.D0)
     &                         *(((20.D0*a+90.D0)*a-5.D0)*F + (a+1.D0)
     &                         *(a+2.D0)
     &                         *((2.D0*a+5.D0)*x+(10.D0*a-5.D0)*(a+6.D0)
     &                         /W))/W)/W
                        C(2) = C(2)
     &                         + x*((2.D0*a + 3.D0)*(240.D0*F*q + (a+
     &                         1.D0)
     &                         *(144.D0*q*x-(2.D0*a+1.D0)*((24.D0-24.D0*
     &                         x**2+(182.D0*a-72.D0)*u)
     &                         *F+a*x*(44.D0+(30.D0*a+8.D0)*u-4.D0*x**2)
     &                         ))) + (a + 1.D0)
     &                         *(q*((2400.D0*a+8400.D0)*a-360.D0)
     &                         - (24.D0*a+12.D0)
     &                         *(a*((102.D0*a+357.D0)*a-114.D0)
     &                         -(2.D0*a+3.D0)
     &                         *((a+2.D0)*(10.D0*F*x+a*(x**2-
     &                         (5.5D0*a-3.D0)*u))
     &                         +(F*((60.D0*a+270.D0)*a-120.D0)
     &                         +a*(a+2.D0)
     &                         *(x*(4.D0*a+10.D0)+(20.D0*a-10.D0)
     &                         *(a+6.D0)/W))/W)))/W)/W
                        C(3) = C(3) + 24.D0*x*q*(2.D0*a + 3.D0)
     &                         *(5.D0*F + (a + 1.D0)
     &                         *(x + 5.D0*(a+2.D0)/W))/W
                        C(4) = C(4) - 6.D0*x*(a + 1.D0)
     &                         *(60.D0*q - (2.D0*a + 1.D0)
     &                         *(22.D0*a + (11.D0*a+4.D0)
     &                         *a*u - 12.D0*F*x - 2.D0*a*x**2 -
     &                         (8.D0*a+12.D0)
     &                         *(10.D0*F+a*(x+5.D0*(a+2.D0)/W))/W))/W
                     ENDIF
                  ENDIF
               ELSE
C MULTIPOLE LQ=4 L1=L2                                                  CORA-225
                  b1 = -p*q*(2.D0*a + 3.D0)/(a - 1.D0)
                  b2 = -q*(3.D0*E*s + a*x)
                  b3 = -p*(3.D0*F - a*x)
                  b4 = -((p + q)*(a + 1.5D0) - 1.5D0*y**2)/(a + 1.D0)
                  bd = 3.D0*den*a**2*(2.D0*a + 3.D0)*(a + 2.D0)
     &                 *DSQRT(s*p*q)
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1
                     C(2) = (b3 + p*a*(2.D0*a + 3.D0)/W)
                     C(3) = (b2 + q*a*(2.D0*a + 3.D0)/W)
                     C(4) = (b4 - 3.D0*a*(y - a*(2.D0*a+3.D0)/W)/W)
                  ENDIF
               ENDIF
               GOTO 100
            ELSEIF (Lq.EQ.5) THEN
               IF (Ll.EQ.2) THEN
C MULTIPOLE LQ=5 L1=L2-1                                                CORA-401
                  bd = -60.D0*a**2*(2.D0*a + 5.D0)*(2.D0*a + 3.D0)
     &                 *(a + 3.D0)*(a + 2.D0)
     &                 *den*s*DSQRT(p*q*((a+1.D0)**2 + F**2))
                  b1 = p*q*(4.D0*a + 6.D0)
     &                 *((28.D0*q - (12.D0*a-56.D0)*a + 40.D0)
     &                 /(a - 1.D0) - (2.D0*a + 5.D0)*(a + 1.D0)*u)
                  b2 = q*F*(168.D0*q + 480.D0*a + 240.D0 +
     &                 ((48.D0*a+120.D0)*a + 30.D0)*u)
                  b3 = p*F*(168.D0*q + 480.D0*a + 240.D0 -
     &                 (12.D0*a + 6.D0)*((2.D0*a+2.D0)*a - 5.D0)*u)
                  b4 = ((2.D0*a - 3.D0)
     &                 *(56.D0*q - (24.D0*a-208.D0)*a + 80.D0 -
     &                 (((4.D0*a-18.D0)*a-52.D0)*a-10.D0)*u)
     &                 *q + a**2*(2.D0*a + 1.D0)
     &                 *(480.D0 - ((24.D0*a-56.D0)*a-180.D0)
     &                 *u - (2.D0*a+5.D0)*(2.D0*a+3.D0)*(a+1.D0)*u**2))
     &                 /(a + 1.D0)
                  IF (x.NE.0.D0) THEN
                     b1 = b1 - x*p*q*(4.D0*a + 6.D0)
     &                    *(7.D0*F - x*(a + 1.D0))
                     b2 = b2 +
     &                    x*q*((14.D0*a + 210.D0)*q - (56.D0*a - 380.D0)
     &                    *a + 240.D0 - (6.D0*a + 6.D0)*(a**2 - 5.D0)
     &                    *u - (12.D0*a - 36.D0)*F*x - (6.D0*a + 6.D0)
     &                    *x**2)
                     b3 = b3 -
     &                    x*p*((98.D0*a - 42.D0)*q - (2.D0*a + 1.D0)
     &                    *(a*(24.D0*a-116.D0+(a+1.D0)
     &                    *((7.D0*a+16.D0)*u-2.D0*x**2))
     &                    + (14.D0*a-6.D0)*F*x))
                     b4 = b4 -
     &                    x*((2.D0*a - 3.D0)*(((2.D0*a+1.D0)*(24.D0*a-
     &                    80)+(14.D0*a-70.D0)*q)
     &                    *F - ((2.D0*a-22.D0)*a+12.D0)*q*x)
     &                    + (4.D0*a + 2.D0)
     &                    *((((11.D0*a+17.D0)*a+1.D0)*a+15.D0)
     &                    *F*u - x*((a-1.D0)*(2.D0*a-3.D0)
     &                    *F*x+a*((14.D0*a-18.D0)*a+58.D0+(a+1.D0)
     &                    *((a+2.D0)*(a-4.D0)*u+x**2)))))/(a + 1.D0)
                  ENDIF
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 - 12.D0*p*q*(2.D0*a + 3.D0)*(a + 2.D0)
     &                      *(2.D0*F - (2.D0*a + 5.D0)*(a + 1.D0)/W)/W
                     C(2) = b3 - p*(4.D0*a + 6.D0)
     &                      *((16.D0*a - 24.D0)*q + (2.D0*a + 1.D0)
     &                      *(40.D0*a - a*(2.D0*a+5.D0)*(a+1.D0)
     &                      *(u-(6.D0*a+12.D0)/W**2) + (30.D0*a+60.D0)
     &                      *F/W))/W
                     C(3) = b2 - q*(4.D0*a + 6.D0)
     &                      *((16.D0*a - 24.D0)*q + (2.D0*a + 1.D0)
     &                      *(40.D0*a + (30.D0*a+60.D0)*F/W)
     &                      + a*(a + 1.D0)*(6.D0*a + 15.D0)
     &                      *(u - (10.D0*a+20.D0)/W**2))/W
                     C(4) = b4 - 6.D0*(F*(((8.D0*a-28.D0)*a+24.D0)*q + a
     &                      *(4.D0*a+2.D0)
     &                      *(((2.D0*a+2.D0)*a-5.D0)*u-40.D0))
     &                      - (2.D0*a + 3.D0)
     &                      *((((4.D0*a+6.D0)*a+62.D0)*a+20.D0)
     &                      *q + a*(2.D0*a+1.D0)
     &                      *((2.D0*a+5.D0)*(a+1.D0)*u*a-40.D0*a-
     &                      (10.D0*a+20.D0)
     &                      *(4.D0*F+a*(a+1.D0)*(2.D0*a+5.D0)/W)/W))/W)
     &                      /W
                     IF (x.NE.0.D0) THEN
                        C(1) = C(1) + x*p*q*(12.D0*a + 18.D0)*(a + 1.D0)
     &                         *(a + 2.D0)/W
                        C(2) = C(2) + x*p*(4.D0*a + 6.D0)
     &                         *(((8.D0*a-8.D0)*a - 6.D0)
     &                         *F - a*(a + 1.D0)*(2.D0*a + 1.D0)
     &                         *(x + (3.D0*a+6.D0)/W))/W
                        C(3) = C(3) - x*q*(24.D0*a + 36.D0)
     &                         *((2.D0*a - 3.D0)*F + (a + 1.D0)
     &                         *(x + (5.D0*a+10.D0)/W))/W
                        C(4) = C(4)
     &                         + 6.D0*x*((a - 2.D0)*(a - 3.D0)*(2.D0*a -
     &                         3.D0)*q + (2.D0*a + 1.D0)
     &                         *(((8.D0*a-12.D0)*a+40.D0)
     &                         *a + ((2.D0*a-2.D0)*a+6.D0)
     &                         *F*x + a*(a+1.D0)*((a**2-5.D0)*u+x**2)
     &                         + (4.D0*a+6.D0)
     &                         *(((2.D0*a+2.D0)*a+10.D0)*F+a*(a+1.D0)
     &                         *(x+(5.D0*a+10.D0)/W))/W))/W
                     ENDIF
                  ENDIF
               ELSEIF (Ll.EQ.3) THEN
C MULTIPOLE LQ=5 L1=L2-2                                                CORA-447
                  dn = 720.D0*a**2*(4.D0*a**2 - 9.D0)*(2.D0*a + 5.D0)
     &                 *(a + 2.D0)
                  bd = den*dn*s*DSQRT(q*((a+1.D0)**2 + F**2))/2.D0
                  b1 = 2.D0*(2.D0*a + 3.D0)
     &                 *(24.D0*((2.D0*a+5.D0)*(a+2.D0) + 7.D0*q)
     &                 /(a - 1.D0) - (2.D0*a - 3.D0)*(11.D0*a - 10.D0)
     &                 *u)*F
                  b2 = -6.D0*(24.D0*(2.D0*a**2.D0 - 15.D0*a - 10.D0)
     &                 - 168.D0*q + 5.D0*(a + 1.D0)
     &                 *(2.D0*a**2 + a - 6.D0)*u)
                  b3 = ((1008.D0*q - 144.D0*(2.D0*a**2-15.D0*a-10.D0))
     &                 *q - (2.D0*a - 3.D0)
     &                 *u*(6.D0*(17.D0*a**2-9.D0*a+10.D0)
     &                 *q + a**2*(2.D0*a+1.D0)
     &                 *(24.D0*(a+10.D0)-15.D0*(a+1.D0)*(a+2.D0)*u)))
                  b4 = 2.D0*(2.D0*a - 3.D0)
     &                 *(168.D0*q + (2.D0*a + 1.D0)*(24.D0*(a+10.D0)
     &                 - (11.D0*a**2-a-30.D0)*u))*F/(a + 1.D0)
                  IF (x.NE.0.D0) THEN
                     b1 = b1 + x*2.D0*(2.D0*a + 3.D0)
     &                    *((20.D0*a**3 - 198.D0*a**2 + 316.D0*a +
     &                    240.D0 - 42.D0*(2.D0*a-5.D0)*q)/(a - 1.D0)
     &                    + (2.D0*a - 3.D0)
     &                    *(12.D0*F*x + (a+1.D0)*((9.D0*a+10.D0)
     &                    *u-2.D0*x**2)))
                     b2 = b2 -
     &                    x*12.D0*(7.D0*(2.D0*a - 3.D0)*F - (a + 1.D0)
     &                    *(2.D0*a - 3.D0)*x)
                     b3 = b3 - x*(2.D0*a - 3.D0)
     &                    *((420.D0*F - 36.D0*(5.D0*a-2.D0)*x)
     &                    *q + (2.D0*a + 1.D0)
     &                    *(48.D0*(a+10.D0)*F - (40.D0*a**2-38.D0*a-
     &                    60.D0)*F*u + 4.D0*(5.D0*a-58.D0)
     &                    *a*x + 12.D0*(2.D0*a-1.D0)*F*x**2 + a*(a+1.D0)
     &                    *x*(8.D0*(3.D0*a+4.D0)*u-4.D0*x**2)))
                     b4 = b4 - x*2.D0*(2.D0*a - 3.D0)
     &                    *(42.D0*(2.D0*a - 1.D0)*q - (2.D0*a + 1.D0)
     &                    *(6.D0*(2.D0*a-1.D0)
     &                    *F*x + a*((10.D0*a-116.D0)+(a+1.D0)
     &                    *((9.D0*a+16.D0)*u-2.D0*x**2))))/(a + 1.D0)
                  ENDIF
                  IF (.NOT.(Lt)) THEN
                     b1 = b1*q
                     b2 = b2*q
                     C(1) = b1 - 6.D0*q*(a + 2.D0)*(2.D0*a + 3.D0)
     &                      *(8.D0*a*(2.D0*a + 5.D0) + 24.D0*q -
     &                      5.D0*a*(a + 1.D0)*(2.D0*a - 3.D0)
     &                      *u + 4.D0*(2.D0*a - 3.D0)*(2.D0*a + 5.D0)
     &                      *(F + 5.D0*a*(a+1.D0)/W)/W)/W
                     C(2) = b3 - (4.D0*a**2 - 9.D0)
     &                      *(8.D0*(12.D0*q + a*(a+10.D0)*(2.D0*a+1.D0)
     &                      *u)*F - (6.D0*a + 12.D0)
     &                      *((a+1.D0)*(20.D0*q-a**2*(10.D0*a+5.D0)*u)
     &                      + (8.D0*a+4.D0)*a*(2.D0*a+5.D0)
     &                      *(6.D0*F+5.D0*a*(a+1.D0)/W)/W)/W)/W
                     C(3) = b2 - q*24.D0*(4.D0*a**2 - 9.D0)
     &                      *(4.D0*F - 5.D0*(a + 1.D0)*(a + 2.D0)/W)/W
                     C(4) = b4 - 6.D0*(2.D0*a - 3.D0)
     &                      *(24.D0*(a - 2.D0)*q + a*(2.D0*a + 1.D0)
     &                      *(8.D0*(a+10.D0) - 5.D0*(a+1.D0)*(a+2.D0)*u)
     &                      + 4.D0*(2.D0*a + 3.D0)*(2.D0*a + 1.D0)
     &                      *((a+10.D0)*F + 5.D0*a*(a+1.D0)*(a+2.D0)/W)
     &                      /W)/W
                     IF (x.NE.0.D0) THEN
                        C(1) = C(1) + x*q*(12.D0*a + 24.D0)
     &                         *(4.D0*a**2 - 9.D0)
     &                         *(3.D0*F - (a + 1.D0)*(x + (4.D0*a+10.D0)
     &                         /W))/W
                        C(2) = C(2) + x*(8.D0*a**2 - 18.D0)
     &                         *(36.D0*(a - 1.D0)*q - (2.D0*a + 1.D0)
     &                         *(6.D0*(a-2.D0)
     &                         *F*x - a*(8.D0*(a+10.D0)-(a+1.D0)
     &                         *((9.D0*a+10.D0)*u-2.D0*x**2))
     &                         - 6.D0*(a+2.D0)
     &                         *((a+10.D0)*F+a*(a+1.D0)*(x+
     &                         (4.D0*a+10.D0)/W))/W))/W
                        C(3) = C(3) + x*q*24.D0*(4.D0*a**2 - 9.D0)
     &                         *(a + 1.D0)/W
                        C(4) = C(4) + x*12.D0*(2.D0*a + 1.D0)
     &                         *(2.D0*a - 3.D0)
     &                         *(3.D0*(a - 2.D0)*F - a*(a + 1.D0)
     &                         *(x + (4.D0*a+6.D0)/W))/W
                     ENDIF
                  ENDIF
               ELSEIF (Ll.EQ.4) THEN
C MULTIPOLE LQ=5 L1=L2-3                                                CORA-496
                  bd = -2520.D0*den*a**2*(a + 2.D0)*(a + 3.D0)
     &                 *(2.D0*a + 3.D0)*(2.D0*a + 5.D0)
     &                 *s*DSQRT(q*((a+1.D0)**2 + F**2)
     &                 *((a+2.D0)**2 + F**2))
                  b1 = q*(4.D0*a + 6.D0)
     &                 *(((24.D0*((a+36.D0)*a+40.D0)+168.D0*q)
     &                 *q + 48.D0*a*(a+2.D0)*(a+3.D0)*(2.D0*a+5.D0))
     &                 /(a - 1.D0)
     &                 - (a*(((80.D0*a+620.D0)*a+966.D0)*a+540.D0)
     &                 + ((28.D0*a-26.D0)*a+60.D0)*q - 6.D0*a*(a+1.D0)
     &                 *(a+2.D0)*(2.D0*a+3.D0)*(2.D0*a+5.D0)*u)*u)
                  b2 = 6.D0*F*q*(48.D0*((2.D0*a+21.D0)*a + 20.D0)
     &                 + 168.D0*q -
     &                 (((16.D0*a+36.D0)*a-22.D0)*a - 60.D0)*u)
                  b3 = 6.D0*F*
     &                 ((48.D0*((2.D0*a+21.D0)*a+20.D0) + 168.D0*q -
     &                 (10.D0*a-12.D0)*(4.D0*a**2+5.D0)*u)
     &                 *q + a*(a + 1.D0)*(2.D0*a + 1.D0)
     &                 *(((16.D0*a+168.D0)*a+720.D0) - (2.D0*a+3.D0)
     &                 *(a+2.D0)*(8.D0*a+45.D0)*u)*u)
                  b4 = ((2.D0*a - 3.D0)
     &                 *(48.D0*((a+48.D0)*a+40.D0) + 336.D0*q)
     &                 *q/(a + 1.D0) - (4.D0*a**2 - 9.D0)
     &                 *(28.D0*a - 40.D0)*q*u + a*(2.D0*a + 1.D0)
     &                 *(96.D0*((2.D0*a+21.D0)*a+90.D0) - (4.D0*a+6.D0)
     &                 *(((40.D0*a+282.D0)*a+180.D0)-(a+2.D0)
     &                 *(2.D0*a+3.D0)*(6.D0*a+15.D0)*u)*u))
                  IF (x.NE.0.D0) THEN
                     b1 = b1 + x*q*(4.D0*a + 6.D0)
     &                    *((((28.D0*a+402.D0)*a+704.D0)*a + 360.D0)
     &                    *x - ((88.D0*a+700.D0)*a + 600.D0)
     &                    *F - 126.D0*F*q + (54.D0*a + 24.D0)
     &                    *q*x + (2.D0*a + 3.D0)
     &                    *(((5.D0*a-53.D0)*a-70.D0)*F*u - (8.D0*a+2.D0)
     &                    *F*x**2 - (a+1.D0)*(a+2.D0)
     &                    *((15.D0*a+25.D0)*u-2.D0*x**2)*x))
                     b2 = b2 - x*6.D0*q*((((8.D0*a+372.D0)*a+696.D0)*a +
     &                    360.D0) + (70.D0*a + 42.D0)
     &                    *q - (2.D0*a + 3.D0)
     &                    *((10.D0*a+6.D0)*F*x + (a+1.D0)*(a+2.D0)
     &                    *((11.D0*a+25.D0)*u-2.D0*x**2)))
                     b3 = b3 +
     &                    x*((48.D0*((13.D0*a-7.D0)*a-3.D0)*F*x - ((
     &                    (144.D0*a+6696.D0)*a+1104.D0)*a-3600.D0)
     &                    - 84.D0*(13.D0*a-9.D0)*q)*q + (a + 1.D0)
     &                    *(((((352.D0*a+224.D0)*a+1518.D0)*a+1260.D0)
     &                    *u-12.D0*((20.D0*a-14.D0)*a-3.D0)*x**2)
     &                    *q + (2.D0*a+1.D0)
     &                    *((2.D0*a-3.D0)*((88.D0*a+720.D0)
     &                    +(16.D0*a+24.D0)*x**2)
     &                    *F*x+a*((((280.D0*a+2292.D0)*a+2772.D0)
     &                    *a+1080.D0)*u-(192.D0*a+2016.D0)*a-8640.D0-
     &                    28.D0*((2.D0*a+31.D0)*a+24.D0)*x**2)
     &                    -(2.D0*a+3.D0)
     &                    *(((16.D0*a-230.D0)*a-300.D0)*F*u*x+a*(a+2.D0)
     &                    *(((57.D0*a+171.D0)*a+90.D0)
     &                    *u**2-(36.D0*a+62.D0)*u*x**2+4.D0*x**4)))))
                     b4 = b4 - x*((4.D0*a - 6.D0)*(126.D0*a + 42.D0)
     &                    *F*q/(a + 1.D0) - 36.D0*(2.D0*a - 3.D0)
     &                    *(3.D0*a + 1.D0)*q*x - (4.D0*a + 2.D0)
     &                    *(a*((28.D0*a+434.D0)*a+336.D0)
     &                    *x - (2.D0*a-3.D0)*(44.D0*a+360.D0)
     &                    *F + (2.D0*a+3.D0)
     &                    *(((5.D0*a-79.D0)*a-150.D0)*F*u-(8.D0*a-12.D0)
     &                    *F*x**2-a*(a+2.D0)
     &                    *((15.D0*a+31.D0)*u-2.D0*x**2)*x)))
                  ENDIF
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 - 12.D0*q*(2.D0*a + 3.D0)*(a + 2.D0)
     &                      *((12.D0*q + (2.D0*a+3.D0)
     &                      *((8.D0*a+41.D0)*a+15.D0)*u)
     &                      *F - (4.D0*a + 10.D0)
     &                      *((a+3.D0)*4.D0*F + ((33.D0+13.D0*a)
     &                      *q-a*(a+3.D0)*(4.D0*a-6.D0)-(2.D0*a+3.D0)
     &                      *(3.D0*a*(a+1.D0)*(a+2.D0)*u-10.D0*(a+3.D0)
     &                      *((4.D0*a+1.D0)*F+3.D0*a*(a+1.D0)*(a+2.D0)
     &                      /W)/W))/W))/W
                     C(3) = b2 - 12.D0*q*(2.D0*a + 3.D0)
     &                      *((((32.D0*a+288.D0)*a+456.D0)*a + 240.D0)
     &                      + 8.D0*(2.D0*a - 3.D0)*q - (a + 2.D0)
     &                      *(2.D0*a + 3.D0)
     &                      *(3.D0*(a+1.D0)*(2.D0*a+5.D0)
     &                      *u - 10.D0*((2.D0*a+11.D0)
     &                      *F+3.D0*(2.D0*a+5.D0)*(a+1.D0)*(a+2.D0)/W)
     &                      /W))/W
                     C(2) = b3 - (4.D0*a + 6.D0)
     &                      *((((192.D0*a+1728.D0)*a+2736.D0)
     &                      *a + 1440.D0 + 48.D0*(2.D0*a-3.D0)*q)
     &                      *q - (a + 1.D0)
     &                      *((((176.D0*a+964.D0)*a+2166.D0)*a+540.D0)
     &                      *q - a**2*(2.D0*a+1.D0)
     &                      *(((16.D0*a+168.D0)*a+720.D0)+6.D0*(a+2.D0)
     &                      *(2.D0*a+3.D0)*(2.D0*a+5.D0)*u))
     &                      *u - 6.D0*(a + 2.D0)
     &                      *((2.D0*a+3.D0)*((a+1.D0)*(2.D0*a+1.D0)
     &                      *(20.D0*a+75.D0)*a*u-(20.D0*a+110.D0)*q)
     &                      *F + (a+1.D0)*(2.D0*a+5.D0)
     &                      *(6.D0*(28.D0*a**2*(2.D0*a+1.D0)*(a+3.D0)
     &                      -((52.D0*a+161.D0)*a+30.D0)*q+a**2*(a+2.D0)
     &                      *(2.D0*a+1.D0)*(2.D0*a+3.D0)*u)
     &                      -10.D0*a*(a+3.D0)*(2.D0*a+1.D0)
     &                      *(2.D0*a+3.D0)*(14.D0*F+6.D0*a*(a+2.D0)/W)
     &                      /W)/W)/W)/W
                     C(4) = b4 + 12.D0*(((2.D0*a+1.D0)*(a+1.D0)*(((16.D0
     &                      *a+168.D0)*a+720.D0)-(a+2.D0)*(2.D0*a+3.D0)
     &                      *(8.D0*a+45.D0)*u) - 12.D0*(2.D0*a-3.D0)
     &                      *(a-2.D0)*q)*F + (2.D0*a + 3.D0)*(a + 1.D0)
     &                      *(((52.D0*a+266.D0)*a+660.D0)
     &                      *q - a*(2.D0*a+1.D0)
     &                      *((8.D0*a+84.D0)*a+360.D0) - (a+2.D0)
     &                      *(2.D0*a+1.D0)*(2.D0*a+3.D0)
     &                      *(3.D0*a*(2.D0*a+5.D0)
     &                      *u-10.D0*((8.D0*a+30.D0)
     &                      *F+3.D0*a*(2.D0*a+5.D0)*(a+2.D0)/W)/W))/W)/W
                     IF (x.NE.0.D0) THEN
                        C(1) = C(1) + 6.D0*q*x*(2.D0*a + 3.D0)
     &                         *(a + 2.D0)
     &                         *(((40.D0*a+300.D0)*a + 476.D0)
     &                         *a + 240.D0 + (18.D0*a - 6.D0)
     &                         *q - (2.D0*a + 3.D0)
     &                         *((2.D0*a-10.D0)*F*x + (a+1.D0)*(a+2.D0)
     &                         *((11.D0*a+15.D0)*u-2.D0*x**2)
     &                         - (8.D0*a+20.D0)
     &                         *((3.D0*a+13.D0)*F+(a+1.D0)*(a+2.D0)
     &                         *(x+(5.D0*a+15.D0)/W))/W))/W
                        C(2) = C(2) + x*(4.D0*a + 6.D0)
     &                         *(12.D0*(2.D0*a - 3.D0)*(4.D0*a - 1.D0)
     &                         *F*q - (a + 1.D0)
     &                         *(((60.D0*a-42.D0)*a+180.D0)
     &                         *q*x + (2.D0*a+1.D0)
     &                         *(((32.D0*a+336.D0)*a+1440.D0)
     &                         *F-(2.D0*a+3.D0)
     &                         *((28.D0*a+202.D0)*a+180.D0)
     &                         *F*u+a*(((40.D0*a+308.D0)*a+120.D0)
     &                         -(a+2.D0)*(2.D0*a+3.D0)
     &                         *((15.D0*a+25.D0)*u-2.D0*x**2))
     &                         *x-(2.D0*a+3.D0)*(2.D0*a-24.D0)*F*x**2)
     &                         + (3.D0*a+6.D0)
     &                         *(((92.D0*a+406.D0)*a+780.D0)
     &                         *q-(2.D0*a+1.D0)
     &                         *(a*((8.D0*a+84.D0)*a+360.D0)
     &                         +(2.D0*a+3.D0)
     &                         *(a*(a+2.D0)*((11.D0*a+15.D0)
     &                         *u-2.D0*x**2)-(6.D0*a+40.D0)
     &                         *F*x-(8.D0*a+20.D0)
     &                         *((30.D0+8.D0*a)*F+a*(a+2.D0)
     &                         *(x+(5.D0*a+15.D0)/W))/W)))/W))/W
                        C(3) = C(3) + 24.D0*x*q*(2.D0*a + 3.D0)
     &                         **2*((2.D0*a - 3.D0)*F - (a + 1.D0)
     &                         *(a + 2.D0)*(x + 5.D0*(a+2.D0)/W))/W
                        C(4) = C(4) + x*6.D0*(a + 1.D0)
     &                         *(18.D0*(a - 2.D0)*(2.D0*a - 3.D0)
     &                         *q + (2.D0*a + 1.D0)
     &                         *(a*((40.D0*a+308.D0)*a+120.D0)
     &                         - (2.D0*a+3.D0)
     &                         *((2.D0*a-24.D0)*F*x+a*(a+2.D0)
     &                         *((11.D0*a+25.D0)*u-2.D0*x**2)
     &                         -4.D0*(2.D0*a+3.D0)
     &                         *((20.D0+3.D0*a)*F+a*(a+2.D0)
     &                         *(x+5.D0*(a+2.D0)/W))/W)))/W
                     ENDIF
                  ENDIF
               ELSEIF (Ll.EQ.5) THEN
C MULTIPOLE LQ=5 L1=L2-4                                                CORA-579
                  bd = 10080.D0*den*a**2*(2.D0*a + 5.D0)*(a + 2.D0)
     &                 *s**2*DSQRT(q*((a+1.D0)**2 + F**2)
     &                 *((a+2.D0)**2 + F**2)*((a-1.D0)**2 + E**2))
                  b1 = q*(((336.D0*q+48.D0*((8.D0*a+22.D0)*a+47.D0))*q -
     &                 96.D0*(2.D0*a-1.D0)*(a+2.D0)*(2.D0*a+5.D0)
     &                 *(3.D0*a-7.D0))/((a-1.D0)*(2.D0*a-3.D0))
     &                 + (4.D0*(((162.D0*a+683.D0)*a+538.D0)*a-280.D0)
     &                 - 4.D0*(7.D0*a-38.D0)*q - (2.D0*a+3.D0)
     &                 *(((163.D0*a+497.D0)*a-16.D0)*a-140.D0)*u)*u)*F
                  b2 = 3.D0*q*
     &                 (((96.D0*((((12.D0*a+56.D0)*a+29.D0)*a-70.D0)
     &                 *a-70.D0)
     &                 +(48.D0*((4.D0*a+28.D0)*a+47.D0)+336.D0*q)*q)
     &                 /(2.D0*a-3.D0)
     &                 - 4.D0*(((((66.D0*a+307.D0)*a+172.D0)*a-280.D0)
     &                 *a-280.D0)+(a-2.D0)*(4.D0*a-19.D0)*q)*u)
     &                 /(2.D0*a + 3.D0) + 35.D0*(a**2 - 1.D0)*(a + 2.D0)
     &                 **2*u**2)
                  b3 = (((1008.D0*q+144.D0*((4.D0*a+28.D0)*a+47.D0))*q +
     &                 288.D0*((((12.D0*a+56.D0)*a+29.D0)*a-70.D0)
     &                 *a-70.D0))*q/(2.D0*a - 3.D0)
     &                 - 12.D0*(((((178.D0*a+967.D0)*a+1410.D0)
     &                 *a+428.D0)*a-280.D0) + (a-2.D0)*(10.D0*a-19.D0)
     &                 *q)*q*u + (3.D0*a + 3.D0)
     &                 *(((((458.D0*a+2185.D0)*a+2899.D0)*a-352.D0)
     &                 *a-420.D0)*q*u + (4.D0*a+2.D0)
     &                 *a**2*(8.D0*((6.D0*a+37.D0)*a+70.D0)
     &                 -(((62.D0*a+349.D0)*a+524.D0)*a-140.D0)*u))*u)
     &                 /(2.D0*a + 3.D0) - 52.5D0*a**2*(a**2 - 1.D0)
     &                 *(a + 2.D0)**2*(2.D0*a + 1.D0)*u**3
                  b4 = (((336.D0*q+48.D0*((8.D0*a+34.D0)*a+47.D0)-(4.D0*
     &                 a-8.D0)*((14.D0*a-41.D0)*a+57.D0)*u)*q/(a+1.D0)
     &                 + (2.D0*a+1.D0)
     &                 *(4.D0*(((162.D0*a+863.D0)*a+1070.D0)*a-840.D0)
     &                 *u-96.D0*((6.D0*a+37.D0)*a+70.D0)))
     &                 /(2.D0*a + 3.D0) - (2.D0*a + 1.D0)
     &                 *(((163.D0*a+631.D0)*a+256.D0)*a - 420.D0)*u**2)
     &                 *F
                  IF (x.NE.0.D0) THEN
                     b1 = b1 +
     &                    x*q*(8.D0*((((((180.D0*a+604.D0)*a-425.D0)
     &                    *a-1813.D0)*a-394.D0)*a+840.D0)
     &                    + (((34.D0*a+147.D0)*a-193.D0)*a-450.D0)
     &                    *q + 42.D0*(a-2.D0)*q**2)
     &                    /((1.D0-a)*(2.D0*a-3.D0)) + 96.D0*F*q*x +
     &                    16.D0*((((26.D0*a+126.D0)*a+133.D0)*a-13.D0)
     &                    *a - 70.D0)
     &                    *u + 4.D0*((41.D0*a+115.D0)*a + 170.D0)
     &                    *q*u + 4.D0*((2.D0*a-1.D0)*a - 54.D0)
     &                    *F*x - 8.D0*(5.D0*a + 2.D0)
     &                    *q*x**2 - (((152.D0*a+892.D0)*a+1380.D0)
     &                    *a + 664.D0)*x**2 + (2.D0*a + 3.D0)
     &                    *(4.D0*((20.D0*a+97.D0)*a+62.D0)
     &                    *F*u*x + 4.D0*(a-2.D0)*F*x**3 + (a+1.D0)
     &                    *(a+2.D0)
     &                    *(((44.D0*a+36.D0)*u-4.D0*x**2)*x**2-(
     &                    (87.D0*a+67.D0)*a-70.D0)*u**2)))
                     b2 = b2 -
     &                    12.D0*x*q*((28.D0*F*q + 2.D0*((18.D0*a+83.D0)
     &                    *a+56.D0)
     &                    *F - (((34.D0*a+217.D0)*a+341.D0)*a+166.D0)
     &                    *x - 4.D0*(3.D0*a+1.D0)*q*x)/(2.D0*a + 3.D0)
     &                    + (((9.D0*a+58.D0)*a+44.D0)*u + 2.D0*a*x**2)
     &                    *F + (a + 1.D0)*(a + 2.D0)
     &                    *(9.D0*(a+1.D0)*u - x**2)*x)
                     b3 = b3 +
     &                    x*(((96.D0*(5.D0*a-3.D0)*q+4.D0*(((170.D0*a+
     &                    1101.D0)*a+901.D0)*a+162.D0)
     &                    -24.D0*((10.D0*a-5.D0)*a-2.D0)*F*x)
     &                    *q*x - 4.D0*
     &                    ((((22.D0*a+543.D0)*a+629.D0)*a+510.D0)
     &                    *u+168.D0*q)*F*q + (a+1.D0)
     &                    *(4.D0*(((26.D0*a-5.D0)*a+18.D0)
     &                    *x**2-(((166.D0*a+627.D0)*a+1415.D0)*a+558.D0)
     &                    *u)*q*x+(2.D0*a+1.D0)
     &                    *((96.D0*((6.D0*a+37.D0)*a+70.D0)
     &                    -4.D0*((2.D0*a-105.D0)*a-498.D0)
     &                    *x**2-8.D0*(((138.D0*a+751.D0)*a+1012.D0)
     &                    *a-420.D0)*u)
     &                    *F+a*(4.D0*((38.D0*a+197.D0)*a+154.D0)
     &                    *x**2-(((572.D0*a+2362.D0)*a+960.D0)*a-40.D0)
     &                    *u+8.D0*((90.D0*a+491.D0)*a+674.D0))*x)))
     &                    /(2.D0*a + 3.D0) - 24.D0*(17.D0*a + 50.D0)
     &                    *F*q + (a + 1.D0)*(2.D0*a + 1.D0)
     &                    *((((373.D0*a+1411.D0)*a+544.D0)*a-420.D0)
     &                    *F*u**2 - 4.D0*((23.D0*a+125.D0)*a+54.D0)
     &                    *F*u*x**2 - 4.D0*(a-6.D0)*F*x**4 + a*(a+2.D0)
     &                    *(((141.D0*a+199.D0)*a-22.D0)
     &                    *u**2-(50.D0*a+48.D0)*u*x**2+4.D0*x**4)*x))
                     b4 = b4 +
     &                    x*(((48.D0*((4.D0*a-4.D0)*a-1.D0)*F*x-8.D0*
     &                    (((34.D0*a+225.D0)*a-61.D0)*a-168.D0)
     &                    -336.D0*(a-1.D0)*q)*q/(a+1.D0)
     &                    + 4.D0*((((82.D0*a+315.D0)*a+902.D0)*a+396.D0)
     &                    *u-a*(20.D0*a-26.D0)*x**2)
     &                    *q + 4.D0*(2.D0*a+1.D0)
     &                    *(((2.D0*a-105.D0)*a-498.D0)
     &                    *F*x+a*((((104.D0*a+430.D0)*a+171.D0)*a-10.D0)
     &                    *u-2.D0*((90.D0*a+491.D0)*a+674.D0)
     &                    -((38.D0*a+197.D0)*a+154.D0)*x**2)))
     &                    /(2.D0*a + 3.D0) + (2.D0*a + 1.D0)
     &                    *(4.D0*((20.D0*a+107.D0)*a+54.D0)
     &                    *F*u*x + 4.D0*(a-6.D0)*F*x**3 + a*(a+2.D0)
     &                    *(4.D0*(11.D0*a+12.D0)
     &                    *u*x**2-((87.D0*a+145.D0)*a-22.D0)
     &                    *u**2-4.D0*x**4)))
                  ENDIF
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 - 3.D0*q*(a + 2.D0)
     &                      *(((16.D0*((56.D0*a+62.D0)*a-177.D0)
     &                      +48.D0*q)*q - 32.D0*a*(2.D0*a-1.D0)
     &                      *(2.D0*a+5.D0)*(3.D0*a-7.D0))
     &                      /(2.D0*a - 3.D0)
     &                      + (4.D0*a*(((62.D0*a+159.D0)*a+29.D0)
     &                      *a+70.D0) - 4.D0*((97.D0*a+229.D0)*a-6.D0)
     &                      *q + 35.D0*a*(a**2-1.D0)*(2.D0*a+3.D0)
     &                      *(a+2.D0)*u)*u - 4.D0*(2.D0*a + 5.D0)
     &                      *((4.D0*(2.D0*a-1.D0)*(3.D0*a-7.D0)
     &                      -92.D0*q+(2.D0*a+3.D0)
     &                      *((67.D0*a-17.D0)*a-14.D0)*u)
     &                      *F - 5.D0*(4.D0*((59.D0*a+59.D0)*a-18.D0)
     &                      *q-4.D0*a*(2.D0*a-1.D0)*(3.D0*a+1.D0)
     &                      *(11.D0*a+14.D0)-(2*a+3.D0)
     &                      *(7.D0*a*(a**2-1.D0)*(a+2.D0)
     &                      *u-6.D0*(2.D0*a-1.D0)
     &                      *(((17.D0*a+17.D0)*a+14.D0)
     &                      *F+7.D0*a*(a**2-1.D0)*(a+2.D0)/W)/W))/W)/W)
     &                      /W
                     C(2) = b3 + (((96.D0*((12.D0*a+56.D0)*a+59.D0-q)-
     &                      8.D0*(((188.D0*a+864.D0)*a+889.D0)*a-18.D0)
     &                      *u)*q + a*(a+1.D0)*(2.D0*a+1.D0)
     &                      *(16.D0*((6.D0*a+37.D0)*a+70.D0)
     &                      *u+4.D0*(2.D0*a+3.D0)
     &                      *((67.D0*a+136.D0)*a-140.D0)*u**2))
     &                      *F + 3.D0*(a + 2.D0)
     &                      *(40.D0*((19.D0*a+46.D0)*q-
     &                      ((12.D0*a+32.D0)*a+7.D0)*a-14.D0)
     &                      *q - (a+1.D0)
     &                      *(20.D0*(((132.D0*a+292.D0)*a-97.D0)
     &                      *a-42.D0)*q-a**2*(2.D0*a+1.D0)
     &                      *(20.D0*((66.D0*a+127.D0)*a-98.D0)
     &                      +35.D0*(a-1.D0)*(2.D0*a+3.D0)*(a+2.D0)*u))
     &                      *u + 4.D0*(2.D0*a+5.D0)
     &                      *(36.D0*((54.D0*a+37.D0)*a-10.D0)
     &                      *q*F-(a+1.D0)
     &                      *(a*(2.D0*a+1.D0)*(672.D0*(2.D0*a-1.D0)
     &                      +6.D0*(2.D0*a+3.D0)*(17.D0*a-14.D0)*u)
     &                      *F-5.D0*
     &                      (14.D0*(((86.D0*a+55.D0)*a-3.D0)*a-18.D0)
     &                      *q-a**2*(2.D0*a+1.D0)
     &                      *(112.D0*(2.D0*a-1.D0)*(3.D0*a+2.D0)
     &                      +(2.D0*a+3.D0)
     &                      *(7.D0*(a-1.D0)*(a+2.D0)*u-6.D0*
     &                      (2.D0*a-1.D0)
     &                      *(24.D0*F+7.D0*(a-1.D0)*(a+2.D0)/W)/W)))/W))
     &                      /W)/W)/W
                     C(3) = b2 + 12.D0*q*((8.D0*((12.D0*a+56.D0)*a+59.D0
     &                      ) - 8.D0*q - (2.D0*a+3.D0)
     &                      *((32.D0*a+98.D0)*a-4.D0)*u)
     &                      *F + 5.D0*(a + 2.D0)
     &                      *((38.D0*a+92.D0)*q - (((24.D0*a+64.D0)
     &                      *a+14.D0)*a+28.D0) - (2.D0*a+3.D0)
     &                      *(7.D0*(a**2-1.D0)*(a+2.D0)
     &                      *u-6.D0*(2.D0*a+5.D0)
     &                      *((10.D0*a-4.D0)*F+7.D0*(a**2-1.D0)*(a+2.D0)
     &                      /W)/W))/W)/W
                     C(4) = b4 - 3.D0*(((16.D0*(((56.D0*a+330.D0)*a+
     &                      619.D0)*a+354.D0+(3.D0*a-6.D0)*q)*q-(a+1.D0)
     &                      *
     &                      (4.D0*(((194.D0*a+935.D0)*a+1292.D0)*a-36.D0
     &                      )*q*u+a*(2.D0*a+1.D0)
     &                      *(32.D0*((6.D0*a+37.D0)*a+70.D0)
     &                      -4.D0*(((62.D0*a+349.D0)*a+524.D0)*a-140.D0)
     &                      *u-35.D0*(a-1.D0)*(2.D0*a+3.D0)*(a+2.D0)
     &                      **2*u**2))))/(2.D0*a + 3.D0)
     &                      + 4.D0*(4.D0*((46.D0*a+213.D0)*a+230.D0)
     &                      *q*F - (a+1.D0)
     &                      *((2.D0*a+1.D0)*((24.D0*a+148.D0)
     &                      *a+280.D0+(2.D0*a+3.D0)
     &                      *((67.D0*a+136.D0)*a-140.D0)*u)
     &                      *F-5.D0*(a+2.D0)
     &                      *(4.D0*((118.D0*a+257.D0)*a-90.D0)
     &                      *q-4.D0*a*(2.D0*a+1.D0)
     &                      *((66.D0*a+127.D0)*a-98.D0)-(2.D0*a+1.D0)
     &                      *(2.D0*a+3.D0)
     &                      *(7.D0*a*(a-1.D0)*(a+2.D0)*u-6.D0*
     &                      (2.D0*a+5.D0)
     &                      *((17.D0*a-14.D0)*F+7.D0*a*(a+2.D0)*(a-1.D0)
     &                      /W)/W))/W))/W)/W
                     IF (x.NE.0.D0) THEN
                        C(1) = C(1) - q*x*(3.D0*a + 6.D0)
     &                         *(8.D0*((38.D0*a+167.D0)*a + 171.D0 -
     &                         3.D0*q)
     &                         *F + 4.D0*(((26.D0*a+145.D0)*a+231.D0)
     &                         *a + 106.D0)*x + (40.D0*a + 64.D0)
     &                         *q*x + (2.D0*a + 3.D0)
     &                         *((8.D0*a+32.D0)*F*x**2 -
     &                         4.D0*((35.D0*a+101.D0)*a+6.D0)
     &                         *F*u + 4.D0*(a+1.D0)*(a+2.D0)
     &                         *(x**3-(9.D0*a+4.D0)*u*x))
     &                         - 4.D0*(2.D0*a + 5.D0)
     &                         *((((44.D0*a+94.D0)*a-22.D0)*a+28.D0)
     &                         - 4.D0*(19.D0*a+44.D0)*q - (2.D0*a+3.D0)
     &                         *(4.D0*(3.D0*a+8.D0)*F*x+(a+1.D0)
     &                         *(a+2.D0)*(2.D0*x**2-(13.D0*a-7.D0)*u)
     &                         +10.D0*(((11.D0*a+59.D0)*a-6.D0)
     &                         *F+(a+1.D0)*(a+2.D0)
     &                         *((a+3.D0)*x+(3.D0*a+21.D0)*(2.D0*a-1.D0)
     &                         /W))/W))/W)/W
                        C(2) = C(2)
     &                         + x*(8.D0*(((196.D0*a+1104.D0)*a+1901.D0)
     &                         *a + 1026.D0 + (15.D0*a-18.D0)
     &                         *q + 12.D0*(5.D0*a+4.D0)*F*x)
     &                         *q + (a + 1.D0)
     &                         *(32.D0*((4.D0*a+11.D0)*a+18.D0)
     &                         *q*x**2 - 8.D0*
     &                         (((212.D0*a+966.D0)*a+1267.D0)*a+54.D0)
     &                         *q*u + (2.D0*a+1.D0)
     &                         *(8.D0*((38.D0*a+213.D0)*a+318.D0)
     &                         *F*x+4.D0*a*
     &                         ((((106.D0*a+599.D0)*a+912.D0)*a-140.D0)
     &                         *u+((26.D0*a+107.D0)*a+46.D0)
     &                         *x**2-8.D0*((6.D0*a+37.D0)*a+70.D0))
     &                         +(2.D0*a+3.D0)
     &                         *(8.D0*(a+6.D0)*F*x**3-4.D0*
     &                         ((47.D0*a+170.D0)*a+48.D0)
     &                         *F*u*x+a*(a+2.D0)
     &                         *(((87.D0*a+67.D0)*a-70.D0)
     &                         *u**2-4.D0*(11.D0*a+9.D0)
     &                         *u*x**2+4.D0*x**4)))) + 3.D0*(a + 2.D0)
     &                         *(32.D0*((24.D0*a+107.D0)*a+110.D0)
     &                         *F*q + (a+1.D0)
     &                         *(96.D0*((4.D0*a+17.D0)*a+20.D0)
     &                         *q*x-(8.D0*a+4.D0)
     &                         *(2.D0*((6.D0*a+37.D0)*a+70.D0)
     &                         *F+a*((22.D0*a+125.D0)*a+194.D0)
     &                         *x+(2.D0*a+3.D0)
     &                         *(((61.D0*a+143.D0)*a-70.D0)
     &                         *F*u+a*(a+2.D0)*((9.D0*a+4.D0)*u-x**2)
     &                         *x-(6.D0*a+20.D0)*F*x**2))+(8.D0*a+20.D0)
     &                         *(((532.D0*a+2246.D0)*a-180.D0)
     &                         *q-(2.D0*a+1.D0)
     &                         *(4.D0*a*((66.D0*a+295.D0)*a-98.D0)
     &                         -(2.D0*a+3.D0)
     &                         *((22.D0*a+60.D0)*F*x+a*(a+2.D0)
     &                         *(2.D0*x**2-(13.D0*a-7.D0)*u)
     &                         +10.D0*(((17.D0*a+93.D0)*a-42.D0)
     &                         *F+a*(a+2.D0)
     &                         *((a+3.D0)*x+3.D0*(a+7.D0)*(2.D0*a-1.D0)
     &                         /W))/W)))/W))/W)/W
                        C(3) = C(3)
     &                         + 12.D0*q*x*(2.D0*(((28.D0*a+148.D0)*a+
     &                         221.D0)*a + 106.D0) + (6.D0*a - 4.D0)
     &                         *q + (2.D0*a + 3.D0)
     &                         *((2.D0*a+12.D0)*F*x + (a+2.D0)
     &                         *((a+1.D0)*(2.D0*x**2-(13.D0*a+8.D0)*u)
     &                         +5.D0*((10.D0*a+28.D0)*F+2.D0*(a+1.D0)
     &                         *(a+2.D0)*(x+(6.D0*a+15.D0)/W))/W)))/W
                        C(4) = C(4)
     &                         + 3.D0*x*((24.D0*(2.D0*a-1.D0)*(a-2.D0)
     &                         *F*q - (4.D0*a+4.D0)
     &                         *(((20.D0*a+46.D0)*a+108.D0)
     &                         *q*x+(2.D0*a+1.D0)
     &                         *(((76.D0*a+426.D0)*a+636.D0)
     &                         *F+a*((26.D0*a+107.D0)*a+46.D0)*x)))
     &                         /(2.D0*a + 3.D0) + (4.D0*a + 4.D0)
     &                         *((2.D0*a+1.D0)
     &                         *((35.D0*a+130.D0)*a+48.D0)
     &                         *F*u + (2.D0*a+1.D0)
     &                         *(a*(a+2.D0)*(9.D0*(a+1.D0)*u-x**2)
     &                         *x-(2.D0*a+12.D0)*F*x**2)
     &                         - (4.D0*((38.D0*a+169.D0)*a+210.D0)
     &                         *q-(2.D0*a+1.D0)
     &                         *(a*((44.D0*a+250.D0)*a+388.D0)
     &                         -(2.D0*a+3.D0)
     &                         *((12.D0*a+40.D0)*F*x-(a+2.D0)
     &                         *(a*((13.D0*a+8.D0)*u-2.D0*x**2)
     &                         -10.D0*((11.D0*a+30.D0)*F+a*(a+2.D0)
     &                         *(x+(6.D0*a+15.D0)/W))/W))))/W))/W
                     ENDIF
                  ENDIF
               ELSEIF (Ll.EQ.6) THEN
C MULTIPOLE LQ=5 L1=L2-5                                                CORA-715
                  bd = 181440.D0*den*s**2*DSQRT(q*((a+1.D0)**2 + F**2)
     &                 *((a+2.D0)**2 + F**2)*((a-1.D0)**2 + E**2)
     &                 *((a+3.D0)**2 + F**2))*a**2
                  b1 = q*(2304.D0*a*(2.D0*a - 1.D0) - 6912.D0*q +
     &                 864.D0*(9.D0*a + 1.D0)
     &                 *q*u - 288.D0*a*((22.D0*a+3.D0)*a + 5.D0)
     &                 *u + 8.D0*a*(((530.D0*a+611.D0)*a+12.D0)
     &                 *a + 72.D0)
     &                 *u**2 - 8.D0*((602.D0*a+683.D0)*a - 60.D0)
     &                 *q*u**2 + 96.D0*a*(a**2 - 1.D0)*(2.D0*a + 5.D0)
     &                 *(2.D0*a + 3.D0)*u**3)
                  b2 = 24.D0*q*F*(288.D0 - (204.D0*a + 36.D0)
     &                 *u + ((89.D0*a+141.D0)*a - 20.D0)*u**2)
                  b3 = 12.D0*F*
     &                 (q*(576.D0 - 24.D0*(37.D0*a+3.D0)*u + ((718.D0*a+
     &                 582.D0)*a-40.D0)*u**2) + a*(a + 1.D0)
     &                 *(2.D0*a + 1.D0)
     &                 *u*(96.D0 - (148.D0*a+12.D0)*u - (
     &                 (137.D0*a+148.D0)*a-180.D0)*u**2))
                  b4 = q*(864.D0*(9.D0*a + 1.D0)*u - 6912.D0 -
     &                 8.D0*(602.D0*a**2 + 613.D0*a - 60.D0)*u**2)
     &                 + a*(2.D0*a + 1.D0)
     &                 *(2304.D0 - 288.D0*(11.D0*a - 1.D0)
     &                 *u + 8.D0*((265.D0*a+174.D0)*a - 54.D0)
     &                 *u**2 + 48.D0*(2.D0*a + 3.D0)*(2.D0*a + 5.D0)
     &                 *(a - 1.D0)*u**3)
                  IF (x.NE.0.D0) THEN
                     b1 = b1 +
     &                    x*q*((1176.D0*F*u + ((2040.D0*a+2616.D0)*u-
     &                    1200.D0-48.D0*x**2)*x)
     &                    *q + (((2944.D0*a+4432.D0)*a+912.D0)
     &                    *x + 8.D0*((794.D0*a+1535.D0)*a+222.D0)*F)
     &                    *u - (16.D0*((94.D0*a+385.D0)*a+216.D0)
     &                    + ((368.D0*a+1016.D0)*a+600.D0)*x**2)
     &                    *x + (2*a + 3.D0)
     &                    *((((608.D0*a+632.D0)*u-600.D0-24.D0*x**2)
     &                    *x**2-3456.D0-((1950.D0*a+2614.D0)*a-140.D0)
     &                    *u**2)*F + (a+1.D0)
     &                    *((120.D0*a+152.D0)*u*x**3-((414.D0*a+798.D0)
     &                    *a+20.D0)*u**2*x-8.D0*x**5)))
                     b2 = b2 +
     &                    x*q*(1200.D0*F*x - 1176.D0*q*u - 24.D0*((33.D0
     &                    *a+120.D0)*a + 38.D0)
     &                    *u - 24.D0*(53.D0*a + 60.D0)
     &                    *F*u*x + 48.D0*F*x**3 + (a + 1.D0)
     &                    *(3456.D0 + ((738.D0*a+1722.D0)*a+60.D0)
     &                    *u**2 + 24.D0*(25.D0-(13.D0*a+19.D0)*u+x**2)
     &                    *x**2))
                     b3 = b3 +
     &                    x*((1200.D0*F*x - 24.D0*((597.D0*a+720.D0)
     &                    *a+74.D0)*u - 1176.D0*q*u -
     &                    (2808.D0*a+2616.D0)*F*u*x + 48.D0*F*x**3)
     &                    *q + (a + 1.D0)
     &                    *((10368.D0-24.D0*(113.D0*a+79.D0)
     &                    *u*x**2+(72.D0*x**2+1800.D0)
     &                    *x**2+((11782.D0*a+10730.D0)*a-420.D0)*u**2)
     &                    *q + (2*a+1.D0)
     &                    *((((3090.D0*a+3898.D0)*a+60.D0)*u**2+3456.D0+
     &                    600.D0*x**2-304.D0*(14.D0*a+3.D0)
     &                    *u-(680.D0*a+456.D0)*u*x**2+24.D0*x**4)
     &                    *F*x+a*(((8.D0*x**2+184.D0)*x**2+752.D0)
     &                    *x**2-2304.D0-
     &                    ((3.D0*(((187.D0*a+479.D0)*a-6.D0)*a-240.D0)
     &                    *u+4.D0*((1175.D0*a+624.D0)*a-108.D0))
     &                    *u-96.D0*(55.D0*a-3.D0))
     &                    *u+(((570.D0*a+1278.D0)*a+356.D0)*u-60.D0*a-
     &                    440.D0-44.D0*(3.D0*a+4.D0)*x**2)*u*x**2))))
                     b4 = b4 +
     &                    x*((1176.D0*F*u - 1200.D0*x + 120.D0*(17.D0*a+
     &                    12.D0)*u*x - 48.D0*x**3)*q + (2.D0*a + 1.D0)
     &                    *((8.D0*(397.D0*a+114.D0)*u-3456.D0-
     &                    10.D0*((195.D0*a+289.D0)*a+6.D0)
     &                    *u**2-600.D0*x**2+8.D0*(76.D0*a+57.D0)
     &                    *u*x**2-24.D0*x**4)
     &                    *F + a*x*(440.D0*u-752.D0-((414.D0*a+1050.D0)
     &                    *a+356.D0)*u**2-184.D0*x**2+
     &                    8.D0*(15.D0*a+22.D0)*u*x**2-8.D0*x**4)))
                  ENDIF
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 + 24.D0*q*((60.D0*((9.D0*a+5.D0)*u-8.D0)*
     &                      q + 96.D0*(a-1.D0)*(2.D0*a-1.D0)
     &                      - 4.D0*(((74.D0*a+15.D0)*a+28.D0)*a+3.D0)
     &                      *u - (2.D0*a+3.D0)*(a+2.D0)
     &                      *((137.D0*a-37.D0)*a-30.D0)*u**2)
     &                      *F + 4.D0*(30.D0*((8.D0*a-6.D0)
     &                      *a+5.D0-7.D0*q)*q + (a+2.D0)
     &                      *(5.D0*((128.D0*a+80.D0)*a-33.D0)
     &                      *q-a*(((676.D0*a+544.D0)*a-201.D0)*a-144.D0)
     &                      )*u - (6.D0*a-6.D0)
     &                      *((2.D0*a-1.D0)*(4.D0*a-6.D0)*a+(a+1.D0)
     &                      *(2.D0*a+3.D0)*(2.D0*a+5.D0)*a*(a+2.D0)
     &                      *u**2)
     &                      + 5.D0*((12.D0*(2.D0*a-1.D0)*(((50.D0*a+
     &                      153.D0)*a+136.D0)*a+39.D0)
     &                      -84.D0*((10.D0*a+19.D0)*a+3.D0)*q)
     &                      *F+(a+2.D0)
     &                      *((2.D0*a+3.D0)*(2.D0*a+5.D0)*((37.D0*a-
     &                      17.D0)*a-6.D0)
     &                      *u*F+6.D0*(a*(2.D0*a-1.D0)*(((236.D0*a+
     &                      648.D0)*a+625.D0)*a+66.D0)
     &                      -3.D0*(((140.D0*a+294.D0)*a+196.D0)
     &                      *a-105.D0)*q+(2.D0*a+3.D0)*(2.D0*a+5.D0)
     &                      *(a*(a**2-1.D0)*(2.D0*a+6.D0)
     &                      *u-(14.D0*a-7.D0)
     &                      *(((7.D0*a+5.D0)*a+6.D0)*F+a*(a**2-1.D0)
     &                      *(2.D0*a+6.D0)/W)/W))/W))/W)/W)/W
                     C(2) = b3 + 8.D0*((1440.D0*q - 288.D0*(4.D0*a**2+
     &                      1.D0)
     &                      + 12.D0*(((168.D0*a+132.D0)*a+62.D0)*a+3.D0)
     &                      *u - 30.D0*(68.D0*a+30.D0)*q*u)
     &                      *q + (a + 1.D0)*(8.D0*a + 12.D0)
     &                      *(((338.D0*a-83.D0)*a-45.D0)
     &                      *q*u - (2.D0*a+1.D0)
     &                      *a**2*(12.D0+(169.D0*a-99.D0)*u+(a-1.D0)
     &                      *(6.D0*a+15.D0)*u**2))
     &                      *u + 3.D0*(((840.D0*q-120.D0*
     &                      (4.D0*a**2+5.D0))*q-(2.D0*a+3.D0)
     &                      *(40.D0*((65.D0*a+30.D0)*a-11.D0)
     &                      *q-5.D0*a*(2.D0*a+1.D0)*(a+1.D0)
     &                      *(12.D0*(25.D0*a-13.D0)+(a+2.D0)
     &                      *(37.D0*a-30.D0)*u))*u)
     &                      *F + 4.D0*((630.D0*((10.D0*a+15.D0)*a+2.D0)
     &                      *q-
     &                      90.D0*((((200.D0*a+420.D0)*a+162.D0)*a-63.D0
     &                      )*a-26.D0))*q+(2.D0*a+3.D0)
     &                      *((a+1.D0)*(1512.D0*(4.D0*a**2-1.D0)
     &                      *a**2-(a+2.D0)
     &                      *(30.D0*((44.D0*a-18.D0)*a-5.D0)
     &                      *q-6.D0*a**2*(2.D0*a+1.D0)
     &                      *(118.D0*a-83.D0+(a-1.D0)*(2.D0*a+5.D0)*u))
     &                      *u)
     &                      +5.D0*(42.D0*(((70.D0*a+129.D0)*a+53.D0)*a-
     &                      30.D0)*q*F-(a+1.D0)
     &                      *(a*(2.D0*a+1.D0)*(252.D0*(2.D0*a-1.D0)
     &                      *(4.D0*a+5.D0)+7.D0*(a+2.D0)*(2.D0*a+5.D0)
     &                      *(7.D0*a-6.D0)*u)*F-6.D0*(a+2.D0)
     &                      *(14.D0*(((56.D0*a+36.D0)*a+4.D0)*a-15.D0)
     &                      *q-a**2*(2.D0*a+1.D0)
     &                      *((4.D0*a+3.D0)*54.D0*(2.D0*a-1.D0)
     &                      +(2.D0*a+5.D0)
     &                      *((a-1.D0)*(2.D0*a+6.D0)*u-7.D0*
     &                      (2.D0*a-1.D0)
     &                      *(9.D0*F+(a-1.D0)*(2.D0*a+6.D0)/W)/W)))/W))
     &                      /W))/W)/W)/W
                     C(3) = b2 + 96.D0*q*((120.D0 - 25.D0*(4.D0*a+3.D0)*
     &                      u)*q - 24.D0*(4.D0*a**2 + 1.D0)
     &                      + ((((88.D0*a+72.D0)*a+12.D0)*a+3.D0)
     &                      + 3.D0*(a**2-1.D0)*(2.D0*a+3.D0)
     &                      *(2.D0*a+5.D0)*u)
     &                      *u + 5.D0*((42.D0*q-(24.D0*a**2+30.D0))
     &                      *F - (a+2.D0)
     &                      *((2.D0*a+3.D0)*(25.D0*a-11.D0)*u*F-
     &                      6.D0*(21.D0*(4.D0*a+1.D0)
     &                      *q-3.D0*(((32.D0*a+20.D0)*a-4.D0)*a-13.D0)
     &                      -(2.D0*a+3.D0)*(2.D0*a+5.D0)
     &                      *((a**2-1.D0)*u-7.D0*((5.D0*a-3.D0)
     &                      *F+(a**2-1.D0)*(2.D0*a+6.D0)/W)/W))/W))/W)/W
                     C(4) = b4 + 24.D0*((60.D0*((9.D0*a+5.D0)*u-8.D0)*q
     &                      + (a+1.D0)*(2.D0*a+1.D0)
     &                      *(96.D0-4.D0*(37.D0*a+3.D0)
     &                      *u-((137.D0*a+148.D0)*a-180.D0)*u**2))
     &                      *F + 4.D0*
     &                      ((30.D0*((8.D0*a+6.D0)*a+5.D0)-210.D0*q)
     &                      *q + (2.D0*a+3.D0)
     &                      *((a+1.D0)*(10.D0*(32.D0*a-11.D0)
     &                      *q*u-(2.D0*a+1.D0)
     &                      *(a*(12.D0+(169.D0*a-99.D0)*u)+3.D0*(a-1.D0)
     &                      *(2.D0*a+5.D0)*a*u**2))
     &                      -5.D0*(84.D0*(5.D0*a+1.D0)*q*F-(a+1.D0)
     &                      *((2.D0*a+1.D0)
     &                      *(12.D0*(25.D0*a-13.D0)+(a+2.D0)
     &                      *(37.D0*a-30.D0)*u)*F-6.D0*(a+2.D0)
     &                      *(105.D0*(2.D0*a-1.D0)*q-(2.D0*a+1.D0)
     &                      *((118.D0*a-83.D0)*a+(2.D0*a+5.D0)
     &                      *(a*(a-1.D0)
     &                      *u-7.D0*((7.D0*a-6.D0)*F+a*(a-1.D0)
     &                      *(2.D0*a+6.D0)/W)/W)))/W))/W))/W)/W
                     IF (x.NE.0.D0) THEN
                        C(1) = C(1)
     &                         - q*x*(720.D0*(((6.D0*a+23.D0)*a+19.D0)
     &                         + q)*F*x + (a + 2.D0)
     &                         *(720.D0*q*x**2 - 384.D0*((22.D0*a-5.D0)
     &                         *a+3.D0) + 11520.D0*q +
     &                         24.D0*(((430.D0*a+255.D0)*a+29.D0)
     &                         *a+6.D0)*u - 72.D0*(173.D0*a+107.D0)
     &                         *q*u + 120.D0*((2.D0*a+17.D0)*a+9.D0)
     &                         *x**2 + (2.D0*a+3.D0)
     &                         *(144.D0*F*x**3-24.D0*(95.D0*a+71.D0)
     &                         *F*u*x+(a+1.D0)
     &                         *(6.D0*((123.D0*a+137.D0)*a-120.D0)
     &                         *u**2-24.D0*(13.D0*a+14.D0)
     &                         *u*x**2+24.D0*x**4)))
     &                         - 24.D0*((2.D0*a+5.D0)
     &                         *((20.D0*((10.D0*a-7.D0)*a+9.D0)
     &                         -420.D0*q)*F+(a+2.D0)
     &                         *((10.D0*((14.D0*a-1.D0)*a+3.D0)
     &                         -180.D0*q)*x+(2.D0*a+3.D0)
     &                         *((199.D0*a-31.D0)*F*u-20.D0*F*x**2+
     &                         (a+1.D0)*((21.D0*a+13.D0)*u-2.D0*x**2)*x)
     &                         )) + 5.D0*(a+2.D0)
     &                         *(4*((((220.D0*a+1340.D0)*a+973.D0)
     &                         *a+123.D0)*a-234.D0)
     &                         -84.D0*((10.D0*a+55.D0)*a+21.D0)
     &                         *q+(2.D0*a+3.D0)*(2.D0*a+5.D0)
     &                         *((a+1.D0)*(a+3.D0)
     &                         *((15.D0*a-8.D0)*u-2.D0*x**2)
     &                         -30.D0*(a+3.D0)
     &                         *F*x-6.D0*(21.D0*((2.D0*a+13.D0)*a-3.D0)
     &                         *F+(a+1.D0)*(a+3.D0)
     &                         *((2.D0*a+7.D0)*x+(14.D0*a-7.D0)*(a+8.D0)
     &                         /W))/W))/W)/W)/W
                        C(2) = C(2)
     &                         + x*(720.D0*((12.D0*a+32.D0)*a + 19.D0 +
     &                         q)*q*x + (2.D0*a + 3.D0)
     &                         *((7680.D0+480.D0*x**2-
     &                         48.D0*(222.D0*a+107.D0)*u)*F*q + (a+1.D0)
     &                         *((288.D0*x**2-48.D0*(127.D0*a+71.D0)*u)
     &                         *q*x+(2.D0*a+1.D0)
     &                         *(((48.D0*x**2+720.D0)*x**2-768.D0+
     &                         (32.D0*(62.D0*a+3.D0)
     &                         +16.D0*((168.D0*a+139.D0)*a-90.D0)
     &                         *u-(920.D0*a+672.D0)*x**2)*u)
     &                         *F+a*x*((8.D0*x**2+40.D0-
     &                         (120.D0*a+152.D0)*u)
     &                         *x**2+((414.D0*a+798.D0)*a+20.D0)
     &                         *u**2-1408.D0+(2280.D0*a+736.D0)*u))))
     &                         + 6.D0*((a+2.D0)
     &                         *((4200.D0*q-200.D0*((20.D0*a+8.D0)
     &                         *a+9.D0))*q+(2.D0*a+3.D0)
     &                         *(1200.D0*F*q*x+(a+1.D0)
     &                         *((400.D0*x**2-(4960.D0*a-620.D0)*u)
     &                         *q+(2.D0*a+1.D0)
     &                         *((40.D0*x**2-200.D0-(548.D0*a+260.D0)*u)
     &                         *F*x+a*((((123.D0*a+137.D0)*a-120.D0)*u+(
     &                         2452.D0*a-792.D0))
     &                         *u+96.D0+4.D0*x**2*(x**2-35.D0-
     &                         (13.D0*a+14.D0)*u)))))) + (8.D0*a+12.D0)
     &                         *(420.D0*((10.D0*a+45.D0)*a+14.D0)
     &                         *F*q-(a+1.D0)
     &                         *(240.D0*(2.D0*a+1.D0)*((10.D0*a+45.D0)
     &                         *a-13.D0)*F-(a+2.D0)
     &                         *(450.D0*(2.D0*a+5.D0)*q*x+(2.D0*a+1.D0)
     &                         *(2.D0*a+5.D0)
     &                         *(30.D0*F*x**2-(274.D0*a-120.D0)
     &                         *F*u+a*x*(2.D0*x**2-220.D0-
     &                         (21.D0*a+13.D0)*u))
     &                         +5.D0*(42.D0*((42.D0*a+231.D0)*a-45.D0)
     &                         *q-(2.D0*a+1.D0)
     &                         *(8.D0*a*((118.D0*a+649.D0)*a-249.D0)
     &                         +(a+3.D0)*(2.D0*a+5.D0)
     &                         *(a*(15.D0*a-8.D0)*u-42.D0*F*x-
     &                         2.D0*a*x**2))+(12.D0*a+6.D0)
     &                         *(2.D0*a+5.D0)
     &                         *(28.D0*((2.D0*a+13.D0)*a-6.D0)
     &                         *F+a*(a+3.D0)
     &                         *((2.D0*a+7.D0)*x+(14.D0*a-7.D0)*(a+8.D0)
     &                         /W))/W)/W)))/W)/W)/W
                        C(3) = C(3)
     &                         + 24.D0*x*q*((30.D0*q + 10.D0*((4.D0*a+
     &                         16.D0)*a+9.D0))*x + (2.D0*a + 3.D0)
     &                         *((160.D0-(124.D0*a+114.D0)*u+10.D0*x**2)
     &                         *F + (a+1.D0)
     &                         *(2.D0*x**2-(21.D0*a+28.D0)*u)*x)
     &                         + (5.D0*a + 10.D0)
     &                         *(126.D0*q - 2.D0*((52.D0*a+4.D0)
     &                         *a+15.D0) + (2.D0*a+3.D0)
     &                         *(18.D0*F*x+(a+1.D0)
     &                         *(2.D0*x**2-(15.D0*a+13.D0)*u))
     &                         + (12.D0*a+18.D0)*(2.D0*a+5.D0)
     &                         *(14.D0*F+(a+1.D0)*(x+(7.D0*a+21.D0)/W))
     &                         /W)/W)/W
                        C(4) = C(4) - x*(720.D0*F*q*x + (a + 1.D0)*((
     &                         11520.D0+720.D0*x**2-
     &                         72.D0*(173.D0*a+114.D0)*u)
     &                         *q - (2.D0*a+1.D0)
     &                         *((24.D0*(95.D0*a+84.D0)*u-2160.D0-
     &                         144.D0*x**2)
     &                         *F*x+a*(4224.D0-24.D0*(215.D0*a+92.D0)
     &                         *u-6.D0*((123.D0*a+287.D0)*a+10.D0)
     &                         *u**2-120.D0*x**2+24.D0*(13.D0*a+19.D0)
     &                         *u*x**2-24.D0*x**4)))
     &                         + 24.D0*(2.D0*a + 3.D0)
     &                         *(420.D0*F*q + (a+1.D0)
     &                         *(180.D0*q*x-7.D0*a*(2.D0*a+1.D0)
     &                         *(3.D0*a+4.D0)*u*x-(2.D0*a+1.D0)
     &                         *((100.D0+(199.D0*a+130.D0)*u-20.D0*x**2)
     &                         *F+a*x*(70.D0-2.D0*x**2))+5.D0*(a+2.D0)
     &                         *(420.D0*q+(2.D0*a+1.D0)
     &                         *(30.D0*F*x+a*(2.D0*x**2-220.D0-
     &                         (15.D0*a+13.D0)*u)+6.D0*(2.D0*a+5.D0)
     &                         *(21.D0*F+a*(x+(7.D0*a+21.D0)/W))/W))/W))
     &                         /W)/W
                     ENDIF
                  ENDIF
               ELSE
C MULTIPOLE LQ=5 L1=L2                                                  CORA-376
                  bd = 12.D0*den*a**2*(a + 2.D0)*(2.D0*a + 5.D0)
     &                 *(4.D0*a**2 - 9.D0)*s*DSQRT(p*q)
                  b1 = 28.D0*p*q*F*(2.D0*a + 3.D0)/(a - 1.D0)
                  b2 = q*
     &                 (84.D0*q - a*(48.D0*a - 72.D0 - u*(a+2.D0)*(6.D0*
     &                 a+27.D0)))
                  b3 = p*(84.D0*q - a*(6.D0*a - 9.D0)
     &                 *(8.D0 + (a+2.D0)*u))
                  b4 = (4.D0*a - 6.D0)
     &                 *(14.D0*q + a*(24.D0 + (7.D0*a+12.D0)*u))
     &                 *F/(a + 1.D0)
                  IF (x.NE.0.D0) THEN
                     b1 = b1 + (28.D0*a + 42.D0)*x*p*q/(a - 1.D0)
                     b2 = b2 +
     &                    q*x*((28.D0*a + 126.D0)*F + ((4.D0*a+22.D0)
     &                    *a + 42.D0)*x)
                     b3 = b3 - p*x*(2.D0*a - 3.D0)*(14.D0*F - 2.D0*a*x)
                     b4 = b4 + x*(4.D0*a - 6.D0)
     &                    *(21.D0*q - a*(14.D0*a - 12.D0 + (a**2-3.D0)
     &                    *u) - x*((2.D0*a-7.D0)*F + a*x))/(a + 1.D0)
                  ENDIF
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 - p*q*(a + 2.D0)*(24.D0*a + 36.D0)/W
                     C(2) = b3 - p*(4.D0*a**2 - 9.D0)
     &                      *(8.D0*F - a*(6.D0*a + 12.D0)/W)/W
                     C(3) = b2 - q*(4.D0*a**2 - 9.D0)
     &                      *(8.D0*F - a*(6.D0*a + 12.D0)/W)/W
                     C(4) = b4 - (12.D0*a - 18.D0)
     &                      *((2.D0*a - 4.D0)*q + a*(a*(8.D0+(a+2.D0)*u)
     &                      + (8.D0*a+12.D0)*(F-(a+2.D0)*a/W)/W))/W
                     IF (x.NE.0.D0) THEN
                        C(3) = C(3) - x*q*(8.D0*a**2 - 18.D0)*(a + 4.D0)
     &                         /W
                        C(2) = C(2) + x*p*a*(8.D0*a**2 - 18.D0)/W
                        C(4) = C(4) - x*(12.D0*a - 18.D0)
     &                         *((2.D0*a - 4.D0)
     &                         *F + a*(x + (4.D0*a+6.D0)/W))/W
                     ENDIF
                  ENDIF
               ENDIF
               GOTO 100
            ELSEIF (Lq.EQ.6) THEN
               IF ((x.NE.0.D0) .OR. (MOD(Ll,2).NE.1) .OR. (Ll.EQ.7))
     &             GOTO 400
               IF (Ll.EQ.2 .OR. Ll.EQ.4 .OR. Ll.EQ.6 .OR. Ll.EQ.7)
     &             GOTO 400
               IF (Ll.EQ.3) THEN
C MULTIPOLE LQ=6 L1=L2-2                                                CORA-920
                  bd = 2520.D0*den*a**2*(2.D0*a + 5.D0)*(2.D0*a + 7.D0)
     &                 *(a + 2.D0)*(a + 3.D0)*(a + 4.D0)
     &                 *s*DSQRT(s*q*p*((a+1.D0)**2 + F**2)
     &                 *((a+2.D0)**2 + F**2))
                  b1 = 2*p*q*
     &                 (120.D0*((((2.D0*a+57.D0)*a-117.D0)*a-306.D0)
     &                 *a - 140.D0 + ((11.D0*a-129.D0)*a-113.D0-21.D0*q)
     &                 *q)/(a - 1.D0)
     &                 - ((((74.D0*a-865.D0)*a-5208.D0)*a-7344.D0)
     &                 *a - 3360.D0)*u + ((266.D0*a+863.D0)*a + 312.D0)
     &                 *q*u - 3.D0*(a + 1.D0)*(a + 2.D0)*(2.D0*a + 3.D0)
     &                 *(2.D0*a + 5.D0)*(2.D0*a + 7.D0)*u**2)
                  b2 = 6.D0*q*F*
     &                 ((120.D0*((2.D0*a-147.D0)*a-113.D0-21.D0*q)
     &                 *q + 60.D0*((((4.D0*a-56.D0)*a-261.D0)*a-259.D0)
     &                 *a-56.D0)
     &                 *u + (((86.D0*a-573.D0)*a-2171.D0)*a-312.D0)
     &                 *q*u - 16800.D0*(a+1.D0)*(2.D0*a+1.D0))
     &                 /(2.D0*a + 3.D0) + (a + 2.D0)
     &                 *(((43.D0*a+193.D0)*a+210.D0)*a + 105.D0)*u**2)
                  b3 = 3*p*
     &                 ((240.D0*((2.D0*a-147.D0)*a-113.D0-21.D0*q)*q +
     &                 40.D0*(a+1.D0)*(2.D0*a+1.D0)
     &                 *(((2.D0*a+63.D0)*a+69.D0)*a-168.D0)
     &                 *u + (((892.D0*a+1374.D0)*a-2182.D0)*a-624.D0)
     &                 *q*u - 33600.D0*(a+1.D0)*(2.D0*a+1.D0))
     &                 /(2.D0*a + 3.D0) - (a + 1.D0)*(a + 2.D0)
     &                 *(2.D0*a + 1.D0)*((19.D0*a-6.D0)*a - 210.D0)
     &                 *u**2)*F
                  b4 = (((2.D0*a-3.D0)*(240.D0*((((2.D0*a+69.D0)*a-
     &                 369.D0)*a-534.D0)
     &                 *a-140.D0+((11.D0*a-165.D0)*a-113.D0-21.D0*q)*q)
     &                 *q+((((532.D0*a-1326.D0)*a-5422.D0)*a-624.D0)
     &                 *q-((((148.D0*a-4110.D0)*a+4130.D0)*a+45120.D0)
     &                 *a+40512.D0)*a-6720.D0)*q*u)/(a+1.D0)
     &                 + 240.D0*a**2*(2.D0*a+1.D0)
     &                 *((a+2.D0)*((2.D0*a+59.D0)*a-189.D0)*u-840.D0))
     &                 /(2.D0*a + 3.D0)
     &                 - (2.D0*(((((24.D0*a-26.D0)*a+317.D0)*a+2298.D0)
     &                 *a+2001.D0)*a+630.D0)*q + a**2*(2.D0*a+1.D0)
     &                 *(((74.D0*a-1068.D0)*a-4812.D0)*a-3360.D0+
     &                 3*(a+2.D0)*(2.D0*a+3.D0)*(2.D0*a+5.D0)
     &                 *(2.D0*a+7.D0)*u))*u**2)
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 + 6.D0*p*q*(a + 2.D0)
     &                      *((360.D0*q + 40.D0*((2.D0*a+53.D0)*a+57.D0)
     &                      - (2.D0*a+3.D0)*((19.D0*a+37.D0)*a-72.D0)*u)
     &                      *F - (4.D0*a + 10.D0)
     &                      *(20.D0*(2.D0*a-3.D0)*q +
     &                      10.D0*(((2.D0*a+45.D0)*a+75.D0)*a+42.D0)
     &                      - (a+1.D0)*(a+2.D0)*(6.D0*a+9.D0)
     &                      *(2.D0*a+7.D0)*u + (a+3.D0)*(20.D0*a+30.D0)
     &                      *((a+16.D0)*F+(a+2.D0)*(6.D0*a+21.D0)
     &                      *(a+1.D0)/W)/W)/W)/W
                     C(2) = b3 + 2.D0*p*((2.D0*a - 3.D0)*(240.D0*(3.D0*q
     &                      -(a-21.D0)*a+19.D0) - (a+1.D0)
     &                      *((116.D0*a+166.D0)*a-432.D0)*u)
     &                      *q + a*(a + 1.D0)*(2.D0*a + 1.D0)
     &                      *(16800.D0 -
     &                      (20.D0*(((2.D0*a+63.D0)*a+174.D0)*a+42.D0)
     &                      -(a+2.D0)*(6.D0*a+9.D0)*(2.D0*a+5.D0)
     &                      *(2.D0*a+7.D0)*u)*u) - (3.D0*a + 6.D0)
     &                      *((20.D0*(a-2.D0)*(2.D0*a-3.D0)*q-(a+1.D0)
     &                      *(2.D0*a+1.D0)
     &                      *(840.D0-(2.D0*a+3.D0)*((a+30.D0)*a+84.D0)
     &                      *u))*5.D0*F - (4.D0*a+10.D0)*(a+1.D0)
     &                      *(30.D0*((2.D0*a+7.D0)*a+48.D0)
     &                      *q-(2.D0*a+1.D0)
     &                      *(a*(840.D0+(3.D0*a+6.D0)*(2.D0*a+3.D0)
     &                      *(2.D0*a+7.D0)*u)-(a+3.D0)*(20.D0*a+30.D0)
     &                      *((7.D0*a+42.D0)*F+a*(a+2.D0)*(6.D0*a+21.D0)
     &                      /W)/W))/W)/W)/W
                     C(3) = b2 + 6.D0*q*((2.D0*a - 3.D0)*(80.D0*(3.D0*q-
     &                      (a-21.D0)*a+19.D0)
     &                      - (((12.D0*a-26.D0)*a-222.D0)*a-144.D0)*u)
     &                      *q -
     &                      40.D0*a*((((4.D0*a-6.D0)*a-90.D0)*a-138.D0)
     &                      *a - 63.D0)*u + a*(a + 1.D0)
     &                      *(5600.D0*(2.D0*a+1.D0) - 3.D0*(a+2.D0)
     &                      *(2.D0*a+3.D0)*(2.D0*a+5.D0)*(2.D0*a+7.D0)
     &                      *u**2) + 10.D0*(a + 2.D0)
     &                      *((420.D0*(a+1.D0)*(2.D0*a+1.D0)
     &                      -10.D0*(a-2.D0)*(2.D0*a-3.D0)
     &                      *q-(2.D0*a+3.D0)
     &                      *(((10.D0*a+34.D0)*a+21.D0)*a+42.D0)*u)
     &                      *F + (6.D0*a+15.D0)
     &                      *((a+1.D0)*(((4.D0*a+14.D0)*a+96.D0)
     &                      *q+a*((a+2.D0)*(2.D0*a+3.D0)*(2.D0*a+7.D0)
     &                      *u-56.D0*(2.D0*a+1.D0)))-14.D0*(a+3.D0)
     &                      *(2.D0*a+3.D0)
     &                      *((3.D0*a-2.D0)*F+a*(a+2.D0)*(2.D0*a+7.D0)
     &                      *(a+1.D0)/W)/W)/W)/W)/W
                     C(4) = b4 + 6.D0*(((a-2.D0)*(2.D0*a-3.D0)*(40.D0*(
     &                      9.D0*q+(2.D0*a+73.D0)*a+57.D0)
     &                      -(((38.D0*a-49.D0)*a-433.D0)*a-216.D0)*u)
     &                      *q + a*(a+1.D0)*(2.D0*a+1.D0)
     &                      *(40.D0*(((2.D0*a+63.D0)*a+69.D0)*a-168.D0)
     &                      *u-33600.D0-(a+2.D0)*(2.D0*a+3.D0)
     &                      *((19.D0*a-6.D0)*a-210.D0)*u**2))
     &                      *F/(2.D0*a + 3.D0)
     &                      - (20.D0*(((((4.D0*a+132.D0)*a+35.D0)
     &                      *a+1509.D0)*a+1812.D0)*a+420.D0+(a-2.D0)
     &                      *(4.D0*a-6.D0)*(2.D0*a-5.D0)*q)*q - (a+1.D0)
     &                      *(4.D0*(((((12.D0*a+80.D0)*a+625.D0)*a+
     &                      1710.D0)*a+1158.D0)*a+630.D0)
     &                      *q*u+a**2*(2.D0*a+1.D0)
     &                      *(16800.D0-(20.D0*(((2.D0*a+63.D0)*a+174.D0)
     &                      *a+42.D0)-(3.D0*a+6.D0)*(2.D0*a+3.D0)
     &                      *(2.D0*a+5.D0)*(2.D0*a+7.D0)*u)*u))
     &                      + (10.D0*a+20.D0)
     &                      *((((((4.D0*a+132.D0)*a+371.D0)*a+1173.D0)
     &                      *a+720.D0)*q-a*(a+1.D0)*(2.D0*a+1.D0)
     &                      *(840.D0-(2.D0*a+3.D0)*((a+30.D0)*a+84.D0)
     &                      *u))*2.D0*F+(6.D0*a+15.D0)*(a+1.D0)
     &                      *(((((8.D0*a+60.D0)*a+220.D0)*a-30.D0)
     &                      *a+252.D0)*q+a*(2.D0*a+1.D0)
     &                      *(280.D0*a+(2.D0*a+3.D0)
     &                      *(a*(a+2.D0)*(2.D0*a+7.D0)*u-14.D0*(a+3.D0)
     &                      *((2.D0*a+12.D0)*F+a*(a+2.D0)*(2.D0*a+7.D0)
     &                      /W)/W)))/W)/W)/W)/W
                  ENDIF
               ELSEIF (Ll.EQ.5) THEN
C MULTIPOLE LQ=6 L1=L2-4                                                CORA-986
                  bd = 181440.D0*den*a**2*(a + 2.D0)*(a + 3.D0)
     &                 *(a + 4.D0)*(2.D0*a + 5.D0)*(2.D0*a + 7.D0)
     &                 *s*DSQRT(s*q*((a+1.D0)**2 + F**2)
     &                 *((a+2.D0)**2 + F**2)*((a+3.D0)**2 + F**2))
                  b1 = -q*((4320.D0*((7.D0*q+(a+78.D0)*a+103.D0)*q+((
     &                 10.D0*a+255.D0)*a+638.D0)*a+420.D0)
     &                 *q + 2880.D0*a*(a+2.D0)*(a+3.D0)*(a+4.D0)
     &                 *(2.D0*a+5.D0)*(2.D0*a+7.D0))/(a - 1.D0)
     &                 - 72.D0*((5.D0*((14.D0*a-13.D0)*a+30.D0)
     &                 *q+(((38.D0*a+833.D0)*a+243.D0)*a+678.D0)
     &                 *a+2520.D0)
     &                 *q + a*(((((148.D0*a+2304.D0)*a+13879.D0)
     &                 *a+31194.D0)*a+31336.D0)*a+13440.D0))
     &                 *u + (a + 2.D0)*(4.D0*a + 10.D0)
     &                 *(a*((((814.D0*a+8467.D0)*a+23265.D0)*a+30834.D0)
     &                 *a+16632.D0)
     &                 + (((338.D0*a+1757.D0)*a+8199.D0)*a+8190.D0)
     &                 *q - 24.D0*a*(a+1.D0)*(a+3.D0)*(2.D0*a+3.D0)
     &                 *(2.D0*a+5.D0)*(2.D0*a+7.D0)*u)*u**2)
                  b2 = -6.D0*q*F*(2160.D0*((4.D0*a+84.D0)*a + 103.D0 +
     &                 7.D0*q)*q/(2.D0*a + 3.D0)
     &                 + 1440.D0*(((2.D0*a+33.D0)*a+226.D0)*a + 210.D0)
     &                 - (a + 2.D0)
     &                 *(12.D0*(((62.D0*a+623.D0)*a+126.D0)*a-1260.D0)
     &                 + 180.D0*(4.D0*a-5.D0)*q + (a+3.D0)*(2.D0*a+5.D0)
     &                 *((41.D0*a+591.D0)*a+910.D0)*u)*u)
                  b3 = -3.D0*F*(((30240.D0*q+4320.D0*((4.D0*a+84.D0)*a+
     &                 103.D0)-360.D0*(4.D0*a**2+5.D0)*(5.D0*a-6.D0)*u)
     &                 *q -
     &                 24.D0*(((((284.D0*a+3480.D0)*a+25.D0)*a-690.D0)
     &                 *a+396.D0)*a-7560.D0)*u)*q/(2.D0*a + 3.D0)
     &                 + 2880.D0*(((2.D0*a+33.D0)*a+226.D0)*a + 210.D0)
     &                 *q + (2.D0*a + 4.D0)
     &                 *((((98.D0*a-2563.D0)*a-7346.D0)*a-19775.D0)
     &                 *a - 13650.D0)*q*u**2 + a*(a + 1.D0)
     &                 *(2.D0*a + 1.D0)
     &                 *(480.D0*(((2.D0*a+33.D0)*a+226.D0)*a+840.D0)
     &                 + (a+2.D0)
     &                 *((a+3.D0)*(2.D0*a+5.D0)*((233.D0*a+1798.D0)
     &                 *a+2520.D0)
     &                 *u-4.D0*(((262.D0*a+3523.D0)*a+16926.D0)
     &                 *a+17640.D0))*u)*u)
                  b4 = -(4320.D0*(2.D0*a - 3.D0)*((7.D0*q+(a+90.D0)*a+
     &                 103.D0)
     &                 *q + 7.D0*(((2.D0*a+57.D0)*a+118.D0)*a+60.D0))
     &                 *q/((a+1.D0)*(2.D0*a+3.D0))
     &                 - 72.D0*(2.D0*a - 3.D0)
     &                 *((35.D0*a-50.D0)*q + ((19.D0*a+425.D0)*a-66.D0)
     &                 *a - 840.D0)*q*u + (a + 2.D0)*(4.D0*a + 10.D0)
     &                 *(((338.D0*a+1567.D0)*a+8439.D0)*a + 8190.D0)
     &                 *q*u**2 + a*(4.D0*a + 2.D0)
     &                 *(1440.D0*(((2.D0*a+33.D0)*a+226.D0)*a+840.D0)
     &                 - 36.D0*
     &                 ((((74.D0*a+1109.D0)*a+6154.D0)*a+9304.D0)
     &                 *a+3360.D0)*u + (a+2.D0)*(2.D0*a+5.D0)
     &                 *(((407.D0*a+3765.D0)*a+6714.D0)*a+4536.D0-
     &                 12.D0*(a+3.D0)*(2.D0*a+3.D0)*(2.D0*a+5.D0)
     &                 *(2.D0*a+7.D0)*u)*u**2))
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 + 6.D0*q*(a + 2.D0)
     &                      *((240.D0*(9.D0*q+(8.D0*a+98.D0)*a+141.D0)
     &                      *q +
     &                      4.D0*(((((524.D0*a+7460.D0)*a+40945.D0)*a+
     &                      88825.D0)*a+77406.D0)*a+17640.D0)
     &                      *u - 60.D0*(((6.D0*a-7.D0)*a+23.D0)*a-30.D0)
     &                      *q*u - (a+3.D0)*(2.D0*a+5.D0)
     &                      *(480.D0*(a+4.D0)*(2.D0*a+7.D0)+(a+2.D0)
     &                      *(2.D0*a+3.D0)*((233.D0*a+1373.D0)*a+420.D0)
     &                      *u**2))*F + 4.D0*(2.D0*a + 5.D0)
     &                      *((a+2.D0)*(5.D0*
     &                      (((116.D0*a+1028.D0)*a+3015.D0)*a+1953.D0)
     &                      *q-
     &                      a*((((292.D0*a+2908.D0)*a+9639.D0)*a+5517.D0
     &                      )*a-756.D0))
     &                      *u - 60.D0*((((14.D0*a+153.D0)*a+467.D0)
     &                      *a+483.D0)+(2.D0*a-3.D0)*q)*q + (a+3.D0)
     &                      *(12.D0*(2.D0*a+7.D0)
     &                      *a*(5.D0*(a+4.D0)*(2.D0*a-3.D0)-(a+1.D0)
     &                      *(a+2.D0)*(2.D0*a+3.D0)*(2.D0*a+5.D0)*u**2)
     &                      +5.D0*
     &                      ((12.D0*(a+4.D0)*(a-2.D0)*(2.D0*a-3.D0)
     &                      *(2.D0*a+7.D0)
     &                      -12.D0*((22.D0*a+175.D0)*a+318.D0)*q)
     &                      *F+(a+2.D0)
     &                      *((2.D0*a+3.D0)*(2.D0*a+5.D0)*((85.D0*a+
     &                      409.D0)*a+84.D0)*u*F-6.D0*(2.D0*a+7.D0)
     &                      *(15.D0*((20.D0*a+92.D0)*a+51.D0)*q-(a+4.D0)
     &                      *a*((332.D0*a+368.D0)*a+141.D0)
     &                      -(2.D0*a+3.D0)*(2.D0*a+5.D0)
     &                      *(4.D0*a*(a+1.D0)*(a+3.D0)*u-7.D0*(a+4.D0)
     &                      *((19.D0*a+3.D0)*F+8.D0*a*(a+1.D0)*(a+3.D0)
     &                      /W)/W))/W))/W))/W)/W
                     xx = (3.D0*a + 6.D0)
     &                    *(5.D0*F*(120.D0*((((8.D0*a+116.D0)*a+682.D0)
     &                    *a+1405.D0)*a+966.D0-(a-2.D0)*(2.D0*a-3.D0)*q)
     &                    *q - (2.D0*a+3.D0)
     &                    *(4.D0*((((140.D0*a+1808.D0)*a+7627.D0)
     &                    *a+13909.D0)*a+6510.D0)*q-a*(a+1.D0)
     &                    *(2.D0*a+1.D0)
     &                    *(12.D0*(((2.D0*a+33.D0)*a+226.D0)*a+840.D0)
     &                    +(a+2.D0)*(a+3.D0)*(10.D0*a+25.D0)
     &                    *(17.D0*a+84.D0)*u))*u) + (4.D0*a + 10.D0)
     &                    *(12.D0*(a+2.D0)
     &                    *(30.D0*(((8.D0*a+62.D0)*a+159.D0)
     &                    *q-((((4.D0*a+40.D0)*a+151.D0)*a+94.D0)
     &                    *a+84.D0))*q-(a+1.D0)*(2.D0*a+3.D0)
     &                    *(5.D0*(((68.D0*a+564.D0)*a+1285.D0)*a+210.D0)
     &                    *q-a**2*(2.D0*a+1.D0)
     &                    *(((166.D0*a+1399.D0)*a+3108.D0)+(a+3.D0)
     &                    *(4.D0*a+10.D0)*(2.D0*a+7.D0)*u))*u)
     &                    + 10.D0*(a+3.D0)
     &                    *(42.D0*(2.D0*a+3.D0)*(((70.D0*a+561.D0)
     &                    *a+1241.D0)*a+510.D0)*q*F-(2.D0*a+3.D0)
     &                    *(a+1.D0)
     &                    *(7.D0*a*(a+2.D0)*(2.D0*a+1.D0)*(2.D0*a+5.D0)
     &                    *(19.D0*a+84.D0)*u*F+(2.D0*a+7.D0)
     &                    *(1008.D0*a*(a+4.D0)*(2.D0*a+1.D0)
     &                    *F-(6.D0*a+12.D0)
     &                    *(4.D0*((194.D0*a+797.D0)*a+105.D0)
     &                    *q-a*(2.D0*a+1.D0)
     &                    *(432.D0*a*(a+4.D0)+(2.D0*a+5.D0)
     &                    *(4.D0*a*(a+3.D0)*u-7.D0*(a+4.D0)
     &                    *(27.D0*F+8.D0*a*(a+3.D0)/W)/W)))/W)))/W)/W)/W
                     C(2) = b3 + 2.D0*(1440.D0*(((((8.D0*a+132.D0)*a+
     &                      906.D0)*a+2133.D0)*a+2116.D0)*a + 840.D0 +
     &                      (2.D0*a-3.D0)*((a+36.D0)*a+47.D0+3.D0*q)*q)
     &                      *q -
     &                      24.D0*((((((504.D0*a+7644.D0)*a+39370.D0)
     &                      *a+119625.D0)*a+174926.D0)*a+106596.D0)
     &                      *a + 17640.D0 + (10.D0*a-15.D0)
     &                      *(((8.D0*a-6.D0)*a+13.D0)*a-30.D0)*q)
     &                      *q*u + (a + 1.D0)*(8.D0*a + 12.D0)
     &                      *((a+2.D0)*(2.D0*a+5.D0)
     &                      *(((362.D0*a+3013.D0)*a+8436.D0)*a+1890.D0)
     &                      *q*u + a**2*(2.D0*a+1.D0)
     &                      *(60.D0*(((2.D0*a+33.D0)*a+226.D0)*a+840.D0)
     &                      -(a+2.D0)*(2.D0*a+5.D0)
     &                      *((73.D0*a+822.D0)*a+3024.D0+(a+3.D0)
     &                      *(12.D0*a+30.D0)*(2.D0*a+7.D0)*u)*u))
     &                      *u + xx)/W
                     C(3) = b2 + 24.D0*q*(2.D0*(60.D0*(((((8.D0*a+132.D0
     &                      )*a+906.D0)*a+2133.D0)*a+2116.D0)
     &                      *a+840.D0+(2.D0*a-3.D0)
     &                      *(3.D0*q+(a+36.D0)*a+47.D0)*q) - (a+2.D0)
     &                      *(2.D0*a+5.D0)
     &                      *((((112.D0*a+1218.D0)*a+3459.D0)*a+4242.D0)
     &                      *a+1764.D0+5.D0*(2.D0*a-3.D0)
     &                      **2*q-3.D0*(a+1.D0)*(a+3.D0)*(2.D0*a+3.D0)
     &                      *(2.D0*a+5.D0)*(2.D0*a+7.D0)*u)*u)
     &                      + 5.D0*(a + 2.D0)
     &                      *(30.D0*(((((8.D0*a+116.D0)*a+682.D0)
     &                      *a+1405.D0)*a+966.D0)-(a-2.D0)*(2.D0*a-3.D0)
     &                      *q)*F - (a+2.D0)*(2.D0*a+5.D0)
     &                      *((a+3.D0)*(2.D0*a+3.D0)*(37.D0*a+217.D0)
     &                      *u*F+
     &                      6.D0*(6.D0*((((4.D0*a+40.D0)*a+151.D0)*a+
     &                      94.D0)*a+84.D0)
     &                      -2.D0*((24.D0*a+186.D0)*a+477.D0)
     &                      *q+(2.D0*a+3.D0)*(2.D0*a+5.D0)
     &                      *(2.D0*(a+1.D0)*(a+3.D0)*(2.D0*a+7.D0)
     &                      *u-7.D0*(a+3.D0)
     &                      *((11.D0*a+51.D0)*F+4.D0*(2.D0*a+7.D0)
     &                      *(a+1.D0)*(a+3.D0)/W)/W))/W))/W)/W
                     C(4) = b4 + 6.D0*((240.D0*(a-2.D0)*(2.D0*a-3.D0)*(
     &                      9.D0*q+(8.D0*a+118.D0)*a+141.D0)
     &                      *q/(2.D0*a+3.D0) - 60.D0*(a**2-4.D0)
     &                      *(2.D0*a-3.D0)*(3.D0*a-5.D0)*q*u - (a+1.D0)
     &                      *(2.D0*a+1.D0)
     &                      *(480.D0*(((2.D0*a+33.D0)*a+226.D0)
     &                      *a+840.D0)+(a+2.D0)
     &                      *((a+3.D0)*(2.D0*a+5.D0)*((233.D0*a+1798.D0)
     &                      *a+2520.D0)
     &                      *u**2-4.D0*(((262.D0*a+3523.D0)*a+16926.D0)
     &                      *a+17640.D0)*u)))
     &                      *F - 4.D0*(60.D0*(7.D0*(((((4.D0*a+60.D0)
     &                      *a+291.D0)*a+969.D0)*a+1409.D0)*a+690.D0)
     &                      +(a-2.D0)*(2.D0*a-3.D0)*(2.D0*a-5.D0)*q)
     &                      *q - (a+1.D0)*(2.D0*a+3.D0)
     &                      *(60.D0*a*(2.D0*a+1.D0)
     &                      *(((2.D0*a+33.D0)*a+226.D0)*a+840.D0)
     &                      +(a+2.D0)*(2.D0*a+5.D0)
     &                      *(5.D0*((58.D0*a+473.D0)*a+1302.D0)
     &                      *q-a*(2.D0*a+1.D0)
     &                      *((73.D0*a+822.D0)*a+3024.D0+6.D0*(a+3.D0)
     &                      *(2.D0*a+5.D0)*(2.D0*a+7.D0)*u))*u)
     &                      + 5.D0*(a+2.D0)*(2.D0*a+3.D0)
     &                      *(12.D0*(((22.D0*a+273.D0)*a+1001.D0)
     &                      *a+1590.D0)*q*F-(a+1.D0)
     &                      *(12.D0*(2.D0*a+1.D0)
     &                      *(((2.D0*a+33.D0)*a+226.D0)*a+840.D0)
     &                      *F+(a+2.D0)*(2.D0*a+5.D0)
     &                      *(5.D0*(a+3.D0)*(2.D0*a+1.D0)
     &                      *(17.D0*a+84.D0)
     &                      *u*F-6.D0*(15.D0*((20.D0*a+164.D0)*a+357.D0)
     &                      *q-(2.D0*a+1.D0)
     &                      *(a*((166.D0*a+1399.D0)*a+3108.D0)+(a+3.D0)
     &                      *(2.D0*a+5.D0)
     &                      *(a*(4.D0*a+14.D0)*u-7.D0*((19.D0*a+84.D0)
     &                      *F+4.D0*a*(2.D0*a+7.D0)*(a+3.D0)/W)/W)))/W))
     &                      )/W)/W)/W
                  ENDIF
               ELSE
C MULTIPOLE LQ=6 L1=L2                                                  CORA-859
                  bd = 120.D0*den*a**2*(2.D0*a + 7.D0)*(2.D0*a + 5.D0)
     &                 *(a + 2.D0)*(a + 3.D0)*(a + 4.D0)
     &                 *DSQRT(s*q*p*((a+1.D0)**2 + F**2)
     &                 *((a+1.D0)**2 + E**2))*s**2
                  b1 = p*q*
     &                 ((8.D0*(((154.D0*a-205.D0)*a-376.D0)*a-140.D0+
     &                 ((47.D0*a-282.D0)*a-143.D0-63.D0*q)*q)
     &                 + 4.D0*((((47.D0*a+26.D0)*a-553.D0)*a-752.D0)
     &                 *a-280.D0-((79.D0*a+282.D0)*a+143.D0)*q)*u)
     &                 /(a - 1.D0) + 2.D0*(2.D0*a + 7.D0)
     &                 *(2.D0*a + 5.D0)*(a + 1.D0)**2*u**2)
                  b2 = (240.D0*(2.D0*a + 1.D0)**2*(a - 14.D0)
     &                 + 24.D0*((20.D0*a-336.D0)*a - 143.D0)
     &                 *q - 1512.D0*q**2 -
     &                 6.D0*((((36.D0*a+836.D0)*a+2797.D0)*a+2374.D0)
     &                 *a + 560.D0 +
     &                 (((18.D0*a+275.D0)*a+726.D0)*a+286.D0)
     &                 *q + (a+1.D0)
     &                 *(((26.D0*a+146.D0)*a+210.D0)*a+35.D0)*u)*u)
     &                 /(2.D0*a + 3.D0)
                  b3 = p*F*(b2 + a*(2.D0*a + 4.D0)
     &                 *u*(54.D0*q + 6.D0*(38.D0*a+29.D0)
     &                 + 3.D0*(a+1.D0)*(9.D0*a+29.D0)*u))
                  b2 = q*F*b2
                  b4 = (((((((32.D0*a-216.D0)*a-1692.D0)*a-2272.D0)*a+
     &                 454.D0)*a+1402.D0)*a + 210.D0)
     &                 *q*u**2 + (2.D0*a - 3.D0)
     &                 *((16.D0*a+8.D0)*((107.D0*a-444.D0)*a-140.D0)
     &                 + 8.D0*((((47.D0*a-176.D0)*a-924.D0)*a-724.D0)
     &                 *a-140.D0)
     &                 *u + (8.D0*((47.D0*a-390.D0)*a-143.D0)-4.D0*
     &                 ((142.D0*a+390.D0)*a+143.D0)*u-504.D0*q)*q)
     &                 *q + a**2*(2.D0*a + 1.D0)
     &                 *(480.D0*(2.D0*a+1.D0)*(a-14.D0)
     &                 + (4.D0*(((214.D0*a-849.D0)*a-3808.D0)*a-2100.D0)
     &                 +((((204.D0*a+752.D0)*a-232.D0)*a-2550.D0)
     &                 *a-1680.D0)*u)*u))/((a + 1.D0)*(2.D0*a + 3.D0))
     &                 + a**2*(2.D0*a + 5.D0)*(2.D0*a + 7.D0)
     &                 *(2.D0*a + 1.D0)*(a + 1.D0)*u**3
                  IF (.NOT.(Lt)) THEN
                     C(1) = b1 + 12.D0*p*q*(a + 2.D0)
     &                      *((58.D0 + 76.D0*a + 18.D0*q + (a+1.D0)
     &                      *(9.D0*a+29.D0)*u)*F - (2.D0*a + 5.D0)
     &                      *((28.D0*a+32.D0)*a + 14.D0 + (4.D0*a-6.D0)
     &                      *q + (a+1.D0)
     &                      *((a+1.D0)*(2.D0*a+7.D0)*u+10.D0*(a+3.D0)
     &                      *(2.D0*F-(a+1.D0)*(2.D0*a+7.D0)/W)/W))/W)/W
                     C(2) = b3 - 2.D0*p*(2.D0*a*((((48.D0*a+16.D0)*a-
     &                      570.D0)*a-703.D0)*a - 210.D0)
     &                      *u + (2.D0*a - 3.D0)
     &                      *((((4.D0*a-34.D0)*a-172.D0)*a-116.D0)
     &                      *u + 8.D0*((5.D0*a-48.D0)*a-29.D0)
     &                      - 72.D0*q)*q - a*(2.D0*a + 1.D0)
     &                      *(40.D0*(2.D0*a+1.D0)*(14.D0-a)
     &                      - (2.D0*a+7.D0)*(2.D0*a+5.D0)*(a+1.D0)
     &                      **2*u**2) - 6.D0*(a + 2.D0)
     &                      *(5.D0*((14.D0-a)*(2.D0*a+1.D0)**2-(a-2.D0)
     &                      *(2.D0*a-3.D0)*q-(a+1.D0)*(2.D0*a+1.D0)
     &                      *((a+1.D0)*a-7.D0)*u)*F + (2.D0*a+5.D0)
     &                      *((((4.D0*a+6.D0)*a+92.D0)*a+60.D0)
     &                      *q+(2.D0*a+1.D0)
     &                      *((a-14.D0)*a*(4.D0*a+2.D0)+(a+1.D0)
     &                      *(a*(a+1.D0)*(2.D0*a+7.D0)*u-10.D0*(a+3.D0)
     &                      *(7.D0*F+(2.D0*a+7.D0)*a*(a+1.D0)/W)/W)))/W)
     &                      /W)/W
                     C(3) = b2 + 2.D0*q*(a*((((16.D0*a+600.D0)*a+2332.D0
     &                      )*a+2298.D0)*a + 700.D0)*u + (2.D0*a - 3.D0)
     &                      *((((4.D0*a+70.D0)*a+212.D0)*a+116.D0)
     &                      *u - 8.D0*((5.D0*a-48.D0)*a-29.D0)
     &                      + 72.D0*q)*q + 40.D0*(2.D0*a + 1.D0)
     &                      **2*a*(14.D0 - a) + 3.D0*a*(2.D0*a + 5.D0)
     &                      *(2.D0*a + 7.D0)*(a + 1.D0)**2*u**2 +
     &                      6.D0*(a + 2.D0)
     &                      *(5.D0*((14.D0-a)*(2.D0*a+1.D0)**2-(a-2.D0)
     &                      *(2.D0*a-3.D0)*q+(a+1.D0)
     &                      *((8.D0*a+28.D0)*a+7.D0)*u)
     &                      *F + (2.D0*a+5.D0)
     &                      *((((4.D0*a+6.D0)*a+92.D0)*a+60.D0)
     &                      *q+2.D0*(a-14.D0)*a*(2.D0*a+1.D0)
     &                      **2-5.D0*a*(a+1.D0)**2*(2.D0*a+7.D0)
     &                      *u-10.D0*(a+3.D0)*(a+1.D0)*(2.D0*a+1.D0)
     &                      *(7.D0*F+(2.D0*a+7.D0)*a*(a+1.D0)/W)/W)/W)
     &                      /W)/W
                     C(4) = b4 + 6.D0*(2.D0*F*((2.D0*a-3.D0)*(a-2.D0)*((
     &                      (18.D0*a+58.D0)*a+29.D0)
     &                      *u+58.D0*(2.D0*a+1.D0)+18.D0*q)
     &                      *q + a*(2.D0*a+1.D0)
     &                      *(40.D0*(2.D0*a+1.D0)*(a-14.D0)
     &                      +(((58.D0*a-123.D0)*a-906.D0)*a-560.D0)
     &                      *u+(a+1.D0)
     &                      *(((9.D0*a+43.D0)*a+34.D0)*a-35.D0)*u**2))
     &                      /(2.D0*a + 3.D0)
     &                      - ((((((16.D0*a**2+60.D0)*a+820.D0)
     &                      *a+794.D0)*a+140.D0)*u+4.D0*(2.D0*a-3.D0)
     &                      *(2.D0*a-5.D0)*(a-2.D0)*q)*q - (2.D0*a+1.D0)
     &                      *
     &                      (a**2*(40.D0*(14.D0-a)*(2.D0*a+1.D0)-(a+1.D0
     &                      )**2*(2.D0*a+5.D0)*(2.D0*a+7.D0)*u**2)
     &                      -4.D0*(((24.D0*a-44.D0)*a+257.D0)*a+70.D0)
     &                      *q-(((48.D0*a-8.D0)*a-566.D0)*a-420.D0)
     &                      *a**2*u+10.D0*(a+2.D0)
     &                      *(4.D0*((14.D0-a)*(2.D0*a+1.D0)
     &                      *a-((2.D0*a+2.D0)*a+15.D0)*q-a*(a+1.D0)
     &                      *((a+1.D0)*a-7.D0)*u)*F+(2.D0*a+5.D0)
     &                      *(2.D0*(a-14.D0)*(2.D0*a+1.D0)
     &                      *a**2+2.D0*(((2.D0*a+9.D0)*a+43.D0)*a+21.D0)
     &                      *q+a*(a+1.D0)
     &                      *(a*(a+1.D0)*(2.D0*a+7.D0)*u+(4.D0*a+2.D0)
     &                      *(a+3.D0)
     &                      *((a+7.D0)*2.D0*F+(2.D0*a+7.D0)*a*(a+1.D0)
     &                      /W)/W))/W)/W))/W)/W
                  ENDIF
               ENDIF
               GOTO 100
            ELSEIF (Ll.EQ.2) THEN
               IF ((E.NE.F) .OR. (V.NE.W)) THEN
C MULTIPOLE LQ=1 L1=L2-1                                                CORA-070
                  a1 = -2.D0*F*(2.D0*(a - 1.D0)*q - a**2*u)
                  a2 = F*(4.D0*q*(a - 1.D0)
     &                 *((6.D0*a+1.D0)*q - 4.D0*a**2 + 1.D0)
     &                 + u*((((16.D0*a-24.D0)*a+4.D0)*a**2-2.D0)
     &                 *q + a**2*(2.D0*a-1.D0-u*(a-1.D0)**2)
     &                 *(4.D0*a+2.D0)))
                  a3 = -F*(a - 1.D0)
     &                 *((24.D0*a - 4.D0)*q + 16.D0*a**2 - 4.D0 +
     &                 u*(((8.D0*a+8.D0)*a+2.D0)*a - 2.D0))
                  a4 = 4.D0*(a - 1.D0)*F
                  IF (x.NE.0.D0) THEN
                     a1 = a1 - x*(q*(a - 1.D0)*(2.D0*a + 6.D0)
     &                    + a**2*(4.D0 + a*u)
     &                    + x*((2.D0*a-2.D0)*F + a*x))
                     a2 = a2 +
     &                    x*(q*((a-1.D0)*(a+5.D0)*(12.D0*a+2.D0)*q -
     &                    (((40.D0*a-16.D0)*a-34.D0)*a-8.D0)*a - 6.D0 +
     &                    (((((8.D0*a+12.D0)*a-38.D0)*a+8.D0)*a+5.D0)
     &                    *a-4.D0)
     &                    *u + (((16.D0*a+40.D0)*a-44.D0)*a-12.D0)
     &                    *F*x + (((4.D0*a+20.D0)*a-13.D0)*a-8.D0)*x**2)
     &                    + (2.D0*a + 1.D0)
     &                    *(a**2*(4.D0-8.D0*a+((6.D0*a-7.D0)*a+4.D0)
     &                    *u+a*(a-1.D0)**2*u**2)
     &                    + x*(((4.D0*a+6.D0)*a-2.D0+(a-1.D0)
     &                    *((4.D0*a-4.D0)*a+2.D0)*u)
     &                    *F+x*(a*(((2.D0*a-2.D0)*a+1.D0)
     &                    *u-(4.D0*a-6.D0)*a+1.D0)+(4.D0*a-2.D0)
     &                    *F*x+a*x**2))))
                     a3 = a3 + x*(a - 1.D0)
     &                    *(((8.D0*a-8.D0)*a + 6.D0)*a + 2.D0 -
     &                    (2.D0*a + 6.D0)*(6.D0*a - 1.D0)
     &                    *q - ((((4.D0*a+12.D0)*a+5.D0)*a-3.D0)
     &                    *a - 2.D0)
     &                    *u - 2.D0*x*(((4.D0*a+8.D0)*a-3.D0)*F - x))
                     a4 = a4 + x*2.D0*(a**2 - 1.D0)
                  ENDIF
                  bd = .5D0*den*DSQRT((a - 1.D0)**2 + E**2)
                  IF (.NOT.Lt) C(1) = .5D0 - a
                  GOTO 300
               ELSE
C MULTIPOLE LQ=1 L1=L2-1 WITH E=F AND V=W                               CORA-060
                  b1 = DSQRT((a - 1.D0)**2 + E**2)
                  B(2) = -(a - .5D0)*q/(E*b1)
                  B(3) = (a + .5D0)*q/(E*b1)
                  IF (Lt) RETURN
                  C(1) = (q + (2.D0*a - 1.D0)*E/V)/(2.D0*E*V*b1)
                  C(3) = -DSQRT(q)/(2.D0*V*a*b1)
                  C(2) = C(3)*(2.D0*a - 1.D0)
                  C(4) = q/(2.D0*E*V*b1)
                  RETURN
               ENDIF
            ELSE
C MULTIPOLE LQ=1 L1=L2                                                  CORA-056
               B(1) = 1.D0
               RETURN
            ENDIF
   20       a1 = -2.D0*a**2*y*b1*z
            a2 = y*((2.D0*a + 1.D0)
     &           *((2.D0*(a**2-a)**2*(1.D0+s**2)+y**2*(a**2-a-.5D0))
     &           *b1 - y*(p*b2+q*b3)))*z
            a3 = -y*((2.D0*a - 1.D0)*( - y*(b2+b3)) + (4.D0*a + 2.D0)
     &           *(a - 1.D0)**2*b1)*z
            a4 = 0.D0
            IF (x.EQ.0.D0) GOTO 300
            a1 = a1 + x*2.D0*p*(a*x - 2.D0*F)*b2
            a2 = a2 +
     &           x*p*(2.D0*q*((2.D0*a+3.D0)*(a+1.D0)*F + ((2.D0*a+3.D0)
     &           *a-4.D0)*E*s) - 2.D0*p*(2.D0*a - 3.D0)*(2.D0*a + 1.D0)
     &           *F + (2.D0*a + 1.D0)
     &           *((((2.D0*a-1.D0)*a-8.D0)*a+5.D0)*F -
     &           s*((a+1.D0)*((6.D0*a-9.D0)*a+1.D0)
     &           *E-s*((6.D0*a-7.D0)*(a**2-1.D0)
     &           *F-s*((((2.D0*a-5.D0)*a+2.D0)*a-1.D0)*E)))))*b2
            a3 = a3 +
     &           x*(2.D0*p*((2.D0*a-3.D0)*(a-1.D0)*E*s + F*((2.D0*a-
     &           3.D0)*a-4.D0)) - 2.D0*q*E*s*(2.D0*a + 3.D0)
     &           *(2.D0*a - 1.D0) - (2.D0*a - 1.D0)
     &           *((((2.D0*a+5.D0)*a+2.D0)*a+1.D0)
     &           *F - s*((6.D0*a+7.D0)*(a**2-1.D0)
     &           *E-s*((a-1.D0)*((6.D0*a+9.D0)*a+1.D0)
     &           *F-s*((((2.D0*a+1.D0)*a-8.D0)*a-5.D0)*E)))))*b2
            IF (Lq.NE.3) THEN
               a4 = a4 + x*2.D0*(2.D0*E*s - a*x)*b2
               a4 = a4 + x*2.D0*((2.D0*F + a*x)*b3 - 2.D0*(a - 1.D0)*b1)
            ENDIF
            GOTO 200
         ENDIF
   50    a1 = -2.D0*a**2*y*b1*z
         a2 = y*((2.D0*a + 1.D0)
     &        *((2.D0*(a**2-a)**2*(1.D0+s**2)+y**2*(a**2-a-.5D0))
     &        *b1 - y*q*b3) + (4.D0*a - 2.D0)*(a + 1.D0)**2*p*q*b4)*z
         a3 = -y*((2.D0*a - 1.D0)*((2.D0*(a**2+a)**2*(1.D0+s**2)+y**2*(a
     &        **2+a-.5D0))*b4 - y*b3) + (4.D0*a + 2.D0)*(a - 1.D0)
     &        **2*b1)*z
         a4 = 2.D0*a**2*y*b4*z
         IF (x.EQ.0.D0) GOTO 300
         a1 = a1 - x*4.D0*p*q*(a + 1.D0)*b4
         a2 = a2 + x*2.D0*p*q*(a + 1.D0)
     &        *((2.D0*a + 3.D0)*(q + p) + (2.D0*a - 1.D0)
     &        *(4.D0*E*F*s + (1.D0+s**2)*((2.D0*a-4.D0)*a-3.D0)))*b4
         a3 = a3 + x*( - 4.D0*p*q*((2.D0*a+1.D0)*a + 2.D0)
     &        - (2.D0*a - 1.D0)
     &        *(2.D0*s*E*F*(2.D0*a+3.D0)*(q+p+s**2+1.D0)
     &        - a**2*(((a+3.D0)*a+2.5D0)*(1.D0+s**4)
     &        -s**2*((2.D0*a-2.D0)*a-7.D0)) + a*(a-1.D0)*(2.D0*a+3.D0)
     &        *(1.D0+s**2)*(p+q) - (s**2-1.D0)*((2.D0*a+4.D0)*a+.5D0)
     &        *(q-p)))*b4
         a4 = a4 + x*2.D0*((a - 1.D0)*(p + q) + y**2)*b4
         a4 = a4 + x*2.D0*((2.D0*F + a*x)*b3 - 2.D0*(a - 1.D0)*b1)
         GOTO 200
      ENDIF
  100 a1 = -2.D0*a**2*y*b1*z
      a2 = y*((2.D0*a + 1.D0)
     &     *((2.D0*(a**2-a)**2*(1.D0+s**2)+y**2*(a**2-a-.5D0))
     &     *b1 - y*(p*b2+q*b3)) + (4.D0*a - 2.D0)*(a + 1.D0)**2*p*q*b4)
     &     *z
      a3 = -
     &     y*((2.D0*a - 1.D0)*((2.D0*(a**2+a)**2*(1.D0+s**2)+y**2*(a**2+
     &     a-.5D0))*b4 - y*(b2+b3)) + (4.D0*a + 2.D0)*(a - 1.D0)**2*b1)
     &     *z
      a4 = 2.D0*a**2*y*b4*z
      IF (x.EQ.0.D0) GOTO 300
      a1 = a1 + x*2.D0*p*((a*x - 2.D0*F)*b2 - 2.D0*q*(a + 1.D0)*b4)
      a2 = a2 +
     &     x*p*((2.D0*q*((2.D0*a+3.D0)*(a+1.D0)*F+((2.D0*a+3.D0)*a-4.D0)
     &     *E*s) - 2.D0*p*(2.D0*a-3.D0)*(2.D0*a+1.D0)*F + (2.D0*a+1.D0)
     &     *((((2.D0*a-1.D0)*a-8.D0)*a+5.D0)
     &     *F-s*((a+1.D0)*((6.D0*a-9.D0)*a+1.D0)
     &     *E-s*((6.D0*a-7.D0)*(a**2-1.D0)
     &     *F-s*((((2.D0*a-5.D0)*a+2.D0)*a-1.D0)*E)))))
     &     *b2 + 2.D0*q*(a + 1.D0)
     &     *((2.D0*a+3.D0)*(q+p) + (2.D0*a-1.D0)*(4.D0*E*F*s+(1.D0+s**2)
     &     *((2.D0*a-4.D0)*a-3.D0)))*b4)
      a3 = a3 +
     &     x*((2.D0*p*((2.D0*a-3.D0)*(a-1.D0)*E*s+F*((2.D0*a-3.D0)*a-
     &     4.D0)) - 2.D0*q*E*s*(2.D0*a+3.D0)*(2.D0*a-1.D0)
     &     - (2.D0*a-1.D0)
     &     *((((2.D0*a+5.D0)*a+2.D0)*a+1.D0)*F-s*((6.D0*a+7.D0)
     &     *(a**2-1.D0)
     &     *E-s*((a-1.D0)*((6.D0*a+9.D0)*a+1.D0)*F-s*((((2.D0*a+1.D0)
     &     *a-8.D0)*a-5.D0)*E)))))
     &     *b2 + ( - 4.D0*p*q*((2.D0*a+1.D0)*a+2.D0) - (2.D0*a-1.D0)
     &     *(2.D0*s*E*F*(2.D0*a+3.D0)*(q+p+s**2+1.D0)
     &     -a**2*(((a+3.D0)*a+2.5D0)*(1.D0+s**4)
     &     -s**2*((2.D0*a-2.D0)*a-7.D0))+a*(a-1.D0)*(2.D0*a+3.D0)
     &     *(1.D0+s**2)*(p+q)-(s**2-1.D0)*((2.D0*a+4.D0)*a+.5D0)*(q-p)))
     &     *b4)
      a4 = a4 + x*2.D0*(((a-1.D0)*(p+q) + y**2)*b4 + (2.D0*E*s - a*x)
     &     *b2)
      a4 = a4 + x*2.D0*((2.D0*F + a*x)*b3 - 2.D0*(a - 1.D0)*b1)
  200 a1 = a1 + x*2.D0*(((a+1.D0)*(q+p) - y**2)*b1 - q*(a*x + 2.D0*E*s)
     &     *b3)
      a2 = a2 +
     &     x*(( - 4.D0*p*q*(2.D0*a**2-a+2.D0) - (2.D0*a+1.D0)*(2.D0*s*E*
     &     F*(2.D0*a-3.D0)*(q+p+s**2+1.D0)
     &     +a**2*(((a-3.D0)*a+2.5D0)*(1.D0+s**4)
     &     -s**2*((2.D0*a+2.D0)*a-7.D0))+a*(a+1.D0)*(2.D0*a-3.D0)
     &     *(1.D0+s**2)*(p+q)+(s**2-1.D0)*((2.D0*a-4.D0)*a+.5D0)*(q-p)))
     &     *b1 +
     &     q*(2.D0*p*((2.D0*a+3.D0)*(a+1.D0)*E*s+F*((2.D0*a+3.D0)*a-
     &     4.D0)) - 2.D0*q*E*s*(2.D0*a-3.D0)*(2.D0*a+1.D0)
     &     - (2.D0*a+1.D0)
     &     *((((2.D0*a-5.D0)*a+2.D0)*a-1.D0)*F-s*((6.D0*a-7.D0)
     &     *(a**2-1.D0)
     &     *E-s*((a+1.D0)*((6.D0*a-9.D0)*a+1.D0)*F-s*((((2.D0*a-1.D0)
     &     *a-8.D0)*a+5.D0)*E)))))*b3)
      a3 = a3 +
     &     x*(2.D0*(a - 1.D0)*((2.D0*a-3.D0)*(q+p) + (2.D0*a+1.D0)*(4.D0
     &     *E*F*s+(1.D0+s**2)*((2.D0*a+4.D0)*a-3.D0)))
     &     *b1 + (2.D0*q*((2.D0*a-3.D0)*(a-1.D0)
     &     *F+((2.D0*a-3.D0)*a-4.D0)*E*s) - 2.D0*p*(2.D0*a+3.D0)
     &     *(2.D0*a-1.D0)*F + (2.D0*a-1.D0)
     &     *((((2.D0*a+1.D0)*a-8.D0)*a-5.D0)
     &     *F-s*((a-1.D0)*((6.D0*a+9.D0)*a+1.D0)
     &     *E-s*((6.D0*a+7.D0)*(a**2-1.D0)
     &     *F-s*((((2.D0*a+5.D0)*a+2.D0)*a+1.D0)*E)))))*b3)
  300 B(1) = a1*DSQRT(((a-1.D0)**2 + E**2)*((a-1.D0)**2 + F**2))
     &       *(2.D0*a - 3.D0)/(bd*a*(2.D0*a - 1.D0))
      B(2) = a2/(a*s*bd*(2.D0*a + 1.D0))
      B(3) = a3/(a*s*bd*(2.D0*a - 1.D0))*DSQRT(p*q)
      B(4) = a4*DSQRT(p*q*((a+1.D0)**2 + E**2)*((a+1.D0)**2 + F**2))
     &       *(2.D0*a + 3.D0)/(bd*a*(2.D0*a + 1.D0))
      IF (Lt) RETURN
      z = -2.D0*bd*V*W*DSQRT(s)/den
      bd = a**2*bd*DSQRT(V*W)**3
      a1 = a1*(a - 1.D0)**2
      a4 = a4*(a + 1.D0)**2
      C(1) = C(1)/z - (a + y*W*(.5D0*a - 1.D0)/(a - 1.D0)**2)
     &       *(2.D0*a - 1.D0)*a1/bd
      C(2) = (C(2)/z + W*(a1 - p*a4)/bd)*DSQRT(q)
      C(3) = (C(3)/z + W*(a1 - q*a4)/bd)*DSQRT(p)
      C(4) = (C(4)/z + (a + y*W*(.5D0*a+1.D0)/(a+1.D0)**2)
     &       *(2.D0*a + 1.D0)*a4/bd)*DSQRT(p*q)
      RETURN
  400 WRITE (MW,99010) Lq, Ll
99010 FORMAT (' IN CORA: COEFFICIENTS SUPPRESSED FOR LQ =',I3,
     &        ' AND L1-L2+1=',I3)
      RETURN
  500 WRITE (MW,99015) Lq, Ll
99015 FORMAT (' IN CORA: COEFFICIENTS NOT GIVEN BY THE METHOD FOR LQ =',
     &        I3,' AND L1-L2+1=',I3)
      RETURN
      END
C 01/01/04                                                      ECIS03  INTI-000
      SUBROUTINE INTI(Fam,X,Fr,Gr,Wre,Pad,Ipe,Ism,Kab,W,Iterm,Nc,V,Vi,
     &                Nvi,Mc,Nat,At,Ag,Npx,H,Acnv,Eiter,Ncin,Nni,Iterr,
     &                Lo)
C  E. C. I. S. METHOD: SCHROEDINGER EQUATION DRIVING ROUTINE.           INTI-003
C  INTI CALLS INSH  TO SOLVE THE SINGLE HOMOGENEOUS EQUATIONS           INTI-004
C             INSI  TO SOLVE THE SINGLE INHOMOGENEOUS EQUATIONS         INTI-005
C  PADE APPROXIMANTS OF TYPE I MAY BE USED TO ACCELERATE THE CONVERGENCEINTI-006
C INPUT VARIABLES: FAM(IC,I): MATCHING VALUES FOR I=1,6                 INTI-007
C                             CONSTANTS OF EACH EQUATION FOR I=7,10     INTI-008
C                  ISM:   NUMBER OF RADIAL POINTS                       INTI-009
C                  KAB:   MAXIMUM NUMBER OF COUPLED CHANNELS            INTI-010
C                  ITERM: MAXIMUM NUMBER OF ITERATIONS AND DIM. OF PAD  INTI-011
C                  NC:    NUMBER OF COUPLED EQUATIONS                   INTI-012
C                  V,VI:  REAL, IMAGINARY POTENTIALS AND COUPLINGS      INTI-013
C                  NVI:   ADDRESSES OF COUPLINGS                        INTI-014
C                  MC:    NUCLEAR STATE NUMBER, ANGULAR MOMENTA....     INTI-015
C                  NAT,AT:TABLE OF COUPLING COEFFICIENTS                INTI-016
C                  AG:    COULOMB INTEGRALS FOR COULOMB CORRECTIONS     INTI-017
C                  NPX:   NUMBER OF CENTRAL POTENTIALS                  INTI-018
C                  H:     STEP LENGTH                                   INTI-019
C                  ACNV:  EPSILON FOR NEGLIGIBLE FUNCTION VALUES        INTI-020
C                  EITER: CONVERGENCE EPSILON FOR THE SCATTERING COEF.  INTI-021
C                  NCIN:  NUMBER OF SOLUTIONS                           INTI-022
C                  LO(I): LOGICAL CONTROLS                              INTI-023
C  LO(22) =.TRUE.  NO USE OF PADE APPROXIMANTS FOR CONVERGENCE          INTI-024
C  LO(23) =.TRUE.  COUPLED EQUATIONS WHEN CONVERGENCE IS NOT OBTAINED   INTI-025
C  LO(29) =.TRUE.  NO DIAGONAL TERMS IN SECOND MEMBERS                  INTI-026
C  LO(44) +.TRUE.  COULOMB CORRECTIONS                                  INTI-027
C  LO(53) =.TRUE.  OUTPUT OF THE NUMBER OF ITERATIONS                   INTI-028
C  LO(57) =.TRUE.  OUTPUT OF PHASE-SHIFTS AT EACH E.C.I.S. ITERATION    INTI-029
C  LO(92) =.TRUE.  PURE DWBA CALCULATION                                INTI-030
C  LO(204)=.TRUE.  IF CONVERGENCE IS OBTAINED IN THE ITERATION          INTI-031
C  LO(206)=.TRUE.  WHEN THE ITERATION IS NOT THE LAST ONE PERMITTED     INTI-032
C  LO(207)=.TRUE.  IF ALL THE COUPLINGS HAVE TO BE CALCULATED BEFOREHANDINTI-033
C  LO(210)=.TRUE.  IF DERIVATIVES ARE NEEDED                            INTI-034
C  LO(221)=.TRUE.  FOR OPTICAL MODEL WITHOUT COUPLING                   INTI-035
C OUTPUT VARIABLES:FAM(IC,I+7): SCATTERING COEFFICIENTS                 INTI-036
C WORKING FIELDS:  X:     USED IN INSH AND INSI                         INTI-037
C                  FR:    SOLUTIONS OF HOMOGENEOUS EQUATIONS            INTI-038
C                  GR:    SOLUTIONS OF COUPLED EQUATIONS                INTI-039
C                  WRE:   REAL/IMAGINARY INHOMOGENEOUS TERM             INTI-040
C                  PAD(ITERM,KAB+2): PADE APPROXIMANTS                  INTI-041
C               IPE(I,1): FIRST NON NEGLIGIBLE POINT OF UNCOUPLED FUNC. INTI-042
C               IPE(I,2): FIRST NON NEGLIGIBLE POINT OF COUPLED FUNCT.  INTI-043
C                  W:     FREE PART OF THE STORAGE FOR COUPLINGS        INTI-044
C OUTPUT VARIABLES:NNI:   NUMBER OF EQ. WITH NEGLIGIBLE INHOMOG. TERM   INTI-045
C                  ITERR: LARGEST NUMBER OF ITERATIONS DONE FOR THIS J  INTI-046
C***********************************************************************INTI-047
      IMPLICIT REAL*8(A - H,O - z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      REAL*8 Acnv, Eiter, H
      INTEGER Ism, Iterm, Iterr, Kab, Nc, Ncin, Nni, Npx
      REAL*8 Ag(Kab,Kab,4), At(2,1), Fam(Kab,8), Fr(Ism,4,1),
     &       Gr(2,Ism,1), Pad(2,Iterm,1), V(Ism,9), Vi(Ism,9), W(Ism,1),
     &       Wre(2,1), X(1)
      INTEGER Ipe(Nc,2), Mc(Kab,6), Nat(4,1), Nvi(Kab,Kab,4)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 amax, conv, y(2), z(4)
      DOUBLE PRECISION DABS, DMAX1
      INTEGER i, i1, i2, ic, ij, ip, is, ivv, j, k, k1, k2, k3, k4,
     &        kiter, kt, nci, nci1, nci2, nima
      INTEGER IABS, MAX0, MIN0
C
C
C COMPUTE ALL COUPLING POTENTIALS AND SOLVE ALL HOMOGENEOUS EQUATIONS   INTI-054
      i2 = 4*Ism
      DO i = 1, Nc
         i1 = Mc(i,4)
         IF (i1.LT.0) THEN
            i1 = -i1
            IF (i.NE.i1) THEN
               DO is = 1, i2
                  Fr(is,1,i) = Fr(is,1,i1)
               ENDDO
               Ipe(i,1) = Ipe(i1,1)
            ENDIF
         ELSE
            CALL INSH(Fr(1,1,i),i,i1,kt,Acnv,Fam,X,Kab,Ism,V,Vi,Npx,Nat,
     &                At,Nvi,Mc,Lo)
            Ipe(i,1) = kt
         ENDIF
         IF (Lo(57)) WRITE (MW,99005) Fam(i,7), Fam(i,8), i, Ipe(i,1)
99005    FORMAT (2D30.15,5X,2I5)
      ENDDO
      IF (.NOT.((.NOT.Lo(207)) .OR. Lo(221))) THEN
         ivv = 0
C CALCULATION OF THE NON DIAGONAL COUPLING POTENTIALS                   INTI-072
         DO ic = 1, Nc
            DO ip = 1, Nc
               k1 = Nvi(ip,ic,1)
               k2 = Nvi(ip,ic,2)
               k3 = Nvi(ip,ic,3)
               IF (k2.EQ.k3 .AND. ip.LT.ic) THEN
C SYMMETRISATION OF THE TABLE                                           INTI-154
                  DO k = 1, 4
                     Nvi(ip,ic,k) = Nvi(ic,ip,k)
                  ENDDO
               ELSE
                  DO j = 1, 4
                     Nvi(ip,ic,j) = 0
                  ENDDO
C NON DERIVATIVE COUPLING POTENTIALS                                    INTI-081
                  IF (k1.LE.k2) THEN
                     IF (.NOT.(Lo(29) .AND. (ic.EQ.ip))) THEN
                        ivv = ivv + 1
                        Nvi(ip,ic,1) = ivv
                        kt = IABS(Nat(1,k1))
                        nima = k2 + 1 - k1
                        IF (kt.EQ.Nat(1,k1)) nima = nima - 1
                        DO is = 1, Ism
                           W(is,ivv) = At(2,k1)*V(is,kt)
                        ENDDO
                        IF (k1.NE.k2) THEN
                           k4 = k1 + 1
                           DO k = k4, k2
                              kt = IABS(Nat(1,k))
                              IF (kt.EQ.Nat(1,k)) nima = nima - 1
                              DO is = 1, Ism
                                 W(is,ivv) = W(is,ivv) + At(2,k)
     &                              *V(is,kt)
                              ENDDO
                           ENDDO
                        ENDIF
                        IF (nima.NE.0) THEN
                           ivv = ivv + 1
                           Nvi(ip,ic,2) = ivv
                           DO k = k1, k2
                              IF (Nat(1,k).LE.0) THEN
                                 kt = -Nat(1,k)
                                 DO is = 1, Ism
                                    W(is,ivv) = At(2,k)*Vi(is,kt)
                                 ENDDO
                                 GOTO 2
                              ENDIF
                           ENDDO
    2                      k1 = k + 1
                           IF (k1.LE.k2) THEN
                              DO k = k1, k2
                                 IF (Nat(1,k).LE.0) THEN
                                    kt = -Nat(1,k)
                                    DO is = 1, Ism
                                       W(is,ivv) = W(is,ivv) + At(2,k)
     &                                    *Vi(is,kt)
                                    ENDDO
                                 ENDIF
                              ENDDO
                           ENDIF
                        ENDIF
                     ENDIF
                  ENDIF
C DERIVATIVE COUPLING POTENTIALS                                        INTI-117
                  k2 = k2 + 1
                  IF (k2.LE.k3) THEN
                     ivv = ivv + 1
                     Nvi(ip,ic,3) = ivv
                     kt = IABS(Nat(1,k2))
                     nima = k3 + 1 - k2
                     IF (kt.EQ.Nat(1,k2)) nima = nima - 1
                     DO is = 1, Ism
                        W(is,ivv) = At(2,k2)*V(is,kt)
                     ENDDO
                     IF (k2.NE.k3) THEN
                        k4 = k2 + 1
                        DO k = k4, k3
                           kt = IABS(Nat(1,k))
                           IF (kt.EQ.Nat(1,k)) nima = nima - 1
                           DO is = 1, Ism
                              W(is,ivv) = W(is,ivv) + At(2,k)*V(is,kt)
                           ENDDO
                        ENDDO
                     ENDIF
                     IF (nima.NE.0) THEN
                        ivv = ivv + 1
                        Nvi(ip,ic,4) = ivv
                        DO k = k2, k3
                           kt = -Nat(1,k)
                           IF (kt.NE.Nat(1,k)) THEN
                              DO is = 1, Ism
                                 W(is,ivv) = At(2,k)*Vi(is,kt)
                              ENDDO
                              GOTO 4
                           ENDIF
                        ENDDO
    4                   k2 = k + 1
                        IF (k2.LE.k3) THEN
                           DO k = k2, k3
                              kt = -Nat(1,k)
                              IF (kt.NE.Nat(1,k)) THEN
                                 DO is = 1, Ism
                                    W(is,ivv) = W(is,ivv) + At(2,k)
     &                                 *Vi(is,kt)
                                 ENDDO
                              ENDIF
                           ENDDO
                        ENDIF
                     ENDIF
                  ENDIF
               ENDIF
            ENDDO
C CORRECTION TO AN INCREASE OF THE IMAGINARY POTENTIAL                  INTI-158
            IF (Mc(ic,6).NE.0) THEN
               i1 = Mc(ic,4)
               IF (Nvi(ic,ic,2).EQ.0) THEN
                  ivv = ivv + 1
                  Nvi(ic,ic,2) = ivv
                  DO is = 1, Ism
                     W(is,ivv) = -Mc(ic,6)*Vi(is,i1)
                  ENDDO
               ELSE
                  k = Nvi(ic,ic,2)
                  DO is = 1, Ism
                     W(is,k) = W(is,k) - Mc(ic,6)*Vi(is,i1)
                  ENDDO
               ENDIF
            ENDIF
         ENDDO
      ENDIF
      conv = Acnv*H*H
      Nni = 0
C LOOP ON SOLUTIONS                                                     INTI-173
      DO nci = 1, Ncin
         nci1 = nci + 8
         nci2 = nci1 + Ncin
C SET THE ZERO'S ORDER SOLUTION                                         INTI-177
         DO ic = 1, Nc
            Ipe(ic,2) = Ism + 1
            Fam(ic,nci1) = 0.D0
            Fam(ic,nci2) = 0.D0
         ENDDO
         Fam(nci,nci1) = Fam(nci,7)
         Fam(nci,nci2) = Fam(nci,8)
         IF (.NOT.((Ipe(nci,1).GT.Ism-3) .OR. Lo(221))) THEN
            DO is = 1, Ism
               Gr(1,is,nci) = Fr(is,1,nci)
               Gr(2,is,nci) = Fr(is,2,nci)
            ENDDO
            Ipe(nci,2) = Ipe(nci,1)
C DERIVE THE ZERO'S ORDER EQUATION                                      INTI-189
            IF (Lo(210)) CALL INSI(Wre,Gr,Gr(1,1,Nc + 1),Fr,Fam,X,Pad,
     &                             Pad,1,Eiter,Acnv,Kab,Ism,Ipe,nci,V,
     &                             Vi,W,conv,Nat,At,Nvi,Nc,y,y,Mc,Lo,
     &                             .TRUE.,H,z)
            amax = 0.D0
C E. C. I. S. LOOP                                                      INTI-194
            DO kiter = 1, Iterm
               Iterr = MAX0(Iterr,kiter)
               Lo(204) = .TRUE.
               Lo(206) = ((kiter.NE.Iterm) .AND. (amax.LT.1.D10)) .OR.
     &                   Lo(23)
               IF (amax.GT.1.D10) WRITE (MW,99010) amax, kiter
99010          FORMAT (' MAXIMUM',D15.6,
     &                 ' OBTAINED IN PREVIOUS ITERATION. LAST ONE IS',
     &                 I3)
               DO ic = 1, Nc
                  i = MOD(ic + nci - 1,Nc) + 1
C COMPUTE SECOND MEMBERS AND SOLVE THE INHOMOGENEOUS EQUATIONS          INTI-202
                  DO j = 1, 4
                     z(j) = 0.D0
                  ENDDO
                  IF (.NOT.(Lo(144))) THEN
                     DO j = 1, Nc
                        IF ((Lo(29) .AND. (i.EQ.j)) .OR.
     &                      (Ipe(j,2).GE.Ism)) GOTO 8
C ORDER IN FG   F(EI)*F(EF),G(EI)*F(EF),F(EI)*G(EF),G(EI)*G(EF)         INTI-208
                        IF (.NOT.(Lo(22))) THEN
                           ij = kiter
                           IF (1 + MOD(j + Nc - nci - 1,Nc).GE.ic)
     &                         ij = ij - 1
                           IF (ij.NE.0) THEN
                              y(1) = Pad(1,ij,j)
                              y(2) = Pad(2,ij,j)
                              GOTO 6
                           ENDIF
                        ENDIF
                        y(1) = Fam(j,nci1)
                        y(2) = Fam(j,nci2)
    6                   z(1) = z(1) + y(1)*Ag(i,j,3) - y(2)*Ag(i,j,1)
                        z(2) = z(2) + y(1)*Ag(i,j,1) + y(2)*Ag(i,j,3)
                        z(3) = z(3) + y(1)*Ag(i,j,4) - y(2)*Ag(i,j,2)
                        z(4) = z(4) + y(1)*Ag(i,j,2) + y(2)*Ag(i,j,4)
    8                ENDDO
                     IF (i.NE.nci) THEN
                        z(1) = z(1) + Ag(i,nci,1)
                        z(3) = z(3) + Ag(i,nci,2)
                     ENDIF
                     z(3) = z(3) - z(2)
                     z(4) = z(4) + z(1)
                     z(1) = z(1) + Fam(i,7)*z(3) - Fam(i,8)*z(4)
                     z(2) = z(2) + z(3)*Fam(i,8) + z(4)*Fam(i,7)
                  ENDIF
                  IF (i.EQ.nci) THEN
                     z(1) = z(1) - Fam(i,7)
                     z(2) = z(2) - Fam(i,8)
                     z(3) = z(3) - 1.D0
                  ENDIF
                  IF (Lo(23) .AND. (.NOT.Lo(206))) Lo(204) = .TRUE.
                  CALL INSI(Wre,Gr,Gr(1,1,Nc + 1),Fr,Fam(i,5),X,
     &                      Pad(1,1,i),Pad(1,1,Nc + 1),kiter,Eiter,Acnv,
     &                      Kab,Ism,Ipe(1,2),i,V,Vi,W,conv,Nat,At,Nvi,
     &                      Nc,Fam(i,nci1),Fam(i,nci2),Mc,Lo,.FALSE.,H,
     &                      z)
                  IF (Ipe(i,2).GE.Ism) THEN
                     Fam(i,nci1) = -z(1)
                     Fam(i,nci2) = -z(2)
                     IF (Lo(57)) WRITE (MW,99015)
99015                FORMAT (5X,'THE INHOMOGENEOUS TERM IS NEGLECTED')
                     IF (kiter.EQ.1 .AND. Lo(144)) Nni = Nni + 1
                     IF (i.EQ.nci) Ipe(nci,2) = Ipe(nci,1)
                  ELSE
                     amax = DMAX1(amax,DABS(Fam(i,nci1))
     &                      + DABS(Fam(i,nci2)))
                     IF (i.NE.nci .AND. Lo(92)) Ipe(i,2) = Ism + 1
                  ENDIF
               ENDDO
               IF (Lo(204) .OR. (amax.GT.1.D10 .AND. Lo(23))) GOTO 20
            ENDDO
            kiter = MIN0(kiter,Iterm)
   20       IF (Lo(53)) WRITE (MW,99020) kiter
99020       FORMAT (5X,I5,' ITERATIONS')
         ENDIF
      ENDDO
      Nni = Nni/Ncin
      RETURN
      END
C 01/01/04                                                      ECIS03  INSH-000
      SUBROUTINE INSH(P,Ic,I1,Kt,Aconv,Fam,X,Kab,Ism,V,Vi,Npx,Nat,At,
     &                Nvi,Mc,Lo)
C  E. C. I. S. METHOD: INTEGRATION OF A SINGLE HOMOGENEOUS EQUATION BY  INSH-003
C  THE NUMEROV METHOD       - SCHROEDINGER EQUATION -                   INSH-004
C INPUT VARIABLES: IC:    CHANNEL NUMBER OF THE EQUATION                INSH-005
C                  ACONV: LIMIT FOR NEGLIGIBLE FUNCTION VALUES          INSH-006
C                  FAM(IC,I): MATCHING VALUES FOR I=1,4                 INSH-007
C                             WAVE NUMBER FOR I=6                       INSH-008
C                             CONSTANTS OF THIS EQUATION FOR I=7,10     INSH-009
C                  KAB:   MAXIMUM NUMBER OF COUPLED CHANNELS            INSH-010
C                  V,VI:  REAL, IMAGINARY POTENTIALS AND COUPLINGS      INSH-011
C                  NPX:   NUMBER OF CENTRAL POTENTIALS                  INSH-012
C                  ISM:   NUMBER OF RADIAL POINTS                       INSH-013
C                  NAT,AT:COUPLING COEFFICIENTS                         INSH-014
C                  NVI:   TABLE OF ADDRESSES IN NAT,AT                  INSH-015
C                  MC(,6):COEFFICIENT OF INCREASE OF IMAGINARY POTENTIALINSH-016
C                  LO(I): LOGICAL CONTROLS                              INSH-017
C OUTPUT VARIABLES:P(ISM,I): REAL/IMAGINARY REGULAR SOLUTION FOR I=1,2  INSH-018
C                            REAL/IMAGINARY IRREGULAR SOLUTION FOR I=3,4INSH-019
C                  FAM(IC,7/8): REAL/IMAGINARY PART OF ZERO'S ORDER     INSH-020
C                            SCATTERING COEFFICIENTS                    INSH-021
C                  KT:    THE SOLUTION IS NEGLIGIBLE FOR IS < KT        INSH-022
C WORKING SPACE:   X:     FOR THE INTEGRATION                           INSH-023
C***********************************************************************INSH-024
      IMPLICIT REAL*8(a - H,O - Z)
C
C
C Dummy arguments
C
      REAL*8 Aconv
      INTEGER I1, Ic, Ism, Kab, Kt, Npx
      REAL*8 At(2,1), Fam(Kab,10), P(Ism,4), V(Ism,1), Vi(Ism,1), X(2,2)
      LOGICAL Lo(250)
      INTEGER Mc(Kab,6), Nat(4,1), Nvi(Kab,Kab,2)
C
C Local variables
C
      REAL*8 a, b, bconv, bim, bre, hx, hy
      DOUBLE PRECISION DABS
      INTEGER i, i2, is, j, j1, js, k, k1, k2
      INTEGER IABS
C
C
      bconv = Aconv
C FOR CLOSED CHANNELS WHEN GREEN'S FUNCTION IS USED                     INSH-030
      IF (Fam(Ic,9).LT.0.) bconv = 1.D-15
C COMPUTATION OF THE REGULAR SOLUTION                                   INSH-032
      i2 = I1 + Npx
      DO is = 1, Ism
         a = is*is
         X(1,is + 2) = Fam(Ic,9) - Fam(Ic,10)/a + Fam(Ic,7)*V(is,I1)
         X(2,is + 2) = Fam(Ic,7)*Vi(is,I1)
         IF (Lo(229)) X(1,is + 2) = X(1,is + 2) + Fam(Ic,8)*V(is,i2)
         IF (Lo(230)) X(2,is + 2) = X(2,is + 2) + Fam(Ic,8)*Vi(is,i2)
      ENDDO
      IF (.NOT.(Lo(129))) THEN
         k1 = Nvi(Ic,Ic,1)
         k2 = Nvi(Ic,Ic,2)
         IF (k1.LE.k2) THEN
            DO k = k1, k2
               Kt = IABS(Nat(1,k))
               DO is = 1, Ism
                  X(1,is + 2) = X(1,is + 2) + At(2,k)*V(is,Kt)
               ENDDO
               IF (Nat(1,k).LE.0) THEN
                  DO is = 1, Ism
                     X(2,is + 2) = X(2,is + 2) + At(2,k)*Vi(is,Kt)
                  ENDDO
               ENDIF
            ENDDO
         ENDIF
      ENDIF
      IF (Mc(Ic,6).NE.0) THEN
         DO is = 1, Ism
            X(2,is + 2) = X(2,is + 2) + Vi(is,I1)*Mc(Ic,6)
         ENDDO
      ENDIF
      IF (Lo(27)) THEN
C NUMEROV METHOD                                                        INSH-064
         DO is = 1, Ism
            b = (12.D0 + X(1,is + 2))**2 + X(2,is + 2)**2
            a = 12.D0*(X(1,is + 2)*(12.D0 + X(1,is+2)) + X(2,is + 2)**2)
     &          /b
            IF (Lo(26)) a = a*(1.D0 + X(1,is + 2)**2*.416666666666667D-2
     &                      )
            X(1,is + 2) = a
            X(2,is + 2) = 144.D0*X(2,is + 2)/b
         ENDDO
      ELSE
C MODIFIED NUMEROV METHOD                                               INSH-057
         DO is = 1, Ism
            a = X(1,is + 2)**2 - X(2,is + 2)**2
            IF (Lo(26)) a = a*(1.D0 - X(1,is + 2)*.033333333333333D0)
            X(2,is + 2) = X(2,is + 2)
     &                    *(1.D0 - X(1,is + 2)*.166666666666667D0)
            X(1,is + 2) = X(1,is + 2) - a*.083333333333333D0
         ENDDO
      ENDIF
      X(1,1) = 0.D0
      X(2,1) = 0.D0
      X(1,2) = 1.D-15
      X(2,2) = 0.D0
      DO is = 1, Ism
         P(is,3) = X(1,is + 2)
         P(is,4) = X(2,is + 2)
         hx = X(1,is + 1)*X(1,is + 2) - X(2,is + 1)*X(2,is + 2)
         hy = X(2,is + 1)*X(1,is + 2) + X(1,is + 1)*X(2,is + 2)
         X(1,is + 2) = X(1,is + 1) + X(1,is + 1) - X(1,is) - hx
         X(2,is + 2) = X(2,is + 1) + X(2,is + 1) - X(2,is) - hy
         IF (DABS(X(1,is+2)).GE.1.D15) THEN
C  RENORMALISATION OF LARGE FUNCTION VALUES                             INSH-083
            j = 2*is + 4
            DO i = 3, j
               X(i,1) = X(i,1)*1.D-30
            ENDDO
         ENDIF
      ENDDO
C END OF INTEGRATION                                                    INSH-088
C MATCHING                                                              INSH-089
      bre = X(1,Ism)*Fam(Ic,4) - Fam(Ic,3)*X(1,Ism + 2)
      bim = X(2,Ism)*Fam(Ic,4) - Fam(Ic,3)*X(2,Ism + 2)
      hx = X(1,Ism)*Fam(Ic,2) - Fam(Ic,1)*X(1,Ism + 2)
      hy = X(2,Ism)*Fam(Ic,2) - Fam(Ic,1)*X(2,Ism + 2)
      IF (Fam(Ic,9).GE.0.) THEN
         bim = bim + hx
         bre = bre - hy
      ENDIF
      a = bre*bre + bim*bim
      bre = -bre/a
      bim = bim/a
      Fam(Ic,7) = bre*hx - bim*hy
      Fam(Ic,8) = hx*bim + hy*bre
      IF (Lo(221)) RETURN
      bre = bre/12.D0
      bim = bim/12.D0
C NORMALISATION OF THE REGULAR SOLUTION                                 INSH-105
      DO is = 1, Ism
         hx = X(1,is) + 10.D0*X(1,is + 1) + X(1,is + 2)
         hy = X(2,is) + 10.D0*X(2,is + 1) + X(2,is + 2)
         P(is,1) = hx*bre - hy*bim
         P(is,2) = hx*bim + hy*bre
      ENDDO
C SEARCH OF THE FIRST NON NEGLIGIBLE VALUE                              INSH-111
      DO Kt = 1, Ism
         IF ((ABS(P(Kt,1)) + ABS(P(Kt,2))).GT.bconv) GOTO 100
      ENDDO
  100 IF (Lo(92)) RETURN
      hx = 0.D0
      hy = 0.D0
      IF (Fam(Ic,9).GE.0.) THEN
         hx = Fam(Ic,1)
         hy = Fam(Ic,2)
      ENDIF
C COMPUTATION OF THE IRREGULAR SOLUTION - STARTING VALUES               INSH-121
C  THE TWO LAST POINTS OF IMAGINARY POTENTIAL ARE ZERO                  INSH-122
      X(2,Ism) = hx/Fam(Ic,6)
      X(2,Ism + 2) = hy/Fam(Ic,6)
      X(1,Ism) = Fam(Ic,3)/Fam(Ic,6)
      X(1,Ism + 2) = Fam(Ic,4)/Fam(Ic,6)
      bre = 2.D0 - P(Ism,3)
      X(1,Ism + 1) = (X(1,Ism) + X(1,Ism + 2))/bre
      X(2,Ism + 1) = (X(2,Ism) + X(2,Ism + 2))/bre
      j1 = Ism - Kt
      IF (j1.GT.0) THEN
C INTEGRATION                                                           INSH-132
         DO js = 1, j1
            is = Ism - js
            hx = X(1,is + 1)*P(is,3) - X(2,is + 1)*P(is,4)
            hy = X(2,is + 1)*P(is,3) + X(1,is + 1)*P(is,4)
            X(1,is) = X(1,is + 1) + X(1,is + 1) - X(1,is + 2) - hx
            X(2,is) = X(2,is + 1) + X(2,is + 1) - X(2,is + 2) - hy
         ENDDO
      ENDIF
C COMPUTATION OF IRREGULAR SOLUTION                                     INSH-139
      DO is = Kt, Ism
         P(is,3) = (X(1,is) + 10.D0*X(1,is + 1) + X(1,is + 2))/12.D0
         P(is,4) = (X(2,is) + 10.D0*X(2,is + 1) + X(2,is + 2))/12.D0
      ENDDO
      END
C 01/01/04                                                      ECIS03  INSI-000
      SUBROUTINE INSI(W,P,Pd,Ph,Fam,X,Pad1,Pad2,Kiter,Eiter,Aconv,Kab,
     &                Ism,Ipd,I,V,Vi,Www,Conv,Nat,At,Nvi,Nc,Far,Fai,Mc,
     &                Lo,Lt,H,Z)
C  E. C. I. S. METHOD: INTEGRATION OF A SINGLE INHOMOGENEOUS EQUATION   INSI-003
C  BY THE NUMEROV METHOD       - SCHROEDINGER EQUATION -                INSI-004
C INPUT VARIABLES: P:     COUPLED SOLUTION                              INSI-005
C                  PH:    HOMOGENEOUS SOLUTIONS                         INSI-006
C                  PD:    DERIVATIVE OF THE COUPLED SOLUTION            INSI-007
C                  FAM:   WAVE NUMBER                                   INSI-008
C                  KITER: CURRENT ITERATION NUMBER                      INSI-009
C                  EITER: CONVERGENCE EPSILON FOR THE SCATTERING COEFF. INSI-010
C                  ACONV: EPSILON FOR NEGLIGIBLE FUNCTION VALUES        INSI-011
C                  KAB:   MAXIMUM NUMBER OF EQUATIONS                   INSI-012
C                  ISM:   NUMBER OF RADIAL POINTS                       INSI-013
C                  IPD(IC): THE FUNCTION IC IS NEGLIGIBLE FOR R < IPD*H INSI-014
C                  I:     CHANNEL NUMBER OF THE EQUATION                INSI-015
C                  V,VI:  REAL, IMAGINARY POTENTIALS AND COUPLINGS      INSI-016
C                  WWW:   COUPLING BETWEEN EQUATIONS COMPUTED IN INTI   INSI-017
C                  CONV:  EPSILON FOR NEGLIGIBLE SECOND MEMBER          INSI-018
C                  NAT,AT:TABLE OF COUPLING COEFFICIENTS                INSI-019
C                  NVI:   ADDRESSES OF COUPLING COEFFICIENTS            INSI-020
C                  NC:    NUMBER OF COUPLED CHANNELS                    INSI-021
C                  FAR,FAI: PHASE-SHIFTS TO UPDATE                      INSI-022
C                  LO(I): LOGICAL CONTROLS                              INSI-023
C                  LT:    .TRUE. TO COMPUTE ONLY THE DERIVATIVE         INSI-024
C                  H:     INTEGRATION STEP                              INSI-025
C                  Z:     COULOMB INTEGRAL FOR CORRECTIONS              INSI-026
C OUTPUT VARIABLES:P:     SOLUTION FOR EQUATION I                       INSI-027
C                  PD:    DERIVATIVE OF THE SOLUTION FOR EQUATION I     INSI-028
C                  FAR,FAI:  SCATTERING COEFFICIENT                     INSI-029
C WORKING FIELD:   W(2,ISM): REAL/IMAGINARY SECOND MEMBER               INSI-030
C                  PAD1: ITERATION RESULTS FOR THE CHANNEL I            INSI-031
C                  PAD2: WORKING FIELD OF PADE,TWICE LONGER THAN PAD1   INSI-032
C                  X:    INTEGRAL OF REGULAR SOLUTION WITH SECOND MEMBERINSI-033
C***********************************************************************INSI-034
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      REAL*8 Aconv, Conv, Eiter, H
      INTEGER I, Ism, Kab, Kiter, Nc
      LOGICAL Lt
      REAL*8 At(2,1), Fai(1), Fam(1), Far(1), P(2,Ism,1), Pad1(2,1),
     &       Pad2(2,1), Pd(2,Ism,1), Ph(Ism,4,1), V(Ism,1), Vi(Ism,1),
     &       W(2,1), Www(Ism,1), X(2,1), Z(4)
      INTEGER Ipd(1), Mc(Kab,6), Nat(4,1), Nvi(Kab,Kab,4)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 bim, bre, fp, hx, hy
      DOUBLE PRECISION DABS
      INTEGER IABS, MAX0, MIN0
      INTEGER ic, idp, is, ism1, ist, j, js, k, k1, k2, k3, kkt, kt, l1,
     &        l2
C
C
      IF (.NOT.(Lt)) THEN
         ism1 = Ism + 1
C PUT ZERO IN THE INHOMOGENEOUS TERMS                                   INSI-043
         DO is = 1, Ism
            W(1,is) = 0.D0
            W(2,is) = 0.D0
         ENDDO
         idp = ism1
C NON DERIVATIVE TERM OF COUPLING POTENTIALS                            INSI-048
         DO ic = 1, Nc
            IF (Ipd(ic).LE.Ism) THEN
               IF (Lo(207)) THEN
C COUPLING POTENTIALS ALREADY CALCULATED                                INSI-076
                  l1 = Nvi(ic,I,1)
                  l2 = Nvi(ic,I,2)
                  k3 = Ipd(ic)
                  idp = MIN0(idp,k3)
                  IF (l1.EQ.0) THEN
                     IF (l2.NE.0) THEN
                        DO is = k3, Ism
                           W(1,is) = W(1,is) - Www(is,l2)*P(2,is,ic)
                           W(2,is) = W(2,is) + Www(is,l2)*P(1,is,ic)
                        ENDDO
                     ENDIF
                  ELSEIF (l2.GT.0) THEN
                     DO is = k3, Ism
                        W(1,is) = W(1,is) + Www(is,l1)*P(1,is,ic)
     &                            - Www(is,l2)*P(2,is,ic)
                        W(2,is) = W(2,is) + Www(is,l1)*P(2,is,ic)
     &                            + Www(is,l2)*P(1,is,ic)
                     ENDDO
                  ELSE
                     DO is = k3, Ism
                        W(1,is) = W(1,is) + Www(is,l1)*P(1,is,ic)
                        W(2,is) = W(2,is) + Www(is,l1)*P(2,is,ic)
                     ENDDO
                  ENDIF
               ELSE
C NO PREVIOUS CALCULATION OF COUPLING POTENTIALS                        INSI-052
                  IF (ic.EQ.I) THEN
                     IF (Mc(ic,6).NE.0) THEN
                        kt = Mc(ic,4)
                        DO is = 1, Ism
                           W(1,is) = W(1,is) + DFLOAT(Mc(ic,6))
     &                               *Vi(is,kt)*P(2,is,ic)
                           W(2,is) = W(2,is) - DFLOAT(Mc(ic,6))
     &                               *Vi(is,kt)*P(1,is,ic)
                        ENDDO
                     ENDIF
                  ENDIF
                  IF (Lo(29) .AND. (ic.EQ.I)) GOTO 50
                  k1 = Nvi(ic,I,1)
                  k2 = Nvi(ic,I,2)
                  IF (k1.LE.k2) THEN
                     k3 = Ipd(ic)
                     idp = MIN0(idp,k3)
                     DO k = k1, k2
                        kt = IABS(Nat(1,k))
                        DO is = k3, Ism
                           W(1,is) = W(1,is) + At(2,k)*V(is,kt)
     &                               *P(1,is,ic)
                           W(2,is) = W(2,is) + At(2,k)*V(is,kt)
     &                               *P(2,is,ic)
                        ENDDO
                        IF (kt.NE.Nat(1,k)) THEN
                           DO is = k3, Ism
                              W(1,is) = W(1,is) - At(2,k)*Vi(is,kt)
     &                                  *P(2,is,ic)
                              W(2,is) = W(2,is) + At(2,k)*Vi(is,kt)
     &                                  *P(1,is,ic)
                           ENDDO
                        ENDIF
                     ENDDO
                  ENDIF
               ENDIF
               IF (Lo(210)) THEN
C DERIVATIVE TERM OF COUPLING POTENTIALS                                INSI-096
                  IF (Lo(207)) THEN
C COUPLING POTENTIALS ALREADY CALCULATED                                INSI-113
                     l1 = Nvi(ic,I,3)
                     l2 = Nvi(ic,I,4)
                     IF (l1.LE.0) THEN
                        IF (l2.NE.0) THEN
                           DO is = k3, Ism
                              W(1,is) = W(1,is) - Www(is,l2)*Pd(2,is,ic)
                              W(2,is) = W(2,is) + Www(is,l2)*Pd(1,is,ic)
                           ENDDO
                        ENDIF
                     ELSEIF (l2.GT.0) THEN
                        DO is = k3, Ism
                           W(1,is) = W(1,is) + Www(is,l1)*Pd(1,is,ic)
     &                               - Www(is,l2)*Pd(2,is,ic)
                           W(2,is) = W(2,is) + Www(is,l1)*Pd(2,is,ic)
     &                               + Www(is,l2)*Pd(1,is,ic)
                        ENDDO
                     ELSE
                        DO is = k3, Ism
                           W(1,is) = W(1,is) + Www(is,l1)*Pd(1,is,ic)
                           W(2,is) = W(2,is) + Www(is,l1)*Pd(2,is,ic)
                        ENDDO
                     ENDIF
                  ELSE
C NO PREVIOUS CALCULATION OF COUPLING POTENTIALS                        INSI-098
                     k1 = k2 + 1
                     k2 = Nvi(ic,I,3)
                     IF (k1.LE.k2) THEN
                        DO k = k1, k2
                           kt = IABS(Nat(1,k))
                           DO is = k3, Ism
                              W(1,is) = W(1,is) + At(2,k)*V(is,kt)
     &                                  *Pd(1,is,ic)
                              W(2,is) = W(2,is) + At(2,k)*V(is,kt)
     &                                  *Pd(2,is,ic)
                           ENDDO
                           IF (kt.NE.Nat(1,k)) THEN
                              DO is = k3, Ism
                                 W(1,is) = W(1,is) - At(2,k)*Vi(is,kt)
     &                              *Pd(2,is,ic)
                                 W(2,is) = W(2,is) + At(2,k)*Vi(is,kt)
     &                              *Pd(1,is,ic)
                              ENDDO
                           ENDIF
                        ENDDO
                     ENDIF
                  ENDIF
               ENDIF
            ENDIF
   50    ENDDO
         Ipd(I) = idp
C SEARCH FOR THE FIRST NON NEGLIGIBLE VALUE                             INSI-132
         IF (idp.GT.Ism) RETURN
         DO is = idp, Ism
            IF ((DABS(W(1,is)) + DABS(W(2,is))).GT.Conv) GOTO 100
         ENDDO
  100    Ipd(I) = is
         kt = MAX0(Ipd(I),1)
         IF (Ipd(I).GE.Ism) RETURN
         IF (.NOT.(Lo(144))) THEN
            W(1,Ism) = 0.D0
            W(2,Ism) = 0.D0
         ENDIF
C INTEGRAL OF THE REGULAR FUNCTION WITH THE SECOND MEMBER               INSI-143
         X(1,kt) = -Ph(kt,2,I)*W(2,kt) + Ph(kt,1,I)*W(1,kt)
         X(2,kt) = Ph(kt,1,I)*W(2,kt) + Ph(kt,2,I)*W(1,kt)
         kkt = kt + 1
         IF (kkt.LE.Ism) THEN
            DO is = kkt, Ism
               X(1,is) = X(1,is - 1) + Ph(is,1,I)*W(1,is) - Ph(is,2,I)
     &                   *W(2,is)
               X(2,is) = X(2,is - 1) + Ph(is,1,I)*W(2,is) + Ph(is,2,I)
     &                   *W(1,is)
            ENDDO
         ENDIF
C SCATTERING COEFFICIENTS                                               INSI-151
         bre = X(1,Ism)/(H*Fam(1)) - Z(1)
         bim = X(2,Ism)/(H*Fam(1)) - Z(2)
         IF (.NOT.(Lo(92))) THEN
            hx = Z(3)*H
            hy = Z(4)*H
            ist = Ism + kt
C INTEGRAL OF THE IRREGULAR FUNCTION WITH THE SECOND MEMBER IN HX/HY    INSI-158
C AND COMPUTATION OF THE SOLUTION WITH THE CORRECTION TERM W/12         INSI-159
            DO is = kt, Ism
               js = ist - is
               P(1,js,I) = (X(1,js)*Ph(js,3,I) - X(2,js)*Ph(js,4,I)
     &                     - hx*Ph(js,1,I) + hy*Ph(js,2,I))/H - W(1,js)
     &                     /12.D0
               P(2,js,I) = (X(1,js)*Ph(js,4,I) + X(2,js)*Ph(js,3,I)
     &                     - hy*Ph(js,1,I) - hx*Ph(js,2,I))/H - W(2,js)
     &                     /12.D0
               hx = hx - Ph(js,3,I)*W(1,js) + Ph(js,4,I)*W(2,js)
               hy = hy - Ph(js,3,I)*W(2,js) - Ph(js,4,I)*W(1,js)
            ENDDO
            IF (kt.NE.1) THEN
               k = kt - 1
               DO is = 1, k
                  P(1,is,I) = -(hx*Ph(is,1,I) - hy*Ph(is,2,I))/H
                  P(2,is,I) = -(hy*Ph(is,1,I) + hx*Ph(is,2,I))/H
               ENDDO
            ENDIF
            DO kt = 1, Ism
               IF ((DABS(P(1,kt,I)) + DABS(P(2,kt,I))).GT.Aconv)
     &             GOTO 120
            ENDDO
  120       Ipd(I) = kt
            IF (.NOT.(Lo(22))) THEN
               Pad1(1,Kiter) = bre
               Pad1(2,Kiter) = bim
            ENDIF
         ENDIF
C  TEST OF CONVERGENCE                                                  INSI-180
         Lo(205) = (DABS(bim - Fai(1)).LE.Eiter .AND.
     &             (DABS(bre-Far(1)).LE.Eiter))
         IF (Lo(122) .AND. Lo(204) .AND. Kiter.GT.3 .AND. (.NOT.Lo(205))
     &       ) CALL PADE(Pad1,Pad2,Kiter,bre,bim,Eiter,1.D0,0.D0,Lo)
         Lo(204) = Lo(204) .AND. Lo(205)
         Far(1) = bre
         Fai(1) = bim
         IF (Lo(57)) WRITE (MW,99005) I, Far(1), Fai(1), Kiter, kt
99005    FORMAT (5X,I5,2D30.15,I10,10X,I5)
         IF (.NOT.Lo(210) .OR. Lo(92)) RETURN
      ENDIF
C COMPUTATION OF R*(D/DR) OF THE SOLUTIONS                              INSI-190
      ist = Ism - 3
      DO j = 1, 2
         Pd(j,1,I) = 2.5D0*P(j,2,I) - .25D0*P(j,5,I)
     &               + (5.D0*P(j,4,I) - 7.7D0*P(j,1,I) - 10.D0*P(j,3,I)
     &               + .2D0*P(j,6,I))/6.D0
         Pd(j,2,I) = -.8D0*P(j,1,I) - P(j,4,I)
     &               + (8.D0*P(j,3,I) - 3.5D0*P(j,2,I) + .8D0*P(j,5,I)
     &               - .1D0*P(j,6,I))/3.D0
         Pd(j,3,I) = 2.25D0*(P(j,4,I) - P(j,2,I))
     &               - .45D0*(P(j,5,I) - P(j,1,I)) + .05D0*P(j,6,I)
         fp = 3.D0
         DO is = 4, ist
            fp = fp + 1.D0
            Pd(j,is,I) = fp*(.75D0*(P(j,is+1,I) - P(j,is-1,I)) - .15D0*(
     &                   P(j,is+2,I) - P(j,is-2,I))
     &                   + (P(j,is+3,I) - P(j,is-3,I))/60.D0)
         ENDDO
         fp = fp + 1.D0
         Pd(j,Ism - 2,I) = fp*(P(j,Ism - 6,I) - 8.D0*P(j,Ism - 5,I)
     &                     + 30.D0*P(j,Ism - 4,I) - 80.D0*P(j,ist,I)
     &                     + 35.D0*P(j,Ism - 2,I) + 24.D0*P(j,Ism - 1,I)
     &                     - 2.D0*P(j,Ism,I))/60.D0
         fp = fp + 1.D0
         Pd(j,Ism - 1,I) = fp*(15.D0*P(j,Ism - 5,I) - 2.D0*P(j,Ism - 6,I
     &                     ) - 50.D0*P(j,Ism - 4,I) + 100.D0*P(j,ist,I)
     &                     - 150.D0*P(j,Ism - 2,I)
     &                     + 77.D0*P(j,Ism - 1,I) + 10.D0*P(j,Ism,I))
     &                     /60.D0
         fp = fp + 1.D0
         Pd(j,Ism,I) = fp*(10.D0*P(j,Ism - 6,I) - 72.D0*P(j,Ism - 5,I)
     &                 + 225.D0*P(j,Ism - 4,I) - 400.D0*P(j,ist,I)
     &                 + 450.D0*P(j,Ism - 2,I) - 360.D0*P(j,Ism - 1,I)
     &                 + 147.D0*P(j,Ism,I))/60.D0
      ENDDO
      RETURN
      END
C 01/01/04                                                      ECIS03  INTR-000
      SUBROUTINE INTR(Fam,X,Fr,Gr,Wre,Pad,Ipe,Ism,Kab,W,Iterm,Nc,V,Vr,
     &                Nvi,Mc,Nat,At,Ag,H,Aconv,Eiter,Ncin,Nni,Iterr,Lo)
C  E. C. I. S. METHOD: DIRAC EQUATION DRIVING ROUTINE.                  INTR-003
C             INRH  TO SOLVE THE SINGLE HOMOGENEOUS EQUATIONS           INTR-004
C             INRI  TO SOLVE THE SINGLE INHOMOGENEOUS EQUATIONS         INTR-005
C  PADE APPROXIMANTS OF TYPE I MAY BE USED TO ACCELERATE THE CONVERGENCEINTR-006
C INPUT VARIABLES: FAM(IC,I): MATCHING VALUES FOR I=1,6                 INTR-007
C                             CONSTANTS OF EACH EQUATION FOR I=7,10     INTR-008
C                  ISM:   NUMBER OF RADIAL POINTS                       INTR-009
C                  KAB:   MAXIMUM NUMBER OF COUPLED CHANNELS            INTR-010
C                  ITERM: MAXIMUM NUMBER OF ITERATIONS AND DIM. OF PAD  INTR-011
C                  NC:    NUMBER OF COUPLED EQUATIONS                   INTR-012
C                  V,VR:  POTENTIALS                                    INTR-013
C                  NVI:   ADDRESSES OF COUPLINGS                        INTR-014
C                  MC:    NUCLEAR STATE NUMBER, ANGULAR MOMENTA....     INTR-015
C                  NAT,AT:TABLE OF COUPLING COEFFICIENTS                INTR-016
C                  AG:    COULOMB INTEGRALS FOR COULOMB CORRECTIONS     INTR-017
C                  H:     STEP LENGTH                                   INTR-018
C                  ACONV: EPSILON FOR NEGLIGIBLE FUNCTION VALUES        INTR-019
C                  EITER: CONVERGENCE EPSILON FOR THE SCATTERING COEF.  INTR-020
C                  NCIN:  NUMBER OF SOLUTIONS                           INTR-021
C                  LO(I): LOGICAL CONTROLS                              INTR-022
C OUTPUT VARIABLES:FAM(IC,I+7): SCATTERING COEFFICIENTS                 INTR-023
C WORKING FIELDS:  X:     USED IN INRH AND INRI                         INTR-024
C                  FR:    SOLUTIONS OF HOMOGENEOUS EQUATIONS            INTR-025
C                  GR:    SOLUTIONS OF COUPLED EQUATIONS                INTR-026
C                  WRE:   REAL/IMAGINARY INHOMOGENEOUS TERM             INTR-027
C                  PAD(ITERM,KAB+2): PADE APPROXIMANTS                  INTR-028
C               IPE(I,1): FIRST NON NEGLIGIBLE POINT OF UNCOUPLED FUNC. INTR-029
C               IPE(I,2): FIRST NON NEGLIGIBLE POINT OF COUPLED FUNCT.  INTR-030
C                  W:     FREE PART OF THE STORAGE FOR COUPLINGS        INTR-031
C OUTPUT VARIABLES:NNI:   NUMBER OF EQ. WITH NEGLIGIBLE INHOMOG. TERM   INTR-032
C                  ITERR: LARGEST NUMBER OF ITERATIONS DONE FOR THIS J  INTR-033
C***********************************************************************INTR-034
      IMPLICIT REAL*8(A - H,O - z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      REAL*8 Aconv, Eiter, H
      INTEGER Ism, Iterm, Iterr, Kab, Nc, Ncin, Nni
      REAL*8 Ag(Kab,Kab,4), At(3,1), Fam(Kab,8), Fr(Ism,8,1),
     &       Gr(Ism,4,1), Pad(2,Iterm,1), V(Ism,14,1), Vr(Ism,4,1),
     &       W(Ism,4,1), Wre(Ism,1), X(1)
      INTEGER Ipe(Nc,2), Mc(Kab,6), Nat(6,1), Nvi(Kab,Kab,4)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 amax, conv, y(2), z(4)
      DOUBLE PRECISION DABS, DMAX1
      INTEGER i, i1, i2, ic, ij, ip, is, iw, j, k, k1, k2, k3, k4,
     &        kiter, nci, nci1, nci2
      INTEGER MAX0, MIN0
C
C
      conv = Aconv*H*H
      Nni = 0
      i2 = 8*Ism
C COMPUTE ALL COUPLING POTENTIALS AND SOLVE ALL HOMOGENEOUS EQUATIONS   INTR-044
      DO i = 1, Nc
         i1 = Mc(i,4)
         IF (i1.LT.0) THEN
            i1 = -i1
            IF (i1.NE.i) THEN
               DO is = 1, i2
                  Fr(is,1,i) = Fr(is,1,i1)
               ENDDO
               Ipe(i,1) = Ipe(i1,1)
            ENDIF
         ELSE
            CALL INRH(Fr(1,1,i),i,k,Aconv,Fam,X,Kab,Ism,Lo,
     &                DFLOAT(Mc(i,6) + 1),H,V(1,1,i1),Lo(221))
            Ipe(i,1) = k
         ENDIF
         IF (Lo(57)) WRITE (MW,99005) Fam(i,7), Fam(i,8), i, Ipe(i,1)
99005    FORMAT (2D30.15,5X,2I5)
      ENDDO
      i2 = 2*Ism
      IF (.NOT.(.NOT.Lo(207) .OR. Lo(221))) THEN
         iw = 0
C CALCULATION OF THE NON DIAGONAL COUPLING POTENTIALS                   INTR-062
         DO ic = 1, Nc
            DO ip = 1, ic
               k1 = Nvi(ip,ic,1)
               k2 = Nvi(ip,ic,2)
               k3 = Nvi(ip,ic,3)
               Nvi(ip,ic,3) = 0
               Nvi(ip,ic,4) = 0
               IF (k1.LE.k2) THEN
                  iw = iw + 1
                  Nvi(ip,ic,3) = iw
                  k = Nat(1,k1)
                  DO is = 1, i2
                     W(is,1,iw) = At(2,k1)*Vr(is,1,k)
                     W(is,3,iw) = At(3,k1)*Vr(is,3,k)
                  ENDDO
                  k4 = k1 + 1
                  IF (k4.LE.k2) THEN
                     DO k1 = k4, k2
                        k = Nat(1,k1)
                        DO is = 1, i2
                           W(is,1,iw) = W(is,1,iw) + At(2,k1)*Vr(is,1,k)
                           W(is,3,iw) = W(is,3,iw) + At(3,k1)*Vr(is,3,k)
                        ENDDO
                     ENDDO
                  ENDIF
               ENDIF
               IF (k2.LT.k3) THEN
                  iw = iw + 1
                  Nvi(ip,ic,4) = iw
                  k1 = k2 + 1
                  k = Nat(1,k1)
                  DO is = 1, i2
                     W(is,1,iw) = At(2,k1)*Vr(is,1,k) + At(3,k1)
     &                            *Vr(is,3,k)
                     W(is,3,iw) = At(2,k1)*Vr(is,1,k) - At(3,k1)
     &                            *Vr(is,3,k)
                  ENDDO
                  k4 = k1 + 1
                  IF (k4.LE.k3) THEN
                     DO k1 = k4, k3
                        k = Nat(1,k1)
                        DO is = 1, i2
                           W(is,1,iw) = W(is,1,iw) + At(2,k1)*Vr(is,1,k)
     &                                  + At(3,k1)*Vr(is,3,k)
                           W(is,3,iw) = W(is,3,iw) + At(2,k1)*Vr(is,1,k)
     &                                  - At(3,k1)*Vr(is,3,k)
                        ENDDO
                     ENDDO
                  ENDIF
               ENDIF
               Nvi(ic,ip,3) = Nvi(ip,ic,3)
               Nvi(ic,ip,4) = Nvi(ip,ic,4)
               IF (iw.GT.iw) iw = iw
            ENDDO
         ENDDO
      ENDIF
      IF (Lo(74)) CALL HORA
C LOOP ON SOLUTIONS                                                     INTR-107
      DO nci = 1, Ncin
         nci1 = nci + 8
         nci2 = nci1 + Ncin
C SET THE ZERO'S ORDER SOLUTION                                         INTR-111
         DO ic = 1, Nc
            Ipe(ic,2) = Ism + 1
            Fam(ic,nci1) = 0.D0
            Fam(ic,nci2) = 0.D0
         ENDDO
         Fam(nci,nci1) = Fam(nci,7)
         Fam(nci,nci2) = Fam(nci,8)
         IF (.NOT.((Ipe(nci,1).GT.Ism-3) .OR. Lo(221))) THEN
            DO is = 1, i2
               Gr(is,1,nci) = Fr(is,1,nci)
               Gr(is,3,nci) = Fr(is,5,nci)
            ENDDO
            Ipe(nci,2) = Ipe(nci,1)
            amax = 0.D0
C E. C. I. S. LOOP                                                      INTR-124
            DO kiter = 1, Iterm
               Iterr = MAX0(Iterr,kiter)
               Lo(204) = .TRUE.
               Lo(206) = ((kiter.NE.Iterm) .AND. (amax.LT.1.D10)) .OR.
     &                   Lo(23)
               IF (amax.GT.1.D10) WRITE (MW,99010) amax, kiter
99010          FORMAT (' MAXIMUM',D15.6,
     &                 ' OBTAINED IN PREVIOUS ITERATION. LAST ONE IS',
     &                 I3)
               DO ic = 1, Nc
                  i = MOD(ic + nci - 1,Nc) + 1
                  i1 = Mc(i,1)
                  DO j = 1, 4
                     z(j) = 0.D0
                  ENDDO
                  IF (.NOT.(Lo(144))) THEN
                     DO j = 1, Nc
                        IF (Ipe(j,2).GE.Ism) GOTO 4
C ORDER IN FG   F(EI)*F(EF),G(EI)*F(EF),F(EI)*G(EF),G(EI)*G(EF)         INTR-138
                        IF (.NOT.(Lo(22))) THEN
                           ij = kiter
                           IF (1 + MOD(j + Nc - nci - 1,Nc).GE.ic)
     &                         ij = ij - 1
                           IF (ij.NE.0) THEN
                              y(1) = Pad(1,ij,j)
                              y(2) = Pad(2,ij,j)
                              GOTO 2
                           ENDIF
                        ENDIF
                        y(1) = Fam(j,nci1)
                        y(2) = Fam(j,nci2)
    2                   z(1) = z(1) + y(1)*Ag(i,j,3) - y(2)*Ag(i,j,1)
                        z(2) = z(2) + y(1)*Ag(i,j,1) + y(2)*Ag(i,j,3)
                        z(3) = z(3) + y(1)*Ag(i,j,4) - y(2)*Ag(i,j,2)
                        z(4) = z(4) + y(1)*Ag(i,j,2) + y(2)*Ag(i,j,4)
    4                ENDDO
                     IF (i.NE.nci) THEN
                        z(1) = z(1) + Ag(i,nci,1)
                        z(3) = z(3) + Ag(i,nci,2)
                     ENDIF
                     z(3) = z(3) - z(2)
                     z(4) = z(4) + z(1)
                     z(1) = z(1) + Fam(i,7)*z(3) - Fam(i,8)*z(4)
                     z(2) = z(2) + z(3)*Fam(i,8) + z(4)*Fam(i,7)
                  ENDIF
                  IF (i.EQ.nci) THEN
                     z(1) = z(1) - Fam(i,7)
                     z(2) = z(2) - Fam(i,8)
                     z(3) = z(3) - 1.D0
                  ENDIF
                  IF (Lo(23) .AND. (.NOT.Lo(206))) Lo(204) = .TRUE.
C COMPUTE SECOND MEMBERS AND SOLVE THE INHOMOGENEOUS EQUATIONS          INTR-165
                  CALL INRI(Wre,Fr(1,1,i),Gr,W,Nvi,Fam(i,5),X,Pad(1,1,i)
     &                      ,Pad(1,1,Nc + 1),kiter,Eiter,conv,Aconv,Kab,
     &                      Nc,Ism,Ipe(1,2),i,Nat,At,Vr,Fam(i,nci1),
     &                      Fam(i,nci2),DFLOAT(Mc(i,6) + 1),V(1,1,i1),
     &                      Lo,H,z)
                  IF (Ipe(i,2).GE.Ism) THEN
                     Fam(i,nci1) = -z(1)
                     Fam(i,nci2) = -z(2)
                     IF (Lo(57)) WRITE (MW,99015)
99015                FORMAT (5X,'THE INHOMOGENEOUS TERM IS NEGLECTED')
                     IF (kiter.EQ.1 .AND. Lo(144)) Nni = Nni + 1
                     IF (i.EQ.nci) Ipe(nci,2) = Ipe(nci,1)
                  ELSE
                     IF (i.NE.nci .AND. Lo(92)) Ipe(i,2) = Ism + 1
                     amax = DMAX1(amax,DABS(Fam(i,nci1))
     &                      + DABS(Fam(i,nci2)))
                  ENDIF
               ENDDO
               IF (Lo(74)) CALL HORA
               IF (Lo(204) .OR. (amax.GT.1.D10 .AND. Lo(23))) GOTO 20
            ENDDO
            kiter = MIN0(kiter,Iterm)
   20       IF (Lo(53)) WRITE (MW,99020) kiter
99020       FORMAT (5X,I5,' ITERATIONS')
         ENDIF
      ENDDO
      Nni = Nni/Ncin
      RETURN
      END
C 01/01/04                                                      ECIS03  INRH-000
      SUBROUTINE INRH(P,Ic,Kt,Aconv,Fam,X,Nc,Ism,Lo,Cc,H,Vv,Lt)
C  E. C. I. S. METHOD: INTEGRATION OF A SINGLE HOMOGENEOUS EQUATION BY  INRH-002
C  THE NUMEROV METHOD   - DIRAC EQUATION -                              INRH-003
C INPUT VARIABLES: IC:    CHANNEL NUMBER OF THE EQUATION                INRH-004
C                  ACONV: LIMIT FOR NEGLIGIBLE FUNCTION VALUES          INRH-005
C                  FAM(IC,I): MATCHING VALUES FOR I=1,4                 INRH-006
C                             CONSTANTS OF THE EQUATION FOR I=6,10      INRH-007
C                  NC:    NUMBER OF COUPLED CHANNELS                    INRH-008
C                  ISM:   NUMBER OF RADIAL POINTS                       INRH-009
C                  LO(I): LOGICAL CONTROLS                              INRH-010
C                  CC:    EIGENVALUE OF L.S+1                           INRH-011
C                  H:     STEP SIZE                                     INRH-012
C                  VV:    POTENTIALS, D(R), ....                        INRH-013
C                  LT:    LOGICAL TO RETURN ONLY WITH PHASE SHIFT       INRH-014
C OUTPUT VARIABLES:P(ISM,I): REGULAR SOLUTION FOR I=1,2 AND 5,6         INRH-015
C                            IRREGULAR SOLUTION FOR I=3,4 AND 7,8       INRH-016
C                            LARGE COMPONENTS FOR I=1,4                 INRH-017
C                            SMALL COMPONENT FOR I=5,8                  INRH-018
C                  FAM(IC,7/8): REAL/IMAGINARY PART OF ZERO'S ORDER     INRH-019
C                         SCATTERING COEFFICIENTS                       INRH-020
C                  KT: THE SOLUTION IS NEGLIGIBLE FOR IS < KT           INRH-021
C WORKING SPACE:   X:    FOR THE INTEGRATION                            INRH-022
C***********************************************************************INRH-023
      IMPLICIT REAL*8(a - H,O - Z)
C
C
C Dummy arguments
C
      REAL*8 Aconv, Cc, H
      INTEGER Ic, Ism, Kt, Nc
      LOGICAL Lt
      REAL*8 Fam(Nc,10), P(Ism,8), Vv(Ism,14), X(2,2)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 a, b, bi, bim, br, bre, brr, ci, cr, hh, hx, hy, r
      DOUBLE PRECISION DABS
      INTEGER i, i1, is, ism3, j, js, kr, l
      INTEGER MIN0
C
C
C COMPUTATION OF THE REGULAR SOLUTION                                   INRH-027
      DO is = 1, Ism
         a = is*is
         X(1,is + 2) = Fam(Ic,10)/a - Fam(Ic,9) - Fam(Ic,7)*Vv(is,1)
     &                 - Fam(Ic,8)*Vv(is,3)
         X(2,is + 2) = -Fam(Ic,7)*Vv(is,2) - Fam(Ic,8)*Vv(is,4)
      ENDDO
      IF (Lo(27)) THEN
C NUMEROV METHOD                                                        INRH-041
         DO is = 1, Ism
            b = (12.D0 - X(1,is + 2))**2 + X(2,is + 2)**2
            a = 12.D0*(X(1,is + 2)*(12.D0 - X(1,is+2)) - X(2,is + 2)**2)
     &          /b
            IF (Lo(26)) a = a*(1.D0 - X(1,is + 2)**2*.416666666666667D-2
     &                      )
            X(1,is + 2) = a
            X(2,is + 2) = 144.D0*X(2,is + 2)/b
         ENDDO
      ELSE
C MODIFIED NUMEROV METHOD                                               INRH-034
         DO is = 1, Ism
            a = X(1,is + 2)**2 - X(2,is + 2)**2
            IF (Lo(26)) a = a*(1.D0 + X(1,is + 2)*.033333333333333D0)
            X(2,is + 2) = X(2,is + 2)
     &                    *(1.D0 + X(1,is + 2)*.166666666666667D0)
            X(1,is + 2) = X(1,is + 2) + a*.083333333333333D0
         ENDDO
      ENDIF
      X(1,1) = 0.D0
      X(2,1) = 0.D0
      X(1,2) = 1.D-15
      X(2,2) = 0.D0
      DO is = 1, Ism
         P(is,3) = X(1,is + 2)
         P(is,4) = X(2,is + 2)
         hx = X(1,is + 1)*X(1,is + 2) - X(2,is + 1)*X(2,is + 2)
         hy = X(2,is + 1)*X(1,is + 2) + X(1,is + 1)*X(2,is + 2)
         X(1,is + 2) = X(1,is + 1) + X(1,is + 1) - X(1,is) + hx
         X(2,is + 2) = X(2,is + 1) + X(2,is + 1) - X(2,is) + hy
         IF (DABS(X(1,is+2)).GE.1.D15) THEN
C RENORMALISATION OF LARGE FUNCTION VALUES                              INRH-060
            j = 2*is + 4
            DO i = 3, j
               X(i,1) = X(i,1)*1.D-30
            ENDDO
         ENDIF
      ENDDO
C END OF INTEGRATION                                                    INRH-065
C MATCHING WITH TWO VALUES                                              INRH-066
      bre = X(1,Ism)*Fam(Ic,4) - Fam(Ic,3)*X(1,Ism + 2)
      bim = X(2,Ism)*Fam(Ic,4) - Fam(Ic,3)*X(2,Ism + 2)
      hx = X(1,Ism)*Fam(Ic,2) - Fam(Ic,1)*X(1,Ism + 2)
      hy = X(2,Ism)*Fam(Ic,2) - Fam(Ic,1)*X(2,Ism + 2)
      bim = bim + hx
      bre = bre - hy
      brr = bre*bre + bim*bim
      bre = -bre/brr
      bim = bim/brr
      Fam(Ic,7) = bre*hx - bim*hy
      Fam(Ic,8) = hx*bim + hy*bre
      IF (Lt) RETURN
      bre = bre/12.D0
      bim = bim/12.D0
C NORMALISATION OF THE REGULAR SOLUTION                                 INRH-081
C AND SEARCH OF THE FIRST NON NEGLIGIBLE VALUE                          INRH-082
      DO is = 1, Ism
         brr = X(1,is) + 10.D0*X(1,is + 1) + X(1,is + 2)
         hy = X(2,is) + 10.D0*X(2,is + 1) + X(2,is + 2)
         hx = brr*bre - hy*bim
         hy = hy*bre + brr*bim
         P(is,1) = hx*Vv(is,9) - hy*Vv(is,10)
         P(is,2) = hx*Vv(is,10) + hy*Vv(is,9)
      ENDDO
      DO Kt = 1, Ism
         IF ((ABS(P(Kt,1)) + ABS(P(Kt,2))).GT.Aconv) GOTO 100
      ENDDO
  100 hx = Fam(Ic,1)
      hy = Fam(Ic,2)
C COMPUTATION OF THE IRREGULAR SOLUTION - STARTING VALUES               INRH-095
C THE LAST POINT OF IMAGINARY POTENTIAL IS NEGLECTED                    INRH-096
      X(2,Ism) = hx/Fam(Ic,6)
      X(2,Ism + 2) = hy/Fam(Ic,6)
      X(1,Ism) = Fam(Ic,3)/Fam(Ic,6)
      X(1,Ism + 2) = Fam(Ic,4)/Fam(Ic,6)
      bre = 2.D0 + P(Ism,3)
      X(1,Ism + 1) = (X(1,Ism) + X(1,Ism + 2))/bre
      X(2,Ism + 1) = (X(2,Ism) + X(2,Ism + 2))/bre
      kr = MIN0(Kt,Ism - 6)
      i1 = Ism - kr
C INTEGRATION                                                           INRH-106
      DO js = 1, i1
         is = Ism - js
         hx = X(1,is + 1)*P(is,3) - X(2,is + 1)*P(is,4)
         hy = X(2,is + 1)*P(is,3) + X(1,is + 1)*P(is,4)
         X(1,is) = X(1,is + 1) + X(1,is + 1) - X(1,is + 2) + hx
         X(2,is) = X(2,is + 1) + X(2,is + 1) - X(2,is + 2) + hy
      ENDDO
C COMPUTATION OF IRREGULAR SOLUTION                                     INRH-113
      DO is = kr, Ism
         bre = (X(1,is) + 10.D0*X(1,is + 1) + X(1,is + 2))/12.D0
         bim = (X(2,is) + 10.D0*X(2,is + 1) + X(2,is + 2))/12.D0
         P(is,3) = bre*Vv(is,9) - bim*Vv(is,10)
         P(is,4) = bre*Vv(is,10) + bim*Vv(is,9)
      ENDDO
      ism3 = Ism - 3
      hh = H*60.D0
      DO l = 1, 4
         DO is = Kt, Ism
            IF (is - kr.GT.2) THEN
               IF (is.LE.ism3) THEN
                  P(is,l + 4) = (45.D0*(P(is+1,l) - P(is-1,l)) - 9.D0*(P
     &                          (is+2,l) - P(is-2,l)) + P(is + 3,l)
     &                          - P(is - 3,l))/hh
               ELSEIF (is - Ism + 1.LT.0) THEN
                  P(Ism - 2,l + 4) = (P(Ism - 6,l) - 8.D0*P(Ism - 5,l) +
     &                               30.D0*P(Ism - 4,l)
     &                               - 80.D0*P(ism3,l)
     &                               + 35.D0*P(Ism - 2,l)
     &                               + 24.D0*P(Ism - 1,l)
     &                               - 2.D0*P(Ism,l))/hh
               ELSEIF (is - Ism + 1.EQ.0) THEN
                  P(Ism - 1,l + 4) = ( - 2.D0*P(Ism - 6,l) + 15.D0*P(Ism
     &                               - 5,l) - 50.D0*P(Ism - 4,l)
     &                               + 100.D0*P(ism3,l)
     &                               - 150.D0*P(Ism - 2,l)
     &                               + 77.D0*P(Ism - 1,l)
     &                               + 10.D0*P(Ism,l))/hh
               ELSE
                  P(Ism,l + 4) = (10.D0*P(Ism - 6,l) - 72.D0*P(Ism - 5,l
     &                           ) + 225.D0*P(Ism - 4,l)
     &                           - 400.D0*P(ism3,l)
     &                           + 450.D0*P(Ism - 2,l)
     &                           - 360.D0*P(Ism - 1,l) + 147.D0*P(Ism,l)
     &                           )/hh
               ENDIF
            ELSEIF (is - kr.LT.1) THEN
               P(is,l + 4) = ( - 147.D0*P(is,l) + 360.D0*P(is + 1,l)
     &                       - 450.D0*P(is + 2,l) + 400.D0*P(is + 3,l)
     &                       - 225.D0*P(is + 4,l) + 72.D0*P(is + 5,l)
     &                       - 10.D0*P(is + 6,l))/hh
            ELSEIF (is - kr.EQ.1) THEN
               P(is,l + 4) = ( - 10.D0*P(kr,l) - 77.D0*P(is,l) + 150.D0*
     &                       P(is + 1,l) - 100.D0*P(is + 2,l)
     &                       + 50.D0*P(is + 3,l) - 15.D0*P(is + 4,l)
     &                       + 2.D0*P(is + 5,l))/hh
            ELSE
               P(is,l + 4) = (2.D0*P(kr,l) - 24.D0*P(is - 1,l) - 35.D0*P
     &                       (is,l) + 80.D0*P(is + 1,l)
     &                       - 30.D0*P(is + 2,l) + 8.D0*P(is + 3,l)
     &                       - P(is + 4,l))/hh
            ENDIF
         ENDDO
      ENDDO
      r = H*DFLOAT(Kt - 1)
      DO is = Kt, Ism
         r = r + H
         br = P(is,1)*(Cc/r + Vv(is,13)) - P(is,5) - P(is,2)*Vv(is,14)
         bi = P(is,2)*(Cc/r + Vv(is,13)) - P(is,6) + P(is,1)*Vv(is,14)
         cr = P(is,3)*(Cc/r + Vv(is,13)) - P(is,7) - P(is,4)*Vv(is,14)
         ci = P(is,4)*(Cc/r + Vv(is,13)) - P(is,8) + P(is,3)*Vv(is,14)
         P(is,5) = br*Vv(is,11) - bi*Vv(is,12)
         P(is,6) = bi*Vv(is,11) + br*Vv(is,12)
         P(is,7) = cr*Vv(is,11) - ci*Vv(is,12)
         P(is,8) = ci*Vv(is,11) + cr*Vv(is,12)
      ENDDO
      IF (Kt.EQ.1) RETURN
      kr = Kt - 1
      DO is = 1, kr
         DO l = 1, 8
            P(is,l) = 0.D0
         ENDDO
      ENDDO
      END
C 01/01/04                                                      ECIS03  INRI-000
      SUBROUTINE INRI(W,P,Q,Ww,Nvi,Fam,X,Pad1,Pad2,Kiter,Eiter,Conv,
     &                Aconv,Kab,Nc,Ism,Ipi,J,Nat,At,Vr,Far,Fai,Cc,V,Lo,
     &                H,Z)
C  E. C. I. S. METHOD: INTEGRATION OF A SINGLE INHOMOGENEOUS EQUATION   INRI-003
C  BY THE NUMEROV METHOD      - DIRAC EQUATION -                        INRI-004
C INPUT VARIABLES: P:     UNCOUPLED SOLUTIONS                           INRI-005
C                  Q:     COUPLED SOLUTION                              INRI-006
C                  WW:    COUPLING BETWEEN EQUATIONS                    INRI-007
C                  NVI:   TABLE OF ADDRESSES OF COUPLINGS               INRI-008
C                  FAM:   WAVE NUMBER                                   INRI-009
C                  KITER: CURRENT ITERATION NUMBER                      INRI-010
C                  EITER: CONVERGENCE EPSILON FOR THE SCATTERING COEFF. INRI-011
C                  CONV:  EPSILON FOR NEGLIGIBLE SECOND MEMBERS         INRI-012
C                  ACONV: EPSILON FOR NEGLIGIBLE FUNCTION VALUES        INRI-013
C                  KAB:   DIMENSION OF TABLE NVI                        INRI-014
C                  NC:    NUMBER OF COUPLED CHANNELS                    INRI-015
C                  ISM:   NUMBER OF RADIAL POINTS                       INRI-016
C                  IPI:   THE FUNCTION IS NEGLIGIBLE FOR R < IPI*H      INRI-017
C                  J:     CHANNEL NUMBER OF THE EQUATION                INRI-018
C                  NAT,AT:COEFFICIENTS AND ADDRESSES OF COUPLINGS       INRI-019
C                  VR:    COUPLING POTENTIALS                           INRI-020
C                  CC:    EIGENVALUE OF L.S + 1                         INRI-021
C                  V:     D(R) AND TENSOR POTENTIALS FOR H**4 CORRECTIONINRI-022
C                  LO(I): LOGICAL CONTROLS                              INRI-023
C                  H:     INTEGRATION STEP                              INRI-024
C                  Z:     COULOMB INTEGRAL FOR CORRECTIONS              INRI-025
C OUTPUT VARIABLES:FAR,FAI: REAL AND IMAGINARY PART OF SCAT. COEFF.     INRI-026
C WORKING FIELD:   W(ISM,4):SECOND MEMBERS                              INRI-027
C                  X:    INTEGRAL OF REGULAR FUNCTION WITH SECOND MEMBERINRI-028
C                  PAD1(2,J): ITERATION RESULTS FOR THE CHANNEL J       INRI-029
C                  PAD2: WORKING FIELD OF PADE,TWICE LONGER THAN PAD1   INRI-030
C***********************************************************************INRI-031
      IMPLICIT REAL*8(a - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      REAL*8 Aconv, Cc, Conv, Eiter, H
      INTEGER Ism, J, Kab, Kiter, Nc
      REAL*8 At(3,1), Fai(1), Fam(1), Far(1), P(Ism,8), Pad1(2,1),
     &       Pad2(1), Q(Ism,4,1), V(Ism,14), Vr(Ism,4,1), W(Ism,4),
     &       Ww(Ism,4,1), X(2,1), Z(4)
      INTEGER Ipi(1), Nat(6,1), Nvi(Kab,Kab,4)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 a, b, hx, hy, hz, r, wx(4)
      DOUBLE PRECISION DABS
      INTEGER i, i2, ic, idp, is, ism1, ism3, ist, js, k, k1, k3, kkt,
     &        kt, kt1, l1, l2, l3
      INTEGER MAX0, MIN0
C
C
      ism1 = Ism + 1
C PUT ZERO IN THE INHOMOGENEOUS TERMS                                   INRI-039
      i2 = 4*Ism
      DO is = 1, i2
         W(is,1) = 0.D0
      ENDDO
      idp = ism1
      DO ic = 1, Nc
         IF (Ipi(ic).LE.Ism) THEN
            k3 = Ipi(ic)
            idp = MIN0(idp,k3)
            IF (Lo(207)) THEN
C COUPLING POTENTIALS COMPUTED IN INTR                                  INRI-088
               k1 = Nvi(ic,J,3)
               IF (k1.NE.0) THEN
C SCALAR AND VECTOR TERMS OF COUPLING POTENTIALS                        INRI-091
                  DO is = k3, Ism
                     W(is,1) = W(is,1) + Ww(is,1,k1)*Q(is,1,ic)
     &                         - Ww(is,2,k1)*Q(is,2,ic)
                     W(is,2) = W(is,2) + Ww(is,1,k1)*Q(is,2,ic)
     &                         + Ww(is,2,k1)*Q(is,1,ic)
                     W(is,3) = W(is,3) + Ww(is,3,k1)*Q(is,3,ic)
     &                         - Ww(is,4,k1)*Q(is,4,ic)
                     W(is,4) = W(is,4) + Ww(is,3,k1)*Q(is,4,ic)
     &                         + Ww(is,4,k1)*Q(is,3,ic)
                  ENDDO
               ENDIF
            ELSE
C NO PREVIOUS CALCULATION OF COUPLING POTENTIALS                        INRI-049
               l1 = Nvi(J,ic,1)
               l2 = Nvi(J,ic,2)
               l3 = Nvi(J,ic,3)
               IF (l1.LE.l2) THEN
C SCALAR AND VECTOR TERMS OF COUPLING POTENTIALS                        INRI-054
                  DO is = k3, Ism
                     DO i = 1, 4
                        wx(i) = 0.D0
                     ENDDO
                     DO k1 = l1, l2
                        k = Nat(1,k1)
                        wx(1) = wx(1) + At(2,k1)*Vr(is,1,k)
                        wx(2) = wx(2) + At(2,k1)*Vr(is,2,k)
                        wx(3) = wx(3) + At(3,k1)*Vr(is,3,k)
                        wx(4) = wx(4) + At(3,k1)*Vr(is,4,k)
                     ENDDO
                     W(is,1) = W(is,1) + wx(1)*Q(is,1,ic) - wx(2)
     &                         *Q(is,2,ic)
                     W(is,2) = W(is,2) + wx(1)*Q(is,2,ic) + wx(2)
     &                         *Q(is,1,ic)
                     W(is,3) = W(is,3) + wx(3)*Q(is,3,ic) - wx(4)
     &                         *Q(is,4,ic)
                     W(is,4) = W(is,4) + wx(3)*Q(is,4,ic) + wx(4)
     &                         *Q(is,3,ic)
                  ENDDO
               ENDIF
               IF (l2.LT.l3) THEN
C TENSOR TERMS OF COUPLING POTENTIALS                                   INRI-069
                  l2 = l2 + 1
                  DO is = k3, Ism
                     DO i = 1, 4
                        wx(i) = 0.D0
                     ENDDO
                     DO k1 = l2, l3
                        k = Nat(1,k1)
                        wx(1) = wx(1) + At(2,k1)*Vr(is,1,k)
                        wx(2) = wx(2) + At(2,k1)*Vr(is,2,k)
                        wx(3) = wx(3) + At(3,k1)*Vr(is,3,k)
                        wx(4) = wx(4) + At(3,k1)*Vr(is,4,k)
                     ENDDO
                     IF (J.LE.ic) THEN
                        wx(3) = -wx(3)
                        wx(4) = -wx(4)
                     ENDIF
                     W(is,1) = W(is,1) + (wx(1) + wx(3))*Q(is,3,ic)
     &                         - (wx(2) + wx(4))*Q(is,4,ic)
                     W(is,2) = W(is,2) + (wx(1) + wx(3))*Q(is,4,ic)
     &                         + (wx(2) + wx(4))*Q(is,3,ic)
                     W(is,3) = W(is,3) + (wx(1) - wx(3))*Q(is,1,ic)
     &                         - (wx(2) - wx(4))*Q(is,2,ic)
                     W(is,4) = W(is,4) + (wx(1) - wx(3))*Q(is,2,ic)
     &                         + (wx(2) - wx(4))*Q(is,1,ic)
                  ENDDO
                  GOTO 100
               ENDIF
            ENDIF
            k1 = Nvi(ic,J,4)
C TENSOR TERMS OF COUPLING POTENTIALS                                   INRI-098
            IF (k1.NE.0) THEN
               l1 = 1
               IF (J.LT.ic) l1 = 3
               l2 = 4 - l1
               DO is = k3, Ism
                  W(is,1) = W(is,1) + Ww(is,l1,k1)*Q(is,3,ic)
     &                      - Ww(is,l1 + 1,k1)*Q(is,4,ic)
                  W(is,2) = W(is,2) + Ww(is,l1,k1)*Q(is,4,ic)
     &                      + Ww(is,l1 + 1,k1)*Q(is,3,ic)
                  W(is,3) = W(is,3) + Ww(is,l2,k1)*Q(is,1,ic)
     &                      - Ww(is,l2 + 1,k1)*Q(is,2,ic)
                  W(is,4) = W(is,4) + Ww(is,l2,k1)*Q(is,2,ic)
     &                      + Ww(is,l2 + 1,k1)*Q(is,1,ic)
               ENDDO
            ENDIF
         ENDIF
  100 ENDDO
      Ipi(J) = idp
C SEARCH FOR THE FIRST NON NEGLIGIBLE VALUE                             INRI-110
      IF (idp.GT.Ism) RETURN
      DO is = idp, Ism
         IF ((DABS(W(is,1)) + DABS(W(is,2)) + DABS(W(is,3))
     &       + DABS(W(is,4))).GT.Conv) GOTO 200
      ENDDO
  200 Ipi(J) = is
      IF (Ipi(J).GE.Ism) RETURN
      kt = MAX0(Ipi(J),1)
C INTEGRAL OF THE REGULAR FUNCTION WITH THE SECOND MEMBER               INRI-119
      X(1,kt) = P(kt,2)*W(kt,2) - P(kt,1)*W(kt,1) + P(kt,6)*W(kt,4)
     &          - P(kt,5)*W(kt,3)
      X(2,kt) = -P(kt,1)*W(kt,2) - P(kt,2)*W(kt,1) - P(kt,5)*W(kt,4)
     &          - P(kt,6)*W(kt,3)
      kkt = kt + 1
      IF (kkt.LE.Ism) THEN
         DO is = kkt, Ism
            X(1,is) = X(1,is - 1) - P(is,1)*W(is,1) + P(is,2)*W(is,2)
     &                - P(is,5)*W(is,3) + P(is,6)*W(is,4)
            X(2,is) = X(2,is - 1) - P(is,1)*W(is,2) - P(is,2)*W(is,1)
     &                - P(is,5)*W(is,4) - P(is,6)*W(is,3)
         ENDDO
      ENDIF
C SCATTERING COEFFICIENTS                                               INRI-131
      hx = Z(3)*H
      hy = Z(4)*H
      a = X(1,Ism)/Fam(1) - Z(1)
      b = X(2,Ism)/Fam(1) - Z(2)
      IF (.NOT.(Lo(92))) THEN
         ist = Ism + kt
         r = H*DFLOAT(Ism)
         DO is = kt, Ism
            js = ist - is
            Q(js,1,J) = (X(1,js)*P(js,3) - X(2,js)*P(js,4) - hx*P(js,1)
     &                  + hy*P(js,2) - .5D0*W(js,3))
     &                  /H + (V(js,5)*W(js,1) - V(js,6)*W(js,2)
     &                  + W(js,3)*(Cc/r + V(js,13)) - W(js,4)*V(js,14))
     &                  /12.D0
            Q(js,2,J) = (X(1,js)*P(js,4) + X(2,js)*P(js,3) - hy*P(js,1)
     &                  - hx*P(js,2) - .5D0*W(js,4))
     &                  /H + (V(js,5)*W(js,2) + V(js,6)*W(js,1)
     &                  + W(js,4)*(Cc/r + V(js,13)) + W(js,3)*V(js,14))
     &                  /12.D0
            Q(js,3,J) = (X(1,js)*P(js,7) - X(2,js)*P(js,8) - hx*P(js,5)
     &                  + hy*P(js,6) + .5D0*W(js,1))
     &                  /H + (V(js,7)*W(js,3) - V(js,8)*W(js,4)
     &                  + W(js,1)*(Cc/r + V(js,13)) - W(js,2)*V(js,14))
     &                  /12.D0
            Q(js,4,J) = (X(1,js)*P(js,8) + X(2,js)*P(js,7) - hy*P(js,5)
     &                  - hx*P(js,6) + .5D0*W(js,2))
     &                  /H + (V(js,7)*W(js,4) + V(js,8)*W(js,3)
     &                  + W(js,2)*(Cc/r + V(js,13)) + W(js,1)*V(js,14))
     &                  /12.D0
            hx = hx + P(js,3)*W(js,1) - P(js,4)*W(js,2) + P(js,7)
     &           *W(js,3) - P(js,8)*W(js,4)
            hy = hy + P(js,3)*W(js,2) + P(js,4)*W(js,1) + P(js,7)
     &           *W(js,4) + P(js,8)*W(js,3)
            r = r - H
         ENDDO
C CORRECTIONS OF ORDER H**4                                             INRI-158
         kt1 = kt + 3
         ism3 = Ism - 3
         IF (kt1.LE.ism3) THEN
            hz = H*720.D0
            DO is = kt1, ism3
               Q(is,1,J) = Q(is,1,J)
     &                     - (45.D0*(W(is+1,3) - W(is-1,3)) - 9.D0*
     &                     (W(is+2,3) - W(is-2,3)) + W(is + 3,3)
     &                     - W(is - 3,3))/hz
               Q(is,2,J) = Q(is,2,J)
     &                     - (45.D0*(W(is+1,4) - W(is-1,4)) - 9.D0*
     &                     (W(is+2,4) - W(is-2,4)) + W(is + 3,4)
     &                     - W(is - 3,4))/hz
               Q(is,3,J) = Q(is,3,J)
     &                     + (45.D0*(W(is+1,1) - W(is-1,1)) - 9.D0*
     &                     (W(is+2,1) - W(is-2,1)) + W(is + 3,1)
     &                     - W(is - 3,1))/hz
               Q(is,4,J) = Q(is,4,J)
     &                     + (45.D0*(W(is+1,2) - W(is-1,2)) - 9.D0*
     &                     (W(is+2,2) - W(is-2,2)) + W(is + 3,2)
     &                     - W(is - 3,2))/hz
            ENDDO
         ENDIF
         IF (kt.NE.1) THEN
            k = kt - 1
            DO is = 1, k
               Q(is,1,J) = -(hx*P(is,1) - hy*P(is,2))/H
               Q(is,2,J) = -(hy*P(is,1) + hx*P(is,2))/H
               Q(is,3,J) = -(hx*P(is,5) - hy*P(is,6))/H
               Q(is,4,J) = -(hy*P(is,5) + hx*P(is,6))/H
            ENDDO
         ENDIF
         DO kt = 1, Ism
            IF ((DABS(Q(kt,1,J)) + DABS(Q(kt,2,J)) + DABS(Q(kt,3,J))
     &          + DABS(Q(kt,4,J))).GT.Aconv) GOTO 250
         ENDDO
  250    Ipi(J) = kt
         IF (.NOT.(Lo(22))) THEN
            Pad1(1,Kiter) = a
            Pad1(2,Kiter) = b
         ENDIF
      ENDIF
C  TEST OF CONVERGENCE                                                  INRI-187
      Lo(205) = (DABS(b - Fai(1)).LE.Eiter .AND.
     &          (DABS(a-Far(1)).LE.Eiter))
      IF (Lo(122) .AND. Lo(204) .AND. Kiter.GT.3 .AND. (.NOT.Lo(205)))
     &    CALL PADE(Pad1,Pad2,Kiter,a,b,Eiter,1.D0,0.D0,Lo)
      Lo(204) = Lo(204) .AND. Lo(205)
      Far(1) = a
      Fai(1) = b
      IF (Lo(57)) WRITE (MW,99005) J, Far(1), Fai(1), Kiter, kt
99005 FORMAT (5X,I5,2D30.15,I10,10X,I5)
      RETURN
      END
C 01/01/04                                                      ECIS03  PADE-000
      SUBROUTINE PADE(R,P,Mm,Bre,Bim,Eiter,Valr,Vali,Lo)
C  PADE APPROXIMANT OF TYPE I, CONTINUED FRACTION                       PADE-002
C INPUT VARIABLES: R: PARTIAL TAYLOR SUMS                               PADE-003
C                  MM: NUMBER OF COMPONENTS OF P                        PADE-004
C                  EITER: CONVERGENCE CRITERION                         PADE-005
C                  VAL: VARIABLE   HERE TAKEN AS (1.D0,0.D0)            PADE-006
C                  LO: LOGICAL CONTROLS                                 PADE-007
C OUTPUT VARIABLES: BRE,BIM IF CONVERGENCE IS OBTAINED                  PADE-008
C WORKING FIELD: P: AT LEAST TWICE AS LONG AS R                         PADE-009
C***********************************************************************PADE-010
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      REAL*8 Bim, Bre, Eiter, Vali, Valr
      INTEGER Mm
      LOGICAL Lo(250)
      REAL*8 P(2,2,Mm), R(2,Mm)
C
C Local variables
C
      REAL*8 ai, ai1, ar, ar1, zi, zr, zx
      DOUBLE PRECISION DABS, DMAX1
      INTEGER i, id, ip, j, ml, mt, n, na, nm, nn
C
C
      Lo(205) = .TRUE.
      IF (Mm.GT.3) THEN
C  TAYLOR COEFFICIENTS                                                  PADE-019
         mt = Mm + 1
         P(1,1,1) = R(1,1)
         P(1,2,1) = 0.D0
         P(2,1,1) = R(2,1)
         P(2,2,1) = 0.D0
         DO i = 2, Mm
            P(1,1,i) = R(1,i) - R(1,i - 1)
            P(1,2,i) = 0.D0
            P(2,1,i) = R(2,i) - R(2,i - 1)
            P(2,2,i) = 0.D0
         ENDDO
C  DECOMPOSITION LOOP                                                   PADE-030
         nm = Mm - 1
         DO na = 1, nm
            ml = Mm - na
            zr = P(1,1,na)
            zi = P(2,1,na)
            IF (DABS(zr) + DABS(zi).GE.1.D-8) THEN
               P(1,2,mt - na) = 1.D0
               DO j = 1, ml
                  zx = P(1,1,na)**2 + P(2,1,na)**2
                  zr = (P(1,1,na + j)*P(1,1,na) + P(2,1,na + j)
     &                 *P(2,1,na))/zx
                  zi = (P(2,1,na + j)*P(1,1,na) - P(1,1,na + j)
     &                 *P(2,1,na))/zx
                  P(1,1,na + j) = P(1,2,j) - zr
                  P(2,1,na + j) = P(2,2,j) - zi
                  P(1,2,j) = zr
                  P(2,2,j) = zi
               ENDDO
            ELSE
               P(1,2,mt - na) = 0.D0
               P(2,2,mt - na) = 0.D0
               DO j = 1, ml
                  P(1,1,na + j) = P(1,1,na + j) - P(1,1,na)*P(1,2,j)
     &                            + P(2,1,na)*P(2,2,j)
                  P(2,1,na + j) = P(2,1,na + j) - P(2,1,na)*P(1,2,j)
     &                            - P(1,1,na)*P(2,2,j)
               ENDDO
            ENDIF
         ENDDO
         ar1 = 1.D30
C  TRUNCATED CONTINUED FRACTIONS                                        PADE-054
         DO n = 1, nm
            ip = Mm + 1 - n
            P(1,2,n) = P(1,1,ip)
            P(2,2,n) = P(2,1,ip)
            DO i = 2, ip
               id = ip + 1 - i
               IF (P(1,2,mt - id).GT.0.D0) THEN
                  ar = 1.D0 + Valr*P(1,2,n) - Vali*P(2,2,n)
                  ai = Valr*P(2,2,n) + Vali*P(1,2,n)
                  zx = ar*ar + ai*ai
                  P(1,2,n) = (P(1,1,id)*ar + P(2,1,id)*ai)/zx
                  P(2,2,n) = (P(2,1,id)*ar - P(1,1,id)*ai)/zx
               ELSE
                  ar = Valr*P(1,2,n) - Vali*P(2,2,n) + P(1,1,id)
                  ai = Valr*P(2,2,n) + Vali*P(1,2,n) + P(2,1,id)
                  P(1,2,n) = ar
                  P(2,2,n) = ai
               ENDIF
            ENDDO
            IF (n.NE.1) THEN
C SEARCH FOR SMALLEST DIFFERENCE                                        PADE-074
               zr = P(1,2,n) - P(1,2,n - 1)
               zi = P(2,2,n) - P(2,2,n - 1)
               ai1 = DMAX1(DABS(zr),DABS(zi))
               IF (ai1.LT.ar1) THEN
                  nn = n
                  ar1 = ai1
               ENDIF
            ENDIF
         ENDDO
         Lo(205) = ar1.LE.Eiter
         IF (Lo(57)) WRITE (MW,99005) Lo(205), Mm, nn, P(1,2,nn),
     &                                P(2,2,nn), P(1,2,nn - 1),
     &                                P(2,2,nn - 1)
99005    FORMAT (' PADE',5X,L3,5X,'ITER =',I3,5X,'N =',I3,5X,4D15.8)
         IF ((.NOT.Lo(205)) .AND. (Lo(206) .OR. Lo(23))) RETURN
         Lo(205) = .TRUE.
         Bre = P(1,2,nn - 1)
         Bim = P(2,2,nn - 1)
         IF (nn.EQ.2) RETURN
         Bre = 0.5D0*(Bre + P(1,2,nn))
         Bim = 0.5D0*(Bim + P(2,2,nn))
         RETURN
      ELSE
         Lo(205) = .FALSE.
         RETURN
      ENDIF
      END
C 01/01/04                                                      ECIS03  INCH-000
      SUBROUTINE INCH(V,Vi,Mc,Nat,At,Nvi,Fam,Y,X,Wr,Wi,Ism,Kab,Nc,Ncin,
     &                Nml,Jsx,Npp,Kr,Lo)
C  STANDARD INTEGRATION OF THE COUPLED  EQUATIONS BY THE NUMEROV METHOD INCH-003
C INPUT VARIABLES: V,VI:    REAL AND IMAGINARY POTENTIALS AND COUPLINGS INCH-004
C                  MC(*,6): ADDRESS OF CENTRAL POTENTIALS               INCH-005
C                  NAT,AT:  GEOMETRICAL COEFFICIENTS                    INCH-006
C                  NVI:     ADDRESSES IN THE TABLE NAT,AT               INCH-007
C                  FAM:     MATCHING VALUES AND CONSTANTS OF EQUATIONS  INCH-008
C                  Y:       COULOMB CORRECTIONS                         INCH-009
C                  ISM:     NUMBER OF RADIAL POINTS                     INCH-010
C                  KAB:     MAXIMUM NUMBER OF COUPLED CHANNELS          INCH-011
C                  NC:      NUMBER OF COUPLED CHANNELS                  INCH-012
C                  NCIN:    NUMBER OF SOLUTIONS                         INCH-013
C                  NML:     MAXIMUM NUMBER OF POINTS WHERE THE COUPLING INCH-014
C                           POTENTIALS CAN BE CALCULATED AT A TIME      INCH-015
C                  JSX:     PERIODICITY OF THE SCHMIDT'S ORTHOGONALISA- INCH-016
C                           TION IF LO(42) IS .TRUE.                    INCH-017
C                  NPP:     NUMBER OF OPTICAL POTENTIALS                INCH-018
C                  LO(I):   LOGICAL CONTROLS                            INCH-019
C OUTPUT VARIABLES: SCATTERING COEFFICIENTS MULTIPLIED KF/KI            INCH-020
C                  REAL PART IN X(IC,IC',5), IMAGINARY PART IN          INCH-021
C                  X(IC,IC',2) FOR INCOMING CHANNEL IC'                 INCH-022
C WORKING FIELDS:  WR/I(IC,IC',IS): REAL/IMAGINARY COUPLING POTENTIALS  INCH-023
C                  X(IC,IC',I): NUMEROV RECURRENCE                      INCH-024
C                  KR:      WORKING FIELD FOR LINS                      INCH-025
C***********************************************************************INCH-026
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER Ism, Jsx, Kab, Nc, Ncin, Nml, Npp
      REAL*8 At(2,1), Fam(Kab,10), V(Ism,1), Vi(Ism,1), Wi(Nc,Nc,1),
     &       Wr(Nc,Nc,1), X(Kab,Kab,6), Y(Kab,Kab,4)
      INTEGER Kr(1), Mc(Kab,6), Nat(4,1), Nvi(Kab,Kab,2)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 bim, bre, hx, hy
      DOUBLE PRECISION DABS
      INTEGER i, i1, i2, ier, ij, in, is, j, j1, ji, jj, jr, js, k, k1,
     &        k2, kt, l, m, n, n2, ncx
      INTEGER IABS, MIN0
      LOGICAL lt
C
C
      IF (Lo(74)) CALL HORA
      jr = 0
      n2 = Nc*Nc
      DO i = 1, Nc
         DO j = 1, Nc
            DO k = 1, 6
               X(j,i,k) = 0.D0
            ENDDO
         ENDDO
         X(i,i,3) = 1.D-15
      ENDDO
C  RADIAL INTEGRATION LOOP                                              INCH-042
      DO js = 1, Ism
         is = MOD(js - 1,Nml) + 1
         IF (js.GT.jr) THEN
            ji = jr + 1
            jr = MIN0(Ism,jr + Nml)
C THE POTENTIALS ARE FIRST CALCULATED IN WR(IC,IC',I) AND               INCH-048
C WI(IC,IC',I) STARTING WITH I=2   FOR IC LARGER OR EQUAL TO IC'        INCH-049
            DO l = 1, Nc
               DO j = l, Nc
                  m = j + (l - 1)*Nc
                  n = m
                  DO i = ji, jr
                     n = n + n2
                     Wr(n,1,1) = 0.D0
                     Wi(n,1,1) = 0.D0
                  ENDDO
                  IF (l.EQ.j) THEN
C OPTICAL MODEL CONTRIBUTION                                            INCH-059
                     n = m
                     i1 = Mc(l,4)
                     i2 = i1 + Npp
                     DO i = ji, jr
                        n = n + n2
                        bre = DFLOAT(i)**2
                        Wr(n,1,1) = Fam(l,9) - Fam(l,10)/bre + Fam(l,7)
     &                              *V(i,i1)
                        Wi(n,1,1) = Fam(l,7)*Vi(i,i1)
                        IF (Lo(229)) Wr(n,1,1) = Wr(n,1,1) + Fam(l,8)
     &                      *V(i,i2)
                        IF (Lo(230)) Wi(n,1,1) = Wi(n,1,1) + Fam(l,8)
     &                      *Vi(i,i2)
                     ENDDO
                  ENDIF
C COUPLED CHANNEL CONTRIBUTION                                          INCH-071
                  k1 = Nvi(j,l,1)
                  k2 = Nvi(j,l,2)
                  IF (k1.LE.k2) THEN
                     DO k = k1, k2
                        kt = IABS(Nat(1,k))
                        lt = kt.NE.Nat(1,k)
                        n = m
                        DO i = ji, jr
                           n = n + n2
                           Wr(n,1,1) = Wr(n,1,1) + At(2,k)*V(i,kt)
                           IF (lt) Wi(n,1,1) = Wi(n,1,1) + At(2,k)
     &                         *Vi(i,kt)
                        ENDDO
                     ENDDO
                  ENDIF
               ENDDO
            ENDDO
            jj = jr - ji + 1
            DO i = 1, jj
               j = i + 1
C SYMMETRISATION OF OLD VALUES                                          INCH-090
               DO k = 1, Nc
                  DO l = k, Nc
                     Wr(k,l,j) = Wr(l,k,j)
                     Wi(k,l,j) = Wi(l,k,j)
                  ENDDO
               ENDDO
C COMPUTATION OF V +V*V/12. FOR L LARGER OR EQUAL TO K                  INCH-096
               DO k = 1, Nc
                  DO l = k, Nc
                     bre = 0.D0
                     bim = 0.D0
                     DO n = 1, Nc
                        bre = bre - Wr(n,k,j)*Wr(n,l,j) + Wi(n,k,j)
     &                        *Wi(n,l,j)
                        bim = bim - Wi(n,k,j)*Wr(n,l,j) - Wr(n,k,j)
     &                        *Wi(n,l,j)
                     ENDDO
C SYMMETRISATION                                                        INCH-104
                     Wr(l,k,i) = Wr(l,k,j) + bre/12.D0
                     Wi(l,k,i) = Wi(l,k,j) + bim/12.D0
                     Wr(k,l,i) = Wr(l,k,i)
                     Wi(k,l,i) = Wi(l,k,i)
                  ENDDO
                  IF (Lo(30)) Wr(k,k,i) = Wr(k,k,i) + Wr(k,k,j)
     &                **3/360.D0
               ENDDO
            ENDDO
         ENDIF
         DO i = 1, Nc
            DO j = 1, Nc
               X(i,j,1) = X(i,j,2)
               X(i,j,2) = X(i,j,3)
               X(i,j,4) = X(i,j,5)
               X(i,j,5) = X(i,j,6)
            ENDDO
   20       DO j = 1, Nc
               hx = 0.D0
               hy = 0.D0
               DO k = 1, Nc
                  hx = hx + Wr(k,j,is)*X(i,k,2) - Wi(k,j,is)*X(i,k,5)
                  hy = hy + Wi(k,j,is)*X(i,k,2) + Wr(k,j,is)*X(i,k,5)
               ENDDO
               X(i,j,3) = X(i,j,2) + X(i,j,2) - X(i,j,1) - hx
               X(i,j,6) = X(i,j,5) + X(i,j,5) - X(i,j,4) - hy
            ENDDO
            IF (DABS(X(i,i,3)).GE.1.D15) THEN
               DO ji = 1, 6
                  DO ij = 1, Nc
                     X(i,ij,ji) = X(i,ij,ji)*1.D-30
                  ENDDO
               ENDDO
               GOTO 20
            ENDIF
         ENDDO
         IF (.NOT.(Lo(142) .OR. MOD(js,Jsx).NE.0 .OR. js.EQ.Ism)) THEN
C  SCHMIDT ORTHOGONALISATION PROCEDURE EVERY JSX STEPS                  INCH-134
            DO i = 1, Nc
               IF (i.NE.1) THEN
                  in = i - 1
                  DO k = 1, in
                     X(i,k,1) = 0.D0
                     X(i,k,4) = 0.D0
                     DO j = 1, Nc
                        X(i,k,1) = X(i,k,1) + X(k,j,2)*X(i,j,2)
     &                             - X(k,j,5)*X(i,j,5)
                        X(i,k,4) = X(i,k,4) + X(k,j,5)*X(i,j,2)
     &                             + X(k,j,2)*X(i,j,5)
                     ENDDO
                     bre = X(i,k,1)*X(k,k,1) - X(i,k,4)*X(k,k,4)
                     bim = X(i,k,1)*X(k,k,4) + X(i,k,4)*X(k,k,1)
                     DO j = 1, Nc
                        X(i,j,2) = X(i,j,2) - bre*X(k,j,2)
     &                             + bim*X(k,j,5)
                        X(i,j,5) = X(i,j,5) - bre*X(k,j,5)
     &                             - bim*X(k,j,2)
                        X(i,j,3) = X(i,j,3) - bre*X(k,j,3)
     &                             + bim*X(k,j,6)
                        X(i,j,6) = X(i,j,6) - bre*X(k,j,6)
     &                             - bim*X(k,j,3)
                     ENDDO
                  ENDDO
               ENDIF
               bre = 0.D0
               bim = 0.D0
               DO j = 1, Nc
                  bre = bre + X(i,j,2)**2 - X(i,j,5)**2
                  bim = bim + 2.D0*X(i,j,2)*X(i,j,5)
               ENDDO
               bim = bim/bre
               X(i,i,1) = 1.D0/(bre*(1.D0 + bim**2))
               X(i,i,4) = -X(i,i,1)*bim
            ENDDO
         ENDIF
      ENDDO
      IF (Lo(74)) CALL HORA
C  MATRICES OF PSEUDO-WRONSKIANS FOR THE MATCHING CONDITION             INCH-162
      DO i = 1, Nc
         DO j = 1, Nc
            j1 = Nc + j
            X(i,j1,1) = (X(i,j,1)*Fam(j,2) - Fam(j,1)*X(i,j,3))
            X(i,j1,4) = (X(i,j,6)*Fam(j,1) - Fam(j,2)*X(i,j,4))
            X(i,j,1) = (X(i,j,3)*Fam(j,3) - Fam(j,4)*X(i,j,1))
            X(i,j,4) = (X(i,j,4)*Fam(j,4) - Fam(j,3)*X(i,j,6))
            IF (Fam(j,9).GE.0.D0) THEN
               X(i,j,1) = X(i,j,1) - X(i,j1,4)
               X(i,j,4) = X(i,j,4) + X(i,j1,1)
            ENDIF
         ENDDO
      ENDDO
C  COMPLEX LINEAR SYSTEM OF EQUATIONS                                   INCH-175
      ncx = Ncin
      IF (Lo(44)) ncx = Nc
      CALL LINS(X(1,1,4),Kab,X,Kab,Nc,ncx,Kr,ier)
      IF (ier.EQ.0) THEN
         IF (Lo(144)) RETURN
C BUILDING THE LINEAR SYSTEM FOR S-MATRIX WITH COULOMB CORRECTIONS      INCH-181
         DO i = 1, Nc
            DO j = 1, Nc
               j1 = Nc + j
               X(i,j,1) = Y(j,i,1)
               X(i,j,3) = X(i,j1,1)
               X(i,j,4) = Y(j,i,2)
               X(i,j,6) = -Y(j,i,1) + X(i,j1,4)
               DO k = 1, Nc
                  k1 = k + Nc
                  X(i,j,1) = X(i,j,1) - (Y(j,k,1) - Y(j,k,4))*X(i,k1,1)
     &                       + (Y(j,k,3) + Y(j,k,2))*X(i,k1,4)
                  X(i,j,3) = X(i,j,3) - Y(j,k,3)*X(i,k1,1) - Y(j,k,1)
     &                       *X(i,k1,4)
                  X(i,j,4) = X(i,j,4) - (Y(j,k,1) - Y(j,k,4))*X(i,k1,4)
     &                       - (Y(j,k,2) + Y(j,k,3))*X(i,k1,1)
                  X(i,j,6) = X(i,j,6) - Y(j,k,3)*X(i,k1,4) + Y(j,k,1)
     &                       *X(i,k1,1)
               ENDDO
            ENDDO
            X(i,i,4) = X(i,i,4) + 1.D0
         ENDDO
C TRANSFER OF THE SECOND MEMBERS IN X(1,1,5) AND X(1,1,2)               INCH-199
         DO i = 1, Nc
            DO j = 1, Nc
               j1 = Nc + j
               Y(i,j,2) = X(i,j1,1)
               X(i,j1,1) = X(i,j,3)
               Y(i,j,1) = X(i,j1,4)
               X(i,j1,4) = X(i,j,6)
            ENDDO
         ENDDO
         CALL LINS(X(1,1,4),Kab,X,Kab,Nc,Ncin,Kr,ier)
         IF (ier.EQ.0) THEN
            IF (Lo(57)) WRITE (MW,99005)
     &                         ((i,j,Y(i,j,1),Y(i,j,2),X(i,Nc+j,4),
     &                         X(i,Nc+j,1),j = 1,Ncin),i = 1,Nc)
99005       FORMAT (/25X,'UNCORRECTED VALUES',30X,
     &              'CORRECTED VALUES'/(2X,2I3,4D25.15))
            RETURN
         ENDIF
      ENDIF
      WRITE (MW,99010) ier
99010 FORMAT (' RETURN FROM LINS WITH IER =',I2,
     &        ' IN INCH   ... STOP ...')
      STOP
      END
C 01/01/04                                                      ECIS03  SCAM-000
      SUBROUTINE SCAM(F,Fcn,Tx,Gcn,Jmax,Kmax,Mc,Md,Far,Fai,Wv,Ncoll,
     &                Ncols,Kab,Kba,Ipi,Ipim,Gam,Fiss,Tl,Ncj,Xd,P,Q,V,
     &                Nct,Iq,Aa,Kbc,Idt,Xz,Lo)
C STORAGE OF SCATTERING COEFFICIENTS                                    SCAM-004
C  INPUT VARIABLES:JMAX: MAXIMUM NUMBER OF CHANNEL SPINS, DIM. FOR F    SCAM-005
C                  KMAX: MAX. NUM. OF L OF COMP. NUC., DIM. FOR FCN, GCNSCAM-006
C                  MC:   NUCLEAR STATE NUMBERS, ANGULAR MOMENTA, ETC... SCAM-007
C                         SEE QUAN                                      SCAM-008
C                  MD:   EXTENDED MC FOR IDENT. PART. WITH SPIN         SCAM-009
C                  FAR/FAI: REAL/IMAGINARY PART OF SCATTERING COEFF.    SCAM-010
C                  WV:   WAVE NUMBER AND COULOMB PARAMETER.  SEE COLF   SCAM-011
C                  NCOLL:NUMBER OF COUPLED LEVELS                       SCAM-012
C                  NCOLS:NUMBER OF LEVELS WITH ANGULAR DISTRIBUTION     SCAM-013
C                  KAB:  DIMENSION FOR MC                               SCAM-014
C                  KBA:  NUMBER OF INDEPENDENT AMPLITUDES               SCAM-015
C                  IPI,IPIM: PARITY, MULTIPL., ADDRESSES IN F (SEE CALX)SCAM-016
C                  GAM:  GAMMA TRANSMISSION COEFFICIENTS READ           SCAM-017
C                  FISS: FISSION COEFFICIENTS FOR COMPOUND NUCLEUS      SCAM-018
C                  TL:   TRANSMISSION COEFFICIENTS OF UNCOUPLED LEVELS  SCAM-019
C                  NCJ:  STARTING AND FINAL ADDRESSES FOR CONTINUA      SCAM-020
C                  XD:   ENERGY AND SPIN DEPENDENCE OF LEVEL DENSITIES  SCAM-021
C                  NCT:  NUMBER OF EQUA. AND SOLUTIONS FOR EACH PARITY  SCAM-022
C                  IQ:   DIMENSION FOR V                                SCAM-023
C                  AA:   COEFFICIENTS OF SYMMETRISATION                 SCAM-024
C                  KBC:  DIMENSION FOR AA                               SCAM-025
C                  IDT:  SIZE AVAILABLE FOR THE Q IN DOUBLE PRECISION   SCAM-026
C                  XZ:   CONVERSION FACTOR TO MILLIBARNS                SCAM-027
C                  LO:   LOGICAL CONTROLS                               SCAM-028
C              LO(18) =.TRUE.  IDENTICAL PARTICLE AND TARGET            SCAM-029
C              LO(55) =.TRUE.  OUTPUT OF C-MATRIX AND COMPOUND NUCLEUS  SCAM-030
C              LO(63) =.TRUE.  PENETRABILITIES WRITTEN ON FILE 63       SCAM-031
C              LO(82) =.TRUE.  OLD SIMPLIFIED COMPOUND NUCLEUS          SCAM-032
C              LO(83) =.TRUE.  NO ENGELBRETCH-WEIDENMULLER TRANSFORM    SCAM-033
C              LO(85) =.TRUE.  FISSION TRANSMISSION COEFFICIENTS        SCAM-034
C              LO(86) =.TRUE.  GAMMA EMISSION IN COMPOUND NUCLEUS       SCAM-035
C              LO(87) =.TRUE.  NO WIDTH FLUCTUATIONS                    SCAM-036
C              LO(224)=.TRUE.  COMPUTE TRANSMISSION COEFFICIENTS        SCAM-037
C              LO(225)=.TRUE.  USUAL COUPLED EQUATIONS                  SCAM-038
C              LO(231)=.TRUE.  IDENTICAL NON-0 SPIN PARTICLE AND TARGET SCAM-039
C              LO(232)=.TRUE.  DO NOT COMPUTE COMPOUND CONTRIBUTIONS    SCAM-040
C              LO(233)=.TRUE.  STORE FISSION AND GAMMA TRANSM. COEFF.   SCAM-041
C BY COMMON /NCOMP/NCONT:NUMBER OF CONTINUA FOR COMPOUND NUCLEUS        SCAM-042
C                  BZ1,BZ2,BZ3,BZ4,BZ5: PARAMETER FOR COMPOUND NUCLEUS  SCAM-043
C                   (SEE DESCRIPTION OF INPUT). FOR THE OTHERS SEE CONU SCAM-044
C BY COMMON /NOEQU/NIC:  NUMBER OF COUPLED CHANNELS                     SCAM-045
C                  NCI:  NUMBER OF SOLUTIONS                            SCAM-046
C                  NC:   NUMBER OF EQUATIONS WITHOUT ANTISYMMETRISATION SCAM-047
C                  NCIN: NUMBER OF SOLUTIONS WITHOUT ANTISYMMETRISATION SCAM-048
C                  JPI:  CHANNEL PARITY (0/1)                           SCAM-049
C                  IPJ:  NUMBER OF THE CHANNEL SPIN                     SCAM-050
C                  NAJ:  TWICE CHANNEL SPIN                             SCAM-051
C OUTPUT VARIABLES:F:    SCATTERING COEFFICIENTS                        SCAM-052
C                  FCN:  COMPOUND NUCLEUS CONTRIBUTIONS                 SCAM-053
C                  TX:   TOTAL REACTION CROSS SECTION IN MB FOLLOWED BY SCAM-054
C                        THE TOTAL DIRECT CROSS SECTIONS OF COUPLED     SCAM-055
C                        LEVELS, THE TOTAL COMPOUND CROSS SECTIONS OF   SCAM-056
C                        LEVELS, THE FISSION AND GAMMA CROSS SECTIONS   SCAM-057
C                  GCN:  COMPOUND NUCLEUS COEFFICIENTS OF LEGENDRE POLY.SCAM-058
C IN COMMON /NOEQU/R1:   MAXIMUM OF SCATTERING AND COMPOUND COEFFICIENT SCAM-059
C WORKING SPACE:   P:    FOR DIAGONALISATION OF THE S MATRIX            SCAM-060
C                  Q:    FOR ANGULAR DISTRIBUTION OF COMPOUND NUCLEUS   SCAM-061
C                  V(1,*):   LEVEL AND QUANTUM NUMBERS                  SCAM-062
C                  V(2,*):   WEIGH FOR CONTINUA                         SCAM-063
C                  V(3,*):   TRANSMISSION COEFFICIENTS                  SCAM-064
C                  V(4,*):   WIDTH FLUCTUATION PARAMETER                SCAM-065
C                  V(5,*):   CONTRIBUTION TO COMPOUND NUCLEUS           SCAM-066
C***********************************************************************SCAM-067
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      REAL*8 ACN(8), BN, BZ1, BZ2, BZ3, BZ4, BZ5, EGD, FNUg, GGD, R1(2),
     &       SGSq, TG0, TG1
      INTEGER IPJ, JPI, MR, MS, MW, NAJ, NC, NCI, NCIn, NCOj, NCOlx,
     &        NCOns, NCOnt, NCXn, NDP, NDQ, NFIss, NIC, NIE, NIN, NRD,
     &        NSP(3)
      COMMON /INOUT / MR, MW, MS
      COMMON /NCOMP / NSP, NFIss, NRD, NCOnt, NCOj, NCOns, NIE, NCOlx,
     &                NDP, NDQ, ACN, BZ1, BZ2, BZ3, BZ4, BZ5, TG0, BN,
     &                FNUg, EGD, GGD, TG1, SGSq
      COMMON /NOEQU / NCXn, NIC, NCI, NC, NCIn, NIN, JPI, IPJ, R1, NAJ
C
C Dummy arguments
C
      INTEGER Idt, Iq, Jmax, Kab, Kba, Kbc, Kmax, Ncoll, Ncols
      REAL*8 Xz
      REAL*8 Aa(Kbc,1), F(2,Jmax,1), Fai(Kab,1), Far(Kab,1), Fcn(Kmax,1)
     &       , Fiss(2,1), Gam(1), Gcn(Kmax,1), P(NC,NC,4), Q(1), Tl(1),
     &       Tx(1), V(Iq,1), Wv(18,1), Xd(3,1)
      INTEGER Ipi(11,*), Ipim(11,1), Mc(Kab,12), Md(Kab,12), Ncj(2,1),
     &        Nct(6)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 a1, a2, ai, aj, ar, b1, b2, bir, bri, bz, efb, fj, fn,
     &       fnu(2), g, gnu, pi, rz, sgf(2), tg(2), tp(20), tq, vcx(4,2)
     &       , w(20), x(20)
      CHARACTER*8 al(2)
      DOUBLE PRECISION DABS, DATAN2, DEXP, DMAX1, DSQRT
      INTEGER i, i1, i2, ia, ib, ic, icp, id, ierr, ii, ii1, iii, iiv,
     &        ij, ikm, ikp, it, iv, ivq, ivs, j, j1, j2, ja, jb, jc,
     &        jcx, ji, jj, jl, k, k1, k2, kk, kn, l, l1, l2, la, lb, lj,
     &        ll, m, mcx(4,2), mm, mn, n, n1, n2, nc1, ncx, ni, njc, nm,
     &        nn, ns, nsp1, nss, nsy, nt, nxx, nz
      INTEGER IABS, IDINT, MIN0
      INTEGER IK
      CHARACTER*1 ip(2)
      LOGICAL lg(2)
C
C
      DATA ip, al, pi, nsy/'+', '-', ' FISSION', '   GAMMA',
     &     3.1415926535D0, 0/
      DATA x/7.0539889691988753D-02, 3.7212681800161144D-01,
     &     9.1658210248327356D-01, 1.7073065310283439D+00,
     &     2.7491992553094321D+00, 4.0489253138508869D+00,
     &     5.6151749708616165D+00, 7.4590174536710633D+00,
     &     9.5943928695810968D+00, 1.2038802546964316D+01,
     &     1.4814293442630740D+01, 1.7948895520519376D+01,
     &     2.1478788240285011D+01, 2.5451702793186906D+01,
     &     2.9932554631700612D+01, 3.5013434240479000D+01,
     &     4.0833057056728571D+01, 4.7619994047346502D+01,
     &     5.5810795750063899D+01, 6.6524416525615754D+01/
      DATA w/1.8108006241898926D-01, 4.2255676787856397D-01,
     &     6.6690954670184815D-01, 9.1535237278307367D-01,
     &     1.1695397071955460D+00, 1.4313549859282060D+00,
     &     1.7029811379850227D+00, 1.9870158907927472D+00,
     &     2.2866357812534308D+00, 2.6058347275538333D+00,
     &     2.9497837342139509D+00, 3.3253957820093196D+00,
     &     3.7422554705898109D+00, 4.2142367102518804D+00,
     &     4.7625184614902093D+00, 5.4217260442455743D+00,
     &     6.2540123569324213D+00, 7.3873143890544346D+00,
     &     9.1513287309874796D+00, 1.2893388645939997D+01/
      IK(i,l,j) = ((j - NAJ + Ipi(3,i) - 1)/2*Ipi(2,i) + (l - j + Ipi(2,
     &            i) - 1)/2)/2
      nz = MOD(IPJ + JPI + 1,2)
      ns = 0
      IF (nz.NE.0) ns = Nct(1)*Nct(3)
      R1(1) = 0.D0
      R1(2) = 0.D0
      jc = 0
      aj = 0.5D0*DFLOAT(NAJ)
      bz = 1.D0
      IF (Lo(18)) bz = 2.D0
      rz = pi*bz*Xz*DFLOAT(NAJ + 1)
      IF (Lo(55)) WRITE (MW,99070) aj, ip(JPI + 1), NC, NCIn
C COMPUTATION OF TRANSMISSION COEFFICIENTS                              SCAM-109
      nxx = NCIn
      IF (Lo(224)) nxx = NC
      DO ic = 1, nxx
         iv = Mc(ic,1)
         IF (Wv(3,iv).GE.0.D0) THEN
            IF (ic.LE.NCIn) Tx(1) = Tx(1) + 4.D0*Fai(ic,ic)*rz*bz
            IF (Lo(224)) THEN
               jc = jc + 1
               V(1,jc) = DFLOAT(1024*(1024*iv + Mc(ic,2)) + Mc(ic,3))
               V(2,jc) = 1.D0
               V(3,jc) = 4.D0*Fai(ic,ic)
               DO n = 4, Iq
                  V(n,jc) = 0.D0
               ENDDO
            ENDIF
            DO icp = 1, NC
               ivq = Mc(icp,1)
               a1 = Wv(6,ivq)/Wv(6,iv)
               IF (Lo(225)) a1 = 1.D0/a1
               Far(icp,ic) = Far(icp,ic)*a1
               Fai(icp,ic) = Fai(icp,ic)*a1
               IF (Wv(3,ivq).LT.0.D0) THEN
                  IF ((ic.LE.NCIn) .AND. Lo(55)) WRITE (MW,99005) icp,
     &                ic, ivq, Mc(icp,2), fj, Far(icp,ic), Fai(icp,ic)
99005             FORMAT (1X,I3,I4,I3,I5,F7.1,4X,1P,2D15.7,' I',4X,
     &                    'CLOSED')
               ELSE
                  IF (Lo(224)) V(3,jc) = V(3,jc)
     &                - 4.D0*(Far(icp,ic)**2 + Fai(icp,ic)**2)
                  IF (ic.LE.NCIn) THEN
C TEST OF CONVERGENCE                                                   SCAM-132
                     R1(1) = DMAX1(R1(1),DABS(Far(icp,ic)) + DABS(Fai(
     &                       icp,ic)))
                     a1 = Far(icp,ic)*Far(icp,ic) + Fai(icp,ic)
     &                    *Fai(icp,ic)
                     IF (a1.GT.1.D0) WRITE (MW,99010) aj, ip(JPI + 1),
     &                   NC, NCIn, ic, icp, Far(icp,ic), Fai(icp,ic)
99010                FORMAT (
     &             ' C MATRIX LARGER THAN 1 FOR AJ IPI NC NCIN IC ICP ='
     &             ,F5.1,A1,4I3,2X,2D12.4)
                     Tx(ivq + 1) = Tx(ivq + 1) + 4.D0*a1*rz*bz
                     fj = 0.5D0*DFLOAT(Mc(icp,3))
                     IF (.NOT.(Lo(155))) THEN
C PRINT OUT OF THE AMPLITUDES                                           SCAM-140
                        a1 = DSQRT(a1)
                        b1 = 0.D0
                        IF (a1.NE.0.D0)
     &                      b1 = DATAN2(Fai(icp,ic),Far(icp,ic))
                        WRITE (MW,99075) icp, ic, ivq, Mc(icp,2), fj,
     &                         Far(icp,ic), Fai(icp,ic), a1, b1
                     ENDIF
                  ENDIF
               ENDIF
            ENDDO
            IF (Lo(224)) THEN
               IF (V(3,jc).LT.0.D0) V(3,jc) = 0.D0
               IF (ic.LE.NCIn) R1(2) = DMAX1(R1(2),V(3,jc))
            ENDIF
         ENDIF
      ENDDO
      IF (.NOT.(Lo(163) .AND. Lo(155))) THEN
C OUTPUT OF TRANSMISSION COEFFICIENTS FOR COUPLED CHANNELS              SCAM-155
         IF (Lo(55)) WRITE (MW,99015) aj, ip(JPI + 1)
99015    FORMAT (/
     &        ' TRANSMISSION COEFFICIENTS FOR CHANNEL SPIN AND PARITY ='
     &        ,F7.1,A1/4(' LEVEL   L     J',16X))
         ic = 1 + (jc - 1)/4
         IF (Lo(63)) WRITE (99,99020) aj, ip(JPI + 1), jc
99020    FORMAT (1X,F4.1,1X,A1,1X,I4)
         DO i = 1, ic
            j1 = 4*(i - 1)
            j2 = MIN0(jc - j1,4)
            DO j = 1, j2
               n = IDINT(V(1,j + j1) + .01D0)
               vcx(j,1) = 0.5D0*DFLOAT(MOD(n,1024))
               vcx(j,2) = V(3,j + j1)
               mcx(j,2) = MOD(n/1024,1024)
               mcx(j,1) = (n/1024)/1024
            ENDDO
            IF (Lo(63)) WRITE (99,99025)
     &                         (mcx(j,1),mcx(j,2),vcx(j,1),vcx(j,2),
     &                         j = 1,j2)
99025       FORMAT (I3,I4,F6.1,2X,1P,D14.7,0P)
            IF (Lo(55)) WRITE (MW,99030)
     &                         (mcx(j,1),mcx(j,2),vcx(j,1),vcx(j,2),
     &                         j = 1,j2)
99030       FORMAT (4(1X,I2,I4,F6.1,2X,1P,D14.7,0P,3X))
         ENDDO
      ENDIF
      IF (.NOT.(Lo(232))) THEN
         nss = ns
         IF (nz.NE.0) nss = Nct(5)*Nct(3)
C FISSION COEFFICIENT                                                   SCAM-176
         tg(1) = 0.D0
         fnu(1) = .5D0
         IF (.NOT.(Lo(186))) THEN
            kn = 2*IPJ + JPI - 1
            IF (kn.LT.NFIss) THEN
               tg(1) = Fiss(1,kn)
               fnu(1) = .5D0*Fiss(2,kn)
            ENDIF
         ENDIF
         lg(1) = Lo(185) .OR. tg(1).EQ.0.
C GAMMA COEFFICIENT                                                     SCAM-185
         tg(2) = 0.D0
         fnu(2) = .5D0*FNUg
         IF (.NOT.(Lo(186))) THEN
            IF (NRD.NE.0) THEN
               IF (IPJ.LE.NRD) tg(2) = Gam(IPJ)
            ELSE
               a1 = 0.D0
               n1 = NAJ - 2
               n1 = IABS(n1)
               n2 = NAJ + 2
               DO j = n1, n2, 2
                  a2 = -DFLOAT((j + 1)*(j + 1))/(4.D0*SGSq)
                  a1 = a1 + DEXP(a2)*DFLOAT(j + 1)/SGSq
               ENDDO
               tg(2) = 6.283185307D0*TG1*a1
            ENDIF
         ENDIF
         lg(2) = Lo(186) .OR. tg(2).EQ.0.
         nc1 = jc
         njc = jc
         IF (Ncoll.NE.NCOlx) THEN
C TRANSMISSION COEFFICIENTS FOR UNCOUPLED STATES                        SCAM-204
            nsp1 = NCOlx - Ncoll - NCOnt
            IF (nsp1.GE.1) THEN
               DO i = 1, nsp1
                  ii = i + Ncoll
                  IF (Wv(3,ii).GE.0.D0) THEN
                     nm = Ipi(3,ii)
                     mn = Ipi(2,ii)
                     DO j = 1, nm
                        nn = NAJ - nm - 1 + 2*j
                        IF (nn.GE.IABS(nm - 1 - NAJ)) THEN
                           DO k = 1, mn
                              mm = nn + mn + 1 - 2*k
                              IF (mm.GE.IABS(mn - 1 - nn) .AND.
     &                            mm.LT.2*Ipi(10,ii) + 2) THEN
                                 l = mm/2
                                 IF (MOD(l + JPI + Ipi(1,ii),2).EQ.0)
     &                               THEN
                                    m = mn*l + k + Ipi(8,ii)
                                    jc = jc + 1
                                    V(1,jc)
     &                                 = DFLOAT(1024*(1024*ii + l) + nn)
                                    V(2,jc) = 1.D0
                                    V(3,jc) = Tl(m)
                                    DO n = 4, Iq
                                       V(n,jc) = 0.D0
                                    ENDDO
                                 ENDIF
                              ENDIF
                           ENDDO
                        ENDIF
                     ENDDO
                     IF (ii.LE.Ncols) nc1 = jc
                  ENDIF
               ENDDO
            ENDIF
            IF (NCOnt.NE.0) THEN
C TRANSMISSION COEFFICIENTS FOR CONTINUA                                SCAM-232
               DO i = 1, NCOnt
                  ij = Ncj(1,i)
                  ji = Ncj(2,i)
                  IF (ij.LE.ji) THEN
                     mn = Ipim(2,ij)
                     it = MOD(Ipim(3,ij) + 1,2)
                     DO ii = ij, ji
                        l = Ipim(10,ii) + 1
                        IF (l.NE.0) THEN
                           m = Ipim(8,ii)
                           ii1 = ii + Ncoll + nsp1
                           DO lj = 1, l
                              DO jl = 1, mn
                                 m = m + 1
                                 IF (Tl(m).NE.0.D0) THEN
                                    jj = 2*(lj + jl) - mn - 3
                                    IF (jj.GE.0) THEN
                                       ikm = IABS(jj - NAJ)/2 + 1
                                       ikp = MIN0((jj + NAJ)/2 + 1,NCOj)
                                       IF (ikm.LE.ikp) THEN
                                         ai = 0.D0
                                         DO kk = ikm, ikp
                                         ar = .5D0*DFLOAT(it + 2*kk - 1)
                                         ai = ai +
     &                                      ar*DEXP( - ar*ar/Xd(3,ii))
     &                                      /Xd(3,ii)
                                         ENDDO
                                         jc = jc + 1
                                         V(1,jc)
     &                                      = DFLOAT(1024*(1024*ii1 +
     &                                      (lj-1)) + jj)
                                         V(2,jc) = ai*Xd(1,ii)
                                         V(3,jc) = Tl(m)
                                         DO n = 4, Iq
                                         V(n,jc) = 0.D0
                                         ENDDO
                                       ENDIF
                                    ENDIF
                                 ENDIF
                              ENDDO
                           ENDDO
                        ENDIF
                     ENDDO
                  ENDIF
               ENDDO
            ENDIF
         ENDIF
C COMPOUND NUCLEUS                                                      SCAM-267
         sgf(1) = 0.D0
         sgf(2) = 0.D0
         IF (Lo(82)) THEN
C STORAGE FOR SIMPLIFIED COMPOUND NUCLEUS                               SCAM-402
            bir = BZ3*BZ3*(2.D0*aj + 1.D0)
     &            *DEXP( - aj*(aj + 1.D0)/(2.D0*BZ2*BZ2))
            DO ic = 1, njc
               bir = bir + 4.D0*V(3,ic)
            ENDDO
            IF (Lo(55)) WRITE (MW,99035) bir
99035       FORMAT (15X,'H.-F.',D20.6)
            DO ic = 1, NCIn
               nt = ns + IK(1,2*Mc(ic,2),Mc(ic,3))*Nct(nz + 1)
               DO icp = 1, njc
                  tq = V(3,ic)*V(3,icp)/bir
                  IF (iv.EQ.1) tq = tq*BZ1*BZ1
                  V(ic + 4,icp) = V(ic + 4,icp) + 4.D0*tq
               ENDDO
            ENDDO
         ELSE
            IF (.NOT.(Lo(83))) THEN
C COMPUTATION OF SATCHLER P-MATRIX ("PR","PI")                          SCAM-272
               i = 0
               DO ii = 1, NC
                  IF (Wv(3,Mc(ii,1)).GE.0.D0) THEN
                     i = i + 1
                     j = 0
                     DO jj = 1, NC
                        IF (Wv(3,Mc(jj,1)).GE.0.D0) THEN
                           j = j + 1
                           P(i,j,1) = 2.D0*(Fai(i,j) + Fai(j,i))
                           P(i,j,2) = 0.D0
                           P(i,j,3) = 0.D0
                           P(i,j,4) = 0.D0
                           k = 0
                           DO kk = 1, NC
                              IF (Wv(3,Mc(kk,1)).GE.0.D0) THEN
                                 k = k + 1
                                 P(i,j,1) = P(i,j,1)
     &                              - 4.D0*(Far(i,k)*Far(j,k) + Fai(i,k)
     &                              *Fai(j,k))
                              ENDIF
                              P(i,j,2) = P(i,j,2)
     &                           + 4.D0*(Far(i,k)*Fai(j,k) - Fai(i,k)
     &                           *Far(j,k))
                           ENDDO
                        ENDIF
                     ENDDO
                  ENDIF
                  P(i,i,3) = 1.D0
               ENDDO
               CALL DIAG(NC,njc,P,P(1,1,2),P(1,1,3),P(1,1,4),1.D-12,a1,
     &                   ierr)
               IF (ierr.NE.0) THEN
                  WRITE (MW,99040)
99040             FORMAT (
     &             ' ERROR IN EIGENSYSTEM.  E-W CORRECTION DISCONTINUED'
     &             )
                  Lo(83) = .TRUE.
                  Lo(183) = .FALSE.
               ENDIF
            ENDIF
            bir = 1.D-12 + tg(1) + tg(2)
            DO ic = 1, jc
               IF (Lo(183) .AND. ic.LE.njc) V(3,ic)
     &             = DMAX1(0.D0,P(ic,ic,1))
               bir = bir + V(3,ic)*V(2,ic)
            ENDDO
C FLUCTUATION PARAMETER NU=2*FNU, (P.A.M.,N.P.A344(1980)185)            SCAM-302
C COMMON FACTOR "TP" OF WIDTH FLUCT. INTEGRAL (P.A.M.,PRC 11(1975)426)  SCAM-303
            IF (.NOT.(Lo(87) .OR. (bir.LT.0.0001D0))) THEN
               DO m = 1, 20
                  tp(m) = 1.D0
               ENDDO
               efb = DEXP( - BZ5*bir)
               DO ic = 1, jc
                  IF (BZ2.NE.0.D0) THEN
                     V(4,ic) = 0.5D0*BZ2
                  ELSE
                     V(4,ic) = (1.D0 + BZ4 + (V(3,ic)**BZ3 - BZ4)*efb)
     &                         /2.D0
                  ENDIF
                  a1 = V(3,ic)/V(4,ic)/bir
                  IF (a1.NE.0.D0) THEN
                     IF (a1.GT.1.D-9) THEN
                        DO m = 1, 20
                           tp(m) = tp(m)
     &                             *((bir + x(m)*V(3,ic)/V(4,ic))/bir)
     &                             **(V(4,ic)*V(2,ic))
                        ENDDO
                     ELSE
                        DO m = 1, 20
                           tp(m) = tp(m)
     &                             *DEXP(x(m)*V(3,ic)*V(2,ic)/bir*(1.D0
     &                             - .5D0*x(m)*a1))
                        ENDDO
                     ENDIF
                  ENDIF
               ENDDO
               DO i = 1, 2
                  IF (.NOT.(lg(i))) THEN
                     DO m = 1, 20
                        tp(m) = tp(m)*(1.D0 + x(m)*tg(i)/(bir*fnu(i)))
     &                          **fnu(i)
                     ENDDO
                  ENDIF
               ENDDO
            ENDIF
C STORAGE OF COMPOUND TERMS                                             SCAM-327
            tq = 0.D0
            IF (.NOT.(Lo(155))) THEN
               WRITE (MW,99045) aj, ip(JPI + 1)
99045          FORMAT (//' CHANNEL SPIN AND PARITY =',F7.1,
     &                 A1//'  IC  ICP N    L    J',9X,'TL',9X,'HF',11X,
     &                 'NU',9X,'G')
               IF (Lo(183)) WRITE (MW,99050)
99050          FORMAT (' TL  IN TRANSFORMED CHANNEL SPACE')
            ENDIF
            ncx = njc
            IF (Lo(83)) ncx = NCIn
            DO ic = 1, ncx
               g = 1.D0
               bri = bir
               IF (Lo(87) .AND. (ic.LE.NCIn)) bri = bri + V(3,ic)*BZ3
               ar = 1.D0
               IF (.NOT.(Lo(83))) THEN
                  ar = 0.D0
                  DO ia = 1, NCIn
                     ar = ar + (P(ia,ic,3)**2 + P(ia,ic,4)**2)
                  ENDDO
               ENDIF
               DO icp = 1, jc
                  iv = IDINT(V(1,icp)/1048576.D0)
                  IF (.NOT.(Lo(87) .OR. (bir.LT.0.0001D0))) THEN
                     g = 0.D0
                     DO m = 1, 20
                        g = g + w(m)
     &                      /(tp(m)*(1.D0 + x(m)*V(3,ic)/(V(4,ic)*bri))
     &                      *(1.D0 + x(m)*V(3,icp)/(V(4,icp)*bri)))
                     ENDDO
                     IF (icp.EQ.ic) g = g + g/V(4,ic)
                  ENDIF
                  tq = V(3,ic)*V(3,icp)*g/bri
                  IF (Lo(87) .AND. (icp.EQ.ic)) tq = tq + tq*BZ3
                  IF ((icp.GT.nc1) .OR. Lo(83)) THEN
                     V(5,icp) = V(5,icp) + ar*tq
C INVERSE E-W TRANSFORMATION (P.A.M.,PRC 12(1975)744)                   SCAM-354
                  ELSEIF (icp.GT.njc) THEN
                     DO ia = 1, NCIn
                        V(ia + 4,icp) = V(ia + 4,icp)
     &                                  + (P(ia,ic,3)**2 + P(ia,ic,4)
     &                                  **2)*tq
                     ENDDO
                  ELSE
                     DO ia = 1, NCIn
                        DO ib = 1, njc
                           a1 = P(ia,ic,3)*P(ib,icp,3) - P(ia,ic,4)
     &                          *P(ib,icp,4)
                           b1 = P(ia,ic,3)*P(ib,icp,4) + P(ia,ic,4)
     &                          *P(ib,icp,3)
                           a2 = a1
                           b2 = b1
                           IF (icp.NE.ic) THEN
                              a2 = a1 + P(ia,icp,3)*P(ib,ic,3)
     &                             - P(ia,icp,4)*P(ib,ic,4)
                              b2 = b1 + P(ia,icp,3)*P(ib,ic,4)
     &                             + P(ia,icp,4)*P(ib,ic,3)
                           ENDIF
                           V(ia + 4,ib) = V(ia + 4,ib) + (a1*a2 + b1*b2)
     &                        *tq
                        ENDDO
                     ENDDO
                  ENDIF
                  IF (.NOT.((ic.GT.NCIn) .OR. Lo(155))) THEN
                     gnu = 2.D0*V(4,icp)
                     ll = IDINT(V(1,icp)) - 1048576*iv
                     l = ll/1000
                     fj = 0.5D0*DFLOAT(ll - 1024*l)
                     WRITE (MW,99055) ic, icp, iv, l, fj, V(3,icp), tq,
     &                                gnu, g
99055                FORMAT (1X,I3,I4,I3,I5,F7.1,F12.6,D14.6,2F10.6)
                  ENDIF
               ENDDO
               IF (.NOT.(Lo(83) .AND. ic.GT.NCIn)) THEN
                  DO i = 1, 2
                     IF (.NOT.(lg(i))) THEN
                        IF (.NOT.(Lo(87))) THEN
                           g = 0.D0
                           DO m = 1, 20
                              g = g + w(m)
     &                            /(tp(m)*(1.D0 + x(m)*V(3,ic)/(V(4,ic)
     &                            *bri))
     &                            *(1.D0 + x(m)*tg(i)/(bri*fnu(i))))
                           ENDDO
                        ENDIF
                        a1 = V(3,ic)*tg(i)*g/bri
                        sgf(i) = sgf(i) + a1*ar
                        fn = 2.D0*fnu(i)
                        IF (Lo(55) .AND. (ic.LE.NCIn)) WRITE (MW,99060)
     &                      al(i), tg(i), sgf(i), fn, g
99060                   FORMAT (15X,A8,F12.6,D14.6,F10.4,F10.6)
                     ENDIF
                  ENDDO
               ENDIF
            ENDDO
            IF (Lo(55)) WRITE (MW,99065) bir
99065       FORMAT (20X,'SUM',F12.6)
            DO i = 1, 2
               IF (.NOT.(lg(i))) THEN
                  IF (Lo(233)) Fcn(IPJ,NDQ + i) = Fcn(IPJ,NDQ + i)
     &                + .25D0*sgf(i)
                  Tx(NDP + i) = Tx(NDP + i) + rz*sgf(i)
               ENDIF
            ENDDO
         ENDIF
      ENDIF
      IF (Lo(55) .AND. Lo(231)) WRITE (MW,99070) aj, ip(JPI + 1), NC,
     &                                 NCIn
C STORAGE OF THE AMPLITUDES                                             SCAM-415
      ni = NCI - NCIn
      DO i1 = 1, NCI
         nt = ns + IK(1,2*Md(i1,2),Md(i1,3))*Nct(nz + 1)
         IF (Lo(231)) THEN
            j1 = 1
            k1 = NCIn
         ELSE
            j1 = i1
            k1 = j1
         ENDIF
         ivs = 0
         DO i2 = 1, NIC
            iv = Md(i2,1)
            IF ((iv.NE.ivs) .AND. (iv.NE.1)) nt = nt +
     &          (Ipi(2,ivs)*Ipi(3,ivs) + nsy)/2
            nsy = MOD(Ipi(1,iv) + JPI + IPJ + (Ipi(2,iv) + Ipi(3,iv))
     &            /2 + 1,2)
            ivs = iv
            id = nt + IK(iv,2*Md(i2,2),Md(i2,3)) + 1
            IF (Lo(231) .AND. (i2.LE.NCI)) THEN
               j2 = 1
               k2 = NCIn
            ELSE
               j2 = i2 - ni
               k2 = j2
            ENDIF
            ar = 0.D0
            ai = 0.D0
            DO l1 = j1, k1
               a1 = bz
               IF (Lo(231)) a1 = a1*Aa(i1,l1)
               IF (a1.NE.0.D0) THEN
                  DO l2 = j2, k2
                     a2 = 1.D0
                     IF (Lo(231) .AND. (l2.LE.NCIn)) a2 = Aa(i2,l2)
                     IF (a2.NE.0.D0) THEN
                        ar = ar + Far(l2,l1)*a1*a2
                        ai = ai + Fai(l2,l1)*a1*a2
                     ENDIF
                  ENDDO
               ENDIF
            ENDDO
            F(1,IPJ,id) = ar
            F(2,IPJ,id) = ai
            IF (.NOT.(Lo(155) .OR. .NOT.Lo(231))) THEN
               a1 = DSQRT(ar*ar + ai*ai)
               a2 = 0.D0
               IF (a1.NE.0.D0) a2 = DATAN2(ai,ar)
               fj = 0.5D0*DFLOAT(Md(i2,3))
               WRITE (MW,99075) i2, i1, iv, Md(i2,2), fj, ar, ai, a1, a2
            ENDIF
         ENDDO
      ENDDO
      IF (Lo(232)) RETURN
C COMPOUND NUCLEUS                                                      SCAM-463
      jcx = jc + ni
      iiv = Ipi(2,1) - 1
      iii = Ipi(3,1) - 1
      DO ic = 1, NCI
         la = 2*Md(ic,2)
         ja = Md(ic,3)
         nt = nss + IK(iv,la,ja)*Nct(nz + 5)
         ivs = 0
         CALL COCN(la,la,ja,ja,iii,iiv,NAJ,IPJ,Q,Q(IPJ + 1),Idt - 2*IPJ)
         IF (Lo(231)) THEN
            j1 = 1
            k1 = NCIn
         ELSE
            j1 = ic
            k1 = j1
         ENDIF
         DO icp = 1, jcx
            IF (Lo(231) .AND. (icp.LE.NCI)) THEN
               j2 = 1
               k2 = NCIn
            ELSE
               j2 = icp - ni
               k2 = j2
            ENDIF
            ar = 0.D0
            DO l1 = j1, k1
               a1 = bz
               IF (Lo(231)) a1 = a1*Aa(i1,l1)
               IF (a1.EQ.0.D0) GOTO 20
               DO l2 = j2, k2
                  a2 = 1.D0
                  IF (Lo(231) .AND. (l2.GT.NCIn)) a2 = Aa(i2,l2)
                  IF (a2.NE.0.D0) ar = ar + V(l1 + 4,l2)*a1*a2
               ENDDO
            ENDDO
            IF (ar.EQ.0.D0) GOTO 100
            iv = IDINT(V(1,icp)/1048576.D0)
            IF ((iv.NE.ivs) .AND. (iv.NE.1)) nt = nt +
     &          (Ipi(2,ivs)*Ipi(3,ivs) + nsy)/2
            nsy = MOD(Ipi(1,iv) + JPI + IPJ + (Ipi(2,iv) + Ipi(3,iv))
     &            /2 + 1,2)
            ivs = iv
            Tx(Ncoll + iv + 1) = Tx(Ncoll + iv + 1) + ar*V(2,icp)*rz
            IF (icp.LE.nc1) THEN
               lb = IDINT(V(1,icp)/512.D0) - 2048*iv
               jb = IDINT(V(1,icp)) - 1048576*iv - 512*lb
               IF (Lo(233)) THEN
                  id = nt + IK(iv,lb,jb) + 1
                  Fcn(IPJ,id) = Fcn(IPJ,id) + .25D0*ar
               ENDIF
               CALL COCN(lb,lb,jb,jb,Ipi(3,iv) - 1,Ipi(2,iv) - 1,NAJ,
     &                   IPJ,Q(IPJ + 1),Q(2*IPJ + 1),Idt - 3*IPJ)
               IF ((iv.EQ.1) .AND. (iii.NE.0) .AND. (icp.NE.ic))
     &             CALL COCN(la,lb,ja,jb,Ipi(3,iv) - 1,Ipi(2,iv) - 1,
     &                       NAJ,IPJ,Q(2*IPJ + 1),Q(3*IPJ + 1),
     &                       Idt - 4*IPJ)
               DO ll = 1, IPJ
                  ai = Q(ll)*Q(ll + IPJ)
                  IF ((iv.EQ.1) .AND. (iii.NE.0) .AND. (icp.NE.ic))
     &                ai = ai + Q(ll + 2*IPJ)**2
                  Gcn(ll,iv) = Gcn(ll,iv) + .25D0*ai*ar*Xz
               ENDDO
               GOTO 50
            ENDIF
   20       IF (Lo(233)) THEN
               j = iv + Kba - Ncols
               Fcn(IPJ,j) = Fcn(IPJ,j) + 0.25D0*ar*V(2,icp)
            ENDIF
   50    ENDDO
  100    jcx = nc1 + ni
      ENDDO
      RETURN
99070 FORMAT (//' CHANNEL SPIN AND PARITY =',F7.1,A1,I11,
     &        ' COUPLED CHANNELS AND',I3,
     &        ' SOLUTIONS'//'  IC  ICP N    L    J',19X,'C MATRIX',20X,
     &        '|C|',6X,'PHASE')
99075 FORMAT (1X,I3,I4,I3,I5,F7.1,4X,1P,2D15.7,' I',4X,0P,2F11.8)
      END
C 01/01/04                                                      ECIS03  DIAG-000
      SUBROUTINE DIAG(N,Nc,Zr,Zi,Xr,Xi,Eps,Ax,Ier)
C DIAGONALISATION OF A HERMITIAN COMPLEX MATRIX BY AN EXTENSION OF THE  DIAG-002
C JACOBI'S METHOD                                                       DIAG-003
C INPUT: ZR,ZI:  REAL AND IMAGINARY PARTS OF THE MATRIX                 DIAG-004
C        XR,XI:  REAL AND IMAGINARY PARTS OF THE UNIT MATRIX            DIAG-005
C        N:      FIRST DIMENSION OF ZR,ZI,XR AND XI                     DIAG-006
C        NC:     DIMENSION OF THE MATRIX                                DIAG-007
C        EPS:    VALUE BELOW WHICH MATRIX ELEMENTS ARE SET TO 0.        DIAG-008
C OUTPUT:ZR,ZI:  THE EIGENVALUES ARE ON THE DIAGONAL OF ZR              DIAG-009
C                ALL THE OTHER ELEMENTS ARE 0. IF PROCESS SUCCEEDED     DIAG-010
C        XR,XI:  EIGENVECTORS                                           DIAG-011
C        AX:     SQUARE OF THE NORM OF THE LARGEST NON DIAGONAL ELEMENT DIAG-012
C        IER:    RETURNS 0 OR -1 AFTER 4*NC**2 ROTATIONS                DIAG-013
C***********************************************************************DIAG-014
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C Dummy arguments
C
      REAL*8 Ax, Eps
      INTEGER Ier, N, Nc
      REAL*8 Xi(N,1), Xr(N,1), Zi(N,1), Zr(N,1)
C
C Local variables
C
      REAL*8 ai, ar, ay, bi, br, tc, ts, u, uc, ucc, ucs, us, usc, uss,
     &       v
      DOUBLE PRECISION DABS, DATAN2, DCOS, DSIN, DSQRT
      INTEGER i, j, l, m, nt
C
C
      Ier = 0
      nt = 0
  100 nt = nt + 1
      IF (nt.GT.4*Nc*Nc) THEN
         Ier = -1
      ELSE
         Ax = 0.D0
         l = 1
         m = 2
C SYMMETRISATION AND SEARCH FOR THE LARGEST NON DIAGONAL ELEMENT        DIAG-024
         DO i = 1, Nc
            DO j = i, Nc
               IF (Zr(j,i).EQ.0.D0) Zr(i,j) = 0.D0
               IF (Zi(j,i).EQ.0.D0) Zi(i,j) = 0.D0
               IF (Zr(i,j).EQ.0.D0) Zr(j,i) = 0.D0
               IF (Zi(i,j).EQ.0.D0) Zi(j,i) = 0.D0
               ar = (Zr(i,j) + Zr(j,i))/2.D0
               ai = (Zi(i,j) - Zi(j,i))/2.D0
               Zr(j,i) = ar
               Zr(i,j) = ar
               Zi(i,j) = ai
               Zi(j,i) = -ai
               IF (i.NE.j) THEN
                  ay = Zr(i,j)**2 + Zi(i,j)**2
                  IF (Ax.LE.ay) THEN
                     Ax = ay
                     l = i
                     m = j
                  ENDIF
               ENDIF
            ENDDO
         ENDDO
         IF (Ax.EQ.0.D0) RETURN
C ELEMENTARY TRANSFORMATION                                             DIAG-046
         u = DATAN2( - Zi(l,m),Zr(l,m))/2.D0
         v = DATAN2(2.D0*DSQRT(Zr(l,m)**2 + Zi(l,m)**2),Zr(m,m)
     &       - Zr(l,l))/2.D0
         uc = DCOS(u)
         us = DSIN(u)
         tc = DCOS(v)
         ts = -DSIN(v)
         ucc = uc*tc
         ucs = uc*ts
         usc = us*tc
         uss = us*ts
C TRANSFORMATION OF ROWS                                                DIAG-057
         DO i = 1, Nc
            ar = Xr(i,l)*ucc + Xi(i,l)*usc + Xr(i,m)*ucs - Xi(i,m)*uss
            br = -Xr(i,l)*ucs - Xi(i,l)*uss + Xr(i,m)*ucc - Xi(i,m)*usc
            ai = Xi(i,l)*ucc - Xr(i,l)*usc + Xi(i,m)*ucs + Xr(i,m)*uss
            bi = -Xi(i,l)*ucs + Xr(i,l)*uss + Xi(i,m)*ucc + Xr(i,m)*usc
            Xr(i,l) = ar
            Xr(i,m) = br
            Xi(i,l) = ai
            Xi(i,m) = bi
            ar = Zr(i,l)*ucc + Zi(i,l)*usc + Zr(i,m)*ucs - Zi(i,m)*uss
            br = -Zr(i,l)*ucs - Zi(i,l)*uss + Zr(i,m)*ucc - Zi(i,m)*usc
            ai = Zi(i,l)*ucc - Zr(i,l)*usc + Zi(i,m)*ucs + Zr(i,m)*uss
            bi = -Zi(i,l)*ucs + Zr(i,l)*uss + Zi(i,m)*ucc + Zr(i,m)*usc
            Zr(i,l) = ar
            Zr(i,m) = br
            Zi(i,l) = ai
            Zi(i,m) = bi
         ENDDO
C TRANSFORMATION OF COLUMNS                                             DIAG-075
         DO i = 1, Nc
            ar = Zr(l,i)*ucc - Zi(l,i)*usc + Zr(m,i)*ucs + Zi(m,i)*uss
            br = -Zr(l,i)*ucs + Zi(l,i)*uss + Zr(m,i)*ucc + Zi(m,i)*usc
            ai = Zi(l,i)*ucc + Zr(l,i)*usc + Zi(m,i)*ucs - Zr(m,i)*uss
            bi = -Zi(l,i)*ucs - Zr(l,i)*uss + Zi(m,i)*ucc - Zr(m,i)*usc
            IF (DABS(ar).LT.Eps) ar = 0.D0
            IF (DABS(br).LT.Eps) br = 0.D0
            IF (DABS(ai).LT.Eps) ai = 0.D0
            IF (DABS(bi).LT.Eps) bi = 0.D0
            Zr(l,i) = ar
            Zr(m,i) = br
            Zi(l,i) = ai
            Zi(m,i) = bi
         ENDDO
         GOTO 100
      ENDIF
      END
C 01/01/04                                                      ECIS03  SCHE-000
      SUBROUTINE SCHE(F,Jmax,Kmax,Ipi,Mt1,Mt2,Mf,Tx,Bm,Mc,Fa,Xg,Lmax1,
     &                Wv,Kab,Kba,Kcb,Jmin,Ipj,Ipk,Fn,Ncoll,Ncols,Nct,
     &                Fgn,Am,Jit,Jti,Nlt,Id1,Xz,Lo)
C SCATTERING COEFFICIENTS IN THE HELICITY REPRESENTATION                SCHE-004
C INPUT VARIABLES: F:     S-MATRIX                                      SCHE-005
C                  JMAX:  MAXIMUM NUMBER OF CHANNEL SPINS, DIM. FOR F   SCHE-006
C                  KMAX:  MAXIMUM NUMBER OF COMP. NUCL, DIM. FOR FN     SCHE-007
C                  IPI(1,IV):   PARITY OF CHANNEL                       SCHE-008
C                  IPI(2/3,IV): MULTIPLICITIES OF PARTICLE AND TARGET   SCHE-009
C                  IPI(4,IV):   PRODUCT OF CHARGES                      SCHE-010
C                  IPI(6/7,IV): FIRST/LAST CHANNEL NUMBER. SEE DEPH     SCHE-011
C                  IPI(11,IV):  MAXIMUM ANGULAR MOMENTUM                SCHE-012
C                  MT1,MT2: MAXIMUM 2*SPIN+1 FOR PART. AND TARGET       SCHE-013
C                  MF:    HELICITY NUMBERS. SEE DEPH                    SCHE-014
C                  TX:    TOTAL REACTION CROSS SECTION IN MB            SCHE-015
C                         FOLLOWED BY THE TOTAL CROSS SECTION FOR EACH  SCHE-016
C                         LEVEL, THE COMPOUND NUCLEUS CROSS SECTIONS,   SCHE-017
C                         THE FISSION AND THE GAMMA CROSS SECTIONS      SCHE-018
C                  XG:    COULOMB PHASE-SHIFTS                          SCHE-019
C                  LMAX1: DIMENSION FOR XG                              SCHE-020
C                  WV:    WAVE NUMBER AND COULOMB PARAMETER.  SEE COLF  SCHE-021
C                  KAB:   DIMENSION FOR FA                              SCHE-022
C                  KBA:   NUMBER OF INDEPENDENT AMPLITUDES              SCHE-023
C                  KCB:   DIMENSION FOR MC                              SCHE-024
C                  JMIN:  TWICE MINIMUM CHANNEL SPIN                    SCHE-025
C                  IPJ:   NUMBER OF THE CHANNEL SPIN                    SCHE-026
C                  IPK:   NUMBER OF L VALUES FOR COMPOUND NUCLEUS       SCHE-027
C                  FN:    COMPOUND NUCLEUS CONTRIBUTION                 SCHE-028
C                  NCOLL: NUMBER OF COUPLED LEVELS                      SCHE-029
C                  NCOLS: NUMBER OF LEVELS WITH ANGULAR DISTRIBUTION    SCHE-030
C                  NCT:   NUMBER OF EQU. AND SOLUTIONS FOR EACH PARITY  SCHE-031
C                  FGN:   COEFF. OF LEGENDRE POLYNOMIALS FOR COMP. NUC. SCHE-032
C                  JIT:   NUMBER OF DIFFERENT RATES OF INTERPOLATION    SCHE-033
C                  JTI:   LIMITS AND STEPS OF INTERPOLATION             SCHE-034
C                  NLT:   MEMORIES NEEDED FOR LEGENDRE POLYNOMIALS      SCHE-035
C                  ID1:   LENGTH AVAILABLE FOR BM AS DOUBLE PRECISION   SCHE-036
C                  XZ:    CONVERSION FACTOR TO MILLIBARNS               SCHE-037
C                  LO:    LOGICAL CONTROLS. IF LO(220)=.TRUE., COMPUTE  SCHE-038
C                            ONLY THE SQUARE ROOTS AND LEGENDRE COEFFI. SCHE-039
C IN COMMON /NCJL/ NCJ:   NUMBER OF FACTORS 1/(-X*COS(THETA))           SCHE-040
C IN COMMON /NCOMP/NSP:   NUMBER OF UNCOUPLED STATES                    SCHE-041
C OUTPUT VARIABLES:F:     HELICITY SCATTERING COEFFICIENTS              SCHE-042
C                  TX,FGN:WITH ADDITION OF INTERPOLATED VALUES          SCHE-043
C WORKING FIELD:   AM(MT1,MT2,KAB) FOR PRODUCTS OF C.G. COEFFICIENTS    SCHE-044
C                  FA:    FOR STORAGE OF S-MATRIX FOR A GIVEN TOTAL SPINSCHE-045
C                  MC:    NUCLEAR STATE NUMBERS AND ANGULAR MOMENTA     SCHE-046
C                  BM:    FOR FACTORS 1/(-X*COS(THETA)), 3J COEFF., ETC SCHE-047
C***********************************************************************SCHE-048
      IMPLICIT REAL*8(A - H,O - z)
C
C
C COMMON variables
C
      REAL*8 ACN(20)
      INTEGER MR, MS, MW, NCJ, NL(3), NRD(9), NSP(3)
      COMMON /INOUT / MR, MW, MS
      COMMON /NCJL  / NCJ, NL
      COMMON /NCOMP / NSP, NRD, ACN
C
C Dummy arguments
C
      INTEGER Id1, Ipj, Ipk, Jit, Jmax, Jmin, Kab, Kba, Kcb, Kmax,
     &        Lmax1, Mt1, Mt2, Ncoll, Ncols, Nlt
      REAL*8 Xz
      REAL*8 Am(Mt1,Mt2,2), Bm(9), F(2,Jmax,Ipj), Fa(2,Kab,2),
     &       Fgn(Kmax,1), Fn(Kmax,Ipk), Tx(1), Wv(18,1), Xg(Lmax1,1)
      INTEGER Ipi(11,Ncols), Jti(2,Jit), Mc(Kcb,2,4), Mf(10,1), Nct(6)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 a1, a2, a3, a4, aaj, b1, b2, b3, b4, bj, c1, c2, c3, d1,
     &       d2, d3, f1, f2, f3, f4, fi, pi, rz, sz, u1, xb1, ym, z
      DOUBLE PRECISION DABS, DATAN2, DCOS, DEXP, DLOG, DMOD, DSIN, DSQRT
      INTEGER i, i1, i2, i3, i4, i6, ia, iaj, ib, ic, icp, icx, id, ij,
     &        ija, ik, ipd, ipz, iv, ivl, j, j1, j2, ji, ji1, ji2, ji3,
     &        ji4, jij, jpi, jpj, jt1, k, k1, k2, k3, k4, l, l1, lc,
     &        lci, lcp, ll, m1, m2, m3, m4, mf1, mf2, mf3, mf4, mi, mj,
     &        n1, n2, n3, n4, nc, nc1, nc2, ncin, ni, nj, nj1, nm, npj,
     &        npt, nsa, nt, nxy
      INTEGER IABS, MAX0, MIN0
      CHARACTER*1 ip(2), ipp
C
C
      DATA ip, pi, k2, k3, k4/'+', '-', 3.1415926535D0, 3*0/
      IF (.NOT.(Lo(220))) THEN
         IF (Lo(219)) RETURN
C TABLES OF QUANTUM NUMBERS                                             SCHE-061
         ipd = 1
         IF (Lo(223)) ipd = 2
         ipz = 2*ipd
         ija = Jmin - ipz
         iaj = ija
         DO jpi = 1, 2
            nc = 0
            DO i = 1, Ncols
               nj1 = ija - Ipi(3,i) + 1
               nj = Ipi(3,i)
               DO j = 1, nj
                  l1 = nj1 - Ipi(2,i) + 1
                  nm = Ipi(2,i)
                  DO k = 1, nm
                     IF (MOD(l1 + 2*Ipi(1,i) + 2*(jpi+ipd),4).NE.0) THEN
                        nc = nc + 1
                        Mc(nc,jpi,1) = i
                        Mc(nc,jpi,2) = l1
                        Mc(nc,jpi,3) = nj1
                     ENDIF
                     l1 = l1 + 2
                  ENDDO
                  nj1 = nj1 + 2
               ENDDO
            ENDDO
         ENDDO
         nxy = 0
         IF (Lo(81) .AND. Lo(182)) nxy = NSP(3) + 2
         IF (.NOT.(Lo(143))) THEN
C INTERPOLATION FOR THE S-MATRIX                                        SCHE-088
            rz = 4.D0*pi*Xz*ipd
            i1 = 0
            i4 = 0
C LOOP ON PARITIES                                                      SCHE-092
            DO j = 1, 2
               i2 = i1 + Nct(j)
               i3 = Nct(j + 2)
               i1 = i1 + 1
               IF (i1.LE.i2) THEN
C LOOP ON SOLUTIONS                                                     SCHE-098
                  DO k = 1, i3
                     ji4 = (3 + MAX0(Ipi(3,1) - 1 - iaj - Mc(k,j,3),
     &                     Ipi(2,1) - 1 - Mc(k,j,2) - Mc(k,j,3),
     &                     - 2*Mc(k,j,2), - 2*Mc(k,j,3)))/4 - ipd + 1
                     i6 = 0
C LOOP ON S MATRIX ELEMENTS                                             SCHE-103
                     DO i = i1, i2
                        i4 = i4 + 1
                        i6 = i6 + 1
                        iv = Mc(i6,j,1)
                        ji3 = (3 + MAX0(Ipi(3,iv) - 1 - iaj - Mc(i6,j,3)
     &                        ,Ipi(2,iv) - 1 - Mc(i6,j,2) - Mc(i6,j,3),
     &                        - 2*Mc(i6,j,2), - 2*Mc(i6,j,3)))/4 - ipd +
     &                        1
                        ji1 = MAX0(ji3,ji4)
                        jt1 = MIN0(Ipj,Ipi(10,1) - Mc(k,j,2)/2,
     &                        Ipi(10,iv) - Mc(i,j,2)/2)
                        n1 = 0
                        n3 = 1
    2                   IF (n3.GE.ji1) THEN
                           n1 = n1 + 1
                           k1 = k2
                           k2 = k3
                           k3 = k4
                           k4 = n3
                           IF (n1.GT.3) THEN
                              ji2 = k3 - ipd
                              IF (n3.EQ.jt1) ji2 = k4 - ipd
                              IF (ji1.LE.ji2) THEN
                                 m1 = (k1 - k2)*(k1 - k3)*(k1 - k4)
                                 m2 = (k2 - k1)*(k2 - k3)*(k2 - k4)
                                 m3 = (k3 - k1)*(k3 - k2)*(k3 - k4)
                                 m4 = (k4 - k1)*(k4 - k2)*(k4 - k3)
                                 n2 = 1
                                 DO n4 = ji1, ji2, ipd
                                    IF (n4.NE.k1 .AND. n4.NE.k2 .AND.
     &                                  n4.NE.k3 .AND. n4.NE.k4) THEN
                                       sz = rz*(2*n4 + Jmin - 1)
                                       IF (n2.EQ.1) THEN
                                         n2 = 3
                                         a2 = F(1,k1,i4)**2 + F(2,k1,i4)
     &                                      **2
                                         b2 = F(1,k2,i4)**2 + F(2,k2,i4)
     &                                      **2
                                         c2 = F(1,k3,i4)**2 + F(2,k3,i4)
     &                                      **2
                                         d2 = F(1,k4,i4)**2 + F(2,k4,i4)
     &                                      **2
                                         IF (a2*b2*c2*d2.NE.0.D0) THEN
                                         a1 = DATAN2(F(2,k1,i4),
     &                                      F(1,k1,i4))
                                         b1 = DATAN2(F(2,k2,i4),
     &                                      F(1,k2,i4))
                                         c1 = DATAN2(F(2,k3,i4),
     &                                      F(1,k3,i4))
                                         d1 = DATAN2(F(2,k4,i4),
     &                                      F(1,k4,i4))
                                         IF ((a1 - b1)*(b1 - c1)
     &                                      .GE.0.D0 .AND. (b1 - c1)
     &                                      *(c1 - d1).GE.0.D0) THEN
                                         n2 = 2
                                         a2 = DLOG(a2)
                                         b2 = DLOG(b2)
                                         c2 = DLOG(c2)
                                         d2 = DLOG(d2)
                                         ENDIF
                                         ENDIF
                                       ENDIF
                                       a3 = DFLOAT((n4 - k2)*(n4 - k3)
     &                                    *(n4 - k4))/DFLOAT(m1)
                                       b3 = DFLOAT((n4 - k1)*(n4 - k3)
     &                                    *(n4 - k4))/DFLOAT(m2)
                                       c3 = DFLOAT((n4 - k1)*(n4 - k2)
     &                                    *(n4 - k4))/DFLOAT(m3)
                                       d3 = DFLOAT((n4 - k1)*(n4 - k2)
     &                                    *(n4 - k3))/DFLOAT(m4)
                                       IF (n2.EQ.3) THEN
                                         F(1,n4,i4) = F(1,k1,i4)
     &                                      *a3 + F(1,k2,i4)
     &                                      *b3 + F(1,k3,i4)
     &                                      *c3 + F(1,k4,i4)*d3
                                         F(2,n4,i4) = F(2,k1,i4)
     &                                      *a3 + F(2,k2,i4)
     &                                      *b3 + F(2,k3,i4)
     &                                      *c3 + F(2,k4,i4)*d3
                                       ELSE
                                         a4 = a1*a3 + b1*b3 + c1*c3 +
     &                                      d1*d3
                                         b4 = DEXP
     &                                      (0.5D0*(a2*a3 + b2*b3 +
     &                                      c2*c3 + d2*d3))
                                         F(1,n4,i4) = b4*DCOS(a4)
                                         F(2,n4,i4) = b4*DSIN(a4)
                                       ENDIF
                                       Tx(iv + 1) = Tx(iv + 1)
     &                                    + (F(1,n4,i4)**2 + F(2,n4,i4)
     &                                    **2)*sz
                                       IF (i6.EQ.k) Tx(1) = Tx(1)
     &                                    + F(2,n4,i4)*sz
                                    ENDIF
                                 ENDDO
                              ENDIF
                              GOTO 8
                           ENDIF
                        ENDIF
    4                   DO l = 1, Jit
                           IF (n3.LE.Jti(1,l)) GOTO 6
                           n3 = n3 + Jti(2,l)*ipd
                        ENDDO
                        l = Jit
    6                   n3 = n3 + ipd
                        IF (n3.LE.jt1) GOTO 2
                        IF (n3.LE.Jti(1,l) + Jti(2,l)*ipd + ipd)
     &                      GOTO 100
    8                   ji1 = ji2 + ipz
                        IF (ji1.LT.jt1) GOTO 4
                     ENDDO
                  ENDDO
               ENDIF
               i1 = i2
            ENDDO
            IF (.NOT.(Lo(181) .OR. (.NOT.Lo(233)))) THEN
C INTERPOLATION FOR THE COMPOUND NUCLEUS                                SCHE-178
               i1 = 0
               i4 = 0
               DO j = 1, 3
                  IF (j.LE.2) THEN
                     i2 = i1 + Nct(j + 4)
                     i3 = Nct(j + 2)
                     i1 = i1 + 1
                  ELSE
                     IF (nxy.EQ.0) GOTO 25
                     i2 = i1
                     i3 = nxy
                  ENDIF
                  IF (i1.LE.i2) THEN
                     i6 = 0
C LOOP ON SOLUTIONS                                                     SCHE-192
                     DO k = 1, i3
                        IF (j.NE.3)
     &                      ji4 = (3 + MAX0(Ipi(3,1) - 1 - iaj - Mc(k,j,
     &                      3),Ipi(2,1) - 1 - Mc(k,j,2) - Mc(k,j,3),
     &                      - 2*Mc(k,j,2), - 2*Mc(k,j,3)))/4 - ipd + 1
                        i6 = 0
C LOOP ON S MATRIX ELEMENTS                                             SCHE-198
                        DO i = i1, i2
                           i4 = i4 + 1
                           i6 = i6 + 1
                           ji1 = 1
                           IF (j.EQ.3) THEN
                              ivl = k + Ncoll + Ncols + 1
                           ELSE
                              iv = Mc(i6,j,1)
                              ivl = iv + Ncoll + 1
                              ji3 = (3 + MAX0(Ipi(3,iv) - 1 - iaj - Mc(
     &                              i6,j,3),Ipi(2,iv) - 1 - Mc(i6,j,2)
     &                              - Mc(i6,j,3), - 2*Mc(i6,j,2),
     &                              - 2*Mc(i6,j,3)))/4 - ipd + 1
                              ji1 = MAX0(ji3,ji4)
                           ENDIF
                           nt = 0
                           jpj = 0
                           DO l = ji1, Ipk
                              IF (DABS(Fn(l,i4)).GE.1.D-15) THEN
                                 nt = nt + 1
                                 jpj = l
                              ENDIF
                           ENDDO
                           nt = MIN0(nt,4) - 1
                           IF (nt.LT.1) GOTO 20
                           n1 = 0
                           n3 = 1
   10                      IF (n3.GE.ji1) THEN
                              n1 = n1 + 1
                              k1 = k2
                              k2 = k3
                              k3 = k4
                              k4 = n3
                              IF (n1.GT.nt) GOTO 16
                           ENDIF
   12                      DO l = 1, Jit
                              IF (n3.LE.Jti(1,l)) GOTO 14
                              n3 = n3 + Jti(2,l)*ipd
                           ENDDO
                           l = Jit
   14                      n3 = n3 + ipd
                           IF (n3.LE.jpj) GOTO 10
                           IF (n3.GT.Jti(1,l) + Jti(2,l)*ipd + ipd)
     &                         GOTO 18
   16                      ji2 = k3 - ipd
                           IF (n3.EQ.jpj) ji2 = k4 - ipd
                           IF (ji1.LE.ji2) THEN
                              DO n4 = ji1, ji2, ipd
                                 IF (n4.NE.k1 .AND. n4.NE.k2 .AND.
     &                               n4.NE.k3 .AND. n4.NE.k4) THEN
                                    sz = rz*(2*n4 + Jmin - 1)
                                    IF (nt.GE.3) THEN
                                       a3 = DFLOAT((n4 - k2)*(n4 - k3)
     &                                    *(n4 - k4))
     &                                    /DFLOAT((k1 - k2)*(k1 - k3)
     &                                    *(k1 - k4))
                                       b3 = DFLOAT((n4 - k1)*(n4 - k3)
     &                                    *(n4 - k4))
     &                                    /DFLOAT((k2 - k1)*(k2 - k3)
     &                                    *(k2 - k4))
                                       c3 = DFLOAT((n4 - k1)*(n4 - k2)
     &                                    *(n4 - k4))
     &                                    /DFLOAT((k3 - k1)*(k3 - k2)
     &                                    *(k3 - k4))
                                       d3 = DFLOAT((n4 - k1)*(n4 - k2)
     &                                    *(n4 - k3))
     &                                    /DFLOAT((k4 - k1)*(k4 - k2)
     &                                    *(k4 - k3))
                                       Fn(n4,i4)
     &                                    = DABS(Fn(k1,i4)*a3 + Fn(k2,
     &                                    i4)*b3 + Fn(k3,i4)
     &                                    *c3 + Fn(k4,i4)*d3)
                                    ELSEIF (nt.EQ.1) THEN
                                       c3 = DFLOAT(n4 - k4)
     &                                    /DFLOAT(k3 - k4)
                                       d3 = DFLOAT(n4 - k3)
     &                                    /DFLOAT(k4 - k3)
                                       Fn(n4,i4)
     &                                    = ABS(Fn(k3,i4)*c3 + Fn(k4,i4)
     &                                    *d3)
                                    ELSE
                                       b3 = DFLOAT((n4 - k3)*(n4 - k4))
     &                                    /DFLOAT((k2 - k3)*(k2 - k4))
                                       c3 = DFLOAT((n4 - k2)*(n4 - k4))
     &                                    /DFLOAT((k3 - k2)*(k3 - k4))
                                       d3 = DFLOAT((n4 - k2)*(n4 - k3))
     &                                    /DFLOAT((k4 - k2)*(k4 - k3))
                                       Fn(n4,i4)
     &                                    = DABS(Fn(k2,i4)*b3 + Fn(k3,
     &                                    i4)*c3 + Fn(k4,i4)*d3)
                                    ENDIF
                                    Tx(ivl) = Tx(ivl) + Fn(n4,i4)*sz
                                    IF ((j.NE.3) .AND.
     &                                  (Fn(n4,i4).NE.0.D0)) THEN
                                       CALL COCN(Mc(k,j,2) + ipz*n4,
     &                                    Mc(k,j,2) + ipz*n4,Mc(k,j,3)
     &                                    + ipz*n4,Mc(k,j,3) + ipz*n4,
     &                                    Ipi(3,1) - 1,Ipi(2,1) - 1,
     &                                    ija + ipz*n4,n4,Bm,Bm(n4 + 1),
     &                                    Id1 - n4)
                                       CALL COCN(Mc(i6,j,2) + ipz*n4,
     &                                    Mc(i6,j,2) + ipz*n4,Mc(i6,j,3)
     &                                    + ipz*n4,Mc(i6,j,3) + ipz*n4,
     &                                    Ipi(3,iv) - 1,Ipi(2,iv) - 1,
     &                                    ija + ipz*n4,n4,Bm(n4 + 1),
     &                                    Bm(2*n4 + 1),Id1 - 2*n4)
                                       IF ((iv.EQ.1) .AND.
     &                                    (Ipi(3,1).GT.1) .AND.
     &                                    (k.NE.i6))
     &                                    CALL COCN(Mc(k,j,2) + ipz*n4,
     &                                    Mc(i6,j,2) + ipz*n4,Mc(k,j,3)
     &                                    + ipz*n4,Mc(i6,j,3) + ipz*n4,
     &                                    Ipi(3,iv) - 1,Ipi(2,iv) - 1,
     &                                    ija + ipz*n4,n4,Bm(2*n4 + 1),
     &                                    Bm(3*n4 + 1),Id1 - 3*n4)
                                       DO ll = 1, n4
                                         z = Bm(ll)*Bm(ll + n4)
                                         IF ((iv.EQ.1) .AND.
     &                                      (Ipi(3,1).GT.1) .AND.
     &                                      (k.NE.i6)) z = Bm(ll + 2*n4)
     &                                      **2 + z
                                         Fgn(ll,iv) = Fgn(ll,iv)
     &                                      + z*Fn(n4,i4)*Xz
                                       ENDDO
                                    ENDIF
                                 ENDIF
                              ENDDO
                           ENDIF
   18                      ji1 = ji2 + ipz
                           IF (ji1.LT.jpj) GOTO 12
   20                   ENDDO
                     ENDDO
                  ENDIF
   25             i1 = i2
               ENDDO
            ENDIF
         ENDIF
         ik = 1
         npt = 0
         DO ij = 1, Ipj, ipd
C TRANSFER OF S MATRIX FOR A GIVEN ANGULAR MOMENTUM                     SCHE-284
            i1 = 0
            i4 = 0
            DO j = 1, 2
               i2 = i1 + Nct(j + 2)
               i1 = i1 + 1
               IF (i1.LE.i2) THEN
                  i3 = Nct(j)
                  DO i = i1, i2
                     DO k = 1, i3
                        i4 = i4 + 1
                        Fa(1,k,i) = F(1,ij,i4)
                        Fa(2,k,i) = F(2,ij,i4)
                     ENDDO
                  ENDDO
               ENDIF
               i1 = i2
            ENDDO
            DO i = 1, Kba
               F(1,ij,i) = 0.D0
               F(2,ij,i) = 0.D0
            ENDDO
            j1 = 0
            iaj = iaj + ipz
            aaj = iaj + 1
            DO ji = 1, 2
               j2 = j1 + Nct(ji + 2)
               j1 = j1 + 1
               IF (j1.LE.j2) THEN
                  nc1 = 0
                  nc2 = 0
                  nc = Nct(ji)
C  GEOMETRIC COEFFICIENT FOR THE TRANSFORMATION TO HELICITY COEFFICIENTSSCHE-312
                  DO ic = 1, nc
                     Mc(ic,ji,2) = Mc(ic,ji,2) + ipz
                     Mc(ic,ji,3) = Mc(ic,ji,3) + ipz
                     iv = Mc(ic,ji,1)
                     ni = Ipi(2,iv)
                     mi = Ipi(3,iv)
                     Mc(ic,1,4) = MIN0(Mc(ic,ji,3) - IABS(iaj + 1 - mi),
     &                            Mc(ic,ji,2)
     &                            - IABS(Mc(ic,ji,3) + 1 - ni))
                     IF (Mc(ic,ji,2).GT.2*Ipi(10,iv)) Mc(ic,1,4) = -1
                     IF (Mc(ic,1,4).GE.0) THEN
                        IF (iv.EQ.1) nc1 = nc1 + 1
                        nc2 = nc2 + 1
                        a1 = 0.D0
                        ym = Mc(ic,ji,3) - ni + 1
                        xb1 = 0.5D0*DFLOAT
     &                        (ni**2 + (Mc(ic,ji,3) - Mc(ic,ji,2))
     &                        *(Mc(ic,ji,2) + Mc(ic,ji,3) + 2) - 1)
                        c3 = 0.D0
C COUPLING FOR PARTICLE HELICITY                                        SCHE-330
                        DO i1 = 1, ni
                           Bm(i1) = 0.D0
                           IF (IABS(2*i1 - ni - 1).LE.Mc(ic,ji,3)) THEN
                              n3 = (Mc(ic,ji,3) + 2*i1 - ni - 1)
     &                             *(Mc(ic,ji,3) - 2*i1 + ni + 3)
     &                             *(i1 - 1)
                              IF (n3.EQ.0) Bm(i1) = 2*MOD(i1,2) - 1
                              IF (n3.GT.0) THEN
                                 c2 = c3
                                 c3 = DSQRT(DFLOAT((ni-i1+1)*(i1-1))
     &                                *(ym + DFLOAT(2*i1-2))
     &                                *(ym + DFLOAT(2*ni-2*i1+2)))
                                 Bm(i1)
     &                              = (xb1 - DFLOAT(2*i1 - ni - 3)**2)
     &                              *Bm(i1 - 1)/c3
                                 IF (i1.GE.3) Bm(i1) = Bm(i1)
     &                               - c2*Bm(i1 - 2)/c3
                              ENDIF
                           ENDIF
                           a1 = a1 + Bm(i1)**2
                        ENDDO
                        DO i1 = 1, ni
                           a2 = 0.D0
                           IF (DABS(Bm(i1)).GE.1.D-10) THEN
                              ia = 2*i1 - ni - 1
                              xb1 = 0.5D0*DFLOAT
     &                              (mi**2 + (iaj - Mc(ic,ji,3))
     &                              *(iaj + Mc(ic,ji,3) + 2) - 1)
                              c3 = 0.D0
C COUPLING FOR TARGET HELICITY                                          SCHE-349
                              DO i2 = 1, mi
                                 Bm(ni + i2) = 0.D0
                                 IF (IABS(2*i2 - mi - 1 - ia).LE.iaj)
     &                               THEN
                                    n3 = (iaj + ia - 2*i2 + mi + 3)
     &                                 *(iaj - ia + 2*i2 - mi - 1)
     &                                 *(i2 - 1)
                                    IF (n3.EQ.0) Bm(ni + i2)
     &                                  = DFLOAT(2*MOD(i2,2) - 1)
                                    IF (n3.GT.0) THEN
                                       c2 = c3
                                       ib = 2*i2 - mi - 3
                                       c3 = DSQRT
     &                                    (DFLOAT((mi-i2+1)*(i2-1))
     &                                    *(aaj**2 -
     &                                    DFLOAT(2*i1-2*i2+mi-ni+1)**2))
                                       Bm(ni + i2)
     &                                    = ((xb1 - DFLOAT(ib*(ib-ia)))
     &                                    *Bm(ni + i2 - 1)
     &                                    - c2*Bm(ni + i2 - 2))/c3
                                    ENDIF
                                 ENDIF
                                 a2 = a2 + Bm(ni + i2)**2
                              ENDDO
                              IF (a2*a1.NE.0.D0)
     &                            a2 = DFLOAT(MOD(1 + Mc(ic,ji,3)
     &                            - iaj + mi,4) - 1)*DSQRT(aaj/(a1*a2))
                           ENDIF
                           DO i2 = 1, mi
                              Am(i1,i2,ic) = Bm(i1)*Bm(ni + i2)*a2
                           ENDDO
                        ENDDO
                     ENDIF
                  ENDDO
                  IF (nc1.NE.0) THEN
                     ncin = Nct(ji + 2)
C TRANSFORMATION                                                        SCHE-370
                     IF (ik.EQ.ij) THEN
                        IF (.NOT.(Lo(156) .AND. Lo(160))) THEN
                           bj = .5D0*DFLOAT(iaj)
                           jij = 1 + MOD(ij + ji,2)
                           nc1 = nc1*nc2
                           IF (Lo(56)) WRITE (MW,99005) bj, ip(jij)
99005                      FORMAT (//' CHANNEL SPIN AND PARITY =',F7.1,
     &                             A1//'  IC ICP N    L    J',18X,
     &                             'S MATRIX',20X,'|S|',7X,
     &                             'PHASE /WITH COUL.')
                           npt = npt + 1
                           IF (Lo(60)) WRITE (99,99045) bj, ip(jij),
     &                         nc2, nc1
                        ENDIF
                     ENDIF
                     nc1 = 0
                     DO ic = 1, ncin
                        IF (Mc(ic,1,4).GE.0) THEN
                           icx = ic
                           nc1 = nc1 + 1
                           IF (ji.EQ.2) icx = icx + Nct(3)
                           lci = Mc(ic,ji,2)/2 + 1
                           nc2 = 0
                           DO icp = 1, nc
                              IF (Mc(icp,1,4).GE.0) THEN
                                 lcp = Mc(icp,ji,2)/2 + 1
                                 iv = Mc(icp,ji,1)
                                 nc2 = nc2 + 1
                                 c1 = Xg(lci,1) + Xg(lcp,iv)
                                 IF (ik.EQ.ij) THEN
                                    IF (.NOT.(Lo(156) .AND. Lo(160)))
     &                                  THEN
                                       b1 = -2.D0*Fa(2,icp,icx)
                                       IF (ic.EQ.icp) b1 = b1 + 1.D0
                                       b2 = 2.D0*Fa(1,icp,icx)
                                       b3 = DSQRT(b1**2 + b2**2)
                                       d1 = 0.D0
                                       IF (b3.NE.0.D0)
     &                                    d1 = DATAN2(b2,b1)
                                       d2 = DMOD(d1 + c1 + pi,2.D0*pi)
     &                                    - pi
                                       lc = lcp - 1
                                       bj = 0.5D0*DFLOAT(Mc(icp,ji,3))
                                       IF (Lo(56)) WRITE (MW,99010) nc1,
     &                                    nc2, iv, lc, bj, b1, b2, b3,
     &                                    d1, d2
99010                                  FORMAT (1X,3I3,I5,F7.1,4X,1P,
     &                                    2D15.7,' I',4X,0P,3F11.8)
                                       IF (Lo(60)) WRITE (99,99050) nc1,
     &                                    nc2, iv, lc, bj, b1, b2, b3
                                    ENDIF
                                 ENDIF
C MULTIPLICATION BY THE COULOMB PHASE                                   SCHE-406
                                 a1 = DCOS(c1)
                                 a2 = DSIN(c1)
                                 c2 = Fa(1,icp,icx)*a1 - Fa(2,icp,icx)
     &                                *a2
                                 c3 = Fa(1,icp,icx)*a2 + Fa(2,icp,icx)
     &                                *a1
                                 i1 = Ipi(6,iv)
                                 i2 = Ipi(7,iv)
C  HELICITY SCATTERING COEFFICIENTS                                     SCHE-413
                                 DO id = i1, i2
                                    mf1 = Mf(1,id)
                                    mf2 = Mf(2,id)
                                    mf3 = Mf(3,id)
                                    mf4 = Mf(4,id)
                                    c1 = Am(mf1,mf2,icp)*Am(mf3,mf4,ic)
                                    F(1,ij,id) = F(1,ij,id) + c2*c1
                                    F(2,ij,id) = F(2,ij,id) + c3*c1
                                 ENDDO
                              ENDIF
                           ENDDO
                        ENDIF
                     ENDDO
                  ENDIF
               ENDIF
            ENDDO
            IF (.NOT.(Lo(143) .OR. ik.NE.ij)) THEN
               DO l = 1, Jit
                  IF (ik.LE.Jti(1,l)) GOTO 40
                  ik = ik + Jti(2,l)*ipd
               ENDDO
            ENDIF
   40       ik = ik + ipd
         ENDDO
         IF (.NOT.(Lo(160))) THEN
            WRITE (60,99015) Wv(1,1), Wv(12,1), Wv(2,1), Ipi(4,1), npt
99015       FORMAT ('<S-MATRIX>',F10.2,F10.5,F10.2,2I5)
            REWIND 99
            DO i = 1, npt
               READ (99,99045) u1, ipp, k1, k2
               WRITE (60,99045) u1, ipp, k1, k2
               DO k = 1, k2
                  READ (99,99050) k1, k2, k3, k4, bj, b1, b2, b3
                  WRITE (60,99020) k1, k2, k3, k4, bj, b1, b2, b3
99020             FORMAT (1X,3(I2,1X),I3,1X,F5.1,1X,2(D15.7,1X),'I',4X,
     &                    F11.8)
               ENDDO
            ENDDO
            CLOSE (99,STATUS = 'DELETE')
         ENDIF
      ENDIF
      IF (.NOT.(Lo(165))) THEN
         nsa = 7*(Nlt + 2*Ipj + 1) + 1
         IF (nsa.GT.Id1) CALL MEMO('SCHE',Id1,nsa,2)
         CALL LCSP(F,Fgn,Jmax,Kmax,Ipi,Ncoll,Ncols,Mf,Wv,Jmin,Ipj,Ipj,
     &             Xz,Bm,Bm(nsa),Id1 - nsa,Lo)
      ENDIF
      IF (Lo(220) .OR. Lo(141)) RETURN
C ELIMINATION OF FACTORS 1/(1-X*COS(THETA))                             SCHE-448
      NCJ = MIN0(NCJ,Ipj - 1)
      IF (NCJ.EQ.0) RETURN
      DO nj = 1, NCJ
         Ipj = Ipj - 1
C LOOP ON THE INDEPENDENT AMPLITUDES                                    SCHE-453
         DO k = 1, Kba
            IF (Mf(6,k).NE.99999) THEN
               m1 = Mf(5,k)
               m2 = Mf(6,k)
               m3 = ((IABS(m1+m2) + IABS(m1-m2))/2 - Jmin)/2 + 1
            ENDIF
            b3 = 0.25D0*DFLOAT(m1*m2)
            IF (m3.GT.Ipj) GOTO 200
            d1 = 0.D0
            d2 = 0.D0
            mj = 2*m3 + Jmin - 2
            c3 = 0.5D0*DFLOAT(mj)
            f1 = DFLOAT((mj + m2)/2 + 1 - m3)
            f2 = DFLOAT((mj - m2)/2 + 1 - m3)
            f3 = DFLOAT((mj + m1)/2 + 1 - m3)
            f4 = DFLOAT((mj - m1)/2 + 1 - m3)
            c1 = 0.D0
            b1 = 0.D0
            a1 = 0.D0
            b4 = 0.D0
C CALC. OF X WHICH MINIMISES THE DIFFERENCES WITH A WEIGHT (J+1)**2     SCHE-473
C FOR THE 5 LAST ONE                                                    SCHE-474
            npj = Ipj - 5
            DO i = m3, Ipj
               fi = i
               a2 = a1
               b2 = b1
               a1 = F(1,i,k)
               b1 = F(2,i,k)
               c3 = c3 + 1.D0
               c2 = c1
               c1 = DSQRT((f1 + fi)*(f2 + fi)*(f3 + fi)*(f4 + fi))
     &              /(c3*(2.D0*c3 + 1.D0))
               IF (b3.NE.0.D0) b4 = b3/(c3*c3 - c3)
               Bm(2*i - 1) = a1*b4 + a2*c2 + F(1,i + 1,k)*c1
               Bm(2*i) = b1*b4 + b2*c2 + F(2,i + 1,k)*c1
               IF (i.GT.npj) THEN
                  d1 = d1 + c3*c3*(F(1,i,k)*Bm(2*i - 1) + F(2,i,k)
     &                 *Bm(2*i))
                  d2 = d2 + c3*c3*(Bm(2*i - 1)**2 + Bm(2*i)**2)
               ENDIF
               c1 = c1*(c3 + c3 + 1.D0)/(c3 + c3 - 1.D0)
            ENDDO
            a3 = .9999999D0
            IF (Lo(18)) THEN
               a4 = a3*DFLOAT(2*MOD(nj,2) - 1)
            ELSE
               IF (d2.NE.0.D0) a3 = d1/d2
               a4 = a3
C X IS FIXED BETWEEN +1 AND -1                                          SCHE-496
               IF (a4.GT..9999999D0) a4 = .9999999D0
C CALCULATION OF THE NEW SCATTERING COEFFICIENTS                        SCHE-499
               IF (a4.LT. - .9999999D0) a4 = -.9999999D0
            ENDIF
            DO i = m3, Ipj
               F(1,i,k) = F(1,i,k) - a4*Bm(2*i - 1)
               F(2,i,k) = F(2,i,k) - a4*Bm(2*i)
            ENDDO
            IF (.NOT.Lo(216)) WRITE (MW,99025) k, a4, a3, F(1,Ipj,k),
     &                               F(2,Ipj,k), F(1,Ipj + 1,k),
     &                               F(2,Ipj + 1,k)
99025       FORMAT (' AMPLITUDE =',I3,D15.7,' (',D15.7,')  NEW',2D15.7,
     &              3X,'OLD',2D15.7)
            F(1,Ipj + 1,k) = a4
         ENDDO
      ENDDO
      RETURN
  100 WRITE (MW,99030) n1
99030 FORMAT (5X,I2,' AMPLITUDES INSUFFICIENT TO INTERPOLATE')
      GOTO 300
  200 WRITE (MW,99035) nj
99035 FORMAT (' AMPLITUDES INSUFFICIENT TO FACTORISE (1-COS)',I2,
     &        ' TIMES')
  300 WRITE (MW,99040)
99040 FORMAT (' IN SCHE  .... STOP ....')
      STOP
99045 FORMAT (1X,F4.1,1X,A1,1X,I4,1X,I4)
99050 FORMAT (1X,3(I2,1X),I3,1X,F5.1,1X,2(D15.7,1X),5X,F11.8)
      END
C 01/01/04                                                      ECIS03  COCN-000
      SUBROUTINE COCN(La,Lb,Ja,Jb,Iw,Iv,Ij,Ip,Rb,Rc,Nt)
C COMPUTATION OF COEFFICIENT FOR ANGULAR DISTRIBUTION OF COMPOUND      COCN-002
C NUCLEUS CROSS-SECTIONS.                                               COCN-003
C INPUT VARIABLES:  LA,LB,JA,JB,IW,IV,IJ: INTEGER DOUBLE VALUES         COCN-004
C                   IP:   NUMBER OF COEFFICIENTS REQUESTED              COCN-005
C                   NT:   SIZE OF THE WORKING SPACE RC                  COCN-006
C OUTPUT VARIABLE:  RB:   IN RB(I), VALUE OF                            COCN-007
C                ( LL  LA  LB )  ( JA  JB  LL )  ( LA  LB  LL )         COCN-008
C                (            )  )            (  )            (         COCN-009
C                (  0   0   0 )  ( IJ  IJ  IW )  ( JB  JA  IV )         COCN-010
C        * (2 IJ + 1) * SQRT ((2 LA + 1)(2 LB + 1)(2 JA + 1)(2 JB + 1)) COCN-011
C                         FOR EVEN VALUES OF LL, FROM LL=0 WITH POSITIVECOCN-012
C                         OR NULL VALUE FOR LL=0                        COCN-013
C WORKING SPACE:    RC:   FOR ALL THE NON-ZERO 6-J COEFFICIENTS WITH    COCN-014
C                         EVEN AND ODD VALUES OF LL, STARTING WITH THE  COCN-015
C                         LARGEST VALUE OF LL IN RC(2)                  COCN-016
C***********************************************************************COCN-017
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER Ij, Ip, Iv, Iw, Ja, Jb, La, Lb, Nt
      REAL*8 Rb(1), Rc(1)
C
C Local variables
C
      REAL*8 ad, al, ap, at, ti
      DOUBLE PRECISION DSQRT
      INTEGER i, j(5), jf, ji, jt, k, ld, lk, ll, lm, lp
      INTEGER IABS, MAX0, MIN0
C
C
      ld = IABS(La - Lb)
      lp = (La + Lb)/4 + 1
      lm = ld/4 + 1
      ad = DFLOAT(ld**2)
      ap = DFLOAT(La + Lb + 2)**2
      jt = MAX0(Ip,lp)
      IF (jt.LE.Nt) THEN
         ti = 0.D0
C RECURRENCE COMPUTATION OF 3-J COEFFICIENTS FOR EVEN VALUES OF LL      COCN-029
         DO i = 1, jt
            al = DFLOAT(4*i - 4)
            Rc(i) = 0.D0
            IF (i.GE.lm .AND. i.LE.lp) THEN
               IF (i.GT.lm) THEN
                  Rc(i) = -Rc(i - 1)
     &                    *DSQRT(((al-2.D0)**2 - ad)*(ap - (al-2.D0)**2)
     &                    /((al**2-ad)*(ap-al**2)))
               ELSE
                  Rc(i) = 1.D0
               ENDIF
            ENDIF
            ti = ti + Rc(i)**2*(al + 1.D0)
         ENDDO
         ti = DSQRT(ti)
         DO i = 1, Ip
            Rb(i) = Rc(i)
         ENDDO
C QUANTUM NUMBERS OF THE FIRST 6-J COEFFICIENT                          COCN-043
         j(1) = La
         j(2) = Ja
         j(3) = Iv
         j(4) = Jb
         j(5) = Lb
         DO k = 1, 2
            ji = MAX0(IABS(j(1) - j(5)),IABS(j(2) - j(4)))
            jf = MIN0(j(1) + j(5),j(2) + j(4))
            jt = (jf - ji)/2 + 2
            IF (jt.GT.Nt) GOTO 100
            at = DFLOAT(jf + 1)
            CALL DX6J(Rc,at,j,jt)
            ti = ti*DSQRT(at*DFLOAT(j(3) + 1))
            DO i = 1, Ip
               ll = 4*i - 4
               lk = 1
               IF (ll.GE.ji .AND. ll.LE.jf) lk = 2 + (jf - ll)/2
               Rb(i) = Rc(lk)*Rb(i)
            ENDDO
C QUANTUM NUMBERS OF THE SECOND 6-J COEFFICIENT                         COCN-063
            j(1) = Ij
            j(3) = Iw
            j(5) = Ij
         ENDDO
C NORMALISATION                                                         COCN-067
         ti = DSQRT(DFLOAT(La + 1)*DFLOAT(Lb + 1)*DFLOAT(Ja + 1)
     &        *DFLOAT(Jb + 1))*DFLOAT(Ij + 1)/ti
         IF (Rb(1).LT.0.D0) ti = -ti
         DO i = 1, Ip
            Rb(i) = Rb(i)*ti
         ENDDO
         RETURN
      ENDIF
  100 WRITE (MW,99005) Nt, jt
99005 FORMAT (' WORKING SPACE TOO SMALL IN COCN:',I5,' AVAILABLE',I6,
     &        ' REQUESTED'/' ... STOP ...')
      STOP
      END
C 01/01/04                                                      ECIS03  LCSP-000
      SUBROUTINE LCSP(F,Fcn,Jmax,Kmax,Ipi,Ncoll,Ncols,Mf,Wv,Jmin,Ipj,
     &                Ipk,Xz,A,Ax,Id,Lo)
C COEFFICIENTS OF LEGENDRE POLYNOMIALS FOR CROSS-SECTIONS               LCSP-003
C SCATTERING COEFFICIENTS IN THE HELICITY REPRESENTATION                LCSP-004
C INPUT VARIABLES: F:     S-MATRIX                                      LCSP-005
C                  FCN:   TRANSMISSION COEFFICIENTS                     LCSP-006
C                  JMAX:  MAXIMUM NUMBER OF CHANNEL SPINS, DIM. FOR F   LCSP-007
C                  KMAX:  MAXIMUM NUMBER L FOR COMP. NUC., DIM. FOR FCN LCSP-008
C                  IPI(2/3,IV): MULTIPLICITIES OF TARGET AND PARTICLE   LCSP-009
C                  IPI(6/7,IV): FIRST/LAST CHANNEL NUMBER. SEE DEPH     LCSP-010
C                  NCOLL: NUMBER OF COUPLED LEVELS                      LCSP-011
C                  NCOLS: NUMBER OF LEVELS WITH ANGULAR DISTRIBUTION    LCSP-012
C                  MF:    HELICITY NUMBERS. SEE DEPH                    LCSP-013
C                  WV:    WAVE NUMBER AND COULOMB PARAMETER.  SEE COLF  LCSP-014
C                  JMIN:  TWICE MINIMUM CHANNEL SPIN                    LCSP-015
C                  IPJ:   NUMBER OF CHANNEL SPIN                        LCSP-016
C                  IPK:   NUMBER OF CHANNEL SPIN FOR COMPOUND NUCLEUS   LCSP-017
C                  XZ:    10/((2*SPIN(1)+1)*(2*AI(1)+1))/K**2           LCSP-018
C                  ID:    DIMENSION OF WORKING FIELD AX SINGLE PRECISIONLCSP-019
C                  LO(18) =.TRUE.  IDENTICAL PARTICLE AND TARGET        LCSP-020
C                  LO(81) =.TRUE.  COMPOUND NUCLEUS                     LCSP-021
C IN COMMON /NCJL/ NL:    INDICATIONS FOR EXPANSION OF CROSS-SECTIONS   LCSP-022
C                         IN LEGENDRE POLYNOMIALS                       LCSP-023
C WORKING FIELD:   A(7,*) AMPLITUDE MULTIPLIED BY A LEGENDRE POLYNOMIAL LCSP-024
C                         ALTERNATIVELY IN A(1-2,*) AND A(3-4,*)        LCSP-025
C                         COEFFICIENTS OF RECURRENCE IN A(5-7,*)        LCSP-026
C                  AX:    1 TO JML  LEGENDRE COEFFICIENTS OF CROSS-SECT.LCSP-027
C                         JML+1 TO JMT    FOR COMPOUND NUCLEUS          LCSP-028
C                         JMT+1 TO JMX    PRODUCT SPIN ROTATION MATRICESLCSP-029
C***********************************************************************LCSP-030
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW, NCJ, NL(3)
      COMMON /INOUT / MR, MW, MS
      COMMON /NCJL  / NCJ, NL
C
C Dummy arguments
C
      INTEGER Id, Ipj, Ipk, Jmax, Jmin, Kmax, Ncoll, Ncols
      REAL*8 Xz
      REAL*8 A(7,1), Ax(1), F(2,Jmax,1), Fcn(Kmax,1), Wv(18,1)
      INTEGER Ipi(11,*), Mf(10,1)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 a1, a2, a3, at(2), b1, b2, b3, c1, c2, c3, x1, x2, x3, x4,
     &       xj, xs, xs3, xs4
      DOUBLE PRECISION DABS, DSQRT
      INTEGER i, i1, i2, ij, ijx, ik, j, jk, jk1, jk2, jm, jm1, jml,
     &        jmt, jmx, jmy, jp, k, l, ll, lm, m, m1, m2, m3, mj, ms1,
     &        ms2, msp, ndl(2), ns, ns1, ns2, nsm, nsp, nsq, nst, nst1,
     &        nx
      INTEGER IABS, MAX0, MIN0
      LOGICAL ls
C
C
C DETERMINATION OF THE NUMBER OF LEGENDRE POLYNOMIALS                   LCSP-037
      ndl(1) = NL(2)
      ndl(2) = NL(3)
      IF (ndl(1).EQ.0) ndl(1) = (6*Ipj - 3 + 3*Jmin)/2
      IF (ndl(2).EQ.0) ndl(2) = 2*Ipj - 1 + Jmin
      WRITE (65,99005) Wv(1,1), Wv(12,1), Wv(2,1), Ipi(4,1), Ncols
99005 FORMAT ('<LEGENDRE>',F10.2,F10.5,F10.2,2I5)
      WRITE (MW,99010)
99010 FORMAT (
     &'1 COEFFICIENTS OF LEGENDRE POLYNOMIALS DESCRIBING THE CROSS-SECTI
     &ONS')
C LOOP ON LEVELS                                                        LCSP-044
      DO jk = 1, Ncols
         IF (Wv(3,jk).GE.0.D0) THEN
            IF (jk.LE.Ncoll) THEN
               jk1 = Ipi(6,jk)
               jk2 = Ipi(7,jk)
               jml = ndl(2)
               ls = jk.EQ.1 .AND. Wv(5,1).NE.0.D0
               IF (ls) jml = ndl(1)
               jmt = jml
               IF (jmt.GT.Id) CALL MEMO('LCSP',Id,jmt,2)
               DO j = 1, jmt
                  Ax(j) = 0.D0
               ENDDO
C LOOP ON AMPLITUDES                                                    LCSP-057
               DO i = jk1, jk2
                  IF (Mf(6,i).NE.99999) THEN
                     m1 = Mf(5,i)
                     m2 = Mf(6,i)
                     m3 = ((IABS(m1+m2) + IABS(m1-m2))/2 - Jmin)/2 + 1
                     IF (jk.LE.Ncoll) THEN
                        a1 = 0.25D0*DFLOAT(m1*m2)
                        mj = 2*m3 + Jmin - 2
                        a2 = 0.5D0*DFLOAT(mj)
                        x1 = DFLOAT((mj + m2)/2 + 1 - m3)
                        x2 = DFLOAT((mj - m2)/2 + 1 - m3)
                        x3 = DFLOAT((mj + m1)/2 + 1 - m3)
                        x4 = DFLOAT((mj - m1)/2 + 1 - m3)
                        A(7,m3) = 0.D0
C COEFFICIENTS OF THE RECURRENCE                                        LCSP-072
                        jm1 = jml + Ipj
                        jm = jm1 + 1
                        IF (m3.LE.jm1) THEN
                           DO j = m3, jm1
                              xj = DFLOAT(j)
                              a2 = a2 + 1.D0
                              A(6,j) = 0.D0
                              IF (a1.NE.0.D0) A(6,j) = a1/(a2*a2 - a2)
                              A(5,j) = DSQRT((x1 + xj)*(x2 + xj)*(x3 +
     &                                 xj)*(x4 + xj))
     &                                 /(a2*(2.D0*a2 + 1.D0))
                              A(7,j + 1) = A(5,j)*(a2 + a2 + 1.D0)
     &                           /(a2 + a2 - 1.D0)
                           ENDDO
                        ENDIF
                     ENDIF
                  ENDIF
                  IF (m3.LE.jm) THEN
                     DO j = m3, jm
                        A(1,j) = 0.D0
                        A(2,j) = 0.D0
                        A(3,j) = 0.D0
                        IF (j.LE.Ipj) THEN
                           A(1,j) = F(1,j,i)
                           A(2,j) = F(2,j,i)
                        ENDIF
                        A(4,j) = 0.D0
                     ENDDO
                     IF (ls) THEN
C COULOMB AMPLITUDE                                                     LCSP-093
                        ns1 = Ipi(2,1) - 1
                        ns2 = Ipi(3,1) - 1
                        nsm = IABS(ns1 - ns2) - Jmin
                        nsp = ns1 + ns2 - Jmin
                        xs3 = DFLOAT(ns1 + ns2 + 2)
                        xs4 = DFLOAT(ns1 - ns2)
                        nst = nsp/2 + 1
                        jmx = jmt + nst
                        jmy = jmx + 2
                        IF (Lo(18)) jmy = jmy + 2*NL(1)
                        IF (jmy.GT.Id) CALL MEMO('LCSP',Id,jmy,2)
                        DO j = 1, nst
                           Ax(jmt + j) = 1.D0
                        ENDDO
C REDUCED ROTATION MATRIX ELEMENT                                       LCSP-107
                        DO i1 = 1, 2
                           ms1 = 2*Mf(2*i1 - 1,i) - ns1 - 2
                           ms2 = ns2 - 2*Mf(2*i1,i) + 2
                           msp = IABS(ms1 + ms2) - Jmin
                           nsq = MAX0(nsm,msp)/2 + 1
                           xs = ms1 + ms2
                           at(i1) = 1.D0
                           IF (nsq.NE.1) THEN
                              DO j = 2, nsq
                                 Ax(jmt + j - 1) = 0.D0
                              ENDDO
                           ENDIF
                           IF (nsq.NE.nst) THEN
                              ns = nsq + 1
                              a2 = 0.D0
                              a1 = 1.D0
                              b2 = 0.D0
                              DO k = ns, nst
                                 a3 = a2
                                 a2 = a1
                                 b1 = b2
                                 xj = DFLOAT(2*k + Jmin - 2)
                                 b2 = DSQRT((xj**2 - xs**2)
     &                                *(xs3**2 - xj**2)*(xj**2 - xs4**2)
     &                                /(xj**2 - 1.D0))/(2.D0*xj)
                                 b3 = DFLOAT(ms1 - ms2)
                                 IF (xj.NE.2.D0) b3 = b3 -
     &                               xs*xs3*xs4/(xj*(xj - 2.D0))
                                 a1 = (a2*b3 - a3*b1)/b2
                                 Ax(jmt + k) = Ax(jmt + k)*a1
                                 at(i1) = at(i1) + a1**2
                              ENDDO
                           ENDIF
                        ENDDO
                        ijx = NL(1)
                        a3 = 1.D0
                        jp = Ipj
C MULTIPLICATION BY (1-COS), (1-COS**2) OR THEIR SQUARES                LCSP-139
    2                   DO ij = 1, ijx
                           a1 = 0.D0
                           b1 = 0.D0
                           DO j = m3, jp
                              a2 = a1
                              b2 = b1
                              a1 = A(1,j)
                              b1 = A(2,j)
                              A(1,j) = a1 - a3*(A(7,j)*a2 + A(6,j)*a1 +
     &                                 A(5,j)*A(1,j + 1))
                              A(2,j) = b1 - a3*(A(7,j)*b2 + A(6,j)*b1 +
     &                                 A(5,j)*A(2,j + 1))
                           ENDDO
                           jp = jp + 1
                           A(1,jp) = -a3*a1*A(6,jp)
                           A(2,jp) = -a3*b1*A(6,jp)
                        ENDDO
                        a3 = -a3
                        IF (Lo(18) .AND. a3.LT.0.D0) GOTO 2
C INITIALISATION OF COULOMB PHASE SHIFTS                                LCSP-155
                        c1 = DSQRT(at(1)*at(2))
                        IF (Ax(jmx).LT.0.D0) c1 = -c1
                        c2 = DFLOAT(ijx)
                        c3 = 2.D0**(ijx - 1)
                        DO ik = 1, 2
                           nx = 0
                           nst1 = nst
                           DO j = 1, nst
                              a1 = 2.D0*Ax(jmt + j)
     &                             /c1*DFLOAT(1 - MOD(j + ik,2))
                              IF (a1.NE.0.D0) nx = nx + 1
                              A(3,j) = a1
                           ENDDO
                           IF (nx.NE.0) THEN
                              Ax(jmx + 1) = -c2*c3*Wv(5,1)
     &                           /(c2*c2 + Wv(5,1)**2)
                              Ax(jmx + 2) = -c3*Wv(5,1)
     &                           **2/(c2*c2 + Wv(5,1)**2)
                              IF (.NOT.(Lo(118))) THEN
                                 Ax(jmx + 1) = 4.D0*c3*Ax(jmx + 1)
                                 Ax(jmx + 2) = 4.D0*c3*Ax(jmx + 2)
                                 DO j = 1, ijx
                                    a2 = DFLOAT(j)
     &                                 *(DFLOAT(j + ijx)**2 + Wv(5,1)
     &                                 **2)
                                    a1 = -DFLOAT(ijx - j + 1)
     &                                 *(DFLOAT(ijx + j)
     &                                 *DFLOAT(ijx + j - 1) + Wv(5,1)
     &                                 **2)/a2
                                    b1 = DFLOAT(ijx - j + 1)*Wv(5,1)/a2
                                    Ax(jmx + 2*j + 1)
     &                                 = Ax(jmx + 2*j - 1)
     &                                 *a1 - Ax(jmx + 2*j)*b1
                                    Ax(jmx + 2*j + 2)
     &                                 = Ax(jmx + 2*j - 1)
     &                                 *b1 + Ax(jmx + 2*j)*a1
                                 ENDDO
                              ENDIF
                              i1 = 3
                              DO l = 1, jm
                                 b1 = 2*l - 1
C COULOMB PHASE SHIFT                                                   LCSP-182
                                 a1 = Ax(jmx + 1)
                                 a2 = Ax(jmx + 2)
                                 IF (.NOT.(Lo(118))) THEN
                                    DO j = 1, ijx
                                       a1 = a1 + Ax(jmx + 2*j + 1)
                                       a2 = a2 + Ax(jmx + 2*j + 2)
                                    ENDDO
                                 ENDIF
                                 DO j = 1, nst1
                                    IF (.NOT.(Lo(18) .AND. MOD(l+ik,2)
     &                                  .EQ.1)) THEN
                                       A(1,j) = A(1,j) + a1*A(i1,j)*b1
                                       A(2,j) = A(2,j) + a2*A(i1,j)*b1
                                    ENDIF
                                 ENDDO
                                 i2 = 7 - i1
                                 IF (l.NE.jm) THEN
C PRODUCT OF ROTATION MATRIX ELEMENTS BY NEXT PL                        LCSP-196
                                    b2 = -(b1 - 1.D0)/(b1 + 1.D0)
                                    b3 = 2.D0*b1/(b1 + 1.D0)
                                    a1 = 0.D0
                                    DO j = m3, nst1
                                       a2 = a1
                                       a1 = A(i1,j)
                                       A(i2,j) = b2*A(i2,j)
     &                                    + (A(7,j)*a2 + A(6,j)
     &                                    *a1 + A(5,j)*A(i1,j + 1))*b3
                                       IF (DABS(A(i2,j)).LT.1.D-10)
     &                                    A(i2,j) = 0.D0
                                    ENDDO
                                    IF (nst1.NE.jm) A(i2,nst1 + 1)
     &                                  = A(7,nst1 + 1)*a1*b3
                                    nst1 = MIN0(nst1 + 1,jm)
                                    a1 = (b1 + 1.D0)*Wv(5,1)
                                    b2 = 2.D0*c2
                                    a3 = .25D0*(b1 + 1.D0 + b2)
     &                                 **2 + Wv(5,1)**2
                                    a2 = .25D0*(b1 + 1.D0 - b2)
     &                                 *(b1 + 1.D0 + b2) - Wv(5,1)**2
                                    b3 = (Ax(jmx + 1)*a2 - Ax(jmx + 2)
     &                                 *a1)/a3
                                    Ax(jmx + 2)
     &                                 = (Ax(jmx + 1)*a1 + Ax(jmx + 2)
     &                                 *a2)/a3
                                    Ax(jmx + 1) = b3
                                    IF (.NOT.(Lo(118))) THEN
                                       DO j = 1, ijx
                                         b2 = b2 + 2.D0
                                         a3 = .25D0*(b1 + 1.D0 + b2)
     &                                      **2 + Wv(5,1)**2
                                         a2 = .25D0*(b1 + 1.D0 - b2)
     &                                      *(b1 + 1.D0 + b2) - Wv(5,1)
     &                                      **2
                                         b3 = (Ax(jmx + 2*j + 1)
     &                                      *a2 - Ax(jmx + 2*j + 2)*a1)
     &                                      /a3
                                         Ax(jmx + 2*j + 2)
     &                                      = (Ax(jmx + 2*j + 1)
     &                                      *a1 + Ax(jmx + 2*j + 2)*a2)
     &                                      /a3
                                         Ax(jmx + 2*j + 1) = b3
                                       ENDDO
                                    ENDIF
                                 ENDIF
                                 i1 = i2
                              ENDDO
                              DO j = m3, jm
                                 A(3,j) = 0.D0
                                 A(4,j) = 0.D0
                              ENDDO
                           ENDIF
                        ENDDO
                     ENDIF
                     b3 = Jmin + 2*m3 - 1
                     i1 = 1
                     i2 = 3
C COEFFICIENT OF OTHER PL                                               LCSP-231
                     DO l = 1, jml
                        a3 = 0.D0
                        c1 = b3
                        IF (.NOT.(Lo(18) .AND. MOD(l,2).NE.1)) THEN
                           DO j = m3, Ipj
                              a3 = a3 +
     &                             (F(1,j,i)*A(i1,j) + F(2,j,i)*A(i1 +
     &                             1,j))/c1
                              c1 = c1 + 2.D0
                           ENDDO
                           IF (Mf(8,i).NE.0.) a3 = a3 + a3
                           Ax(l) = Ax(l) + a3*Xz
                        ENDIF
                        IF (l.NE.jml) THEN
                           c1 = DFLOAT(l)
                           c2 = -(c1 - 1.D0)/c1
                           c3 = (2.D0*c1 - 1.D0)/c1
                           i1 = i2
                           i2 = 4 - i1
                           a1 = 0.D0
                           b1 = 0.D0
                           DO j = m3, jm1
                              a2 = a1
                              b2 = b1
                              a1 = A(i2,j)
                              b1 = A(i2 + 1,j)
                              A(i1,j) = c2*A(i1,j)
     &                                  + (A(7,j)*a2 + A(6,j)*a1 +
     &                                  A(5,j)*A(i2,j + 1))*c3
                              A(i1 + 1,j) = c2*A(i1 + 1,j)
     &                           + (A(7,j)*b2 + A(6,j)*b1 + A(5,j)
     &                           *A(i2 + 1,j + 1))*c3
                           ENDDO
                           A(i1,jm) = A(7,jm)*a1*c3
                           A(i1 + 1,jm) = A(7,jm)*b1*c3
                        ENDIF
                     ENDDO
                  ENDIF
               ENDDO
               WRITE (65,99015) jk, jml
99015          FORMAT (2I5,' COUPLED LEVEL, NUMBER OF VALUES')
               IF (ls) WRITE (MW,99020) jk, ijx, jml
99020          FORMAT (/' DIRECT INTERACTION FOR LEVEL',I2,
     &                 ' MULTIPLIED BY (1-COS(THETA))**(',I2,' )',I4,
     &                 ' COEFFICIENTS'/4X,'L',8X,'C(L)',14X,'C(L+1)',
     &                 13X,'C(L+2)',13X,'C(L+3)',13X,'C(L+4)')
               IF (.NOT.ls) WRITE (MW,99025) jk, jml
99025          FORMAT (/' DIRECT INTERACTION FOR LEVEL',I2,',',I4,
     &                 ' COEFFICIENTS'/4X,'L',8X,'C(L)',14X,'C(L+1)',
     &                 13X,'C(L+2)',13X,'C(L+3)',13X,'C(L+4)')
               DO ll = 1, jml, 5
                  l = ll - 1
                  lm = MIN0(jml,ll + 4)
                  WRITE (MW,99055) l, (Ax(m),m = ll,lm)
               ENDDO
               DO ll = 1, jml
                  l = ll - 1
                  IF (ls) WRITE (65,99030) jk, l, Ax(ll), ijx
99030             FORMAT (2I5,1P,D20.10,5X,'*(1-COS(THETA)**(',I2,' )')
                  IF (.NOT.ls) WRITE (65,99035) jk, l, Ax(ll)
99035             FORMAT (2I5,1P,D20.10)
               ENDDO
            ENDIF
            IF (.NOT.(Lo(181))) THEN
               WRITE (65,99040) jk, Ipk
99040          FORMAT (2I5,' UNCOUPLED LEVEL, NUMBER OF VALUES')
               WRITE (MW,99045) jk, Ipk
99045          FORMAT (/' COMPOUND NUCLEUS FOR LEVEL',I2,',',I4,
     &                 ' COEFFICIENTS (ONLY EVEN ONES ARE GIVEN)'/4X,
     &                 'L',8X,'C(L)',14X,'C(L+2)',13X,'C(L+4)',13X,
     &                 'C(L+6)',13X,'C(L+8)')
               DO ll = 1, Ipk, 5
                  l = 2*ll - 2
                  lm = MIN0(Ipk,ll + 4)
                  WRITE (MW,99055) l, (Fcn(m,jk),m = ll,lm)
               ENDDO
               DO ll = 1, Ipk
                  l = 2*ll - 2
                  WRITE (65,99050) jk, l, Fcn(ll,jk)
99050             FORMAT (2I5,1P,D20.10,5X,'COMPOUND NUCLEUS')
               ENDDO
            ENDIF
         ENDIF
      ENDDO
      RETURN
99055 FORMAT (I5,1P,5D19.10)
      END
C 01/01/04                                                      ECIS03  RESU-000
      SUBROUTINE RESU(Ipi,Sr,Tx,Jmax,Kmax,Ncoll,Ncols,Mf,Cm,Mfm,Fm,Ipj,
     &                Ipk,Donn,Ncolr,Nco,Coe,Wv,Wvm,Fcn,Noi,Xd,Jmin,Nrz,
     &                Njc,Res,Am,Ex,The,Dxx,Spg,Cmb,Xz,Nzz,Lo)
C COMPUTES CROSS-SECTIONS AND POLARISATIONS - COMPARE TO EXPERIMENTAL   RESU-004
C RESULTS -   OBTAINS EXPERIMENTAL NORMALISATIONS AND PARTIAL CHI2      RESU-005
C INPUT VARIABLES: IPI(J,I):PARITY OF THE NUCLEAR STATES (+/-) FOR J=1, RESU-006
C                           MULTIPLICITY OF PARTICLE AND TARGET J=2,3,  RESU-007
C                           FIRST/LAST AMPL. AND OBSERVABLE FOR EACH    RESU-008
C                           LEVEL FOR J=6 TO 9. (SEE CALX)              RESU-009
C                  SR:      HELICITY SCATTERING COEFFICIENTS            RESU-010
C                  TX:      INELASTIC CROSS-SECTIONS IN MILLIBARNS      RESU-011
C                           FOLLOWED BY HAUSER-FESHBACH COEFFICIENTS    RESU-012
C                  JMAX:    MAXIMUM NUMBER OF CHANNEL SPINS             RESU-013
C                  KMAX:    MAXIMUM NUMBER OF L FOR COMPOUND NUCLEUS    RESU-014
C                  NCOLL:   NUMBER OF COUPLED CHANNELS                  RESU-015
C                  NCOLS:   NUMBER OF CHANNELS WITH ANGULAR DISTRIBUTIONRESU-016
C                  MF,CM:   TABLES OF HELICITY, DESCRIPTION OF OBSERVA- RESU-017
C                           BLES ... ETC     SEE DEPH AND OBSE          RESU-018
C                  MFM,FM:  DESCRIPTION OF EXPERIMENTAL DATA   SEE LECD RESU-019
C                  IPJ:     NUMBER OF CHANNEL SPINS USED                RESU-020
C                  IPK:     NUMBER OF L FOR COMPOUND NUCLEUS            RESU-021
C                  DONN:    EXPERIMENTAL DATA:ANGLE, VALUE, EXPER. ERRORRESU-022
C                           ,ANG. WIDTH, ANG. ERROR AND CALCULATED ERRORRESU-023
C                  NCOLR:   NUMBER OF EXPERIMENTAL ANGULAR DISTRIBUTIONSRESU-024
C                  NCO,COE: INDICATIONS FOR OBSERVABLES     SEE OBSE    RESU-025
C                  WV(I,J): WAVE NUMBER AND COULOMB PARAMETER           RESU-026
C                  WVM:     SAME AS WV FOR THE CONTINUUM                RESU-027
C                  FCN:     COMPOUND NUCLEUS COEFFICIENTS               RESU-028
C                  NCONT:   NUMBER OF CONTINUA FOR COMPOUND NUCLEUS     RESU-029
C                  NOI:     STARTING AND FINAL ADDRESSES FOR CONTINUA   RESU-030
C                  XD:      ENERGY STEP FOR THE CONTINUA                RESU-031
C                  JMIN:    TWICE MINIMUM CHANNEL SPIN                  RESU-032
C                  NRZ:     LENGTH OF SR+TX TO BE SAVED FOR MINIMUM CHI2RESU-033
C                  NJC:     FIRST DIMENSION OF WORKING ARRAY EX         RESU-034
C                  CMB:     NUCLEAR MASS DIVIDED BY H BAR               RESU-035
C                  XZ:      CONVERSION FACTOR TO MILLIBARNS             RESU-036
C                  NZZ:     TOTAL LENGTH OF WORKING FIELD,RETURNS SPACE RESU-037
C                           USED. (SINGLE PRECISION)                    RESU-038
C                  LO(8)    IS TRUE FOR RELATIVISTIC KINEMATICS         RESU-039
C                  LO(31)   IS TRUE FOR EXPERIMENTAL DATA               RESU-040
C                  LO(32)   IS TRUE FOR AUTOMATIC SEARCH                RESU-041
C                  LO(33)   IS TRUE FOR SYMMETRISED CHI2                RESU-042
C                  LO(59)   IS TRUE TO PRINT RESULTS ON FILES 58 AND 59 RESU-043
C                  LO(64)   IS TRUE TO PRINT RESULTS ON FILES 64 AND 66 RESU-044
C                  LO(66)   IS TRUE FOR RESULTS AT EQUIDISTANT ANGLES   RESU-045
C                  LO(67)   IS TRUE FOR NO PLOT OF EXPERIMENTAL DATA    RESU-046
C                  LO(68)   IS TRUE FOR NO PLOT OF EQUIDISTANT C.-S.    RESU-047
C                  LO(69)   IS TRUE FOR NO PLOT OF EQUIDISTANT POLAR.   RESU-048
C                  LO(74)   IS TRUE TO PRINT INTERMEDIATE ELAPSED TIME  RESU-049
C                  LO(81)   IS TRUE FOR COMPOUND NUCLEUS                RESU-050
C                  LO(84)   IS TRUE FOR UNCOUPLED LEVELS                RESU-051
C                  LO(85)   IS TRUE FOR FISSION                         RESU-052
C                  LO(86)   IS TRUE FOR GAMMA EMISSION                  RESU-053
C                  LO(91)   IS TRUE FOR ANGLES IN THE LABORATORY SYSTEM RESU-054
C                  LO(216)  IS TRUE FOR NO OUTPUT                       RESU-055
C                  LO(218)  IS TRUE FOR LAST RESULTS                    RESU-056
C                  LO(226)  IS TRUE FOR SOME OBSERVABLES IN THE LAB. SY.RESU-057
C OUTPUT VARIABLES:RES:     DIFFERENCE BETWEEN EXPERIMENTAL AND CALCULA-RESU-058
C                           TED VALUE DIVIDED BY ERROR (FUNCTION OF FITERESU-059
C IN COMMON /DCHI/ CHI2:    (CALCULATED IN RESU)                        RESU-060
C                  CHI2M:   SMALLER PREVIOUS CHI2                       RESU-061
C IN COMMON /NCOMP/NSP:     NUMBER OF UNCOUPLED STATES FOR COMP. NUCLEUSRESU-062
C                  NDP:     ADDRESS OF FISSION AND GAMMA RESULTS        RESU-063
C WORKING SPACE:   AM:      FOR GENERAL PURPOSES                        RESU-064
C                  EX:      FOR OBSERVABLES                             RESU-065
C                  THE,DXX,SPG  FOR PLOTS                               RESU-066
C INFORMATIONS ARE ALSO IN LABELLED COMMON /TITR/ TITLE: HEAD OF OUTPUT RESU-067
C   IN COMMON /ANGL/                                                    RESU-068
C        THETA1,THETA2,DTHETA,DTHE FOR CALCULATION AT EQUIDISTANT ANGLESRESU-069
C   IN COMMON /SJMM/ JMM:   SAVE IPJ,IPK FOR MINIMUM CHI2               RESU-070
C   IN COMMON /NCJL/ NCJ:   FOR ELIMINATION OF FACTORS 1/(1-X*COS(THETA)RESU-071
C THE COMMON /RESC/ IS USED TO TRANSFER INFORMATIONS TO SCAT            RESU-072
C    SEE DESCRIPTION IN SCAT                                            RESU-073
C INTERNAL LOGICAL LT(3):                                               RESU-074
C          LT(1) IS .TRUE. FOR CROSS-SECTION IN MILLIBARNS              RESU-075
C          LT(2) IS .TRUE. FOR SYMMETRISED CHI2, CROSS-SECTION AND      RESU-076
C                NORMALISATION ERROR                                    RESU-077
C          LT(3) IS .TRUE. FOR GRAPH OF POLARISATION                    RESU-078
C          LKT IS .FALSE. FOR ANGLE IN THE LABORATORY SYSTEM            RESU-079
C***********************************************************************RESU-080
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      REAL*8 ACN(20), CHI2, CHI2m, DTHe, DTHeta, EXCn, THEta1, THEta2,
     &       XA, XB, YY(3)
      INTEGER JMM(2), JN1, JN2, KLT, MR, MS, MT2, MT3, MT4, MTT, MW,
     &        NCJ, NCOj, NCOlx, NCOns, NCOnt, NDP, NDQ, NFX, NIE, NIX,
     &        NL(3), NOUt, NRD(2), NSP(3), NTT
      LOGICAL LKT
      CHARACTER*4 TITle(18)
      COMMON /ANGL  / THEta1, THEta2, DTHeta, DTHe
      COMMON /DCHI  / CHI2, CHI2m, YY
      COMMON /INOUT / MR, MW, MS
      COMMON /NCJL  / NCJ, NL
      COMMON /NCOMP / NSP, NRD, NCOnt, NCOj, NCOns, NIE, NCOlx, NDP,
     &                NDQ, ACN
      COMMON /RESC  / EXCn, XA, XB, JN1, JN2, NTT, MTT, MT2, MT3, MT4,
     &                NOUt, NIX, NFX, KLT, LKT
      COMMON /SJMM  / JMM
      COMMON /TITR  / TITle
C
C Dummy arguments
C
      REAL*8 Cmb, Xz
      INTEGER Ipj, Ipk, Jmax, Jmin, Kmax, Ncoll, Ncolr, Ncols, Njc, Nrz,
     &        Nzz
      REAL*8 Am(1), Coe(1), Donn(6,1), Dxx(1), Ex(Njc,4), Fcn(Kmax,1),
     &       Fm(7,Ncolr), Res(1), Spg(1), Sr(2,Jmax,1), The(1), Tx(2),
     &       Wv(18,1), Wvm(18,1), Xd(3,1)
      CHARACTER*4 Cm(10,1)
      INTEGER Ipi(11,*), Mf(10,1), Mfm(14,Ncolr), Nco(1), Noi(2,1)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 a1, a2, a3, a4, a5, a6, aa, bb, cc, rx, ry, sp(6), sp2,
     &       theta, thetb, xc, zx(3), zy(3)
      DOUBLE PRECISION DSQRT
      INTEGER i, i1, i2, i3, i4, i5, i7, i8, ii, ij, ik, iniv, is, j,
     &        j1, j2, j3, jg, ji, jif, jim, jin, jj, k, ka, kc, ki, l,
     &        m, m2, m3, m4, mt1, n1, nd, nesp, ngx, njx, nsp1
      INTEGER IABS, IDINT, MAX0, MIN0
      CHARACTER*4 lg(10)
      LOGICAL lt(3)
      CHARACTER*1 sigm(2)
C
C
      DATA sigm, lg, i3, i4, i5, i7, lt/'+', '-', ' COM', 'POUN',
     &     'D NU', 'CLEU', 'S ', 2*'    ', '   D', 'IREC', 'T ', 4*0,
     &     3*.FALSE./
      nesp = 0
      MT3 = Ipi(2,1)
      MT4 = Ipi(3,1)
      IF (Lo(218)) THEN
C COPY THE SCATTERING COEFFICIENTS OBTAINED FOR MINIMUM CHI2            RESU-105
         Ipj = JMM(1)
         Ipk = JMM(2)
         DO i = 1, Nrz
            Sr(i,1,1) = Sr(i + Nrz,1,1)
         ENDDO
      ENDIF
      IF (Lo(131)) GOTO 600
C CALCULATION AT EXPERIMENTAL ANGLES                                    RESU-111
      KLT = 1
      CHI2 = 0.D0
      NOUt = 0
      IF (Lo(64)) WRITE (64,99005) Wv(1,1), Wv(12,1), Wv(2,1), Ipi(4,1),
     &                             Ncolr
99005 FORMAT ('<EXP.DAT.>',F10.2,F10.5,F10.2,2I5)
      ki = Ipi(9,Ncoll)
      ji = 1
      ka = 0
C PSEUDO LOOP ON THE ANGULAR DISTRIBUTIONS                              RESU-120
  100 aa = 0.D0
      bb = 0.D0
      cc = 0.D0
      NIX = ki + ji
      NFX = NIX
      lt(1) = Mf(2,NIX).EQ.0
      lt(2) = Lo(33) .AND.
     &        ((IABS(Mf(2,NIX)).LE.1 .OR. Mf(2,NIX).EQ.19) .AND.
     &        Fm(5,ji).EQ.0.D0)
      jim = ji
      jin = ji
  200 j1 = Mfm(2,ji)
      j2 = Mfm(3,ji)
      LKT = Mfm(4,ji).NE.1
      IF (j2.GE.j1) THEN
         jif = ji
         j = j1
      ELSE
         ji = ji + 1
         GOTO 200
      ENDIF
C PSEUDO LOOP ON THE EXPERIMENTAL DATA                                  RESU-139
  300 Donn(6,j) = Donn(3,j)
      kc = 1
      theta = Donn(1,j)
  400 ji = jim
      zx(kc) = 0.D0
      zy(kc) = 0.D0
      IF (Mf(2,ki + ji).NE.19) GOTO 1800
C DATA ARE TOTAL CROSS SECTIONS                                         RESU-147
      i = IDINT(Donn(1,j)*1.000001D0)
      IF (i.LE.NCOlx - NCOnt) THEN
         IF (i.EQ. - 1) zx(1) = Tx(1)
         IF (i.EQ.0) zx(1) = Tx(1) - Tx(2)
         IF (i.EQ.0 .AND. Ncoll.NE.NCOlx) zx(1) = zx(1) - Tx(Ncoll + 2)
         IF (i.GT.0) THEN
            k = MAX0(i,1) + 1 + Ncoll
            zx(1) = 0.D0
            IF (Ncoll.NE.NCOlx) zx(1) = Tx(Ncoll + i + 1)
            IF (i.LE.Ncoll) zx(1) = zx(1) + Tx(i + 1)
         ENDIF
      ELSEIF (i.GT.NCOlx) THEN
         zx(1) = Tx(NDP + i - NCOlx)
      ELSE
         ik = Ncoll + NCOlx - NCOnt + 1
         ii = i + NCOnt - NCOlx
         ij = Noi(1,ii)
         ji = Noi(2,ii)
         zx(1) = 0.D0
         IF (ij.LE.ji) THEN
            DO ii = ij, ji
               zx(1) = zx(1) + Tx(ik + ii)
            ENDDO
         ENDIF
      ENDIF
  500 Res(j) = zx(1)
      IF (lt(2)) Donn(6,j) = Donn(6,j)*DSQRT(Fm(4,ji)*Res(j)/Donn(2,j))
      xc = Donn(6,j)**2/Fm(3,ji)
      aa = aa + Res(j)**2/xc
      bb = bb + Res(j)*Donn(2,j)/xc
      cc = cc + Donn(2,j)**2/xc
      j = j + 1
C END OF THE PSEUDO LOOP ON EXPERIMENTAL DATA                           RESU-199
      IF (j.LE.j2) GOTO 300
C COMPUTATION OF NORMALISATION AND CHI2                                 RESU-201
      IF (Fm(5,ji).EQ.0.D0) THEN
         Fm(6,ji) = Fm(4,ji)
      ELSE
         XA = Fm(3,ji)/Fm(5,ji)**2
         aa = aa + XA
         XB = Fm(4,ji)
         bb = bb + XA*XB
         cc = cc + XA*XB*XB
         IF (ji.NE.Ncolr) THEN
            IF (Fm(4,ji).EQ.Fm(4,ji + 1) .AND. Fm(5,ji).EQ.Fm(5,ji + 1))
     &          THEN
               IF ((2*IABS(Mf(2,NIX)) - 3)*(2*IABS(Mf(2,NIX+1)) - 3)
     &             .GE.0) THEN
                  ji = ji + 1
                  jim = ji
                  GOTO 200
               ENDIF
            ENDIF
         ENDIF
         IF (lt(2)) THEN
            Fm(6,ji) = DSQRT(cc/aa)
         ELSE
            Fm(6,ji) = bb/aa
         ENDIF
      ENDIF
      DO jj = jin, ji
         NIX = ki + jj
         j1 = Mfm(2,jj)
         j2 = Mfm(3,jj)
         j3 = j2 - j1 + 1
         IF (Lo(64)) WRITE (64,99010) (Mf(j,NIX),j = 1,2), j3,
     &                                (Cm(j,NIX),j = 6,10)
99010    FORMAT (3I5,5A4)
         IF (j3.GT.0) THEN
            IF (jj.NE.ji) Fm(6,jj) = Fm(6,ji)
            IF (.NOT.(Lo(216))) THEN
C OUTPUT OF THE CALCULATED AND THE EXPERIMENTAL VALUES                  RESU-230
               m = 0
               WRITE (MW,99180) TITle
               IF (Mf(2,NIX).NE.19) WRITE (MW,99015) Mfm(1,jj)
99015          FORMAT (//30X,'**********   STATE',I5,'    **********'//)
               WRITE (MW,99020) (Cm(j,NIX),j = 6,10)
99020          FORMAT (//42X,5A4//10X,'ANGLE',10X,'CALC. VAL.',11X,
     &                 'EXP. VAL.',10X,'EXP. ERROR',10X,'COR. ERROR',
     &                 13X,'CHI2'/)
            ENDIF
            a1 = Fm(6,jj)
            a6 = DSQRT(Fm(3,jj))
            aa = 0.D0
            IF (Fm(5,jj).NE.0.D0) THEN
               a2 = (a1 - Fm(4,jj))/Fm(5,jj)
               aa = a2**2
               Res(j2 + 1) = a2*a6
               CHI2 = CHI2 + Res(j2 + 1)**2
            ENDIF
            DO j = j1, j2
               a2 = Donn(2,j)/a1
               a3 = Donn(6,j)/a1
               a4 = ((Res(j) - a2)/a3)**2
               IF (.NOT.(Lo(216))) THEN
                  m = m + 1
                  a5 = Donn(3,j)/a1
                  The(m) = Donn(1,j)
                  Dxx(m) = a2
                  Spg(m) = Res(j)
                  WRITE (MW,99185) Donn(1,j), Res(j), a2, a5, a3, a4
                  IF (Lo(64)) WRITE (64,99185) Donn(1,j), Res(j), a2,
     &                               a5, a3, a4
               ENDIF
               aa = aa + a4
               Res(j) = (Res(j) - a2)*a6/a3
               CHI2 = CHI2 + Res(j)**2
            ENDDO
            Fm(7,jj) = aa
            IF (.NOT.(Lo(216))) THEN
               WRITE (MW,99025) (Fm(j,jj),j = 3,7)
99025          FORMAT (//' WEIGHT IN THE CHI2',8X,
     &                 D15.5/' EXPERIMENTAL NORMALISATION',
     &                 D15.5/' NORMALISATION ERROR',7X,
     &                 D15.5/' CALCULATED NORMALISATION',2X,
     &                 D15.5//' ***** CHI2 =',D15.6,'   *****'/)
               IF (Mf(1,NIX).NE.19) THEN
                  IF (Lo(74)) CALL HORA
                  IF (.NOT.(Lo(67))) THEN
                     lt(3) = .NOT.(lt(1) .OR. Mf(2,NIX).EQ.1 .OR.
     &                       Mf(2,NIX).EQ.19)
                     CALL GRAL(The,Spg,Dxx,m,Mf(1,NIX),Cm(1,NIX),1,
     &                         lt(3),.FALSE.)
                  ENDIF
               ENDIF
            ENDIF
         ENDIF
      ENDDO
      ji = ji + 1
C END OF THE PSEUDO LOOP ON ANGULAR DISTRIBUTIONS                       RESU-268
      IF (ji.LE.Ncolr) GOTO 100
      IF (.NOT.Lo(216)) WRITE (MW,99030) CHI2
99030 FORMAT (/' ************ CHI2 **********',D20.10//)
      IF (.NOT.(CHI2.GT.CHI2m .OR. Lo(132))) THEN
         JMM(1) = Ipj
         JMM(2) = Ipk
         CHI2m = CHI2
C IF THE CHI2 DECREASED, SAVE THE SCATTERING COEFFICIENTS               RESU-275
         DO i = 1, Nrz
            Sr(i + Nrz,1,1) = Sr(i,1,1)
         ENDDO
      ENDIF
  600 IF (Lo(216)) GOTO 1700
      LKT = Lo(191)
      IF (Lo(66) .AND. Lo(181) .AND. Lo(159)) GOTO 1700
C COMPUTATION AT EQUIDISTANT ANGLES                                     RESU-281
      WRITE (MW,99180) TITle
      jg = IDINT((THEta2 - THEta1)/DTHeta + 1.5D0)
      IF (Lo(64)) WRITE (91,99190) Wv(1,1), Wv(12,1), Wv(2,1), Ipi(4,1),
     &                             Ncols
      IF (Lo(64)) WRITE (85,99190) Wv(1,1), Wv(12,1), Wv(2,1), Ipi(4,1),
     &                             Ncols
      IF (Lo(64)) WRITE (86,99190) Wv(1,1), Wv(12,1), Wv(2,1), Ipi(4,1),
     &                             Ncols
      IF (.NOT.(Lo(159))) THEN
         nd = 1
         IF (Wv(5,1).EQ.0.D0) nd = 3
         WRITE (58,99035) Wv(1,1), Wv(12,1), Wv(2,1), Ipi(4,1), nd
99035    FORMAT ('<CROSS-S.>',F10.2,F10.5,F10.2,2I5)
         WRITE (55,'(1x,F10.3,$)') Wv(12,1)
         IF (Ncols.NE.1) WRITE (59,99040) Wv(1,1), Wv(12,1), Wv(2,1),
     &                          Ipi(4,1), Ncols - 1
99040    FORMAT ('<INE.C.S.>',F10.2,F10.5,F10.2,2I5)
      ENDIF
      IF (Wv(5,1).EQ.0.D0) THEN
         WRITE (MW,99045) Tx(1)
99045    FORMAT (6X,'==> TOTAL CROSS SECTION =',F14.6,' MILLIBARNS')
         IF (Lo(59)) WRITE (58,99195) Tx(1)
         IF (Lo(59)) WRITE (55,'(3x,F10.2,$)') Tx(1)
      ENDIF
      rx = Tx(1) - Tx(2)
      IF (Lo(59)) WRITE (58,99195) rx
      IF (Lo(59)) THEN
         IF (Wv(5,1).NE.0.D0) THEN
            WRITE (55,'(1x,F10.2)') rx
         ELSE
            WRITE (55,'(1x,F10.2,$)') rx
         ENDIF
      ENDIF
      IF (Lo(81)) THEN
C COMPOUND NUCLEUS RESULTS                                              RESU-300
         WRITE (MW,99050) rx
99050    FORMAT (' TOTAL REACTION CROSS SECTION =',F14.6,' MILLIBARNS',
     &           11X,'( INCLUDING COMPOUND ELASTIC )')
         IF (Lo(59)) WRITE (58,99195) rx
         IF (Lo(59)) WRITE (55,'(1x,F10.2,$)') rx
         NDP = 2*Ncoll + NSP(1) + 1
         rx = rx - Tx(Ncoll + 2)
         WRITE (MW,99055) rx
99055    FORMAT (' TOTAL DIRECT REACTION CROSS SECTION =',F14.6,
     &           ' MILLIBARNS',4X,'( WITHOUT COMPOUND ELASTIC )')
         IF (Lo(85)) WRITE (MW,99060) Tx(NDP + 1)
99060    FORMAT (8X,'FISSION CROSS SECTION =',F14.6,' MILLIBARNS')
         IF (Lo(86)) WRITE (MW,99065) Tx(NDP + 2)
99065    FORMAT (6X,'GAMMA RAY CROSS SECTION =',F14.6,' MILLIBARNS')
         rx = Tx(NDP + 1) + Tx(NDP + 2)
         WRITE (MW,99070)
99070    FORMAT (/
     &       '  COMPOUND CROSS SECTION FOR SCATTERING TO COUPLED LEVELS'
     &       /
     &       '  ======================================================='
     &       //'   LEVEL     SPIN       ENERGY       CROSS SECTION'/)
         ry = 0.D0
         DO i = 1, Ncoll
            ii = Ipi(1,i) + 1
            sp2 = 0.5D0*DFLOAT(Ipi(3,i) - 1)
            ry = ry + Tx(Ncoll + i + 1)
            WRITE (MW,99200) i, sp2, sigm(ii), Wv(3,i),
     &                       Tx(Ncoll + i + 1)
         ENDDO
         WRITE (MW,99205) ry
         rx = rx + ry
         IF (.NOT.(Lo(184))) THEN
            IF (Ncoll.NE.Ncols) THEN
               WRITE (MW,99075)
99075          FORMAT (/
     &'  COMPOUND CROSS SECTION FOR SCATTERING TO UNCOUPLED LEVELS WITH
     &ANGULAR DISTRIBUTION'/
     &'  ===============================================================
     &===================='//
     &'   LEVEL     SPIN       ENERGY       CROSS SECTION'/)
               ry = 0.D0
               n1 = Ncoll + 1
               DO i = n1, Ncols
                  ii = Ipi(1,i) + 1
                  sp2 = 0.5D0*DFLOAT(Ipi(3,i) - 1)
                  ry = ry + Tx(Ncoll + i + 1)
                  WRITE (MW,99200) i, sp2, sigm(ii), Wv(3,i),
     &                             Tx(Ncoll + i + 1)
               ENDDO
               WRITE (MW,99205) ry
               rx = rx + ry
            ENDIF
            nsp1 = NSP(3)
            IF (NCOnt.NE.0) nsp1 = nsp1 - NIE
            IF (nsp1.GE.1) THEN
               WRITE (MW,99080)
99080          FORMAT (/
     &'  COMPOUND CROSS SECTION FOR SCATTERING TO LEVELS WITHOUT ANGULAR
     & DISTRIBUTION'/
     &'  ===============================================================
     &============='//
     &'   LEVEL     SPIN       ENERGY       CROSS SECTION'/)
               ry = 0.D0
               DO i = 1, nsp1
                  j = i + Ncols
                  ii = Ipi(1,j) + 1
                  sp2 = 0.5D0*DFLOAT(Ipi(3,j) - 1)
                  ry = ry + Tx(Ncoll + j + 1)
                  WRITE (MW,99200) j, sp2, sigm(ii), Wv(3,j),
     &                             Tx(Ncoll + j + 1)
               ENDDO
               WRITE (MW,99205) ry
               rx = rx + ry
            ENDIF
            IF (NCOnt.NE.0) THEN
               ik = Ncoll + NCOlx - NCOnt + 1
               DO i = 1, NCOnt
                  ij = Noi(1,i)
                  ji = Noi(2,i)
                  ry = 0.D0
                  IF (ij.LE.ji) THEN
                     DO ii = ij, ji
                        ry = ry + Tx(ik + ii)
                     ENDDO
                     WRITE (MW,99085) i, ry
99085                FORMAT (/' CONTINUUM',I4/
     &                       ' TOTAL COMPOUND REACTION CROSS SECTION =',
     &                       F14.6,' MILLIBARNS'//8X,
     &       ' ENERGY     STEP     CONTRIBUTION  VALUE (MILLIBARNS/MEV)'
     &       /)
                     rx = rx + ry
                     DO ii = ij, ji
                        ry = Tx(ik + ii)/Xd(2,ii)
                        WRITE (MW,99090) ii, Wvm(3,ii), Xd(2,ii),
     &                         Tx(ik + ii), ry
99090                   FORMAT (2X,I3,2F10.5,2F15.5)
                     ENDDO
                  ENDIF
               ENDDO
            ENDIF
         ENDIF
         WRITE (MW,99095) rx
99095    FORMAT (/' TOTAL SUM OF COMPOUND CONTRIBUTIONS',F14.6,
     &           ' MILLIBARNS')
         WRITE (MW,99180) TITle
      ELSE
         WRITE (MW,99100) rx
99100    FORMAT (' TOTAL REACTION CROSS SECTION =',F14.6,' MILLIBARNS')
      ENDIF
      iniv = 1
      sp2 = 0.5D0*DFLOAT(Ipi(3,iniv) - 1)
      WRITE (MW,99105) sp2, sigm(Ipi(1,iniv) + 1)
99105 FORMAT (/' ELASTIC SCATTERING ON THE TARGET STATE OF SPIN =',F5.1,
     &        A1)
      NOUt = 0
      KLT = 2
C PSEUDO DO LOOP ON LEVELS                                              RESU-365
  700 IF (Wv(3,iniv).GT.0.D0) THEN
         rx = Tx(iniv + 1)
         IF (Lo(81)) rx = rx + Tx(Ncoll + iniv + 1)
         IF (iniv.EQ.1) THEN
            IF (Wv(5,1).NE.0.D0) GOTO 800
            WRITE (MW,99110) rx
99110       FORMAT (/'  TOTAL ELASTIC CROSS SECTION =',F14.6,
     &              ' MILLIBARNS')
         ELSE
            WRITE (MW,99180) TITle
            WRITE (MW,99115) iniv, sp2, sigm(Ipi(1,iniv) + 1)
99115       FORMAT (/' INELASTIC SCATTERING TO THE TARGET STATE',I3,
     &              '  SPIN =',F5.1,A1)
            WRITE (MW,99120) rx
99120       FORMAT (/6X,'INELASTIC CROSS SECTION =',F14.6,' MILLIBARNS')
         ENDIF
         IF (Lo(81)) WRITE (MW,99125) Tx(iniv + 1)
99125    FORMAT (9X,'DIRECT CROSS SECTION =',F14.6,' MILLIBARNS')
         IF (.NOT.(Lo(159))) THEN
            IF (iniv.EQ.1) WRITE (58,99195) rx
            IF (iniv.EQ.1) WRITE (55,'(1x,F10.2)') rx
            IF (iniv.NE.1) WRITE (59,99130) rx, iniv - 1
C1033 FORMAT (D12.5,I3)                                                 RESU-585
99130       FORMAT (D15.8,1x,I3)
         ENDIF
      ELSE
         WRITE (MW,99135) iniv
99135    FORMAT (//' CLOSED CHANNEL FOR THE TARGET STATE',I3)
         IF (Lo(64)) WRITE (91,99140) iniv, sp2, sigm(Ipi(1,iniv) + 1)
99140    FORMAT (I5,F5.1,A1,3X,'0',5X,'CLOSED CHANNEL')
         GOTO 1300
      ENDIF
  800 IF (Lo(81)) WRITE (MW,99145) Tx(Ncoll + iniv + 1)
99145 FORMAT (7X,'COMPOUND CROSS SECTION =',F14.6,' MILLIBARNS')
      IF (Lo(66)) GOTO 1700
      IF (jg.LE.0) GOTO 1300
      thetb = THEta1
      ij = 0
      ii = 1
C PSEUDO DO LOOP ON ANGLES                                              RESU-389
  900 The(ii) = thetb
      theta = thetb
      kc = 1
C FOR EQUIDISTANT ANGLES                                                RESU-456
      IF (iniv.NE.NOUt) GOTO 1900
      GOTO 2000
 1000 Dxx(ii) = Ex(i5,1)
      IF (Lo(81)) THEN
         i1 = MIN0(i3,5)
         IF (i1.LT.3) THEN
            WRITE (MW,99210) thetb, Ex(2,1), Ex(i3 + 1,1), Ex(i4,1)
            GOTO 1200
         ELSE
            WRITE (MW,99210) thetb, Ex(2,1), Ex(i3 + 1,1), Ex(i4,1),
     &                       (Ex(k,1),k = 3,i1)
         ENDIF
      ELSE
         i1 = MIN0(i3,7)
         WRITE (MW,99210) thetb, (Ex(k,1),k = 2,i1)
      ENDIF
 1100 IF (i1.LT.i3) THEN
         i2 = i1 + 1
         i1 = MIN0(i1 + 5,i3)
         WRITE (MW,99150) (Ex(k,1),k = i2,i1)
99150    FORMAT (29X,5F18.7)
         GOTO 1100
      ENDIF
 1200 IF (.NOT.(Lo(164))) THEN
         WRITE (91,99155) (Mf(2,NIX + k - 2),theta,Ex(k,1),(Cm(l,NIX+k-2
     &                    ),l = 6,10),k = 2,i3)
99155    FORMAT (I3,2D12.5,5X,4A4,A2)
         DO k = 2, i3
            WRITE (83 + k,'(1x,F5.1,1x,e12.6)') theta, Ex(k,1)
         ENDDO
         IF (Lo(81)) WRITE (91,99160) theta, Ex(i3 + 1,1),
     &                                (lg(k),k = 1,5), theta, Ex(i4,1),
     &                                (lg(k),k = 6,10)
99160    FORMAT (' -4',2D12.5,5X,4A4,A2/' -5',2D12.5,5X,4A4,A2)
      ENDIF
      IF (i7.GT.0) THEN
         DO k = 1, i7
            ij = ij + 1
            Spg(ij) = Ex(k + i5,1)
         ENDDO
      ENDIF
      thetb = thetb + DTHeta
      ii = ii + 1
C END OF THE PSEUDO DO LOOP ON ANGLES                                   RESU-419
      IF (ii.LE.jg) GOTO 900
      IF (Lo(168)) CALL GRAL(The,Dxx,Dxx,jg,Mf(1,NFX - i7),
     &                       Cm(1,NFX - i7),1,.FALSE.,.TRUE.)
      IF (Lo(169) .AND. i7.GT.0)
     &    CALL GRAL(The,Spg,Dxx,jg,Mf(1,NIX + i5 - 1),Cm(1,NIX + i5 - 1)
     &    ,i7,.TRUE.,.TRUE.)
      IF (Lo(74)) CALL HORA
 1300 iniv = iniv + 1
      sp2 = 0.5D0*DFLOAT(Ipi(3,iniv) - 1)
C END OF THE PSEUDO DO LOOP ON LEVELS                                   RESU-428
      IF (iniv.LE.Ncoll) GOTO 700
      IF (Lo(181)) GOTO 1700
      JN2 = Ncoll
      KLT = 3
 1400 JN1 = JN2 + 1
      JN2 = MIN0(JN1 + 5,Ncols)
      is = JN1 - 1
      IF (JN1.GT.JN2) GOTO 1700
      DO i = JN1, JN2
         sp(i - is) = 0.5D0*DFLOAT(Ipi(3,i) - 1)
      ENDDO
      WRITE (MW,99180) TITle
      WRITE (MW,99165) JN1, JN2,
     &                 (i,sp(i - is),sigm(Ipi(1,i) + 1),i = JN1,JN2)
99165 FORMAT (/' ANGULAR DISTRIBUTION OF COMPOUND SCATTERING ON LEVELS',
     &        I3,' TO',I3//6X,'ANGLE',6(I6,'-LEVEL',F5.1,A1))
      thetb = THEta1
      GOTO 1600
 1500 WRITE (MW,99170) thetb, (Ex(i - is,1),i = JN1,JN2)
99170 FORMAT (1X,F10.3,6F18.7)
      thetb = thetb + DTHeta
 1600 theta = thetb
      kc = 1
      IF (thetb.GT.THEta2) GOTO 1400
      GOTO 2000
 1700 Nzz = 2*nesp
      RETURN
C FOR EXPERIMENTAL DATA                                                 RESU-451
 1800 IF (ji.EQ.ka) GOTO 2000
      iniv = Mfm(1,ji)
      ka = ji
 1900 NOUt = iniv
C CHANGE OF LEVEL                                                       RESU-459
      JN1 = Ipi(6,NOUt)
      JN2 = Ipi(7,NOUt)
      mt1 = Ipi(2,NOUt)
      MT2 = Ipi(3,NOUt)
      NTT = JN2 + 1 - JN1
      MTT = mt1*MT2*MT3*MT4
      m2 = 1 + 2*MTT
      m3 = m2 + 2*NTT
      m4 = m3 + Ipj + NCJ
      IF (Lo(226)) m4 = MAX0(m4,6*MTT)
      nesp = MAX0(nesp,m4)
      IF (2*m4.GT.Nzz) CALL MEMO('RESU',Nzz,2*m4,2)
      IF (.NOT.(LKT)) THEN
         IF (Lo(8)) THEN
            XA = DSQRT(1.D0 + (Wv(4,1)/(Cmb*Wv(2,1)))**2)
            XB = DSQRT(Wv(1,NOUt)**2 + (Wv(4,NOUt)/Cmb)**2)*Wv(4,1)
     &           /(Wv(4,NOUt)*Wv(2,1))
         ELSE
            XA = 1.D0
            XB = Wv(4,1)*Wv(1,NOUt)/(Wv(4,NOUt)*Wv(2,1))
         ENDIF
      ENDIF
      IF (KLT.EQ.2) THEN
C FOR EQUIDISTANT ANGLES                                                RESU-481
         NIX = Ipi(8,iniv)
         NFX = Ipi(9,iniv)
         i4 = 2 + NFX - NIX
         i3 = i4
         i5 = 2
         i8 = i4 - 1
         IF (i4.GT.2 .AND. Mf(2,NIX + 1).EQ.1) i5 = 3
         i7 = i4 - i5
         IF (Lo(81)) THEN
            i4 = i4 + 2
            i8 = i8 + 2
            ngx = MIN0(NFX,NIX + 3)
            njx = NIX + 1
            IF (ngx.GE.njx) THEN
               WRITE (MW,99215) (Cm(l,NIX),l = 6,10), lg,
     &                          ((Cm(l,k),l = 6,10),k = njx,ngx)
            ELSE
               WRITE (MW,99215) (Cm(l,NIX),l = 6,10), lg
            ENDIF
         ELSE
            ngx = MIN0(NFX,NIX + 5)
            WRITE (MW,99215) ((Cm(l,k),l = 6,10),k = NIX,ngx)
         ENDIF
 1950    IF (Lo(64)) WRITE (91,99220) iniv, sp2, sigm(Ipi(1,iniv) + 1),
     &                                i8, jg
         IF (Lo(64)) WRITE (85,99220) iniv, sp2, sigm(Ipi(1,iniv) + 1),
     &                                i8, jg
         IF (Lo(64)) WRITE (86,99220) iniv, sp2, sigm(Ipi(1,iniv) + 1),
     &                                i8, jg
         IF (ngx.NE.NFX) THEN
            njx = ngx + 1
            ngx = MIN0(NFX,njx + 4)
            WRITE (MW,99175) ((Cm(l,k),l = 6,10),k = njx,ngx)
99175       FORMAT (30X,5(4A4,A2))
            IF (ngx.LT.NFX) GOTO 1950
         ENDIF
      ENDIF
 2000 CALL SCAT(Sr,Mf,Jmax,Kmax,theta,Fcn,Ipj,Ipk,Cmb,Nco,Coe,Ipi,mt1,
     &          Am,Am(m2),Am(m3),Ex(1,kc),Wv,NCJ,Jmin,Xz,Lo)
      IF (KLT.EQ.1) THEN
         IF (lt(1)) Ex(2,kc) = 1.D0
         zx(kc) = (zx(kc)*zy(kc) + Ex(2,kc)*Ex(1,kc))
     &            /(zy(kc) + Ex(1,kc))
         zy(kc) = zy(kc) + Ex(1,kc)
         IF (ji.EQ.jif) THEN
            IF (lt(1)) zx(kc) = zx(kc)*zy(kc)
            IF (kc.EQ.2) THEN
               kc = 3
               theta = Donn(1,j) + Donn(4,j)
               GOTO 400
            ELSEIF (kc.EQ.3) THEN
               IF (lt(1)) THEN
                  zx(1) = (zx(1) + zx(2) + zx(3))/3.D0
               ELSE
                  zx(1) = (zx(1)*zy(1) + zx(2)*zy(2) + zx(3)*zy(3))
     &                    /(zy(1) + zy(2) + zy(3))
               ENDIF
               IF (Donn(5,j).NE.0.) Donn(6,j)
     &             = DSQRT(Donn(3,j)*Donn(3,j)
     &             + ((zx(2)-zx(3))*Donn(2,j)*Donn(5,j)
     &             /(2.D0*Donn(4,j)*zx(1)))**2)
               GOTO 500
            ELSE
               IF (Donn(4,j).EQ.0) GOTO 500
               kc = 2
               theta = Donn(1,j) - Donn(4,j)
               GOTO 400
            ENDIF
         ELSE
            ji = ji + 1
            GOTO 1800
         ENDIF
      ELSEIF (KLT.NE.3) THEN
         IF (.NOT.(Lo(181))) THEN
            Ex(i4 - 1,kc) = EXCn
            Ex(i4,kc) = Ex(2,kc) - EXCn
         ENDIF
      ENDIF
      IF (DTHe.EQ.0.) THEN
         IF (KLT.EQ.1 .OR. KLT.EQ.2) GOTO 1000
         IF (KLT.EQ.3) GOTO 1500
      ENDIF
      IF (kc.EQ.2) THEN
         kc = 3
         theta = thetb + DTHe
         GOTO 2000
      ELSEIF (kc.EQ.3) THEN
         IF (KLT.EQ.3) THEN
            DO k = JN1, JN2
               Ex(k - is,1) = (Ex(k - is,1) + Ex(k - is,2) + Ex(k - is,3
     &                        ))/3.D0
            ENDDO
            GOTO 1500
         ELSE
            aa = Ex(1,1) + Ex(1,2) + Ex(1,3)
            DO k = 2, i4
               IF ((k.GT.i5) .AND. (k.LE.i3)) THEN
                  Ex(k,1) = (Ex(k,1)*Ex(1,1) + Ex(k,2)*Ex(1,2) + Ex(k,3)
     &                      *Ex(1,3))/aa
               ELSE
                  Ex(k,1) = (Ex(k,1) + Ex(k,2) + Ex(k,3))/3.D0
               ENDIF
            ENDDO
            GOTO 1000
         ENDIF
      ELSE
         kc = 2
         theta = thetb - DTHe
         GOTO 2000
      ENDIF
99180 FORMAT ('1',5X,18A4//)
99185 FORMAT (6X,F10.3,5D20.5)
99190 FORMAT ('<ANG.DIS.>',F10.2,F10.5,F10.2,2I5)
C1012 FORMAT (D12.5)                                                    RESU-549
99195 FORMAT (D15.8)
99200 FORMAT (I5,F9.1,A1,'   AT',F10.5,' MEV',F14.5)
99205 FORMAT (/' SUM OF COMPOUND CONTRIBUTIONS',F14.6,' MILLIBARNS')
99210 FORMAT (1X,F10.3,D16.5,2X,5F18.7)
99215 FORMAT (/6X,'ANGLE ',6(4A4,A2))
99220 FORMAT (I5,F5.1,A1,I4,I5)
      END
C 01/01/04                                                      ECIS03  SCAT-000
      SUBROUTINE SCAT(Fr,Mf,Jmax,Kmax,Theta,Fcn,Ipj,Ipk,Cmb,Nco,Coe,Ipi,
     &                Mt1,Ab,A,B,Ex,Wv,Ncj,Jmin,Xz,Lo)
C COMPUTATION OF OBSERVABLES                                            SCAT-003
C INPUT VARIABLES: FR:    SCATTERING COEFF. IN THE HELICITY FORMALISM   SCAT-004
C                  MF:    TABLES OF HELICITY,DESCRIPTION OF OBSERVABLES,SCAT-005
C                         .... ETC   SEE DEPH AND OBSE                  SCAT-006
C                  JMAX:  DIMENSION FOR FR                              SCAT-007
C                  KMAX:  DIMENSION FOR FCN                             SCAT-008
C                  THETA: SCATTERING ANGLE                              SCAT-009
C                  FCN:   COMPOUND NUCLEUS COEFFICIENTS                 SCAT-010
C                  IPJ:   NUMBER OF J VALUES USED FOR SCATTERING        SCAT-011
C                  IPK:   NUMBER OF L VALUES USED FOR COMPOUND NUCLEUS  SCAT-012
C                  CMB:   ATOMIC MASS UNIT DIVIDED BY HBAR              SCAT-013
C                  NCO,COE:   LOOPS AND COEFF. FOR OBSERVABLES  SEE OBSESCAT-014
C                  IPI:   MULTIPLICITIES FOR PARTICLE AND TARGET NUCLEUSSCAT-015
C                  MT1:   MULTIPLICITY OF THE OUTGOING PARTICLE         SCAT-016
C                         SECOND DIMENSION OF THE WORKING SPACE AB      SCAT-017
C                  WV:    MASSES, ENERGIES, ETC..    SEE CALX           SCAT-018
C                  NCJ:   NUMBER OF FACTORISATIONS OF 1/(1-X*COS(THETA))SCAT-019
C                  JMIN:  TWICE MINIMUM OF THE TOTAL SPIN               SCAT-020
C                  XZ:    CONVERSION FACTOR TO MILLIBARNS               SCAT-021
C                  LO:    LOGICAL CONTROLS                              SCAT-022
C OUTPUT VARIABLES:EX:    DIFFER. CROSS-SECTION FOLLOWED BY OBSERVABLES SCAT-023
C WORKING SPACE:   AB:    AMPLITUDES IN THE C. M. OR THE LAB. SYSTEM    SCAT-024
C                  A:     FOR INDEPENDENT AMPLITUDES                    SCAT-025
C                  B:     TO STORE THE ROTATION MATRIX ELEMENTS         SCAT-026
C OTHER INPUT BY COMMON /RESC/                                          SCAT-027
C                  EXCN:   COMPOUND-NUCLEUS CROSS-SECTION               SCAT-028
C                  XA,XB:  CONSTANTS FOR CHANGE TO LABORATORY SYSTEM    SCAT-029
C                  JN1,JN2:FIRST AND LAST AMPLITUDE IN:THE TABLE        SCAT-030
C                  NTT:    NUMBER OF INDEPENDENT AMPLITUDES             SCAT-031
C                  MTT:    TOTAL NUMBER OF AMPLITUDES                   SCAT-032
C                  MT2:    MULTIPLICITY OF THE RESIDUAL TARGET          SCAT-033
C                  MT3:    MULTIPLICITY OF THE INCIDENT PARTICLE        SCAT-034
C                  MT4:    MULTIPLICITY OF THE INITIAL TARGET           SCAT-035
C                  NOUT:   NUCLEAR STATE CONSIDERED                     SCAT-036
C                  NIX,NFX:FIRST AND LAST OBSERVABLE IN THE TABLE       SCAT-037
C                  KLT:    1 FOR EXPERIMENTAL DATA                      SCAT-038
C                          2 FOR EQUIDISTANT ANGLES                     SCAT-039
C                          3 FOR PURE COMPOUND NUCLEUS                  SCAT-040
C                  LKT:    .TRUE. FOR CENTER OF MASS SYSTEM             SCAT-041
C***********************************************************************SCAT-042
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      REAL*8 EXCn, XA, XB
      INTEGER JN1, JN2, KLT, MT2, MT3, MT4, MTT, NFX, NIX, NOUt, NTT
      LOGICAL LKT
      COMMON /RESC  / EXCn, XA, XB, JN1, JN2, NTT, MTT, MT2, MT3, MT4,
     &                NOUt, NIX, NFX, KLT, LKT
C
C Dummy arguments
C
      REAL*8 Cmb, Theta, Xz
      INTEGER Ipj, Ipk, Jmax, Jmin, Kmax, Mt1, Ncj
      REAL*8 A(2,1), Ab(2,Mt1,1), B(2), Coe(1), Ex(2), Fcn(Kmax,1),
     &       Fr(2,Jmax,1), Wv(18,1)
      INTEGER Ipi(11,*), Mf(10,8), Nco(20,1)
      LOGICAL Lo(250)
C
C Local variables
C
      REAL*8 a3, dz, fs, thet, u1, u2, w1, w2, w3, w4, w5, w6, w7, w8,
     &       x, x1, x2, x3, x4, x5, xc, y1, y2, y4, y5
      DOUBLE PRECISION DABS, DATAN, DCOS, DLOG, DSIN, DSQRT
      INTEGER i, i1, i2, i3, i4, iex, ii, iii, iij, ij, is, iv, ix, ixi,
     &        ixj, ixx, ixy, j, j1, j2, j3, j4, jex, jn, jp, jq, k, k1,
     &        k2, l, l1, l2, l3, l4, lx1, lx2, m, m1, m2, m3, m4, m5,
     &        m6, mi1, mi2, mi3, mi4, ml, mo(18), mp1, mp2, mp3, mp4,
     &        mtp, mty, n, n1, n2, n3, n4
      LOGICAL ltt(6), lxy
C
C
      EQUIVALENCE (mo(1),mi1)
      EQUIVALENCE (mo(2),mp1)
      EQUIVALENCE (mo(3),n1)
      EQUIVALENCE (mo(4),l1)
      EQUIVALENCE (mo(5),mi2)
      EQUIVALENCE (mo(6),mp2)
      EQUIVALENCE (mo(7),n2)
      EQUIVALENCE (mo(8),l2)
      EQUIVALENCE (mo(9),mi3)
      EQUIVALENCE (mo(10),mp3)
      EQUIVALENCE (mo(11),n3)
      EQUIVALENCE (mo(12),l3)
      EQUIVALENCE (mo(13),mi4)
      EQUIVALENCE (mo(14),mp4)
      EQUIVALENCE (mo(15),n4)
      EQUIVALENCE (mo(16),l4)
      EQUIVALENCE (mo(17),jq)
      EQUIVALENCE (mo(18),jp)
      thet = 1.74532925D-02*Theta
      IF (KLT.EQ.3) THEN
C PURE COMPOUND NUCLEUS FOR LEVELS JN1 TO JN2                           SCAT-336
         is = JN1 - 1
         DO iv = JN1, JN2
            Ex(iv - is) = Fcn(1,iv)
            IF (Ipk.NE.1) THEN
               IF (LKT) THEN
                  w6 = DCOS(thet)
               ELSE
                  IF (Lo(8)) THEN
                     XA = DSQRT(1.D0 + (Wv(4,1)/(Cmb*Wv(2,1)))**2)
                     XB = DSQRT(Wv(1,iv)**2 + (Wv(4,iv)/Cmb)**2)*Wv(4,1)
     &                    /(Wv(4,iv)*Wv(2,1))
                  ELSE
                     XA = 1.D0
                     XB = Wv(4,1)*Wv(1,iv)/(Wv(4,iv)*Wv(2,1))
                  ENDIF
                  w6 = DCOS(thet)
                  w7 = DSIN(thet)
                  xc = (XA**2 - XB**2)*w7**2 + w6**2
                  IF (xc.GT.0.D0) xc = DSQRT(xc)
                  w6 = xc*w6 - XA*XB*w7**2
               ENDIF
               u1 = 0.D0
               u2 = 1.D0
               DO j = 2, Ipk
                  u1 = (DFLOAT(4*j - 7)*u2*w6 - DFLOAT(2*j - 4)*u1)
     &                 /DFLOAT(2*j - 3)
                  u2 = (DFLOAT(4*j - 5)*u1*w6 - DFLOAT(2*j - 3)*u2)
     &                 /DFLOAT(2*j - 2)
                  Ex(iv - is) = Ex(iv - is) + u2*Fcn(j,iv)
     &                          *DFLOAT(4*j - 3)
               ENDDO
            ENDIF
            IF (.NOT.LKT) Ex(iv - is) = Ex(iv - is)
     &                                  *DSQRT((XA*w6 + XB)**2 + 1.D0 -
     &                                  w6**2)**3/DABS(XA + XB*w6)
         ENDDO
      ELSE
C FOR EXPERIMENTAL DATA OR EQUIDISTANT ANGLES                           SCAT-055
         w6 = DCOS(thet)
         w7 = DSIN(thet)
         IF (.NOT.(LKT)) THEN
            xc = (XA**2 - XB**2)*w7**2 + w6**2
            IF (xc.GT.0.D0) xc = DSQRT(xc)
            a3 = xc*w6 - XA*XB*w7**2
            w7 = w7*(XB*w6 + xc*XA)
            w6 = a3
         ENDIF
         IF (.NOT.(Lo(181))) THEN
C COMPOUND NUCLEUS CONTRIBUTION                                         SCAT-065
            EXCn = Fcn(1,NOUt)
            IF (Ipk.NE.1) THEN
               u1 = 0.D0
               u2 = 1.D0
               DO j = 2, Ipk
                  u1 = (DFLOAT(4*j - 7)*u2*w6 - DFLOAT(2*j - 4)*u1)
     &                 /DFLOAT(2*j - 3)
                  u2 = (DFLOAT(4*j - 5)*u1*w6 - DFLOAT(2*j - 3)*u2)
     &                 /DFLOAT(2*j - 2)
                  EXCn = EXCn + u2*Fcn(j,NOUt)*DFLOAT(4*j - 3)
               ENDDO
            ENDIF
         ENDIF
C DIRECT INTERACTION CONTRIBUTION                                       SCAT-074
         w3 = 1.D0
         x2 = DSQRT(.5D0*(1.D0 + w6))
         x3 = DSQRT(.5D0*(1.D0 - w6))
         DO i = 1, NTT
            A(1,i) = 0.D0
            A(2,i) = 0.D0
         ENDDO
         IF (NOUt.EQ.1) THEN
C COMPUTATION OF COULOMB AMPLITUDES FOR THE ELASTIC CHANNEL             SCAT-082
            IF (Wv(5,1).NE.0. .AND. x3.GE.1.E-20) THEN
               w2 = 2.D0*Wv(5,1)*DLOG(x3)
               w3 = -0.5D0*Wv(5,1)/(x3*x3)
               w4 = w3*DCOS(w2)
               w5 = -w3*DSIN(w2)
               w3 = w3**2
               IF (.NOT.(Lo(118))) THEN
C SYMMETRISATION BETWEEN PROJECTILE AND TARGET                          SCAT-090
                  fs = DFLOAT(2*MOD(Ipi(2,1),2) - 1)
                  y2 = 2.D0*Wv(5,1)*DLOG(x2)
                  y1 = -0.5D0*Wv(5,1)/(x2*x2)
                  y4 = y1*DCOS(y2)
                  y5 = -y1*DSIN(y2)
                  w3 = w4**2 + w5**2 + y4**2 + y5**2 +
     &                 2.D0*fs*(w4*y4 + w5*y5)/DFLOAT(Ipi(2,1))
               ENDIF
C TRANSFORMATION OF THE COULOMB AMPLITUDES TO THE HELICITY FORMALISM    SCAT-097
               DO i = 1, NTT
                  m5 = Ipi(2,1) - 1
                  m6 = Ipi(3,1) - 1
                  m1 = 2*Mf(1,i) - 1 - Ipi(2,1)
                  m2 = Ipi(3,1) - 2*Mf(2,i) + 1
                  m3 = 2*Mf(3,i) - 1 - Ipi(2,1)
                  m4 = Ipi(3,1) - 2*Mf(4,i) + 1
                  CALL EMRO(m5,m3,m1,w6,x2,x3,B,1)
                  CALL EMRO(m6,m4,m2,w6,x2,x3,B(2),1)
                  w1 = B(1)*B(2)
                  A(1,i) = w4*w1
                  A(2,i) = w5*w1
                  IF (.NOT.(Lo(118))) THEN
                     CALL EMRO(m5,m3,m2,w6,x2,x3,B,1)
                     CALL EMRO(m6,m4,m1,w6,x2,x3,B(2),1)
                     y1 = B(1)*B(2)*fs
                     A(1,i) = A(1,i) + y4*y1
                     A(2,i) = A(2,i) + y5*y1
                  ENDIF
               ENDDO
               w3 = w3/Wv(4,1)**2
            ENDIF
         ENDIF
C COMPUTATION OF THE NUCLEAR AMPLITUDES                                 SCAT-118
         DO i = JN1, JN2
            ij = i - JN1 + 1
            w5 = 1.D0
            jn = Ipj
            IF (.NOT.(Lo(141))) THEN
C FACTORISATION OF 1/(1-X*COS(THETA)) WITH X AFTER THE SCAT. COEFF.     SCAT-124
               DO j = 1, Ncj
                  jn = jn + 1
                  w5 = w5/(1.D0 - Fr(1,jn,i)*w6)
               ENDDO
            ENDIF
            IF (Mf(6,i).EQ.99999) THEN
C ROTATION MATRIX ELEMENTS ARE THE SAME AS FOR THE LAST AMPLITUDE       SCAT-132
               w1 = w5*DFLOAT(Mf(10,i))
            ELSE
               CALL EMRO(Jmin,Mf(5,i),Mf(6,i),w6,x2,x3,B,jn)
               w1 = w5
            ENDIF
            DO j = 1, Ipj
               A(1,ij) = A(1,ij) + Fr(1,j,i)*w1*B(j)
               A(2,ij) = A(2,ij) + Fr(2,j,i)*w1*B(j)
            ENDDO
C CONSTRUCTION OF THE TOTAL AMPLITUDE MATRIX                            SCAT-137
            k1 = Mf(7,i)
            Ab(1,k1,1) = A(1,ij)
            Ab(2,k1,1) = A(2,ij)
            IF (Mf(8,i).NE.0) THEN
               k1 = Mf(8,i)
               w1 = DFLOAT(Mf(9,i))
               Ab(1,k1,1) = w1*A(1,ij)
               Ab(2,k1,1) = w1*A(2,ij)
            ENDIF
         ENDDO
C CROSS-SECTION                                                         SCAT-147
         dz = 0.D0
         IF (Lo(81)) dz = EXCn/Xz
         DO i1 = 1, MTT
            dz = dz + Ab(1,i1,1)*Ab(1,i1,1) + Ab(2,i1,1)*Ab(2,i1,1)
         ENDDO
         Ex(1) = dz*Xz
         lx1 = 0
         lx2 = 0
         jex = 1
C LOOP ON THE OBSERVABLES                                               SCAT-156
         DO iex = NIX, NFX
            jex = jex + 1
            IF (Mf(2,iex).GT.1) THEN
C ALL THE OTHER OBSERVABLES                                             SCAT-183
               Ex(jex) = 0.D0
               k1 = Mf(3,iex)
               k2 = Mf(4,iex)
C LOOP ON THE COMPONENTS OF THE DESCRIPTION OF THE OBSERVABLE           SCAT-187
               DO ii = k1, k2
                  ix = 1
                  ixy = 1
                  ixx = ixy + MT2*MT3*MT4
                  DO i = 1, 18
                     mo(i) = Nco(i,ii)
                  ENDDO
                  DO ij = 1, 6
                     ltt(ij) = MOD(jq,2).EQ.1
                     jq = jq/2
                  ENDDO
C COMPUTATION OF THE ANGLE FOR A CHANGE OF FRAME                        SCAT-197
                  IF (MOD(jp,1000).EQ.0) GOTO 30
                  lxy = .TRUE.
                  IF (lx1.EQ.MOD(jp,1000)) GOTO 25
                  lx1 = MOD(jp,1000)
                  lx2 = 0
                  n = Mt1
                  IF (lx1.EQ.1) THEN
C TRANSFORMATION TO THE LABORATORY SYSTEM FOR THE PARTICLE              SCAT-216
                     w1 = Wv(1,NOUt)
                     GOTO 10
                  ENDIF
    5             IF (DABS(w7).LT.1.D-5 .OR. n.EQ.1) GOTO 20
                  w1 = w6
                  w2 = -w7
                  GOTO 15
   10             IF (n.EQ.1) GOTO 20
                  IF (Lo(108)) THEN
                     w3 = DATAN
     &                    ( - w7/(Wv(4,NOUt)*Wv(2,1)/(Wv(4,1)*w1) + w6))
                  ELSE
                     w1 = Wv(4,NOUt)/(Cmb*w1)
                     w2 = Cmb*Wv(2,1)/Wv(4,1)
                     w3 = DATAN
     &                    ( - w7/(w6*DSQRT(w1*w1+1.D0) + w1*DSQRT(w2*w2+
     &                    1.D0)))
                  ENDIF
                  IF (DABS(w3).LT.1.D-5 .OR. n.EQ.1) GOTO 20
                  w1 = DCOS(w3)
                  w2 = DSIN(w3)
   15             DO i = 1, MTT
                     Ab(1,i,ixx) = 0.D0
                     Ab(2,i,ixx) = 0.D0
                  ENDDO
                  w3 = DSQRT(.5D0*(1.D0 - w1))
                  w5 = 1.D0
                  DO i = 2, n
                     w5 = -w5*w3
                  ENDDO
                  IF (DABS(w5).GE.1.D-30) THEN
                     w4 = 0.D0
                     w8 = .5D0*DFLOAT(n - 1)
                     mty = MT3*MT4
                     x3 = -w8
C TRANSFORMATION OF THE AMPLITUDE MATRIX                                SCAT-243
                     DO i = 1, n
                        IF (i.NE.1) THEN
                           w3 = w4
                           IF (i.NE.2)
     &                         w3 = w3*DSQRT(DFLOAT((i-2)*(n+2-i)))
                           w4 = w5
                           w5 = (2.D0*(x3*w1 - w8)*w4/w2 - w3)
     &                          /DSQRT(DFLOAT((i-1)*(n+1-i)))
                           x3 = x3 + 1.D0
                        ENDIF
                        x2 = 0.D0
                        x5 = w5
                        x4 = w8
                        DO j = i, n
                           IF (j.NE.i) THEN
                              x1 = x2
                              IF (j.NE.i + 1)
     &                            x1 = x1*DSQRT(DFLOAT((j-i-1)*(n+1-j+i)
     &                            ))
                              x2 = x5
                              x5 = (2.D0*(x3 - x4*w1)*x2/w2 - x1)
     &                             /DSQRT(DFLOAT((j-i)*(n+i-j)))
                              x4 = x4 - 1.D0
                           ENDIF
                           x = x5
                           l = 1 + j - i
                           m = n + 1 - i
                           DO k = 1, 2
                              DO i1 = 1, mty
                                 IF (lxy) THEN
                                    ixi = Mt1*(ixx + (i1 - 1)*MT2 - 1)
     &                                 + l
                                    ixj = Mt1*(ixy + (i1 - 1)*MT2 - 1)
     &                                 + m
                                    DO i4 = 1, MT2
                                       Ab(1,ixi,i4) = Ab(1,ixi,i4)
     &                                    + x*Ab(1,ixj,i4)
                                       Ab(2,ixi,i4) = Ab(2,ixi,i4)
     &                                    + x*Ab(2,ixj,i4)
                                    ENDDO
                                 ELSE
                                    ixi = ixx + (i1 - 1)*MT2 + l - 1
                                    ixj = ixy + (i1 - 1)*MT2 + m - 1
                                    DO i4 = 1, Mt1
                                       Ab(1,i4,ixi) = Ab(1,i4,ixi)
     &                                    + x*Ab(1,i4,ixj)
                                       Ab(2,i4,ixi) = Ab(2,i4,ixi)
     &                                    + x*Ab(2,i4,ixj)
                                    ENDDO
                                 ENDIF
                              ENDDO
                              IF (j.EQ.n) GOTO 16
                              ml = l
                              l = m
                              m = ml
                              IF (MOD(j + n,2).NE.0) x = -x
                           ENDDO
   16                   ENDDO
                     ENDDO
                     GOTO 25
                  ENDIF
   20             DO i = 1, MTT
                     Ab(1,i,ixx) = Ab(1,i,ixy)
                     Ab(2,i,ixx) = Ab(2,i,ixy)
                  ENDDO
   25             ix = ix + 1
                  ixy = ixx
                  ixx = ixy + MT2*MT3*MT4
                  IF (lxy) THEN
                     IF (jp/1000.NE.0) THEN
                        lxy = .FALSE.
                        IF (jp/1000.EQ.lx2) GOTO 25
                        lx2 = jp/1000
                        n = MT2
                        IF (lx2.NE.1) GOTO 5
C TRANSFORMATION TO THE LABORATORY SYSTEM FOR THE TARGET                SCAT-219
                        w1 = -Wv(2,NOUt)
                        GOTO 10
                     ENDIF
                  ENDIF
   30             IF (ltt(5)) THEN
                     x = Coe(10*ii)*dz
                  ELSE
                     x = 0.D0
C THE FOUR DO LOOPS                                                     SCAT-297
                     DO i1 = mi1, mp1
                        j1 = i1 - n1
                        x1 = Coe(10*ii)
                        IF (ltt(1)) x1 = Coe(10*ii)*Coe(i1 + l1)
                        DO i2 = mi2, mp2
                           j2 = i2 - n2
                           x2 = x1
                           IF (ltt(2)) x2 = x1*Coe(l2 - i2)
                           DO i3 = mi3, mp3
                              j3 = i3 - n3
                              x3 = x2
                              IF (ltt(3)) x3 = x2*Coe(i3 + l3)
                              DO i4 = mi4, mp4
                                 j4 = i4 - n4
                                 x4 = x3
                                 iij = i4 +
     &                                 MT2*(j2 - 1 + MT4*(j1 - 1 + MT3*
     &                                 (ix-1)))
                                 iii = j4 +
     &                                 MT2*(i2 - 1 + MT4*(i1 - 1 + MT3*
     &                                 (ix-1)))
                                 IF (ltt(4)) x4 = x3*Coe(l4 - i4)
                                 IF (ltt(6)) THEN
                                    x = x +
     &                                  (Ab(2,i3,iij)*Ab(1,j3,iii) - Ab
     &                                  (1,i3,iij)*Ab(2,j3,iii))*x4
                                 ELSE
                                    x = x +
     &                                  (Ab(1,i3,iij)*Ab(1,j3,iii) + Ab
     &                                  (2,i3,iij)*Ab(2,j3,iii))*x4
                                 ENDIF
                              ENDDO
                           ENDDO
                        ENDDO
                     ENDDO
                  ENDIF
                  Ex(jex) = Ex(jex) + x
               ENDDO
               Ex(jex) = Ex(jex)/dz
            ELSEIF (Mf(2,iex).LT.0) THEN
               Ex(jex) = 0.D0
               IF (Mf(2,iex).EQ. - 3) THEN
C VECTOR POLARISATION FOR SPIN 1/2 OR 1                                 SCAT-177
                  DO i1 = 1, MTT, Mt1
                     Ex(jex) = Ex(jex) + Ab(1,i1 + 1,1)*Ab(2,i1,1)
     &                         - Ab(2,i1 + 1,1)*Ab(1,i1,1)
                  ENDDO
                  Ex(jex) = 2.D0*Ex(jex)*Xz/Ex(1)
                  IF (Mt1.EQ.3) Ex(jex) = 1.22474487D0*Ex(jex)
               ELSE
                  mtp = Mt1*MT2*MT4
C VECTOR ANALYSING POWER FOR SPIN 1/2 OR 1                              SCAT-170
                  DO i1 = 1, mtp
                     i2 = i1 + mtp
                     Ex(jex) = Ex(jex) + Ab(2,i2,1)*Ab(1,i1,1)
     &                         - Ab(1,i2,1)*Ab(2,i1,1)
                  ENDDO
                  Ex(jex) = 2.D0*Ex(jex)*Xz/Ex(1)
                  IF (MT3.EQ.3) Ex(jex) = 1.22474487D0*Ex(jex)
               ENDIF
            ELSEIF (Mf(2,iex).EQ.0) THEN
C CROSS SECTION                                                         SCAT-161
               Ex(jex) = Ex(1)
            ELSE
C CROSS SECTION DIVIDED BY RUTHERFORD'S CROSS-SECTION                   SCAT-164
               Ex(jex) = Ex(1)/(10.D0*w3)
            ENDIF
         ENDDO
         IF (.NOT.(LKT)) THEN
            xc = DSQRT((XA*w6 + XB)**2 + w7**2)**3/DABS(XA + XB*w6)
            Ex(1) = Ex(1)*xc
         ENDIF
         IF (KLT.EQ.1 .OR. LKT) RETURN
         Ex(2) = Ex(2)*xc
         IF (Lo(81)) EXCn = EXCn*xc
         RETURN
      ENDIF
      END
C 01/01/04                                                      ECIS03  GRAL-000
      SUBROUTINE GRAL(Tgr,Grr,Frr,Mtheta,Mf,Cm,Id1,Lt1,Lt2)
C PLOTS OF CROSS-SECTION AND POLARISATIONS WITH OR WITHOUT EXPER. DATA  GRAL-002
C INPUT VARIABLES: TGR(I):    ANGLES FOR I=1,MTHETA                     GRAL-003
C                  GRR(J,I):  CALC. VALUES FOR J=1,ID1 AND I=1,MTHETA   GRAL-004
C                  FRR(I):    EXPER. VALUES FOR I=1,MTHETA              GRAL-005
C                  MTHETA:    NUMBER OF ANGLES                          GRAL-006
C                  MF:        DESCRIPTION OF DATA    SEE OBSE           GRAL-007
C                  ID1:       NUMBER OF DIFFERENT POLARISATIONS         GRAL-008
C                  LT1:       .TRUE. FOR POLARISATION,                  GRAL-009
C                             .FALSE. FOR CROSS SECTION                 GRAL-010
C                  LT2:       .TRUE. IF THERE ARE NO EXPERIMENTAL DATA  GRAL-011
C MF(I,J) IS A TITLE FOR I=6,10                                         GRAL-012
C MF(5,J) IS THE NUMBER OF POWER OF 10 IN A LINE FOR CROSS SECTIONS     GRAL-013
C  AND MUST BE 1 TO PLOT A POLARISATION (ALWAYS BETWEEN -1 AND 1)       GRAL-014
C***********************************************************************GRAL-015
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW
      COMMON /INOUT / MR, MW, MS
C
C Dummy arguments
C
      INTEGER Id1, Mtheta
      LOGICAL Lt1, Lt2
      CHARACTER*4 Cm(10,1)
      REAL*8 Frr(Mtheta), Grr(Id1,Mtheta), Tgr(Mtheta)
      INTEGER Mf(10,1)
C
C Local variables
C
      REAL*8 a4, a5, aa1, aa2, aa3
      DOUBLE PRECISION DLOG
      CHARACTER*1 gra(17), vgr(112)
      INTEGER i, j, k, kn, l, m, na1, na2, ng, nk
      INTEGER IDINT
C
C
      DATA gra/'+', '*', ',', ':', '-', '1', '2', '3', '4', '5', '6',
     &     '7', '8', '9', '0', ' ', '.'/
      IF (Lt1) THEN
C POLARISATION                                                          GRAL-081
         IF (Lt2) THEN
            nk = 0
            DO k = 1, Id1
               IF (Mf(5,k).EQ.1) THEN
                  kn = MOD(nk,15) + 1
                  nk = nk + 1
                  IF (nk.EQ.1) WRITE (MW,99040)
                  WRITE (MW,99045) gra(kn), (Cm(j,k),j = 6,10)
               ENDIF
            ENDDO
            IF (nk.EQ.0) RETURN
         ELSE
            WRITE (MW,99040)
            WRITE (MW,99045) gra(1), (Cm(j,1),j = 6,10)
            WRITE (MW,99050)
         ENDIF
         WRITE (MW,99005)
99005    FORMAT (//6X,' -1',7X,' -.8',6X,' -.6',6X,' -.4',6X,' -.2',7X,
     &           ' 0',8X,' .2',7X,' .4',7X,' .6',7X,' .8',7X,' 1')
         DO i = 1, 112
            vgr(i) = gra(16)
         ENDDO
         DO i = 1, 103
            vgr(i) = gra(17)
         ENDDO
         DO i = 2, 102, 10
            vgr(i) = gra(2)
         ENDDO
         WRITE (MW,99055) vgr
         DO i = 1, Mtheta
            DO m = 2, 102
               vgr(m) = gra(16)
            ENDDO
            vgr(52) = gra(17)
            nk = 0
            DO k = 1, Id1
               IF (Mf(5,k).EQ.1) THEN
                  nk = MOD(nk,15) + 1
                  m = IDINT(50.D0*Grr(k,i) + 52.5D0)
                  IF (m.GT.1 .AND. m.LE.102) vgr(m) = gra(nk)
               ENDIF
            ENDDO
            IF (.NOT.(Lt2)) THEN
               m = IDINT(50.D0*Frr(i) + 52.5D0)
               IF (m.GT.1 .AND. m.LE.102) vgr(m) = gra(2)
            ENDIF
            WRITE (MW,99060) Tgr(i), vgr
         ENDDO
         DO i = 1, 103
            vgr(i) = gra(17)
         ENDDO
         DO i = 2, 102, 10
            vgr(i) = gra(2)
         ENDDO
         WRITE (MW,99055) vgr
         RETURN
      ELSE
C CROSS SECTIONS                                                        GRAL-025
         IF ((Mf(5,1).LE.0) .OR. (Mf(5,1).GT.50)) RETURN
         na2 = 100/Mf(5,1)
         aa2 = DFLOAT(na2)
         WRITE (MW,99040)
         WRITE (MW,99045) gra(1), (Cm(j,1),j = 6,10)
         IF (.NOT.Lt2) WRITE (MW,99050)
         aa3 = aa2*DFLOAT((Mf(5,1) + 1)/2)
         aa1 = aa2/DLOG(10.D0)
         na1 = 101 - Mf(5,1)*na2
         a5 = 101.5D0
         DO i = 1, 112
            vgr(i) = gra(16)
         ENDDO
         DO i = na1, 112, na2
            vgr(i) = gra(6)
         ENDDO
         WRITE (MW,99055) vgr
         DO i = 1, 112
            vgr(i) = gra(17)
         ENDDO
         DO i = na1, 112, na2
            vgr(i) = gra(2)
         ENDDO
         WRITE (MW,99055) vgr
         DO i = 1, Mtheta
            DO j = 2, 111
               vgr(j) = gra(16)
            ENDDO
            DO j = na1, 111, na2
               vgr(j) = gra(17)
            ENDDO
            IF (Grr(1,i).LT.0.D0) GOTO 100
            a4 = aa1*DLOG(Grr(1,i)) + a5
            ng = 0
   20       IF (ng.GT.20) GOTO 200
            ng = ng + 1
            IF (a4.GT.2.D0) THEN
   30          IF (a4.LT.112.D0) THEN
                  l = IDINT(a4)
                  vgr(l) = gra(1)
                  IF (.NOT.(Lt2)) THEN
C EXPERIMENTAL DATA                                                     GRAL-069
                     IF (Frr(i).LT.0.D0) GOTO 300
                     l = IDINT(aa1*DLOG(Frr(i)) + a5)
                     IF (l.GT.1 .AND. l.LT.112) vgr(l) = gra(2)
                  ENDIF
                  WRITE (MW,99060) Tgr(i), vgr
               ELSE
                  a4 = a4 - aa3
                  a5 = a5 - aa3
                  WRITE (MW,99010)
99010             FORMAT (40(' *-'))
                  GOTO 30
               ENDIF
            ELSE
               a4 = a4 + aa3
               a5 = a5 + aa3
               WRITE (MW,99015)
99015          FORMAT (40(' -*'))
               GOTO 20
            ENDIF
         ENDDO
         DO i = 1, 112
            vgr(i) = gra(17)
         ENDDO
         DO i = na1, 112, na2
            vgr(i) = gra(2)
         ENDDO
         WRITE (MW,99055) vgr
         RETURN
      ENDIF
  100 WRITE (MW,99020) i, Grr(1,i)
99020 FORMAT (' FOR THE',I4,'TH LINE, CALCULATED VALUE =',D15.8)
      GOTO 400
  200 WRITE (MW,99025) i, Grr(1,i)
99025 FORMAT (' FOR THE',I4,
     &        'TH LINE, MORE THAN 20 TRANSLATIONS. CALCULATED VALUE =',
     &        D15.8)
      GOTO 400
  300 WRITE (MW,99030) i, Frr(i)
99030 FORMAT (' FOR THE',I4,'TH LINE, EXPERIMENTAL VALUE =',D15.8)
  400 WRITE (MW,99035)
99035 FORMAT (//' **** GRAPH CANCELED ****')
      RETURN
99040 FORMAT ('1')
99045 FORMAT (45X,A1,4X,5A4/)
99050 FORMAT (45X,'+    CALCULATED VALUE'/45X,
     &        '*    EXPERIMENTAL VALUE'/)
99055 FORMAT (7X,112A1)
99060 FORMAT (F7.2,112A1)
      END
C 01/01/04                                                      ECIS03  EMRO-000
      SUBROUTINE EMRO(Ia,I1,I2,X1,X2,X3,Res,Nx)
C  WITH IA=2*A, I1=2*F1 AND I2=2*F2, CALCULATES THE NX                  EMRO-002
C            A          A+1                     A+N-1                   EMRO-003
C           R (THETA), R (THETA) ............. R (THETA)                EMRO-004
C            F1,F2      F1,F2                   F1,F2                   EMRO-005
C IN THE ARRAY RES                                                      EMRO-006
C IT USES THE RECURRENCE RELATION OBTAINED FROM                         EMRO-007
C                      J                   J'                           EMRO-008
C        COS(THETA) * R (THETA)  = SUM  R (THETA)                       EMRO-009
C                      F1,F2       ON J'   F1,F2                        EMRO-010
C THETA IS GIVEN BY X1=COS(THETA),X2=COS(0.5*THETA),X3=SIN(0.5*THETA)   EMRO-011
C***********************************************************************EMRO-012
      IMPLICIT REAL*8(O - Z)
C
C
C Dummy arguments
C
      INTEGER I1, I2, Ia, Nx
      REAL*8 X1, X2, X3
      REAL*8 Res(Nx)
C
C Local variables
C
      DOUBLE PRECISION DSQRT
      INTEGER i, ja, kx, m, m1, m2, mj, nj, nr
      INTEGER IABS
      REAL*8 s1, s2, s3, sj, sl, x4, y2, z1, z2
C
C
      nr = 1
      ja = Ia
      m1 = IABS(I1 + I2)/2
      m2 = IABS(I1 - I2)/2
      mj = m1 + m2
      nj = mj
  100 IF (mj.LE.ja) THEN
         s1 = 0.D0
         s2 = 0.D0
         s3 = 1.D0
         IF (mj.EQ.0) THEN
C THE MAGNETIC QUANTUM NUMBERS ARE BOTH ZEROS                           EMRO-076
            kx = 3
            GOTO 400
C THE MAGNETIC QUANTUM NUMBERS ARE NOT BOTH ZEROS                       EMRO-031
         ELSEIF (m1.EQ.m2) THEN
C A MAGNETIC QUANTUM NUMBER IS ZERO                                     EMRO-060
            DO i = 1, m1
               s3 = s3*X3*X2*DSQRT(DFLOAT(m1 + i)/DFLOAT(i))
            ENDDO
            kx = 2
            IF (I1.GT.I2 .AND. (2*(m2/2).NE.m2)) s3 = -s3
            x4 = 0.D0
            GOTO 300
         ELSE
C NO MAGNETIC QUANTUM NUMBER IS ZERO                                    EMRO-033
            IF (m2.NE.0) THEN
               DO i = 1, m2
                  s3 = s3*X3*DSQRT(DFLOAT(m1 + i)/DFLOAT(i))
               ENDDO
            ENDIF
            IF (m1.NE.0) THEN
               DO m = 1, m1
                  s3 = s3*X2
               ENDDO
            ENDIF
            IF ((I1.GT.I2) .AND. (2*(m2/2).NE.m2)) s3 = -s3
            kx = 1
            x4 = 0.D0
            z1 = DFLOAT(m1)
            z2 = DFLOAT(m2)
            sl = (z1 - z2)/DFLOAT(nj + 2)
         ENDIF
      ELSE
         Res(nr) = 0.D0
         nr = nr + 1
         IF (nr.GT.Nx) RETURN
         ja = ja + 2
         GOTO 100
      ENDIF
  200 IF (ja.LE.nj) GOTO 500
C RECURRENCE                                                            EMRO-047
      nj = nj + 2
      s2 = s3
      z1 = z1 + 1.D0
      z2 = z2 + 1.D0
      mj = mj + 1
      x4 = x4 + 1.D0
      y2 = DSQRT(z1*z2*x4*DFLOAT(mj))
      sj = DFLOAT(nj)
      s3 = (sj - 1.D0)*sj*((X1 - sl)*s2 - s1)/(2.D0*y2)
      s1 = 2.D0*y2*s2/((sj + 1.D0)*sj)
      sl = sl*(sj - 2.D0)/(sj + 2.D0)
      GOTO 200
  300 IF (ja.LE.nj) GOTO 500
C RECURRENCE                                                            EMRO-067
      nj = nj + 2
      s2 = s3
      mj = mj + 1
      x4 = x4 + 1.D0
      y2 = DSQRT(x4*DFLOAT(mj))
      s3 = (DFLOAT(nj - 1)*X1*s2 - s1)/y2
      s1 = y2*s2
      GOTO 300
  400 IF (ja.GT.nj) THEN
C RECURRENCE                                                            EMRO-079
         nj = nj + 2
         sj = DFLOAT(nj/2)
         s2 = s3
         s3 = ((2.D0*sj - 1.D0)*X1*s2 - s1)/sj
         s1 = s2*sj
         GOTO 400
      ENDIF
C STORAGE                                                               EMRO-086
  500 Res(nr) = s3
      nr = nr + 1
      IF (nr.GT.Nx) RETURN
      ja = ja + 2
      IF (kx.EQ.1) GOTO 200
      IF (kx.EQ.2) GOTO 300
      IF (kx.EQ.3) GOTO 400
      END
C 01/01/04                                                      ECIS03  VARI-000
      SUBROUTINE VARI(Kf,Nw,Dw,Lo)
C IT ASSIGNS THE VALUES OF THE VARIABLE PARAMETERS AND                  VARI-002
C  PRINTS THE OUTPUT DURING THE SEARCH.                                 VARI-003
C  KF=1 BEFORE THE CALL TO THE SEARCH SUBROUTINES                       VARI-004
C    AT THE FIRST CALL(KE=0) DEFINES THE VARIABLES IN SEARCH            VARI-005
C    AT ANY CALL, PRINT CHI2 AND VARIABLES                              VARI-006
C  KF=0 AFTER THE CALL TO THE SEARCH SUBROUTINES                        VARI-007
C    AT ANY CALL SETS PARAMETERS TO THEIR VALUE FOR NEXT EVALUATION     VARI-008
C    AT THE LAST CALL(KE/=0) PRINT ERRORS AND PARAMETERS                VARI-009
C INPUT VALUES: KE:         RETURN CODE OF SEARCH                       VARI-010
C               NISE,NREC:  INDICATIONS ON PARAMETERS IN SEARCH, NUMBER VARI-011
C               NPOT,NPP:   OPTICAL MODEL PARAMETERS AND THEIR NUMBER   VARI-012
C               NBETA,NBET: DEFORMATIONS AND THEIR NUMBER               VARI-013
C               NPAA,NVA:   NUCLEAR PARAMETERS AND THEIR NUMBER         VARI-014
C               NT:         NUCLEAR MATRIX ELEMENTS AND THEIR NUMBER    VARI-015
C               NSCN:       LEVEL DENSITY DESCRIPTION FOR COMP. NUCLEUS VARI-016
C               NRES,NTOT:  DIFFERENCE BETWEEN EXP. AND CALC. VALUES ANDVARI-017
C                               THEIR NUMBER                            VARI-018
C               NTGX,NCOLR: DESCR. OF EXP. DISTR. AND THEIR NUMBER      VARI-019
C               NIW,NRC:    INTEGER, FLOATING POINTS RESULTS OF SEARCH  VARI-020
C                                  (SEE FITE)                           VARI-021
C               NXX:        VARIABLES IN SEARCH                         VARI-022
C               NWV,NIPP:   MASSES, SPINS, ....   SEE CALX              VARI-023
C               NIVY:       TABLE OF FORM FACTORS  (SEE REDM)           VARI-024
C               LO:        LOGICAL CONTROLS                             VARI-025
C BY COMMON /NCOMP/ NCONT: NUMBER OF CONTINUUM FOR COMPOUND NUCLEUS     VARI-026
C                   NCONS: NUMBER OF LEVEL DENSITIES NEEDED             VARI-027
C                   AZ(I): SPIN-ORBIT PARAMETRISATION FOR I-1 TO 6      VARI-028
C                          HAUSER FESHBACH PARAMETERS FOR J=7 TO 11     VARI-029
C                          GIANT DIPOLE RESONANCE FOR I=12 TO 16        VARI-030
C BY COMMON /DCHI/  : CURRENT AND MINIMUM CHI-SQUARE                    VARI-031
C                                                                       VARI-032
C PARAMETERS IN SEARCH ARE GIVEN BY NW(2-MOD(I,2),NISE+I/2)=INDEX(I)    VARI-033
C STARTING AT NW(1,NISE) FOR I=1 TO NREC:                               VARI-034
C   POSITIVE VALUE: PARAMETER DEFINED BY INDEX(I)                       VARI-035
C   NEGATIVE VALUE -L: PARAMETERS DEFINED BY INDEX(J) FOR J=L+1 TO      VARI-036
C     J=L+INDEX(L) ARE DEFINED AS THE SAME VARIABLE                     VARI-037
C      1-1000      OPTICAL MODEL,FOLDING PARAMETERS                     VARI-038
C   1001-2000      DEFORMATIONS FOR A GIVEN POTENTIAL   - LX(1)=.TRUE.  VARI-039
C   2001-3000      DEFORMATIONS FOR A GIVEN MULTIPOLE   - LX(1)=.TRUE.  VARI-040
C   3001-4000      INDIVIDUAL DEFORMATION               - LX(1)=.TRUE.  VARI-041
C   4001-5000      NUCLEAR MODEL PARAMETER              - LO(211)=.TRUE.VARI-042
C   5001-6000      NUCLEAR MATRIX ELEMENT               - LX(2)=.TRUE.  VARI-043
C   6001-7000      SPIN-ORBIT AND C. N. PARAMETRISATION                 VARI-044
C                  SPIN-ORBIT PARAMETRISATION           - LX(3)=.TRUE.  VARI-045
C                  BZ1, BZ2, BZ3, BZ4, BZ5      - LO(212)=LX(4)=.TRUE.  VARI-046
C                  TGO, BN, FNUG, EGD, GGD      - LO(212)=LX(5)=.TRUE.  VARI-047
C   FOR GAMMA      SA, UX, TAU, SG, E0, EX      - LO(212)=LX(6)=.TRUE.  VARI-048
C   FOR CONTINUUM  SA, UX, TAU, SG, E0, EX      - LO(214)=LX(7)=.TRUE.  VARI-049
C                  GAMMA TRANSMISSION FACTORS           - LX(8)=.TRUE.  VARI-050
C                  FISSION TR. COEF., DEGREE OF FREEDOM - LX(9)=.TRUE.  VARI-051
C   7001-8000      DISPERSION RELATIONS PARAMETRISATION - LO(213)=.TRUE.VARI-052
C  10001-99999     EXTERNAL OPTICAL MODEL (PARAMETERS ABOVE 1000)       VARI-053
C IT STOPS THE CALCULATION FOR AN INDEX OF PARAMETER OUT OF RANGE       VARI-054
C***********************************************************************VARI-055
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      REAL*8 ACN(2), ACOnv, AZ(18), BJM, CHI2, CHI2m, CONj, EITer, H,
     &       YY(3)
      INTEGER IDMt, IPK, IPM, IQM, IQMax, ISM, ITEmm, ITErm, JDM, JIT,
     &        JTH, JTX, KAB, KBA, KBC, KCC, KE, KMAx, KMIn, KXT, LMAx1,
     &        LMAx2, LMAx3, LMD, LMX, MCC, MCM(2), MIPi, MR, MS, MS1,
     &        MS2, MW, MWV, NAM1, NBEt, NBEta, NBT1, NCC, NCJ, NCO(4),
     &        NCOi, NCOll, NCOlr, NCOls, NCOlt, NCOns, NCOnt, NCT(6),
     &        NCX, NDE, NDOnn, NFA, NFAc, NFAm, NFG, NFIs, NFIss, NFM,
     &        NGAm, NIPh, NIPp, NISe, NIVq, NIVy, NIVz, NIW, NIXt, NJC,
     &        NJIt, NJMax, NLT, NNC, NNIv, NNVi, NNWi, NPAa, NPAd, NPAr,
     &        NPLace
      INTEGER NPOt, NPP, NRC, NRCo, NRD, NRDo, NREc, NREs, NRY, NRZ,
     &        NSCn, NSEc, NSM, NSP(3), NSPin, NT, NTGx, NTOt, NTX, NTY,
     &        NTZ, NVA, NVC1, NVC2, NWV, NXA, NXD, NXG, NXX
      COMMON /DCHI  / CHI2, CHI2m, YY
      COMMON /DECOU / NJIt, NIPp, NPAa, NWV, NIPh, NSCn, NPAr, NNIv,
     &                NFIs, NGAm, NPOt, NBEta, NFM, NTGx, NDOnn, NRC,
     &                NIW, NDE, NISe, NNVi, NNWi, NCC, MCC, NXA, NAM1,
     &                NFAc, NFAm, NPAd, NFG, NXG, NSM, NREs, NXX, NT,
     &                NIVq, NIVy, NIVz, NCOi, MIPi, NXD, MWV, NIXt, NTY,
     &                NTX, NRY, NRCo, NRDo, NVC1, NVC2, NNC, NCX, IDMt,
     &                NCOll, NJMax, ITErm, NPP, JDM, JIT, NSEc, LMD,
     &                MCM, NCOls, NCOlt, KMAx, KMIn, NVA, NBEt, NBT1,
     &                LMX, LMAx1, NLT, ISM, IQM, IQMax, MS1, MS2, NCT,
     &                KBA, KAB, KBC, KCC, NJC, JTX, JTH, NCOlr, NREc,
     &                NTOt, NFA, LMAx2, KE, ITEmm, NPLace, KXT, NRZ,
     &                NTZ, LMAx3, IPM, IPK, BJM, EITer, ACOnv, CONj, H,
     &                NSPin
      COMMON /INOUT / MR, MW, MS
      COMMON /NCOMP / NSP, NFIss, NRD, NCOnt, NCJ, NCOns, NCO, ACN, AZ
C
C Dummy arguments
C
      INTEGER Kf
      REAL*8 Dw(*)
      LOGICAL Lo(250)
      INTEGER Nw(2,*)
C
C Local variables
C
      REAL*8 am3, dm, ex, ey, ez, r0(8), rap
      INTEGER i, i1, i2, i3, i4, ij, it1, iti, ityw, ityz, iv, j, j1,
     &        j2, jj, jk, jn, k, k1, k2, l, nma, nmb, npo, nst, nvma,
     &        nvmb
      INTEGER IABS
      LOGICAL lx(9)
C
C
C TRANSFER BETWEEN VARIABLES AND PARAMETERS                             VARI-071
      IF (Kf.NE.1 .OR. KE.EQ.0) THEN
         DO i = 211, 214
            Lo(i) = .FALSE.
         ENDDO
         DO i = 1, 9
            lx(i) = .FALSE.
         ENDDO
         DO i = 1, NREc
            j = Nw(2 - MOD(i,2),NISe + (i - 1)/2)
            jj = IABS(j)
            IF (j.NE.jj) THEN
               j1 = jj + 1
               j2 = j1 + Nw(2 - MOD(jj,2),NISe + (jj - 1)/2) - 1
            ELSE
               j1 = i
               j2 = i
            ENDIF
            DO k = j1, j2
               j = Nw(2 - MOD(k,2),NISe + (k - 1)/2)
               IF ((j.GT.1000) .AND. (j.LE.10000)) THEN
                  j = j - 1000
                  IF (j.GT.1000) THEN
                     j = j - 1000
                     IF (j.GT.1000) THEN
                        j = j - 1000
                        IF (j.GT.1000) THEN
                           j = j - 1000
                           IF (j.GT.1000) THEN
                              j = j - 1000
                              IF (j.GT.1000) THEN
                                 j = j - 1000
                                 IF (j.GT.1000) THEN
                                    j = j - 1000
                                    IF (j.GT.12*NPP) GOTO 100
                                    jn = j/12
                                    jj = j - 12*jn
                                    IF ((jj.GE.6) .AND. (jj.NE.12)) THEN
                                       IF ((Nw(1,NIPp+15*jn+1).EQ.0)
     &                                    .AND. (j.LE.8)) GOTO 100
                                       IF ((Nw(2,NIPp+15*jn+1).EQ.0)
     &                                    .AND. (j.GT.8)) GOTO 100
                                    ENDIF
                                    jk = NIPp + 2 + jj + 3*jn
                                    Lo(213) = .TRUE.
                                 ELSE
C  SPIN-ORBIT AND H. F. PARAMETRISATION                                 VARI-166
                                    IF (j.GT.16 + 6*NCOns + NRD + NFIss)
     &                                  GOTO 100
                                    IF (Lo(181) .AND. j.GT.6) GOTO 100
                                    IF (j.GT.16) THEN
                                       j = j - 16 + (j - 17)/6
                                       IF (j.GT.7*NCOns) THEN
                                         j = j - 7*NCOns
                                         IF (j.GT.NRD) THEN
                                         j = j - NRD
                                         lx(9) = .TRUE.
                                         jk = NFIs + j - 1
                                         ELSE
                                         lx(8) = .TRUE.
                                         jk = NGAm + j - 1
                                         ENDIF
                                       ELSE
                                         IF (j.LE.7*(NCOns - NCOnt))
     &                                      lx(6) = .TRUE.
                                         IF (j.GT.7*(NCOns - NCOnt))
     &                                      lx(7) = .TRUE.
                                         jk = NSCn + j - 1
                                       ENDIF
                                    ELSE
                                       IF (Lo(104) .AND. j.LE.6)
     &                                    GOTO 100
                                       lx(3) = lx(3) .OR. (j.LE.6)
                                       IF (lx(3) .AND. Lo(104)) GOTO 100
                                       IF (j.GT.6) THEN
                                         lx(4) = lx(4) .OR. (j.LE.11)
                                         lx(5) = lx(5) .OR. (j.GT.11)
                                         IF (Lo(181)) GOTO 100
                                         IF (Lo(82) .AND. j.GT.9)
     &                                      GOTO 100
                                         IF (Lo(186) .AND. j.GT.11)
     &                                      GOTO 100
                                         IF (.NOT.(Lo(82))) THEN
                                         IF (j.NE.9 .AND. j.LE.11 .AND.
     &                                      Lo(87)) GOTO 100
                                         IF (.NOT.(Lo(87))) THEN
                                         IF (j.EQ.7) GOTO 100
                                         IF (AZ(8).NE.0.D0 .AND.
     &                                      j.GT.8 .AND. j.LE.11)
     &                                      GOTO 100
                                         IF (AZ(8).EQ.0.D0 .AND. j.EQ.8)
     &                                      GOTO 100
                                         ENDIF
                                         ENDIF
                                       ENDIF
                                       IF (Kf.NE.0) THEN
                                         Dw(NXX + i - 1) = AZ(j)
                                         GOTO 50
                                       ELSE
                                         IF (k.EQ.j1)
     &                                      rap = Dw(NXX + i - 1)/AZ(j)
                                         AZ(j) = rap*AZ(j)
                                         GOTO 20
                                       ENDIF
                                    ENDIF
                                 ENDIF
                              ELSE
C  NUCLEAR MATRIX ELEMENTS                                              VARI-159
                                 IF (3*j.GT.NIVq - NT) GOTO 100
                                 lx(2) = .TRUE.
                                 jk = NT + 3*j - 1
                              ENDIF
                           ELSE
C  NUCLEAR PARAMETERS                                                   VARI-152
                              IF (j.GT.NVA) GOTO 100
                              Lo(211) = .TRUE.
                              jk = NPAa + j - 1
                           ENDIF
                        ELSE
C INDIVIDUAL DEFORMATIONS                                               VARI-145
                           IF ((j.GT.10*NBEt) .OR. (MOD(j,10).GT.8))
     &                         GOTO 100
                           lx(1) = .TRUE.
                           jk = NBEta + j - 1 - (j - 10)/10
                        ENDIF
                        IF (Kf.EQ.0) THEN
                           IF (k.EQ.j1) rap = Dw(NXX + i - 1)/Dw(jk)
                           Dw(jk) = rap*Dw(jk)
                        ELSE
                           Dw(NXX + i - 1) = Dw(jk)
                           GOTO 50
                        ENDIF
                     ELSE
C DEFORMATIONS FOR A GIVEN MULTIPOLE                                    VARI-128
                        IF (j.GT.NBEt) GOTO 100
                        lx(1) = .TRUE.
                        DO k1 = 1, 8
                           IF (Dw(NBEta + 9*j + k1 - 10).NE.0.D0) GOTO 2
                        ENDDO
                        WRITE (MW,99005) i,
     &                         Nw(2 - MOD(k,2),NISe + (k - 1)/2), j
99005                   FORMAT (' THE VARIABLE',I3,
     &                          ' CANNOT BE USED BECAUSE ',I5,
     &                          '  IS A VARIATION FOR A GIVEN MULTIPOLE'
     &                          ,I3,' AND THEY ARE ZERO')
                        GOTO 200
    2                   IF (Kf.EQ.0) THEN
                           IF (k.EQ.j1) rap = Dw(NXX + i - 1)
     &                         /Dw(NBEta + 9*j + k1 - 10)
                           DO l = k1, 8
                              Dw(NBEta + 9*j + l - 10)
     &                           = Dw(NBEta + 9*j + l - 10)*rap
                           ENDDO
                        ELSE
                           Dw(NXX + i - 1) = Dw(NBEta + 9*j + k1 - 10)
                           GOTO 50
                        ENDIF
                     ENDIF
                  ELSE
                     IF (j.GT.6) GOTO 100
C  DEFORMATIONS FOR A GIVEN POTENTIAL                                   VARI-109
                     lx(1) = .TRUE.
                     DO k1 = 1, NBEt
                        IF (.NOT.(Lo(1) .AND. Lo(3) .AND. Nw(2,NBEta+9*
     &                      k1-1).NE.0)) THEN
                           IF (Dw(NBEta + 9*k1 + j - 10).NE.0.D0) GOTO 4
                        ENDIF
                     ENDDO
                     WRITE (MW,99010) i,
     &                                Nw(2 - MOD(k,2),NISe + (k - 1)/2),
     &                                j
99010                FORMAT (' THE VARIABLE',I3,
     &                       ' CANNOT BE USED BECAUSE ',I5,
     &               '  IS A VARIATION OF THE DEFORMATIONS OF POTENTIAL'
     &               ,I3,' WHICH ARE ZERO')
                     GOTO 200
    4                IF (Kf.EQ.0) THEN
                        IF (k.EQ.j1) rap = Dw(NXX + i - 1)
     &                      /Dw(NBEta + 9*k1 + j - 10)
                        DO l = k1, NBEt
                           IF (.NOT.(Lo(1) .AND. Lo(3) .AND. Nw(2,NBEta+
     &                         9*k1-1).NE.0)) Dw(NBEta + 9*l + j - 10)
     &                         = Dw(NBEta + 9*l + j - 10)*rap
                        ENDDO
                     ELSE
                        Dw(NXX + i - 1) = Dw(NBEta + 9*k1 + j - 10)
                        GOTO 50
                     ENDIF
                  ENDIF
               ELSE
C OPTICAL MODEL AND FOLDING PARAMETERS                                  VARI-089
                  IF (j.GT.10000) j = j - 9000
                  IF (Lo(7)) THEN
C EXTERNAL OPTICAL PARAMETERS                                           VARI-094
                     i1 = Nw(1,NPOt) - 1
                     DO l = 1, i1
                        IF (j.GE.Nw(1,NPOt + l) .AND.
     &                      j.LE.Nw(2,NPOt + l)) GOTO 5
                     ENDDO
                     GOTO 100
                  ELSEIF (j.GT.34*NPP .OR. MOD(j,34).EQ.19) THEN
                     GOTO 100
                  ENDIF
    5             IF (Kf.NE.0) THEN
                     Dw(NXX + i - 1) = Dw(NPOt + j - 1)
                     GOTO 50
                  ELSE
                     IF (k.EQ.j1) rap = Dw(NXX + i - 1)/Dw(NPOt + j - 1)
                     Dw(NPOt + j - 1) = rap*Dw(NPOt + j - 1)
                  ENDIF
               ENDIF
   20       ENDDO
   50    ENDDO
         Lo(212) = lx(4) .OR. lx(5) .OR. lx(6)
         Lo(214) = lx(7)
      ENDIF
      IF (Kf.EQ.0) THEN
         IF (KE.EQ.1) RETURN
         WRITE (MW,99015) Nw(1,NIW + 1), Nw(2,NIW), CHI2, KE, YY(1)
99015    FORMAT (/' RUN',I4,'   MAX =',I4,'   ***** CHI2 =',D18.10,
     &           ' *****',5X,'KE =',I2,5X,'W(1) =',F12.4)
         IF (KE*(KE - 3).NE.0 .OR. Dw(NRC).LE.0.D0) THEN
            WRITE (MW,99020)
99020       FORMAT (//' NO INFORMATION ON ERRORS')
         ELSE
            WRITE (MW,99025) Nw(2,NIW + 1), YY(3),
     &                       (Dw(NRC + i - 1),i = 1,NREc)
99025       FORMAT (//
     &' STANDARD ERRORS (VARIANCE AT BEST FIT EQUAL TO DEGREE OF FREEDOM
     &:',I6,'.RENORMALISATION FACTOR',D15.6,' )'/(1P,8D15.6))
            WRITE (MW,99030) (Dw(NRC + NREc + i - 1),i = 1,NREc)
99030       FORMAT (/' ERROR ENHANCEMENTS (MULTI/SINGLE VARIABLE ERROR)'
     &              /(1P,8D15.6))
            WRITE (MW,99035)
99035       FORMAT (/' ERROR CORRELATION MATRIX')
            l = 2*NREc + NRC - 1
            DO i = 1, NREc
               k = l + 1
               l = l + i
               WRITE (MW,99220) (Dw(j),j = k,l)
            ENDDO
         ENDIF
         IF (KE.EQ.0) WRITE (MW,99040)
99040    FORMAT (//' SEARCH ENDED WITHOUT ERRORS')
         IF (KE.EQ.2) WRITE (MW,99045)
99045    FORMAT (//' SEARCH INTERRUPTED BY USER')
         IF (KE.EQ.3) WRITE (MW,99050)
99050    FORMAT (//' SEARCH ENDED BY NUMBER OF EVALUATIONS')
         IF (KE.EQ.4) WRITE (MW,99055)
99055    FORMAT (//' SEARCH ENDED FOR ROUNDING ERRORS')
         IF (KE.EQ.5) WRITE (MW,99060) Nw(2,NIW + 1)
99060    FORMAT (//
     &' SEARCH ENDED BECAUSE THE FUNCTIONS DO NOT DEPEND ON THE VARIABLE
     &',I6)
         IF (KE.EQ.6) WRITE (MW,99065) Nw(1,NIW + 1), Nw(2,NIW + 1)
99065    FORMAT (//' SEARCH ENDED BECAUSE VARIABLES',2I6,
     &           ' ARE USELESS IN PREPARATORY CALLS')
         IF (KE.EQ.7) WRITE (MW,99070) NTOt, NREc
99070    FORMAT (//' SEARCH ENDED BECAUSE THE NUMBER OF PARAMETERS',I4,
     &           ' IS LARGER THAN THE NUMBER OF DATA',I4)
C END OF THE SEARCH                                                     VARI-254
         Lo(216) = .FALSE.
         Lo(218) = .TRUE.
         IF (.NOT.(Lo(76))) THEN
            DO i = 51, 65
               Lo(i) = Lo(i + 185)
               Lo(i + 100) = .NOT.Lo(i)
            ENDDO
         ENDIF
         Lo(220) = Lo(153) .AND. Lo(155) .AND. Lo(156) .AND. Lo(157)
     &             .AND. Lo(158) .AND. Lo(160) .AND. Lo(162) .AND.
     &             Lo(164)
         IF (Lo(41)) Lo(220) = Lo(220) .AND. Lo(165)
         Lo(219) = Lo(220) .AND. Lo(151) .AND. Lo(164) .AND. Lo(165)
         Lo(220) = CHI2.EQ.CHI2m .AND. Lo(220)
C OUTPUT OF FINAL PARAMETERS                                            VARI-266
         WRITE (MW,99075) (Lo(j),j = 1,100)
99075    FORMAT ('1'/' ******* FINAL RESULTS *******'//
     &           ' **** FIRST CONTROL CARD ****',2X,'1 ',9(' 1'),' 2 ',
     &           9(' 2'),' 3 ',9(' 3'),' 4 ',9(' 4'),' 5'/11X,
     &           5('  1 2 3 4 5 6 7 8 9 0')/11X,5(1X,10L2)
     &           //' *** SECOND CONTROL CARD ****',2X,'1 ',9(' 1'),
     &           ' 2 ',9(' 2'),' 3 ',9(' 3'),' 4 ',9(' 4'),' 5'/11X,
     &           5('  1 2 3 4 5 6 7 8 9 0')/11X,5(1X,10L2)/)
         IF (Lo(7)) THEN
            nvma = Nw(1,NPOt)
            WRITE (MW,99080)
99080       FORMAT (/' **** EXTERNAL POTENTIAL PARAMETERS ****'/)
   60       IF (nvma.GE.Nw(2,NPOt)) THEN
               nvmb = Nw(2,NPOt + 1)
               IF (nvma.LT.nvmb) WRITE (MW,99085)
     &                                  (Dw(NPOt + i - 1),i = nvma,nvmb)
99085          FORMAT (' FOLDING PARAMETERS:',3F10.5/(20X,3F10.5))
            ELSE
               i1 = Nw(1,nvma + NPOt - 1)
               iv = Nw(2,nvma + NPOt - 1)
               IF (iv.EQ.16) THEN
                  nvma = i3 + 1
                  GOTO 60
               ELSE
                  it1 = MOD(i1 - 1,8) + 1
                  j1 = (i1 - 1)/8
                  i2 = Nw(1,NPOt + i1 - 5)
                  i3 = Nw(2,NPOt + i1 - 5)
                  IF (iv.LT.0) THEN
                     WRITE (MW,99090) it1, j1, i2, i3,
     &                                (Dw(NPOt + i - 1),i = i2,i3)
99090                FORMAT (' (',I1,',',I2,
     &                      ') GIVEN BY POINTS WITH THE PARAMETERS FROM'
     &                      ,I4,' TO',I4/1P,2D15.6/(1P,8D15.6))
                     nvma = i3 + 1
                     GOTO 60
                  ELSEIF (iv.GE.9) THEN
                     WRITE (MW,99095) it1, j1, iv, i2, i3,
     &                                (Dw(NPOt + i - 1),i = i2,i3)
99095                FORMAT (' (',I1,',',I2,') TYPE',I3,' FROM',I4,
     &                       ' TO',I4/1P,2D15.6/(1P,8D15.6))
                     nvma = i3 + 1
                     GOTO 60
                  ELSEIF (iv.GT.6) THEN
                     WRITE (MW,99225) it1, j1, iv, i2, i3,
     &                                (Dw(NPOt + i - 1),i = i2,i3)
                     nvma = i3 + 1
                     GOTO 60
                  ELSE
                     WRITE (MW,99225) it1, j1, iv, i2, i3,
     &                                (Dw(NPOt + 3*i - 1),i = i2,i3)
                     nst = Nw(1,NPOt + nvma + 1)
                     IF (nst.LE.0) THEN
                        k = IABS(nst)
                        ex = Dw(NWV + 18*k - 17)**.33333333333333D0
                        ey = ex
                        IF (Lo(16)) ex = ex + Dw(NWV + 18*k - 18)
     &                      **.33333333333333D0
                        ey = ey/ex
                        ex = Dw(NPOt + i2)/ex
                        ez = Dw(NPOt + i - 1)
                        IF (.NOT.(Lo(116) .OR. j1.LE.NPP)) THEN
                           ityz = iv
                           IF (ityz.GE.5) ityz = ityz - 4
                           ityw = 1
                           IF (it1.GT.6) THEN
                              iti = 7*(j1 - NPP)
                              ityw = ityw*Nw(2 - MOD(iti,2),
     &                               NIVy + (iti - 1)/2)
                           ENDIF
                           IF (Lo(6)) ityw = ityw - 1
                           IF (ityz.GT.1) ez = ez/ey**((ityz - 1)*ityw)
                        ENDIF
                        WRITE (MW,99100) ez, ex
99100                   FORMAT (' VALUES READ:',F12.6,3X,F9.6)
                     ENDIF
                     IF ((iv.NE.5) .AND. (iv.NE.6)) THEN
                        nvma = i3 + 1
                        GOTO 60
                     ELSE
                        WRITE (MW,99105) i2, i3,
     &                         (Dw(NPOt + i - 1),i = i2,i3)
99105                   FORMAT (' DEFORMATIONS: PARAMETERS FROM',I4,
     &                          ' TO ',I4,10X,4D18.6/(52X,4D18.6))
                        IF (nst.GT.0) THEN
                           nvma = i3 + 1
                           GOTO 60
                        ELSE
                           WRITE (MW,99110)
99110                      FORMAT (' DEFORMATIONS READ:')
                           nmb = 0
   62                      nma = i2
                           i4 = i2 + 7
                           DO i = i2, i4
                              nmb = nmb + 1
                              j = i - nma
                              IF (it1.LT.7) j = 0
                              IF (Lo(106)) j = j + 1
                              r0(nmb) = Dw(NPOt + i - 1)/ey**j
                           ENDDO
                           WRITE (MW,99220) (r0(i),i = 1,nmb)
                           i2 = i2 + 8
                           IF (i2.LE.i3) GOTO 62
                           nvma = i3 + 1
                           GOTO 60
                        ENDIF
                     ENDIF
                  ENDIF
               ENDIF
            ENDIF
         ELSE
            npo = NPOt - 1
            DO j = 1, NPP
               ij = IABS(Nw(1,NIPp + 15*j - 15))
               am3 = Dw(NWV + 18*ij - 17)**.33333333333333D0
               IF (Lo(16)) am3 = am3 + Dw(NWV + 18*ij - 18)
     &                           **.33333333333333D0
               WRITE (MW,99115) j, am3
99115          FORMAT (/' OPTICAL POTENTIALS  **',I3,
     &                 ' **     REDUCED RADIUS MULTIPLIED BY  ',D15.6/)
               DO i = 1, 8
                  r0(i) = Dw(npo + 3*i - 1)/am3
               ENDDO
               WRITE (MW,99120) (Dw(npo + 3*i - 2),Dw(npo + 3*i - 1),
     &                          r0(i),Dw(npo + 3*i),i = 1,8),
     &                          Dw(npo + 25)
99120          FORMAT (' VOLUME REAL POTENTIAL',11X,'DEPTH',F12.6,
     &                 ' MEV  RADIUS',F10.6,' FERMI (REDUCED',F9.6,
     &                 ')  DIFFUSENESS',F9.6,
     &                 ' FERMI'/' VOLUME IMAGINARY POTENTIAL',6X,
     &                 'DEPTH',F12.6,' MEV  RADIUS',F10.6,
     &                 ' FERMI (REDUCED',F9.6,')  DIFFUSENESS',F9.6,
     &                 ' FERMI'/' SURFACE REAL POTENTIAL',10X,'DEPTH',
     &                 F12.6,' MEV  RADIUS',F10.6,' FERMI (REDUCED',
     &                 F9.6,')  DIFFUSENESS',F9.6,
     &                 ' FERMI'/' SURFACE IMAGINARY POTENTIAL',5X,
     &                 'DEPTH',F12.6,' MEV  RADIUS',F10.6,
     &                 ' FERMI (REDUCED',F9.6,')  DIFFUSENESS',F9.6,
     &                 ' FERMI'/' REAL SPIN-ORBIT POTENTIAL',7X,'DEPTH',
     &                 F12.6,' MEV  RADIUS',F10.6,' FERMI (REDUCED',
     &                 F9.6,')  DIFFUSENESS',F9.6,
     &                 ' FERMI'/' IMAGINARY SPIN-ORBIT POTENTIAL  DEPTH'
     &                 ,F12.6,' MEV  RADIUS',F10.6,' FERMI (REDUCED',
     &                 F9.6,')  DIFFUSENESS',F9.6,
     &                 ' FERMI'/' COULOMB POTENTIAL  PRODUCT OF CHARGES'
     &                 ,F12.6,6X,'RADIUS',F10.6,' FERMI (REDUCED',F9.6,
     &                 ')  DIFFUSENESS',F9.6,
     &                 ' FERMI'/' SPIN-ORBIT COULOMB POTENTIAL    DEPTH'
     &                 ,F12.6,6X,'RADIUS',F10.6,' FERMI (REDUCED',F9.6,
     &                 ')  DIFFUSENESS',F9.6,' FERMI'/14X,
     &                 'THIRD CHARGE PARAMETER',F9.6)
               IF (Lo(17)) WRITE (MW,99125) (Dw(npo + i),i = 26,34)
99125          FORMAT (/' *** FOLDING MODEL ***'/' REAL PART',10X,'V =',
     &                 F10.4,6X,'R =',F10.4,6X,'A =',
     &                 F10.4/' IMAGINARY PART',6X,'V =',F10.4,6X,'R =',
     &                 F10.4,6X,'A =',F10.4/' COULOMB PART',7X,'V =',
     &                 F10.4,6X,'R =',F10.4,6X,'A =',F10.4)
               npo = npo + 1
            ENDDO
         ENDIF
         IF (lx(1)) THEN
            WRITE (MW,99130) (i,Nw(1,NBEta + 9*i - 1),Nw(2,NBEta + 9*i -
     &                       1),(Dw(NBEta+9*i+j-10),j = 1,8),i = 1,NBEt)
99130       FORMAT (/' BETA(I,J) FOR  L   K',9X,'V',9X,'W',8X,'VS',8X,
     &              'WS',7X,'VSO',7X,'WSO',6X,
     &              'COUL S.O. COUL'/(5X,I5,5X,I2,2X,I2,2X,8F10.5))
            IF (.NOT.(Lo(116))) THEN
               dm = Dw(NWV + 1)
     &              **.33333333333333D0/(Dw(NWV)**.33333333333333D0 +
     &              Dw(NWV + 1)**.33333333333333D0)
               WRITE (MW,99135)
99135          FORMAT (/10X,'WITHOUT HEAVY ION CORRECTION'/)
               DO i = 1, NBEt
                  k1 = 0
                  k2 = 0
                  IF (Lo(3)) THEN
                     IF (.NOT.(Lo(1))) THEN
                        k1 = i - 1
                        k2 = k1*Nw(1,NBEta + 9*i - 1)
                        GOTO 65
                     ELSEIF (Nw(2,NBEta + 9*i - 1).NE.0) THEN
                        GOTO 65
                     ENDIF
                  ENDIF
                  k1 = 1
                  k2 = Nw(1,NBEta + 9*i - 1)
   65             IF (.NOT.(Lo(106))) THEN
                     k2 = k2 - k1
                     k1 = 0
                  ENDIF
                  DO j = 1, 6
                     r0(j) = Dw(NBEta + 9*i + j - 10)/dm**k1
                  ENDDO
                  r0(7) = Dw(NBEta + 9*i - 3)/dm**k2
                  r0(8) = Dw(NBEta + 9*i - 2)/dm**k2
                  WRITE (MW,99140) i, Nw(1,NBEta + 9*i - 1),
     &                             Nw(2,NBEta + 9*i - 1), r0
99140             FORMAT (5X,I5,5X,I2,2X,I2,2X,8F10.5)
               ENDDO
            ENDIF
         ENDIF
         IF (Lo(211)) WRITE (MW,99145) (Dw(NPAa + j - 1),i = 1,NVA)
99145    FORMAT (/' *** NUCLEAR VARIABLES ***'//(1X,6F20.6))
         IF (lx(2)) WRITE (MW,99150) (Dw(i + 2),i = NT,NIVq,3)
99150    FORMAT (/' *** NUCLEAR MATRIX ELEMENTS ***'//(1X,6F20.6))
         IF (lx(3)) WRITE (MW,99155) (AZ(i),i = 1,6)
99155    FORMAT (/' *** SPIN-ORBIT PARAMETRISATION ***'//1X,6F20.6/)
         IF (lx(4)) WRITE (MW,99160) (AZ(i),i = 7,11)
99160    FORMAT (/' *** HAUSER-FESHBACH CORRECTIONS ***'//1X,5F20.6/)
         IF (lx(5)) WRITE (MW,99165) (AZ(i),i = 12,16)
99165    FORMAT (/' *** GIANT DIPOLE RESONANCE PARAM. ***'//1X,5F20.6/)
         IF (lx(6)) WRITE (MW,99230) (i,(Dw(NSCn+7*i+j-8),j = 1,7),i = 1
     &                               ,1)
         IF (lx(7)) WRITE (MW,99230) (i,(Dw(NSCn+7*i+j-8),j = 1,7),i = 1
     &                               + NCOns - NCOnt,NCOns)
         IF (lx(8)) WRITE (MW,99170) (i,Dw(NGAm + i - 1),i = 1,NRD)
99170    FORMAT (/' *** GAMMA TRANSMISSION COEFFICIENTS ***'//
     &           (1X,4(I5,F20.6)))
         IF (lx(9)) WRITE (MW,99175) (i,(Dw(NFIs+2*i+j-3),j = 1,2),i = 1
     &                               ,NFIss)
99175    FORMAT (/' *** FISSION DATA ***'//(1X,2(I5,2F20.6)))
         IF (Lo(213)) WRITE (MW,99180) (i,(Dw(NIPp+15*i+j-16),j = 4,16),
     &                                 i = 1,NPP)
99180    FORMAT (/' *** DISPERSION RELATION PARAMETERS ***'//
     &           (' POTENTIAL',I5/1X,6F20.6/1X,6F20.6/1X,F20.6))
         RETURN
      ELSE
         WRITE (MW,99185) Nw(1,NIW + 1), Nw(2,NIW), CHI2,
     &                    (YY(i),i = 1,3)
99185    FORMAT (/' RUN',I4,'   MAX =',I4,'   ***** CHI2 =',D18.10,
     &           ' *****',5X,'W(1) =',F10.2,5X,'W(2) =',F5.2,5X,
     &           'W(3) =',F10.5)
         WRITE (MW,99190)
99190    FORMAT (/21X,'WEIGHT',12X,'EXP. NORM.',10X,'ERR. NORM.',10X,
     &           'CALC. NORM.',12X,'CHI2')
         DO i = 1, NCOlr
            IF (Dw(NTGx + 7*i - 1).NE.0.D0) WRITE (MW,99195) i,
     &          (Dw(NTGx + 7*i + j - 8),j = 3,7)
99195       FORMAT (5X,I5,1P,5D20.6)
         ENDDO
         WRITE (MW,99200) (i,Dw(NXX + i - 1),i = 1,NREc)
99200    FORMAT (/' *** VARIABLES'//(6(1X,I3,1P,D16.6)))
         IF (Lo(178)) WRITE (MW,99205) (i,Dw(NREs + i - 1),i = 1,NTOt)
99205    FORMAT (/' *** FUNCTIONS'//(6(1X,I3,1P,D16.6)))
         RETURN
      ENDIF
  100 WRITE (MW,99210) i, Nw(2 - MOD(k,2),NISe + (k - 1)/2), j
99210 FORMAT (' VARIABLE',I3,' DEFINED BY',I5,I4,' CANNOT BE USED')
  200 WRITE (MW,99215)
99215 FORMAT (/' IN VARI  ...  STOP')
      STOP
99220 FORMAT (1P,8D15.6)
99225 FORMAT (' (',I1,',',I2,') TYPE',I3,' FROM',I4,' TO',I4,4X,
     &        6D14.6/(7X,8D14.6))
99230 FORMAT (/' *** DENSITY OF STATES ***'//
     &        (1X,I3,'  SA:',D13.6,6X,'UX:',D13.6,5X,'TAU:',D13.6,6X,
     &        'SG:',D13.6/28X,'E0:',D13.6,6X,'EX:',D13.6,7X,'Z:',F5.0))
      END
C 01/01/04                                                      ECIS03  EVAL-000
      SUBROUTINE EVAL(Nw,Dw,Cm,Lo)
C THIS SUBROUTINE CHANGES SOME PARAMETERS TO DO A NEW CALCULATION.      EVAL-002
C THE VALUES READ HERE ARE ABSOLUTE CHANGES ( NEX=0 ),                  EVAL-003
C RELATIVE CHANGES ( NEX>0 ) OR PERCENTAGES ( NEX<0 ).                  EVAL-004
C IF THE LABORATORY ENERGY IS CHANGED, COULOMB FUNCTIONS AND REDUCED    EVAL-005
C NUCLEAR MATRIX ELEMENTS ARE RECALCULATED EVEN IF THEY ARE NOT MODIFIEDEVAL-006
C IF NUCLEAR PARAMETERS ARE CHANGED, REDUCED NUCLEAR MATRIX ELEMENTS AREEVAL-007
C CALCULATED AGAIN. IN ALL THE OTHERS CASES, THE COMPUTATION RESTARTS   EVAL-008
C WITH THE COMPUTATION OF POTENTIALS.                                   EVAL-009
C INDEXES FOR PARAMETERS ARE THE ONES USED IN SEARCH (SEE VARI)         EVAL-010
C HOWEVER 0 MEANS ENERGY IN THE LABORATORY SYSTEM.                      EVAL-011
C INPUT VARIABLES:NWV,NIPP:   DESCRIPTION OF LEVELS (SEE CALX)          EVAL-012
C                 NPOT,NPP:   OPTICAL MODEL AND FOLDING AND THEIR NUMBEREVAL-013
C                 NBETA,NBET: DEFORMATIONS AND THEIR NUMBER             EVAL-014
C                 NVAA,NVA:   NUCLEAR PARAMETERS:THEIR NUMBER IS NVA    EVAL-015
C                 NT,(NIVQ-NT)/3: REDUCED NUCLEAR MATRIX ELEMENTS,NUMBEREVAL-016
C                 NSCN:       DESCRIPTION OF LEVEL DENSITIES            EVAL-017
C                 NIW:        MAXIMUM NUMBER OF RUNS FOR A SEARCH       EVAL-018
C                 NIVY:       TABLE OF FORM FACTORS  (SEE REDM)         EVAL-019
C                 LO: LOGICAL CONTROLS,RETURNS LO(215)=.TRUE. IF ENERGY EVAL-020
C IN COMMON /DCHI/YY:       FIRST STEP SIZE OF SEARCH IN YY(1)          EVAL-021
C WORKING SPACE:  FROM NCX: FOR INPUT                                   EVAL-022
C COMMON /NCOMP/NFISS: NUMBER OF FISSION TRANSMISSION COEFFICIENTS      EVAL-023
C               NRD:   NUMBER OF GAMMA TRANSMISSION COEFFICIENTS        EVAL-024
C               NCONS: NUMBER OF LEVEL DENSITIES NEEDED                 EVAL-025
C               NCOLX: TOTAL NUMBER OF LEVELS WITHOUT DISCRETISATION    EVAL-026
C               AZ(I): SPIN-ORBIT PARAMETRISATION FOR I-1 TO 6          EVAL-027
C                      HAUSER FESHBACH PARAMETERS FOR J=7 TO 11         EVAL-028
C                      GIANT DIPOLE RESONANCE DESCRIPTION FOR I=12 TO 16EVAL-029
C MEANING OF INDEX AND LOGICAL RETURNED:                                EVAL-030
C      1-1000      OPTICAL MODEL,FOLDING PARAMETERS                     EVAL-031
C   1001-2000      DEFORMATIONS FOR A GIVEN POTENTIAL                   EVAL-032
C   2001-3000      DEFORMATIONS FOR A GIVEN MULTIPOLE                   EVAL-033
C   3001-4000      INDIVIDUAL DEFORMATION                               EVAL-034
C   4001-5000      NUCLEAR MODEL PARAMETER              - LO(211)=.TRUE.EVAL-035
C   5001-6000      NUCLEAR MATRIX ELEMENT                               EVAL-036
C   9001-7000      SPIN-ORBIT AND C. N. PARAMETRISATION                 EVAL-037
C                  SPIN-ORBIT PARAMETRISATION                           EVAL-038
C                  BZ1, BZ2, BZ3, BZ4, BZ5              - LO(212)=.TRUE.EVAL-039
C                  TGO, BN, FNUG, EGD, GGD              - LO(212)=.TRUE.EVAL-040
C                  SA, UX, TAU, SG, E0, EX FOR GAMMA    - LO(212)=.TRUE.EVAL-041
C                  SA, UX, TAU, SG, E0, EX FOR CONTINUUM- LO(214)=.TRUE.EVAL-042
C                  GAMMA TRANSMISSION FACTORS                           EVAL-043
C                  FISSION TR. COEF., DEGREE OF FREEDOM                 EVAL-044
C   7001-8000      DISPERSION RELATIONS PARAMETRISATION - LO(213)=.TRUE.EVAL-045
C  10001-99999     EXTERNAL OPTICAL MODEL (PARAMETERS ABOVE 1000)       EVAL-046
C IT STOPS THE CALCULATION FOR AN INDEX OF PARAMETER OUT OF RANGE       EVAL-047
C WORKING SPACE: IND,X EQUIVALENT BY CALL                               EVAL-048
C***********************************************************************EVAL-049
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      REAL*8 AC(2), ACOnv, AZ(18), BJM, CHI2, CHI2m, CONj, EITer, H,
     &       YY(3)
      INTEGER IDMt, IPK, IPM, IQM, IQMax, ISM, ITEmm, ITErm, JDM, JIT,
     &        JTH, JTX, KAB, KBA, KBC, KCC, KE, KMAx, KMIn, KXT, LMAx1,
     &        LMAx2, LMAx3, LMD, LMX, MCC, MCM(2), MIPi, MR, MS, MS1,
     &        MS2, MW, MWV, NAM1, NBEt, NBEta, NBT1, NCC, NCJ, NCO,
     &        NCOi, NCOll, NCOlr, NCOls, NCOlt, NCOlx, NCOns, NCOnt,
     &        NCT(6), NCX, NDE, NDOnn, NFA, NFAc, NFAm, NFG, NFIs,
     &        NFIss, NFM, NGAm, NIPh, NIPp, NISe, NIVq, NIVy, NIVz, NIW,
     &        NIXt, NJC, NJIt, NJMax, NLT, NNC, NNIv, NNVi, NNWi, NPAa,
     &        NPAd, NPAr
      INTEGER NPLace, NPOt, NPP, NR(2), NRC, NRCo, NRD, NRDo, NREc,
     &        NREs, NRY, NRZ, NSCn, NSEc, NSM, NSP(3), NSPin, NT, NTGx,
     &        NTOt, NTX, NTY, NTZ, NVA, NVC1, NVC2, NWV, NXA, NXD, NXG,
     &        NXX
      CHARACTER*4 TITle(18)
      COMMON /DCHI  / CHI2, CHI2m, YY
      COMMON /DECOU / NJIt, NIPp, NPAa, NWV, NIPh, NSCn, NPAr, NNIv,
     &                NFIs, NGAm, NPOt, NBEta, NFM, NTGx, NDOnn, NRC,
     &                NIW, NDE, NISe, NNVi, NNWi, NCC, MCC, NXA, NAM1,
     &                NFAc, NFAm, NPAd, NFG, NXG, NSM, NREs, NXX, NT,
     &                NIVq, NIVy, NIVz, NCOi, MIPi, NXD, MWV, NIXt, NTY,
     &                NTX, NRY, NRCo, NRDo, NVC1, NVC2, NNC, NCX, IDMt,
     &                NCOll, NJMax, ITErm, NPP, JDM, JIT, NSEc, LMD,
     &                MCM, NCOls, NCOlt, KMAx, KMIn, NVA, NBEt, NBT1,
     &                LMX, LMAx1, NLT, ISM, IQM, IQMax, MS1, MS2, NCT,
     &                KBA, KAB, KBC, KCC, NJC, JTX, JTH, NCOlr, NREc,
     &                NTOt, NFA, LMAx2, KE, ITEmm, NPLace, KXT, NRZ,
     &                NTZ, LMAx3, IPM, IPK, BJM, EITer, ACOnv, CONj, H,
     &                NSPin
      COMMON /INOUT / MR, MW, MS
      COMMON /NCOMP / NSP, NFIss, NRD, NCOnt, NCJ, NCOns, NCO, NCOlx,
     &                NR, AC, AZ
      COMMON /TITR  / TITle
C
C Dummy arguments
C
      REAL*8 Cm
      REAL*8 Dw(*)
      LOGICAL Lo(250)
      INTEGER Nw(2,*)
C
C Local variables
C
      CHARACTER*4 aa(2)
      CHARACTER*8 bb(2,2)
      DOUBLE PRECISION DSQRT
      REAL*8 ex, ey, fx, fy
      INTEGER i, i1, i2, ii, ik, it1, iti, ityw, ityz, iv, j, j1, j2,
     &        j3, jj, jk, k, k1, k2, k3, l, m, n, nex, nin, nst, nvat,
     &        nx
      INTEGER IABS, MAX0, MIN0
      LOGICAL lx
C
C
      DATA aa/' NEW', 'LAST'/
      DATA bb/'INCREASE', 'S )     ', 'NEW VALU', 'ES )    '/
      nvat = 34*NPP
      Lo(37) = .FALSE.
      lx = .FALSE.
      READ (MR,99005) Lo(37), lx, nin, nex, YY(1)
99005 FORMAT (2L1,I3,I5,F10.5)
      Lo(137) = .NOT.Lo(37)
      IF (lx) READ (MR,99010) TITle
99010 FORMAT (18A4)
      nx = MIN0(1,MAX0(nex, - 1)) + 2
      i1 = 1
      i2 = 1
      IF (Lo(137)) i1 = 2
      IF (nx.EQ.2) i2 = 2
      WRITE (MW,99015) aa(i1), nin, bb(1,i2), bb(2,i2)
99015 FORMAT ('1',A4,' COMPUTATION WITH',I4,'  NEW PARAMETERS',10X,
     &        '( INPUT OF ',2A8)
      IF (nx.EQ.1) WRITE (MW,99020)
99020 FORMAT (20X,'*** VALUES GIVEN AS PERCENTAGES ***')
      DO i = 211, 220
         Lo(i) = .FALSE.
      ENDDO
      IF (NCX + 2*nin.GT.IDMt) CALL MEMO('EVAL',IDMt,NCX + 2*nin,1)
      READ (MR,99025) (Nw(1,2*i + NCX - 2),i = 1,nin)
99025 FORMAT (14I5)
      READ (MR,99030) (Dw(2*i + NCX - 1),i = 1,nin)
99030 FORMAT (7F10.5)
      DO i = 1, nin
         Nw(1,2*i + NCX - 2) = MAX0(0,Nw(1,2*i + NCX - 2))
         j = MOD(Nw(1,2*i + NCX - 2),1000)
         ik = (Nw(1,2*i + NCX - 2) + 1999)/1000
         ey = Dw(2*i + NCX - 1)
         IF (ik.NE.1) GOTO 150
C ENERGY IN THE LABORATORY SYSTEM                                       EVAL-094
         Lo(215) = .TRUE.
         Dw(NWV + 11) = ey
         ex = Dw(NWV + 2)
         IF (nx.NE.2) GOTO 100
   50    IF (Lo(8)) THEN
C RELATIVISTIC C.-M. ENERGY ECM=SQRT((M1+M2)**2+2*M2*ELAB))-M1-M2       EVAL-102
            Dw(NWV + 2) = Cm*(DSQRT((Dw(NWV)+Dw(NWV+1))**2 + 2.D0*Dw(NWV
     &                    +1)*ey/Cm) - Dw(NWV) - Dw(NWV + 1))
         ELSE
            Dw(NWV + 2) = ey*Dw(NWV + 1)/(Dw(NWV) + Dw(NWV + 1))
         ENDIF
         WRITE (MW,99035) i, j, ey, Dw(2*i + NCX - 1), Dw(NWV + 2), ex
99035    FORMAT (2X,I2,' PARAM.',I5,3X,'NEW LAB. ENERGY',D15.8,' (',
     &           D15.8,')',3X,'CENTER OF MASS ENERGY',D15.6,5X,
     &           'OLD VALUE',D15.6)
         IF (NCOlx.NE.1) THEN
            DO j = 2, NCOlx
               Dw(NWV + 18*j - 16) = Dw(NWV + 18*j - 16) + Dw(NWV + 2)
     &                               - ex
               IF (Lo(8)) THEN
                  Dw(NWV + 18*j - 7) = Dw(NWV + 18*j - 16)
     &                                 *(Dw(NWV + 18*j - 16)/(2.D0*Cm)
     &                                 + Dw(NWV + 18*j - 18)
     &                                 + Dw(NWV + 18*j - 17))
     &                                 /Dw(NWV + 18*j - 17)
               ELSE
                  Dw(NWV + 18*j - 7) = Dw(NWV + 18*j - 16)
     &                                 *(Dw(NWV + 18*j - 18)
     &                                 + Dw(NWV + 18*j - 17))
     &                                 /Dw(NWV + 18*j - 17)
               ENDIF
            ENDDO
         ENDIF
         GOTO 1100
  100    IF (nex.LT.0) ey = .01D0*ey*ex
         ey = ex + ey
         IF (ik.EQ.1) GOTO 50
         IF (ik.EQ.2) GOTO 300
         IF (ik.EQ.3) GOTO 450
         IF (ik.EQ.4) GOTO 600
         IF (ik.EQ.5) GOTO 750
         IF (ik.EQ.6) GOTO 800
         IF (ik.EQ.7) GOTO 850
         IF (ik.EQ.8) GOTO 950
         IF (ik.EQ.9) GOTO 1050
  150    IF (ik.LE.11) THEN
            IF (ik.GT.9) GOTO 1200
            IF (ik.EQ.1 .OR. ik.EQ.2) GOTO 200
            IF (ik.EQ.3) THEN
               IF (j.GT.8) GOTO 1200
C DEFORMATIONS FOR A GIVEN POTENTIAL                                    EVAL-186
               k2 = j
               DO k1 = 1, NBEt
                  IF (.NOT.(Lo(1) .AND. Lo(3) .AND. Nw(2,NBEta+9*k1-1)
     &                .NE.0)) THEN
                     IF (Dw(NBEta + k2 + 9*k1 - 10).NE.0.D0) GOTO 350
                  ENDIF
               ENDDO
               WRITE (MW,99040) i, Nw(1,2*i + NCX - 2), k2
99040          FORMAT (' THE VARIABLE',I3,' CANNOT BE USED BECAUSE ',I5,
     &               '  IS A VARIATION OF THE DEFORMATIONS OF POTENTIAL'
     &               ,I3,' WHICH ARE ZERO')
               GOTO 1400
            ELSEIF (ik.EQ.4) THEN
C DEFORMATIONS FOR A GIVEN MULTIPOLE                                    EVAL-207
               k1 = j
               IF (j.GT.NBEt) GOTO 1200
               DO k2 = 1, 8
                  IF (Dw(NBEta + k2 + 9*k1 - 10).NE.0.D0) GOTO 500
               ENDDO
               WRITE (MW,99045) i, Nw(1,2*i + NCX - 2), k1
99045          FORMAT (' THE VARIABLE',I3,' CANNOT BE USED BECAUSE ',I5,
     &                 '  IS A VARIATION FOR A GIVEN MULTIPOLE',I3,
     &                 ' AND THEY ARE ZERO')
               GOTO 1400
            ELSEIF (ik.EQ.5) THEN
C INDIVIDUAL DEFORMATIONS                                               EVAL-226
               IF (j.GT.10*NBEt) GOTO 1200
               k1 = 1 + (j - 1)/10
               k2 = 1 + MOD(j - 1,10)
               IF (k2.GT.8) GOTO 1200
               k3 = 3
               IF (.NOT.(Lo(116))) GOTO 650
               GOTO 700
            ELSEIF (ik.EQ.6) THEN
               IF (j.GT.NVA) GOTO 1200
               ex = Dw(NPAa + j - 1)
               IF (nx.EQ.2) GOTO 800
               GOTO 100
            ELSEIF (ik.EQ.7) THEN
C  NUCLEAR MATRIX ELEMENTS                                              EVAL-255
               IF (3*j.GT.NIVq - NT) GOTO 1200
               ex = Dw(NT + 3*j - 3)
               Lo(211) = .TRUE.
               IF (nx.EQ.2) GOTO 850
               GOTO 100
            ELSEIF (ik.EQ.8) THEN
C  SPIN-ORBIT AND H. F. PARAMETRISATION                                 EVAL-263
               IF (j.GT.6*NCOns + 16 + 2*NFIss + NRD) GOTO 1200
               IF (Lo(181) .AND. j.GT.6) GOTO 1200
               IF (j.GT.16) THEN
                  jj = j - 16 + (j - 16)/6
                  ex = Dw(NSCn + jj - 1)
                  IF (nx.EQ.2) GOTO 1000
                  GOTO 100
               ELSE
                  IF (Lo(104) .AND. j.LE.6) GOTO 1200
                  IF (j.LE.6) GOTO 900
                  IF (Lo(181)) GOTO 1200
                  IF (Lo(82) .AND. j.GT.9) GOTO 1200
                  IF (Lo(186) .AND. j.GT.11) GOTO 1200
                  IF (Lo(82)) GOTO 900
                  IF (j.NE.9 .AND. j.LE.11 .AND. Lo(87)) GOTO 1200
                  IF (Lo(87)) GOTO 900
                  IF (j.EQ.7) GOTO 1200
                  IF (AZ(8).NE.0.D0 .AND. j.GT.8 .AND. j.LE.11)
     &                GOTO 1200
                  IF (AZ(8).NE.0.D0 .OR. j.NE.8) GOTO 900
                  GOTO 1200
               ENDIF
            ELSEIF (ik.EQ.9) THEN
               IF (j.GT.12*NPP) GOTO 1200
               k = (j - 1)/12 + 1
               l = j - 12*k + 15
               IF ((Nw(1,NIPp+15*k-14).EQ.0) .AND. (l.LE.11)) GOTO 1200
               IF ((Nw(2,NIPp+15*k-14).EQ.0) .AND. (l.GT.11)) GOTO 1200
               Lo(213) = .TRUE.
               ex = Dw(NIPp + 15*k + l - 16)
               IF (nx.EQ.2) GOTO 1050
               GOTO 100
            ENDIF
         ENDIF
         ik = 2
         j = Nw(1,2*i + NCX - 2) - 9000
  200    IF (Lo(7)) THEN
C EXTERNAL OPTICAL PARAMETERS                                           EVAL-138
            i1 = Nw(1,NPOt) - 2
            DO l = 1, i1
               IF (j.GE.Nw(1,NPOt + l) .AND. j.LE.Nw(2,NPOt + l))
     &             GOTO 250
            ENDDO
            GOTO 1300
         ELSE
C OPTICAL MODEL AND FOLDING PARAMETERS                                  EVAL-126
            n = 1 + MOD(j - 1,34)
            m = 1 + (j - 1)/34
            k = IABS(Nw(1,NIPp + 15*m - 15))
            IF (MOD(n,3).EQ.2 .AND. n.LE.24) THEN
               ex = Dw(NWV + 18*k - 17)**.33333333333333D0
               IF (Lo(16)) ex = ex + Dw(NWV + 18*k - 18)
     &                          **.33333333333333D0
               ey = ey*ex
            ENDIF
            IF (j.GT.nvat .OR. n.EQ.19) GOTO 1200
            ex = Dw(NPOt + j - 1)
            IF (nx.EQ.2) GOTO 300
            GOTO 100
         ENDIF
  250    ex = Dw(NPOt + j - 1)
         IF (l.NE.1) THEN
            m = Nw(1,NPOt + l)
            n = Nw(2,NPOt + m - 2)
            iv = Nw(2,NPOt + n - 1)
            IF (iv.GE.1 .AND. iv.LE.6) THEN
               nst = Nw(1,NPOt + n + 1)
               IF (nst.LE.0) THEN
                  it1 = MOD(Nw(1,NPOt + n - 1) - 1,8) + 1
                  j1 = (Nw(1,NPOt + n - 1) - 1)/8
                  j2 = 4
                  IF (it1.GT.6) j2 = 5
                  IF (j - m.LE.1 .OR. j - m.GE.j2) THEN
                     k = IABS(nst)
                     fx = Dw(NWV + 18*k - 17)**.33333333333333D0
                     fy = fx
                     IF (Lo(16)) fx = fx + Dw(NWV + 18*k - 18)
     &                                **.33333333333333D0
C TRANSFORMATION OF DEPTH AND RADIUS                                    EVAL-161
                     IF (j - m.EQ.1) ey = ey*fx
                     fy = fy/fx
                     IF (j.GT.m + 2) THEN
C TRANSFORMATION OF DEFORMATIONS                                        EVAL-175
                        j3 = j - m - j2
                        IF (it1.LT.7) j3 = 0
                        IF (Lo(106)) j3 = j3 + 1
                        ey = ey*fy**j3
                     ELSEIF (.NOT.(Lo(116) .OR. j1.LE.NPP .OR. j.NE.m))
     &                       THEN
                        ityz = iv
                        IF (ityz.GE.5) ityz = ityz - 4
                        ityw = 1
                        IF (it1.GT.6) THEN
                           iti = 7*(j1 - NPP)
                           ityw = ityw*Nw(2 - MOD(iti,2),
     &                            NIVy + (iti - 1)/2)
                        ENDIF
                        IF (Lo(6)) ityw = ityw - 1
                        IF (ityz.GT.1) ey = ey*fy**((ityz - 1)*ityw)
                     ENDIF
                  ENDIF
               ENDIF
            ENDIF
         ENDIF
         IF (nx.NE.2) GOTO 100
  300    IF (Lo(107)) WRITE (MW,99050) i, j, n, m, ey, Dw(2*i + NCX - 1)
     &                                 , Dw(NPOt + j - 1)
99050    FORMAT (2X,I2,' PARAM.',I5,3X,'VALUE OF V-OPTICAL(',I2,',',I2,
     &           ') =',D15.6,' (',D15.6,')',3X,'OLD VALUE',D15.6)
         IF (Lo(7)) WRITE (MW,99055) i, j, ey, Dw(2*i + NCX - 1),
     &                               Dw(NPOt + j - 1)
99055    FORMAT (2X,I2,' PARAM.',I5,'TH VALUE OF EXTERNAL POTENTIAL =',
     &           D15.6,' (',D15.6,')',3X,'OLD VALUE',D15.6)
         Dw(NPOt + j - 1) = ey
         GOTO 1100
  350    ey = ey/Dw(NBEta + k2 + 9*k1 - 10)
         k3 = 1
         IF ((nx.NE.1) .AND. Lo(16)) GOTO 650
  400    ex = 1
         IF (nx.NE.2) GOTO 100
  450    WRITE (MW,99120) i, Nw(1,2*i + NCX - 2), k2, k1, ey,
     &                    Dw(2*i + NCX - 1)
         DO l = k1, NBEt
            IF (.NOT.(Lo(1) .AND. Lo(3) .AND. Nw(2,NBEta+9*k1-1).NE.0))
     &          THEN
               ex = Dw(NBEta + k2 + 9*l - 10)*ey
               WRITE (MW,99125) k2, l, ex, Dw(NBEta + k2 + 9*l - 10)
               Dw(NBEta + k2 + 9*l - 10) = ex
            ENDIF
         ENDDO
         GOTO 1100
  500    ey = ey/Dw(NBEta + k2 + 9*k1 - 10)
         k3 = 2
         IF ((nx.NE.1) .AND. Lo(16)) GOTO 400
  550    ex = 1
         IF (nx.NE.2) GOTO 100
  600    WRITE (MW,99120) i, Nw(1,2*i + NCX - 2), k2, k1, ey,
     &                    Dw(2*i + NCX - 1)
         DO l = k2, 8
            ex = Dw(NBEta + l + 9*k1 - 10)*ey
            WRITE (MW,99125) l, k1, ex, Dw(NBEta + l + 9*k1 - 10)
            Dw(NBEta + l + 9*k1 - 10) = ex
         ENDDO
         GOTO 1100
C SEARCH OF THE CORRECTIONS FOR HEAVY IONS                              EVAL-233
  650    ex = Dw(NWV + 1)
     &        **.33333333333333D0/(Dw(NWV + 1)**.33333333333333D0 +
     &        Dw(NWV)**.33333333333333D0)
         jk = 1
         IF (Lo(101) .AND. Lo(3)) jk = k1 - 1
         k = jk
         IF (k2.GT.6) k = k*Nw(1,NBEta + 9*k1 - 1)
         IF (Lo(6)) k = k - jk
         ey = ey*ex**k
         IF (k3.LT.2) GOTO 400
         IF (k3.EQ.2) GOTO 550
  700    ex = Dw(NBEta + k2 + 9*k1 - 10)
         IF (nx.NE.2) GOTO 100
  750    WRITE (MW,99060) i, Nw(1,2*i + NCX - 2), k2, k1, ey,
     &                    Dw(2*i + NCX - 1), Dw(NBEta + k2 + 9*k1 - 10)
99060    FORMAT (2X,I2,' PARAM.',I5,3X,'BETA(',I2,',',I2,') =',D15.6,
     &           ' (',E15.6,')',3X,'OLD VALUE',D15.6)
         Dw(NBEta + k2 + 9*k1 - 10) = ey
         GOTO 1100
  800    WRITE (MW,99065) i, Nw(1,2*i + NCX - 2), j, ey,
     &                    Dw(2*i + NCX - 1), Dw(NPAa + j - 1)
99065    FORMAT (2X,I2,' PARAM.',I5,3X,'VAR(',I2,') =',D15.6,' (',D15.6,
     &           ')',3X,'OLD VALUE',D15.6)
         Dw(NPAa + j - 1) = ey
         GOTO 1100
  850    WRITE (MW,99070) i, Nw(1,2*i + NCX - 2), j, ey,
     &                    Dw(2*i + NCX - 1), Dw(NT + 3*j - 3)
99070    FORMAT (2X,I2,' PARAM.',I5,3X,'T(4,',I3,') =',D15.6,' (',D15.6,
     &           ')',3X,'OLD VALUE',D15.6)
         Dw(NT + 3*j - 3) = ey
         GOTO 1100
  900    ex = AZ(j)
         IF (nx.NE.2) GOTO 100
  950    IF (j.LE.6) THEN
            WRITE (MW,99075) i, Nw(1,2*i + NCX - 2), j, ey,
     &                       Dw(2*i + NCX - 1), AZ(j)
99075       FORMAT (2X,I2,' PARAM.',I5,3X,'AZ(',I1,') =',D15.6,' (',
     &              D15.6,')',3X,'OLD VALUE',D15.6)
            AZ(j) = ey
            GOTO 1100
         ELSEIF (j.LE.16) THEN
            Lo(212) = .TRUE.
            k = j - 6
            IF (k.GT.6) THEN
               k = j - 5
               WRITE (MW,99080) i, Nw(1,2*i + NCX - 2), k, ey,
     &                          Dw(2*i + NCX - 1), AZ(j)
99080          FORMAT (2X,I2,' PARAM.',I5,3X,'GIANT RESONANCE(',I1,
     &                 ') =',D15.6,' (',D15.6,')',3X,'OLD VALUE',D15.6)
            ELSE
               WRITE (MW,99085) i, Nw(1,2*i + NCX - 2), k, ey,
     &                          Dw(2*i + NCX - 1), AZ(j)
99085          FORMAT (2X,I2,' PARAM.',I5,3X,'BZ(',I1,') =',D15.6,' (',
     &                 D15.6,')',3X,'OLD VALUE',D15.6)
            ENDIF
            AZ(j) = ey
            GOTO 1100
         ENDIF
 1000    k = 1 + (j - 17)/NCOns
         l = 1 + MOD(j - 17,NCOns)
         IF (k.EQ.NCOns - NCOnt) Lo(212) = .TRUE.
         IF (k.GT.NCOns - NCOnt) Lo(214) = .TRUE.
         WRITE (MW,99090) i, Nw(1,2*i + NCX - 2), l, k, ey,
     &                    Dw(2*i + NCX - 1), Dw(NSCn + jj - 1)
99090    FORMAT (2X,I2,' PARAM.',I5,3X,'SCN(',I3,',',I3,') =',D15.6,
     &           ' (',D15.6,')',3X,'OLD VALUE',D15.6)
         Dw(NSCn + jj - 1) = ey
         GOTO 1100
 1050    WRITE (MW,99095) i, Nw(1,2*i + NCX - 2), l, k, ey,
     &                    Dw(2*i + NCX - 1), Dw(NIPp + 15*k + l - 16)
99095    FORMAT (2X,I2,' PARAM.',I5,3X,'PIP(',I3,',',I3,') =',D15.6,
     &           ' (',D15.6,')',3X,'OLD VALUE',D15.6)
         Dw(NIPp + 15*k + l - 16) = ey
 1100 ENDDO
      IF (Lo(132)) RETURN
      CHI2m = 1.D35
      IF (YY(1).EQ.0.D0) YY(1) = 20.D0
      YY(3) = 0.D0
      Nw(2,NIW) = Nw(2,NIW) - Nw(1,NIW + 1)
      Nw(1,NIW + 1) = 1
      WRITE (MW,99100) Nw(2,NIW), YY(1)
99100 FORMAT (' NEW MAXIMUM NUMBER OF RUNS:',I6,10X,'STARTING SCALE',
     &        F10.2)
      IF (Nw(2,NIW).LE.0) GOTO 1400
      ii = 51
      IF (Lo(76) .OR. Lo(175)) ii = 59
      DO i = ii, 65
         Lo(i + 185) = Lo(i)
         Lo(i) = .FALSE.
         Lo(i + 100) = .TRUE.
      ENDDO
      Lo(216) = .TRUE.
      RETURN
 1200 WRITE (MW,99105) i, Nw(1,2*i + NCX - 2), ik, j, Dw(2*i + NCX - 1)
99105 FORMAT (' VARIABLE',I3,' DEFINED BY',I5,' (',I2,I5,')',
     &        ' WITH VALUE ',D15.6,' CANNOT BE USED')
      GOTO 1400
 1300 IF (j.GT.Nw(2,NPOt + 1)) GOTO 1200
      WRITE (MW,99110) i, ey, j,
     &                 (Nw(1,NPOt + l),Nw(2,NPOt + l),l = 1,i1)
99110 FORMAT (' VARIABLE',I3,D15.6,' DEFINED BY',I5,
     &  ' CANNOT BE USED FOR THE PARAMETER WHICH ARE THE INTEGER VALUES'
     &  /(4(5X,I6,' TO',I6)))
 1400 WRITE (MW,99115)
99115 FORMAT (/' IN EVAL  ...  STOP')
      STOP
99120 FORMAT (2X,I2,' PARAM.',I5,3X,'PROPORTIONAL TO BETA(',I2,',',I2,
     &        ')  WITH RATIO',D15.6,' (',D15.6,')')
99125 FORMAT (15X,'BETA(',I2,',',I2,') =',D15.6,5X,'OLD VALUE',D15.6)
      END
C 01/01/04                                                      ECIS03  REST-000
      SUBROUTINE REST(Kf,Nw,Dw,Lo,Idmx)
C IF KF=0                                                               REST-002
C IT SAVES ON TAPE MS ALL THE DATA NEEDED TO RE-START A                 REST-003
C SEARCH STOPPED BY THE NUMBER OF EVALUATIONS (BY TIME IF LO(34)=.TRUE.)REST-004
C IT IS CALLED ONLY IF LO(35)=.TRUE.                                    REST-005
C IF KF.NE.0                                                            REST-006
C IT READS ON TAPE MS TO RE-START THE SEARCH                            REST-007
C IT IS CALLED ONLY IF LO(36)=.TRUE.                                    REST-008
C ******** UNLESS THE MAIN SUBROUTINE IS CHANGED, MS = 8 ***************REST-009
C***********************************************************************REST-010
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C COMMON variables
C
      INTEGER MR, MS, MW, N0(8), N1(8), N2(10), N3(115), N4(52), N5(22),
     &        N6(12), N7(4), N8(2), N9(10)
      CHARACTER*4 TITle(18)
      COMMON /ANGL  / N1
      COMMON /DCHI  / N9
      COMMON /DCONS / N2
      COMMON /DCONT / N0
      COMMON /DECOU / N3
      COMMON /INOUT / MR, MW, MS
      COMMON /NCJL  / N7
      COMMON /NCOMP / N4
      COMMON /POTE1 / N5
      COMMON /POTE2 / N6
      COMMON /SJMM  / N8
      COMMON /TITR  / TITle
C
C Dummy arguments
C
      INTEGER Idmx, Kf
      REAL*8 Dw(Idmx)
      LOGICAL Lo(250)
      INTEGER Nw(2,Idmx)
C
C Local variables
C
      REAL*8 ech, rap
      INTEGER i, i1, idmy, m, n, nsec
      CHARACTER*4 t(18)
C
C
      idmy = Idmx
      REWIND MS
      IF (Kf.NE.0) THEN
C READ COMMONS,COMPUTES LIMITS OF W AND READ W                          REST-038
         READ (MS) i, Lo, N1, N2, N3, N4, N5, N6, N7, N8, N9, N0, t
         i1 = N3(46)
         N3(52) = idmy
         WRITE (MW,99005) TITle, t, N3(52)
99005    FORMAT ('1'//1X,18A4//' RESTART OF COMPUTATION'//
     &           ' LAST TITLE : ''''',18A4,
     &           ''''''//' AVAILABLE WORKING SPACE',I8/)
         IF (N3(98).GT.N3(52)) CALL MEMO('REST',N3(52),N3(98),1)
         READ (MS) (Dw(i),i = 1,i1)
         REWIND MS
C READS ON 5 IF SAVE HAS TO BE DONE AGAIN AND THE NEW NUMBER OF EVAL.   REST-046
C ANY MODIFICATION OF THE SEARCH CAN BE READ AT THIS PLACE IF THEY      REST-047
C DO NOT SPOIL THE SEARCH                                               REST-048
         Lo(35) = .FALSE.
         READ (MR,99010) Lo(35), n, nsec, ech, rap
99010    FORMAT (L1,I4,I5,2F10.5)
C N3(17) IS NIW, N3(92) IS NREC                                         REST-051
         IF (n.EQ.0) n = N3(92) + 2
         Lo(135) = .NOT.Lo(35)
         m = N3(17)
         Nw(2,m) = Nw(2,m) + n
         WRITE (MW,99015) MS, i1
99015    FORMAT (' INPUT FROM TAPE',I3,' OF DW FROM DW(1) TO DW(',I6,
     &           ')'//)
         WRITE (MW,99020) n, Nw(2,m)
99020    FORMAT (/' MAXIMUM NUMBER OF EVALUATIONS INCREASED BY',I4,5X,
     &           'NEW VALUE',I6)
         IF (Lo(35)) WRITE (MW,99025) MS
99025    FORMAT (' SAVE ON TAPE',I3,' IF NECESSARY')
         IF (Lo(135)) WRITE (MW,99030) MS
99030    FORMAT (' NO SAVE ON TAPE',I3)
         IF (nsec.NE.0) THEN
            N3(43) = nsec
            WRITE (MW,99035) nsec
99035       FORMAT (5X,I5,' HUND OF SECOND SPARED AT THE END OF THE JOB'
     &              )
         ENDIF
         n = N3(14)
         IF (ech.GE.1.D0) THEN
            WRITE (MW,99040) Dw(n), ech
99040       FORMAT (' CHANGE OF ECH FROM',F10.5,' TO',F10.5)
            Dw(n) = ech
         ENDIF
         IF (rap.GE.1.D0) THEN
            WRITE (MW,99045) Dw(n + 1), rap
99045       FORMAT (' CHANGE OF RAP FROM',F10.5,' TO',F10.5)
            Dw(n + 1) = rap
         ENDIF
         RETURN
      ELSE
C WRITES COMMONS FIRST AND W AFTER                                      REST-030
         WRITE (MS) Idmx, Lo, N1, N2, N3, N4, N5, N6, N7, N8, N9, N0,
     &              TITle
C N3(46) IS NRCO,N3(98) IS NPLACE,N3(52) IS IDMT                        REST-032
         i1 = N3(46)
         WRITE (MW,99050) MS, i1
99050    FORMAT (///' OUTPUT ON TAPE',I3,' OF DW FROM DW(1) TO DW(',I6,
     &           ')'///)
         WRITE (MS) (Dw(i),i = 1,i1)
         REWIND MS
         RETURN
      ENDIF
      END
C 01/01/04                                                      ECIS03  FITE-000
      SUBROUTINE FITE(Ke,M,N,F,X,E,W,Nw,Iz,Wa)
C CHI-SQUARE MINIMISING SUBROUTINE WRITTEN BY G. SCHWEIMER IN KARLSRUHE.FITE-002
C SIMPLIFIED FOR THE USE OF ECIS (NO GRADIENT)                          FITE-003
C SOLVES THE NONLINEAR LEAST SQUARES PROBLEM                            FITE-004
C USING A LEAST SQUARES INTERPOLATION BETWEEN VARIABLES AND FUNCTIONS   FITE-005
C CALLED SUBROUTINES: FIT2 /.TRUE./ (LINEAR LEAST SQUARES PROBLEM)      FITE-006
C                     FIT2 /.FALSE./(INVERSION OF A(TRANSPOSED)*A)      FITE-007
C                     FIT1(ONE DIMENSIONAL MINIMUM SEARCH)              FITE-008
C CALLING SEQUENCE                                                      FITE-009
C     KE=0                                                              FITE-010
C     M=NUMBER OF FUNCTIONS, M GE N                                     FITE-011
C     N=NUMBER OF VARIABLES, N GE 1                                     FITE-012
C     DO 1 I=1,N                                                        FITE-013
C     X(I)=STARTING VALUES OF THE VARIABLES                             FITE-014
C   1 E(I)=ABSOLUTE SEARCH ACCURACIES FOR THE VARIABLES                 FITE-015
C     YY(1)=FIRST STEP SIZE IN UNITS OF E(I)                            FITE-016
C     YY(2)=HALF OF THE SUCCESS MULTIPLICATION FACTOR FOR STEP SIZE     FITE-017
C         THE STEP SIZE IS DIVIDED BY 4 TIMES ITS SQUARE AFTER UNSUCCESSFITE-018
C     IZ(1)=NUMBER OF POINTS TO BE REMEMBERED, IF LE N IZ(1) = N+1      FITE-019
C     IZ(2)=MAXIMUM NUMBER OF FUNCTION EVALUATIONS, IF 0 IZ(2)=2*IZ(1)  FITE-020
C   2 CHI2=0.                                                           FITE-021
C     DO 3 I=1,M                                                        FITE-022
C     F(I)=FUNCTION VALUES AT THE POINT X                               FITE-023
C   3 CHI2=CHI2+F(I)*F(I)                                               FITE-024
C     CALL FITE(KE,M,N,F,X,E,W,W,IZ,WA,CHI2)                            FITE-025
C     IF(KE.EQ.1) GO TO 2                                               FITE-026
C     YY(1)=STEP SIZE  MAXIMUM CHANGE OF A VARIABLE IS 2*YY(1)          FITE-027
C     YY(3)=ERROR RENORMALISATION FACTOR WHEN KE=0,2 OR 3. (SQUARE ROOT FITE-028
C                OF VARIANCE AT BEST FIT DIVIDED BY DEGREE OF FREEDOM)  FITE-029
C         =CHANGED X VALUE IN PREPARATORY CALLS                         FITE-030
C         =RATIO STEP/DISTANCE OF MINIMUM AFTER PREPARATORY CALLS       FITE-031
C              OR 0. FOR RANDOM PREDICTION                              FITE-032
C     X=MINIMUM POINT                                                   FITE-033
C     F=FUNCTIONS AT THE MINIMUM POINT                                  FITE-034
C     KE=ERROR CODE    KE=0: WITHOUT ERRORS                             FITE-035
C                      KE=2: USER INTERRUPT                             FITE-036
C                      KE=3: MAXIMUM NUMBER OF FUNCTION EVALUATIONS     FITE-037
C                      KE=4: ROUNDING ERRORS                            FITE-038
C                      KE=5: THE FUNCTIONS DO NOT DEPEND ON X(IZ(4))    FITE-039
C                      KE=6: USELESS VARIABLES IN THE PREPARATORY CALLS,FITE-040
C                            THE LABELS OF THE VARIABLES ARE IZ(3),IZ(4)FITE-041
C                      KE=7: M LT N                                     FITE-042
C     W(I)=STANDARD ERRORS OF THE VARIABLES. (FOR A VARIANCE AT BEST    FITE-043
C                      FIT EQUAL TO DEGREE OF FREEDOM)                  FITE-044
C     W(N+I)=ERROR ENHANCEMENTS. (MANY/SINGLE VARIABLE RESULT)          FITE-045
C     W(N+N+I+(J*(J-1))/2)=ERROR CORRELATION BETWEEN X(I) AND X(J) I<J  FITE-046
C     IZ(3): NUMBER OF FUNCTION EVALUATIONS                             FITE-047
C     IZ(4): NUMBER OF DEGREES OF FREEDOM IF KE=0,2,3 OR 4              FITE-048
C            PLACE OF USELESS VARIABLE IF KE=5 OR 6                     FITE-049
C            EVENTUALLY INDICATIONS FOR ONE DIMENSIONAL SEARCH IF KE=1  FITE-050
C WORKING FIELD:  IZ: LENGTH 4+K WITH K = IZ(1)                         FITE-051
C     W: LENGTH MAX(14+N+K*(M+N+1),(N*(N+5))/2)                         FITE-052
C     NW: EQUIVALENT BY CALL WITH W                                     FITE-053
C     WA: LENGTH (M+1)*(N+1)+(N*(N+1))/2                                FITE-054
C                  ADDRESSES IN IZ                                      FITE-055
C                      4+L: LABELS OF THE QUADRATIC SUMS                FITE-056
C                  ADDRESSES IN W DURING SEARCH                         FITE-057
C                      1 TO 14 ,EVENTUALLY, INDICATIONS FOR ONE DIMEN-  FITE-058
C                            SIONNAL SEARCH.                            FITE-059
C                      FROM MAX(15,N+1),K SETS(FUNCTIONS+VARIABLES+CHI2)FITE-060
C                  ADDRESSES IN W AFTER THE SEARCH  SEE ABOVE           FITE-061
C                  ADDRESSES IN WA                                      FITE-062
C                      FROM 1 GRADIENT OR MATRIX A FOLLOWED BY CENTRAL  FITE-063
C                              FUNCTIONS                                FITE-064
C                      FROM 1+M*(N+1)  CENTRAL VARIABLES                FITE-065
C                      FROM (N+1)*(M+1) MATRIX D                        FITE-066
C THE WORKING FIELDS IZ AND W CONTAIN ALL INFORMATION TO CONTINUE       FITE-067
C THE SEARCH. THIS ALLOWS A SEARCH WITHIN ANOTHER SEARCH JUST CHANGING  FITE-068
C THE WORKING FIELDS                                                    FITE-069
C***********************************************************************FITE-070
      IMPLICIT REAL*8(a - H,O - Z)
C
C
C COMMON variables
C
      REAL*8 CHI2, CHI2m, YY(3)
      COMMON /DCHI  / CHI2, CHI2m, YY
C
C Dummy arguments
C
      INTEGER Ke, M, N
      REAL*8 E(N), F(M), W(20), Wa(1), X(N)
      INTEGER Iz(5), Nw(20)
C
C Local variables
C
      REAL*8 a, eps, s, t, u, v, wja
      DOUBLE PRECISION DABS, DMAX1, DSQRT
      INTEGER i, i1, i2, ir, j, j1, j2, j3, ja, jd, jdi, jm, js, k, kv,
     &        l, lm, mf
      INTEGER IABS, MAX0, MIN0
C
C
      DATA eps/1.D-5/
      jd = (M + 1)*(N + 1) - 1
      js = 14 + N
      lm = M + N + 1
      k = Iz(1)
      IF (Ke.EQ.0) THEN
         IF (M.LT.N) THEN
C ERROR CODE DEFINITION                                                 FITE-296
            Ke = Ke + 1
            GOTO 600
         ELSE
            Iz(3) = 1
            Iz(4) = 0
            DO l = 1, k
               Iz(l + 4) = 1 + k - l
               W(js + lm*l) = 7.D35
            ENDDO
            IF (YY(2).LT.1.D0) YY(2) = 1.D0
            Ke = 1
         ENDIF
      ENDIF
      jm = js + lm*Iz(5) - lm
      j3 = M*N
      kv = k
      IF (CHI2.LE.0.D0) GOTO 500
C ROW OF MATRIX S TO BE REPLACED BY NEW VALUES                          FITE-092
      l = Iz(k + 4)
      IF (W(js + lm*l).EQ.7.D35) kv = l - 1
      DO i = 1, k
         j1 = js + lm*Iz(i + 4)
         IF (CHI2.LT.W(j1)) GOTO 100
      ENDDO
C ONE DIMENSIONAL SEARCH IS NECESSARY                                   FITE-099
      GOTO 300
  100 IF (i.GT.MAX0(N + 1,kv)) GOTO 300
C VECTOR OF LABELS OF THE QUADRATIC SUMS                                FITE-102
      IF (kv.LT.k) kv = kv + 1
      i1 = k + 4
      i2 = k - i
      IF ((Iz(3).GT.N + 1) .AND. (i.NE.1)) YY(1) = YY(1)/(4.D0*YY(2)**3)
      IF (i2.NE.0) THEN
         DO j = 1, i2
            i1 = i1 - 1
            Iz(i1 + 1) = Iz(i1)
         ENDDO
         Iz(i1) = l
         jm = js + lm*Iz(5) - lm
      ENDIF
C NEW ROW                                                               FITE-113
      j1 = js + lm*(l - 1)
      DO i = 1, M
         j1 = j1 + 1
         W(j1) = F(i)
      ENDDO
      DO i = 1, N
         j1 = j1 + 1
         W(j1) = X(i)
      ENDDO
      W(j1 + 1) = CHI2
      IF (Iz(3).GE.Iz(2)) GOTO 900
      IF (N.EQ.1) THEN
C ONLY ONE VARIABLE X                                                   FITE-266
         IF (Iz(3).LE.1) THEN
            Ke = 0
            W(6) = YY(1)*E(1)
            W(7) = E(1)
            W(8) = 0.D0
         ENDIF
         GOTO 400
      ELSEIF (Iz(3).LE.N + 1) THEN
C PREPARATORY FUNCTION EVALUATIONS                                      FITE-125
         mf = Iz(3)
         IF (mf.NE.1) THEN
C SIGNIFICANCE OF THE NEW VARIABLE                                      FITE-128
            X(mf - 1) = YY(3)
            s = 0.D0
            DO i = 1, M
               t = F(i) - W(js + i)
               s = s + t*t
            ENDDO
            j = 2
            IF (s.LT.eps*eps*W(js + lm)) GOTO 700
            YY(3) = s
            W(mf - 1) = DSQRT(YY(3))
            IF (mf.GT.2) THEN
C INDEPENDENCE OF THE NEW VARIABLE                                      FITE-139
               DO j = 3, mf
                  i2 = js + lm*(j - 2)
                  s = 0.D0
                  DO i = 1, M
                     s = s + (W(i2 + i) - W(js + i))*(F(i) - W(js + i))
                  ENDDO
                  IF (DABS(W(mf-1)*W(j-2) - DABS(s)).LT.eps*DABS(s))
     &                GOTO 600
               ENDDO
            ENDIF
         ENDIF
         IF (mf.NE.N + 1) THEN
            YY(3) = X(mf)
            X(mf) = X(mf) + YY(1)*E(mf)
            IF (Ke.EQ.1) Iz(3) = Iz(3) + 1
            GOTO 99999
         ENDIF
      ENDIF
C END OF PREPARATORY FUNCTION EVALUATIONS                               FITE-151
C SUM OF INVERSES OF THE QUADRATIC SUMS                                 FITE-152
  200 s = 0.D0
      DO l = 1, kv
         t = W(js + lm*l)
         s = s + 1.D0/(t*t)
      ENDDO
      wja = 1.D0/s
C CENTRE OF THE VARIABLES AND FUNCTIONS                                 FITE-158
      i1 = M + N
      DO i = 1, i1
         j1 = js
         s = 0.D0
         DO l = 1, kv
            t = W(j1 + lm)
            s = s + W(j1 + i)/(t*t)
            j1 = j1 + lm
         ENDDO
         Wa(j3 + i) = s*wja
      ENDDO
      IF (Ke.NE.1) THEN
C INVERSE OF MATRIX D                                                   FITE-316
         t = DSQRT(wja)
         j1 = 0
         DO i = 1, N
            s = Wa(j3 + M + i)
            j2 = js + i - lm + M
            DO l = 1, kv
               j1 = j1 + 1
               Wa(j1) = t*(W(j2 + l*lm) - s)/W(js + l*lm)
            ENDDO
         ENDDO
         CALL FIT2(kv,N,Wa,Wa(jd + 1),Nw,ir,.FALSE.)
         IF (ir.NE.0) GOTO 1200
      ENDIF
C THE LINEAR APPROXIMATION MEANS THAT THE DIFFERENCE WITH CENTRAL VALUE FITE-169
C F(I,K)-F(I) = SUM F(I,J)*(X(J,K)-X(J)) WHERE F(I),X(J) ARE MEAN VALUESFITE-170
C AND F(I,J) IS THE FIRST DERIVATIVE WITH RESPECT TO X(J).              FITE-171
C USING THE MATRIX D(I,J) = WEIGHTED SUM ON (X(I,K)-X(I))*(X(J,K)-X(J)) FITE-172
C AND WRITING THE CHANGE DX = D*Y, THE BEST FIT IS OBTAINED FOR         FITE-173
C ||F-A*Y||=MIN(Y) WITH A(I,J)=WEIGHTED SUM(F(I,K)-F(I)*(X(J,K)-X(J))   FITE-174
C MATRIX A                                                              FITE-175
      j1 = 0
      DO i = 1, N
         u = Wa(j3 + M + i)
         DO j = 1, M
            j1 = j1 + 1
            j2 = js
            s = 0.D0
            t = Wa(j3 + j)
            DO l = 1, kv
               v = W(j2 + lm)
               s = s + (W(j2 + j) - t)*(W(j2 + M + i) - u)/(v*v)
               j2 = j2 + lm
            ENDDO
            Wa(j1) = s*wja
         ENDDO
      ENDDO
      IF (Ke.NE.1) THEN
C MATRIX G = A*INVERSE OF D                                             FITE-328
         DO l = 1, M
            j1 = l - M
            DO i = 1, N
               i1 = jd + (i*i - i)/2
               i2 = 1
               s = 0.D0
               DO j = 1, N
                  i1 = i1 + i2
                  IF (j.GE.i) i2 = j
                  s = s + Wa(i1)*Wa(j1 + j*M)
               ENDDO
               W(i) = s
            ENDDO
            DO j = 1, N
               Wa(j1 + j*M) = W(j)
            ENDDO
         ENDDO
C DIAGONAL ELEMENTS OF G(T)*G                                           FITE-343
         j1 = 0
         DO i = 1, N
            s = 0.D0
            DO l = 1, M
               j1 = j1 + 1
               s = s + Wa(j1)*Wa(j1)
            ENDDO
            W(N + i) = DSQRT(s)
         ENDDO
C STANDARD ERRORS AND ERROR CORRELATIONS                                FITE-351
         CALL FIT2(M,N,Wa,W(2*N + 1),Nw,ir,.FALSE.)
         IF (ir.NE.0) GOTO 1200
         DO i = 1, N
            jdi = 2*N + (i*i + i)/2
            W(i) = DSQRT(W(jdi))
            W(N + i) = W(i)*W(N + i)
         ENDDO
         j1 = 2*N
         DO i = 1, N
            DO j = 1, i
               j1 = j1 + 1
               W(j1) = W(j1)/(W(i)*W(j))
            ENDDO
         ENDDO
         GOTO 1100
      ELSE
C LINEAR LEAST SQUARES PROBLEM                                          FITE-190
         CALL FIT2(M,N,Wa,X,Nw,ir,.TRUE.)
         IF (ir.LT.0) GOTO 800
         IF (ir.EQ.0) THEN
C MATRIX D                                                              FITE-193
            j1 = jd
            ja = j3 + M
            DO i = 1, N
               t = Wa(ja + i)
               DO j = 1, i
                  j1 = j1 + 1
                  j2 = js + M
                  s = 0.D0
                  u = Wa(ja + j)
                  DO l = 1, kv
                     v = W(j2 + N + 1)
                     s = s + (W(j2 + i) - t)*(W(j2 + j) - u)/(v*v)
                     j2 = j2 + lm
                  ENDDO
                  Wa(j1) = s*wja
               ENDDO
            ENDDO
C NEW VARIABLES                                                         FITE-209
            DO i = 1, N
               i2 = 1
               j1 = jd + (i*i - i)/2
               s = 0.D0
               DO j = 1, N
                  j1 = j1 + i2
                  IF (j.GE.i) i2 = j
                  s = s + Wa(j1)*X(j)
               ENDDO
               Wa(i) = Wa(ja + i) - s
            ENDDO
C TEST OF CONVERGENCE                                                   FITE-219
            a = 0.D0
            DO i = 1, N
               W(i) = Wa(i) - W(jm + M + i)
               a = DMAX1(a,DABS(W(i)/E(i)))
            ENDDO
            YY(1) = YY(1)*YY(2)
            IF (a.LT.1.D0 .OR. YY(1).LT.1.D0) GOTO 500
            YY(3) = 1.D0
C STEP SIZE LIMITATION                                                  FITE-227
            IF (a.GT.2.D0*YY(1)) YY(3) = 2.D0*YY(1)/a
            DO i = 1, N
               X(i) = W(jm + M + i) + YY(3)*W(i)
            ENDDO
            Iz(4) = 0
            YY(1) = a*YY(3)
            IF (Ke.EQ.1) Iz(3) = Iz(3) + 1
            GOTO 99999
         ELSE
C RANDOM PREDICTION                                                     FITE-234
            DO i = 1, N
               X(i) = W(jm + M + i) + YY(1)*E(i)
     &                *DFLOAT(MOD(IABS(Nw(jm+i)),200) - 100)/100.D0
            ENDDO
            YY(3) = 0.D0
            IF (Ke.EQ.1) Iz(3) = Iz(3) + 1
            GOTO 99999
         ENDIF
      ENDIF
C ONE DIMENSIONAL SEARCH                                                FITE-240
  300 IF (N.NE.1) THEN
         IF (Iz(3).GE.Iz(2)) GOTO 900
         IF (Iz(4).EQ.2) THEN
            W(5) = CHI2
            CALL FIT1(Ke,Nw,W(4))
         ELSE
            Iz(4) = 2
            DO i = 1, N
               W(i + 14) = X(i) - W(jm + M + i)
            ENDDO
            Nw(1) = 3
            Nw(2) = 20
            W(4) = 0.5D0
            W(7) = 0.D0
            W(8) = 0.D0
            W(9) = 0.D0
            W(10) = 1.D0
            W(12) = W(jm + lm)
            W(13) = CHI2
         ENDIF
         DO i = 1, N
            X(i) = W(jm + M + i) + W(4)*W(i + 14)
         ENDDO
         IF (Ke.EQ.3) Ke = 2
         IF (Ke.EQ.2) GOTO 900
         Ke = 1
         YY(3) = W(4)
         IF (Ke.EQ.1) Iz(3) = Iz(3) + 1
         GOTO 99999
      ENDIF
  400 Nw(2) = Iz(2)
      W(4) = X(1)
      W(5) = CHI2
      CALL FIT1(Ke,Nw,W(4))
      Iz(4) = 2
      X(1) = W(4)
      IF (Ke.EQ.1) THEN
         IF (Ke.EQ.1) Iz(3) = Iz(3) + 1
         GOTO 99999
      ELSE
         IF (Ke.GT.0) Ke = Ke + 1
         YY(3) = 0.D0
         W(1) = 0.D0
         DO j = 1, M
            F(j) = W(jm + i)
         ENDDO
         CHI2 = W(jm + lm)
         X(1) = W(jm + lm - 1)
         IF (Nw(2).NE.0) GOTO 1200
         W(1) = DSQRT(DABS((W(9)-W(11))/((W(12)-W(13))/(W(9)-W(10))-(W(
     &          13)-W(14))/(W(10)-W(11)))))
         W(2) = 1.D0
         W(3) = 1.D0
         GOTO 1100
      ENDIF
C END OF SEARCH                                                         FITE-292
  500 Ke = 0
      IF (CHI2.NE.0.D0 .AND. Iz(2).GE.0) GOTO 1000
      IF (Ke.EQ.1) Iz(3) = Iz(3) + 1
      GOTO 99999
  600 Ke = Ke + 1
  700 Ke = Ke + 1
  800 Ke = Ke + 1
  900 Ke = Ke + 1
      Ke = Ke + 1
C RESTORE OPTIMUM VALUES TO X AND F                                     FITE-303
 1000 DO i = 1, M
         F(i) = W(jm + i)
      ENDDO
      DO i = 1, N
         X(i) = W(jm + M + i)
         W(i) = 0.D0
      ENDDO
      YY(3) = 0.D0
      CHI2 = W(jm + lm)
      IF (Ke*(Ke - 3).NE.0 .OR.
     &    (Ke.EQ.3 .AND. ((YY(3).EQ.0.D0.AND.Iz(3).LE.N)))) GOTO 1200
C COMPUTATION OF THE ERRORS OF THE VARIABLES - RESTORE MATRIX G         FITE-313
      kv = MIN0(k,Iz(3))
      GOTO 200
C ERROR RENORMALISATION FACTOR                                          FITE-364
 1100 s = 0.D0
      DO i = 1, M
         s = s + F(i)
      ENDDO
      YY(3) = DSQRT(DABS(CHI2 - s*s/M)/MAX0(M - N - 1,1))
      DO i = 1, N
         W(i) = W(i)*YY(3)
      ENDDO
 1200 Iz(4) = M - N - 1
      IF ((Ke - 5)*(Ke - 6).EQ.0) THEN
         Iz(3) = j - 2
         Iz(4) = mf - 1
      ENDIF
      IF (Ke.EQ.1) Iz(3) = Iz(3) + 1
99999 END
C 01/01/04                                                      ECIS03  FIT1-000
      SUBROUTINE FIT1(Ke,I,W)
C MINIMISATION OF A FUNCTION F(X) OF ONE VARIABLE X                     FIT1-002
C CALLING SEQUENCE                                                      FIT1-003
C    KE=0                                                               FIT1-004
C    I(2)=MAXIMUM NUMBER OF FUNCTION EVALUATIONS                        FIT1-005
C    W(1)=START VALUE OF X                                              FIT1-006
C    W(3)=FIRST STEP SIZE                                               FIT1-007
C    W(4)=ABSOLUTE SEARCH ACCURACY                                      FIT1-008
C    W(5)=RELATIVE SEARCH ACCURACY                                      FIT1-009
C  1 W(2)=FUNCTION VALUE F(X) AT X=W(1)                                 FIT1-010
C    CALL FIT1(KE,I,W)                                                  FIT1-011
C    IF(KE.EQ.1) GO TO 1                                                FIT1-012
C    XMIN=W(1)                                                          FIT1-013
C    FMIN=W(2)                                                          FIT1-014
C KE = ERROR CODE: KE=0 NO ERRORS, KE=                                  FIT1-015
C  2 MAXIMUM NUMBER OF FUNCTION EVALUATIONS                             FIT1-016
C  3 ROUNDING ERRORS, PROBABLY BECAUSE BOTH W(4) AND W(5) ARE TOO SMALL FIT1-017
C THE WORKING FIELDS I AND W HAVE THE LENGTH 3 AND 11 RESPECTIVELY      FIT1-018
C THEY CONTAIN ALL INFORMATION FOR THE CONTINUATION OF THE SEARCH       FIT1-019
C THEREFORE A SEARCH WITHIN ANOTHER SEARCH CAN BE DONE JUST CHANGING    FIT1-020
C THE WORKING FIELDS                                                    FIT1-021
C IF 2 FUNCTION VALUES F1 AND F2 ARE KNOWN FOR X = X1 AND X2 RESPECTIVE FIT1-022
C LY WITH X1 NE X2 ENTER THE CALLING SEQUENCE AFTER DEFINING :          FIT1-023
C KE = 1; I(1) = 3; W(6) = X1; W(7) = X2; W(9) = F1; W(10) = F2 AND     FIT1-024
C W(1) = USERS CHOICE                                                   FIT1-025
C WORKING FIELD VARIABLES:                                              FIT1-026
C I(1): CURRENT NUMBER OF FUNCTION EVALUATIONS                          FIT1-027
C I(2): MAXIMUM NUMBER OF FUNCTION EVALUATIONS                          FIT1-028
C I(3): MINIMUM POINTER, THE MINIMUM FUNCTION VALUE IS AT W(7+I(3))     FIT1-029
C W(1): CURRENT VALUE OF X                                              FIT1-030
C W(2): USER SUPPLIED FUNCTION VALUE                                    FIT1-031
C W(3): FIRST STEP SIZE                                                 FIT1-032
C W(4 AND 5): SEARCH ACCURACIES                                         FIT1-033
C W(6, 7 AND 8): X1, X2 AND X3 WITH X1 < X2 < X3                        FIT1-034
C W(9, 10 AND 11): FUNCTION VALUES AT X1, X2 AND X3 RESPECTIVELY        FIT1-035
C***********************************************************************FIT1-036
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C Dummy arguments
C
      INTEGER Ke
      INTEGER I(3)
      REAL*8 W(11)
C
C Local variables
C
      DOUBLE PRECISION DABS
      INTEGER i31, i37, j, k
C
C
      IF (Ke.NE.1) THEN
         Ke = 1
         I(1) = 1
         I(3) = -1
         W(6) = W(1)
         W(9) = W(2)
         W(1) = W(1) + W(3)
      ELSEIF (I(1).GT.2) THEN
         IF (I(1).GT.3) THEN
C SORT IN THE NEW VALUES OF X AND F                                     FIT1-074
            IF (I(3).EQ.0) THEN
               j = -1
               IF (W(1).LT.W(7)) j = 1
               IF (W(2).GT.W(10)) THEN
                  W(7 - j) = W(1)
                  W(10 - j) = W(2)
                  GOTO 50
               ELSE
                  W(7 + j) = W(7)
                  W(10 + j) = W(10)
               ENDIF
            ELSE
               j = I(3)
               W(7 - j) = W(7)
               W(10 - j) = W(10)
               IF ((W(7+j) - W(1))*(W(1) - W(7)).LE.0.D0) THEN
                  W(7) = W(7 + j)
                  W(10) = W(10 + j)
                  W(7 + j) = W(1)
                  W(10 + j) = W(2)
                  IF (W(2).GE.W(10)) I(3) = 0
                  GOTO 50
               ENDIF
            ENDIF
            W(7) = W(1)
            W(10) = W(2)
            i31 = I(3) + 10
            IF (W(2).LE.W(i31)) I(3) = 0
         ELSE
            W(8) = W(1)
            W(11) = W(2)
C ORDERING OF THE 3 FIRST VALUES OF X: W(6) < W(7) < W(8)               FIT1-058
            DO j = 1, 3
               k = 7 - MOD(j,2)
               IF (W(k).GT.W(k + 1)) THEN
                  W(1) = W(k)
                  W(k) = W(k + 1)
                  W(k + 1) = W(1)
                  k = k + 3
                  W(1) = W(k)
                  W(k) = W(k + 1)
                  W(k + 1) = W(1)
               ENDIF
            ENDDO
            I(3) = 0
            IF (W(9).LT.W(10) .AND. W(9).LT.W(11)) I(3) = -1
            IF (W(11).LT.W(10) .AND. W(11).LT.W(9)) I(3) = 1
         ENDIF
   50    j = 7 + I(3)
C ERROR TESTS                                                           FIT1-099
         IF (W(6).EQ.W(7) .OR. W(7).EQ.W(8) .OR.
     &       (W(9).EQ.W(10) .AND. W(10).EQ.W(11))) THEN
            Ke = Ke + 1
            Ke = Ke + 1
            GOTO 100
         ELSEIF (I(1).GE.I(2)) THEN
            Ke = Ke + 1
            GOTO 100
         ELSEIF (I(3).EQ.0) THEN
C PREDICTION OF THE POSITION OF THE MINIMUM (PARABOLIC APPROXIMATION)   FIT1-107
            W(1) = ((W(9) - W(10))/(W(6) - W(7)) - (W(10) - W(11))
     &             /(W(7) - W(8)))/(W(6) - W(8))
            W(1) = .5D0*(W(6) + W(8) + (W(11) - W(9))/(W(1)*(W(6)-W(8)))
     &             )
C TEST OF CONVERGENCE                                                   FIT1-111
            W(2) = DABS(W(1) - W(j))
            IF (W(2).LT.DABS(W(4)) .OR. W(2).LT.DABS(W(5)*W(j))) THEN
               Ke = 0
               GOTO 100
            ENDIF
         ELSE
C STEP SIZE LIMITATION                                                  FIT1-104
            W(1) = W(j) + (2*I(3))*DABS(W(6) - W(8))
         ENDIF
      ELSE
         I(3) = 0
         W(7) = W(1)
         W(10) = W(2)
         IF (W(2).LE.W(9)) THEN
            W(1) = W(1) + W(3)
         ELSE
            I(3) = -1
            W(1) = W(6) - W(3)
         ENDIF
      ENDIF
      I(1) = I(1) + 1
      RETURN
  100 i37 = I(3) + 7
      W(1) = W(i37)
      i31 = I(3) + 10
      W(2) = W(i31)
      RETURN
      END
C 01/01/04                                                      ECIS03  FIT2-000
      SUBROUTINE FIT2(M,N,A,D,Ip,Ir,Llo)
C IF LLO=.TRUE. EX SUBROUTINE LILESQ WRITTEN BY SCHWEIMER.              FIT2-002
C  LINEAR LEAST SQUARES PROBLEM ||B-A*D||=MIN(D)                        FIT2-003
C  SOLVED BY HOUSEHOLDER TRANSFORMATIONS                                FIT2-004
C INPUT VARIABLES: M: NUMBER OF ROWS OF A AND B                         FIT2-005
C                  N: NUMBER OF COLUMNS OF A AND ROWS OF D              FIT2-006
C                  A: M*N MATRIX FOLLOWED BY THE VECTOR B OF M COMPO-   FIT2-007
C                                  NENTS (DESTROYED)                    FIT2-008
C OUTPUT VARIABLES:D: VECTOR OF VARIABLES, THE REDUNDANT VARIABLES ARE  FIT2-009
C                    SET TO ZERO. THE ||D||=MIN IS NOT USED BECAUSE THE FIT2-010
C                    COMPONENTS OF D ARE ASSUMED TO BE NOT COMMENSURABLEFIT2-011
C                  IP: PERMUTATION VECTOR OF N COMPONENTS, IT CONTAINS  FIT2-012
C                    THE COLUMN LABELS OF MATRIX A ORDERED ACCORDING    FIT2-013
C                    THEIR IMPORTANCE IN REDUCING THE EUCLIDEAN NORM    FIT2-014
C                  A: THE UPPER PART CONTAINS THE TRANSFORMED INPUT A   FIT2-015
C                    A(2,1) CONTAINS THE SQUARE OF THE EUCLIDEAN NORM   FIT2-016
C                  IR: ERROR CODE                                       FIT2-017
C                    IR=0 NO ERROR                                      FIT2-018
C                    IR=-1 ALL COMPONENTS OF D ARE ZERO AND MAY BE      FIT2-019
C                    REDUNDANT                                          FIT2-020
C                    IR>0 THE FIRST IR COMPONENTS OF IP CONTAIN THE     FIT2-021
C                    LABELS OF THE NONZERO COMPONENTS OF D, THE REMAI-  FIT2-022
C                    NING COMPONENTS OF D ARE ZERO AND MAY BE REDUNDANT FIT2-023
C  NOTE: ALL ARITHMETIC OPERATIONS ARE PERFORMED IN DOUBLE PRECISION,   FIT2-024
C  AN ITERATIVE IMPROVEMENT IS IMPOSSIBLE WITHOUT SAVING A AND B.       FIT2-025
C  THE ROUND OFF ERROR OF ||B-A*D||**2 IS APPROXIMATELY GIVEN BY        FIT2-026
C  ||B(INITIAL)||**2 - ||B(TRANSFORMED)||**2                            FIT2-027
C                                                                       FIT2-028
C IF LLO=.FALSE. EX SUBROUTINE INVATA WRITTEN BY SCHWEIMER.             FIT2-029
C  INVERSION OF THE PRODUCT MATRIX A(TRANSPOSED)*A                      FIT2-030
C  THE MATRIX A IS REDUCED TO AN UPPER TRIANGULAR MATRIX R BY           FIT2-031
C  HOUSEHOLDER TRANSFORMATIONS. THE REMAINING COMPUTATION IS STRAIGHT   FIT2-032
C  FORWARD.                                                             FIT2-033
C INPUT VARIABLES: N: NUMBER OF COLUMNS OF MATRIX A                     FIT2-034
C                  M: NUMBER OF ROWS OF MATRIX A, M >= N > 0            FIT2-035
C                  A: INPUT MATRIX (DESTROYED)                          FIT2-036
C OUTPUT VARIABLES:  IR: ERROR CODE                                     FIT2-037
C                    IR=-1 RANK OF MATRIX A IS ZERO                     FIT2-038
C                    IR=0 NO ERROR, RANK OF MATRIX A IS N               FIT2-039
C                    IR>0 RANK OF MATRIX A IS IR, THE INVERSE OF A(T)*A FIT2-040
C                    IS COMPUTED CONSIDERING THE IR COLUMNS OF A INDICA-FIT2-041
C                    TED BY THE FIRST IR COMPONENTS OF IP               FIT2-042
C                  A: TRIANGULAR MATRIX R, R=A(I,J) I<=J=1,N            FIT2-043
C                  D: VECTOR OF LENGTH (N*(N+1))/2, IT CONTAINS THE     FIT2-044
C                    UPPER TRIANGULAR PART OF THE INVERSE OF A(T)*A     FIT2-045
C                  IP: PERMUTATION VECTOR OF LENGTH N, ITS FIRST IR     FIT2-046
C                    COMPONENTS CONTAIN THE LABELS OF THE USEFUL        FIT2-047
C                    COLUMNS OF A, THE LAST COMPONENTS CONTAIN THE      FIT2-048
C                    LABELS OF THE COLUMNS WHICH ARE LINEAR COMBINATIONSFIT2-049
C                    OF THE FIRST.                                      FIT2-050
C***********************************************************************FIT2-051
      IMPLICIT REAL*8(A - H,O - Z)
C
C
C Dummy arguments
C
      INTEGER Ir, M, N
      LOGICAL Llo
      REAL*8 A(M,N), D(N)
      INTEGER Ip(N)
C
C Local variables
C
      REAL*8 c, s, sig, t, u, v
      DOUBLE PRECISION DABS, DSQRT
      INTEGER i, i1, ij, j, k, l, l1, l2, n1
      INTEGER MAX0
C
C
      Ir = 0
      n1 = N
      IF (Llo) n1 = N + 1
      DO j = 1, N
         Ip(j) = j
      ENDDO
C ROTATION LOOP                                                         FIT2-060
      DO k = 1, N
C PIVOT ELEMENT    COLUMN J WHICH GENERATES THE LARGEST NEW A(*,M) AND  FIT2-062
C AND LINE I OF THE LARGEST ELEMENT OF COLUMN J IF LLO=.TRUE.           FIT2-063
C COLUMN AND LINE OF LARGEST ELEMENT IF LLO=.FALSE.                     FIT2-064
         u = 0.D0
         DO j = k, N
            c = 0.D0
            DO i = k, M
               IF (DABS(A(i,j)).GT.DABS(c)) THEN
                  l2 = i
                  c = A(i,j)
               ENDIF
            ENDDO
            IF (c.NE.0.D0) THEN
               s = 0.D0
               IF (Llo) THEN
                  t = 0.D0
                  DO i = k, M
                     v = A(i,j)/c
                     s = s + v*v
                     t = t + v*A(i,n1)
                  ENDDO
                  IF (u.GE.t*(t/s)) GOTO 50
                  u = t*(t/s)
               ELSE
                  IF (DABS(c).LT.u) GOTO 50
                  u = DABS(c)
                  DO i = k, M
                     v = A(i,j)/c
                     s = s + v*v
                  ENDDO
               ENDIF
               sig = c*DSQRT(s)
               l = j
               l1 = l2
            ENDIF
   50    ENDDO
         IF (u.EQ.0.D0) GOTO 100
C PERMUTE COLUMNS OF A(K)                                               FIT2-094
         i = Ip(l)
         Ip(l) = Ip(k)
         Ip(k) = i
         DO i = 1, M
            c = A(i,l)
            A(i,l) = A(i,k)
            A(i,k) = c
         ENDDO
C PERMUTE LINES OF A(K)                                                 FIT2-102
         DO j = k, n1
            c = A(k,j)
            A(k,j) = A(l1,j)
            A(l1,j) = c
         ENDDO
C ROTATION OF THE LOWER COLUMN FRAGMENT OF A(K) AND B(K)                FIT2-107
         u = sig + A(k,k)
         v = A(k,k)/sig
         A(k,k) = -sig
         l = k + 1
         IF (l.GT.M) A(k,l) = -A(k,l)
         IF (l.LE.n1 .AND. l.LE.M) THEN
            DO j = l, n1
               s = v*A(k,j)
               DO i = l, M
                  t = A(i,k)/sig
                  s = s + t*A(i,j)
               ENDDO
               t = (A(k,j) + s)/u
               A(k,j) = -s
               DO i = l, M
                  A(i,j) = A(i,j) - t*A(i,k)
               ENDDO
            ENDDO
         ENDIF
      ENDDO
C END OF ROTATION LOOP                                                  FIT2-125
      k = N
      GOTO 200
  100 k = k - 1
      Ir = k
  200 IF (Llo) THEN
C SQUARE OF THE EUCLIDEAN NORM                                          FIT2-157
         s = 0.D0
         l = k + 1
         IF (k.NE.M) THEN
            DO i = l, M
               s = s + A(i,n1)*A(i,n1)
            ENDDO
         ENDIF
         A(2,1) = s
         IF (k.NE.N) THEN
C COMPONENTS OF D WHICH DO NOT REDUCE THE EUCLIDEAN NORM                FIT2-165
            DO j = l, N
               ij = Ip(j)
               D(ij) = 0.D0
            ENDDO
            IF (k.EQ.0) THEN
C ERROR CODE                                                            FIT2-183
               Ir = -1
               GOTO 99999
            ENDIF
         ENDIF
C COMPUTATION OF D                                                      FIT2-170
         ij = Ip(k)
         D(ij) = A(k,n1)/A(k,k)
         IF (k.NE.1) THEN
            DO j = 2, k
               l = k + 2 - j
               s = A(l - 1,n1)
               DO i = l, k
                  ij = Ip(i)
                  s = s - A(l - 1,i)*D(ij)
               ENDDO
               ij = Ip(l - 1)
               D(ij) = s/A(l - 1,l - 1)
            ENDDO
         ENDIF
      ELSEIF (k.EQ.0) THEN
         Ir = -1
      ELSE
C INVERSE OF THE TRIANGULAR MATRIX R STORED IN D                        FIT2-132
         DO j = 1, k
            D(j) = A(j,j)
            A(j,j) = 1.D0/D(j)
            IF (j.NE.1) THEN
               i = j
               DO l = 2, j
                  i1 = i
                  i = i - 1
                  s = 0.D0
                  DO l1 = i1, j
                     s = s + A(i,l1)*A(j,l1)
                  ENDDO
                  A(j,i) = -s/D(i)
               ENDDO
            ENDIF
         ENDDO
C INVERSE OF THE PRODUCT MATRIX                                         FIT2-146
         DO j = 1, k
            DO i = 1, j
               l = MAX0(Ip(j),Ip(i))
               ij = Ip(i) + Ip(j) + (l*(l - 3))/2
               s = 0.D0
               DO l1 = j, k
                  s = s + A(l1,i)*A(l1,j)
               ENDDO
               D(ij) = s
            ENDDO
         ENDDO
      ENDIF
99999 END
