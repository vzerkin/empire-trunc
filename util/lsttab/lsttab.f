      PROGRAM LSTTAB
C-Title  : Program LSTTAB
C-Purpose: Tabulate ENDF and EXFOR data in PLOTTAB format
C-Author : A.Trkov, IAEA-NDS.
C-Version: 00/12 Original code
C-V  02/06  Fix formal parameters calling DXSEND (A.Trkov).
C-V  02/12  Fix DXSEXF retrieval of elastic angular distrib (Trkov).
C-V  03/11  Increase limit on MXP from 100000 to 200000 (Trkov).
C-V  03/12  Upgrade to DXSELM for reconstructing element data (Trkov).
C-V  04/01  Write LSTTAB.LOG with messages and warnings (Trkov).
C-V  04/09  - Discrete levels x-sect. request by level energy (Trkov)
C-V         - Fix conversion from CM to lab for natural elements.
C-V  05/02  - Read projectile ZA from columns 79-84 (Trkov)
C-V         - Fix DXSEXF routine to test for projectile.
C-V  05/04  Increase limit on MXP from 200000 to 300000 (Trkov).
C-V  05/06  Check residual production for MF3/MT9000 (Trkov).
C-M  
C-M  Manual for Program LSTTAB
C-M  =========================
C-M
C-M  The program uses the list file generated by PLOTC4 to extract
C-M  data from an ENDF file and from the C4 file containing EXFOR
C-M  data in computational format (generated by X4TOX4) and writes
C-M  them in PLOTTAB "curves" and "points" format named LSTTAB.CUR
C-M  and LSTTAB.PNT, respectively.
C-M
C-M  Instructions:
C-M  Input parameters can be entered interactively in response to
C-M  the prompts on the screen:
C-M  1  PLOTC4 list file.
C-M  2  EXFOR source file in computational C4 format.
C-M  3a ENDF source file.
C-M  3b Label to appear on the plot for this source file.
C-M     NOTE: Up to MXEN files can be specified.
C-M  4  Resolution broadening fraction (0<Ep6<0.1)
C-M  5a Index number from the PLOTC4 list file to be processed.
C-M  5b Scaling factor for this set (default scaling factor=1,
C-M     an arbitrary factor may be assigned, for example to
C-M     differentiate between data sets on the same plot).
C-M     NOTE: Several pairs of entries may be chosen, terminated
C-M     by blank.
C-M
C-M  Files used:
C-M   Name Unit   Description
C-M   FLLS LLS=1  PLOTC4 list file.
C-M   FLEF LEF=2  ENDF source file.
C-M   FLC4 LC4=3  EXFOR source file in computational format.
C-M   FLPN LPN=7  Selected experimental points (PLOTTAB points fmt).
C-M   FLCU LCU=8  Selected curve from ENDF file (PLOTTAB points fmt).
C-M   FLLG LLG=9  Log-file for error messages and warnings.
C-M
C-Extern.: DXSELM,DXSEND,DXSEN1,DXSEXF,COMCUR
C-
      PARAMETER   (MPT=1000,MXP=300000,MXR=600000,MXEN=5,MXIS=10)
      CHARACTER*1  CM
      CHARACTER*40 BLNK,FLNM,FLLS,FLC4,FLPN,FLCU,FLLG
     1            ,FLEF(MXEN),COM(MXEN)
      CHARACTER*84 COM1,COM2
      CHARACTER*84 C84,RFX(MPT)
      DIMENSION    ES(MXP),SG(MXP),RWO(MXR),ZEL(MXIS),FRC(MXIS)
C* Default logical file units
      DATA LLS,LEF,LC4,LKB,LTT,LCU,LPN,LLG
     1    /  1,  2,  3,  5,  6, 7, 8, 9 /
      DATA BLNK/'                                        '/
     1     FLLS/'PLOTC4.LST'/
     3     FLC4/'C4.DAT'/
     7     FLPN/'LSTTAB.PNT'/
     8     FLCU/'LSTTAB.CUR'/
     9     FLLG/'LSTTAB.LST'/
     2     FLEF(1)/'ENDF.DAT'/
C*
      DATA PI/3.14159265/
      DATA EP6/0.03/
C*
C* Write banner
      WRITE(LTT,91) ' LSTTAB - Extract Data from ENDF / C4   '
      WRITE(LTT,91) ' ------------------------------------   '
      WRITE(LTT,91)
C* Define the PLOTC4 list file
   12 WRITE(LTT,91) ' Default PLOTC4 list filename         : ',FLLS
      WRITE(LTT,91) '$          Enter new name to redefine : '
      READ (LKB,91) FLNM
      IF(FLNM.NE.BLNK) FLLS=FLNM
      OPEN (UNIT=LLS,FILE=FLLS,STATUS='OLD',ERR=12)
C* Read the PLOTC4 list file
      CALL RDC4LS(LLS,NID,RFX)
      CLOSE(UNIT=LLS)
C* Define the EXFOR file in computational format
   22 WRITE(LTT,91) ' Default C4 file of EXFOR data        : ',FLC4
      WRITE(LTT,91) '$          Enter new name to redefine : '
      READ (LKB,91) FLNM
      IF(FLNM.NE.BLNK) FLC4=FLNM
      OPEN (UNIT=LC4,FILE=FLC4,STATUS='OLD',ERR=22)
C* Define the ENDF files
      NEN=0
      WRITE(LTT,91) ' Enter ENDF files terminated by "-"     '
      GO TO 25
   24 WRITE(LTT,91) '         ERROR - Redo: Invalid filename ',FLNM
   25 WRITE(LTT,91) '$            Enter the filename       : '
      READ (LKB,91) FLNM
      IF(FLNM.EQ.BLNK .AND. NEN.EQ.0) FLNM=FLEF(1)
      IF(FLNM.EQ.BLNK .OR.  FLNM(1:1).EQ.'-') GO TO 30
      OPEN (UNIT=LEF,FILE=FLNM,STATUS='OLD',ERR=24)
      CLOSE(UNIT=LEF)
      NEN=NEN+1
      COM(NEN)=FLNM
      FLEF(NEN)=FLNM
      GO TO 25
   30 CONTINUE
C...  IF(NEN.LE.1) GO TO 40
      WRITE(LTT,95) ' Total number of ENDF files entered     ',NEN
C* Redefine labels if necessary
      DO 32 I=1,NEN
      WRITE(LTT,91) ' ENDF file                            : ',FLEF(I)
      WRITE(LTT,91) '$  Enter new label to redefine default: '
      READ (LKB,91) FLNM
      IF(FLNM.NE.BLNK) COM(I)=FLNM
   32 CONTINUE
C*
   40 WRITE(LTT,91) '$Enter the resol.broadening fraction  : '
      READ (LKB,98) DMY
      IF(DMY.GT.0.1) THEN
        WRITE(LTT,91) ' ERROR: Range 0<ep6<0.1 - Redo          '
        GO TO 40
      ELSE IF(DMY.GT.0) THEN
        EP6=DMY
      END IF
C*
C* Open the output files
      OPEN (UNIT=LPN,FILE=FLPN,STATUS='UNKNOWN')
      OPEN (UNIT=LCU,FILE=FLCU,STATUS='UNKNOWN')
      OPEN (UNIT=LLG,FILE=FLLG,STATUS='UNKNOWN')
C* Print input specifications to terminal
      WRITE(LTT,91) ' PLOTC4 list file                     : ',FLLS
      WRITE(LTT,91) ' C4 file of EXFOR data                : ',FLC4
      WRITE(LTT,91) ' List of ENDF files                     '
     &             ,'Labels                                  '
      DO I=1,NEN
        WRITE(LTT,91) '   '//FLEF(I),COM(I)
      END DO
      WRITE(LTT,93) ' Resolution broadening fraction       : ',EP6
C* Write banner to log file
      WRITE(LLG,91)
      WRITE(LLG,91) ' LSTTAB - Extract Data from ENDF / C4   '
      WRITE(LLG,91) ' ------------------------------------   '
      WRITE(LLG,91)
      WRITE(LLG,91) ' PLOTC4 list file                     : ',FLLS
      WRITE(LLG,91) ' C4 file of EXFOR data                : ',FLC4
      WRITE(LLG,91) ' List of ENDF files                     '
     &             ,'Labels                                  '
      DO I=1,NEN
        WRITE(LLG,91) '   '//FLEF(I),COM(I)
      END DO
      WRITE(LLG,93) ' Resolution broadening fraction       : ',EP6
C*
C* Select the PLOTC4 list entry index
   50 WRITE(LTT,91) '$Enter entry index number             : '
      READ (LKB,97,ERR=50) IDX
      IF(IDX.LE.0) GO TO 90
      IF(IDX.GT.NID) THEN
        WRITE(LTT,91) '           ERROR - Invalid entry - redo '
        GO TO 50
      END IF
   54 WRITE(LTT,91) '$Enter the x-sect. scaling factor     : '
      READ (LKB,98,ERR=54) SCL
      IF(SCL.EQ.0) SCL=1
C*
C* Process the index entry
      C84=RFX(IDX)
      READ (C84,92) IZ,IA,CM,IZP,MF,MT,JEP,JXP,JFX,EIN,DEG,EOU,IZI
      ZAI=IZI
C*
      COM2=C84(1:11)//C84(19:21)//C84(22:26)//' '
      IF(MF.EQ.3) THEN
        IF(C84(63:67).NE.'    ')
     &  WRITE(COM2(31:40),'(''El'',1P,E7.2E1,1X)') EOU
      ELSE
        WRITE(COM2(21:30),'(''Ei'',1PE7.2E1,1X)') EIN
        IF(C84(56:59).NE.'    ')
     &  WRITE(COM2(31:35),'(''An'',I3)') NINT(DEG)
        IF(C84(63:67).NE.'    ')
     &  WRITE(COM2(31:40),'(''Eo'',1P,E7.2E1,1X)') EOU
      END IF
      WRITE(COM2(41:58),'('' P'',I6,'' Out'',I6)') IZI,IZP
C*
C* Log the start of request
      WRITE(LLG,91)
      WRITE(LLG,95) ' Processing list index                : ',IDX
      WRITE(LLG,93) ' Scaling factor                       : ',SCL
      WRITE(LLG,95) ' Emitted particle ZA                  : ',IZP
      WRITE(LLG,99) COM2
C*
      IF(C84(55:62).EQ.'        '  ) DEG=-2
      IF(C84(63:72).EQ.'          ') EOU=-2
      ZA0=IZ*1000+IA
      IF(CM.NE.' ') ZA0=ZA0+0.1
      ELV=0
      ZAP=IZP
      PAR=-2
      IF     (MF.EQ.3) THEN
        KEA=0
        PAR=0
C*        Discrete energy level (if applicable)
        IF(EOU.GT.0) ELV=EOU
      ELSE IF(MF.EQ.4) THEN
C* Angular distributions (outg. particle energy-integrated)
        KEA=1
C*        Discrete energy level (if applicable)
        IF(EOU.GT.0) ELV=EOU
      ELSE IF(MF.EQ.5) THEN
C* Energy distributions (outg. particle angle-integrated)
        KEA=2
      ELSE IF(MF.EQ.6) THEN
C* Double differential distributions
        IF(DEG.LT.0) THEN
C*          Request angular distributions
          KEA=1
          PAR=EOU
        END IF
        IF(EOU.LT.0) THEN
C*          Request energy spectra
          KEA=2
          IF(DEG.GE.0) PAR=DEG
        END IF
      END IF
C*
C* Extract the data from the ENDF file
      DO 86 M=1,NEN
      ZA =ZA0
      MTE=MT
      IF(MT.EQ.9000) MTE=5
      IF(NEN.GT.1) 
     &WRITE(LLG,91) ' ------------------------------ File  : ',FLEF(M)
      OPEN (UNIT=LEF,FILE=FLEF(M),STATUS='OLD')
      NUC=0
      EL1=ELV
      ZEL(1)=ZA
      CALL DXSELM(LEF,NUC,ZEL,FRC,ZAP,MF ,MTE,KEA,EIN,PAR,EP6,ES,SG
     1           ,RWO,NP,MXP,MXR,LLG,EL1)
      IF(NP.LE.0) THEN
        PRINT *,'LSTTAB ERROR - No matching curves for',NINT(ZA)
        PRINT *,'       mt,kea,ein,par',mt,kea,ein,par
        WRITE(LLG,95)' LSTTAB ERROR - No matching curve for ZA',NINT(ZA)
        WRITE(LLG, *)' zap,mf,mt,kea,ein,par',izp,mf,mt,kea,ein,par
      END IF
      CLOSE(UNIT=LEF)
C* Prepare the ENDF comment header for the PLOTTAB curves file
      IF(COM(M).EQ.BLNK) THEN
        MAT =IZ*100+(IA-100*(IA/100))
        CALL COMCUR(MAT,MF,MTE,KEA,EIN,PAR,COM1)
      ELSE
        COM1=COM(M)
      END IF
      IF(EL1.GT.0) WRITE(COM2(31:40),'(''El'',1P,E7.2E1,1X)') EL1
C* Write the data to the PLOTTAB curves file
      WRITE(LCU,91) COM1,COM2
      DO 82 I=1,NP
C* Suppress printing negative or zero points
      EE=ES(I)
      IF(KEA.EQ.1) EE=ACOS(EE)*180/PI
      IF(EE.GT.0 .AND. EE.LT.1.E-9) EE=1.E-9
      FF=SG(I)*SCL
      IF(SG(I).GT.0) WRITE(LCU,94) EE,FF
   82 CONTINUE
      WRITE(LCU,94)
   86 CONTINUE
C*
C* Extract the data from the C4 file
      IF((MF.EQ.3 .OR. MF.EQ.4) .AND. ELV.GT.0) THEN
        PAR=ELV
        WRITE(COM2(31:40),'(''El'',1P,E7.2E1,1X)') ELV
      END IF
      WRITE(COM2(41:58),'('' P'',I6,'' Out'',I6)') IZI,IZP
      PRINT *,'DXSEXF:ZA0,ZAP,MF,MT,KEA,EIN,PAR'
     1          ,nint(ZA0),IZP,MF,MT,KEA,EIN,PAR
      CALL DXSEXF(LC4,LPN,ZAI,ZA0,ZAP,MF,MT,KEA,EIN,PAR,NP,NS,SCL,COM2)
      IF(NP.LE.0) THEN
        PRINT *,'DXSEXF ERROR: No matching points'
      ELSE
        PRINT *,'DXSEXF No.of points',NP
      END IF
C*
C* Try another set of points
      REWIND LC4
      GO TO 50
C* All processing completed
   90 STOP 'LSTTAB Completed'
C*
   91 FORMAT(2A40)
   92 FORMAT(I3,4X,I3,A1,I6,I4,I5,3I6,1P,E10.3,0P,F8.2,1P,E10.3,6X,I8)
   93 FORMAT(A40,F10.3)
   94 FORMAT(1P,3(E11.5E1,E11.4))
   95 FORMAT(A40,I6)
   96 FORMAT(A84)
   97 FORMAT(BN,I10)
   98 FORMAT(BN,F10.0)
   99 FORMAT(A70)
      END
      SUBROUTINE RDC4LS(LLS,NID,RFX)
C-Title  : Subroutine RDC4LS
C-Purpose: Read the PLOTC4 list file
      CHARACTER*84 C84,RFX(1)
      CHARACTER*1  CM
C*
      NID=0
      READ (LLS,96,END=20) C84
C* Test for partial list file beginning with " MATERIAL "
      IF(C84(1:10).EQ.' MATERIAL ') GO TO 15
      IF(C84(1:10).NE.' PLOT ENDF') THEN
C* Test for partial list file beginning with the items list directly
C* (dummy read)
        READ (C84,92,ERR=14) IZ,IA,CM,IZP,MF,MT,JEP,JXP,JFX,EIN,DEG,EOU
        GO TO 17
      END IF
C* Search for the " MATERIAL " string
   14 READ (LLS,96,END=20) C84
      IF(C84(1:10).NE.' MATERIAL ') GO TO 14
   15 READ (LLS,96) C84
      READ (LLS,96) C84
C* Read the items into RFX array
   16 READ (LLS,96,END=20) C84
   17 IF(C84(1:10).EQ.' =========') GO TO 20
C* Move any "metastable" nuclide flag for easier reading
      IF(C84(9:9).EQ.'M') THEN
        C84( 9: 9)=' '
        C84(11:11)='M'
      END IF
      IF(C84(10:10).EQ.'M') THEN
        C84(10:10)=' '
        C84(11:11)='M'
      END IF
C* Save the record
      NID=NID+1
      RFX(NID)=C84
      GO TO 16
C* File processed
   20 CLOSE(UNIT=LLS)
      IF(NID.LT.1) STOP ' LSTTAB ERROR - Invalid PLOTC4 list'
      RETURN
   92 FORMAT(I3,4X,I1,2X,A1,2X,I4,I4,I5,3I6,F10.0,F8.2,F10.0,I4)
   96 FORMAT(A84)
      END
      SUBROUTINE COMCUR(MAT,MF,MT,KEA,EIN,PAR,COM)
C-Title  : CURCOM Subroutine
C-Purpose: Construct comment headed for the "curves" file
      CHARACTER*84  COM
      CHARACTER*1   UN,UO
      DATA PI/3.14159265/
C*
      IF(MF.EQ.3) THEN
        WRITE(COM,925) MAT,MF,MT
      ELSE
        IF     (EIN.GT.1000000) THEN
          UN='M'
          EE=EIN/1000000
        ELSE IF(EIN.GT.1000   ) THEN
          UN='K'
          EE=EIN/1000
        ELSE
          EE=EIN
        UN=' '
        END IF
        IF(KEA.EQ.2) THEN
          IF(PAR.GE.0) THEN
c...        DEG=ACOS(PAR)*180/PI
            DEG=PAR
            WRITE(COM,924) MT,UN,EE,NINT(DEG)
          ELSE
            WRITE(COM,924) MT,UN,EE
          END IF
        ELSE
          IF     (PAR.GT.999999) THEN
            UO='M'
            EO=PAR/1000000
          ELSE IF(PAR.GT.999   ) THEN
            UO='K'
            EO=PAR/1000
          ELSE
            EO=PAR
            UO=' '
          END IF
          WRITE(COM,922) MT,UN,EE,UO,EO
          IF(EO.LT.0) COM(16:23)='        '
        END IF
      END IF
      RETURN
  922 FORMAT('MT',I3,1X,A1,'eV',F5.1,1X,A1,'eV',F5.1)
  924 FORMAT('MT',I3,1X,A1,'eV',F5.1,:,'  Deg',I3)
  925 FORMAT(' MAT',I4,' MF',I2,' MT',I3,:,20X,' EI',1P,E10.3)
      END
      SUBROUTINE DXSEXF(LC4,LPN,ZAI,ZA0,ZAP0,MF0,MT0,KEA,EI0,PR0
     1                 ,NPP,NS,SCL,COM2)
C-Title  : Subroutine DXSEXF
C-Purpose: Extract data from EXFOR computational format file
C-Description:
C-D  Numeric data are extracted from the C4 file (EXFOR computational
C-D  format)
C-D   LC4   - Unit number of the C4 file (input).
C-D   LPN   - Unit number of the output discrete points file in
C-D           PLOTTAB format.
C-D   ZAI   - Projectile ZA designation.
C-D   ZA0   - Target nucleus ZA designation.
C-D   ZAP0  - Outgoing particle ZA designation.
C-D   MF0   - Requested MF number (ENDF format conventions)
C-D   MT0   - Requested MT number (ENDF format conventions)
C-D   KEA   - Flag for the type of plot requested:
C-D            0  - tabulated data (cross sections)
C-D            1  - angular distributions
C-D            2  - energy distributions.
C-D   EI0   - Incident particle energy.
C-D   PR0   - Additional parameter for differential data:
C-D            Energy  level for discrete level angular distributions [eV].
C-D            Angle   for double differential energy distributions [deg].
C-D            Energy  for double differential angular distributions [eV].
C-D   NPP   -  Total number of points written to output.
C-D   NS    -  Number of different data sets written to output.
C-D   SCL   -  Cross section scaling factor (input parameter, can
C-D            be used to convert units).
C-D   COM2  -  Comment to label the output data sets.
C-
      CHARACTER*1  MM(3),CM,C1,C2,C3
      CHARACTER*11 REC(6)
      CHARACTER*25 REF,RF0
      CHARACTER*60 COM2
      DATA MM/' ','M','N'/
C* Fractional tolerance to identify "equal" arguments
C* For best results the tolerance limits should be consistent with
C* those defined in PLOTC4 for the same variables.
      DATA ETOL,E2TOL/0.015, 0.003/
C*
      DATA PI/3.14159265/
C*
      RF0='                         '
      IZAI=ZAI
      IZA0=ZA0
      IZAP0=ZAP0
      IM   =10*(ZA0-IZA0)+1.1
      NS   =0
      NPP  =0
      NP   =0
      DO 12 J=1,6
      REC(J)='           '
   12 CONTINUE
C*
   20 READ (LC4,901,END=80) IZAI,IZA,CM,MF,MT,C1,C2,C3
     1                     ,F1,F2,F3,F4,F5,F6,F7,F8,LBL,REF
C* Test for matching data request
      IF(IZAI.NE. IZAI ) GO TO 20
      IF(IZA0.GT.0 .AND. IZA .NE.IZA0  ) GO TO 20
      IF(CM  .NE.MM(IM)) GO TO 20
      IF(MF  .NE.MF0   ) GO TO 20
      IF(MT  .NE.MT0   ) GO TO 20
C* Test outgoing particle and discrete level energy
      IF(MF.EQ.3) THEN
        IF(PR0.GE.0 .AND. ABS(PR0-F7).GT.E2TOL*F7) GO TO 20
          IF6=F6
        IF(MT.GE.9000 .AND. IZAP0.NE.IF6) GO TO 20
      ELSE IF(MF.GE.4 .AND. MF.LE.6) THEN
C* Test outgoing particle
        IF(MT.GE.9000) THEN
          IF6=F6
c...      IF(F6.EQ.0) IF6=1
          IF(IZAP0.NE.IF6) GO TO 20
        END IF
C* Test incident energy
        IF(ABS(EI0-F1).GT.ETOL*F1) GO TO 20
C* Test outgoing particle and discrete level energy
        IF( MF.EQ.4 .AND.
     &    (PR0.GE.0 .AND. ABS(PR0-F7).GT.E2TOL*F7) ) GO TO 20
C* Test outgoing particle energy for correl.ang.distributions
        IF((MF.EQ.6 .AND. KEA.EQ.1) .AND.
     &     ABS(PR0-F7).GT.ETOL*F7 ) GO TO 20
C* Test outgoing particle scattering angle for correal.ang.distrib.
        IF((MF.EQ.6 .AND. KEA.EQ.2) .AND.
     &     ABS(COS(PR0*PI/180)-F5).GT.ETOL) GO TO 20
      ELSE
C* Ignore other MF cases
        GO TO 20
      END IF
C* Identify next set of points if author changes
      IF(REF.NE.RF0) THEN
        IF(NS.GT.0) WRITE(LPN,920)
        NP=0
        NS=NS+1
        WRITE(LPN,902) REF,COM2
        RF0=REF
      END IF
C*
      IF(MF.EQ.3) THEN
C* Simple cross sections
        WRITE(REC(1),911) F1
        IF(F2.NE.0) THEN
          WRITE(REC(2),912) F2
          WRITE(REC(3),912) F2
        ELSE
          REC(2)='           '
          REC(3)='           '
        END IF
        WRITE(REC(4),911) F3
        IF(F4.NE.0) THEN
          G4=MIN(0.9*F3, F4)
          WRITE(REC(5),912) G4
          WRITE(REC(6),912) F4
        ELSE
          REC(5)='           '
          REC(6)='           '
        END IF
C* Angular distributions
      ELSE IF(MF.EQ.4 .OR.(MF.EQ.6 .AND. KEA.EQ.1) ) THEN
C* Convert elastic ang.distrib. from CM to Lab if necessary
        IF((MF.EQ.4 .AND. MT.EQ.2) .AND. C3.NE.' ') THEN
C* Definitions:
C*  XCM - cosine os scattering angle in CM system
C*  XLB - cosine os scattering angle in Lab system
C*  AWR - mass ratio of target and projectile (=A)
C*  AWP - mass ratio of ejectile and projectile (=A-dash)
C* Kinematics equations for 2-body problem form ENDF-102 Appendix E
C* Equation (E.3)
C* Use approximate target mass
          AWR=IZA-1000*(IZA/1000)
          IF(AWR.LT.0.1) AWR=2.1*(IZA/1000)
          AWP=1
          QI =0
          EIN=F1
          XCM=F5
C*
          BET=(AWR*(AWR+1-AWP)/AWP)*( 1+(1+AWR)*QI/(AWR*EIN) )
          BET=SQRT(BET)
C*          Lab cosine of scattering: equation (E.11)
          SBT= BET*BET + 1 + 2*XCM*BET
          QBT= SQRT( SBT )
          XLB=(1+BET*XCM)/QBT
C*          Jacobian of the transformation dXCM/dXLB (derivative of E.11)
          DCM=(SBT*QBT)/(BET*BET*(BET+XCM))
          F3=F3*DCM
          F5=XLB
        END IF
C* Convert cosine (and uncertainty) to degrees
        A6=F5+F6
        IF(A6.GT.1) A6=F5-F6
        F5=ACOS(F5)*180/PI
        WRITE(REC(1),911) F5
        IF(MT.LT.9000) THEN
          A6=ABS(ACOS(A6)*180/PI-F5)
          WRITE(REC(2),912) A6
          WRITE(REC(3),912) A6
        ELSE
          REC(2)='           '
          REC(3)='           '
        END IF
C* Energy spectra
      ELSE IF(MF.EQ.5 .OR.(MF.EQ.6 .AND. KEA.EQ.2) ) THEN
        FF=F7
        IF(FF.GT.0 .AND. FF.LT.1.E-9) FF=1.E-9
        WRITE(REC(1),911) FF
        IF(F8.NE.0) THEN
          WRITE(REC(2),912) F8
          WRITE(REC(3),912) F8
        ELSE
          REC(2)='           '
          REC(3)='           '
        END IF
      END IF
C* Cross section
        WRITE(REC(4),912) F3*SCL
        IF(F4.NE.0) THEN
          G4=MIN(0.9*F3, F4)
          WRITE(REC(5),912) F4*SCL
          WRITE(REC(6),912) G4*SCL
        ELSE
          REC(5)='           '
          REC(6)='           '
        END IF
C* Suppress printing negative or zero points
      IF(F3.GT.0) THEN
        NP=NP+1
        NPP=NPP+1
        WRITE(LPN,920) (REC(J),J=1,6)
      END IF
      GO TO 20
C* End of data set
   80 WRITE(LPN,920)
      RETURN
C*
  901 FORMAT(I5,I6,A1,I3,I4,3A1,8F9.0,A3,A25)
  902 FORMAT(A25,15X,A60)
  911 FORMAT(1P,E11.4E1)
  912 FORMAT(1P,E11.3)
  920 FORMAT(6A11)
      END

